todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9979740315193248	WITHOUT_CLASSIFICATION	0.002025968480675216	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9979740315193248	WITHOUT_CLASSIFICATION	0.002025968480675216	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.6848726013617277	WITHOUT_CLASSIFICATION	0.3151273986382724	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9128970659826695	WITHOUT_CLASSIFICATION	0.08710293401733041	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8382167799150739	WITHOUT_CLASSIFICATION	0.1617832200849261	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.734818124223134	IMPLEMENTATION	0.265181875776866	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9679553114468851	WITHOUT_CLASSIFICATION	0.03204468855311491	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.5284603830306754	WITHOUT_CLASSIFICATION	0.47153961696932467	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.895325012312399	WITHOUT_CLASSIFICATION	0.10467498768760093	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5989424862753363	IMPLEMENTATION	0.40105751372466364	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9923479042915094	WITHOUT_CLASSIFICATION	0.00765209570849067	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.734818124223134	IMPLEMENTATION	0.265181875776866	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.904951403519939	IMPLEMENTATION	0.095048596480061	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.904951403519939	IMPLEMENTATION	0.095048596480061	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9808496139496151	WITHOUT_CLASSIFICATION	0.019150386050384983	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5626727890022397	WITHOUT_CLASSIFICATION	0.4373272109977602	IMPLEMENTATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999958275211767	IMPLEMENTATION	4.172478823258671E-6	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8894585757240068	WITHOUT_CLASSIFICATION	0.11054142427599326	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999649375341073	WITHOUT_CLASSIFICATION	3.5062465892743754E-5	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7483377501912374	IMPLEMENTATION	0.2516622498087625	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.6563050499043952	WITHOUT_CLASSIFICATION	0.3436949500956047	IMPLEMENTATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9999563181787177	WITHOUT_CLASSIFICATION	4.3681821282385426E-5	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.7236082879683738	WITHOUT_CLASSIFICATION	0.2763917120316261	IMPLEMENTATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8934467622730801	IMPLEMENTATION	0.10655323772691999	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8934467622730801	IMPLEMENTATION	0.10655323772691999	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.5798098440290335	IMPLEMENTATION	0.42019015597096665	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.6880887811435505	WITHOUT_CLASSIFICATION	0.3119112188564494	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.5795858998287743	IMPLEMENTATION	0.4204141001712256	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.5952290813930586	WITHOUT_CLASSIFICATION	0.4047709186069413	IMPLEMENTATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9812864679744753	IMPLEMENTATION	0.018713532025524768	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.8903482669945446	WITHOUT_CLASSIFICATION	0.10965173300545532	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5284603830306754	WITHOUT_CLASSIFICATION	0.47153961696932467	IMPLEMENTATION
todo : look at optimizing these...	IMPLEMENTATION	0.9997545522365616	WITHOUT_CLASSIFICATION	2.4544776343831304E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.7766078146660722	IMPLEMENTATION	0.2233921853339277	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9633455137955584	IMPLEMENTATION	0.03665448620444164	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.8003624875776212	IMPLEMENTATION	0.19963751242237887	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.946645390709743	IMPLEMENTATION	0.053354609290257135	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.7859409127252928	WITHOUT_CLASSIFICATION	0.21405908727470715	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.8572462576369773	WITHOUT_CLASSIFICATION	0.1427537423630228	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.724169021282233	IMPLEMENTATION	0.27583097871776685	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.724169021282233	IMPLEMENTATION	0.27583097871776685	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9216930347397602	WITHOUT_CLASSIFICATION	0.07830696526023993	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999189323264305	WITHOUT_CLASSIFICATION	8.106767356950673E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9971277993188825	WITHOUT_CLASSIFICATION	0.0028722006811174334	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9793696798129206	IMPLEMENTATION	0.020630320187079547	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.5295049834196386	WITHOUT_CLASSIFICATION	0.47049501658036147	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.5560625701323447	IMPLEMENTATION	0.4439374298676554	WITHOUT_CLASSIFICATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.5510939934572099	WITHOUT_CLASSIFICATION	0.4489060065427901	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9994024998918215	WITHOUT_CLASSIFICATION	5.975001081785181E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.892788391776319	WITHOUT_CLASSIFICATION	0.10721160822368107	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9660655089286161	WITHOUT_CLASSIFICATION	0.0339344910713839	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.900868028783239	WITHOUT_CLASSIFICATION	0.09913197121676108	IMPLEMENTATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9049793050516439	IMPLEMENTATION	0.09502069494835609	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.745811837469806	IMPLEMENTATION	0.254188162530194	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6000856503522441	IMPLEMENTATION	0.39991434964775585	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.5605793579753324	WITHOUT_CLASSIFICATION	0.43942064202466746	IMPLEMENTATION
TODO: proxies!	IMPLEMENTATION	0.6000856503522441	IMPLEMENTATION	0.39991434964775585	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.8341325845167926	IMPLEMENTATION	0.1658674154832075	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.5616373656012366	IMPLEMENTATION	0.4383626343987633	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6000856503522441	IMPLEMENTATION	0.39991434964775585	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998486367722086	WITHOUT_CLASSIFICATION	1.513632277913471E-4	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998486367722086	WITHOUT_CLASSIFICATION	1.513632277913471E-4	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9978999277552004	IMPLEMENTATION	0.002100072244799555	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.7906437284573241	WITHOUT_CLASSIFICATION	0.20935627154267594	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999794067190975	WITHOUT_CLASSIFICATION	2.059328090251515E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999389832289511	WITHOUT_CLASSIFICATION	6.101677104886078E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999389832289511	WITHOUT_CLASSIFICATION	6.101677104886078E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.999828464859782	WITHOUT_CLASSIFICATION	1.715351402180158E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9998919592721012	WITHOUT_CLASSIFICATION	1.0804072789880951E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9995436758951003	WITHOUT_CLASSIFICATION	4.5632410489966613E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9995436758951003	WITHOUT_CLASSIFICATION	4.5632410489966613E-4	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999190725296251	WITHOUT_CLASSIFICATION	8.09274703749084E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998432801088919	WITHOUT_CLASSIFICATION	1.5671989110815177E-4	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999941066190438	WITHOUT_CLASSIFICATION	5.893380956270822E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999615687554465	WITHOUT_CLASSIFICATION	3.843124455349746E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999947480150135	WITHOUT_CLASSIFICATION	5.251984986461333E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999947480150135	WITHOUT_CLASSIFICATION	5.251984986461333E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999319163380687	WITHOUT_CLASSIFICATION	6.808366193137807E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.998292702997746	WITHOUT_CLASSIFICATION	0.0017072970022539494	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999013470823832	WITHOUT_CLASSIFICATION	9.865291761678437E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999921376963534	WITHOUT_CLASSIFICATION	7.862303646534161E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998569643907177	WITHOUT_CLASSIFICATION	1.4303560928230494E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999183953058999	WITHOUT_CLASSIFICATION	8.16046941001318E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9997854624847601	WITHOUT_CLASSIFICATION	2.1453751523989483E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9997739483799103	WITHOUT_CLASSIFICATION	2.2605162008971483E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997358799272147	WITHOUT_CLASSIFICATION	2.641200727853424E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999846179696807	WITHOUT_CLASSIFICATION	1.5382030319221603E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9975516341927422	WITHOUT_CLASSIFICATION	0.0024483658072578796	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999294507864157	WITHOUT_CLASSIFICATION	7.054921358436851E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999265504356337	WITHOUT_CLASSIFICATION	7.344956436627322E-5	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998877636987707	WITHOUT_CLASSIFICATION	1.1223630122932451E-4	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.6894333096485822	WITHOUT_CLASSIFICATION	0.31056669035141776	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999947548719628	WITHOUT_CLASSIFICATION	5.245128037238842E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999236524932065	WITHOUT_CLASSIFICATION	7.634750679354367E-5	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999746181248192	WITHOUT_CLASSIFICATION	2.53818751807043E-5	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999789915663067	WITHOUT_CLASSIFICATION	2.1008433693359562E-5	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9995273880075433	WITHOUT_CLASSIFICATION	4.726119924567529E-4	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999217035929322	WITHOUT_CLASSIFICATION	7.829640706791033E-5	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999087861283001	WITHOUT_CLASSIFICATION	9.12138716998516E-5	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999779003388672	WITHOUT_CLASSIFICATION	2.2099661132768743E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999781430543874	WITHOUT_CLASSIFICATION	2.185694561269227E-5	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.999898878312642	WITHOUT_CLASSIFICATION	1.0112168735805404E-4	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998414601370383	WITHOUT_CLASSIFICATION	1.585398629617015E-4	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9998072268599311	WITHOUT_CLASSIFICATION	1.9277314006904437E-4	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997706372942854	WITHOUT_CLASSIFICATION	2.2936270571464966E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999476814399924	WITHOUT_CLASSIFICATION	5.231856000760881E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999200440655075	WITHOUT_CLASSIFICATION	7.995593449246109E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999200440655075	WITHOUT_CLASSIFICATION	7.995593449246109E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997706372942854	WITHOUT_CLASSIFICATION	2.2936270571464966E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.971540893221891	IMPLEMENTATION	0.02845910677810895	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998433889887163	WITHOUT_CLASSIFICATION	1.5661101128362407E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9996065200392856	WITHOUT_CLASSIFICATION	3.9347996071426505E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999813937793607	WITHOUT_CLASSIFICATION	1.8606220639359103E-5	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9998919674173423	WITHOUT_CLASSIFICATION	1.0803258265764632E-4	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9859519306494307	WITHOUT_CLASSIFICATION	0.0140480693505694	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9997451250621103	WITHOUT_CLASSIFICATION	2.548749378897248E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9952828683028611	WITHOUT_CLASSIFICATION	0.004717131697138899	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9994899022617649	WITHOUT_CLASSIFICATION	5.100977382350439E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998531587828065	WITHOUT_CLASSIFICATION	1.4684121719354588E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999200440655075	WITHOUT_CLASSIFICATION	7.995593449246109E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999255984969753	WITHOUT_CLASSIFICATION	7.440150302470073E-5	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9987855541316939	WITHOUT_CLASSIFICATION	0.001214445868306152	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999784586516656	WITHOUT_CLASSIFICATION	2.154134833441827E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999955211355311	WITHOUT_CLASSIFICATION	4.478864468880093E-6	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999603878071389	WITHOUT_CLASSIFICATION	3.9612192861045926E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999928451825284	WITHOUT_CLASSIFICATION	7.1548174716060665E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999941607666062	WITHOUT_CLASSIFICATION	5.8392333938384096E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999942003862005	WITHOUT_CLASSIFICATION	5.799613799579233E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999381293783196	WITHOUT_CLASSIFICATION	6.18706216804501E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999977791187758	WITHOUT_CLASSIFICATION	2.220881224199536E-5	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996805616261417	WITHOUT_CLASSIFICATION	3.1943837385821437E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997815692126584	WITHOUT_CLASSIFICATION	2.184307873415358E-4	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7804657931523254	IMPLEMENTATION	0.2195342068476746	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9994929242763461	WITHOUT_CLASSIFICATION	5.070757236538908E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999728567305274	WITHOUT_CLASSIFICATION	2.7143269472599394E-5	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9979820458174335	WITHOUT_CLASSIFICATION	0.0020179541825664895	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997139934668914	WITHOUT_CLASSIFICATION	2.860065331086769E-4	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999998171792859	WITHOUT_CLASSIFICATION	1.828207141276918E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9997979143531285	WITHOUT_CLASSIFICATION	2.020856468715722E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999100718829951	WITHOUT_CLASSIFICATION	8.992811700482951E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999942943144579	WITHOUT_CLASSIFICATION	5.705685542082756E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998516057210767	WITHOUT_CLASSIFICATION	1.483942789232732E-4	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999598194013627	WITHOUT_CLASSIFICATION	4.018059863722142E-5	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999155848185	WITHOUT_CLASSIFICATION	8.441518153785561E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998516057210767	WITHOUT_CLASSIFICATION	1.483942789232732E-4	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9956491315362879	WITHOUT_CLASSIFICATION	0.004350868463712088	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998272689683513	WITHOUT_CLASSIFICATION	1.727310316488204E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9997654527014619	WITHOUT_CLASSIFICATION	2.3454729853801258E-4	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9996193937063845	WITHOUT_CLASSIFICATION	3.8060629361554536E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998351183877076	WITHOUT_CLASSIFICATION	1.6488161229247792E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998351183877076	WITHOUT_CLASSIFICATION	1.6488161229247792E-4	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997418102144052	WITHOUT_CLASSIFICATION	2.581897855947957E-4	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998710358081	WITHOUT_CLASSIFICATION	1.2896419189006695E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999799174525563	WITHOUT_CLASSIFICATION	2.008254744363646E-5	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9992608202567453	WITHOUT_CLASSIFICATION	7.39179743254571E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999992359486315	WITHOUT_CLASSIFICATION	7.640513684941852E-6	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999866735764276	WITHOUT_CLASSIFICATION	1.3326423572421106E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9941869716688873	WITHOUT_CLASSIFICATION	0.005813028331112806	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9997800577501328	WITHOUT_CLASSIFICATION	2.199422498671025E-4	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999978363906802	WITHOUT_CLASSIFICATION	2.163609319809684E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999760806505691	WITHOUT_CLASSIFICATION	2.3919349430841212E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999760806505691	WITHOUT_CLASSIFICATION	2.3919349430841212E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998947867566242	WITHOUT_CLASSIFICATION	1.0521324337575788E-4	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9997663734200203	WITHOUT_CLASSIFICATION	2.3362657997978836E-4	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999127256284289	WITHOUT_CLASSIFICATION	8.727437157101474E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999760806505691	WITHOUT_CLASSIFICATION	2.3919349430841212E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998947867566242	WITHOUT_CLASSIFICATION	1.0521324337575788E-4	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998947867566242	WITHOUT_CLASSIFICATION	1.0521324337575788E-4	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999708320313966	WITHOUT_CLASSIFICATION	2.9167968603370173E-5	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9995878229074895	WITHOUT_CLASSIFICATION	4.121770925105477E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999993727604967	WITHOUT_CLASSIFICATION	6.272395032591764E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999883182843128	WITHOUT_CLASSIFICATION	1.1681715687218247E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9976221508026318	WITHOUT_CLASSIFICATION	0.002377849197368177	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9976221508026318	WITHOUT_CLASSIFICATION	0.002377849197368177	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999650925738992	WITHOUT_CLASSIFICATION	3.49074261007712E-5	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998625184029648	WITHOUT_CLASSIFICATION	1.3748159703517746E-4	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999697091074532	WITHOUT_CLASSIFICATION	3.029089254676717E-5	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999894350681746	WITHOUT_CLASSIFICATION	1.0564931825272269E-5	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999894350681746	WITHOUT_CLASSIFICATION	1.0564931825272269E-5	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999909223636541	WITHOUT_CLASSIFICATION	9.077636345894317E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996766341195011	WITHOUT_CLASSIFICATION	3.233658804988827E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999550475334839	WITHOUT_CLASSIFICATION	4.495246651610963E-5	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999995097110156	WITHOUT_CLASSIFICATION	4.902889843221589E-7	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999568797320081	WITHOUT_CLASSIFICATION	4.3120267991917666E-5	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9985671359938936	WITHOUT_CLASSIFICATION	0.001432864006106363	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999133887360497	WITHOUT_CLASSIFICATION	8.661126395030218E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9993040400182847	WITHOUT_CLASSIFICATION	6.959599817153785E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999550475334839	WITHOUT_CLASSIFICATION	4.495246651610963E-5	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999315893780011	WITHOUT_CLASSIFICATION	6.841062199892905E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999616042400754	WITHOUT_CLASSIFICATION	3.839575992451008E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999616042400754	WITHOUT_CLASSIFICATION	3.839575992451008E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999986243910607	WITHOUT_CLASSIFICATION	1.375608939335196E-6	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999091390883553	WITHOUT_CLASSIFICATION	9.086091164477849E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9994748509381299	WITHOUT_CLASSIFICATION	5.251490618700197E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9968360449723704	WITHOUT_CLASSIFICATION	0.003163955027629639	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9996910410006064	WITHOUT_CLASSIFICATION	3.089589993936896E-4	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9992971923234607	WITHOUT_CLASSIFICATION	7.028076765393377E-4	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999389141037357	WITHOUT_CLASSIFICATION	6.108589626429911E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9997506426297929	WITHOUT_CLASSIFICATION	2.4935737020711655E-4	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9971963929902062	WITHOUT_CLASSIFICATION	0.0028036070097938346	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999977183677842	WITHOUT_CLASSIFICATION	2.281632215934907E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999977183677842	WITHOUT_CLASSIFICATION	2.281632215934907E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998767203519253	WITHOUT_CLASSIFICATION	1.2327964807466336E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999794067190975	WITHOUT_CLASSIFICATION	2.059328090251515E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999067176403678	WITHOUT_CLASSIFICATION	9.328235963233131E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999389832289511	WITHOUT_CLASSIFICATION	6.101677104886078E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9996855344778477	WITHOUT_CLASSIFICATION	3.144655221522571E-4	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.99973562923126	WITHOUT_CLASSIFICATION	2.6437076873991454E-4	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9997613985898963	WITHOUT_CLASSIFICATION	2.3860141010357717E-4	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9997487830741668	WITHOUT_CLASSIFICATION	2.5121692583319685E-4	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9997972991787979	WITHOUT_CLASSIFICATION	2.0270082120209146E-4	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999340423601022	WITHOUT_CLASSIFICATION	6.595763989776195E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9998388569143206	WITHOUT_CLASSIFICATION	1.6114308567943554E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9997487830741668	WITHOUT_CLASSIFICATION	2.5121692583319685E-4	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.999591978498402	WITHOUT_CLASSIFICATION	4.0802150159806907E-4	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.999567661916702	WITHOUT_CLASSIFICATION	4.3233808329807443E-4	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9997654740236243	WITHOUT_CLASSIFICATION	2.345259763756699E-4	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9998377591629745	WITHOUT_CLASSIFICATION	1.6224083702545163E-4	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998571109667067	WITHOUT_CLASSIFICATION	1.4288903329327636E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9995436758951003	WITHOUT_CLASSIFICATION	4.5632410489966613E-4	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9960268844973292	WITHOUT_CLASSIFICATION	0.003973115502670777	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998565421172775	WITHOUT_CLASSIFICATION	1.434578827224437E-4	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9998576014505806	WITHOUT_CLASSIFICATION	1.4239854941940617E-4	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9998472125084826	WITHOUT_CLASSIFICATION	1.5278749151736198E-4	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999534925382625	WITHOUT_CLASSIFICATION	4.65074617374268E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999833284623975	WITHOUT_CLASSIFICATION	1.6671537602552987E-5	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9998211261659986	WITHOUT_CLASSIFICATION	1.7887383400126526E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9921747366939587	WITHOUT_CLASSIFICATION	0.007825263306041356	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999801268311266	WITHOUT_CLASSIFICATION	1.9873168873339724E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999389832289511	WITHOUT_CLASSIFICATION	6.101677104886078E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999389832289511	WITHOUT_CLASSIFICATION	6.101677104886078E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999190725296251	WITHOUT_CLASSIFICATION	8.09274703749084E-5	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998326308567883	WITHOUT_CLASSIFICATION	1.6736914321166082E-4	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998887222606809	WITHOUT_CLASSIFICATION	1.112777393191181E-4	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997794102837252	WITHOUT_CLASSIFICATION	2.2058971627484354E-4	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999188011955774	WITHOUT_CLASSIFICATION	8.119880442263006E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999814837907755	WITHOUT_CLASSIFICATION	1.8516209224495427E-4	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9998844116603711	WITHOUT_CLASSIFICATION	1.1558833962894639E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994173493164736	WITHOUT_CLASSIFICATION	5.826506835262864E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994173493164736	WITHOUT_CLASSIFICATION	5.826506835262864E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999903084918228	WITHOUT_CLASSIFICATION	9.691508177293134E-6	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999945481151385	WITHOUT_CLASSIFICATION	5.451884861394812E-6	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998798825673193	WITHOUT_CLASSIFICATION	1.2011743268069213E-4	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998353877341687	WITHOUT_CLASSIFICATION	1.6461226583130422E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999483854332919	WITHOUT_CLASSIFICATION	5.161456670805985E-5	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999697307899129	WITHOUT_CLASSIFICATION	3.0269210087023998E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999608753667582	WITHOUT_CLASSIFICATION	3.9124633241859665E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998432801088919	WITHOUT_CLASSIFICATION	1.5671989110815177E-4	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9998806249446879	WITHOUT_CLASSIFICATION	1.1937505531216434E-4	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9998806249446879	WITHOUT_CLASSIFICATION	1.1937505531216434E-4	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9998380102325323	WITHOUT_CLASSIFICATION	1.6198976746762173E-4	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999570834171562	WITHOUT_CLASSIFICATION	4.291658284379507E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9998380102325323	WITHOUT_CLASSIFICATION	1.6198976746762173E-4	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999050543894179	WITHOUT_CLASSIFICATION	9.494561058216636E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.999947776795959	WITHOUT_CLASSIFICATION	5.222320404092752E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999389832289511	WITHOUT_CLASSIFICATION	6.101677104886078E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999400020237476	WITHOUT_CLASSIFICATION	5.9997976252550705E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.99978676740939	WITHOUT_CLASSIFICATION	2.132325906100554E-4	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999955523003284	WITHOUT_CLASSIFICATION	4.4476996715577856E-6	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999615687554465	WITHOUT_CLASSIFICATION	3.843124455349746E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999615687554465	WITHOUT_CLASSIFICATION	3.843124455349746E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9966697722811496	WITHOUT_CLASSIFICATION	0.003330227718850326	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999913191155246	WITHOUT_CLASSIFICATION	8.68088447543011E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999388220288296	WITHOUT_CLASSIFICATION	6.117797117054934E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999177117378164	WITHOUT_CLASSIFICATION	8.228826218355062E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999634460502141	WITHOUT_CLASSIFICATION	3.655394978584008E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999180387202561	WITHOUT_CLASSIFICATION	8.196127974384221E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999947480150135	WITHOUT_CLASSIFICATION	5.251984986461333E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999172631747861	WITHOUT_CLASSIFICATION	8.27368252138171E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999172631747861	WITHOUT_CLASSIFICATION	8.27368252138171E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999319163380687	WITHOUT_CLASSIFICATION	6.808366193137807E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999319163380687	WITHOUT_CLASSIFICATION	6.808366193137807E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999325920220684	WITHOUT_CLASSIFICATION	6.740797793160036E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999325920220684	WITHOUT_CLASSIFICATION	6.740797793160036E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998656980900156	WITHOUT_CLASSIFICATION	1.3430190998452081E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998656980900156	WITHOUT_CLASSIFICATION	1.3430190998452081E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999615687554465	WITHOUT_CLASSIFICATION	3.843124455349746E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999947480150135	WITHOUT_CLASSIFICATION	5.251984986461333E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999172631747861	WITHOUT_CLASSIFICATION	8.27368252138171E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999172631747861	WITHOUT_CLASSIFICATION	8.27368252138171E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999319163380687	WITHOUT_CLASSIFICATION	6.808366193137807E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999325920220684	WITHOUT_CLASSIFICATION	6.740797793160036E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999325920220684	WITHOUT_CLASSIFICATION	6.740797793160036E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998656980900156	WITHOUT_CLASSIFICATION	1.3430190998452081E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998529821461243	WITHOUT_CLASSIFICATION	1.470178538756658E-4	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999907519103349	WITHOUT_CLASSIFICATION	9.248089665102727E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9997419552033954	WITHOUT_CLASSIFICATION	2.580447966046599E-4	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9996887319574288	WITHOUT_CLASSIFICATION	3.1126804257117886E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9997585017260918	WITHOUT_CLASSIFICATION	2.4149827390830252E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999174652610943	WITHOUT_CLASSIFICATION	8.253473890571575E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999958034383692	WITHOUT_CLASSIFICATION	4.196561630696866E-6	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999930979577208	WITHOUT_CLASSIFICATION	6.902042279223476E-6	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999961695154267	WITHOUT_CLASSIFICATION	3.830484573225588E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9978094579264889	WITHOUT_CLASSIFICATION	0.002190542073511046	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998773219129665	WITHOUT_CLASSIFICATION	1.2267808703352E-4	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999661479893402	WITHOUT_CLASSIFICATION	3.385201065984606E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9997418102144052	WITHOUT_CLASSIFICATION	2.581897855947957E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999174652610943	WITHOUT_CLASSIFICATION	8.253473890571575E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999174652610943	WITHOUT_CLASSIFICATION	8.253473890571575E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999174652610943	WITHOUT_CLASSIFICATION	8.253473890571575E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999976516445508	WITHOUT_CLASSIFICATION	2.3483554491996022E-5	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9997171774966547	WITHOUT_CLASSIFICATION	2.828225033452472E-4	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9997171774966547	WITHOUT_CLASSIFICATION	2.828225033452472E-4	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999286401746822	WITHOUT_CLASSIFICATION	7.135982531785879E-5	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999357667458	WITHOUT_CLASSIFICATION	6.423325420638891E-7	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999861816501654	WITHOUT_CLASSIFICATION	1.3818349834475916E-5	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9969542985964928	WITHOUT_CLASSIFICATION	0.003045701403507266	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9969542985964928	WITHOUT_CLASSIFICATION	0.003045701403507266	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998569643907177	WITHOUT_CLASSIFICATION	1.4303560928230494E-4	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9987812222466512	WITHOUT_CLASSIFICATION	0.001218777753348684	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9987812222466512	WITHOUT_CLASSIFICATION	0.001218777753348684	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9994882161591812	WITHOUT_CLASSIFICATION	5.117838408187944E-4	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999824904438298	WITHOUT_CLASSIFICATION	1.750955617029441E-5	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999846179696807	WITHOUT_CLASSIFICATION	1.5382030319221603E-5	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999296055160745	WITHOUT_CLASSIFICATION	7.039448392548328E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999183953058999	WITHOUT_CLASSIFICATION	8.16046941001318E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.6827796448589436	WITHOUT_CLASSIFICATION	0.3172203551410563	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9997842627539808	WITHOUT_CLASSIFICATION	2.1573724601920297E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998957075947456	WITHOUT_CLASSIFICATION	1.0429240525439444E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9998114295497919	WITHOUT_CLASSIFICATION	1.885704502081269E-4	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999449063848983	WITHOUT_CLASSIFICATION	5.5093615101634506E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999972843393418	WITHOUT_CLASSIFICATION	2.7156606581679864E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998877636987707	WITHOUT_CLASSIFICATION	1.1223630122932451E-4	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998983147340114	WITHOUT_CLASSIFICATION	1.0168526598863048E-4	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997460980431327	WITHOUT_CLASSIFICATION	2.5390195686718185E-4	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999182140121531	WITHOUT_CLASSIFICATION	8.178598784691282E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999917400252188	WITHOUT_CLASSIFICATION	8.259974781190929E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9997564557427389	WITHOUT_CLASSIFICATION	2.435442572611751E-4	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999659626107645	WITHOUT_CLASSIFICATION	3.403738923546128E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999846179696807	WITHOUT_CLASSIFICATION	1.5382030319221603E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999481206147631	WITHOUT_CLASSIFICATION	5.187938523686979E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9998513281106753	WITHOUT_CLASSIFICATION	1.4867188932461407E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999222479264577	WITHOUT_CLASSIFICATION	7.775207354235539E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999183953058999	WITHOUT_CLASSIFICATION	8.16046941001318E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999659626107645	WITHOUT_CLASSIFICATION	3.403738923546128E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999481206147631	WITHOUT_CLASSIFICATION	5.187938523686979E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999222479264577	WITHOUT_CLASSIFICATION	7.775207354235539E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997129041869232	WITHOUT_CLASSIFICATION	2.8709581307688443E-4	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.999917414175468	WITHOUT_CLASSIFICATION	8.258582453204026E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997129041869232	WITHOUT_CLASSIFICATION	2.8709581307688443E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9994050507272932	WITHOUT_CLASSIFICATION	5.949492727067348E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.999815261631484	WITHOUT_CLASSIFICATION	1.847383685159536E-4	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999992967150969	WITHOUT_CLASSIFICATION	7.032849031328039E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999965375014999	WITHOUT_CLASSIFICATION	3.4624985000715687E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9895499200175027	WITHOUT_CLASSIFICATION	0.010450079982497237	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999455752094794	WITHOUT_CLASSIFICATION	5.442479052067835E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9976089914016545	WITHOUT_CLASSIFICATION	0.0023910085983455402	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9938306637442951	WITHOUT_CLASSIFICATION	0.0061693362557050085	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999455752094794	WITHOUT_CLASSIFICATION	5.442479052067835E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999294507864157	WITHOUT_CLASSIFICATION	7.054921358436851E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998090229036305	WITHOUT_CLASSIFICATION	1.9097709636960346E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999659626107645	WITHOUT_CLASSIFICATION	3.403738923546128E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998996801607014	WITHOUT_CLASSIFICATION	1.0031983929861283E-4	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9998729064196215	WITHOUT_CLASSIFICATION	1.270935803786203E-4	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9981564456122697	WITHOUT_CLASSIFICATION	0.0018435543877303195	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9998430668085848	WITHOUT_CLASSIFICATION	1.5693319141514702E-4	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999497498030984	WITHOUT_CLASSIFICATION	5.0250196901602955E-5	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999983181570006	WITHOUT_CLASSIFICATION	1.6818429994752303E-6	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999826247648917	WITHOUT_CLASSIFICATION	1.737523510818024E-5	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9994237339521712	WITHOUT_CLASSIFICATION	5.762660478288796E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999177653794711	WITHOUT_CLASSIFICATION	8.223462052885226E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9993035626693432	WITHOUT_CLASSIFICATION	6.964373306567332E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9980841352984493	WITHOUT_CLASSIFICATION	0.0019158647015507636	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998877636987707	WITHOUT_CLASSIFICATION	1.1223630122932451E-4	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9997359782584893	WITHOUT_CLASSIFICATION	2.6402174151067916E-4	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999500196252735	WITHOUT_CLASSIFICATION	4.998037472648652E-5	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9994592819142809	WITHOUT_CLASSIFICATION	5.407180857190831E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9997359761023578	WITHOUT_CLASSIFICATION	2.6402389764218503E-4	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9997359761023578	WITHOUT_CLASSIFICATION	2.6402389764218503E-4	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999369616973167	WITHOUT_CLASSIFICATION	6.303830268329846E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999333958388	WITHOUT_CLASSIFICATION	6.66041612367101E-8	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999776602035434	WITHOUT_CLASSIFICATION	2.2339796456565082E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9958609164053477	WITHOUT_CLASSIFICATION	0.004139083594652319	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997362009271515	WITHOUT_CLASSIFICATION	2.637990728484979E-4	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9963820571823876	WITHOUT_CLASSIFICATION	0.003617942817612445	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9963820571823876	WITHOUT_CLASSIFICATION	0.003617942817612445	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999313538719472	WITHOUT_CLASSIFICATION	6.864612805278054E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999398952654601	WITHOUT_CLASSIFICATION	6.010473453987951E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999617966854413	WITHOUT_CLASSIFICATION	3.820331455873375E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9998604430019449	WITHOUT_CLASSIFICATION	1.3955699805515205E-4	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999426400005749	WITHOUT_CLASSIFICATION	5.735999942511455E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998796307853769	WITHOUT_CLASSIFICATION	1.2036921462308216E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999524707191889	WITHOUT_CLASSIFICATION	4.7529280811172104E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.7122750464369585	WITHOUT_CLASSIFICATION	0.28772495356304134	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999986155901173	WITHOUT_CLASSIFICATION	1.3844098826931956E-5	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998717311545589	WITHOUT_CLASSIFICATION	1.282688454411642E-4	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9997433989041182	WITHOUT_CLASSIFICATION	2.5660109588177156E-4	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9983601273262719	WITHOUT_CLASSIFICATION	0.001639872673728131	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998537383244533	WITHOUT_CLASSIFICATION	1.4626167554665623E-4	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999225156027619	WITHOUT_CLASSIFICATION	7.74843972380719E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999627101714445	WITHOUT_CLASSIFICATION	3.72898285554899E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9998545220025156	WITHOUT_CLASSIFICATION	1.4547799748454898E-4	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503767266951	WITHOUT_CLASSIFICATION	4.962327330499086E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999656468635151	WITHOUT_CLASSIFICATION	3.435313648503813E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998058740423146	WITHOUT_CLASSIFICATION	1.9412595768540788E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9996440807361403	WITHOUT_CLASSIFICATION	3.559192638597067E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999944705977371	WITHOUT_CLASSIFICATION	5.5294022629159624E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999626799804876	WITHOUT_CLASSIFICATION	3.7320019512390983E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9998545220025156	WITHOUT_CLASSIFICATION	1.4547799748454898E-4	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9997394678573724	WITHOUT_CLASSIFICATION	2.605321426275232E-4	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997654236185137	WITHOUT_CLASSIFICATION	2.345763814863187E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9997635464817491	WITHOUT_CLASSIFICATION	2.3645351825075193E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998537214669	WITHOUT_CLASSIFICATION	1.4627853304945548E-7	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9998769051215342	WITHOUT_CLASSIFICATION	1.2309487846585797E-4	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999656468635151	WITHOUT_CLASSIFICATION	3.435313648503813E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.99918486099095	WITHOUT_CLASSIFICATION	8.15139009049943E-4	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9995424397775263	WITHOUT_CLASSIFICATION	4.5756022247363855E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9998956553195382	WITHOUT_CLASSIFICATION	1.0434468046185811E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9998956553195382	WITHOUT_CLASSIFICATION	1.0434468046185811E-4	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9998072268599311	WITHOUT_CLASSIFICATION	1.9277314006904437E-4	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9996503756444269	WITHOUT_CLASSIFICATION	3.496243555730415E-4	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9997327071555996	WITHOUT_CLASSIFICATION	2.672928444003313E-4	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9997327071555996	WITHOUT_CLASSIFICATION	2.672928444003313E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9958609164053477	WITHOUT_CLASSIFICATION	0.004139083594652319	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999203970350864	WITHOUT_CLASSIFICATION	7.960296491362926E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999861058368137	WITHOUT_CLASSIFICATION	1.3894163186299675E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998592350463686	WITHOUT_CLASSIFICATION	1.4076495363129097E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998767203519253	WITHOUT_CLASSIFICATION	1.2327964807466336E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999861058368137	WITHOUT_CLASSIFICATION	1.3894163186299675E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998592350463686	WITHOUT_CLASSIFICATION	1.4076495363129097E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7449306660502578	WITHOUT_CLASSIFICATION	0.25506933394974207	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999994913806107	WITHOUT_CLASSIFICATION	5.086193892534664E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999234605920113	WITHOUT_CLASSIFICATION	7.653940798870225E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999949743279765	WITHOUT_CLASSIFICATION	5.025672023474945E-6	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9975168601024201	WITHOUT_CLASSIFICATION	0.0024831398975799315	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.5944707050455169	IMPLEMENTATION	0.405529294954483	WITHOUT_CLASSIFICATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9994951604526117	WITHOUT_CLASSIFICATION	5.048395473884243E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9994951604526117	WITHOUT_CLASSIFICATION	5.048395473884243E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999324902587131	WITHOUT_CLASSIFICATION	6.750974128684645E-5	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999952440593067	WITHOUT_CLASSIFICATION	4.755940693312899E-5	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9994968064158011	WITHOUT_CLASSIFICATION	5.031935841989098E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999690686538456	WITHOUT_CLASSIFICATION	3.093134615439034E-5	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.999965247021788	WITHOUT_CLASSIFICATION	3.475297821203854E-5	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9996417820425368	WITHOUT_CLASSIFICATION	3.582179574631604E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998767203519253	WITHOUT_CLASSIFICATION	1.2327964807466336E-4	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9996417820425368	WITHOUT_CLASSIFICATION	3.582179574631604E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999329092178731	WITHOUT_CLASSIFICATION	6.70907821267709E-5	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999329092178731	WITHOUT_CLASSIFICATION	6.70907821267709E-5	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9998994063342665	WITHOUT_CLASSIFICATION	1.005936657334824E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7449306660502578	WITHOUT_CLASSIFICATION	0.25506933394974207	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.989547815705316	WITHOUT_CLASSIFICATION	0.01045218429468391	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999892237292519	WITHOUT_CLASSIFICATION	1.0776270748089048E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9911291010729456	WITHOUT_CLASSIFICATION	0.008870898927054291	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999886292098158	WITHOUT_CLASSIFICATION	1.1370790184205824E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986324230723063	WITHOUT_CLASSIFICATION	0.001367576927693735	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7449306660502578	WITHOUT_CLASSIFICATION	0.25506933394974207	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999886292098158	WITHOUT_CLASSIFICATION	1.1370790184205824E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9986324230723063	WITHOUT_CLASSIFICATION	0.001367576927693735	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999984381234501	WITHOUT_CLASSIFICATION	1.5618765498964972E-5	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9994937551213591	WITHOUT_CLASSIFICATION	5.062448786410201E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999726172064339	WITHOUT_CLASSIFICATION	2.7382793566137983E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7449306660502578	WITHOUT_CLASSIFICATION	0.25506933394974207	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7449306660502578	WITHOUT_CLASSIFICATION	0.25506933394974207	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999782232912913	WITHOUT_CLASSIFICATION	2.177670870878652E-5	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999345274006061	WITHOUT_CLASSIFICATION	6.54725993940308E-5	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.999930741422136	WITHOUT_CLASSIFICATION	6.925857786397837E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999781430543874	WITHOUT_CLASSIFICATION	2.185694561269227E-5	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999760218815952	WITHOUT_CLASSIFICATION	2.3978118404803957E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999122118498488	WITHOUT_CLASSIFICATION	8.7788150151251E-5	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9977494561227631	WITHOUT_CLASSIFICATION	0.002250543877236856	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997058098127105	WITHOUT_CLASSIFICATION	2.9419018728944746E-4	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999792158439867	WITHOUT_CLASSIFICATION	2.0784156013265505E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9995953137928337	WITHOUT_CLASSIFICATION	4.046862071662355E-4	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9988244859636941	WITHOUT_CLASSIFICATION	0.001175514036305825	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9476438487765373	WITHOUT_CLASSIFICATION	0.05235615122346271	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999995460773294	WITHOUT_CLASSIFICATION	4.53922670598287E-6	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9995814143833596	WITHOUT_CLASSIFICATION	4.1858561664047085E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410745226176	WITHOUT_CLASSIFICATION	1.5892547738235815E-4	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999927917986323	WITHOUT_CLASSIFICATION	7.208201367713875E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999781430543874	WITHOUT_CLASSIFICATION	2.185694561269227E-5	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999127315002709	WITHOUT_CLASSIFICATION	8.726849972906553E-5	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999664828138501	WITHOUT_CLASSIFICATION	3.351718614992511E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9996520867373243	WITHOUT_CLASSIFICATION	3.479132626756887E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.999643493173873	WITHOUT_CLASSIFICATION	3.5650682612706815E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999781430543874	WITHOUT_CLASSIFICATION	2.185694561269227E-5	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9659207723034976	WITHOUT_CLASSIFICATION	0.03407922769650231	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999747363257695	WITHOUT_CLASSIFICATION	2.5263674230585515E-5	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.995484924147707	WITHOUT_CLASSIFICATION	0.0045150758522930845	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999157360059958	WITHOUT_CLASSIFICATION	8.426399400421309E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998922161854931	WITHOUT_CLASSIFICATION	1.0778381450702156E-4	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.99932088937972	WITHOUT_CLASSIFICATION	6.791106202799216E-4	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9991812307206221	WITHOUT_CLASSIFICATION	8.187692793777829E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999773906979529	WITHOUT_CLASSIFICATION	2.260930204710057E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999635728004257	WITHOUT_CLASSIFICATION	3.642719957434851E-5	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999749492919738	WITHOUT_CLASSIFICATION	2.5050708026187517E-5	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998681903161648	WITHOUT_CLASSIFICATION	1.318096838351832E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999943807538943	WITHOUT_CLASSIFICATION	5.619246105697746E-5	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908769763205	WITHOUT_CLASSIFICATION	9.123023679514244E-6	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999841113252683	WITHOUT_CLASSIFICATION	1.5888674731713207E-4	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9983046112816248	WITHOUT_CLASSIFICATION	0.0016953887183751802	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9992468492041487	WITHOUT_CLASSIFICATION	7.531507958511831E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595058752081	WITHOUT_CLASSIFICATION	1.4049412479194047E-4	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999331453019533	WITHOUT_CLASSIFICATION	6.685469804665403E-5	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997638673752505	WITHOUT_CLASSIFICATION	2.3613262474961265E-4	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999984727993372	WITHOUT_CLASSIFICATION	1.5272006627587815E-6	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978043866880211	WITHOUT_CLASSIFICATION	0.0021956133119788346	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986491145405101	WITHOUT_CLASSIFICATION	0.0013508854594898598	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977285631252636	WITHOUT_CLASSIFICATION	0.002271436874736307	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998429388800318	WITHOUT_CLASSIFICATION	1.5706111996805131E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972892769479386	WITHOUT_CLASSIFICATION	0.0027107230520614666	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9962227662852291	WITHOUT_CLASSIFICATION	0.00377723371477096	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.998716251465191	WITHOUT_CLASSIFICATION	0.0012837485348088848	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976539820778392	WITHOUT_CLASSIFICATION	0.002346017922160893	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976941297407258	WITHOUT_CLASSIFICATION	0.0023058702592742633	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975910221544563	WITHOUT_CLASSIFICATION	0.0024089778455438134	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9942653154947555	WITHOUT_CLASSIFICATION	0.0057346845052445704	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971195765329564	WITHOUT_CLASSIFICATION	0.0028804234670436538	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971228506120947	WITHOUT_CLASSIFICATION	0.002877149387905396	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999781343553846	WITHOUT_CLASSIFICATION	2.186564461534435E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998413889425573	WITHOUT_CLASSIFICATION	1.586110574427749E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.835581116247758	WITHOUT_CLASSIFICATION	0.16441888375224206	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999987802115411	WITHOUT_CLASSIFICATION	1.2197884588974043E-5	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999964426423833	WITHOUT_CLASSIFICATION	3.5573576166973296E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998813558910837	WITHOUT_CLASSIFICATION	1.1864410891627334E-4	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9996096918776796	WITHOUT_CLASSIFICATION	3.903081223205217E-4	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999159708558047	WITHOUT_CLASSIFICATION	8.402914419528663E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999205628485064	WITHOUT_CLASSIFICATION	7.943715149363352E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997364870892494	WITHOUT_CLASSIFICATION	2.63512910750538E-4	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997480616003326	WITHOUT_CLASSIFICATION	2.519383996673331E-4	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998768593930887	WITHOUT_CLASSIFICATION	1.2314060691138157E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9997776060937031	WITHOUT_CLASSIFICATION	2.2239390629683943E-4	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999177319880925	WITHOUT_CLASSIFICATION	8.226801190748865E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999365177584701	WITHOUT_CLASSIFICATION	6.348224152984021E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9997371159432389	WITHOUT_CLASSIFICATION	2.6288405676108006E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999001320906089	WITHOUT_CLASSIFICATION	9.986790939114069E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9994137301669784	WITHOUT_CLASSIFICATION	5.862698330215276E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998471342086469	WITHOUT_CLASSIFICATION	1.5286579135317848E-4	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998552791277193	WITHOUT_CLASSIFICATION	1.4472087228071617E-4	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998420041261928	WITHOUT_CLASSIFICATION	1.5799587380714957E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9944433390712626	WITHOUT_CLASSIFICATION	0.005556660928737334	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9994846312199201	WITHOUT_CLASSIFICATION	5.153687800797547E-4	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9998922198316964	WITHOUT_CLASSIFICATION	1.0778016830358445E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999114716546216	WITHOUT_CLASSIFICATION	8.852834537834637E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977648539162901	WITHOUT_CLASSIFICATION	0.002235146083709811	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999141916784934	WITHOUT_CLASSIFICATION	8.580832150662146E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999351230053604	WITHOUT_CLASSIFICATION	6.487699463961327E-5	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998861026276576	WITHOUT_CLASSIFICATION	1.1389737234240522E-4	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998359696228607	WITHOUT_CLASSIFICATION	1.640303771392938E-4	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995765927809542	WITHOUT_CLASSIFICATION	4.2340721904577224E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9986813436631172	WITHOUT_CLASSIFICATION	0.0013186563368828095	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999976194220772	WITHOUT_CLASSIFICATION	2.380577922718017E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999878556803659	WITHOUT_CLASSIFICATION	1.214431963410183E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998813558910837	WITHOUT_CLASSIFICATION	1.1864410891627334E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9995786162889554	WITHOUT_CLASSIFICATION	4.2138371104458725E-4	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999998526789694	WITHOUT_CLASSIFICATION	1.4732103060009095E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9995728501409923	WITHOUT_CLASSIFICATION	4.2714985900776123E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999987802115411	WITHOUT_CLASSIFICATION	1.2197884588974043E-5	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998354890397988	WITHOUT_CLASSIFICATION	1.6451096020125155E-4	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9997474706811665	WITHOUT_CLASSIFICATION	2.525293188334047E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9944433390712626	WITHOUT_CLASSIFICATION	0.005556660928737334	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999908825125123	WITHOUT_CLASSIFICATION	9.117487487667828E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9994230740238448	WITHOUT_CLASSIFICATION	5.769259761551207E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999990677647412	WITHOUT_CLASSIFICATION	9.322352588000005E-6	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998479553853968	WITHOUT_CLASSIFICATION	1.5204461460313463E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998548980551385	WITHOUT_CLASSIFICATION	1.4510194486145862E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998669987655965	WITHOUT_CLASSIFICATION	1.3300123440355085E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9988388988709611	WITHOUT_CLASSIFICATION	0.0011611011290388804	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999883051023604	WITHOUT_CLASSIFICATION	1.1694897639632606E-5	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999862148141294	WITHOUT_CLASSIFICATION	1.3785185870544038E-5	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999965618951235	WITHOUT_CLASSIFICATION	3.438104876399911E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999752357735978	WITHOUT_CLASSIFICATION	2.4764226402149265E-5	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999875665126478	WITHOUT_CLASSIFICATION	1.243348735234232E-5	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9997195400739316	WITHOUT_CLASSIFICATION	2.8045992606836744E-4	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.999795883770391	WITHOUT_CLASSIFICATION	2.0411622960897927E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9998077659457217	WITHOUT_CLASSIFICATION	1.9223405427822333E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999958551462571	WITHOUT_CLASSIFICATION	4.144853742784402E-6	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999399664174295	WITHOUT_CLASSIFICATION	6.003358257046903E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999716337118492	WITHOUT_CLASSIFICATION	2.8366288150806864E-5	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999274014031194	WITHOUT_CLASSIFICATION	7.25985968806212E-5	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998599192387303	WITHOUT_CLASSIFICATION	1.4008076126976706E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999495018392703	WITHOUT_CLASSIFICATION	5.0498160729626674E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997280011786643	WITHOUT_CLASSIFICATION	2.719988213357421E-4	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999156063263112	WITHOUT_CLASSIFICATION	8.439367368895906E-5	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9991123528803423	WITHOUT_CLASSIFICATION	8.876471196576533E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9996255530380739	WITHOUT_CLASSIFICATION	3.7444696192615636E-4	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996238262245477	WITHOUT_CLASSIFICATION	3.7617377545223367E-4	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999987802115411	WITHOUT_CLASSIFICATION	1.2197884588974043E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998813558910837	WITHOUT_CLASSIFICATION	1.1864410891627334E-4	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9995756597767497	WITHOUT_CLASSIFICATION	4.243402232503152E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9941696957563527	WITHOUT_CLASSIFICATION	0.005830304243647268	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9923727081539244	WITHOUT_CLASSIFICATION	0.007627291846075611	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9998072268599311	WITHOUT_CLASSIFICATION	1.9277314006904437E-4	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999807393584442	WITHOUT_CLASSIFICATION	1.926064155580227E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998079322040809	WITHOUT_CLASSIFICATION	1.920677959190145E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998813558910837	WITHOUT_CLASSIFICATION	1.1864410891627334E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999399664174295	WITHOUT_CLASSIFICATION	6.003358257046903E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9992599981822299	WITHOUT_CLASSIFICATION	7.400018177701219E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999958551462571	WITHOUT_CLASSIFICATION	4.144853742784402E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998902189685818	WITHOUT_CLASSIFICATION	1.0978103141830802E-4	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.998741860748216	WITHOUT_CLASSIFICATION	0.0012581392517839825	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999974233395833	WITHOUT_CLASSIFICATION	2.576660416759047E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999990677647412	WITHOUT_CLASSIFICATION	9.322352588000005E-6	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998479553853968	WITHOUT_CLASSIFICATION	1.5204461460313463E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998548980551385	WITHOUT_CLASSIFICATION	1.4510194486145862E-4	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9996613456185309	WITHOUT_CLASSIFICATION	3.38654381469023E-4	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9992781333114382	WITHOUT_CLASSIFICATION	7.218666885618553E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9998366305300915	WITHOUT_CLASSIFICATION	1.6336946990845578E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999958551462571	WITHOUT_CLASSIFICATION	4.144853742784402E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998902189685818	WITHOUT_CLASSIFICATION	1.0978103141830802E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998813558910837	WITHOUT_CLASSIFICATION	1.1864410891627334E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998669987655965	WITHOUT_CLASSIFICATION	1.3300123440355085E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9988388988709611	WITHOUT_CLASSIFICATION	0.0011611011290388804	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999883051023604	WITHOUT_CLASSIFICATION	1.1694897639632606E-5	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998757636736627	WITHOUT_CLASSIFICATION	1.2423632633732406E-4	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997185532476012	WITHOUT_CLASSIFICATION	2.814467523988017E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999000222021651	WITHOUT_CLASSIFICATION	9.997779783488942E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999890629443987	WITHOUT_CLASSIFICATION	1.0937055601177298E-5	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9994584933029309	WITHOUT_CLASSIFICATION	5.415066970690098E-4	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999990741126714	WITHOUT_CLASSIFICATION	9.258873286504448E-7	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9996671259258634	WITHOUT_CLASSIFICATION	3.3287407413655284E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9997171484539472	WITHOUT_CLASSIFICATION	2.828515460527843E-4	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9997127661683222	WITHOUT_CLASSIFICATION	2.872338316778747E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972892769479386	WITHOUT_CLASSIFICATION	0.0027107230520614666	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976941297407258	WITHOUT_CLASSIFICATION	0.0023058702592742633	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999337451797148	WITHOUT_CLASSIFICATION	6.625482028520018E-5	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999261786202277	WITHOUT_CLASSIFICATION	7.382137977228283E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997152502538425	WITHOUT_CLASSIFICATION	0.0028474974615749437	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.998108962413511	WITHOUT_CLASSIFICATION	0.0018910375864889556	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975910221544563	WITHOUT_CLASSIFICATION	0.0024089778455438134	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970954674164031	WITHOUT_CLASSIFICATION	0.0029045325835968514	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998359696228607	WITHOUT_CLASSIFICATION	1.640303771392938E-4	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999970013261293	WITHOUT_CLASSIFICATION	2.9986738706204576E-6	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999594835141383	WITHOUT_CLASSIFICATION	4.051648586175799E-5	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999997740532725	WITHOUT_CLASSIFICATION	2.259467274851214E-6	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999908827502548	WITHOUT_CLASSIFICATION	9.11724974520733E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999987748304467	WITHOUT_CLASSIFICATION	1.2251695532522978E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9997129041869232	WITHOUT_CLASSIFICATION	2.8709581307688443E-4	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999753561895973	WITHOUT_CLASSIFICATION	2.4643810402572385E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9991812307206221	WITHOUT_CLASSIFICATION	8.187692793777829E-4	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9991797461409684	WITHOUT_CLASSIFICATION	8.202538590316668E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999726079916691	WITHOUT_CLASSIFICATION	2.739200833092977E-5	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999072972137699	WITHOUT_CLASSIFICATION	9.270278623016972E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998734603131532	WITHOUT_CLASSIFICATION	1.2653968684687747E-4	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999834585470075	WITHOUT_CLASSIFICATION	1.654145299254119E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996015636419713	WITHOUT_CLASSIFICATION	3.9843635802878696E-4	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996925193591275	WITHOUT_CLASSIFICATION	3.074806408725319E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866900635387	WITHOUT_CLASSIFICATION	4.1330993646134065E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999891010620743	WITHOUT_CLASSIFICATION	1.0898937925777024E-5	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997291067435654	WITHOUT_CLASSIFICATION	2.708932564346294E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9989682765261341	WITHOUT_CLASSIFICATION	0.0010317234738659194	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999416916311091	WITHOUT_CLASSIFICATION	5.8308368890992105E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999219341701592	WITHOUT_CLASSIFICATION	7.806582984078134E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998414726116207	WITHOUT_CLASSIFICATION	1.585273883794162E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999484262273808	WITHOUT_CLASSIFICATION	5.157377261918377E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9991595626720459	WITHOUT_CLASSIFICATION	8.404373279542614E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999108220533917	WITHOUT_CLASSIFICATION	8.91779466083989E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998414726116207	WITHOUT_CLASSIFICATION	1.585273883794162E-4	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999797668324444	WITHOUT_CLASSIFICATION	2.023316755564206E-5	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999661679085631	WITHOUT_CLASSIFICATION	3.383209143690922E-5	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999269867789569	WITHOUT_CLASSIFICATION	7.301322104311942E-5	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999133630348995	WITHOUT_CLASSIFICATION	8.663696510047628E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9998287512341131	WITHOUT_CLASSIFICATION	1.71248765886994E-4	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9996683632720835	WITHOUT_CLASSIFICATION	3.316367279164902E-4	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9998753017343587	WITHOUT_CLASSIFICATION	1.2469826564139155E-4	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996229032557535	WITHOUT_CLASSIFICATION	3.770967442464455E-4	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9996229032557535	WITHOUT_CLASSIFICATION	3.770967442464455E-4	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999822926609675	WITHOUT_CLASSIFICATION	1.7707339032475872E-5	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999900736227112	WITHOUT_CLASSIFICATION	9.926377288802866E-5	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998996003354069	WITHOUT_CLASSIFICATION	1.0039966459300702E-4	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999331459059115	WITHOUT_CLASSIFICATION	6.685409408844189E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999998771720512	WITHOUT_CLASSIFICATION	1.2282794879498701E-6	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997347228490467	WITHOUT_CLASSIFICATION	2.6527715095319755E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998747146022	WITHOUT_CLASSIFICATION	1.252853978769015E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999920747723328	WITHOUT_CLASSIFICATION	7.925227667182159E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999071026101509	WITHOUT_CLASSIFICATION	9.289738984904404E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999678880356413	WITHOUT_CLASSIFICATION	3.211196435863134E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999567597137197	WITHOUT_CLASSIFICATION	4.324028628041366E-5	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999811783943209	WITHOUT_CLASSIFICATION	1.8821605679125874E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998265534589407	WITHOUT_CLASSIFICATION	1.734465410593303E-4	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.7214223089344183	WITHOUT_CLASSIFICATION	0.2785776910655817	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996909865526916	WITHOUT_CLASSIFICATION	3.0901344730838317E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998266942517604	WITHOUT_CLASSIFICATION	1.7330574823963711E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9998089032937668	WITHOUT_CLASSIFICATION	1.9109670623325008E-4	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9986150230849363	WITHOUT_CLASSIFICATION	0.0013849769150636676	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9995063611524378	WITHOUT_CLASSIFICATION	4.936388475621764E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998158447639328	WITHOUT_CLASSIFICATION	1.8415523606720563E-4	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999627628685193	WITHOUT_CLASSIFICATION	3.7237131480786093E-5	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9998382794130615	WITHOUT_CLASSIFICATION	1.617205869385518E-4	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9953855083869236	WITHOUT_CLASSIFICATION	0.004614491613076308	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999796473837774	WITHOUT_CLASSIFICATION	2.0352616222489195E-5	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999296206536572	WITHOUT_CLASSIFICATION	7.037934634283986E-5	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999685092024417	WITHOUT_CLASSIFICATION	3.149079755830285E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9971688052454408	WITHOUT_CLASSIFICATION	0.0028311947545591317	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9990463724327223	WITHOUT_CLASSIFICATION	9.536275672776253E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9981628798023626	WITHOUT_CLASSIFICATION	0.0018371201976373922	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9997341741437497	WITHOUT_CLASSIFICATION	2.658258562503963E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999455617888903	WITHOUT_CLASSIFICATION	5.4438211109846844E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9998673755246819	WITHOUT_CLASSIFICATION	1.3262447531818024E-4	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999458981121694	WITHOUT_CLASSIFICATION	5.4101887830647775E-5	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999489420118529	WITHOUT_CLASSIFICATION	5.105798814710833E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999455280863752	WITHOUT_CLASSIFICATION	5.447191362475092E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9998495665859285	WITHOUT_CLASSIFICATION	1.5043341407152482E-4	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998545523693101	WITHOUT_CLASSIFICATION	1.454476306898416E-4	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9910657877598013	WITHOUT_CLASSIFICATION	0.008934212240198733	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9969432737124524	WITHOUT_CLASSIFICATION	0.0030567262875475813	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999787090553758	WITHOUT_CLASSIFICATION	2.129094462432453E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997085225548153	WITHOUT_CLASSIFICATION	2.9147744518466E-4	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999752357735978	WITHOUT_CLASSIFICATION	2.4764226402149265E-5	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999752357735978	WITHOUT_CLASSIFICATION	2.4764226402149265E-5	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999405958406906	WITHOUT_CLASSIFICATION	5.9404159309329396E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999901602008441	WITHOUT_CLASSIFICATION	9.839799155929517E-6	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999688879051669	WITHOUT_CLASSIFICATION	3.1112094833086096E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999947779254641	WITHOUT_CLASSIFICATION	5.2220745358521795E-6	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999732882086919	WITHOUT_CLASSIFICATION	2.671179130798548E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9998747289401343	WITHOUT_CLASSIFICATION	1.2527105986564287E-4	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9998828209162479	WITHOUT_CLASSIFICATION	1.1717908375213481E-4	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999434212134667	WITHOUT_CLASSIFICATION	5.657878653331146E-4	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999982781594731	WITHOUT_CLASSIFICATION	1.7218405269971304E-6	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9996327541299218	WITHOUT_CLASSIFICATION	3.6724587007814873E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997900634243638	WITHOUT_CLASSIFICATION	2.09936575636109E-4	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9997617178931193	WITHOUT_CLASSIFICATION	2.382821068806092E-4	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999841139426741	WITHOUT_CLASSIFICATION	1.5886057325886245E-4	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9998852690250104	WITHOUT_CLASSIFICATION	1.1473097498951879E-4	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998580841814091	WITHOUT_CLASSIFICATION	1.4191581859087686E-4	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9998469377100904	WITHOUT_CLASSIFICATION	1.5306228990950553E-4	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.999705840090464	WITHOUT_CLASSIFICATION	2.9415990953602E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9993695480222764	WITHOUT_CLASSIFICATION	6.304519777237112E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9995369053161381	WITHOUT_CLASSIFICATION	4.6309468386192693E-4	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.999842745299567	WITHOUT_CLASSIFICATION	1.5725470043302173E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999775515611353	WITHOUT_CLASSIFICATION	2.2448438864650152E-5	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9995369053161381	WITHOUT_CLASSIFICATION	4.6309468386192693E-4	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999855361457118	WITHOUT_CLASSIFICATION	1.4463854288247358E-5	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999241143874461	WITHOUT_CLASSIFICATION	7.588561255391462E-5	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9991170558889437	WITHOUT_CLASSIFICATION	8.829441110562997E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9994217998466168	WITHOUT_CLASSIFICATION	5.782001533831937E-4	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9994355408649404	WITHOUT_CLASSIFICATION	5.644591350596124E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999970869651927	WITHOUT_CLASSIFICATION	2.9130348072605237E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998980996507559	WITHOUT_CLASSIFICATION	1.0190034924401882E-4	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9996728254270327	WITHOUT_CLASSIFICATION	3.2717457296730924E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998417193040887	WITHOUT_CLASSIFICATION	1.5828069591137929E-4	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999946659431171	WITHOUT_CLASSIFICATION	5.334056882780554E-6	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999003661789287	WITHOUT_CLASSIFICATION	9.963382107130913E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9987721649231919	WITHOUT_CLASSIFICATION	0.001227835076808174	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999607590414805	WITHOUT_CLASSIFICATION	3.924095851953865E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9972723072915617	WITHOUT_CLASSIFICATION	0.002727692708438219	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9993987365476004	WITHOUT_CLASSIFICATION	6.012634523996603E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9965389401173764	WITHOUT_CLASSIFICATION	0.0034610598826236407	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9997327321300123	WITHOUT_CLASSIFICATION	2.6726786998764704E-4	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9998603633916204	WITHOUT_CLASSIFICATION	1.3963660837951964E-4	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999193210304946	WITHOUT_CLASSIFICATION	8.067896950532113E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9964942400045482	WITHOUT_CLASSIFICATION	0.0035057599954517286	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9995535836976875	WITHOUT_CLASSIFICATION	4.464163023124117E-4	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999734895930368	WITHOUT_CLASSIFICATION	2.6510406963289354E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9998732184275204	WITHOUT_CLASSIFICATION	1.267815724796483E-4	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.96623049311814	WITHOUT_CLASSIFICATION	0.033769506881859875	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9481315041510892	WITHOUT_CLASSIFICATION	0.05186849584891076	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9993507751400821	WITHOUT_CLASSIFICATION	6.492248599178632E-4	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9973217148789332	WITHOUT_CLASSIFICATION	0.0026782851210668647	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9990605751415043	WITHOUT_CLASSIFICATION	9.39424858495722E-4	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999175425811182	WITHOUT_CLASSIFICATION	8.245741888186683E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9996015636419713	WITHOUT_CLASSIFICATION	3.9843635802878696E-4	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997301080448787	WITHOUT_CLASSIFICATION	2.698919551212425E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999994611580545	WITHOUT_CLASSIFICATION	5.388419455042794E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.997703846631472	WITHOUT_CLASSIFICATION	0.0022961533685278823	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999595893409283	WITHOUT_CLASSIFICATION	4.041065907163937E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999922107934609	WITHOUT_CLASSIFICATION	7.789206539162156E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9998178954068617	WITHOUT_CLASSIFICATION	1.82104593138327E-4	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9952120680488443	WITHOUT_CLASSIFICATION	0.004787931951155595	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999802437413032	WITHOUT_CLASSIFICATION	1.9756258696797625E-5	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998510039561881	WITHOUT_CLASSIFICATION	1.4899604381181508E-4	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9997638915123666	WITHOUT_CLASSIFICATION	2.3610848763352214E-4	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999802450648063	WITHOUT_CLASSIFICATION	1.97549351937145E-5	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999018021393602	WITHOUT_CLASSIFICATION	9.81978606397931E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9994466650176912	WITHOUT_CLASSIFICATION	5.533349823088188E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9997316517396446	WITHOUT_CLASSIFICATION	2.6834826035538565E-4	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9995992760019932	WITHOUT_CLASSIFICATION	4.00723998006882E-4	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9996216973029283	WITHOUT_CLASSIFICATION	3.7830269707176247E-4	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999871327544966	WITHOUT_CLASSIFICATION	1.2867245503419613E-5	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998638387862205	WITHOUT_CLASSIFICATION	1.361612137794033E-4	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999975724640946	WITHOUT_CLASSIFICATION	2.4275359053462143E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9997262404339348	WITHOUT_CLASSIFICATION	2.7375956606525884E-4	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998717949739349	WITHOUT_CLASSIFICATION	1.2820502606523298E-4	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9998137157671948	WITHOUT_CLASSIFICATION	1.8628423280513682E-4	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999171112462937	WITHOUT_CLASSIFICATION	8.288875370636888E-5	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9994842493663951	WITHOUT_CLASSIFICATION	5.157506336049066E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9998562489854467	WITHOUT_CLASSIFICATION	1.4375101455330492E-4	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9993728607063719	WITHOUT_CLASSIFICATION	6.271392936280063E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.999984486233146	WITHOUT_CLASSIFICATION	1.55137668540393E-5	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9947560879180906	WITHOUT_CLASSIFICATION	0.005243912081909462	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.963765354302271	WITHOUT_CLASSIFICATION	0.036234645697729	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994707028672437	WITHOUT_CLASSIFICATION	5.29297132756358E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999396553806867	WITHOUT_CLASSIFICATION	6.034461931331218E-4	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999332592290542	WITHOUT_CLASSIFICATION	6.674077094582485E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999751646917525	WITHOUT_CLASSIFICATION	2.48353082474911E-5	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99992633009894	WITHOUT_CLASSIFICATION	7.366990105996182E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999752177250237	WITHOUT_CLASSIFICATION	2.4782274976233482E-5	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9884547920287765	WITHOUT_CLASSIFICATION	0.011545207971223468	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9997902157073447	WITHOUT_CLASSIFICATION	2.0978429265534925E-4	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998295099793929	WITHOUT_CLASSIFICATION	1.704900206070394E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9997902157073447	WITHOUT_CLASSIFICATION	2.0978429265534925E-4	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999754254702647	WITHOUT_CLASSIFICATION	2.4574529735301473E-4	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999705955555608	WITHOUT_CLASSIFICATION	2.940444443914448E-5	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999229869647583	WITHOUT_CLASSIFICATION	7.701303524165908E-5	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999994616102754	WITHOUT_CLASSIFICATION	5.383897245970296E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999556534156747	WITHOUT_CLASSIFICATION	4.4346584325249514E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999235146641128	WITHOUT_CLASSIFICATION	7.648533588725448E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9997824080521402	WITHOUT_CLASSIFICATION	2.1759194785981434E-4	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.999808506352395	WITHOUT_CLASSIFICATION	1.9149364760499067E-4	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9994203034956176	WITHOUT_CLASSIFICATION	5.796965043824579E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.5082501689294291	WITHOUT_CLASSIFICATION	0.4917498310705709	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9988385034343195	WITHOUT_CLASSIFICATION	0.0011614965656805345	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9989771157181536	WITHOUT_CLASSIFICATION	0.0010228842818463815	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998962587799962	WITHOUT_CLASSIFICATION	1.0374122000387408E-4	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999580998934398	WITHOUT_CLASSIFICATION	4.190010656018185E-5	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.6811509763430225	WITHOUT_CLASSIFICATION	0.3188490236569776	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997033240328137	WITHOUT_CLASSIFICATION	2.9667596718633486E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999908985581388	WITHOUT_CLASSIFICATION	9.10144186127559E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999908985581388	WITHOUT_CLASSIFICATION	9.10144186127559E-6	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9998974006234124	WITHOUT_CLASSIFICATION	1.0259937658770053E-4	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9997439531371115	WITHOUT_CLASSIFICATION	2.5604686288858004E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999969966249119	WITHOUT_CLASSIFICATION	3.0033750880973594E-6	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999914547134701	WITHOUT_CLASSIFICATION	8.545286529953064E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999571952641494	WITHOUT_CLASSIFICATION	4.280473585060959E-5	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9998892455922059	WITHOUT_CLASSIFICATION	1.1075440779399958E-4	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998951963701753	WITHOUT_CLASSIFICATION	1.0480362982464637E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999933208742431	WITHOUT_CLASSIFICATION	6.679125756845052E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9997347463025213	WITHOUT_CLASSIFICATION	2.652536974786443E-4	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999756127558586	WITHOUT_CLASSIFICATION	2.4387244141386163E-5	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999793809573276	WITHOUT_CLASSIFICATION	2.0619042672341142E-5	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9997192714036661	WITHOUT_CLASSIFICATION	2.8072859633391037E-4	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998253615247048	WITHOUT_CLASSIFICATION	1.7463847529519417E-4	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999901746660481	WITHOUT_CLASSIFICATION	9.825333951885656E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9985000352725658	WITHOUT_CLASSIFICATION	0.0014999647274342776	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9994773945713463	WITHOUT_CLASSIFICATION	5.226054286536637E-4	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999924504029672	WITHOUT_CLASSIFICATION	7.549597032705675E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9986608333166774	WITHOUT_CLASSIFICATION	0.001339166683322601	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9984599894563726	WITHOUT_CLASSIFICATION	0.0015400105436273862	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999982474499363	WITHOUT_CLASSIFICATION	1.752550063745465E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999525119208544	WITHOUT_CLASSIFICATION	4.7488079145692336E-5	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9992324333594851	WITHOUT_CLASSIFICATION	7.675666405149192E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999664276410881	WITHOUT_CLASSIFICATION	3.3572358911909786E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998401188445882	WITHOUT_CLASSIFICATION	1.5988115541183331E-4	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999250917132723	WITHOUT_CLASSIFICATION	7.490828672776726E-5	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999931879332401	WITHOUT_CLASSIFICATION	6.812066759900781E-6	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998327227603057	WITHOUT_CLASSIFICATION	1.6727723969433512E-4	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9937109485663418	WITHOUT_CLASSIFICATION	0.006289051433658178	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999677019348494	WITHOUT_CLASSIFICATION	3.229806515065424E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999987685922528	WITHOUT_CLASSIFICATION	1.2314077471661652E-6	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999822586538083	WITHOUT_CLASSIFICATION	1.7741346191713973E-5	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999882728484437	WITHOUT_CLASSIFICATION	1.1727151556278532E-5	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997601467611213	WITHOUT_CLASSIFICATION	2.3985323887852243E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9945558929105327	WITHOUT_CLASSIFICATION	0.005444107089467361	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999947064888711	WITHOUT_CLASSIFICATION	5.293511128889369E-6	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999831102223089	WITHOUT_CLASSIFICATION	1.688977769113963E-5	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999496293896103	WITHOUT_CLASSIFICATION	5.0370610389788675E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999948300262795	WITHOUT_CLASSIFICATION	5.169973720493815E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999983183910746	WITHOUT_CLASSIFICATION	1.6816089254103085E-6	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9990363882484026	WITHOUT_CLASSIFICATION	9.636117515973155E-4	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998614786700397	WITHOUT_CLASSIFICATION	1.3852132996031207E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998423789177571	WITHOUT_CLASSIFICATION	1.5762108224297536E-4	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9992548931194901	WITHOUT_CLASSIFICATION	7.451068805098921E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.6566203620957495	WITHOUT_CLASSIFICATION	0.3433796379042505	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9993408633107589	WITHOUT_CLASSIFICATION	6.591366892412336E-4	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9995940249503665	WITHOUT_CLASSIFICATION	4.0597504963339146E-4	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9994863333250305	WITHOUT_CLASSIFICATION	5.136666749696024E-4	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999342982383	WITHOUT_CLASSIFICATION	6.570176170161742E-8	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998220066338297	WITHOUT_CLASSIFICATION	1.779933661702198E-4	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999973855908395	WITHOUT_CLASSIFICATION	2.6144091604974964E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998423789177571	WITHOUT_CLASSIFICATION	1.5762108224297536E-4	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999459467222256	WITHOUT_CLASSIFICATION	5.4053277774370724E-5	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999458755441986	WITHOUT_CLASSIFICATION	5.412445580135697E-5	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9858915714865765	WITHOUT_CLASSIFICATION	0.014108428513423586	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999205196746151	WITHOUT_CLASSIFICATION	7.948032538484924E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999994095222959	WITHOUT_CLASSIFICATION	5.904777040401549E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999969372528655	WITHOUT_CLASSIFICATION	3.0627471345504164E-6	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999981514434694	WITHOUT_CLASSIFICATION	1.8485565306547144E-6	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998115822093161	WITHOUT_CLASSIFICATION	1.884177906838516E-4	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9994747002294023	WITHOUT_CLASSIFICATION	5.252997705976252E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9988652828286829	WITHOUT_CLASSIFICATION	0.0011347171713169861	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998862428815386	WITHOUT_CLASSIFICATION	1.1375711846134016E-4	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999548076010926	WITHOUT_CLASSIFICATION	4.5192398907462506E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999802836177352	WITHOUT_CLASSIFICATION	1.9716382264864926E-5	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996736258610022	WITHOUT_CLASSIFICATION	3.263741389978866E-4	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999695705232977	WITHOUT_CLASSIFICATION	3.042947670229642E-5	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999976127329947	WITHOUT_CLASSIFICATION	2.387267005339892E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9997477112491284	WITHOUT_CLASSIFICATION	2.522887508715321E-4	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9997346733968189	WITHOUT_CLASSIFICATION	2.653266031810857E-4	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9996332435228247	WITHOUT_CLASSIFICATION	3.667564771753239E-4	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9980356871287804	WITHOUT_CLASSIFICATION	0.0019643128712196374	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9774430822759096	WITHOUT_CLASSIFICATION	0.022556917724090363	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999691716392319	WITHOUT_CLASSIFICATION	3.082836076794358E-5	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998960849043387	WITHOUT_CLASSIFICATION	1.0391509566129945E-4	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999759949502578	WITHOUT_CLASSIFICATION	2.4005049742140072E-5	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998072268599311	WITHOUT_CLASSIFICATION	1.9277314006904437E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997797017992516	WITHOUT_CLASSIFICATION	2.2029820074838204E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999878894768875	WITHOUT_CLASSIFICATION	1.2110523112524334E-5	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.987722554315384	WITHOUT_CLASSIFICATION	0.012277445684616027	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9989243689982042	WITHOUT_CLASSIFICATION	0.0010756310017958517	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999785931223312	WITHOUT_CLASSIFICATION	2.1406877668786884E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9984327910633137	WITHOUT_CLASSIFICATION	0.0015672089366863145	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999107223508101	WITHOUT_CLASSIFICATION	8.927764918980291E-5	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999543845424	WITHOUT_CLASSIFICATION	4.561545766091652E-8	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999101208290166	WITHOUT_CLASSIFICATION	8.987917098334381E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999928436196434	WITHOUT_CLASSIFICATION	7.156380356702393E-6	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999895036156058	WITHOUT_CLASSIFICATION	1.0496384394190354E-5	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9995757121763527	WITHOUT_CLASSIFICATION	4.2428782364723E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999928436196434	WITHOUT_CLASSIFICATION	7.156380356702393E-6	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9975148487031301	WITHOUT_CLASSIFICATION	0.00248515129686984	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999101208290166	WITHOUT_CLASSIFICATION	8.987917098334381E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999921721382071	WITHOUT_CLASSIFICATION	7.827861792943698E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999928436196434	WITHOUT_CLASSIFICATION	7.156380356702393E-6	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999451484965636	WITHOUT_CLASSIFICATION	5.4851503436456274E-5	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9812018706345287	WITHOUT_CLASSIFICATION	0.018798129365471337	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999793809573276	WITHOUT_CLASSIFICATION	2.0619042672341142E-5	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999895638000558	WITHOUT_CLASSIFICATION	1.0436199944355221E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9997129041869232	WITHOUT_CLASSIFICATION	2.8709581307688443E-4	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999964362180225	WITHOUT_CLASSIFICATION	3.5637819773769075E-6	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998876724231887	WITHOUT_CLASSIFICATION	1.123275768112885E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999996551697425	WITHOUT_CLASSIFICATION	3.4483025751175214E-6	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.999956386883932	WITHOUT_CLASSIFICATION	4.361311606805779E-5	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998558716515857	WITHOUT_CLASSIFICATION	1.4412834841420695E-4	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999873650692629	WITHOUT_CLASSIFICATION	1.263493073720999E-5	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999531479056456	WITHOUT_CLASSIFICATION	4.6852094354483846E-5	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997328703428773	WITHOUT_CLASSIFICATION	2.6712965712264505E-4	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999730725198568	WITHOUT_CLASSIFICATION	2.6927480143109528E-5	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9994499575032803	WITHOUT_CLASSIFICATION	5.500424967197462E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9988638344116101	WITHOUT_CLASSIFICATION	0.0011361655883899253	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9994601667821669	WITHOUT_CLASSIFICATION	5.398332178331949E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999425997277792	WITHOUT_CLASSIFICATION	5.740027222071353E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9997501552251916	WITHOUT_CLASSIFICATION	2.4984477480838476E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999296137163282	WITHOUT_CLASSIFICATION	7.038628367174729E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999648814857363	WITHOUT_CLASSIFICATION	3.511851426380544E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999532609229629	WITHOUT_CLASSIFICATION	4.673907703715405E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999854113148618	WITHOUT_CLASSIFICATION	1.4588685138251847E-5	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999613545677578	WITHOUT_CLASSIFICATION	3.864543224214251E-5	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999219739734053	WITHOUT_CLASSIFICATION	7.802602659471097E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9996196324643559	WITHOUT_CLASSIFICATION	3.803675356441066E-4	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9998955098843592	WITHOUT_CLASSIFICATION	1.0449011564085367E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994030916599859	WITHOUT_CLASSIFICATION	5.969083400141485E-4	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994578610947403	WITHOUT_CLASSIFICATION	5.421389052596361E-4	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9979679777406574	WITHOUT_CLASSIFICATION	0.0020320222593426538	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9995222111130615	WITHOUT_CLASSIFICATION	4.777888869385829E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999473791586831	WITHOUT_CLASSIFICATION	5.26208413168524E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997412176256313	WITHOUT_CLASSIFICATION	2.587823743688067E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997412176256313	WITHOUT_CLASSIFICATION	2.587823743688067E-4	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999773253522355	WITHOUT_CLASSIFICATION	2.2674647764531284E-5	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997188997464949	WITHOUT_CLASSIFICATION	2.811002535051285E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999415738274862	WITHOUT_CLASSIFICATION	5.842617251377058E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998795140491582	WITHOUT_CLASSIFICATION	1.2048595084181316E-4	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9980427554291381	WITHOUT_CLASSIFICATION	0.001957244570861792	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999729343866103	WITHOUT_CLASSIFICATION	2.7065613389756504E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999729271369866	WITHOUT_CLASSIFICATION	2.707286301340156E-5	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999917124401956	WITHOUT_CLASSIFICATION	8.287559804331317E-6	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999046321148489	WITHOUT_CLASSIFICATION	9.536788515113587E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999044927290575	WITHOUT_CLASSIFICATION	9.550727094260678E-5	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9997577391453044	WITHOUT_CLASSIFICATION	2.4226085469551608E-4	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9998682357443751	WITHOUT_CLASSIFICATION	1.3176425562489065E-4	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.99997831630785	WITHOUT_CLASSIFICATION	2.1683692149983475E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997412176256313	WITHOUT_CLASSIFICATION	2.587823743688067E-4	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999621041172829	WITHOUT_CLASSIFICATION	3.7895882716974015E-5	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999150354451204	WITHOUT_CLASSIFICATION	8.496455487962717E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999823382370627	WITHOUT_CLASSIFICATION	1.766176293722431E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999527106583309	WITHOUT_CLASSIFICATION	4.728934166901836E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998751408468821	WITHOUT_CLASSIFICATION	1.2485915311781788E-4	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997452615706652	WITHOUT_CLASSIFICATION	2.547384293348254E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999401562305048	WITHOUT_CLASSIFICATION	5.984376949529818E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999115722811135	WITHOUT_CLASSIFICATION	8.842771888652152E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999559462477391	WITHOUT_CLASSIFICATION	4.4053752260865775E-5	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999489320431229	WITHOUT_CLASSIFICATION	5.106795687713864E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9992089315177269	WITHOUT_CLASSIFICATION	7.910684822730776E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994030916599859	WITHOUT_CLASSIFICATION	5.969083400141485E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997412176256313	WITHOUT_CLASSIFICATION	2.587823743688067E-4	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998859307657172	WITHOUT_CLASSIFICATION	1.1406923428275775E-4	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9989827172709054	WITHOUT_CLASSIFICATION	0.0010172827290946705	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999204989125259	WITHOUT_CLASSIFICATION	7.950108747409922E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9995964991203723	WITHOUT_CLASSIFICATION	4.035008796277497E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999915474257063	WITHOUT_CLASSIFICATION	8.452574293777836E-6	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998614454212897	WITHOUT_CLASSIFICATION	1.385545787101935E-4	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998441055970768	WITHOUT_CLASSIFICATION	1.5589440292324873E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999328731742	WITHOUT_CLASSIFICATION	6.712682580543259E-7	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999730612761404	WITHOUT_CLASSIFICATION	2.6938723859578535E-5	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999602502448828	WITHOUT_CLASSIFICATION	3.974975511730479E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9990934163258176	WITHOUT_CLASSIFICATION	9.065836741823626E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999677019348494	WITHOUT_CLASSIFICATION	3.229806515065424E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9997600991315928	WITHOUT_CLASSIFICATION	2.399008684073318E-4	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998130348062908	WITHOUT_CLASSIFICATION	1.869651937091428E-4	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999754254702647	WITHOUT_CLASSIFICATION	2.4574529735301473E-4	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999864518248051	WITHOUT_CLASSIFICATION	1.3548175194989795E-5	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999989131913742	WITHOUT_CLASSIFICATION	1.08680862572485E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999627601803515	WITHOUT_CLASSIFICATION	3.7239819648478423E-5	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9998890779498296	WITHOUT_CLASSIFICATION	1.1092205017042868E-4	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9993903236279599	WITHOUT_CLASSIFICATION	6.096763720401269E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999785736792151	WITHOUT_CLASSIFICATION	2.1426320784895443E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999785736792151	WITHOUT_CLASSIFICATION	2.1426320784895443E-4	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9994253803634456	WITHOUT_CLASSIFICATION	5.746196365544382E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999836296617264	WITHOUT_CLASSIFICATION	1.6370338273597092E-5	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998767647201708	WITHOUT_CLASSIFICATION	1.2323527982915195E-4	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999590543127516	WITHOUT_CLASSIFICATION	4.0945687248389574E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999858043407665	WITHOUT_CLASSIFICATION	1.4195659233490025E-4	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999931916992224	WITHOUT_CLASSIFICATION	6.808300777539434E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9998142874681224	WITHOUT_CLASSIFICATION	1.8571253187759463E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9964310315929957	WITHOUT_CLASSIFICATION	0.003568968407004341	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9964310315929957	WITHOUT_CLASSIFICATION	0.003568968407004341	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.5272009401040231	IMPLEMENTATION	0.4727990598959769	WITHOUT_CLASSIFICATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9997419288537519	WITHOUT_CLASSIFICATION	2.580711462480681E-4	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999980911714936	WITHOUT_CLASSIFICATION	1.9088285063792384E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999819824067798	WITHOUT_CLASSIFICATION	1.8017593220213122E-4	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999819824067798	WITHOUT_CLASSIFICATION	1.8017593220213122E-4	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999819824067798	WITHOUT_CLASSIFICATION	1.8017593220213122E-4	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999771478085157	WITHOUT_CLASSIFICATION	2.285219148429606E-4	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999985499836673	WITHOUT_CLASSIFICATION	1.4500163327148093E-5	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.830870376024044	WITHOUT_CLASSIFICATION	0.16912962397595602	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9996167763829632	WITHOUT_CLASSIFICATION	3.832236170367562E-4	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999980966997851	WITHOUT_CLASSIFICATION	1.9033002148977115E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997412176256313	WITHOUT_CLASSIFICATION	2.587823743688067E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997412176256313	WITHOUT_CLASSIFICATION	2.587823743688067E-4	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9979289940917644	WITHOUT_CLASSIFICATION	0.0020710059082355084	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999716272290109	WITHOUT_CLASSIFICATION	2.8372770989096664E-5	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9957749223974967	WITHOUT_CLASSIFICATION	0.004225077602503364	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9997133442056038	WITHOUT_CLASSIFICATION	2.8665579439621507E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999476445245138	WITHOUT_CLASSIFICATION	5.235547548631718E-5	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999555080025717	WITHOUT_CLASSIFICATION	4.449199742823471E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999615556880855	WITHOUT_CLASSIFICATION	3.844431191441554E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999884051463098	WITHOUT_CLASSIFICATION	1.1594853690051724E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999994876882325	WITHOUT_CLASSIFICATION	5.123117673973296E-7	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999669223174577	WITHOUT_CLASSIFICATION	3.3077682542308075E-5	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9997559575284835	WITHOUT_CLASSIFICATION	2.4404247151653286E-4	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998953046341366	WITHOUT_CLASSIFICATION	1.0469536586339035E-4	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998953046341366	WITHOUT_CLASSIFICATION	1.0469536586339035E-4	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998953046341366	WITHOUT_CLASSIFICATION	1.0469536586339035E-4	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998953046341366	WITHOUT_CLASSIFICATION	1.0469536586339035E-4	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998953046341366	WITHOUT_CLASSIFICATION	1.0469536586339035E-4	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998808254368351	WITHOUT_CLASSIFICATION	1.1917456316481386E-4	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998808254368351	WITHOUT_CLASSIFICATION	1.1917456316481386E-4	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998808254368351	WITHOUT_CLASSIFICATION	1.1917456316481386E-4	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998808254368351	WITHOUT_CLASSIFICATION	1.1917456316481386E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999279185684216	WITHOUT_CLASSIFICATION	7.208143157839498E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999785736792151	WITHOUT_CLASSIFICATION	2.1426320784895443E-4	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.99991826533534	WITHOUT_CLASSIFICATION	8.17346646599413E-5	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998808254368351	WITHOUT_CLASSIFICATION	1.1917456316481386E-4	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.998537056933228	WITHOUT_CLASSIFICATION	0.0014629430667720625	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999908006971584	WITHOUT_CLASSIFICATION	9.199302841597668E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999257539638087	WITHOUT_CLASSIFICATION	7.42460361912216E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999440974110513	WITHOUT_CLASSIFICATION	5.5902588948695E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999989199154807	WITHOUT_CLASSIFICATION	1.0800845193145439E-6	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999497351543194	WITHOUT_CLASSIFICATION	5.026484568059697E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999901317989631	WITHOUT_CLASSIFICATION	9.86820103689962E-5	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999763387351113	WITHOUT_CLASSIFICATION	2.3661264888721115E-5	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999966310892225	WITHOUT_CLASSIFICATION	3.368910777513742E-5	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999452776924	WITHOUT_CLASSIFICATION	5.4722307620234185E-8	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999957256662199	WITHOUT_CLASSIFICATION	4.274333780178898E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999646988339659	WITHOUT_CLASSIFICATION	3.5301166034131566E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999893351629556	WITHOUT_CLASSIFICATION	1.0664837044414258E-4	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9992162904053288	WITHOUT_CLASSIFICATION	7.837095946713377E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9066087802647164	WITHOUT_CLASSIFICATION	0.09339121973528354	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999271065272454	WITHOUT_CLASSIFICATION	7.289347275462015E-5	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999947083060502	WITHOUT_CLASSIFICATION	5.291693949829906E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999327866415174	WITHOUT_CLASSIFICATION	6.721335848257556E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999327866415174	WITHOUT_CLASSIFICATION	6.721335848257556E-5	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9998845034723322	WITHOUT_CLASSIFICATION	1.1549652766795929E-4	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999978275055597	WITHOUT_CLASSIFICATION	2.1724944403086767E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998718795324592	WITHOUT_CLASSIFICATION	1.2812046754092824E-4	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997572448793792	WITHOUT_CLASSIFICATION	2.427551206207865E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999003834674239	WITHOUT_CLASSIFICATION	9.961653257605207E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999273955536578	WITHOUT_CLASSIFICATION	7.260444634215575E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998820426670483	WITHOUT_CLASSIFICATION	1.1795733295174779E-4	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999624409493089	WITHOUT_CLASSIFICATION	3.75590506912082E-5	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998707616940921	WITHOUT_CLASSIFICATION	1.2923830590798362E-4	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999926700020396	WITHOUT_CLASSIFICATION	7.329997960318992E-6	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999163230351743	WITHOUT_CLASSIFICATION	8.367696482562447E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999677019348494	WITHOUT_CLASSIFICATION	3.229806515065424E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999971702330946	WITHOUT_CLASSIFICATION	2.829766905396374E-5	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999992789959452	WITHOUT_CLASSIFICATION	7.210040548071993E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999806534559851	WITHOUT_CLASSIFICATION	1.9346544014892004E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999075391291259	WITHOUT_CLASSIFICATION	9.246087087405793E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999983842479555	WITHOUT_CLASSIFICATION	1.615752044516425E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999983842479555	WITHOUT_CLASSIFICATION	1.615752044516425E-6	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997837871382086	WITHOUT_CLASSIFICATION	2.1621286179146279E-4	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999523347308	WITHOUT_CLASSIFICATION	4.7665269273025453E-8	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999608806195216	WITHOUT_CLASSIFICATION	3.911938047842766E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999656337904418	WITHOUT_CLASSIFICATION	3.436620955813614E-5	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999080015033054	WITHOUT_CLASSIFICATION	9.199849669458068E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999384335384572	WITHOUT_CLASSIFICATION	6.156646154281803E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9994894668434673	WITHOUT_CLASSIFICATION	5.1053315653276E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999285893645105	WITHOUT_CLASSIFICATION	7.141063548949552E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998316704664264	WITHOUT_CLASSIFICATION	1.6832953357361614E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.999998198708257	WITHOUT_CLASSIFICATION	1.801291743019441E-6	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999934783267473	WITHOUT_CLASSIFICATION	6.521673252703134E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999285893645105	WITHOUT_CLASSIFICATION	7.141063548949552E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9982236489667464	WITHOUT_CLASSIFICATION	0.0017763510332535416	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9994053114010919	WITHOUT_CLASSIFICATION	5.946885989081971E-4	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9998246715651871	WITHOUT_CLASSIFICATION	1.7532843481289913E-4	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9998874599755395	WITHOUT_CLASSIFICATION	1.1254002446050973E-4	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998988013572	WITHOUT_CLASSIFICATION	1.0119864274447646E-7	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999127644040505	WITHOUT_CLASSIFICATION	8.723559594947414E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.991596405457621	WITHOUT_CLASSIFICATION	0.008403594542378972	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9997700021039101	WITHOUT_CLASSIFICATION	2.2999789608986487E-4	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999230972685472	WITHOUT_CLASSIFICATION	7.690273145278395E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999697736944557	WITHOUT_CLASSIFICATION	3.0226305544209364E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9995664539017788	WITHOUT_CLASSIFICATION	4.33546098221187E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998546627987058	WITHOUT_CLASSIFICATION	1.4533720129417436E-4	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9996253726529639	WITHOUT_CLASSIFICATION	3.7462734703615073E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9992179942213845	WITHOUT_CLASSIFICATION	7.820057786155973E-4	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9990437139489766	WITHOUT_CLASSIFICATION	9.562860510233182E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9998949352470717	WITHOUT_CLASSIFICATION	1.0506475292823066E-4	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999877240291931	WITHOUT_CLASSIFICATION	1.2275970806891408E-4	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9930263147981708	WITHOUT_CLASSIFICATION	0.006973685201829104	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9930263147981708	WITHOUT_CLASSIFICATION	0.006973685201829104	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.991596405457621	WITHOUT_CLASSIFICATION	0.008403594542378972	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9824889175323733	WITHOUT_CLASSIFICATION	0.017511082467626574	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9972607392417745	WITHOUT_CLASSIFICATION	0.002739260758225502	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9995220478853715	WITHOUT_CLASSIFICATION	4.779521146285686E-4	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999376547787192	WITHOUT_CLASSIFICATION	6.234522128075716E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999251156497879	WITHOUT_CLASSIFICATION	7.48843502120726E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999616042400754	WITHOUT_CLASSIFICATION	3.839575992451008E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999814491929164	WITHOUT_CLASSIFICATION	1.8550807083573588E-5	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9992734233969425	WITHOUT_CLASSIFICATION	7.26576603057472E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999833690625348	WITHOUT_CLASSIFICATION	1.6630937465192104E-4	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999551269497334	WITHOUT_CLASSIFICATION	4.4873050266565E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999916468340355	WITHOUT_CLASSIFICATION	8.353165964368944E-6	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999289193364652	WITHOUT_CLASSIFICATION	7.108066353488499E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999538689219536	WITHOUT_CLASSIFICATION	4.6131078046405464E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999872206067792	WITHOUT_CLASSIFICATION	1.2779393220613466E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9996874327625321	WITHOUT_CLASSIFICATION	3.1256723746785645E-4	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999929813699523	WITHOUT_CLASSIFICATION	7.018630047656901E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999496538675	WITHOUT_CLASSIFICATION	5.03461325302105E-8	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999886923171265	WITHOUT_CLASSIFICATION	1.1307682873479578E-5	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999897400283211	WITHOUT_CLASSIFICATION	1.025997167890532E-4	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9997635655882592	WITHOUT_CLASSIFICATION	2.3643441174077154E-4	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9989276988751539	WITHOUT_CLASSIFICATION	0.00107230112484604	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999930089669172	WITHOUT_CLASSIFICATION	6.991033082738395E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9993959141250113	WITHOUT_CLASSIFICATION	6.040858749888078E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999428318544137	WITHOUT_CLASSIFICATION	5.716814558624692E-5	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999589043049203	WITHOUT_CLASSIFICATION	4.1095695079737506E-5	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999884702252872	WITHOUT_CLASSIFICATION	1.1529774712800123E-4	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999940646217628	WITHOUT_CLASSIFICATION	5.935378237333181E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999880877034482	WITHOUT_CLASSIFICATION	1.1912296551880919E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999981754615319	WITHOUT_CLASSIFICATION	1.8245384680981932E-5	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9991382760493064	WITHOUT_CLASSIFICATION	8.617239506936193E-4	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9996874327625321	WITHOUT_CLASSIFICATION	3.1256723746785645E-4	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.99992711441468	WITHOUT_CLASSIFICATION	7.288558531996858E-5	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999993885168186	WITHOUT_CLASSIFICATION	6.114831812984085E-7	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999711894196622	WITHOUT_CLASSIFICATION	2.8810580337761405E-5	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997615316728504	WITHOUT_CLASSIFICATION	2.3846832714947123E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9949793224739604	WITHOUT_CLASSIFICATION	0.00502067752603953	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999497434808122	WITHOUT_CLASSIFICATION	5.025651918787421E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.999980305085168	WITHOUT_CLASSIFICATION	1.969491483196528E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9997973852508228	WITHOUT_CLASSIFICATION	2.0261474917716537E-4	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9977490600837282	WITHOUT_CLASSIFICATION	0.0022509399162718366	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9993820080575002	WITHOUT_CLASSIFICATION	6.179919424998597E-4	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.999839319839058	WITHOUT_CLASSIFICATION	1.6068016094202887E-4	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999989378487876	WITHOUT_CLASSIFICATION	1.062151212446015E-6	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998921145930705	WITHOUT_CLASSIFICATION	1.0788540692950373E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999749648281369	WITHOUT_CLASSIFICATION	2.5035171863215625E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997735502137881	WITHOUT_CLASSIFICATION	2.264497862118016E-4	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9275911264714743	WITHOUT_CLASSIFICATION	0.07240887352852568	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999985860582824	WITHOUT_CLASSIFICATION	1.413941717508502E-6	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999909329539458	WITHOUT_CLASSIFICATION	9.0670460542716E-6	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9985667917761951	WITHOUT_CLASSIFICATION	0.0014332082238048718	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999627545225998	WITHOUT_CLASSIFICATION	3.724547740023329E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998316704664264	WITHOUT_CLASSIFICATION	1.6832953357361614E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999994150150003	WITHOUT_CLASSIFICATION	5.849849997579625E-7	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9996874327625321	WITHOUT_CLASSIFICATION	3.1256723746785645E-4	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999041389277588	WITHOUT_CLASSIFICATION	9.586107224130853E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999752557610616	WITHOUT_CLASSIFICATION	2.474423893843809E-5	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999486764702434	WITHOUT_CLASSIFICATION	5.132352975645868E-5	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999486764702434	WITHOUT_CLASSIFICATION	5.132352975645868E-5	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998373118675941	WITHOUT_CLASSIFICATION	1.6268813240602717E-4	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.999964020606643	WITHOUT_CLASSIFICATION	3.5979393356976544E-5	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.994754192169711	WITHOUT_CLASSIFICATION	0.005245807830289033	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999522663360751	WITHOUT_CLASSIFICATION	4.7733663924857825E-5	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999914704627198	WITHOUT_CLASSIFICATION	8.529537280201741E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999844529129949	WITHOUT_CLASSIFICATION	1.5547087005117326E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9858727795628563	WITHOUT_CLASSIFICATION	0.014127220437143758	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9998725563807258	WITHOUT_CLASSIFICATION	1.274436192741703E-4	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9664551668626614	WITHOUT_CLASSIFICATION	0.033544833137338616	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9664551668626614	WITHOUT_CLASSIFICATION	0.033544833137338616	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999994829534329	WITHOUT_CLASSIFICATION	5.170465672109576E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9729054627834576	WITHOUT_CLASSIFICATION	0.02709453721654251	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9942615727914096	WITHOUT_CLASSIFICATION	0.005738427208590373	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999982611700721	WITHOUT_CLASSIFICATION	1.738829927963656E-6	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999979134464634	WITHOUT_CLASSIFICATION	2.0865535365872586E-6	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997830996453891	WITHOUT_CLASSIFICATION	2.169003546108313E-4	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992175364637	WITHOUT_CLASSIFICATION	7.824635362399454E-7	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999988356080864	WITHOUT_CLASSIFICATION	1.1643919135990304E-5	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999660614645199	WITHOUT_CLASSIFICATION	3.39385354801354E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9997343153115938	WITHOUT_CLASSIFICATION	2.656846884061538E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9997343153115938	WITHOUT_CLASSIFICATION	2.656846884061538E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9996975782891476	WITHOUT_CLASSIFICATION	3.024217108523858E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997673382691	WITHOUT_CLASSIFICATION	2.3266173087981148E-7	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995774135879216	WITHOUT_CLASSIFICATION	4.2258641207840696E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999990705186557	WITHOUT_CLASSIFICATION	9.294813443008168E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9995479365807867	WITHOUT_CLASSIFICATION	4.520634192132969E-4	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998872630368727	WITHOUT_CLASSIFICATION	1.1273696312732739E-4	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999975986688384	WITHOUT_CLASSIFICATION	2.4013311614940223E-6	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9998573474507206	WITHOUT_CLASSIFICATION	1.4265254927944693E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999983962357241	WITHOUT_CLASSIFICATION	1.6037642759968992E-6	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999605128431416	WITHOUT_CLASSIFICATION	3.948715685849707E-5	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999821634512811	WITHOUT_CLASSIFICATION	1.7836548718925478E-5	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999635974590761	WITHOUT_CLASSIFICATION	3.6402540923848405E-5	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999179048495753	WITHOUT_CLASSIFICATION	8.20951504247201E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999650559467018	WITHOUT_CLASSIFICATION	3.494405329819695E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998508650920541	WITHOUT_CLASSIFICATION	1.491349079458395E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999635728004257	WITHOUT_CLASSIFICATION	3.642719957434851E-5	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9998694975808656	WITHOUT_CLASSIFICATION	1.3050241913439582E-4	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999909223636541	WITHOUT_CLASSIFICATION	9.077636345894317E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99998821870282	WITHOUT_CLASSIFICATION	1.178129718009752E-5	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999909423509068	WITHOUT_CLASSIFICATION	9.057649093256368E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999664828138501	WITHOUT_CLASSIFICATION	3.351718614992511E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.999959780423425	WITHOUT_CLASSIFICATION	4.021957657490084E-5	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9997134734915227	WITHOUT_CLASSIFICATION	2.865265084772676E-4	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998072268599311	WITHOUT_CLASSIFICATION	1.9277314006904437E-4	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999870799294676	WITHOUT_CLASSIFICATION	1.2920070532494233E-5	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999096854318696	WITHOUT_CLASSIFICATION	9.031456813029317E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9996078715857714	WITHOUT_CLASSIFICATION	3.921284142285521E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9998248281525455	WITHOUT_CLASSIFICATION	1.7517184745446907E-4	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995585889510378	WITHOUT_CLASSIFICATION	4.4141104896222886E-4	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997247110907997	WITHOUT_CLASSIFICATION	0.0027528890920030216	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999893506682189	WITHOUT_CLASSIFICATION	1.0649331781006273E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998607041490004	WITHOUT_CLASSIFICATION	1.3929585099959073E-4	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9996217270352117	WITHOUT_CLASSIFICATION	3.782729647883773E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997152502538425	WITHOUT_CLASSIFICATION	0.0028474974615749437	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.6827796448589436	WITHOUT_CLASSIFICATION	0.3172203551410563	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999283032193044	WITHOUT_CLASSIFICATION	7.169678069559278E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999995705219189	WITHOUT_CLASSIFICATION	4.2947808113560445E-7	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998317725434118	WITHOUT_CLASSIFICATION	1.682274565882791E-4	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975354119153471	WITHOUT_CLASSIFICATION	0.0024645880846529376	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998593286745866	WITHOUT_CLASSIFICATION	1.406713254134812E-4	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999663326635658	WITHOUT_CLASSIFICATION	3.3667336434156977E-5	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998569374766465	WITHOUT_CLASSIFICATION	1.430625233534653E-4	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9998271202568637	WITHOUT_CLASSIFICATION	1.7287974313618981E-4	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999767873688281	WITHOUT_CLASSIFICATION	2.321263117185042E-5	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9998550164698691	WITHOUT_CLASSIFICATION	1.4498353013086984E-4	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9992183908145743	WITHOUT_CLASSIFICATION	7.816091854256079E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9997499712662947	WITHOUT_CLASSIFICATION	2.500287337052696E-4	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999459375851996	WITHOUT_CLASSIFICATION	5.4062414800346515E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9980763025861418	WITHOUT_CLASSIFICATION	0.0019236974138582327	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999982361366083	WITHOUT_CLASSIFICATION	1.7638633916001023E-6	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999669221191033	WITHOUT_CLASSIFICATION	3.307788089666808E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9997793599780493	WITHOUT_CLASSIFICATION	2.206400219506433E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999910725707438	WITHOUT_CLASSIFICATION	8.927429256250273E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999828117051852	WITHOUT_CLASSIFICATION	1.7188294814836123E-5	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999435247252936	WITHOUT_CLASSIFICATION	5.647527470642489E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999868588493379	WITHOUT_CLASSIFICATION	1.314115066201556E-5	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9993182680953271	WITHOUT_CLASSIFICATION	6.817319046729677E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999250262993392	WITHOUT_CLASSIFICATION	7.497370066084437E-5	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9993182680953271	WITHOUT_CLASSIFICATION	6.817319046729677E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999147244802113	WITHOUT_CLASSIFICATION	8.527551978869243E-5	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998047319877679	WITHOUT_CLASSIFICATION	1.9526801223212145E-4	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9988597806856053	WITHOUT_CLASSIFICATION	0.0011402193143946544	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999331542552206	WITHOUT_CLASSIFICATION	6.684574477953844E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998088637950227	WITHOUT_CLASSIFICATION	1.9113620497723406E-4	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9988597806856053	WITHOUT_CLASSIFICATION	0.0011402193143946544	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999363246428089	WITHOUT_CLASSIFICATION	6.367535719109344E-5	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9994300425801871	WITHOUT_CLASSIFICATION	5.699574198130238E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999428478694298	WITHOUT_CLASSIFICATION	5.7152130570166886E-5	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9994404811285101	WITHOUT_CLASSIFICATION	5.595188714898346E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9996548092962451	WITHOUT_CLASSIFICATION	3.451907037548606E-4	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999789870718115	WITHOUT_CLASSIFICATION	2.1012928188479725E-5	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999535342590958	WITHOUT_CLASSIFICATION	4.64657409041295E-5	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.6999909827990459	IMPLEMENTATION	0.30000901720095413	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9997834708397135	WITHOUT_CLASSIFICATION	2.1652916028643807E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999879233626994	WITHOUT_CLASSIFICATION	1.2076637300595365E-4	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999739439673739	WITHOUT_CLASSIFICATION	2.6056032626041763E-5	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999448221736579	WITHOUT_CLASSIFICATION	5.517782634217027E-5	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999928005417643	WITHOUT_CLASSIFICATION	7.1994582357541495E-6	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998700900503622	WITHOUT_CLASSIFICATION	1.2990994963779504E-4	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999805773996	WITHOUT_CLASSIFICATION	1.9422600402454606E-7	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9997087983923696	WITHOUT_CLASSIFICATION	2.9120160763038334E-4	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999868837264041	WITHOUT_CLASSIFICATION	1.3116273595910461E-5	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999063819111005	WITHOUT_CLASSIFICATION	9.36180888995713E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997208422935209	WITHOUT_CLASSIFICATION	2.7915770647909076E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999998754140451	WITHOUT_CLASSIFICATION	1.245859549009832E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999649080076113	WITHOUT_CLASSIFICATION	3.509199238871451E-5	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999543883196055	WITHOUT_CLASSIFICATION	4.561168039455813E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999719169988574	WITHOUT_CLASSIFICATION	2.808300114259632E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9836420360000052	WITHOUT_CLASSIFICATION	0.016357963999994802	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9997817698030494	WITHOUT_CLASSIFICATION	2.1823019695048565E-4	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999405963849592	WITHOUT_CLASSIFICATION	5.9403615040678055E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999995639853	WITHOUT_CLASSIFICATION	4.3601469782070347E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.99921057526743	WITHOUT_CLASSIFICATION	7.89424732569966E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999645016081546	WITHOUT_CLASSIFICATION	3.549839184545849E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9998215263319192	WITHOUT_CLASSIFICATION	1.784736680807167E-4	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999719169988574	WITHOUT_CLASSIFICATION	2.808300114259632E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999713014006956	WITHOUT_CLASSIFICATION	2.869859930440106E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999501069807406	WITHOUT_CLASSIFICATION	4.9893019259250294E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9996882207487778	WITHOUT_CLASSIFICATION	3.1177925122207546E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9923727081539244	WITHOUT_CLASSIFICATION	0.007627291846075611	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999998754140451	WITHOUT_CLASSIFICATION	1.245859549009832E-6	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999951303914845	WITHOUT_CLASSIFICATION	4.869608515465109E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999945835784164	WITHOUT_CLASSIFICATION	5.416421583651987E-6	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999596608437991	WITHOUT_CLASSIFICATION	4.033915620101372E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9995722433154697	WITHOUT_CLASSIFICATION	4.2775668453032105E-4	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999938367883976	WITHOUT_CLASSIFICATION	6.16321160240952E-6	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999994632768628	WITHOUT_CLASSIFICATION	5.367231371475757E-7	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999864834039668	WITHOUT_CLASSIFICATION	1.351659603328125E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997207894731449	WITHOUT_CLASSIFICATION	2.792105268551335E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999286855931072	WITHOUT_CLASSIFICATION	7.131440689270284E-5	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9997246687064352	WITHOUT_CLASSIFICATION	2.7533129356474383E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999967280980246	WITHOUT_CLASSIFICATION	3.2719019753343222E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999710116137561	WITHOUT_CLASSIFICATION	2.898838624389346E-5	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999706184067692	WITHOUT_CLASSIFICATION	2.9381593230879305E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9993002836104231	WITHOUT_CLASSIFICATION	6.997163895768699E-4	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999541988961191	WITHOUT_CLASSIFICATION	4.580110388086057E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999795838827533	WITHOUT_CLASSIFICATION	2.041611724668631E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9882186396088461	WITHOUT_CLASSIFICATION	0.011781360391153873	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.998654848956085	WITHOUT_CLASSIFICATION	0.0013451510439149673	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9928343909070739	WITHOUT_CLASSIFICATION	0.007165609092926038	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999728690774274	WITHOUT_CLASSIFICATION	2.7130922572483357E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9969944604996864	WITHOUT_CLASSIFICATION	0.0030055395003135504	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9969944604996864	WITHOUT_CLASSIFICATION	0.0030055395003135504	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998922161854931	WITHOUT_CLASSIFICATION	1.0778381450702156E-4	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9969944604996864	WITHOUT_CLASSIFICATION	0.0030055395003135504	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9969944604996864	WITHOUT_CLASSIFICATION	0.0030055395003135504	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9976730120920693	WITHOUT_CLASSIFICATION	0.002326987907930695	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999711111573176	WITHOUT_CLASSIFICATION	2.8888842682395807E-4	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999841910320971	WITHOUT_CLASSIFICATION	1.5808967902890917E-4	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999841910320971	WITHOUT_CLASSIFICATION	1.5808967902890917E-4	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.99932088937972	WITHOUT_CLASSIFICATION	6.791106202799216E-4	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9558279087929155	WITHOUT_CLASSIFICATION	0.04417209120708459	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999418662021051	WITHOUT_CLASSIFICATION	5.813379789484961E-5	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998901782633	WITHOUT_CLASSIFICATION	1.0982173677537355E-7	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998010974803909	WITHOUT_CLASSIFICATION	1.9890251960896817E-4	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9997410248524782	WITHOUT_CLASSIFICATION	2.5897514752184906E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999244932966928	WITHOUT_CLASSIFICATION	7.550670330726524E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999112453937203	WITHOUT_CLASSIFICATION	8.875460627963942E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998993493382206	WITHOUT_CLASSIFICATION	1.0065066177944721E-4	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999929249125946	WITHOUT_CLASSIFICATION	7.075087405298288E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998013182599897	WITHOUT_CLASSIFICATION	1.986817400103604E-4	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999134714344602	WITHOUT_CLASSIFICATION	8.652856553978476E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999752177250237	WITHOUT_CLASSIFICATION	2.4782274976233482E-5	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999745708475309	WITHOUT_CLASSIFICATION	2.542915246906221E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999007545686626	WITHOUT_CLASSIFICATION	9.924543133738202E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999304351167884	WITHOUT_CLASSIFICATION	6.956488321170082E-5	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9996945474514244	WITHOUT_CLASSIFICATION	3.054525485755398E-4	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9997786707065041	WITHOUT_CLASSIFICATION	2.2132929349596666E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999752177250237	WITHOUT_CLASSIFICATION	2.4782274976233482E-5	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999649080076113	WITHOUT_CLASSIFICATION	3.509199238871451E-5	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9998210094549539	WITHOUT_CLASSIFICATION	1.7899054504615122E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999484262273808	WITHOUT_CLASSIFICATION	5.157377261918377E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998414726116207	WITHOUT_CLASSIFICATION	1.585273883794162E-4	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9987473312678423	WITHOUT_CLASSIFICATION	0.0012526687321577391	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999419694062408	WITHOUT_CLASSIFICATION	5.8030593759240185E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9993292476595375	WITHOUT_CLASSIFICATION	6.707523404624309E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999811538364143	WITHOUT_CLASSIFICATION	1.884616358571716E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998888363480051	WITHOUT_CLASSIFICATION	1.1116365199485372E-4	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999991187460492	WITHOUT_CLASSIFICATION	8.812539507957641E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999425727894764	WITHOUT_CLASSIFICATION	5.742721052365962E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999521736152996	WITHOUT_CLASSIFICATION	4.782638470034936E-5	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9994642886220592	WITHOUT_CLASSIFICATION	5.357113779409539E-4	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9989746664632595	WITHOUT_CLASSIFICATION	0.0010253335367405396	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9847989096952341	WITHOUT_CLASSIFICATION	0.015201090304765892	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999252313652387	WITHOUT_CLASSIFICATION	7.476863476123812E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9991123362932075	WITHOUT_CLASSIFICATION	8.876637067924949E-4	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9994039396797021	WITHOUT_CLASSIFICATION	5.960603202978212E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999967748905662	WITHOUT_CLASSIFICATION	3.2251094337967065E-5	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999315608069635	WITHOUT_CLASSIFICATION	6.843919303644113E-5	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999663766631195	WITHOUT_CLASSIFICATION	3.3623336880517975E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9994300364348517	WITHOUT_CLASSIFICATION	5.699635651483241E-4	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999897592818628	WITHOUT_CLASSIFICATION	1.0240718137208522E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998888363480051	WITHOUT_CLASSIFICATION	1.1116365199485372E-4	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9996580705828743	WITHOUT_CLASSIFICATION	3.419294171256874E-4	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9997309150213134	WITHOUT_CLASSIFICATION	2.690849786866218E-4	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9990147594353838	WITHOUT_CLASSIFICATION	9.85240564616297E-4	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998522204536807	WITHOUT_CLASSIFICATION	1.4777954631939463E-4	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9997391696188875	WITHOUT_CLASSIFICATION	2.608303811125345E-4	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9995453120235436	WITHOUT_CLASSIFICATION	4.5468797645640223E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9995153094472239	WITHOUT_CLASSIFICATION	4.8469055277605623E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9995440678350869	WITHOUT_CLASSIFICATION	4.55932164913174E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9995565762123804	WITHOUT_CLASSIFICATION	4.4342378761962016E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998175357040375	WITHOUT_CLASSIFICATION	1.824642959624857E-4	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999114750664971	WITHOUT_CLASSIFICATION	8.852493350286752E-5	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999862441757073	WITHOUT_CLASSIFICATION	1.3755824292635769E-5	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999831290496758	WITHOUT_CLASSIFICATION	1.687095032424144E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998767203519253	WITHOUT_CLASSIFICATION	1.2327964807466336E-4	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999691960403154	WITHOUT_CLASSIFICATION	3.080395968454228E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999972684496738	WITHOUT_CLASSIFICATION	2.7315503262002105E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998175357040375	WITHOUT_CLASSIFICATION	1.824642959624857E-4	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999848253834444	WITHOUT_CLASSIFICATION	1.5174616555687336E-5	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999218075133572	WITHOUT_CLASSIFICATION	7.819248664274186E-5	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998158447639328	WITHOUT_CLASSIFICATION	1.8415523606720563E-4	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998638941268803	WITHOUT_CLASSIFICATION	1.3610587311970243E-4	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9997359761023578	WITHOUT_CLASSIFICATION	2.6402389764218503E-4	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9996074763328437	WITHOUT_CLASSIFICATION	3.925236671562251E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998767203519253	WITHOUT_CLASSIFICATION	1.2327964807466336E-4	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998659572366617	WITHOUT_CLASSIFICATION	1.340427633383052E-4	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999894889640804	WITHOUT_CLASSIFICATION	1.0511035919599745E-4	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773219129665	WITHOUT_CLASSIFICATION	1.2267808703352E-4	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990663987776197	WITHOUT_CLASSIFICATION	9.33601222380166E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990663987776197	WITHOUT_CLASSIFICATION	9.33601222380166E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990663987776197	WITHOUT_CLASSIFICATION	9.33601222380166E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999517307357204	WITHOUT_CLASSIFICATION	4.826926427967642E-5	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999517307357204	WITHOUT_CLASSIFICATION	4.826926427967642E-5	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999976983694666	WITHOUT_CLASSIFICATION	2.3016305333553263E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999649922762022	WITHOUT_CLASSIFICATION	3.500772379773804E-5	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9997737385778062	WITHOUT_CLASSIFICATION	2.2626142219375194E-4	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9997462577711599	WITHOUT_CLASSIFICATION	2.537422288401056E-4	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9879875453677631	WITHOUT_CLASSIFICATION	0.012012454632236953	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999841960765052	WITHOUT_CLASSIFICATION	1.580392349479697E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998905008043459	WITHOUT_CLASSIFICATION	1.0949919565405104E-4	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999995981818245	WITHOUT_CLASSIFICATION	4.018181754949226E-7	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999238791938542	WITHOUT_CLASSIFICATION	7.612080614589638E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999841960765052	WITHOUT_CLASSIFICATION	1.580392349479697E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998905008043459	WITHOUT_CLASSIFICATION	1.0949919565405104E-4	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999834109708886	WITHOUT_CLASSIFICATION	1.658902911139717E-5	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999775417206613	WITHOUT_CLASSIFICATION	2.2458279338660368E-5	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999775766343181	WITHOUT_CLASSIFICATION	2.242336568192319E-5	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999992403681272	WITHOUT_CLASSIFICATION	7.596318728574563E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998807715441814	WITHOUT_CLASSIFICATION	1.1922845581857482E-4	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999816522612431	WITHOUT_CLASSIFICATION	1.8347738756917428E-5	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999176239136115	WITHOUT_CLASSIFICATION	8.237608638856928E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999203733027276	WITHOUT_CLASSIFICATION	7.962669727235716E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999935072294869	WITHOUT_CLASSIFICATION	6.492770513034023E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997420642384824	WITHOUT_CLASSIFICATION	2.579357615175764E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999610658581486	WITHOUT_CLASSIFICATION	3.8934141851434316E-5	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998793161235985	WITHOUT_CLASSIFICATION	1.2068387640143597E-4	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999312052978291	WITHOUT_CLASSIFICATION	6.879470217086802E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999921990059975	WITHOUT_CLASSIFICATION	7.800994002628427E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997328703428773	WITHOUT_CLASSIFICATION	2.6712965712264505E-4	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999516865208301	WITHOUT_CLASSIFICATION	4.831347916976875E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998009740896094	WITHOUT_CLASSIFICATION	1.9902591039051154E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999957709568035	WITHOUT_CLASSIFICATION	4.229043196497824E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999987528016034	WITHOUT_CLASSIFICATION	1.2471983964656058E-6	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9983161937017759	WITHOUT_CLASSIFICATION	0.001683806298224185	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999442997810076	WITHOUT_CLASSIFICATION	5.5700218992389454E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999956651590158	WITHOUT_CLASSIFICATION	4.334840984168472E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9946213671710946	WITHOUT_CLASSIFICATION	0.005378632828905366	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998488352529339	WITHOUT_CLASSIFICATION	1.5116474706604148E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999746594778959	WITHOUT_CLASSIFICATION	2.534052210409713E-5	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998637294776196	WITHOUT_CLASSIFICATION	1.3627052238034107E-4	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999723524230467	WITHOUT_CLASSIFICATION	2.7647576953305E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997900634243638	WITHOUT_CLASSIFICATION	2.09936575636109E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997900634243638	WITHOUT_CLASSIFICATION	2.09936575636109E-4	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9996172845692595	WITHOUT_CLASSIFICATION	3.827154307404982E-4	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999131842064745	WITHOUT_CLASSIFICATION	8.681579352551642E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.991665172775369	WITHOUT_CLASSIFICATION	0.008334827224630898	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999677019348494	WITHOUT_CLASSIFICATION	3.229806515065424E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.998838767903369	WITHOUT_CLASSIFICATION	0.00116123209663098	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999995881623088	WITHOUT_CLASSIFICATION	4.118376912091432E-6	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999713638922103	WITHOUT_CLASSIFICATION	2.8636107789620916E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9998513382944829	WITHOUT_CLASSIFICATION	1.4866170551700408E-4	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.999705840090464	WITHOUT_CLASSIFICATION	2.9415990953602E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9953511339206548	WITHOUT_CLASSIFICATION	0.004648866079345168	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999277902636303	WITHOUT_CLASSIFICATION	7.220973636974311E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999548150263854	WITHOUT_CLASSIFICATION	4.518497361451904E-5	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999902398233927	WITHOUT_CLASSIFICATION	9.76017660718194E-6	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999981354673729	WITHOUT_CLASSIFICATION	1.864532627067383E-6	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9983904043684145	WITHOUT_CLASSIFICATION	0.001609595631585499	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999613556536717	WITHOUT_CLASSIFICATION	3.864434632827241E-5	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997693595026598	WITHOUT_CLASSIFICATION	2.3064049734021816E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999548150263854	WITHOUT_CLASSIFICATION	4.518497361451904E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999548150263854	WITHOUT_CLASSIFICATION	4.518497361451904E-5	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999875977994163	WITHOUT_CLASSIFICATION	1.2402200583672028E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999873794900006	WITHOUT_CLASSIFICATION	1.2620509999395413E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9954388408971114	WITHOUT_CLASSIFICATION	0.004561159102888554	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999963119507781	WITHOUT_CLASSIFICATION	3.6880492219950873E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999893351629556	WITHOUT_CLASSIFICATION	1.0664837044414258E-4	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998009740896094	WITHOUT_CLASSIFICATION	1.9902591039051154E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9994765828237141	WITHOUT_CLASSIFICATION	5.234171762859719E-4	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998620584491804	WITHOUT_CLASSIFICATION	1.3794155081969483E-4	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9998764297898038	WITHOUT_CLASSIFICATION	1.2357021019611102E-4	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995001223727344	WITHOUT_CLASSIFICATION	4.99877627265486E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999987948132361	WITHOUT_CLASSIFICATION	1.205186763938225E-6	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999385041128	WITHOUT_CLASSIFICATION	6.149588720002893E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998423704983389	WITHOUT_CLASSIFICATION	1.5762950166114964E-4	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998423704983389	WITHOUT_CLASSIFICATION	1.5762950166114964E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998423704983389	WITHOUT_CLASSIFICATION	1.5762950166114964E-4	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998423704983389	WITHOUT_CLASSIFICATION	1.5762950166114964E-4	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998671605265911	WITHOUT_CLASSIFICATION	1.3283947340885687E-4	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999930066681143	WITHOUT_CLASSIFICATION	6.9933318856928534E-6	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410483099003	WITHOUT_CLASSIFICATION	1.589516900997526E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.997550196555081	WITHOUT_CLASSIFICATION	0.0024498034449189237	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999954064897331	WITHOUT_CLASSIFICATION	4.593510266870639E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998419488843392	WITHOUT_CLASSIFICATION	1.5805111566082712E-4	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996555946709388	WITHOUT_CLASSIFICATION	3.444053290612905E-4	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9997799973187695	WITHOUT_CLASSIFICATION	2.200026812304841E-4	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999272938687391	WITHOUT_CLASSIFICATION	7.270613126090028E-5	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999988707271462	WITHOUT_CLASSIFICATION	1.1292728537966627E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999855020612345	WITHOUT_CLASSIFICATION	1.4497938765502933E-4	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9993673633406757	WITHOUT_CLASSIFICATION	6.326366593243816E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.999469595697027	WITHOUT_CLASSIFICATION	5.304043029730894E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9993812236061005	WITHOUT_CLASSIFICATION	6.187763938994886E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9993812236061005	WITHOUT_CLASSIFICATION	6.187763938994886E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9993812236061005	WITHOUT_CLASSIFICATION	6.187763938994886E-4	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999958017622796	WITHOUT_CLASSIFICATION	4.198237720366873E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999446304346132	WITHOUT_CLASSIFICATION	5.53695653868363E-5	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999987024857966	WITHOUT_CLASSIFICATION	1.2975142034216191E-6	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473430444951	WITHOUT_CLASSIFICATION	1.5265695550495376E-4	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473430444951	WITHOUT_CLASSIFICATION	1.5265695550495376E-4	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999985762582034	WITHOUT_CLASSIFICATION	1.4237417965976766E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990663987776197	WITHOUT_CLASSIFICATION	9.33601222380166E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9958044754870895	WITHOUT_CLASSIFICATION	0.00419552451291054	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999608135128313	WITHOUT_CLASSIFICATION	3.918648716864622E-5	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9996731975658179	WITHOUT_CLASSIFICATION	3.268024341821915E-4	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998267664049701	WITHOUT_CLASSIFICATION	1.7323359502982905E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998410745226176	WITHOUT_CLASSIFICATION	1.5892547738235815E-4	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999846187650816	WITHOUT_CLASSIFICATION	1.5381234918440414E-5	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997354726407451	WITHOUT_CLASSIFICATION	2.6452735925482773E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9996583291899712	WITHOUT_CLASSIFICATION	3.416708100287632E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998386620160512	WITHOUT_CLASSIFICATION	1.6133798394872792E-4	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999415659278276	WITHOUT_CLASSIFICATION	5.843407217240153E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999649476637108	WITHOUT_CLASSIFICATION	3.5052336289077446E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999199439093777	WITHOUT_CLASSIFICATION	8.0056090622354E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999387708528	WITHOUT_CLASSIFICATION	6.122914716410333E-8	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999974008823826	WITHOUT_CLASSIFICATION	2.5991176174697455E-6	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999988825805611	WITHOUT_CLASSIFICATION	1.1174194388822383E-6	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999993825776609	WITHOUT_CLASSIFICATION	6.174223391919082E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999721339882659	WITHOUT_CLASSIFICATION	2.7866011734106446E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995866398234315	WITHOUT_CLASSIFICATION	4.133601765685405E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999999288184946	WITHOUT_CLASSIFICATION	7.118150541021633E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9997600380071322	WITHOUT_CLASSIFICATION	2.3996199286789E-4	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999997595741836	WITHOUT_CLASSIFICATION	2.4042581631668127E-7	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999871327544966	WITHOUT_CLASSIFICATION	1.2867245503419613E-5	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999952215309719	WITHOUT_CLASSIFICATION	4.778469028100987E-6	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9995940159434376	WITHOUT_CLASSIFICATION	4.059840565623648E-4	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999665063736168	WITHOUT_CLASSIFICATION	3.349362638304869E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9473388782005014	WITHOUT_CLASSIFICATION	0.05266112179949845	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9986565386417632	WITHOUT_CLASSIFICATION	0.0013434613582368827	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9774430822759096	WITHOUT_CLASSIFICATION	0.022556917724090363	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9995031304354592	WITHOUT_CLASSIFICATION	4.968695645407165E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999001513011542	WITHOUT_CLASSIFICATION	9.984869884580834E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9997736830451107	WITHOUT_CLASSIFICATION	2.2631695488928638E-4	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999429353725735	WITHOUT_CLASSIFICATION	5.706462742637507E-5	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998656190657338	WITHOUT_CLASSIFICATION	1.3438093426618324E-4	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9969123133661782	WITHOUT_CLASSIFICATION	0.00308768663382178	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999765998250709	WITHOUT_CLASSIFICATION	2.3400174928997458E-5	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999993048714327	WITHOUT_CLASSIFICATION	6.951285672611748E-7	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999450044170657	WITHOUT_CLASSIFICATION	5.499558293423278E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999169886829592	WITHOUT_CLASSIFICATION	8.301131704074114E-5	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999908985581388	WITHOUT_CLASSIFICATION	9.10144186127559E-6	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999379640962375	WITHOUT_CLASSIFICATION	6.203590376247574E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999978029391479	WITHOUT_CLASSIFICATION	2.1970608520442325E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999889885329551	WITHOUT_CLASSIFICATION	1.101146704482723E-5	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997177675716915	WITHOUT_CLASSIFICATION	2.82232428308475E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9995181402973925	WITHOUT_CLASSIFICATION	4.8185970260751374E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995660320273008	WITHOUT_CLASSIFICATION	4.339679726992956E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9976547196445031	WITHOUT_CLASSIFICATION	0.0023452803554968537	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9998458105460195	WITHOUT_CLASSIFICATION	1.5418945398055706E-4	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9991833372686529	WITHOUT_CLASSIFICATION	8.16662731347055E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9998504515158738	WITHOUT_CLASSIFICATION	1.4954848412622915E-4	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999514634254101	WITHOUT_CLASSIFICATION	4.853657458991653E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9960872563723566	WITHOUT_CLASSIFICATION	0.003912743627643241	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999584679315958	WITHOUT_CLASSIFICATION	4.153206840417067E-5	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999669307000109	WITHOUT_CLASSIFICATION	3.306929998910056E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999996337629186	WITHOUT_CLASSIFICATION	3.6623708139032345E-7	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999821579359988	WITHOUT_CLASSIFICATION	1.7842064001197423E-4	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999594764424319	WITHOUT_CLASSIFICATION	4.052355756803715E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999988811749142	WITHOUT_CLASSIFICATION	1.1188250857569318E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999959100521423	WITHOUT_CLASSIFICATION	4.089947857728707E-6	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998506801960318	WITHOUT_CLASSIFICATION	1.493198039682279E-4	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9813852921468583	WITHOUT_CLASSIFICATION	0.01861470785314172	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998462596977886	WITHOUT_CLASSIFICATION	1.5374030221131525E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999917983828022	WITHOUT_CLASSIFICATION	8.20161719774365E-6	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9996696558239019	WITHOUT_CLASSIFICATION	3.3034417609813216E-4	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998839443805564	WITHOUT_CLASSIFICATION	1.1605561944364567E-4	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.998209534746154	WITHOUT_CLASSIFICATION	0.0017904652538459208	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999747958608232	WITHOUT_CLASSIFICATION	2.5204139176916334E-5	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999316754623098	WITHOUT_CLASSIFICATION	6.83245376901521E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999657082127785	WITHOUT_CLASSIFICATION	3.4291787221501196E-5	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9992094311096229	WITHOUT_CLASSIFICATION	7.905688903771724E-4	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999765429045162	WITHOUT_CLASSIFICATION	2.3457095483829837E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9995340059833204	WITHOUT_CLASSIFICATION	4.6599401667955846E-4	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998384404019786	WITHOUT_CLASSIFICATION	1.615595980214687E-4	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9994421356326596	WITHOUT_CLASSIFICATION	5.578643673403847E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8227924754241981	IMPLEMENTATION	0.177207524575802	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998442396847476	WITHOUT_CLASSIFICATION	1.5576031525251795E-4	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.971797555183611	WITHOUT_CLASSIFICATION	0.02820244481638899	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8811774754314226	WITHOUT_CLASSIFICATION	0.11882252456857738	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9994771458564304	WITHOUT_CLASSIFICATION	5.228541435695975E-4	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9988178894826587	WITHOUT_CLASSIFICATION	0.001182110517341293	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998548799771747	WITHOUT_CLASSIFICATION	1.4512002282533206E-4	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9994825138295753	WITHOUT_CLASSIFICATION	5.17486170424602E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9992076748060779	WITHOUT_CLASSIFICATION	7.923251939221043E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9978451067732798	WITHOUT_CLASSIFICATION	0.00215489322672028	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.999874633559986	WITHOUT_CLASSIFICATION	1.2536644001408134E-4	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998490727166908	WITHOUT_CLASSIFICATION	1.5092728330924938E-4	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999383483748687	WITHOUT_CLASSIFICATION	6.165162513127413E-5	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.999991311531284	WITHOUT_CLASSIFICATION	8.688468716058796E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9977471975479393	WITHOUT_CLASSIFICATION	0.0022528024520607633	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999866214340966	WITHOUT_CLASSIFICATION	1.3378565903328456E-5	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9997333260837776	WITHOUT_CLASSIFICATION	2.666739162223207E-4	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.999917632799047	WITHOUT_CLASSIFICATION	8.236720095289443E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9996159417500882	WITHOUT_CLASSIFICATION	3.840582499118765E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996392620078184	WITHOUT_CLASSIFICATION	3.607379921816758E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996392620078184	WITHOUT_CLASSIFICATION	3.607379921816758E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999863023157743	WITHOUT_CLASSIFICATION	1.369768422557156E-5	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9961183721828339	WITHOUT_CLASSIFICATION	0.003881627817166031	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998603485010724	WITHOUT_CLASSIFICATION	1.3965149892759896E-4	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999924582894202	WITHOUT_CLASSIFICATION	7.54171057974692E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9996638829266474	WITHOUT_CLASSIFICATION	3.3611707335256017E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999105291634175	WITHOUT_CLASSIFICATION	8.947083658252443E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999765285740502	WITHOUT_CLASSIFICATION	2.347142594986701E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999409620325647	WITHOUT_CLASSIFICATION	5.903796743532354E-5	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9998214779574417	WITHOUT_CLASSIFICATION	1.7852204255825284E-4	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.6017584032795027	WITHOUT_CLASSIFICATION	0.3982415967204974	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999967834362539	WITHOUT_CLASSIFICATION	3.2165637460252435E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999996999092886	WITHOUT_CLASSIFICATION	3.0009071137038826E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9994873636701164	WITHOUT_CLASSIFICATION	5.126363298836308E-4	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999986027928497	WITHOUT_CLASSIFICATION	1.3972071502595176E-6	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999435772950478	WITHOUT_CLASSIFICATION	5.642270495219143E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999352325151073	WITHOUT_CLASSIFICATION	6.476748489269435E-5	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9829272248392761	IMPLEMENTATION	0.017072775160723943	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9829272248392761	IMPLEMENTATION	0.017072775160723943	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998516664107358	WITHOUT_CLASSIFICATION	1.4833358926436693E-4	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999961099070145	WITHOUT_CLASSIFICATION	3.8900929855006934E-5	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998921718001468	WITHOUT_CLASSIFICATION	1.0782819985313645E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999491146038691	WITHOUT_CLASSIFICATION	5.088539613095974E-5	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994842702533361	WITHOUT_CLASSIFICATION	5.157297466639902E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999785931223312	WITHOUT_CLASSIFICATION	2.1406877668786884E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994842702533361	WITHOUT_CLASSIFICATION	5.157297466639902E-4	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9998940234687563	WITHOUT_CLASSIFICATION	1.0597653124362803E-4	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997113387730412	WITHOUT_CLASSIFICATION	2.886612269588539E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998567290454421	WITHOUT_CLASSIFICATION	1.432709545579478E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998567290454421	WITHOUT_CLASSIFICATION	1.432709545579478E-4	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998843690743069	WITHOUT_CLASSIFICATION	1.1563092569311334E-4	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9976993402562346	WITHOUT_CLASSIFICATION	0.0023006597437654373	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9998072268599311	WITHOUT_CLASSIFICATION	1.9277314006904437E-4	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997755280149446	WITHOUT_CLASSIFICATION	2.244719850554289E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9998072268599311	WITHOUT_CLASSIFICATION	1.9277314006904437E-4	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999978996437	WITHOUT_CLASSIFICATION	2.1003563757385317E-9	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9998311738596619	WITHOUT_CLASSIFICATION	1.6882614033812254E-4	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999702573808303	WITHOUT_CLASSIFICATION	2.9742619169535793E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999279185684216	WITHOUT_CLASSIFICATION	7.208143157839498E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9997412176256313	WITHOUT_CLASSIFICATION	2.587823743688067E-4	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999962206123345	WITHOUT_CLASSIFICATION	3.779387665507852E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999823382370627	WITHOUT_CLASSIFICATION	1.766176293722431E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9995964991203723	WITHOUT_CLASSIFICATION	4.035008796277497E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999657216428225	WITHOUT_CLASSIFICATION	3.427835717753802E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998953046341366	WITHOUT_CLASSIFICATION	1.0469536586339035E-4	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999909223636541	WITHOUT_CLASSIFICATION	9.077636345894317E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995441816916564	WITHOUT_CLASSIFICATION	4.5581830834367566E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999833497840295	WITHOUT_CLASSIFICATION	1.6650215970528064E-5	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999978037688947	WITHOUT_CLASSIFICATION	2.1962311052464217E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9993007894203082	WITHOUT_CLASSIFICATION	6.992105796917628E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998896186619308	WITHOUT_CLASSIFICATION	1.1038133806917685E-4	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998808254368351	WITHOUT_CLASSIFICATION	1.1917456316481386E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9982411774238044	WITHOUT_CLASSIFICATION	0.0017588225761956346	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9993925065043517	WITHOUT_CLASSIFICATION	6.074934956483102E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999390683318781	WITHOUT_CLASSIFICATION	6.093166812188351E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999684652801272	WITHOUT_CLASSIFICATION	3.153471987278732E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.779375723263662	WITHOUT_CLASSIFICATION	0.220624276736338	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999954543215457	WITHOUT_CLASSIFICATION	4.545678454290999E-5	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9992639107654614	WITHOUT_CLASSIFICATION	7.360892345385305E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999983842479555	WITHOUT_CLASSIFICATION	1.615752044516425E-6	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999032846365339	WITHOUT_CLASSIFICATION	9.671536346607774E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9996876203070336	WITHOUT_CLASSIFICATION	3.123796929663657E-4	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999847550685812	WITHOUT_CLASSIFICATION	1.524493141875829E-5	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9839080612065978	WITHOUT_CLASSIFICATION	0.01609193879340228	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9997244865052718	WITHOUT_CLASSIFICATION	2.755134947282033E-4	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9997224973696883	WITHOUT_CLASSIFICATION	2.775026303116313E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9995334207063267	WITHOUT_CLASSIFICATION	4.665792936732954E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9995334207063267	WITHOUT_CLASSIFICATION	4.665792936732954E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999662051393186	WITHOUT_CLASSIFICATION	3.379486068138812E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9998114295497919	WITHOUT_CLASSIFICATION	1.885704502081269E-4	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999634021062747	WITHOUT_CLASSIFICATION	3.6597893725433966E-5	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9996556367999905	WITHOUT_CLASSIFICATION	3.443632000095386E-4	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9997273410148014	WITHOUT_CLASSIFICATION	2.7265898519863497E-4	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999926357282592	WITHOUT_CLASSIFICATION	7.36427174082548E-6	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999995446283851	WITHOUT_CLASSIFICATION	4.553716148929957E-7	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9994419094603685	WITHOUT_CLASSIFICATION	5.580905396314255E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999662051393186	WITHOUT_CLASSIFICATION	3.379486068138812E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9998114295497919	WITHOUT_CLASSIFICATION	1.885704502081269E-4	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997969692476308	WITHOUT_CLASSIFICATION	2.0303075236917302E-4	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.5777156186420759	IMPLEMENTATION	0.4222843813579243	WITHOUT_CLASSIFICATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999367293661257	WITHOUT_CLASSIFICATION	6.32706338743553E-5	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9995242480763182	WITHOUT_CLASSIFICATION	4.7575192368176585E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999989340242477	WITHOUT_CLASSIFICATION	1.0659757522833058E-6	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9938459340672234	WITHOUT_CLASSIFICATION	0.0061540659327765	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9997156152573524	WITHOUT_CLASSIFICATION	2.8438474264759E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.999948091863616	WITHOUT_CLASSIFICATION	5.19081363838862E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999822485799664	WITHOUT_CLASSIFICATION	1.7751420033538323E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7511972609345251	WITHOUT_CLASSIFICATION	0.24880273906547504	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999957120085977	WITHOUT_CLASSIFICATION	4.2879914022294225E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7511972609345251	WITHOUT_CLASSIFICATION	0.24880273906547504	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999595833127393	WITHOUT_CLASSIFICATION	4.041668726077813E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998506801960318	WITHOUT_CLASSIFICATION	1.493198039682279E-4	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999595833127393	WITHOUT_CLASSIFICATION	4.041668726077813E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995999659193587	WITHOUT_CLASSIFICATION	4.000340806413291E-4	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999567235953466	WITHOUT_CLASSIFICATION	4.327640465330352E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.999948091863616	WITHOUT_CLASSIFICATION	5.19081363838862E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.999948091863616	WITHOUT_CLASSIFICATION	5.19081363838862E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998828209162479	WITHOUT_CLASSIFICATION	1.1717908375213481E-4	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9998837657729958	WITHOUT_CLASSIFICATION	1.1623422700425403E-4	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9998828209162479	WITHOUT_CLASSIFICATION	1.1717908375213481E-4	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997380905245395	WITHOUT_CLASSIFICATION	2.6190947546046684E-4	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9998970576963363	WITHOUT_CLASSIFICATION	1.0294230366374376E-4	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998629314048855	WITHOUT_CLASSIFICATION	1.3706859511458832E-4	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.7761524710036851	WITHOUT_CLASSIFICATION	0.22384752899631483	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9997384866116967	WITHOUT_CLASSIFICATION	2.615133883033289E-4	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999752357735978	WITHOUT_CLASSIFICATION	2.4764226402149265E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999222479264577	WITHOUT_CLASSIFICATION	7.775207354235539E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999340287305426	WITHOUT_CLASSIFICATION	6.59712694573323E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.999900727032204	WITHOUT_CLASSIFICATION	9.92729677960274E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999982387878225	WITHOUT_CLASSIFICATION	1.7612121775178272E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9998367030956544	WITHOUT_CLASSIFICATION	1.632969043455117E-4	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999342953459462	WITHOUT_CLASSIFICATION	6.570465405385195E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998224939758978	WITHOUT_CLASSIFICATION	1.775060241021347E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999020028942517	WITHOUT_CLASSIFICATION	9.799710574833486E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998815797570323	WITHOUT_CLASSIFICATION	1.1842024296774992E-4	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998694667875668	WITHOUT_CLASSIFICATION	1.3053321243307846E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999609418841224	WITHOUT_CLASSIFICATION	3.9058115877672595E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9997736338192841	WITHOUT_CLASSIFICATION	2.2636618071582992E-4	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9996783425440185	WITHOUT_CLASSIFICATION	3.2165745598149566E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997186337023014	WITHOUT_CLASSIFICATION	2.813662976986537E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997661386291704	WITHOUT_CLASSIFICATION	2.3386137082959796E-4	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9983870484742398	WITHOUT_CLASSIFICATION	0.0016129515257601993	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.639121815307944	WITHOUT_CLASSIFICATION	0.3608781846920561	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997807800309836	WITHOUT_CLASSIFICATION	2.1921996901639487E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999924177064309	WITHOUT_CLASSIFICATION	7.582293569098831E-5	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9842466111930898	WITHOUT_CLASSIFICATION	0.015753388806910382	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999008633184729	WITHOUT_CLASSIFICATION	9.913668152707075E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9997384866116967	WITHOUT_CLASSIFICATION	2.615133883033289E-4	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998963610157315	WITHOUT_CLASSIFICATION	1.0363898426852828E-4	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.7696623500910184	IMPLEMENTATION	0.2303376499089817	WITHOUT_CLASSIFICATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6854817662561201	WITHOUT_CLASSIFICATION	0.31451823374388	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999461270866788	WITHOUT_CLASSIFICATION	5.387291332108604E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999103260636047	WITHOUT_CLASSIFICATION	8.967393639521986E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9997603340363791	WITHOUT_CLASSIFICATION	2.3966596362089964E-4	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997380905245395	WITHOUT_CLASSIFICATION	2.6190947546046684E-4	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997380905245395	WITHOUT_CLASSIFICATION	2.6190947546046684E-4	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9997087469414849	WITHOUT_CLASSIFICATION	2.912530585151341E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999271466582266	WITHOUT_CLASSIFICATION	7.285334177344914E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9978261063831162	WITHOUT_CLASSIFICATION	0.0021738936168839394	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9996241135814928	WITHOUT_CLASSIFICATION	3.758864185071795E-4	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995745441997522	WITHOUT_CLASSIFICATION	4.254558002478363E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9996681860310757	WITHOUT_CLASSIFICATION	3.318139689243159E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9992193227701365	WITHOUT_CLASSIFICATION	7.806772298634922E-4	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999981178952636	WITHOUT_CLASSIFICATION	1.8821047363052812E-6	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999877618290692	WITHOUT_CLASSIFICATION	1.2238170930801352E-4	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998965720519178	WITHOUT_CLASSIFICATION	1.0342794808213942E-4	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999959964823631	WITHOUT_CLASSIFICATION	4.0035176368895907E-5	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998224939758978	WITHOUT_CLASSIFICATION	1.775060241021347E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999662051393186	WITHOUT_CLASSIFICATION	3.379486068138812E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999959964823631	WITHOUT_CLASSIFICATION	4.0035176368895907E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997496407395449	WITHOUT_CLASSIFICATION	2.5035926045518804E-4	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.99993295738998	WITHOUT_CLASSIFICATION	6.704261002003476E-5	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998901531171228	WITHOUT_CLASSIFICATION	1.0984688287722949E-4	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.8768484023049458	IMPLEMENTATION	0.12315159769505425	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998720655978413	WITHOUT_CLASSIFICATION	1.27934402158774E-4	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999972611997674	WITHOUT_CLASSIFICATION	2.7388002326138295E-6	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999437726804341	WITHOUT_CLASSIFICATION	5.622731956597442E-5	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999949050516	WITHOUT_CLASSIFICATION	5.094948403561999E-9	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999250855005785	WITHOUT_CLASSIFICATION	7.491449942155908E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999257623025946	WITHOUT_CLASSIFICATION	7.423769740544329E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998877636987707	WITHOUT_CLASSIFICATION	1.1223630122932451E-4	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998877636987707	WITHOUT_CLASSIFICATION	1.1223630122932451E-4	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999747001371997	WITHOUT_CLASSIFICATION	2.5299862800352386E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9856532590126138	WITHOUT_CLASSIFICATION	0.01434674098738619	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999959964823631	WITHOUT_CLASSIFICATION	4.0035176368895907E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9998720655978413	WITHOUT_CLASSIFICATION	1.27934402158774E-4	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999437726804341	WITHOUT_CLASSIFICATION	5.622731956597442E-5	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.999910373610199	WITHOUT_CLASSIFICATION	8.962638980109186E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9985017345169849	WITHOUT_CLASSIFICATION	0.001498265483015135	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9998153147191685	WITHOUT_CLASSIFICATION	1.8468528083148065E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997059676030972	WITHOUT_CLASSIFICATION	2.9403239690274635E-4	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998055514371442	WITHOUT_CLASSIFICATION	1.9444856285573227E-4	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997496407395449	WITHOUT_CLASSIFICATION	2.5035926045518804E-4	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998176131286594	WITHOUT_CLASSIFICATION	1.823868713406283E-4	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998910191936802	WITHOUT_CLASSIFICATION	1.0898080631976928E-4	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9987433383870203	WITHOUT_CLASSIFICATION	0.0012566616129795968	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.6371937576211268	IMPLEMENTATION	0.36280624237887316	WITHOUT_CLASSIFICATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.6879246949753085	IMPLEMENTATION	0.3120753050246914	WITHOUT_CLASSIFICATION
render the SQL	WITHOUT_CLASSIFICATION	0.9998921415562844	WITHOUT_CLASSIFICATION	1.0785844371563315E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995999659193587	WITHOUT_CLASSIFICATION	4.000340806413291E-4	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830800732706	WITHOUT_CLASSIFICATION	1.691992672941431E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998704676579	WITHOUT_CLASSIFICATION	1.2953234204834093E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999973035547567	WITHOUT_CLASSIFICATION	2.696445243283396E-6	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997647405514	WITHOUT_CLASSIFICATION	2.3525944859745814E-7	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999996245104206	WITHOUT_CLASSIFICATION	3.754895793290607E-7	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998278703905742	WITHOUT_CLASSIFICATION	1.7212960942573E-4	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9998714325175572	WITHOUT_CLASSIFICATION	1.2856748244275245E-4	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999849086987227	WITHOUT_CLASSIFICATION	1.5091301277229117E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9997726807365864	WITHOUT_CLASSIFICATION	2.2731926341354087E-4	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9998858610433112	WITHOUT_CLASSIFICATION	1.1413895668876396E-4	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999908386259739	WITHOUT_CLASSIFICATION	9.161374026095502E-5	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998411717059043	WITHOUT_CLASSIFICATION	1.5882829409572758E-4	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9999226818839632	WITHOUT_CLASSIFICATION	7.731811603681002E-5	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998940098190062	WITHOUT_CLASSIFICATION	1.0599018099371284E-4	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.8998181176344269	WITHOUT_CLASSIFICATION	0.10018188236557313	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9996295195661062	WITHOUT_CLASSIFICATION	3.7048043389380854E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999976309123662	WITHOUT_CLASSIFICATION	2.369087633847423E-6	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.976661292207249	WITHOUT_CLASSIFICATION	0.02333870779275104	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9997900409841585	WITHOUT_CLASSIFICATION	2.0995901584155424E-4	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999977122788999	WITHOUT_CLASSIFICATION	2.2877211000952866E-6	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999653616055354	WITHOUT_CLASSIFICATION	3.4638394464576125E-5	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9983345721646477	WITHOUT_CLASSIFICATION	0.0016654278353523462	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9993888556861849	WITHOUT_CLASSIFICATION	6.111443138152203E-4	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9994372895101302	WITHOUT_CLASSIFICATION	5.627104898697544E-4	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9998880765971927	WITHOUT_CLASSIFICATION	1.1192340280728763E-4	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999362803708683	WITHOUT_CLASSIFICATION	6.371962913155607E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999952941356727	WITHOUT_CLASSIFICATION	4.705864327309888E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999839391116189	WITHOUT_CLASSIFICATION	1.6060888381067402E-5	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9996242306252746	WITHOUT_CLASSIFICATION	3.7576937472532637E-4	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8028458114438692	IMPLEMENTATION	0.19715418855613082	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9997518704672412	WITHOUT_CLASSIFICATION	2.481295327587888E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999684957627229	WITHOUT_CLASSIFICATION	3.150423727710545E-4	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999075739094578	WITHOUT_CLASSIFICATION	9.242609054215723E-5	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5605793579753324	WITHOUT_CLASSIFICATION	0.43942064202466746	IMPLEMENTATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998702756218836	WITHOUT_CLASSIFICATION	1.2972437811646273E-4	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999697736944557	WITHOUT_CLASSIFICATION	3.0226305544209364E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999934338163108	WITHOUT_CLASSIFICATION	6.566183689208698E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999994150150003	WITHOUT_CLASSIFICATION	5.849849997579625E-7	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997940080292234	WITHOUT_CLASSIFICATION	2.0599197077664E-4	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998184481194633	WITHOUT_CLASSIFICATION	1.8155188053675336E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9998248784916104	WITHOUT_CLASSIFICATION	1.751215083895778E-4	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9986737483373942	WITHOUT_CLASSIFICATION	0.0013262516626059056	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998184481194633	WITHOUT_CLASSIFICATION	1.8155188053675336E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9997940080292234	WITHOUT_CLASSIFICATION	2.0599197077664E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9998248784916104	WITHOUT_CLASSIFICATION	1.751215083895778E-4	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9997640697023509	WITHOUT_CLASSIFICATION	2.3593029764900727E-4	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999809185512232	WITHOUT_CLASSIFICATION	1.9081448776823157E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9948149636587967	WITHOUT_CLASSIFICATION	0.005185036341203238	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999050823627519	WITHOUT_CLASSIFICATION	9.491763724814081E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999991021252046	WITHOUT_CLASSIFICATION	8.978747953534929E-7	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.728764967141447	WITHOUT_CLASSIFICATION	0.271235032858553	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9983557858087165	WITHOUT_CLASSIFICATION	0.0016442141912834149	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999967062336748	WITHOUT_CLASSIFICATION	3.293766325263447E-6	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999986168072018	WITHOUT_CLASSIFICATION	1.3831927980817798E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998839520273817	WITHOUT_CLASSIFICATION	1.1604797261832916E-4	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9989286373565432	WITHOUT_CLASSIFICATION	0.001071362643456702	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999927972320926	WITHOUT_CLASSIFICATION	7.2027679075256E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999238689450599	WITHOUT_CLASSIFICATION	7.613105494009792E-5	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999050823627519	WITHOUT_CLASSIFICATION	9.491763724814081E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999150978467668	WITHOUT_CLASSIFICATION	8.490215323323458E-5	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998877744485737	WITHOUT_CLASSIFICATION	1.1222555142627833E-4	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9966869952917746	WITHOUT_CLASSIFICATION	0.0033130047082253786	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999606641209213	WITHOUT_CLASSIFICATION	3.933587907866289E-5	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9995044735189242	WITHOUT_CLASSIFICATION	4.955264810757913E-4	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9995733501526449	WITHOUT_CLASSIFICATION	4.2664984735502873E-4	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9979714828088198	WITHOUT_CLASSIFICATION	0.002028517191180252	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9995904479108505	WITHOUT_CLASSIFICATION	4.095520891494194E-4	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9994422075183911	WITHOUT_CLASSIFICATION	5.57792481609005E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9996994403346048	WITHOUT_CLASSIFICATION	3.0055966539514875E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9995561829986599	WITHOUT_CLASSIFICATION	4.4381700134015216E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9995561829986599	WITHOUT_CLASSIFICATION	4.4381700134015216E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998067350388883	WITHOUT_CLASSIFICATION	1.9326496111163574E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9998067350388883	WITHOUT_CLASSIFICATION	1.9326496111163574E-4	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9979067570529612	WITHOUT_CLASSIFICATION	0.002093242947038826	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9966869952917746	WITHOUT_CLASSIFICATION	0.0033130047082253786	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9995303453870295	WITHOUT_CLASSIFICATION	4.6965461297057156E-4	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999458408264291	WITHOUT_CLASSIFICATION	5.415917357098001E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999186744665929	WITHOUT_CLASSIFICATION	8.132553340705397E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999186744665929	WITHOUT_CLASSIFICATION	8.132553340705397E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999906541337393	WITHOUT_CLASSIFICATION	9.345866260702525E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.997907937668805	WITHOUT_CLASSIFICATION	0.002092062331194843	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9970544648260281	WITHOUT_CLASSIFICATION	0.0029455351739718404	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9996978549149546	WITHOUT_CLASSIFICATION	3.0214508504540147E-4	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999704002049155	WITHOUT_CLASSIFICATION	2.9599795084457818E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999954051003462	WITHOUT_CLASSIFICATION	4.59489965378267E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999404103008963	WITHOUT_CLASSIFICATION	5.9589699103635965E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999536121321768	WITHOUT_CLASSIFICATION	4.6387867823077344E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9997583860866214	WITHOUT_CLASSIFICATION	2.4161391337872563E-4	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999926260891845	WITHOUT_CLASSIFICATION	7.373910815507304E-6	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9997650980293645	WITHOUT_CLASSIFICATION	2.349019706355534E-4	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9995121832775825	WITHOUT_CLASSIFICATION	4.878167224173923E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999424284609297	WITHOUT_CLASSIFICATION	5.7571539070361525E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999627279633782	WITHOUT_CLASSIFICATION	3.7272036621935754E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.990899289823441	WITHOUT_CLASSIFICATION	0.009100710176559043	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9996955411922482	WITHOUT_CLASSIFICATION	3.044588077517353E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437170196137	WITHOUT_CLASSIFICATION	1.562829803862018E-4	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9984893135475343	WITHOUT_CLASSIFICATION	0.0015106864524655715	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.8894826236583679	WITHOUT_CLASSIFICATION	0.11051737634163214	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999845142507833	WITHOUT_CLASSIFICATION	1.548574921673825E-5	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998340214470636	WITHOUT_CLASSIFICATION	1.659785529364305E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999945969804649	WITHOUT_CLASSIFICATION	5.403019535047233E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9994158106011897	WITHOUT_CLASSIFICATION	5.841893988102351E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999958853218126	WITHOUT_CLASSIFICATION	4.114678187354154E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999677019348494	WITHOUT_CLASSIFICATION	3.229806515065424E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9995850658041651	WITHOUT_CLASSIFICATION	4.1493419583495605E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999976309123662	WITHOUT_CLASSIFICATION	2.369087633847423E-6	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999438132536302	WITHOUT_CLASSIFICATION	5.6186746369853936E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999953638533434	WITHOUT_CLASSIFICATION	4.636146656578858E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998419095891368	WITHOUT_CLASSIFICATION	1.5809041086329838E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999579627564613	WITHOUT_CLASSIFICATION	4.203724353859233E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999579627564613	WITHOUT_CLASSIFICATION	4.203724353859233E-5	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9996342030204854	WITHOUT_CLASSIFICATION	3.657969795145031E-4	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9998808979550343	WITHOUT_CLASSIFICATION	1.191020449655909E-4	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9997308284066817	WITHOUT_CLASSIFICATION	2.691715933182649E-4	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9997308284066817	WITHOUT_CLASSIFICATION	2.691715933182649E-4	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9949793224739604	WITHOUT_CLASSIFICATION	0.00502067752603953	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998234633378935	WITHOUT_CLASSIFICATION	1.765366621066059E-4	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9635288105197407	WITHOUT_CLASSIFICATION	0.03647118948025936	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999893351629556	WITHOUT_CLASSIFICATION	1.0664837044414258E-4	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9997380942432061	WITHOUT_CLASSIFICATION	2.6190575679384276E-4	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999976912470439	WITHOUT_CLASSIFICATION	2.3087529560810935E-6	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998529821461243	WITHOUT_CLASSIFICATION	1.470178538756658E-4	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998040987446345	WITHOUT_CLASSIFICATION	1.9590125536547685E-4	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998040987446345	WITHOUT_CLASSIFICATION	1.9590125536547685E-4	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9997928506239595	WITHOUT_CLASSIFICATION	2.0714937604064936E-4	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999356729612079	WITHOUT_CLASSIFICATION	6.432703879211576E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999356729612079	WITHOUT_CLASSIFICATION	6.432703879211576E-5	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999099027423002	WITHOUT_CLASSIFICATION	9.009725769986915E-5	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9997629731224456	WITHOUT_CLASSIFICATION	2.3702687755444677E-4	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999188167399512	WITHOUT_CLASSIFICATION	8.11832600488242E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999575888132498	WITHOUT_CLASSIFICATION	4.2411186750239185E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996921271468852	WITHOUT_CLASSIFICATION	3.0787285311490126E-4	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999993032780183	WITHOUT_CLASSIFICATION	6.967219816840109E-7	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999916764450429	WITHOUT_CLASSIFICATION	8.323554957034265E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998991615334817	WITHOUT_CLASSIFICATION	1.0083846651831179E-4	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.997288100988689	WITHOUT_CLASSIFICATION	0.002711899011310907	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.998664192246255	WITHOUT_CLASSIFICATION	0.0013358077537449706	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9919946613092004	WITHOUT_CLASSIFICATION	0.008005338690799531	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999504521538388	WITHOUT_CLASSIFICATION	4.954784616129829E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997639629886422	WITHOUT_CLASSIFICATION	2.360370113577319E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999791504046992	WITHOUT_CLASSIFICATION	2.0849595300778426E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9997667426982899	WITHOUT_CLASSIFICATION	2.3325730171004243E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9996612802109077	WITHOUT_CLASSIFICATION	3.387197890922391E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9995426418728695	WITHOUT_CLASSIFICATION	4.5735812713053016E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997715940223352	WITHOUT_CLASSIFICATION	2.2840597766490795E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9997393041197942	WITHOUT_CLASSIFICATION	2.6069588020581494E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9852366655744951	WITHOUT_CLASSIFICATION	0.014763334425505004	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9995664989070365	WITHOUT_CLASSIFICATION	4.335010929633849E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999871745198469	WITHOUT_CLASSIFICATION	1.2825480153091303E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999997291975863	WITHOUT_CLASSIFICATION	2.7080241382469926E-7	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9778236874403408	IMPLEMENTATION	0.022176312559659222	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999918590362123	WITHOUT_CLASSIFICATION	8.14096378769652E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999871745198469	WITHOUT_CLASSIFICATION	1.2825480153091303E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.7307367395953674	WITHOUT_CLASSIFICATION	0.2692632604046326	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9996022703278032	WITHOUT_CLASSIFICATION	3.9772967219678547E-4	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999684220831349	WITHOUT_CLASSIFICATION	3.157791686515499E-5	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999445265068965	WITHOUT_CLASSIFICATION	5.547349310343341E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999434831579391	WITHOUT_CLASSIFICATION	5.651684206079075E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.997198232776851	WITHOUT_CLASSIFICATION	0.0028017672231490666	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999555593318313	WITHOUT_CLASSIFICATION	4.444066816871801E-5	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999840007416148	WITHOUT_CLASSIFICATION	1.5999258385305147E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851725350223	WITHOUT_CLASSIFICATION	1.1482746497768602E-4	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999861683285188	WITHOUT_CLASSIFICATION	1.3831671481114315E-5	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998851725350223	WITHOUT_CLASSIFICATION	1.1482746497768602E-4	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999877994176675	WITHOUT_CLASSIFICATION	1.220058233246787E-5	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998725909668625	WITHOUT_CLASSIFICATION	1.2740903313754272E-4	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.5450097889441655	IMPLEMENTATION	0.4549902110558345	WITHOUT_CLASSIFICATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999755599286986	WITHOUT_CLASSIFICATION	2.444007130153331E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9997764359448581	WITHOUT_CLASSIFICATION	2.2356405514183862E-4	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999944541846748	WITHOUT_CLASSIFICATION	5.545815325119719E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998487746409415	WITHOUT_CLASSIFICATION	1.5122535905852028E-4	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999928184921617	WITHOUT_CLASSIFICATION	7.181507838234481E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998487746409415	WITHOUT_CLASSIFICATION	1.5122535905852028E-4	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9995546654159634	WITHOUT_CLASSIFICATION	4.4533458403655884E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999240524811797	WITHOUT_CLASSIFICATION	7.59475188203153E-5	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9998153595746608	WITHOUT_CLASSIFICATION	1.846404253392488E-4	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999518502871467	WITHOUT_CLASSIFICATION	4.814971285339325E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999256506567831	WITHOUT_CLASSIFICATION	7.434934321691885E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999912354159007	WITHOUT_CLASSIFICATION	8.764584099201131E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999944541846748	WITHOUT_CLASSIFICATION	5.545815325119719E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999928184921617	WITHOUT_CLASSIFICATION	7.181507838234481E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9995546654159634	WITHOUT_CLASSIFICATION	4.4533458403655884E-4	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997611377561162	WITHOUT_CLASSIFICATION	2.3886224388378817E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9998029593135452	WITHOUT_CLASSIFICATION	1.9704068645475577E-4	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.999139041868381	WITHOUT_CLASSIFICATION	8.609581316190168E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999987069834798	WITHOUT_CLASSIFICATION	1.293016520243169E-6	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9980932158848579	WITHOUT_CLASSIFICATION	0.0019067841151421832	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9996760027238124	WITHOUT_CLASSIFICATION	3.239972761875846E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999549328296179	WITHOUT_CLASSIFICATION	4.506717038215711E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437170196137	WITHOUT_CLASSIFICATION	1.562829803862018E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999240524811797	WITHOUT_CLASSIFICATION	7.59475188203153E-5	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.577746162595176	WITHOUT_CLASSIFICATION	0.422253837404824	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9998828209162479	WITHOUT_CLASSIFICATION	1.1717908375213481E-4	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9911008566558424	WITHOUT_CLASSIFICATION	0.008899143344157631	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9998951490272288	WITHOUT_CLASSIFICATION	1.0485097277120235E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437170196137	WITHOUT_CLASSIFICATION	1.562829803862018E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998736135844998	WITHOUT_CLASSIFICATION	1.2638641550022478E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437170196137	WITHOUT_CLASSIFICATION	1.562829803862018E-4	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998414712816117	WITHOUT_CLASSIFICATION	1.585287183883922E-4	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9995585889510378	WITHOUT_CLASSIFICATION	4.4141104896222886E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9996620894554199	WITHOUT_CLASSIFICATION	3.379105445800451E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9991332948149336	WITHOUT_CLASSIFICATION	8.667051850662987E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999283032193044	WITHOUT_CLASSIFICATION	7.169678069559278E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9998965151257149	WITHOUT_CLASSIFICATION	1.0348487428507584E-4	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998686009834166	WITHOUT_CLASSIFICATION	1.3139901658339843E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999978131688339	WITHOUT_CLASSIFICATION	2.1868311660883334E-5	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9991345016863648	WITHOUT_CLASSIFICATION	8.654983136352199E-4	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999711535223547	WITHOUT_CLASSIFICATION	2.88464776453639E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998796019741946	WITHOUT_CLASSIFICATION	1.2039802580544911E-4	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9998712566375824	WITHOUT_CLASSIFICATION	1.2874336241775969E-4	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9990569761860675	WITHOUT_CLASSIFICATION	9.430238139325783E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998186441696402	WITHOUT_CLASSIFICATION	1.8135583035994504E-4	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999497179708575	WITHOUT_CLASSIFICATION	5.028202914248545E-5	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999928647103502	WITHOUT_CLASSIFICATION	7.135289649804194E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999678111416458	WITHOUT_CLASSIFICATION	3.218885835427022E-5	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999794315925546	WITHOUT_CLASSIFICATION	2.056840744538767E-5	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996842773483	WITHOUT_CLASSIFICATION	3.1572265166143136E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999503442381027	WITHOUT_CLASSIFICATION	4.965576189730562E-5	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997993251682545	WITHOUT_CLASSIFICATION	2.0067483174553524E-4	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997993251682545	WITHOUT_CLASSIFICATION	2.0067483174553524E-4	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9998783412141299	WITHOUT_CLASSIFICATION	1.2165878587008772E-4	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999884993562715	WITHOUT_CLASSIFICATION	1.1500643728411887E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999174652610943	WITHOUT_CLASSIFICATION	8.253473890571575E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999995591740413	WITHOUT_CLASSIFICATION	4.408259586742347E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996508849300239	WITHOUT_CLASSIFICATION	3.4911506997612466E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9994321182445985	WITHOUT_CLASSIFICATION	5.678817554015209E-4	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998681903161648	WITHOUT_CLASSIFICATION	1.318096838351832E-4	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999999483467469	WITHOUT_CLASSIFICATION	5.165325309692727E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9086805881732034	WITHOUT_CLASSIFICATION	0.0913194118267966	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999435247252936	WITHOUT_CLASSIFICATION	5.647527470642489E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999216819939513	WITHOUT_CLASSIFICATION	7.831800604878343E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9997689562439167	WITHOUT_CLASSIFICATION	2.3104375608335966E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9995371851792748	WITHOUT_CLASSIFICATION	4.6281482072521465E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999218992391999	WITHOUT_CLASSIFICATION	7.810076080016155E-5	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999331542552206	WITHOUT_CLASSIFICATION	6.684574477953844E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999284114528714	WITHOUT_CLASSIFICATION	7.158854712860506E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999616042400754	WITHOUT_CLASSIFICATION	3.839575992451008E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999616042400754	WITHOUT_CLASSIFICATION	3.839575992451008E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9990379472247313	WITHOUT_CLASSIFICATION	9.620527752687524E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999978131688339	WITHOUT_CLASSIFICATION	2.1868311660883334E-5	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9930193861313173	WITHOUT_CLASSIFICATION	0.006980613868682673	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9997677619448976	WITHOUT_CLASSIFICATION	2.322380551023407E-4	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999148224696242	WITHOUT_CLASSIFICATION	8.517753037580119E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999782581745966	WITHOUT_CLASSIFICATION	2.174182540338333E-5	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.999861185143527	WITHOUT_CLASSIFICATION	1.388148564729926E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9967805109050087	WITHOUT_CLASSIFICATION	0.0032194890949911355	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998642214565757	WITHOUT_CLASSIFICATION	1.3577854342438242E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.999850645975822	WITHOUT_CLASSIFICATION	1.4935402417801618E-4	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995790092321	WITHOUT_CLASSIFICATION	4.209907679540725E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999986934652151	WITHOUT_CLASSIFICATION	1.3065347849039115E-6	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999871635792356	WITHOUT_CLASSIFICATION	1.2836420764498998E-5	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9975396612193518	WITHOUT_CLASSIFICATION	0.0024603387806483093	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9998516882125176	WITHOUT_CLASSIFICATION	1.4831178748239481E-4	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999276875481337	WITHOUT_CLASSIFICATION	7.231245186639277E-5	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999623442831415	WITHOUT_CLASSIFICATION	3.76557168584897E-5	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9987795718061954	WITHOUT_CLASSIFICATION	0.0012204281938046691	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9977103643829448	WITHOUT_CLASSIFICATION	0.0022896356170551625	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999708530767095	WITHOUT_CLASSIFICATION	2.914692329042284E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999926596751094	WITHOUT_CLASSIFICATION	7.340324890563154E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995405677367812	WITHOUT_CLASSIFICATION	4.5943226321868634E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9996859796739479	WITHOUT_CLASSIFICATION	3.140203260521684E-4	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999995892198623	WITHOUT_CLASSIFICATION	4.107801376312968E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999994382160927	WITHOUT_CLASSIFICATION	5.617839074084909E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998878311295647	WITHOUT_CLASSIFICATION	1.1216887043523951E-4	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.8676513202397138	WITHOUT_CLASSIFICATION	0.13234867976028622	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9987730844602672	WITHOUT_CLASSIFICATION	0.0012269155397328173	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9989278232610231	WITHOUT_CLASSIFICATION	0.0010721767389768129	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999841960765052	WITHOUT_CLASSIFICATION	1.580392349479697E-4	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998460550375344	WITHOUT_CLASSIFICATION	1.5394496246557695E-4	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999963137605598	WITHOUT_CLASSIFICATION	3.6862394401472837E-6	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998862492366951	WITHOUT_CLASSIFICATION	1.137507633048304E-4	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998630549629176	WITHOUT_CLASSIFICATION	1.3694503708243852E-4	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9988369316076519	WITHOUT_CLASSIFICATION	0.001163068392348196	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999977603186894	WITHOUT_CLASSIFICATION	2.2396813105972127E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.998894285060094	WITHOUT_CLASSIFICATION	0.0011057149399058956	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9994078119481072	WITHOUT_CLASSIFICATION	5.921880518927244E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9994078119481072	WITHOUT_CLASSIFICATION	5.921880518927244E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999422921481372	WITHOUT_CLASSIFICATION	5.770785186278954E-4	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998679621110698	WITHOUT_CLASSIFICATION	1.3203788893026425E-4	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999898967477372	WITHOUT_CLASSIFICATION	1.0103252262771937E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999898967477372	WITHOUT_CLASSIFICATION	1.0103252262771937E-5	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999133896274206	WITHOUT_CLASSIFICATION	8.661037257947053E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999112453937203	WITHOUT_CLASSIFICATION	8.875460627963942E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9977679766286017	WITHOUT_CLASSIFICATION	0.00223202337139824	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999775250916583	WITHOUT_CLASSIFICATION	2.2474908341814927E-5	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998877967800872	WITHOUT_CLASSIFICATION	1.1220321991273956E-4	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.99999105703243	WITHOUT_CLASSIFICATION	8.942967570131145E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.99999105703243	WITHOUT_CLASSIFICATION	8.942967570131145E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998250838106112	WITHOUT_CLASSIFICATION	1.7491618938889658E-4	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9997380905245395	WITHOUT_CLASSIFICATION	2.6190947546046684E-4	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.999790065073853	WITHOUT_CLASSIFICATION	2.0993492614698598E-4	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9997656044704822	WITHOUT_CLASSIFICATION	2.343955295176393E-4	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999497829588749	WITHOUT_CLASSIFICATION	5.021704112502529E-5	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9997528120155165	WITHOUT_CLASSIFICATION	2.4718798448345516E-4	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999945773966358	WITHOUT_CLASSIFICATION	5.4226033642182544E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9996526101996752	WITHOUT_CLASSIFICATION	3.473898003247961E-4	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999188618760403	WITHOUT_CLASSIFICATION	8.113812395971846E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9990545374340821	WITHOUT_CLASSIFICATION	9.454625659177562E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9998082255546414	WITHOUT_CLASSIFICATION	1.9177444535853352E-4	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999781458587891	WITHOUT_CLASSIFICATION	2.1854141210862517E-5	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999502831434509	WITHOUT_CLASSIFICATION	4.971685654903142E-5	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.7653024007360122	WITHOUT_CLASSIFICATION	0.23469759926398787	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.8229352999361956	WITHOUT_CLASSIFICATION	0.17706470006380437	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999880210429355	WITHOUT_CLASSIFICATION	1.1978957064441395E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999175373675078	WITHOUT_CLASSIFICATION	8.246263249219237E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999990127974906	WITHOUT_CLASSIFICATION	9.872025094104766E-7	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9996993957086995	WITHOUT_CLASSIFICATION	3.006042913005258E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9837209860247109	WITHOUT_CLASSIFICATION	0.01627901397528906	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9930881307967028	WITHOUT_CLASSIFICATION	0.006911869203297215	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.998925432747493	WITHOUT_CLASSIFICATION	0.0010745672525069457	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9962600655641426	WITHOUT_CLASSIFICATION	0.003739934435857449	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9993547197133578	WITHOUT_CLASSIFICATION	6.452802866422176E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9991942983242201	WITHOUT_CLASSIFICATION	8.057016757798045E-4	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999949203236552	WITHOUT_CLASSIFICATION	5.0796763448048526E-5	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999369370224603	WITHOUT_CLASSIFICATION	6.306297753966148E-5	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9998852361163469	WITHOUT_CLASSIFICATION	1.1476388365304619E-4	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996880733549036	WITHOUT_CLASSIFICATION	3.1192664509640633E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999967371868912	WITHOUT_CLASSIFICATION	3.262813108773782E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998793161235985	WITHOUT_CLASSIFICATION	1.2068387640143597E-4	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999987528016034	WITHOUT_CLASSIFICATION	1.2471983964656058E-6	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999598002509538	WITHOUT_CLASSIFICATION	4.0199749046230206E-5	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999354422686899	WITHOUT_CLASSIFICATION	6.455773131012464E-5	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999654387468392	WITHOUT_CLASSIFICATION	3.4561253160800834E-4	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998603083565156	WITHOUT_CLASSIFICATION	1.3969164348435977E-4	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999379117631032	WITHOUT_CLASSIFICATION	6.208823689680207E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999823729813632	WITHOUT_CLASSIFICATION	1.762701863673697E-5	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999879852771395	WITHOUT_CLASSIFICATION	1.201472286050129E-4	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.999819108817803	WITHOUT_CLASSIFICATION	1.8089118219706855E-4	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9997494871377044	WITHOUT_CLASSIFICATION	2.505128622956175E-4	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9998027331304322	WITHOUT_CLASSIFICATION	1.9726686956783026E-4	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999201144253597	WITHOUT_CLASSIFICATION	7.988557464029475E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9997371674528887	WITHOUT_CLASSIFICATION	2.628325471113791E-4	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9998251605110531	WITHOUT_CLASSIFICATION	1.7483948894693663E-4	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999751794786763	WITHOUT_CLASSIFICATION	2.4820521323695624E-4	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.998849314511834	WITHOUT_CLASSIFICATION	0.0011506854881660426	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9994699606857912	WITHOUT_CLASSIFICATION	5.300393142087308E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999186270948014	WITHOUT_CLASSIFICATION	8.137290519861015E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9965658568138013	WITHOUT_CLASSIFICATION	0.003434143186198792	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.5207204615354563	IMPLEMENTATION	0.4792795384645436	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9852724255762124	WITHOUT_CLASSIFICATION	0.01472757442378766	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999009441094338	WITHOUT_CLASSIFICATION	9.90558905662166E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999668592419623	WITHOUT_CLASSIFICATION	3.314075803779508E-5	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999302157152615	WITHOUT_CLASSIFICATION	6.978428473847471E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999455015703396	WITHOUT_CLASSIFICATION	5.4498429660503884E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999172377439927	WITHOUT_CLASSIFICATION	8.276225600726684E-5	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999946570750625	WITHOUT_CLASSIFICATION	5.3429249375062244E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.993757495309348	WITHOUT_CLASSIFICATION	0.0062425046906520055	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.993757495309348	WITHOUT_CLASSIFICATION	0.0062425046906520055	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999964654097	WITHOUT_CLASSIFICATION	3.53459034174589E-9	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999954759236152	WITHOUT_CLASSIFICATION	4.524076384753105E-6	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999976408408091	WITHOUT_CLASSIFICATION	2.3591591909512068E-6	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999796764231853	WITHOUT_CLASSIFICATION	2.0323576814689527E-5	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9998535989887092	WITHOUT_CLASSIFICATION	1.4640101129081737E-4	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999477659377598	WITHOUT_CLASSIFICATION	5.223406224024818E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999485892675027	WITHOUT_CLASSIFICATION	5.1410732497195634E-5	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999908338491509	WITHOUT_CLASSIFICATION	9.166150849101673E-6	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999690612527229	WITHOUT_CLASSIFICATION	3.093874727711866E-5	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999969700553637	WITHOUT_CLASSIFICATION	3.029944636225299E-6	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999988142096702	WITHOUT_CLASSIFICATION	1.1857903298965673E-6	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9993909862160867	WITHOUT_CLASSIFICATION	6.090137839133095E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999967149229966	WITHOUT_CLASSIFICATION	3.285077003485491E-6	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999324101495903	WITHOUT_CLASSIFICATION	6.758985040969261E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999972684496738	WITHOUT_CLASSIFICATION	2.7315503262002105E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999972684496738	WITHOUT_CLASSIFICATION	2.7315503262002105E-5	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999824904438298	WITHOUT_CLASSIFICATION	1.750955617029441E-5	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999543871262367	WITHOUT_CLASSIFICATION	4.561287376324397E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999744037647933	WITHOUT_CLASSIFICATION	2.5596235206621436E-5	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999958298549012	WITHOUT_CLASSIFICATION	4.170145098750384E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998175357040375	WITHOUT_CLASSIFICATION	1.824642959624857E-4	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999894386535173	WITHOUT_CLASSIFICATION	1.056134648269529E-4	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9996440807361403	WITHOUT_CLASSIFICATION	3.559192638597067E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.999923179286862	WITHOUT_CLASSIFICATION	7.682071313802553E-5	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9997976481719033	WITHOUT_CLASSIFICATION	2.0235182809666172E-4	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9997822549808775	WITHOUT_CLASSIFICATION	2.1774501912256002E-4	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999624206844432	WITHOUT_CLASSIFICATION	3.757931555673684E-5	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999957861873215	WITHOUT_CLASSIFICATION	4.2138126784998484E-5	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998466873808439	WITHOUT_CLASSIFICATION	1.5331261915613032E-4	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9997984549623206	WITHOUT_CLASSIFICATION	2.01545037679498E-4	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9985489326473211	WITHOUT_CLASSIFICATION	0.00145106735267886	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9986100611313755	WITHOUT_CLASSIFICATION	0.0013899388686245764	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9995786162889554	WITHOUT_CLASSIFICATION	4.2138371104458725E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999974233395833	WITHOUT_CLASSIFICATION	2.576660416759047E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999948153645314	WITHOUT_CLASSIFICATION	5.184635468662915E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9998902189685818	WITHOUT_CLASSIFICATION	1.0978103141830802E-4	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999915242829469	WITHOUT_CLASSIFICATION	8.475717053123624E-6	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999936480536784	WITHOUT_CLASSIFICATION	6.351946321568063E-6	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999991713983131	WITHOUT_CLASSIFICATION	8.28601686818995E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999993896487088	WITHOUT_CLASSIFICATION	6.10351291209396E-7	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999877693363246	WITHOUT_CLASSIFICATION	1.223066367539924E-5	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9997326268049327	WITHOUT_CLASSIFICATION	2.673731950673005E-4	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999935072294869	WITHOUT_CLASSIFICATION	6.492770513034023E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9795902654001314	WITHOUT_CLASSIFICATION	0.020409734599868567	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9974138028022335	WITHOUT_CLASSIFICATION	0.002586197197766586	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9965046141063163	WITHOUT_CLASSIFICATION	0.0034953858936837543	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9992043453771989	WITHOUT_CLASSIFICATION	7.956546228009663E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999890071142405	WITHOUT_CLASSIFICATION	1.0992885759497466E-5	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999831164066224	WITHOUT_CLASSIFICATION	1.688359337767175E-5	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9998498501994725	WITHOUT_CLASSIFICATION	1.5014980052748436E-4	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999647886703682	WITHOUT_CLASSIFICATION	3.52113296317045E-5	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9924306626733761	WITHOUT_CLASSIFICATION	0.007569337326623936	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9988232534935392	WITHOUT_CLASSIFICATION	0.0011767465064607668	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9992247975605041	WITHOUT_CLASSIFICATION	7.752024394958886E-4	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999068562120387	WITHOUT_CLASSIFICATION	9.31437879613359E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999966210942319	WITHOUT_CLASSIFICATION	3.3789057680194234E-6	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9941870924226792	WITHOUT_CLASSIFICATION	0.005812907577320853	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999705503059781	WITHOUT_CLASSIFICATION	2.9449694021910788E-5	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997866311332011	WITHOUT_CLASSIFICATION	2.1336886679901177E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997866311332011	WITHOUT_CLASSIFICATION	2.1336886679901177E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999818632688294	WITHOUT_CLASSIFICATION	1.813673117050147E-5	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999980814330937	WITHOUT_CLASSIFICATION	1.918566906318765E-6	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999869685145083	WITHOUT_CLASSIFICATION	1.3031485491694838E-5	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999836928102112	WITHOUT_CLASSIFICATION	1.630718978885493E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9087193344544675	WITHOUT_CLASSIFICATION	0.09128066554553238	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999979344334975	WITHOUT_CLASSIFICATION	2.0655665025395816E-6	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999427290502452	WITHOUT_CLASSIFICATION	5.727094975495433E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9990406300131922	WITHOUT_CLASSIFICATION	9.593699868076829E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999797297361	WITHOUT_CLASSIFICATION	2.0270263902214305E-8	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999535975720687	WITHOUT_CLASSIFICATION	4.640242793129771E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999548150263854	WITHOUT_CLASSIFICATION	4.518497361451904E-5	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999999396669595	WITHOUT_CLASSIFICATION	6.033304050223768E-7	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999962607249521	WITHOUT_CLASSIFICATION	3.73927504785769E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9966452820892372	WITHOUT_CLASSIFICATION	0.003354717910762894	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9997582572610333	WITHOUT_CLASSIFICATION	2.4174273896672828E-4	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999963809700041	WITHOUT_CLASSIFICATION	3.6190299958640736E-6	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999803862100753	WITHOUT_CLASSIFICATION	1.961378992465555E-5	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9996454859179472	WITHOUT_CLASSIFICATION	3.545140820527486E-4	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998697103645625	WITHOUT_CLASSIFICATION	1.3028963543754483E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999641545790686	WITHOUT_CLASSIFICATION	3.5845420931489405E-5	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999935580848779	WITHOUT_CLASSIFICATION	6.441915122161786E-6	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9990439191240548	WITHOUT_CLASSIFICATION	9.560808759453565E-4	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9954817010033601	WITHOUT_CLASSIFICATION	0.004518298996639907	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9997543425372557	WITHOUT_CLASSIFICATION	2.456574627443223E-4	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9996889748808665	WITHOUT_CLASSIFICATION	3.1102511913355104E-4	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999989033741402	WITHOUT_CLASSIFICATION	1.0966258597914354E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9978017895110824	WITHOUT_CLASSIFICATION	0.0021982104889174793	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9986770007452944	WITHOUT_CLASSIFICATION	0.0013229992547056529	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9978172221442007	WITHOUT_CLASSIFICATION	0.0021827778557992803	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999847911285656	WITHOUT_CLASSIFICATION	1.5208871434397732E-4	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9990912658501733	WITHOUT_CLASSIFICATION	9.087341498267584E-4	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999885964756856	WITHOUT_CLASSIFICATION	1.1403524314494273E-5	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.999998627584727	WITHOUT_CLASSIFICATION	1.3724152730408624E-6	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999844529129949	WITHOUT_CLASSIFICATION	1.5547087005117326E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999998079619761	WITHOUT_CLASSIFICATION	1.9203802388098258E-7	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999063819111005	WITHOUT_CLASSIFICATION	9.36180888995713E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999761525991389	WITHOUT_CLASSIFICATION	2.3847400861082918E-5	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998109769564454	WITHOUT_CLASSIFICATION	1.8902304355464074E-4	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999782463264361	WITHOUT_CLASSIFICATION	2.1753673563882065E-5	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999931446540523	WITHOUT_CLASSIFICATION	6.855345947697637E-5	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999840655630202	WITHOUT_CLASSIFICATION	1.5934436979808173E-5	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998912351305833	WITHOUT_CLASSIFICATION	1.0876486941662983E-4	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999757157017056	WITHOUT_CLASSIFICATION	2.4284298294346204E-5	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998749338767542	WITHOUT_CLASSIFICATION	1.25066123245808E-4	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9780679772682788	WITHOUT_CLASSIFICATION	0.0219320227317212	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999526284366973	WITHOUT_CLASSIFICATION	4.737156330272414E-5	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9904022289956688	WITHOUT_CLASSIFICATION	0.009597771004331238	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997299845569	WITHOUT_CLASSIFICATION	2.7001544307587474E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999967149229966	WITHOUT_CLASSIFICATION	3.285077003485491E-6	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9989685346200573	WITHOUT_CLASSIFICATION	0.0010314653799426878	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999936279381353	WITHOUT_CLASSIFICATION	6.372061864716739E-6	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.996585680313323	WITHOUT_CLASSIFICATION	0.0034143196866769066	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999943177576393	WITHOUT_CLASSIFICATION	5.682242360758234E-6	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999999746721718	WITHOUT_CLASSIFICATION	2.532782820284782E-7	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9994167452490741	WITHOUT_CLASSIFICATION	5.832547509258681E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998824882352692	WITHOUT_CLASSIFICATION	1.1751176473083693E-4	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7431882957603964	IMPLEMENTATION	0.25681170423960364	WITHOUT_CLASSIFICATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999988707271462	WITHOUT_CLASSIFICATION	1.1292728537966627E-6	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9954474960062624	WITHOUT_CLASSIFICATION	0.004552503993737623	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999698332932494	WITHOUT_CLASSIFICATION	3.0166706750506208E-5	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9981190469520953	WITHOUT_CLASSIFICATION	0.0018809530479046127	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9928343909070739	WITHOUT_CLASSIFICATION	0.007165609092926038	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9998638730361241	WITHOUT_CLASSIFICATION	1.361269638758378E-4	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9925487066727172	WITHOUT_CLASSIFICATION	0.0074512933272828	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996023454997827	WITHOUT_CLASSIFICATION	3.976545002174002E-4	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.99994951641801	WITHOUT_CLASSIFICATION	5.048358199008202E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9983095265573705	WITHOUT_CLASSIFICATION	0.0016904734426296242	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998076215260333	WITHOUT_CLASSIFICATION	1.9237847396663652E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996023454997827	WITHOUT_CLASSIFICATION	3.976545002174002E-4	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.98667009981801	WITHOUT_CLASSIFICATION	0.013329900181990081	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9984903072687145	WITHOUT_CLASSIFICATION	0.0015096927312855154	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999849751570837	WITHOUT_CLASSIFICATION	1.5024842916322841E-5	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9839976596558805	WITHOUT_CLASSIFICATION	0.016002340344119535	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997995796530715	WITHOUT_CLASSIFICATION	2.004203469284526E-4	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.996187904193352	WITHOUT_CLASSIFICATION	0.003812095806648006	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999877045800905	WITHOUT_CLASSIFICATION	1.2295419909657142E-5	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9956391828608521	WITHOUT_CLASSIFICATION	0.004360817139147962	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999838169980944	WITHOUT_CLASSIFICATION	1.6183001905615593E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998610560904914	WITHOUT_CLASSIFICATION	1.3894390950874305E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999819092698169	WITHOUT_CLASSIFICATION	1.809073018309232E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9980781680414834	WITHOUT_CLASSIFICATION	0.0019218319585166152	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999850322236651	WITHOUT_CLASSIFICATION	1.4967776334863312E-5	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9921639218126268	WITHOUT_CLASSIFICATION	0.007836078187373308	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9965493815631347	WITHOUT_CLASSIFICATION	0.0034506184368653403	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9996401649965385	WITHOUT_CLASSIFICATION	3.5983500346149446E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9995405677367812	WITHOUT_CLASSIFICATION	4.5943226321868634E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999990623304924	WITHOUT_CLASSIFICATION	9.37669507593267E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.99999909685972	WITHOUT_CLASSIFICATION	9.031402801408404E-7	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9987957294863246	WITHOUT_CLASSIFICATION	0.0012042705136754556	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9910400801039303	WITHOUT_CLASSIFICATION	0.008959919896069663	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9859098501883057	WITHOUT_CLASSIFICATION	0.014090149811694453	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999754798201055	WITHOUT_CLASSIFICATION	2.452017989461584E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.999304266888709	WITHOUT_CLASSIFICATION	6.957331112910944E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999909348659	WITHOUT_CLASSIFICATION	9.065134030490395E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999775599848272	WITHOUT_CLASSIFICATION	2.2440015172720843E-5	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999718847382469	WITHOUT_CLASSIFICATION	2.811526175307325E-5	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9991476091760877	WITHOUT_CLASSIFICATION	8.523908239123626E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998386620160512	WITHOUT_CLASSIFICATION	1.6133798394872792E-4	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.8946221065919947	WITHOUT_CLASSIFICATION	0.10537789340800528	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.7058246809665324	IMPLEMENTATION	0.2941753190334676	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9997142525493309	WITHOUT_CLASSIFICATION	2.8574745066912034E-4	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999644757850049	WITHOUT_CLASSIFICATION	3.552421499509128E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998124114492493	WITHOUT_CLASSIFICATION	1.875885507507869E-4	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999856719980429	WITHOUT_CLASSIFICATION	1.4328001957089825E-5	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999376147337291	WITHOUT_CLASSIFICATION	6.238526627083769E-5	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999969091388135	WITHOUT_CLASSIFICATION	3.0908611866203703E-6	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999993615064138	WITHOUT_CLASSIFICATION	6.384935861844128E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9993662306954322	WITHOUT_CLASSIFICATION	6.337693045679009E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999273686719085	WITHOUT_CLASSIFICATION	7.263132809145539E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9978451067732798	WITHOUT_CLASSIFICATION	0.00215489322672028	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999707284876176	WITHOUT_CLASSIFICATION	2.927151238246433E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999707284876176	WITHOUT_CLASSIFICATION	2.927151238246433E-5	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999105291634175	WITHOUT_CLASSIFICATION	8.947083658252443E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999967834362539	WITHOUT_CLASSIFICATION	3.2165637460252435E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999491146038691	WITHOUT_CLASSIFICATION	5.088539613095974E-5	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999993836141845	WITHOUT_CLASSIFICATION	6.163858155082215E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999893351629556	WITHOUT_CLASSIFICATION	1.0664837044414258E-4	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.999893351629556	WITHOUT_CLASSIFICATION	1.0664837044414258E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.999948091863616	WITHOUT_CLASSIFICATION	5.19081363838862E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999483656976963	WITHOUT_CLASSIFICATION	5.163430230358621E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9997731230229115	WITHOUT_CLASSIFICATION	2.268769770884239E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995441816916564	WITHOUT_CLASSIFICATION	4.5581830834367566E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997031794054656	WITHOUT_CLASSIFICATION	2.9682059453431755E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9982411774238044	WITHOUT_CLASSIFICATION	0.0017588225761956346	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.5426555551180338	IMPLEMENTATION	0.45734444488196624	WITHOUT_CLASSIFICATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999972774873395	WITHOUT_CLASSIFICATION	2.7225126604971953E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999121739105796	WITHOUT_CLASSIFICATION	8.782608942040562E-5	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9998653878724718	WITHOUT_CLASSIFICATION	1.3461212752822717E-4	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998997733303239	WITHOUT_CLASSIFICATION	1.0022666967605251E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998781495889199	WITHOUT_CLASSIFICATION	1.2185041108017491E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998781495889199	WITHOUT_CLASSIFICATION	1.2185041108017491E-4	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9996401649965385	WITHOUT_CLASSIFICATION	3.5983500346149446E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999171996321126	WITHOUT_CLASSIFICATION	8.280036788742077E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999250855005785	WITHOUT_CLASSIFICATION	7.491449942155908E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9998498213308173	WITHOUT_CLASSIFICATION	1.5017866918261915E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999960122622764	WITHOUT_CLASSIFICATION	3.9877377235859884E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830800732706	WITHOUT_CLASSIFICATION	1.691992672941431E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999974121535155	WITHOUT_CLASSIFICATION	2.58784648462289E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999677399784828	WITHOUT_CLASSIFICATION	3.2260021517259355E-5	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999197129549365	WITHOUT_CLASSIFICATION	8.028704506348365E-5	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999216843052348	WITHOUT_CLASSIFICATION	7.831569476533208E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998610560904914	WITHOUT_CLASSIFICATION	1.3894390950874305E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999734332849665	WITHOUT_CLASSIFICATION	2.6566715033629422E-5	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9997357458990473	WITHOUT_CLASSIFICATION	2.6425410095270264E-4	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999993116505037	WITHOUT_CLASSIFICATION	6.883494962934802E-6	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9998937948105077	WITHOUT_CLASSIFICATION	1.0620518949236495E-4	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997188343554952	WITHOUT_CLASSIFICATION	2.811656445048267E-4	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998409900011231	WITHOUT_CLASSIFICATION	1.5900999887692564E-4	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9996527319256001	WITHOUT_CLASSIFICATION	3.4726807439983647E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9996662735771633	WITHOUT_CLASSIFICATION	3.3372642283668874E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9995352081180526	WITHOUT_CLASSIFICATION	4.647918819474476E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.993851011303361	WITHOUT_CLASSIFICATION	0.006148988696639037	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.993851011303361	WITHOUT_CLASSIFICATION	0.006148988696639037	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999871745198469	WITHOUT_CLASSIFICATION	1.2825480153091303E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9998467230188677	WITHOUT_CLASSIFICATION	1.5327698113223013E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9998973636347409	WITHOUT_CLASSIFICATION	1.0263636525908141E-4	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9993916216994555	WITHOUT_CLASSIFICATION	6.083783005444309E-4	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9997654527014619	WITHOUT_CLASSIFICATION	2.3454729853801258E-4	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998689694608144	WITHOUT_CLASSIFICATION	1.3103053918558572E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999755599286986	WITHOUT_CLASSIFICATION	2.444007130153331E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999286176724	WITHOUT_CLASSIFICATION	7.138232760066975E-8	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997611377561162	WITHOUT_CLASSIFICATION	2.3886224388378817E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9996065200392856	WITHOUT_CLASSIFICATION	3.9347996071426505E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998437170196137	WITHOUT_CLASSIFICATION	1.562829803862018E-4	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9674037181261113	WITHOUT_CLASSIFICATION	0.032596281873888654	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998582356764747	WITHOUT_CLASSIFICATION	1.4176432352521064E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999255984969753	WITHOUT_CLASSIFICATION	7.440150302470073E-5	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999703781431056	WITHOUT_CLASSIFICATION	2.9621856894312214E-5	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996805616261417	WITHOUT_CLASSIFICATION	3.1943837385821437E-4	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999995196129531	WITHOUT_CLASSIFICATION	4.803870470122328E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997815692126584	WITHOUT_CLASSIFICATION	2.184307873415358E-4	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9930896020242178	WITHOUT_CLASSIFICATION	0.006910397975782178	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999617076024002	WITHOUT_CLASSIFICATION	3.8292397599707524E-5	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999634586869705	WITHOUT_CLASSIFICATION	3.6541313029496815E-5	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999496649962	WITHOUT_CLASSIFICATION	5.0335003917699144E-8	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999497829588749	WITHOUT_CLASSIFICATION	5.021704112502529E-5	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999880584137446	WITHOUT_CLASSIFICATION	1.1941586255504886E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998351183877076	WITHOUT_CLASSIFICATION	1.6488161229247792E-4	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9998351183877076	WITHOUT_CLASSIFICATION	1.6488161229247792E-4	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9996766341195011	WITHOUT_CLASSIFICATION	3.233658804988827E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9968360449723704	WITHOUT_CLASSIFICATION	0.003163955027629639	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999551663507006	WITHOUT_CLASSIFICATION	4.483364929937562E-5	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9995557702562041	WITHOUT_CLASSIFICATION	4.442297437958536E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9998767203519253	WITHOUT_CLASSIFICATION	1.2327964807466336E-4	IMPLEMENTATION
