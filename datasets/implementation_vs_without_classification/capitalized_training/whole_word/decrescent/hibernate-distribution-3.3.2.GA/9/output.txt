todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9939307563699248	WITHOUT_CLASSIFICATION	0.006069243630075147	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9939307563699248	WITHOUT_CLASSIFICATION	0.006069243630075147	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.52060861072105	WITHOUT_CLASSIFICATION	0.47939138927895003	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.7042858756283011	WITHOUT_CLASSIFICATION	0.29571412437169897	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8739757667099362	WITHOUT_CLASSIFICATION	0.12602423329006388	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9217935361183892	IMPLEMENTATION	0.07820646388161077	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9976888903238437	WITHOUT_CLASSIFICATION	0.00231110967615628	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.5352691974433033	IMPLEMENTATION	0.46473080255669674	WITHOUT_CLASSIFICATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.6792340673279427	WITHOUT_CLASSIFICATION	0.3207659326720573	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5228586903752616	WITHOUT_CLASSIFICATION	0.4771413096247384	IMPLEMENTATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9930198901611936	WITHOUT_CLASSIFICATION	0.006980109838806435	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9217935361183892	IMPLEMENTATION	0.07820646388161077	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9286855190011073	IMPLEMENTATION	0.07131448099889272	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9286855190011073	IMPLEMENTATION	0.07131448099889272	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9767460794233516	WITHOUT_CLASSIFICATION	0.023253920576648417	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5202914985799848	IMPLEMENTATION	0.4797085014200152	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999997944104296	IMPLEMENTATION	2.0558957047363052E-7	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8584151218918569	WITHOUT_CLASSIFICATION	0.1415848781081431	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999338913494392	WITHOUT_CLASSIFICATION	6.610865056074889E-5	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7384722497706303	IMPLEMENTATION	0.2615277502293697	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8914774773528785	IMPLEMENTATION	0.10852252264712144	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9988829994171602	WITHOUT_CLASSIFICATION	0.0011170005828397608	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.7850016941640255	IMPLEMENTATION	0.21499830583597432	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9300607357339523	IMPLEMENTATION	0.0699392642660477	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9300607357339523	IMPLEMENTATION	0.0699392642660477	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.7366677726793238	WITHOUT_CLASSIFICATION	0.2633322273206763	IMPLEMENTATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.6130689613117315	IMPLEMENTATION	0.3869310386882685	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.738644343653561	IMPLEMENTATION	0.261355656346439	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.5475066896354936	IMPLEMENTATION	0.4524933103645063	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9993297097917874	IMPLEMENTATION	6.702902082126612E-4	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6075227054669239	IMPLEMENTATION	0.3924772945330761	WITHOUT_CLASSIFICATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5352053541160047	IMPLEMENTATION	0.4647946458839954	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9995457296143884	WITHOUT_CLASSIFICATION	4.5427038561170023E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9233908561720572	IMPLEMENTATION	0.07660914382794282	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9989243632461033	IMPLEMENTATION	0.001075636753896623	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.5450089041243178	IMPLEMENTATION	0.4549910958756822	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.9223045908162261	IMPLEMENTATION	0.07769540918377402	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5054371609043212	IMPLEMENTATION	0.49456283909567883	WITHOUT_CLASSIFICATION
TODO: use these in methods above	IMPLEMENTATION	0.7514581739907603	WITHOUT_CLASSIFICATION	0.24854182600923977	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.7589689752213521	IMPLEMENTATION	0.24103102477864796	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.7589689752213521	IMPLEMENTATION	0.24103102477864796	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9143784600852182	WITHOUT_CLASSIFICATION	0.08562153991478176	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999251602319814	WITHOUT_CLASSIFICATION	7.48397680186276E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9989506728952321	WITHOUT_CLASSIFICATION	0.0010493271047679002	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9980943081298715	IMPLEMENTATION	0.0019056918701283985	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.7669581769355218	IMPLEMENTATION	0.2330418230644782	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.5190248933887681	WITHOUT_CLASSIFICATION	0.4809751066112319	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.5743105318650444	WITHOUT_CLASSIFICATION	0.4256894681349555	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9991860542794208	WITHOUT_CLASSIFICATION	8.139457205793766E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.8124618589132727	WITHOUT_CLASSIFICATION	0.18753814108672742	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.779809888827984	WITHOUT_CLASSIFICATION	0.22019011117201612	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.8413880364185995	IMPLEMENTATION	0.15861196358140056	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.6708500115561414	IMPLEMENTATION	0.3291499884438586	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9938192959771136	IMPLEMENTATION	0.006180704022886444	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5916642094129451	IMPLEMENTATION	0.4083357905870549	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.5210794044656913	IMPLEMENTATION	0.47892059553430855	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5916642094129451	IMPLEMENTATION	0.4083357905870549	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.998389401523093	IMPLEMENTATION	0.0016105984769070646	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.7051804282820024	IMPLEMENTATION	0.2948195717179976	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5916642094129451	IMPLEMENTATION	0.4083357905870549	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998613666760323	WITHOUT_CLASSIFICATION	1.3863332396771993E-4	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998613666760323	WITHOUT_CLASSIFICATION	1.3863332396771993E-4	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999738392793415	IMPLEMENTATION	2.6160720658549932E-5	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.6036050400017593	IMPLEMENTATION	0.3963949599982407	WITHOUT_CLASSIFICATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999989303010194	WITHOUT_CLASSIFICATION	1.0696989805988302E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999552677782579	WITHOUT_CLASSIFICATION	4.473222174219081E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999552677782579	WITHOUT_CLASSIFICATION	4.473222174219081E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999365759483317	WITHOUT_CLASSIFICATION	6.342405166823553E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999811930206193	WITHOUT_CLASSIFICATION	1.8806979380696184E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998469596221555	WITHOUT_CLASSIFICATION	1.5304037784438334E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998469596221555	WITHOUT_CLASSIFICATION	1.5304037784438334E-4	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999939489792004	WITHOUT_CLASSIFICATION	6.051020799645915E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999536607953429	WITHOUT_CLASSIFICATION	4.633920465717761E-5	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999702143352911	WITHOUT_CLASSIFICATION	2.9785664708946102E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999825178022392	WITHOUT_CLASSIFICATION	1.748219776082118E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997601016473	WITHOUT_CLASSIFICATION	2.3989835270199445E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997601016473	WITHOUT_CLASSIFICATION	2.3989835270199445E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999577286542101	WITHOUT_CLASSIFICATION	4.2271345789956106E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.998107561910698	WITHOUT_CLASSIFICATION	0.0018924380893019321	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999633259602111	WITHOUT_CLASSIFICATION	3.6674039788897845E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999989682395697	WITHOUT_CLASSIFICATION	1.0317604303311541E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997350882449	WITHOUT_CLASSIFICATION	2.6491175505760446E-7	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999501885520312	WITHOUT_CLASSIFICATION	4.9811447968877936E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9998728005215648	WITHOUT_CLASSIFICATION	1.271994784350786E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998723722084748	WITHOUT_CLASSIFICATION	1.27627791525156E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999366680624892	WITHOUT_CLASSIFICATION	6.333193751080752E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979404500285	WITHOUT_CLASSIFICATION	2.059549971577648E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999499459000178	WITHOUT_CLASSIFICATION	5.0054099982261117E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999499459000178	WITHOUT_CLASSIFICATION	5.0054099982261117E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9998127944734431	WITHOUT_CLASSIFICATION	1.8720552655703397E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999548667500698	WITHOUT_CLASSIFICATION	4.5133249930142984E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999917850953195	WITHOUT_CLASSIFICATION	8.214904680433323E-6	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999721343682566	WITHOUT_CLASSIFICATION	2.7865631743369343E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.805065245528965	WITHOUT_CLASSIFICATION	0.19493475447103495	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999902675182478	WITHOUT_CLASSIFICATION	9.732481752223979E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999929377422001	WITHOUT_CLASSIFICATION	7.062257799825067E-6	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.999995275089871	WITHOUT_CLASSIFICATION	4.724910128983841E-6	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999926584799002	WITHOUT_CLASSIFICATION	7.341520099828062E-6	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999545318439274	WITHOUT_CLASSIFICATION	4.546815607269691E-5	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999963309407292	WITHOUT_CLASSIFICATION	3.6690592707308908E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997436930084942	WITHOUT_CLASSIFICATION	2.563069915057634E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999857249144556	WITHOUT_CLASSIFICATION	1.4275085544426306E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999963864190837	WITHOUT_CLASSIFICATION	3.6135809163122433E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999732974534328	WITHOUT_CLASSIFICATION	2.6702546567206567E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999566792134823	WITHOUT_CLASSIFICATION	4.332078651780839E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999529640815603	WITHOUT_CLASSIFICATION	4.703591843970014E-5	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998698558228474	WITHOUT_CLASSIFICATION	1.301441771527404E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999615120249936	WITHOUT_CLASSIFICATION	3.848797500627994E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999514633599647	WITHOUT_CLASSIFICATION	4.853664003535658E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999514633599647	WITHOUT_CLASSIFICATION	4.853664003535658E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998698558228474	WITHOUT_CLASSIFICATION	1.301441771527404E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9493816214288172	WITHOUT_CLASSIFICATION	0.05061837857118271	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999595339007727	WITHOUT_CLASSIFICATION	4.0466099227278184E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999930491887642	WITHOUT_CLASSIFICATION	6.950811235785803E-6	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999992665647748	WITHOUT_CLASSIFICATION	7.334352251775451E-7	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999986440049609	WITHOUT_CLASSIFICATION	1.3559950390915696E-5	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9995203272930084	WITHOUT_CLASSIFICATION	4.796727069915291E-4	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998667886648015	WITHOUT_CLASSIFICATION	1.3321133519851315E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998519120218349	WITHOUT_CLASSIFICATION	1.4808797816509372E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9997466023741565	WITHOUT_CLASSIFICATION	2.533976258434502E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9993730465725172	WITHOUT_CLASSIFICATION	6.269534274828621E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999514633599647	WITHOUT_CLASSIFICATION	4.853664003535658E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999990317899018	WITHOUT_CLASSIFICATION	9.682100981125727E-7	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999111414206691	WITHOUT_CLASSIFICATION	8.885857933102718E-5	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999864742495012	WITHOUT_CLASSIFICATION	1.3525750498824924E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999993868134402	WITHOUT_CLASSIFICATION	6.131865597161683E-7	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999700168592717	WITHOUT_CLASSIFICATION	2.9983140728305576E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999964923076109	WITHOUT_CLASSIFICATION	3.507692389253257E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999963783734398	WITHOUT_CLASSIFICATION	3.6216265602256813E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999976000562573	WITHOUT_CLASSIFICATION	2.3999437426794426E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999600655164962	WITHOUT_CLASSIFICATION	3.993448350389388E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999481407252	WITHOUT_CLASSIFICATION	5.1859274865694284E-8	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999937829813539	WITHOUT_CLASSIFICATION	6.217018646101852E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999613859570858	WITHOUT_CLASSIFICATION	3.8614042914156136E-5	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7750539212415362	IMPLEMENTATION	0.2249460787584639	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9998198248016564	WITHOUT_CLASSIFICATION	1.8017519834368615E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999855758748539	WITHOUT_CLASSIFICATION	1.442412514598137E-5	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9358832123485906	WITHOUT_CLASSIFICATION	0.06411678765140946	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999972791884956	WITHOUT_CLASSIFICATION	2.72081150436959E-6	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999968961511468	WITHOUT_CLASSIFICATION	3.1038488531620085E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9998532595109416	WITHOUT_CLASSIFICATION	1.4674048905833747E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999822118276358	WITHOUT_CLASSIFICATION	1.778817236424072E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999935440468803	WITHOUT_CLASSIFICATION	6.455953119707459E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999975360415174	WITHOUT_CLASSIFICATION	2.4639584826182286E-6	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999917211843885	WITHOUT_CLASSIFICATION	8.278815611412295E-6	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999552198314	WITHOUT_CLASSIFICATION	4.4780168505903995E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999975360415174	WITHOUT_CLASSIFICATION	2.4639584826182286E-6	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.99926843403832	WITHOUT_CLASSIFICATION	7.315659616799489E-4	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9995192471067056	WITHOUT_CLASSIFICATION	4.807528932943941E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999434927826897	WITHOUT_CLASSIFICATION	5.65072173103582E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999614678159952	WITHOUT_CLASSIFICATION	3.853218400480302E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889705301073	WITHOUT_CLASSIFICATION	1.102946989275017E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889705301073	WITHOUT_CLASSIFICATION	1.102946989275017E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999373890702956	WITHOUT_CLASSIFICATION	6.261092970447813E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997602488001	WITHOUT_CLASSIFICATION	2.397511998806985E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998568609761392	WITHOUT_CLASSIFICATION	1.431390238607241E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999984604474242	WITHOUT_CLASSIFICATION	1.5395525757118485E-6	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998875044797214	WITHOUT_CLASSIFICATION	1.1249552027858202E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999997503827188	WITHOUT_CLASSIFICATION	2.4961728120329652E-6	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999541444286488	WITHOUT_CLASSIFICATION	4.5855571351159025E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9984998509614909	WITHOUT_CLASSIFICATION	0.0015001490385090888	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999789117026082	WITHOUT_CLASSIFICATION	2.108829739188557E-5	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999946128175183	WITHOUT_CLASSIFICATION	5.3871824817774E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999691720143077	WITHOUT_CLASSIFICATION	3.0827985692257865E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999691720143077	WITHOUT_CLASSIFICATION	3.0827985692257865E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999580028767331	WITHOUT_CLASSIFICATION	4.199712326699796E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999382129320175	WITHOUT_CLASSIFICATION	6.178706798255106E-5	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999979151487554	WITHOUT_CLASSIFICATION	2.0848512445995615E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999691720143077	WITHOUT_CLASSIFICATION	3.0827985692257865E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999580028767331	WITHOUT_CLASSIFICATION	4.199712326699796E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999580028767331	WITHOUT_CLASSIFICATION	4.199712326699796E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999955577650773	WITHOUT_CLASSIFICATION	4.4422349225913584E-6	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998973932283026	WITHOUT_CLASSIFICATION	1.0260677169740942E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998541833746	WITHOUT_CLASSIFICATION	1.4581662541651234E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999486807114	WITHOUT_CLASSIFICATION	5.131928859709154E-7	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9995365164714723	WITHOUT_CLASSIFICATION	4.6348352852770917E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9995365164714723	WITHOUT_CLASSIFICATION	4.6348352852770917E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999960144419261	WITHOUT_CLASSIFICATION	3.985558073818298E-6	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999758350958637	WITHOUT_CLASSIFICATION	2.4164904136296445E-5	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999970305501287	WITHOUT_CLASSIFICATION	2.969449871232967E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999983868041447	WITHOUT_CLASSIFICATION	1.6131958553041858E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999983868041447	WITHOUT_CLASSIFICATION	1.6131958553041858E-6	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999852423360357	WITHOUT_CLASSIFICATION	1.4757663964273554E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999213448437955	WITHOUT_CLASSIFICATION	7.865515620462536E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999909823543632	WITHOUT_CLASSIFICATION	9.0176456367459E-6	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999910791697	WITHOUT_CLASSIFICATION	8.92083028997512E-9	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999949941861518	WITHOUT_CLASSIFICATION	5.005813848202655E-6	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999653406582537	WITHOUT_CLASSIFICATION	3.465934174620885E-5	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9997580073710326	WITHOUT_CLASSIFICATION	2.4199262896746384E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999274290569569	WITHOUT_CLASSIFICATION	7.257094304320873E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999909823543632	WITHOUT_CLASSIFICATION	9.0176456367459E-6	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999827297529034	WITHOUT_CLASSIFICATION	1.727024709662549E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999879242895403	WITHOUT_CLASSIFICATION	1.2075710459715817E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999879242895403	WITHOUT_CLASSIFICATION	1.2075710459715817E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999945828678	WITHOUT_CLASSIFICATION	5.417132096926486E-9	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.99998977715952	WITHOUT_CLASSIFICATION	1.0222840480144664E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999019333348828	WITHOUT_CLASSIFICATION	9.806666511722099E-5	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9976617698177821	WITHOUT_CLASSIFICATION	0.0023382301822178456	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999215089283674	WITHOUT_CLASSIFICATION	7.849107163254697E-5	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999241449406834	WITHOUT_CLASSIFICATION	7.58550593165717E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999841390802657	WITHOUT_CLASSIFICATION	1.5860919734270183E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999551597444044	WITHOUT_CLASSIFICATION	4.4840255595561044E-5	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999611288645441	WITHOUT_CLASSIFICATION	3.8871135455804635E-5	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994600266293	WITHOUT_CLASSIFICATION	5.399733706309795E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999994600266293	WITHOUT_CLASSIFICATION	5.399733706309795E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999866147701795	WITHOUT_CLASSIFICATION	1.3385229820535484E-5	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999989303010194	WITHOUT_CLASSIFICATION	1.0696989805988302E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999696466870637	WITHOUT_CLASSIFICATION	3.0353312936305936E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999552677782579	WITHOUT_CLASSIFICATION	4.473222174219081E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999305623529112	WITHOUT_CLASSIFICATION	6.943764708876684E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999530233325876	WITHOUT_CLASSIFICATION	4.697666741225355E-5	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999131891594057	WITHOUT_CLASSIFICATION	8.681084059425688E-5	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999603739062383	WITHOUT_CLASSIFICATION	3.9626093761684184E-5	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999843764636321	WITHOUT_CLASSIFICATION	1.562353636780025E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999524900025433	WITHOUT_CLASSIFICATION	4.750999745675659E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999516637949932	WITHOUT_CLASSIFICATION	4.833620500675544E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999661762228162	WITHOUT_CLASSIFICATION	3.382377718368711E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999603739062383	WITHOUT_CLASSIFICATION	3.9626093761684184E-5	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999630142955717	WITHOUT_CLASSIFICATION	3.6985704428254286E-5	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999431290810057	WITHOUT_CLASSIFICATION	5.6870918994397646E-5	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999197559393488	WITHOUT_CLASSIFICATION	8.024406065117253E-5	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999965657237845	WITHOUT_CLASSIFICATION	3.434276215493709E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999886548524595	WITHOUT_CLASSIFICATION	1.1345147540579772E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998469596221555	WITHOUT_CLASSIFICATION	1.5304037784438334E-4	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999310019961439	WITHOUT_CLASSIFICATION	6.899800385609833E-5	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999436141051724	WITHOUT_CLASSIFICATION	5.638589482773002E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999849570098147	WITHOUT_CLASSIFICATION	1.5042990185396363E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999777200841499	WITHOUT_CLASSIFICATION	2.2279915850173076E-5	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999505957687128	WITHOUT_CLASSIFICATION	4.9404231287145276E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999843053403515	WITHOUT_CLASSIFICATION	1.5694659648486573E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999895434463102	WITHOUT_CLASSIFICATION	1.0456553689890738E-5	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.99963595197722	WITHOUT_CLASSIFICATION	3.6404802277995984E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9986583768250128	WITHOUT_CLASSIFICATION	0.0013416231749871343	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.999997755009802	WITHOUT_CLASSIFICATION	2.2449901979976528E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999552677782579	WITHOUT_CLASSIFICATION	4.473222174219081E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999552677782579	WITHOUT_CLASSIFICATION	4.473222174219081E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999516637949932	WITHOUT_CLASSIFICATION	4.833620500675544E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999505957687128	WITHOUT_CLASSIFICATION	4.9404231287145276E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999939489792004	WITHOUT_CLASSIFICATION	6.051020799645915E-6	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999722452803468	WITHOUT_CLASSIFICATION	2.775471965318708E-5	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999539791375641	WITHOUT_CLASSIFICATION	4.602086243586924E-5	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999778000116561	WITHOUT_CLASSIFICATION	2.2199988343780686E-5	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999562320801814	WITHOUT_CLASSIFICATION	4.376791981868281E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999733097334328	WITHOUT_CLASSIFICATION	2.6690266567103372E-5	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999504309545348	WITHOUT_CLASSIFICATION	4.9569045465158317E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9997563141195233	WITHOUT_CLASSIFICATION	2.4368588047669342E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.999766663611688	WITHOUT_CLASSIFICATION	2.3333638831201511E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.999766663611688	WITHOUT_CLASSIFICATION	2.3333638831201511E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999918877836034	WITHOUT_CLASSIFICATION	8.11221639656616E-6	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999719558482629	WITHOUT_CLASSIFICATION	2.804415173699559E-5	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999432924485928	WITHOUT_CLASSIFICATION	5.670755140719636E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999096736570704	WITHOUT_CLASSIFICATION	9.032634292960302E-5	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999563633440551	WITHOUT_CLASSIFICATION	4.3636655944866085E-5	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.999925714961292	WITHOUT_CLASSIFICATION	7.428503870797595E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999733192772692	WITHOUT_CLASSIFICATION	2.668072273078254E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999536607953429	WITHOUT_CLASSIFICATION	4.633920465717761E-5	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999569892456621	WITHOUT_CLASSIFICATION	4.3010754337833445E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999569892456621	WITHOUT_CLASSIFICATION	4.3010754337833445E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999518175985671	WITHOUT_CLASSIFICATION	4.818240143280878E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999251154996744	WITHOUT_CLASSIFICATION	7.488450032556716E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999518175985671	WITHOUT_CLASSIFICATION	4.818240143280878E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999654599480671	WITHOUT_CLASSIFICATION	3.454005193299135E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999815258187378	WITHOUT_CLASSIFICATION	1.8474181262219786E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999552677782579	WITHOUT_CLASSIFICATION	4.473222174219081E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999516637949932	WITHOUT_CLASSIFICATION	4.833620500675544E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999505957687128	WITHOUT_CLASSIFICATION	4.9404231287145276E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999505957687128	WITHOUT_CLASSIFICATION	4.9404231287145276E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999565102779872	WITHOUT_CLASSIFICATION	4.348972201277712E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9997813854158523	WITHOUT_CLASSIFICATION	2.1861458414782894E-4	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999663181575511	WITHOUT_CLASSIFICATION	3.3681842448973264E-5	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999825178022392	WITHOUT_CLASSIFICATION	1.748219776082118E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999825178022392	WITHOUT_CLASSIFICATION	1.748219776082118E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9976731556847324	WITHOUT_CLASSIFICATION	0.0023268443152676685	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999919065540926	WITHOUT_CLASSIFICATION	8.093445907339912E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999773464695332	WITHOUT_CLASSIFICATION	2.2653530466752733E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999530583252968	WITHOUT_CLASSIFICATION	4.694167470325995E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999832137798411	WITHOUT_CLASSIFICATION	1.6786220158862815E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999506323126721	WITHOUT_CLASSIFICATION	4.936768732790166E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997601016473	WITHOUT_CLASSIFICATION	2.3989835270199445E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999505090795519	WITHOUT_CLASSIFICATION	4.949092044804174E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999505090795519	WITHOUT_CLASSIFICATION	4.949092044804174E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999577286542101	WITHOUT_CLASSIFICATION	4.2271345789956106E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999577286542101	WITHOUT_CLASSIFICATION	4.2271345789956106E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998135036147001	WITHOUT_CLASSIFICATION	1.864963852998946E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998135036147001	WITHOUT_CLASSIFICATION	1.864963852998946E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999507151985235	WITHOUT_CLASSIFICATION	4.9284801476398945E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999507151985235	WITHOUT_CLASSIFICATION	4.9284801476398945E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999825178022392	WITHOUT_CLASSIFICATION	1.748219776082118E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999997601016473	WITHOUT_CLASSIFICATION	2.3989835270199445E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999505090795519	WITHOUT_CLASSIFICATION	4.949092044804174E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999505090795519	WITHOUT_CLASSIFICATION	4.949092044804174E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999577286542101	WITHOUT_CLASSIFICATION	4.2271345789956106E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998135036147001	WITHOUT_CLASSIFICATION	1.864963852998946E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9998135036147001	WITHOUT_CLASSIFICATION	1.864963852998946E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999507151985235	WITHOUT_CLASSIFICATION	4.9284801476398945E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998139570651241	WITHOUT_CLASSIFICATION	1.8604293487585805E-4	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999684920255935	WITHOUT_CLASSIFICATION	3.1507974406506405E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999636479640832	WITHOUT_CLASSIFICATION	3.635203591669038E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9995448519787671	WITHOUT_CLASSIFICATION	4.551480212329975E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.999955490406516	WITHOUT_CLASSIFICATION	4.450959348401488E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999499452443743	WITHOUT_CLASSIFICATION	5.005475562570076E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999449723507	WITHOUT_CLASSIFICATION	5.5027649289441884E-8	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999895756510053	WITHOUT_CLASSIFICATION	1.042434899464821E-5	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999983166781834	WITHOUT_CLASSIFICATION	1.6833218166281583E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999151662965159	WITHOUT_CLASSIFICATION	8.48337034841463E-5	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999502096511267	WITHOUT_CLASSIFICATION	4.979034887337946E-5	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999911140335693	WITHOUT_CLASSIFICATION	8.885966430623332E-6	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999373890702956	WITHOUT_CLASSIFICATION	6.261092970447813E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999499452443743	WITHOUT_CLASSIFICATION	5.005475562570076E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999499452443743	WITHOUT_CLASSIFICATION	5.005475562570076E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999499452443743	WITHOUT_CLASSIFICATION	5.005475562570076E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999986371089822	WITHOUT_CLASSIFICATION	1.3628910178779745E-6	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998678508510953	WITHOUT_CLASSIFICATION	1.3214914890462493E-4	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998678508510953	WITHOUT_CLASSIFICATION	1.3214914890462493E-4	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998469144699001	WITHOUT_CLASSIFICATION	1.530855300998613E-4	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999986989463	WITHOUT_CLASSIFICATION	1.3010537041130358E-8	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999955369882351	WITHOUT_CLASSIFICATION	4.4630117649369914E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998072543851102	WITHOUT_CLASSIFICATION	1.9274561488975074E-4	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998072543851102	WITHOUT_CLASSIFICATION	1.9274561488975074E-4	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997350882449	WITHOUT_CLASSIFICATION	2.6491175505760446E-7	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999932414472857	WITHOUT_CLASSIFICATION	6.75855271432956E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999932414472857	WITHOUT_CLASSIFICATION	6.75855271432956E-6	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9994236176492151	WITHOUT_CLASSIFICATION	5.763823507849953E-4	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999997819768145	WITHOUT_CLASSIFICATION	2.180231855052992E-6	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999979404500285	WITHOUT_CLASSIFICATION	2.059549971577648E-6	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999537498945134	WITHOUT_CLASSIFICATION	4.6250105486721496E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999501885520312	WITHOUT_CLASSIFICATION	4.9811447968877936E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.529020957645049	IMPLEMENTATION	0.4709790423549509	WITHOUT_CLASSIFICATION
ID	WITHOUT_CLASSIFICATION	0.9998716334582757	WITHOUT_CLASSIFICATION	1.2836654172431854E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999810485858693	WITHOUT_CLASSIFICATION	1.8951414130647684E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999958303663883	WITHOUT_CLASSIFICATION	4.169633611706097E-5	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999895300284782	WITHOUT_CLASSIFICATION	1.0469971521669015E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999460859045	WITHOUT_CLASSIFICATION	5.3914095532523985E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999721343682566	WITHOUT_CLASSIFICATION	2.7865631743369343E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999625720035996	WITHOUT_CLASSIFICATION	3.742799640030455E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999363128252455	WITHOUT_CLASSIFICATION	6.368717475453035E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999512148262013	WITHOUT_CLASSIFICATION	4.8785173798758996E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999499343930317	WITHOUT_CLASSIFICATION	5.0065606968291176E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999387945272576	WITHOUT_CLASSIFICATION	6.120547274236165E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999354304203173	WITHOUT_CLASSIFICATION	6.456957968264887E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999737999761891	WITHOUT_CLASSIFICATION	2.6200023810945352E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979404500285	WITHOUT_CLASSIFICATION	2.059549971577648E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999689057682281	WITHOUT_CLASSIFICATION	3.109423177189438E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999845653925474	WITHOUT_CLASSIFICATION	1.543460745260505E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999535995249441	WITHOUT_CLASSIFICATION	4.6400475055816255E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999501885520312	WITHOUT_CLASSIFICATION	4.9811447968877936E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999737999761891	WITHOUT_CLASSIFICATION	2.6200023810945352E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999689057682281	WITHOUT_CLASSIFICATION	3.109423177189438E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999535995249441	WITHOUT_CLASSIFICATION	4.6400475055816255E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999416670245035	WITHOUT_CLASSIFICATION	5.833297549641493E-5	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999499474239234	WITHOUT_CLASSIFICATION	5.0052576076671034E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999416670245035	WITHOUT_CLASSIFICATION	5.833297549641493E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999499459000178	WITHOUT_CLASSIFICATION	5.0054099982261117E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9997841774082189	WITHOUT_CLASSIFICATION	2.1582259178111753E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9998940808723084	WITHOUT_CLASSIFICATION	1.0591912769172545E-4	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999997286110338	WITHOUT_CLASSIFICATION	2.7138896622454394E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999911593428032	WITHOUT_CLASSIFICATION	8.840657196742873E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999071514518762	WITHOUT_CLASSIFICATION	9.284854812380086E-4	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999743792686797	WITHOUT_CLASSIFICATION	2.5620731320316322E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998071596972347	WITHOUT_CLASSIFICATION	1.928403027654413E-4	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9988337164626221	WITHOUT_CLASSIFICATION	0.0011662835373779836	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999743792686797	WITHOUT_CLASSIFICATION	2.5620731320316322E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999548667500698	WITHOUT_CLASSIFICATION	4.5133249930142984E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9997026090594707	WITHOUT_CLASSIFICATION	2.9739094052919974E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999499131132615	WITHOUT_CLASSIFICATION	5.00868867383523E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999737999761891	WITHOUT_CLASSIFICATION	2.6200023810945352E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999318000229875	WITHOUT_CLASSIFICATION	6.819997701246921E-5	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999579240602582	WITHOUT_CLASSIFICATION	4.2075939741832866E-5	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9980640099094218	WITHOUT_CLASSIFICATION	0.001935990090578248	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999608131394953	WITHOUT_CLASSIFICATION	3.9186860504756006E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999895307087966	WITHOUT_CLASSIFICATION	1.046929120335502E-5	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998190756035	WITHOUT_CLASSIFICATION	1.80924396427903E-7	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999919551470398	WITHOUT_CLASSIFICATION	8.044852960291224E-6	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9990660073577374	WITHOUT_CLASSIFICATION	9.339926422624901E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999522833226426	WITHOUT_CLASSIFICATION	4.771667735743924E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998344145276228	WITHOUT_CLASSIFICATION	1.6558547237725701E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9991745781783525	WITHOUT_CLASSIFICATION	8.254218216474547E-4	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999721343682566	WITHOUT_CLASSIFICATION	2.7865631743369343E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999104416552956	WITHOUT_CLASSIFICATION	8.955834470427643E-5	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998735084759209	WITHOUT_CLASSIFICATION	1.2649152407906113E-4	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9998559213720112	WITHOUT_CLASSIFICATION	1.4407862798882662E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999591647039922	WITHOUT_CLASSIFICATION	4.0835296007810824E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999624376955015	WITHOUT_CLASSIFICATION	3.756230449845853E-5	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999835843077506	WITHOUT_CLASSIFICATION	1.6415692249415757E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999996498809396	WITHOUT_CLASSIFICATION	3.501190603595027E-7	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999788437210158	WITHOUT_CLASSIFICATION	2.1156278984244478E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9984232892467702	WITHOUT_CLASSIFICATION	0.0015767107532298319	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999492779158526	WITHOUT_CLASSIFICATION	5.0722084147229684E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9985266344837977	WITHOUT_CLASSIFICATION	0.0014733655162023078	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9985266344837977	WITHOUT_CLASSIFICATION	0.0014733655162023078	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999652474332199	WITHOUT_CLASSIFICATION	3.475256678005657E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999978563115582	WITHOUT_CLASSIFICATION	2.1436884417991143E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999908345138045	WITHOUT_CLASSIFICATION	9.16548619543047E-6	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999533624747385	WITHOUT_CLASSIFICATION	4.663752526145058E-5	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999746466980923	WITHOUT_CLASSIFICATION	2.5353301907624537E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998319639423872	WITHOUT_CLASSIFICATION	1.6803605761272507E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999874547276304	WITHOUT_CLASSIFICATION	1.2545272369553124E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9948867762030281	WITHOUT_CLASSIFICATION	0.005113223796971936	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999947724297488	WITHOUT_CLASSIFICATION	5.2275702512443736E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999611269265012	WITHOUT_CLASSIFICATION	3.887307349887555E-5	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999367656988442	WITHOUT_CLASSIFICATION	6.323430115578851E-5	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9987829503112664	WITHOUT_CLASSIFICATION	0.0012170496887336092	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999516588416292	WITHOUT_CLASSIFICATION	4.834115837087641E-5	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998845475669679	WITHOUT_CLASSIFICATION	1.1545243303212613E-4	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9996121843631313	WITHOUT_CLASSIFICATION	3.878156368687258E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999444423154648	WITHOUT_CLASSIFICATION	5.555768453518421E-5	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812636840784	WITHOUT_CLASSIFICATION	1.873631592170694E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999895480131009	WITHOUT_CLASSIFICATION	1.045198689910405E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997213896372402	WITHOUT_CLASSIFICATION	2.786103627597937E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9998956698449902	WITHOUT_CLASSIFICATION	1.0433015500986065E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999789076530944	WITHOUT_CLASSIFICATION	2.1092346905596392E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999937343830291	WITHOUT_CLASSIFICATION	6.2656169709389014E-6	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999444423154648	WITHOUT_CLASSIFICATION	5.555768453518421E-5	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999387656535578	WITHOUT_CLASSIFICATION	6.123434644217328E-5	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998647004269736	WITHOUT_CLASSIFICATION	1.3529957302633834E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999864284797294	WITHOUT_CLASSIFICATION	1.357152027060343E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999676668144	WITHOUT_CLASSIFICATION	3.233318558510639E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999818799160165	WITHOUT_CLASSIFICATION	1.8120083983468237E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999895480131009	WITHOUT_CLASSIFICATION	1.045198689910405E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999408421710502	WITHOUT_CLASSIFICATION	5.915782894983483E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997856059300686	WITHOUT_CLASSIFICATION	2.143940699313075E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998575012886177	WITHOUT_CLASSIFICATION	1.4249871138233988E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999437732536633	WITHOUT_CLASSIFICATION	5.6226746336675885E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999437732536633	WITHOUT_CLASSIFICATION	5.6226746336675885E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999529640815603	WITHOUT_CLASSIFICATION	4.703591843970014E-5	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999853663543196	WITHOUT_CLASSIFICATION	1.4633645680484413E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999354032874809	WITHOUT_CLASSIFICATION	6.459671251908197E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999354032874809	WITHOUT_CLASSIFICATION	6.459671251908197E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9984232892467702	WITHOUT_CLASSIFICATION	0.0015767107532298319	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998846429541808	WITHOUT_CLASSIFICATION	1.1535704581919409E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9991661925415839	WITHOUT_CLASSIFICATION	8.338074584161127E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999438332446321	WITHOUT_CLASSIFICATION	5.6166755367975896E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999866147701795	WITHOUT_CLASSIFICATION	1.3385229820535484E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9991661925415839	WITHOUT_CLASSIFICATION	8.338074584161127E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999438332446321	WITHOUT_CLASSIFICATION	5.6166755367975896E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8785997841426325	WITHOUT_CLASSIFICATION	0.12140021585736747	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995340972331	WITHOUT_CLASSIFICATION	4.6590276691910723E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999772376284994	WITHOUT_CLASSIFICATION	2.2762371500587075E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999995987101302	WITHOUT_CLASSIFICATION	4.0128986980360834E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996070099809643	WITHOUT_CLASSIFICATION	3.9299001903579666E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9091794967065188	WITHOUT_CLASSIFICATION	0.09082050329348124	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996383598601266	WITHOUT_CLASSIFICATION	3.6164013987336873E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996383598601266	WITHOUT_CLASSIFICATION	3.6164013987336873E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999994011876613	WITHOUT_CLASSIFICATION	5.98812338806946E-7	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999991691037285	WITHOUT_CLASSIFICATION	8.308962715668272E-7	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9998938865271308	WITHOUT_CLASSIFICATION	1.0611347286914952E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999936162934608	WITHOUT_CLASSIFICATION	6.383706539157054E-6	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.999991969399613	WITHOUT_CLASSIFICATION	8.030600387057923E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9997182939641186	WITHOUT_CLASSIFICATION	2.8170603588147157E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999866147701795	WITHOUT_CLASSIFICATION	1.3385229820535484E-5	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9997182939641186	WITHOUT_CLASSIFICATION	2.8170603588147157E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999960361368476	WITHOUT_CLASSIFICATION	3.963863152428748E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999960361368476	WITHOUT_CLASSIFICATION	3.963863152428748E-6	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999990161064622	WITHOUT_CLASSIFICATION	9.838935378380914E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8785997841426325	WITHOUT_CLASSIFICATION	0.12140021585736747	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9970056716127905	WITHOUT_CLASSIFICATION	0.0029943283872094924	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999953413923985	WITHOUT_CLASSIFICATION	4.65860760151716E-6	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.97757212719529	WITHOUT_CLASSIFICATION	0.022427872804710102	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999939953070156	WITHOUT_CLASSIFICATION	6.004692984425006E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998891023079296	WITHOUT_CLASSIFICATION	1.1089769207037916E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8785997841426325	WITHOUT_CLASSIFICATION	0.12140021585736747	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999939953070156	WITHOUT_CLASSIFICATION	6.004692984425006E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998891023079296	WITHOUT_CLASSIFICATION	1.1089769207037916E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999980291365649	WITHOUT_CLASSIFICATION	1.9708634351100762E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998964528206433	WITHOUT_CLASSIFICATION	1.0354717935659853E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999813917432928	WITHOUT_CLASSIFICATION	1.860825670724198E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8785997841426325	WITHOUT_CLASSIFICATION	0.12140021585736747	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.8785997841426325	WITHOUT_CLASSIFICATION	0.12140021585736747	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999932390114353	WITHOUT_CLASSIFICATION	6.760988564693678E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999902640719072	WITHOUT_CLASSIFICATION	9.735928092938838E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.999995383408871	WITHOUT_CLASSIFICATION	4.616591129118842E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999963864190837	WITHOUT_CLASSIFICATION	3.6135809163122433E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999892222094762	WITHOUT_CLASSIFICATION	1.0777790523747437E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999968836259479	WITHOUT_CLASSIFICATION	3.116374052164055E-6	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9988716831799878	WITHOUT_CLASSIFICATION	0.0011283168200123066	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999902280048094	WITHOUT_CLASSIFICATION	9.771995190711903E-6	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999985466084087	WITHOUT_CLASSIFICATION	1.4533915913011397E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999520616910652	WITHOUT_CLASSIFICATION	4.793830893471889E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9989605743132539	WITHOUT_CLASSIFICATION	0.0010394256867460965	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.992914870308086	WITHOUT_CLASSIFICATION	0.007085129691913926	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999990735783902	WITHOUT_CLASSIFICATION	9.264216097630161E-7	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9995294700109715	WITHOUT_CLASSIFICATION	4.7052998902851395E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999294418850504	WITHOUT_CLASSIFICATION	7.055811494956493E-5	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999999591123287	WITHOUT_CLASSIFICATION	4.088767130676044E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999963864190837	WITHOUT_CLASSIFICATION	3.6135809163122433E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999906722403541	WITHOUT_CLASSIFICATION	9.327759646014433E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999886871079143	WITHOUT_CLASSIFICATION	1.1312892085638378E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998749463966854	WITHOUT_CLASSIFICATION	1.2505360331472066E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997823489908131	WITHOUT_CLASSIFICATION	2.1765100918687776E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999354003115021	WITHOUT_CLASSIFICATION	6.459968849793333E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999354003115021	WITHOUT_CLASSIFICATION	6.459968849793333E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999963864190837	WITHOUT_CLASSIFICATION	3.6135809163122433E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999688032175149	WITHOUT_CLASSIFICATION	3.11967824850773E-5	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999978870344435	WITHOUT_CLASSIFICATION	2.112965556635356E-6	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9929526791295045	WITHOUT_CLASSIFICATION	0.007047320870495459	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999838571122042	WITHOUT_CLASSIFICATION	1.6142887795879078E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999500176724647	WITHOUT_CLASSIFICATION	4.998232753536749E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999884916932047	WITHOUT_CLASSIFICATION	1.1508306795232504E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999725727474412	WITHOUT_CLASSIFICATION	2.7427252558687793E-5	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999946868608026	WITHOUT_CLASSIFICATION	5.3131391974038246E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999792805560379	WITHOUT_CLASSIFICATION	2.071944396214348E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999948556459115	WITHOUT_CLASSIFICATION	5.144354088478188E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999955208161226	WITHOUT_CLASSIFICATION	4.479183877350428E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999577688735475	WITHOUT_CLASSIFICATION	4.2231126452562345E-5	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999544559344098	WITHOUT_CLASSIFICATION	4.554406559017987E-5	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937771453794	WITHOUT_CLASSIFICATION	6.2228546206477035E-6	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999671100747787	WITHOUT_CLASSIFICATION	3.288992522132923E-5	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9988087599379252	WITHOUT_CLASSIFICATION	0.0011912400620748315	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998411612188952	WITHOUT_CLASSIFICATION	1.5883878110480422E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999497174219498	WITHOUT_CLASSIFICATION	5.0282578050202774E-5	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999965866543117	WITHOUT_CLASSIFICATION	3.4133456882051142E-6	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999047647423855	WITHOUT_CLASSIFICATION	9.523525761444642E-5	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999866345215804	WITHOUT_CLASSIFICATION	1.3365478419522267E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989497839111126	WITHOUT_CLASSIFICATION	0.0010502160888873641	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994901606572971	WITHOUT_CLASSIFICATION	5.098393427029086E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990967142482147	WITHOUT_CLASSIFICATION	9.032857517854364E-4	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679404782527	WITHOUT_CLASSIFICATION	3.2059521747332356E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988062326443716	WITHOUT_CLASSIFICATION	0.0011937673556283925	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999250756585158	WITHOUT_CLASSIFICATION	7.492434148407907E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999600184174036	WITHOUT_CLASSIFICATION	3.9981582596494955E-5	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991058943236987	WITHOUT_CLASSIFICATION	8.941056763013899E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999195867242927	WITHOUT_CLASSIFICATION	8.041327570731183E-4	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982376056290655	WITHOUT_CLASSIFICATION	0.001762394370934536	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9949873613599518	WITHOUT_CLASSIFICATION	0.005012638640048236	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987758346483621	WITHOUT_CLASSIFICATION	0.001224165351637977	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984965734312002	WITHOUT_CLASSIFICATION	0.0015034265687997404	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999879694863801	WITHOUT_CLASSIFICATION	1.2030513619870498E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489868482313	WITHOUT_CLASSIFICATION	5.101315176861037E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.669029596170488	WITHOUT_CLASSIFICATION	0.33097040382951204	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999976962291084	WITHOUT_CLASSIFICATION	2.30377089159729E-6	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999986949597524	WITHOUT_CLASSIFICATION	1.305040247589564E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999670600624061	WITHOUT_CLASSIFICATION	3.293993759392895E-5	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999001711611104	WITHOUT_CLASSIFICATION	9.98288388896931E-5	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999793611759692	WITHOUT_CLASSIFICATION	2.0638824030755823E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999939058043683	WITHOUT_CLASSIFICATION	6.094195631763119E-6	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999357446269034	WITHOUT_CLASSIFICATION	6.425537309667369E-5	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999376064573225	WITHOUT_CLASSIFICATION	6.2393542677509E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999556797594077	WITHOUT_CLASSIFICATION	4.432024059238884E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999649047052224	WITHOUT_CLASSIFICATION	3.509529477760567E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999508467126886	WITHOUT_CLASSIFICATION	4.9153287311449455E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999309922631445	WITHOUT_CLASSIFICATION	6.900773685544E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9997899148210527	WITHOUT_CLASSIFICATION	2.1008517894730515E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998855823887366	WITHOUT_CLASSIFICATION	1.1441761126333511E-4	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998517801479124	WITHOUT_CLASSIFICATION	1.4821985208761138E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486254649288	WITHOUT_CLASSIFICATION	5.137453507120183E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999675276674769	WITHOUT_CLASSIFICATION	3.247233252313907E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602669703888	WITHOUT_CLASSIFICATION	3.9733029611143345E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999491320617584	WITHOUT_CLASSIFICATION	5.08679382416698E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9992360062282591	WITHOUT_CLASSIFICATION	7.639937717409135E-4	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999449605898408	WITHOUT_CLASSIFICATION	5.503941015910947E-5	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999763570716205	WITHOUT_CLASSIFICATION	2.3642928379572032E-5	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998636260357335	WITHOUT_CLASSIFICATION	1.3637396426645132E-4	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998760248105235	WITHOUT_CLASSIFICATION	1.2397518947637645E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999511611660159	WITHOUT_CLASSIFICATION	4.88388339841605E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999904710873811	WITHOUT_CLASSIFICATION	9.528912618882721E-6	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999716843465262	WITHOUT_CLASSIFICATION	2.8315653473943464E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999710440105916	WITHOUT_CLASSIFICATION	2.8955989408508153E-5	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999815553533354	WITHOUT_CLASSIFICATION	1.8444646664594446E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9990818787606467	WITHOUT_CLASSIFICATION	9.181212393533816E-4	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999970404380141	WITHOUT_CLASSIFICATION	2.959561985789454E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.999844367159444	WITHOUT_CLASSIFICATION	1.5563284055588927E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999670600624061	WITHOUT_CLASSIFICATION	3.293993759392895E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9996874098032456	WITHOUT_CLASSIFICATION	3.125901967544091E-4	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999924931768677	WITHOUT_CLASSIFICATION	7.506823132372073E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998611278173141	WITHOUT_CLASSIFICATION	1.388721826860276E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999976962291084	WITHOUT_CLASSIFICATION	2.30377089159729E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999483374114249	WITHOUT_CLASSIFICATION	5.166258857521096E-5	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999546806859189	WITHOUT_CLASSIFICATION	4.531931408102143E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9992360062282591	WITHOUT_CLASSIFICATION	7.639937717409135E-4	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999985226434309	WITHOUT_CLASSIFICATION	1.4773565690635973E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998405517660657	WITHOUT_CLASSIFICATION	1.594482339344164E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999840153807327	WITHOUT_CLASSIFICATION	1.5984619267277267E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998850842342565	WITHOUT_CLASSIFICATION	1.1491576574351782E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999609515753619	WITHOUT_CLASSIFICATION	3.904842463807967E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999594133943644	WITHOUT_CLASSIFICATION	4.05866056355005E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9569356573051719	WITHOUT_CLASSIFICATION	0.04306434269482797	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999856179225558	WITHOUT_CLASSIFICATION	1.4382077444236913E-5	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999991381524789	WITHOUT_CLASSIFICATION	8.618475210463134E-7	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.999995754409662	WITHOUT_CLASSIFICATION	4.245590337924274E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999948859079011	WITHOUT_CLASSIFICATION	5.114092098915432E-6	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999976876079739	WITHOUT_CLASSIFICATION	2.3123920260460042E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999878430620962	WITHOUT_CLASSIFICATION	1.2156937903773004E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9998159222946299	WITHOUT_CLASSIFICATION	1.8407770537007959E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999530111162618	WITHOUT_CLASSIFICATION	4.698888373818804E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999993798399495	WITHOUT_CLASSIFICATION	6.201600504578959E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999786834236974	WITHOUT_CLASSIFICATION	2.131657630257298E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999931306342823	WITHOUT_CLASSIFICATION	6.869365717789037E-6	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999897027327262	WITHOUT_CLASSIFICATION	1.0297267273702105E-5	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.99981145796269	WITHOUT_CLASSIFICATION	1.8854203731006908E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999759656779759	WITHOUT_CLASSIFICATION	2.4034322024136646E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999513732068183	WITHOUT_CLASSIFICATION	4.8626793181707176E-5	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999918241859611	WITHOUT_CLASSIFICATION	8.175814038977033E-6	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999048016740731	WITHOUT_CLASSIFICATION	9.519832592683674E-5	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999829096426435	WITHOUT_CLASSIFICATION	1.7090357356540485E-5	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999828714036126	WITHOUT_CLASSIFICATION	1.7128596387346896E-5	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999976962291084	WITHOUT_CLASSIFICATION	2.30377089159729E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999670600624061	WITHOUT_CLASSIFICATION	3.293993759392895E-5	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999163726609059	WITHOUT_CLASSIFICATION	8.362733909403463E-5	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9974402015898132	WITHOUT_CLASSIFICATION	0.0025597984101869177	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.958128505024123	WITHOUT_CLASSIFICATION	0.041871494975877166	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999529655172728	WITHOUT_CLASSIFICATION	4.7034482727315054E-5	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999530708629687	WITHOUT_CLASSIFICATION	4.692913703127696E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999531177908967	WITHOUT_CLASSIFICATION	4.6882209103404354E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999670600624061	WITHOUT_CLASSIFICATION	3.293993759392895E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999365009290367	WITHOUT_CLASSIFICATION	6.349907096318781E-5	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999786834236974	WITHOUT_CLASSIFICATION	2.131657630257298E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998873272660365	WITHOUT_CLASSIFICATION	1.1267273396360868E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999993798399495	WITHOUT_CLASSIFICATION	6.201600504578959E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999831488120359	WITHOUT_CLASSIFICATION	1.6851187964152288E-5	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9994520073340877	WITHOUT_CLASSIFICATION	5.479926659123191E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999962986217313	WITHOUT_CLASSIFICATION	3.7013782685910437E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999840153807327	WITHOUT_CLASSIFICATION	1.5984619267277267E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998850842342565	WITHOUT_CLASSIFICATION	1.1491576574351782E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999609515753619	WITHOUT_CLASSIFICATION	3.904842463807967E-5	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999394891557443	WITHOUT_CLASSIFICATION	6.051084425584661E-5	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9995662895181466	WITHOUT_CLASSIFICATION	4.337104818533079E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999164650410323	WITHOUT_CLASSIFICATION	8.353495896762589E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999993798399495	WITHOUT_CLASSIFICATION	6.201600504578959E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999831488120359	WITHOUT_CLASSIFICATION	1.6851187964152288E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999670600624061	WITHOUT_CLASSIFICATION	3.293993759392895E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999594133943644	WITHOUT_CLASSIFICATION	4.05866056355005E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9569356573051719	WITHOUT_CLASSIFICATION	0.04306434269482797	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999856179225558	WITHOUT_CLASSIFICATION	1.4382077444236913E-5	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680176463555	WITHOUT_CLASSIFICATION	3.1982353644479863E-5	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999103371901469	WITHOUT_CLASSIFICATION	8.966280985322397E-5	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999978433679951	WITHOUT_CLASSIFICATION	2.1566320049005974E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999960905800808	WITHOUT_CLASSIFICATION	3.909419919224266E-6	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9990433920402706	WITHOUT_CLASSIFICATION	9.566079597293211E-4	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999991897054872	WITHOUT_CLASSIFICATION	8.102945128258286E-7	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999671571357585	WITHOUT_CLASSIFICATION	3.284286424163119E-5	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999677210842065	WITHOUT_CLASSIFICATION	3.227891579350323E-5	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998975582559154	WITHOUT_CLASSIFICATION	1.0244174408461843E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988062326443716	WITHOUT_CLASSIFICATION	0.0011937673556283925	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999195867242927	WITHOUT_CLASSIFICATION	8.041327570731183E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998929533790545	WITHOUT_CLASSIFICATION	1.070466209454808E-4	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999802874258348	WITHOUT_CLASSIFICATION	1.9712574165230355E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988625607209491	WITHOUT_CLASSIFICATION	0.0011374392790509241	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9905858322295836	WITHOUT_CLASSIFICATION	0.009414167770416362	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999499474239234	WITHOUT_CLASSIFICATION	5.0052576076671034E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982376056290655	WITHOUT_CLASSIFICATION	0.001762394370934536	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987655388642308	WITHOUT_CLASSIFICATION	0.001234461135769146	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999710440105916	WITHOUT_CLASSIFICATION	2.8955989408508153E-5	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999867062745096	WITHOUT_CLASSIFICATION	1.3293725490395228E-5	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999983224552617	WITHOUT_CLASSIFICATION	1.677544738384022E-6	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999910428608333	WITHOUT_CLASSIFICATION	8.957139166746812E-6	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999796673577835	WITHOUT_CLASSIFICATION	2.0332642216493887E-5	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997218960981	WITHOUT_CLASSIFICATION	2.781039018643181E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999416670245035	WITHOUT_CLASSIFICATION	5.833297549641493E-5	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999861779187968	WITHOUT_CLASSIFICATION	1.382208120312572E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999946868608026	WITHOUT_CLASSIFICATION	5.3131391974038246E-5	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996034752934498	WITHOUT_CLASSIFICATION	3.9652470655015523E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998148756188079	WITHOUT_CLASSIFICATION	1.851243811920715E-4	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999798706167492	WITHOUT_CLASSIFICATION	2.0129383250785925E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999853883662769	WITHOUT_CLASSIFICATION	1.461163372310329E-5	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999897819270299	WITHOUT_CLASSIFICATION	1.0218072970035028E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999498477870411	WITHOUT_CLASSIFICATION	5.015221295892848E-5	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999433024539623	WITHOUT_CLASSIFICATION	5.669754603775082E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999096330134996	WITHOUT_CLASSIFICATION	9.036698650043061E-5	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999908839924322	WITHOUT_CLASSIFICATION	9.11600756781439E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9992264814526485	WITHOUT_CLASSIFICATION	7.735185473514925E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999882205059166	WITHOUT_CLASSIFICATION	1.177949408339901E-4	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999910959618764	WITHOUT_CLASSIFICATION	8.904038123654757E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999856764454355	WITHOUT_CLASSIFICATION	1.4323554564667488E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999928872887403	WITHOUT_CLASSIFICATION	7.112711259700027E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999804484361435	WITHOUT_CLASSIFICATION	1.955156385652165E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996904547165462	WITHOUT_CLASSIFICATION	3.095452834538609E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999940399389574	WITHOUT_CLASSIFICATION	5.9600610425921E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999928872887403	WITHOUT_CLASSIFICATION	7.112711259700027E-5	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999983936769197	WITHOUT_CLASSIFICATION	1.606323080258756E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999963536453904	WITHOUT_CLASSIFICATION	3.6463546096383705E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999605236693442	WITHOUT_CLASSIFICATION	3.947633065579417E-4	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999981398152303	WITHOUT_CLASSIFICATION	1.8601847697013703E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999847879728745	WITHOUT_CLASSIFICATION	1.5212027125435759E-5	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999500969287894	WITHOUT_CLASSIFICATION	4.990307121061692E-5	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999748760573874	WITHOUT_CLASSIFICATION	2.512394261250912E-5	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999502425278995	WITHOUT_CLASSIFICATION	4.975747210036575E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999502425278995	WITHOUT_CLASSIFICATION	4.975747210036575E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999952522272938	WITHOUT_CLASSIFICATION	4.747772706225901E-6	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999608300877291	WITHOUT_CLASSIFICATION	3.916991227097994E-5	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999214575997393	WITHOUT_CLASSIFICATION	7.854240026070287E-5	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999757009754896	WITHOUT_CLASSIFICATION	2.4299024510422465E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999999974712675	WITHOUT_CLASSIFICATION	2.528732493099348E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998271987926808	WITHOUT_CLASSIFICATION	1.7280120731915958E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999992760946654	WITHOUT_CLASSIFICATION	7.239053347038338E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999982900036021	WITHOUT_CLASSIFICATION	1.709996397837148E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999968683690205	WITHOUT_CLASSIFICATION	3.131630979508474E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999795891934182	WITHOUT_CLASSIFICATION	2.041080658176347E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999455904874635	WITHOUT_CLASSIFICATION	5.4409512536619015E-5	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999782535668631	WITHOUT_CLASSIFICATION	2.1746433136945156E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997407892746545	WITHOUT_CLASSIFICATION	2.592107253454426E-4	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9708865266288363	WITHOUT_CLASSIFICATION	0.02911347337116361	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.99974764384062	WITHOUT_CLASSIFICATION	2.523561593800152E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999904134454912	WITHOUT_CLASSIFICATION	9.586554508798354E-5	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999745080039797	WITHOUT_CLASSIFICATION	2.5491996020283442E-5	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998045293708475	WITHOUT_CLASSIFICATION	1.9547062915241373E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9994744126319987	WITHOUT_CLASSIFICATION	5.255873680012612E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999688406006064	WITHOUT_CLASSIFICATION	3.115939939348645E-5	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999909189917314	WITHOUT_CLASSIFICATION	9.081008268544103E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999729976873156	WITHOUT_CLASSIFICATION	2.700231268431492E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9898248101031929	WITHOUT_CLASSIFICATION	0.01017518989680724	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999996255973849	WITHOUT_CLASSIFICATION	3.7440261511158137E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999901348517708	WITHOUT_CLASSIFICATION	9.865148229136017E-6	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9998091960110078	WITHOUT_CLASSIFICATION	1.9080398899226704E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9993449075022002	WITHOUT_CLASSIFICATION	6.550924977998766E-4	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9998162392831016	WITHOUT_CLASSIFICATION	1.8376071689835062E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9802727370226908	WITHOUT_CLASSIFICATION	0.019727262977309167	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998639557689373	WITHOUT_CLASSIFICATION	1.3604423106264933E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999880640586706	WITHOUT_CLASSIFICATION	1.193594132956922E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999859746953391	WITHOUT_CLASSIFICATION	1.402530466092666E-5	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999949463797158	WITHOUT_CLASSIFICATION	5.0536202842521775E-6	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.999990539207873	WITHOUT_CLASSIFICATION	9.460792127145098E-6	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999797711202404	WITHOUT_CLASSIFICATION	2.0228879759688693E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999531313255139	WITHOUT_CLASSIFICATION	4.6868674486187164E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9966802981229296	WITHOUT_CLASSIFICATION	0.003319701877070457	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9979270666386066	WITHOUT_CLASSIFICATION	0.0020729333613933435	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999760607418751	WITHOUT_CLASSIFICATION	2.393925812498159E-5	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999634549592654	WITHOUT_CLASSIFICATION	3.6545040734458426E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999919437671841	WITHOUT_CLASSIFICATION	8.056232815899879E-5	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999948859079011	WITHOUT_CLASSIFICATION	5.114092098915432E-6	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999948859079011	WITHOUT_CLASSIFICATION	5.114092098915432E-6	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999977943037822	WITHOUT_CLASSIFICATION	2.205696217806411E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999993806349825	WITHOUT_CLASSIFICATION	6.193650175578987E-7	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999902562829939	WITHOUT_CLASSIFICATION	9.743717006162564E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999991223583317	WITHOUT_CLASSIFICATION	8.77641668366877E-7	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999904214026212	WITHOUT_CLASSIFICATION	9.578597378717935E-6	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.999835803976574	WITHOUT_CLASSIFICATION	1.6419602342600785E-4	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999541309786876	WITHOUT_CLASSIFICATION	4.5869021312395876E-5	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999804833429318	WITHOUT_CLASSIFICATION	1.951665706826016E-5	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999994976771426	WITHOUT_CLASSIFICATION	5.023228573982471E-7	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9996300136005919	WITHOUT_CLASSIFICATION	3.6998639940810467E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999864168457193	WITHOUT_CLASSIFICATION	1.3583154280666037E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999977979094338	WITHOUT_CLASSIFICATION	2.202090566237733E-6	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998568559974171	WITHOUT_CLASSIFICATION	1.4314400258289505E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999486239720775	WITHOUT_CLASSIFICATION	5.1376027922424366E-5	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999556369813535	WITHOUT_CLASSIFICATION	4.436301864639218E-5	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999911341093318	WITHOUT_CLASSIFICATION	8.865890668213754E-6	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999762594012213	WITHOUT_CLASSIFICATION	2.3740598778863643E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9998396234653647	WITHOUT_CLASSIFICATION	1.6037653463533866E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9994515288829375	WITHOUT_CLASSIFICATION	5.484711170624845E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999787902217342	WITHOUT_CLASSIFICATION	2.1209778265830545E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9995170744032305	WITHOUT_CLASSIFICATION	4.829255967695315E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999999022554686	WITHOUT_CLASSIFICATION	9.774453139995212E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999787902217342	WITHOUT_CLASSIFICATION	2.1209778265830545E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999908463125643	WITHOUT_CLASSIFICATION	9.153687435710968E-6	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999956926943343	WITHOUT_CLASSIFICATION	4.307305665615934E-6	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998814686019958	WITHOUT_CLASSIFICATION	1.1853139800426634E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999181869900802	WITHOUT_CLASSIFICATION	8.181300991982378E-5	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9997841064704064	WITHOUT_CLASSIFICATION	2.158935295936498E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999982846664003	WITHOUT_CLASSIFICATION	1.7153335997245324E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999948803601277	WITHOUT_CLASSIFICATION	5.1196398722994274E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999691284540104	WITHOUT_CLASSIFICATION	3.0871545989640784E-5	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998069806791785	WITHOUT_CLASSIFICATION	1.9301932082156135E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999495314876308	WITHOUT_CLASSIFICATION	5.046851236930317E-5	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999999652559296	WITHOUT_CLASSIFICATION	3.474407039175565E-7	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999919112971366	WITHOUT_CLASSIFICATION	8.088702863360618E-6	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999183551607506	WITHOUT_CLASSIFICATION	8.164483924940607E-5	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999751230989138	WITHOUT_CLASSIFICATION	2.487690108627037E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9986846924777578	WITHOUT_CLASSIFICATION	0.001315307522242129	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999958939657219	WITHOUT_CLASSIFICATION	4.106034278185953E-6	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9983701684789376	WITHOUT_CLASSIFICATION	0.0016298315210624822	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999544259874462	WITHOUT_CLASSIFICATION	4.5574012553731344E-5	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999657780509269	WITHOUT_CLASSIFICATION	3.422194907310013E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999076442699313	WITHOUT_CLASSIFICATION	9.235573006873598E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998039316120492	WITHOUT_CLASSIFICATION	1.9606838795080132E-4	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999105415886314	WITHOUT_CLASSIFICATION	8.945841136860595E-5	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999987362460983	WITHOUT_CLASSIFICATION	1.2637539017065761E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999800145704625	WITHOUT_CLASSIFICATION	1.99854295374987E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9984594611910308	WITHOUT_CLASSIFICATION	0.0015405388089692515	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.5246850456579041	WITHOUT_CLASSIFICATION	0.4753149543420959	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999872728698367	WITHOUT_CLASSIFICATION	1.272713016330736E-4	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9992134260569066	WITHOUT_CLASSIFICATION	7.865739430935126E-4	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999748774498242	WITHOUT_CLASSIFICATION	2.5122550175796832E-5	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999588575635935	WITHOUT_CLASSIFICATION	4.114243640651377E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999498477870411	WITHOUT_CLASSIFICATION	5.015221295892848E-5	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997689977220418	WITHOUT_CLASSIFICATION	2.3100227795827725E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999995878624244	WITHOUT_CLASSIFICATION	4.121375755968939E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9986082801700314	WITHOUT_CLASSIFICATION	0.0013917198299684872	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999935099325374	WITHOUT_CLASSIFICATION	6.490067462602902E-6	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999955422169207	WITHOUT_CLASSIFICATION	4.457783079331677E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999355872336121	WITHOUT_CLASSIFICATION	6.441276638784328E-5	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9931586514899039	WITHOUT_CLASSIFICATION	0.006841348510096055	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999979027039124	WITHOUT_CLASSIFICATION	2.0972960876013656E-6	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999754891795706	WITHOUT_CLASSIFICATION	2.451082042947645E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999959767786541	WITHOUT_CLASSIFICATION	4.023221345897374E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999986401189171	WITHOUT_CLASSIFICATION	1.3598810828933109E-6	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9997325560675134	WITHOUT_CLASSIFICATION	2.674439324866112E-4	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9990928810618666	WITHOUT_CLASSIFICATION	9.071189381334644E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999632013487568	WITHOUT_CLASSIFICATION	3.679865124312176E-5	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999926470319978	WITHOUT_CLASSIFICATION	7.352968002298529E-6	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999871530745146	WITHOUT_CLASSIFICATION	1.2846925485394885E-4	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999979224770337	WITHOUT_CLASSIFICATION	2.0775229662789166E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999234130190066	WITHOUT_CLASSIFICATION	7.658698099345956E-5	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997973048232	WITHOUT_CLASSIFICATION	2.0269517684644517E-7	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999912361055514	WITHOUT_CLASSIFICATION	8.763894448663714E-6	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999924796413978	WITHOUT_CLASSIFICATION	7.520358602196621E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999524280957569	WITHOUT_CLASSIFICATION	4.7571904243029475E-5	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998443384226023	WITHOUT_CLASSIFICATION	1.5566157739766836E-4	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9997626334357583	WITHOUT_CLASSIFICATION	2.37366564241669E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999229956850223	WITHOUT_CLASSIFICATION	7.700431497776855E-5	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9998587322182375	WITHOUT_CLASSIFICATION	1.4126778176246852E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999994951391417	WITHOUT_CLASSIFICATION	5.048608582716296E-7	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9974686391508196	WITHOUT_CLASSIFICATION	0.0025313608491802906	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9984012324974659	WITHOUT_CLASSIFICATION	0.001598767502534014	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999665788657474	WITHOUT_CLASSIFICATION	3.342113425273891E-5	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999023240836065	WITHOUT_CLASSIFICATION	9.767591639359031E-5	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731832322498	WITHOUT_CLASSIFICATION	2.681676775011301E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999921976573612	WITHOUT_CLASSIFICATION	7.802342638871209E-6	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99997824376817	WITHOUT_CLASSIFICATION	2.1756231829959363E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999969626285731	WITHOUT_CLASSIFICATION	3.0373714270352634E-6	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9985884259206673	WITHOUT_CLASSIFICATION	0.0014115740793326614	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.999922779246628	WITHOUT_CLASSIFICATION	7.722075337196949E-5	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510046061724	WITHOUT_CLASSIFICATION	4.899539382777765E-5	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.999922779246628	WITHOUT_CLASSIFICATION	7.722075337196949E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998958443434531	WITHOUT_CLASSIFICATION	1.0415565654690551E-4	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999891544276379	WITHOUT_CLASSIFICATION	1.084557236210712E-5	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999964081473891	WITHOUT_CLASSIFICATION	3.5918526108400052E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999913366526343	WITHOUT_CLASSIFICATION	8.663347365740979E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999870965435309	WITHOUT_CLASSIFICATION	1.290345646919385E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999701452608538	WITHOUT_CLASSIFICATION	2.985473914612919E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999680732951998	WITHOUT_CLASSIFICATION	3.192670480029913E-5	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999829322840051	WITHOUT_CLASSIFICATION	1.706771599478221E-5	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.999890237959896	WITHOUT_CLASSIFICATION	1.0976204010398926E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9328199673988254	WITHOUT_CLASSIFICATION	0.06718003260117456	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.999780503932006	WITHOUT_CLASSIFICATION	2.1949606799411973E-4	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9996609215006176	WITHOUT_CLASSIFICATION	3.3907849938240786E-4	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999883562255966	WITHOUT_CLASSIFICATION	1.1643774403453706E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999828935083298	WITHOUT_CLASSIFICATION	1.710649167026403E-5	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9982259062537439	WITHOUT_CLASSIFICATION	0.001774093746256178	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998065151554235	WITHOUT_CLASSIFICATION	1.9348484457647872E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999928667568644	WITHOUT_CLASSIFICATION	7.133243135654952E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999928667568644	WITHOUT_CLASSIFICATION	7.133243135654952E-6	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999665816264235	WITHOUT_CLASSIFICATION	3.341837357657541E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998643304717241	WITHOUT_CLASSIFICATION	1.3566952827599128E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999187896236	WITHOUT_CLASSIFICATION	8.121037644775366E-8	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999981720513763	WITHOUT_CLASSIFICATION	1.8279486236944645E-5	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999970743264971	WITHOUT_CLASSIFICATION	2.9256735028716007E-6	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999965626329327	WITHOUT_CLASSIFICATION	3.4373670673120795E-6	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9995860518249853	WITHOUT_CLASSIFICATION	4.139481750147387E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999934352181367	WITHOUT_CLASSIFICATION	6.564781863319478E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9998712225324651	WITHOUT_CLASSIFICATION	1.2877746753484868E-4	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999981526566724	WITHOUT_CLASSIFICATION	1.847343327629069E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999986626290757	WITHOUT_CLASSIFICATION	1.337370924382378E-6	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9996803679906909	WITHOUT_CLASSIFICATION	3.196320093091291E-4	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999676813598781	WITHOUT_CLASSIFICATION	3.231864012196659E-5	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999977252995575	WITHOUT_CLASSIFICATION	2.2747004423945947E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999448873232853	WITHOUT_CLASSIFICATION	5.511267671456455E-5	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999059321246391	WITHOUT_CLASSIFICATION	9.40678753608177E-5	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999930744969776	WITHOUT_CLASSIFICATION	6.925503022316193E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9994343099614545	WITHOUT_CLASSIFICATION	5.656900385454187E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.999910617396916	WITHOUT_CLASSIFICATION	8.938260308400088E-5	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999993442047813	WITHOUT_CLASSIFICATION	6.557952187164911E-7	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999949581257602	WITHOUT_CLASSIFICATION	5.041874239704775E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9991022461106749	WITHOUT_CLASSIFICATION	8.977538893251877E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9991957154395323	WITHOUT_CLASSIFICATION	8.042845604677433E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9619349844461583	WITHOUT_CLASSIFICATION	0.038065015553841675	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999967328852839	WITHOUT_CLASSIFICATION	3.2671147161451086E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999995829237999	WITHOUT_CLASSIFICATION	4.170762001881848E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999856731091332	WITHOUT_CLASSIFICATION	1.4326890866763097E-5	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998747088520868	WITHOUT_CLASSIFICATION	1.2529114791314156E-4	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999853088153093	WITHOUT_CLASSIFICATION	1.4691184690642088E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999998657193546	WITHOUT_CLASSIFICATION	1.3428064540801664E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999969310621438	WITHOUT_CLASSIFICATION	3.068937856188987E-6	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999991573471224	WITHOUT_CLASSIFICATION	8.426528775587363E-7	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999086390502763	WITHOUT_CLASSIFICATION	9.136094972366356E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9974372415166218	WITHOUT_CLASSIFICATION	0.0025627584833781206	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999233071267837	WITHOUT_CLASSIFICATION	7.669287321626305E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999964086302054	WITHOUT_CLASSIFICATION	3.591369794499724E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999770060808997	WITHOUT_CLASSIFICATION	2.2993919100345275E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999967467543316	WITHOUT_CLASSIFICATION	3.2532456683676594E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999999251550635	WITHOUT_CLASSIFICATION	7.484493650935525E-7	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995285362686995	WITHOUT_CLASSIFICATION	4.7146373130058924E-4	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999853873634532	WITHOUT_CLASSIFICATION	1.461263654682536E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562178903209	WITHOUT_CLASSIFICATION	4.3782109679185136E-5	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9996930105454679	WITHOUT_CLASSIFICATION	3.0698945453208826E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9657545582457833	WITHOUT_CLASSIFICATION	0.03424544175421668	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9992060994733769	WITHOUT_CLASSIFICATION	7.939005266231178E-4	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999795297514142	WITHOUT_CLASSIFICATION	2.0470248585780296E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999854224137333	WITHOUT_CLASSIFICATION	1.4577586266607321E-5	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999769783743	WITHOUT_CLASSIFICATION	2.3021625700563235E-7	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999365236159209	WITHOUT_CLASSIFICATION	6.34763840791964E-5	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999983799644523	WITHOUT_CLASSIFICATION	1.620035547697602E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562178903209	WITHOUT_CLASSIFICATION	4.3782109679185136E-5	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999968022730331	WITHOUT_CLASSIFICATION	3.197726966856405E-6	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999978688932152	WITHOUT_CLASSIFICATION	2.1311067848328895E-6	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9989204217858093	WITHOUT_CLASSIFICATION	0.0010795782141907002	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999875386853265	WITHOUT_CLASSIFICATION	1.2461314673545148E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999365009290367	WITHOUT_CLASSIFICATION	6.349907096318781E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999365009290367	WITHOUT_CLASSIFICATION	6.349907096318781E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997226678812	WITHOUT_CLASSIFICATION	2.773321188376473E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999993866343143	WITHOUT_CLASSIFICATION	6.133656857072737E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999995898607262	WITHOUT_CLASSIFICATION	4.1013927367537246E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999681873446168	WITHOUT_CLASSIFICATION	3.181265538324241E-5	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9997167824045234	WITHOUT_CLASSIFICATION	2.8321759547651575E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998368244154676	WITHOUT_CLASSIFICATION	1.631755845323676E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999563080819689	WITHOUT_CLASSIFICATION	4.369191803114599E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999620490774987	WITHOUT_CLASSIFICATION	3.7950922501256496E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999939305261807	WITHOUT_CLASSIFICATION	6.0694738193968435E-6	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999794094481027	WITHOUT_CLASSIFICATION	2.0590551897276487E-5	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999919311474105	WITHOUT_CLASSIFICATION	8.068852589615144E-6	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999989842664636	WITHOUT_CLASSIFICATION	1.0157335363883836E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999437601648737	WITHOUT_CLASSIFICATION	5.623983512617998E-5	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999628325860037	WITHOUT_CLASSIFICATION	3.7167413996289316E-5	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999843799672439	WITHOUT_CLASSIFICATION	1.5620032756113105E-4	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996559007034321	WITHOUT_CLASSIFICATION	3.440992965679423E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9926941763581317	WITHOUT_CLASSIFICATION	0.007305823641868267	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999996113590136	WITHOUT_CLASSIFICATION	3.886409863636363E-7	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.999965835031851	WITHOUT_CLASSIFICATION	3.416496814899504E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9998932984272402	WITHOUT_CLASSIFICATION	1.0670157275981681E-4	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999529640815603	WITHOUT_CLASSIFICATION	4.703591843970014E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998500545282093	WITHOUT_CLASSIFICATION	1.4994547179064143E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999957248294249	WITHOUT_CLASSIFICATION	4.275170575104727E-6	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9937241875417824	WITHOUT_CLASSIFICATION	0.006275812458217579	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9977104785401919	WITHOUT_CLASSIFICATION	0.00228952145980816	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999656727334477	WITHOUT_CLASSIFICATION	3.4327266552240355E-5	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999825274913893	WITHOUT_CLASSIFICATION	1.7472508610720778E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998299991889857	WITHOUT_CLASSIFICATION	1.7000081101422514E-4	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999999905572212	WITHOUT_CLASSIFICATION	9.442778797520152E-8	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999685090162529	WITHOUT_CLASSIFICATION	3.149098374698719E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997062190457	WITHOUT_CLASSIFICATION	2.93780954362255E-7	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999461181601	WITHOUT_CLASSIFICATION	5.388183987366465E-8	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9996785865644625	WITHOUT_CLASSIFICATION	3.2141343553748313E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999997056415111	WITHOUT_CLASSIFICATION	2.9435848894748107E-7	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9984409563846764	WITHOUT_CLASSIFICATION	0.0015590436153234718	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999685090162529	WITHOUT_CLASSIFICATION	3.149098374698719E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999984239957109	WITHOUT_CLASSIFICATION	1.576004289111258E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999997056415111	WITHOUT_CLASSIFICATION	2.9435848894748107E-7	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999944568472879	WITHOUT_CLASSIFICATION	5.543152712067398E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996059440067585	WITHOUT_CLASSIFICATION	3.9405599324143065E-4	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999986626290757	WITHOUT_CLASSIFICATION	1.337370924382378E-6	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999923864459366	WITHOUT_CLASSIFICATION	7.6135540634138935E-6	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999416670245035	WITHOUT_CLASSIFICATION	5.833297549641493E-5	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999827810481	WITHOUT_CLASSIFICATION	1.7218951903124126E-7	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999991097297246	WITHOUT_CLASSIFICATION	8.9027027540938E-6	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999653031972	WITHOUT_CLASSIFICATION	3.4696802792320903E-7	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999973142797004	WITHOUT_CLASSIFICATION	2.6857202996254297E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999727551476784	WITHOUT_CLASSIFICATION	2.7244852321739095E-5	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999951523716608	WITHOUT_CLASSIFICATION	4.847628339105284E-6	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999975801103766	WITHOUT_CLASSIFICATION	2.419889623384742E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999356552348087	WITHOUT_CLASSIFICATION	6.434476519140617E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999876502583773	WITHOUT_CLASSIFICATION	1.2349741622551502E-5	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9997519112531652	WITHOUT_CLASSIFICATION	2.480887468348365E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999400273135077	WITHOUT_CLASSIFICATION	5.9972686492324197E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9998581412299359	WITHOUT_CLASSIFICATION	1.418587700642352E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999716253706561	WITHOUT_CLASSIFICATION	2.837462934393848E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999386134669132	WITHOUT_CLASSIFICATION	6.138653308676459E-5	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999864258029577	WITHOUT_CLASSIFICATION	1.3574197042175186E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999917424116406	WITHOUT_CLASSIFICATION	8.257588359308783E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999490233546189	WITHOUT_CLASSIFICATION	5.097664538122132E-5	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9997890248393535	WITHOUT_CLASSIFICATION	2.1097516064643183E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999855081503326	WITHOUT_CLASSIFICATION	1.4491849667515405E-5	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999975231076363	WITHOUT_CLASSIFICATION	2.4768923637599803E-6	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999785175169927	WITHOUT_CLASSIFICATION	2.1482483007269274E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999311498031301	WITHOUT_CLASSIFICATION	6.885019686994249E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999772998121795	WITHOUT_CLASSIFICATION	2.2700187820452502E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986742360354155	WITHOUT_CLASSIFICATION	0.0013257639645845134	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994533423976348	WITHOUT_CLASSIFICATION	5.466576023652006E-4	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999856839924434	WITHOUT_CLASSIFICATION	1.4316007556600937E-4	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9992378647759738	WITHOUT_CLASSIFICATION	7.621352240263122E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999933508825707	WITHOUT_CLASSIFICATION	6.649117429276623E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999696264784351	WITHOUT_CLASSIFICATION	3.037352156483668E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999696264784351	WITHOUT_CLASSIFICATION	3.037352156483668E-5	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999882664754266	WITHOUT_CLASSIFICATION	1.1733524573433695E-5	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997035616051875	WITHOUT_CLASSIFICATION	2.9643839481257765E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999973170999629	WITHOUT_CLASSIFICATION	2.682900037101907E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999862027041412	WITHOUT_CLASSIFICATION	1.3797295858827524E-5	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9869382027161654	WITHOUT_CLASSIFICATION	0.013061797283834527	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998890912814997	WITHOUT_CLASSIFICATION	1.1090871850031399E-4	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999995589585623	WITHOUT_CLASSIFICATION	4.410414376588963E-7	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999858181801106	WITHOUT_CLASSIFICATION	1.4181819889382506E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999734025496786	WITHOUT_CLASSIFICATION	2.6597450321302803E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999942378099531	WITHOUT_CLASSIFICATION	5.762190046926446E-6	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999466157080481	WITHOUT_CLASSIFICATION	5.3384291951922804E-5	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999977866565072	WITHOUT_CLASSIFICATION	2.2133434928748206E-6	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999857362646036	WITHOUT_CLASSIFICATION	1.4263735396372755E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999696264784351	WITHOUT_CLASSIFICATION	3.037352156483668E-5	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999952903145704	WITHOUT_CLASSIFICATION	4.709685429641733E-6	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999601728384342	WITHOUT_CLASSIFICATION	3.9827161565904213E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999967786753747	WITHOUT_CLASSIFICATION	3.2213246252858607E-6	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999494059701799	WITHOUT_CLASSIFICATION	5.0594029820133684E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999990727877528	WITHOUT_CLASSIFICATION	9.272122473231643E-7	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998808638885586	WITHOUT_CLASSIFICATION	1.1913611144145927E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999964017380197	WITHOUT_CLASSIFICATION	3.5982619803051556E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999847104197539	WITHOUT_CLASSIFICATION	1.5289580246124073E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999884861826631	WITHOUT_CLASSIFICATION	1.1513817336875562E-5	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999964072400964	WITHOUT_CLASSIFICATION	3.5927599036431687E-6	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999962670943917	WITHOUT_CLASSIFICATION	3.7329056083112046E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986742360354155	WITHOUT_CLASSIFICATION	0.0013257639645845134	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999696264784351	WITHOUT_CLASSIFICATION	3.037352156483668E-5	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999840103473279	WITHOUT_CLASSIFICATION	1.598965267215546E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9997319620487752	WITHOUT_CLASSIFICATION	2.680379512247636E-4	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999625373130479	WITHOUT_CLASSIFICATION	3.746268695222083E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9996456792199545	WITHOUT_CLASSIFICATION	3.5432078004543345E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999771014203324	WITHOUT_CLASSIFICATION	2.2898579667643052E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999517412315452	WITHOUT_CLASSIFICATION	4.8258768454723226E-5	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999832314973857	WITHOUT_CLASSIFICATION	1.6768502614297425E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999986836734476	WITHOUT_CLASSIFICATION	1.3163265524966865E-6	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999987546254743	WITHOUT_CLASSIFICATION	1.2453745258174836E-6	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998820190961449	WITHOUT_CLASSIFICATION	1.1798090385509058E-4	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995337823407114	WITHOUT_CLASSIFICATION	4.6621765928845E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999853088153093	WITHOUT_CLASSIFICATION	1.4691184690642088E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999867775895028	WITHOUT_CLASSIFICATION	1.3222410497256272E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999626365664307	WITHOUT_CLASSIFICATION	3.736343356931616E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998958443434531	WITHOUT_CLASSIFICATION	1.0415565654690551E-4	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999981152898618	WITHOUT_CLASSIFICATION	1.884710138118154E-6	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999933750116079	WITHOUT_CLASSIFICATION	6.6249883921481125E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999949408346066	WITHOUT_CLASSIFICATION	5.059165393342283E-6	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999634684218748	WITHOUT_CLASSIFICATION	3.653157812522515E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999507156799466	WITHOUT_CLASSIFICATION	4.928432005334815E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999790146308787	WITHOUT_CLASSIFICATION	2.0985369121327545E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999790146308787	WITHOUT_CLASSIFICATION	2.0985369121327545E-5	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999810311687062	WITHOUT_CLASSIFICATION	1.8968831293792734E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999953499305092	WITHOUT_CLASSIFICATION	4.650069490761663E-6	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999837335319143	WITHOUT_CLASSIFICATION	1.62664680857462E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999833244369696	WITHOUT_CLASSIFICATION	1.6675563030407238E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998574179966335	WITHOUT_CLASSIFICATION	1.4258200336643895E-4	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999641503906712	WITHOUT_CLASSIFICATION	3.58496093287784E-5	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9988890667604454	WITHOUT_CLASSIFICATION	0.0011109332395545135	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9896641409010808	WITHOUT_CLASSIFICATION	0.010335859098919174	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9896641409010808	WITHOUT_CLASSIFICATION	0.010335859098919174	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9233410338096818	WITHOUT_CLASSIFICATION	0.07665896619031823	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999578579080403	WITHOUT_CLASSIFICATION	4.214209195978861E-5	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999948172095268	WITHOUT_CLASSIFICATION	5.18279047324116E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999959725633775	WITHOUT_CLASSIFICATION	4.027436622507038E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999959725633775	WITHOUT_CLASSIFICATION	4.027436622507038E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999959725633775	WITHOUT_CLASSIFICATION	4.027436622507038E-5	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999642642869991	WITHOUT_CLASSIFICATION	3.573571300077692E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999818171555331	WITHOUT_CLASSIFICATION	1.818284446689041E-5	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9947511815637854	WITHOUT_CLASSIFICATION	0.005248818436214616	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999818918653192	WITHOUT_CLASSIFICATION	1.8108134680831805E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999946455357457	WITHOUT_CLASSIFICATION	5.354464254360918E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999696264784351	WITHOUT_CLASSIFICATION	3.037352156483668E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999696264784351	WITHOUT_CLASSIFICATION	3.037352156483668E-5	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9998400847527625	WITHOUT_CLASSIFICATION	1.5991524723741127E-4	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999985800206159	WITHOUT_CLASSIFICATION	1.4199793840430387E-6	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9991883378259998	WITHOUT_CLASSIFICATION	8.116621740000892E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998757688455504	WITHOUT_CLASSIFICATION	1.2423115444957578E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999928270849984	WITHOUT_CLASSIFICATION	7.1729150017008555E-6	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999423963798785	WITHOUT_CLASSIFICATION	5.760362012159981E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999866877254479	WITHOUT_CLASSIFICATION	1.3312274552229383E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999705152007766	WITHOUT_CLASSIFICATION	2.9484799223338248E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999961807172067	WITHOUT_CLASSIFICATION	3.819282793300437E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999987120123855	WITHOUT_CLASSIFICATION	1.2879876144287365E-6	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999907826709263	WITHOUT_CLASSIFICATION	9.217329073666782E-6	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999304006320251	WITHOUT_CLASSIFICATION	6.95993679749595E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999716987534886	WITHOUT_CLASSIFICATION	2.8301246511414196E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999716987534886	WITHOUT_CLASSIFICATION	2.8301246511414196E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999716987534886	WITHOUT_CLASSIFICATION	2.8301246511414196E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999716987534886	WITHOUT_CLASSIFICATION	2.8301246511414196E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999716987534886	WITHOUT_CLASSIFICATION	2.8301246511414196E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999700404529366	WITHOUT_CLASSIFICATION	2.9959547063391233E-5	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999700404529366	WITHOUT_CLASSIFICATION	2.9959547063391233E-5	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999700404529366	WITHOUT_CLASSIFICATION	2.9959547063391233E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999700404529366	WITHOUT_CLASSIFICATION	2.9959547063391233E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998387968603023	WITHOUT_CLASSIFICATION	1.6120313969773733E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999790146308787	WITHOUT_CLASSIFICATION	2.0985369121327545E-5	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9997295163070445	WITHOUT_CLASSIFICATION	2.7048369295552176E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999700404529366	WITHOUT_CLASSIFICATION	2.9959547063391233E-5	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999547159101598	WITHOUT_CLASSIFICATION	4.5284089840271875E-5	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999941020024729	WITHOUT_CLASSIFICATION	5.897997527110229E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999694085463351	WITHOUT_CLASSIFICATION	3.0591453664898344E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999783700313365	WITHOUT_CLASSIFICATION	2.1629968663506146E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999550404387	WITHOUT_CLASSIFICATION	4.495956126019326E-8	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999617188454115	WITHOUT_CLASSIFICATION	3.828115458839189E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999294144964638	WITHOUT_CLASSIFICATION	7.058550353623707E-5	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999923242001683	WITHOUT_CLASSIFICATION	7.675799831735862E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999936614654651	WITHOUT_CLASSIFICATION	6.338534534947689E-6	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999563949741	WITHOUT_CLASSIFICATION	4.360502601526226E-8	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999982596919275	WITHOUT_CLASSIFICATION	1.7403080725666351E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999723892401938	WITHOUT_CLASSIFICATION	2.761075980613389E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999567457852707	WITHOUT_CLASSIFICATION	4.325421472933186E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9997772866952519	WITHOUT_CLASSIFICATION	2.2271330474794046E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.865097570527333	IMPLEMENTATION	0.13490242947266687	WITHOUT_CLASSIFICATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999973881390574	WITHOUT_CLASSIFICATION	2.611860942610065E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999960238629156	WITHOUT_CLASSIFICATION	3.976137084377493E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999909850566975	WITHOUT_CLASSIFICATION	9.01494330258023E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999909850566975	WITHOUT_CLASSIFICATION	9.01494330258023E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999744534126719	WITHOUT_CLASSIFICATION	2.554658732806086E-5	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999973972915076	WITHOUT_CLASSIFICATION	2.6027084924166415E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999734095684231	WITHOUT_CLASSIFICATION	2.659043157694403E-5	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999331108363652	WITHOUT_CLASSIFICATION	6.688916363476065E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999720809713465	WITHOUT_CLASSIFICATION	2.791902865345453E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999592002975287	WITHOUT_CLASSIFICATION	4.079970247121573E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999719611070993	WITHOUT_CLASSIFICATION	2.803889290070795E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999968649716793	WITHOUT_CLASSIFICATION	3.13502832068512E-6	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999861169395284	WITHOUT_CLASSIFICATION	1.3883060471675089E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999989642742438	WITHOUT_CLASSIFICATION	1.0357257562365415E-6	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999192336197016	WITHOUT_CLASSIFICATION	8.076638029847627E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999853088153093	WITHOUT_CLASSIFICATION	1.4691184690642088E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999949559798562	WITHOUT_CLASSIFICATION	5.04402014386069E-6	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999986915151222	WITHOUT_CLASSIFICATION	1.3084848776807321E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999934114492394	WITHOUT_CLASSIFICATION	6.588550760647962E-6	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999931316241764	WITHOUT_CLASSIFICATION	6.868375823618307E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999948992163	WITHOUT_CLASSIFICATION	5.100783699419745E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999948992163	WITHOUT_CLASSIFICATION	5.100783699419745E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9987139668142776	WITHOUT_CLASSIFICATION	0.0012860331857223934	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999278010101	WITHOUT_CLASSIFICATION	7.219898994095314E-8	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.999995526370484	WITHOUT_CLASSIFICATION	4.473629516104695E-6	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999957382927092	WITHOUT_CLASSIFICATION	4.26170729076939E-6	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999882688300687	WITHOUT_CLASSIFICATION	1.1731169931284903E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999935305587537	WITHOUT_CLASSIFICATION	6.469441246190801E-6	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999244569186776	WITHOUT_CLASSIFICATION	7.554308132243353E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999986217767141	WITHOUT_CLASSIFICATION	1.378223285893321E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998962751132784	WITHOUT_CLASSIFICATION	1.0372488672171675E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999143089157	WITHOUT_CLASSIFICATION	8.569108431856415E-8	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999435895743873	WITHOUT_CLASSIFICATION	5.641042561268692E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999986217767141	WITHOUT_CLASSIFICATION	1.378223285893321E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999238111986208	WITHOUT_CLASSIFICATION	7.618880137916889E-5	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9987460125362166	WITHOUT_CLASSIFICATION	0.0012539874637833388	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999839311203418	WITHOUT_CLASSIFICATION	1.6068879658234786E-5	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999196704989917	WITHOUT_CLASSIFICATION	8.032950100831113E-5	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999894002451	WITHOUT_CLASSIFICATION	1.0599754787193861E-8	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999716247084639	WITHOUT_CLASSIFICATION	2.837529153602145E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9991997726963522	WITHOUT_CLASSIFICATION	8.002273036477896E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999902239677184	WITHOUT_CLASSIFICATION	9.776032281592834E-6	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999917033629628	WITHOUT_CLASSIFICATION	8.296637037164445E-6	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997895450898276	WITHOUT_CLASSIFICATION	2.104549101723872E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998009511103757	WITHOUT_CLASSIFICATION	1.9904888962428782E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999961008270404	WITHOUT_CLASSIFICATION	3.899172959581689E-6	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.99989501601715	WITHOUT_CLASSIFICATION	1.0498398284988948E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9997412143897664	WITHOUT_CLASSIFICATION	2.5878561023354006E-4	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998190225343042	WITHOUT_CLASSIFICATION	1.8097746569578925E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999936885470159	WITHOUT_CLASSIFICATION	6.311452984195083E-6	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999984016861828	WITHOUT_CLASSIFICATION	1.598313817201896E-5	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9908195391677558	WITHOUT_CLASSIFICATION	0.009180460832244258	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9908195391677558	WITHOUT_CLASSIFICATION	0.009180460832244258	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9991997726963522	WITHOUT_CLASSIFICATION	8.002273036477896E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9905175526841983	WITHOUT_CLASSIFICATION	0.009482447315801841	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999749793960722	WITHOUT_CLASSIFICATION	2.502060392791805E-5	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999944189437911	WITHOUT_CLASSIFICATION	5.581056208893493E-5	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.999951624215284	WITHOUT_CLASSIFICATION	4.837578471600267E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999987285949382	WITHOUT_CLASSIFICATION	1.2714050617951725E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999879242895403	WITHOUT_CLASSIFICATION	1.2075710459715817E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999903737961799	WITHOUT_CLASSIFICATION	9.626203820177025E-6	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998261582508087	WITHOUT_CLASSIFICATION	1.7384174919142563E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999652195141976	WITHOUT_CLASSIFICATION	3.4780485802442906E-5	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999499318890268	WITHOUT_CLASSIFICATION	5.0068110973224366E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999894518493834	WITHOUT_CLASSIFICATION	1.0548150616597393E-5	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999854926193253	WITHOUT_CLASSIFICATION	1.4507380674667038E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998705435080454	WITHOUT_CLASSIFICATION	1.2945649195455794E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999826328133476	WITHOUT_CLASSIFICATION	1.736718665235898E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998827040384908	WITHOUT_CLASSIFICATION	1.1729596150918673E-4	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999972258296371	WITHOUT_CLASSIFICATION	2.774170362798628E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999992186600812	WITHOUT_CLASSIFICATION	7.813399188279474E-7	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999961197978104	WITHOUT_CLASSIFICATION	3.880202189530884E-6	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999405898714098	WITHOUT_CLASSIFICATION	5.941012859027952E-5	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999527201723466	WITHOUT_CLASSIFICATION	4.727982765336444E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999874371362015	WITHOUT_CLASSIFICATION	1.256286379850639E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999982438652171	WITHOUT_CLASSIFICATION	1.7561347829516597E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9996679158375671	WITHOUT_CLASSIFICATION	3.320841624329253E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999970486944604	WITHOUT_CLASSIFICATION	2.951305539623409E-6	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999750298087124	WITHOUT_CLASSIFICATION	2.497019128764471E-5	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999932521639572	WITHOUT_CLASSIFICATION	6.7478360428276775E-6	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999914478430095	WITHOUT_CLASSIFICATION	8.55215699041243E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999952216012756	WITHOUT_CLASSIFICATION	4.7783987243735575E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999988291652269	WITHOUT_CLASSIFICATION	1.1708347732065324E-6	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998958867224622	WITHOUT_CLASSIFICATION	1.0411327753782891E-4	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998826880677816	WITHOUT_CLASSIFICATION	1.1731193221832248E-4	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999502970394969	WITHOUT_CLASSIFICATION	4.970296050313708E-5	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999283095393	WITHOUT_CLASSIFICATION	7.169046063109678E-8	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999958465999507	WITHOUT_CLASSIFICATION	4.1534000492738335E-6	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999778521524336	WITHOUT_CLASSIFICATION	2.214784756631969E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9992237784853086	WITHOUT_CLASSIFICATION	7.762215146914561E-4	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999987089344081	WITHOUT_CLASSIFICATION	1.2910655919476037E-6	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999849784738345	WITHOUT_CLASSIFICATION	1.5021526165498157E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999795642221906	WITHOUT_CLASSIFICATION	2.0435777809473388E-5	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9730912878448857	WITHOUT_CLASSIFICATION	0.026908712155114207	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9997440907476571	WITHOUT_CLASSIFICATION	2.559092523429749E-4	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999599396994707	WITHOUT_CLASSIFICATION	4.006030052937458E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999999771304103	WITHOUT_CLASSIFICATION	2.2869589693473079E-7	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9996851117479992	WITHOUT_CLASSIFICATION	3.148882520008458E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999831943979757	WITHOUT_CLASSIFICATION	1.6805602024366362E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999800140773384	WITHOUT_CLASSIFICATION	1.9985922661587045E-5	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9986570654585553	WITHOUT_CLASSIFICATION	0.0013429345414446496	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997534688397	WITHOUT_CLASSIFICATION	2.465311602550887E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999994130687114	WITHOUT_CLASSIFICATION	5.86931288619384E-7	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999101256903726	WITHOUT_CLASSIFICATION	8.9874309627397E-4	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999955960303083	WITHOUT_CLASSIFICATION	4.403969691712097E-6	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998962751132784	WITHOUT_CLASSIFICATION	1.0372488672171675E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999535839777298	WITHOUT_CLASSIFICATION	4.6416022270199584E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998827040384908	WITHOUT_CLASSIFICATION	1.1729596150918673E-4	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998802380148363	WITHOUT_CLASSIFICATION	1.1976198516369054E-4	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999968327570131	WITHOUT_CLASSIFICATION	3.167242986839584E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999903923717716	WITHOUT_CLASSIFICATION	9.607628228499212E-6	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999903279908489	WITHOUT_CLASSIFICATION	9.672009151072246E-6	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999704121194858	WITHOUT_CLASSIFICATION	2.958788051431409E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999740905382194	WITHOUT_CLASSIFICATION	2.590946178053867E-5	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9977711275158702	WITHOUT_CLASSIFICATION	0.002228872484129846	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999940613267259	WITHOUT_CLASSIFICATION	5.938673274248816E-6	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999934700861897	WITHOUT_CLASSIFICATION	6.52991381030785E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999870464032773	WITHOUT_CLASSIFICATION	1.2953596722688246E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9985085401091592	WITHOUT_CLASSIFICATION	0.0014914598908407945	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999700011326956	WITHOUT_CLASSIFICATION	2.9998867304378787E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9945946584761408	WITHOUT_CLASSIFICATION	0.005405341523859126	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9945946584761408	WITHOUT_CLASSIFICATION	0.005405341523859126	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998628309753	WITHOUT_CLASSIFICATION	1.3716902473457562E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9923697220117074	WITHOUT_CLASSIFICATION	0.007630277988292562	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.997339292211083	WITHOUT_CLASSIFICATION	0.002660707788917031	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999984760116826	WITHOUT_CLASSIFICATION	1.5239883174119778E-6	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999991261388467	WITHOUT_CLASSIFICATION	8.738611533454393E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999934374633173	WITHOUT_CLASSIFICATION	6.56253668269415E-5	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999995659578454	WITHOUT_CLASSIFICATION	4.340421545442713E-7	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999923859896319	WITHOUT_CLASSIFICATION	7.614010368187918E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999909237682151	WITHOUT_CLASSIFICATION	9.076231784954439E-6	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.999780371072651	WITHOUT_CLASSIFICATION	2.1962892734900385E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.999780371072651	WITHOUT_CLASSIFICATION	2.1962892734900385E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997675046074457	WITHOUT_CLASSIFICATION	2.3249539255432744E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.99999999565677	WITHOUT_CLASSIFICATION	4.3432300717774984E-9	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998555033624947	WITHOUT_CLASSIFICATION	1.4449663750517932E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999999686103375	WITHOUT_CLASSIFICATION	3.138966249898579E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999422906440966	WITHOUT_CLASSIFICATION	5.7709355903382536E-5	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999176980025843	WITHOUT_CLASSIFICATION	8.23019974156293E-5	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999993625640405	WITHOUT_CLASSIFICATION	6.374359594085063E-7	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999923422697654	WITHOUT_CLASSIFICATION	7.657730234567111E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999995968682496	WITHOUT_CLASSIFICATION	4.031317504238495E-7	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999978405871651	WITHOUT_CLASSIFICATION	2.159412834829921E-6	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999974946272576	WITHOUT_CLASSIFICATION	2.5053727424652894E-6	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999932919778938	WITHOUT_CLASSIFICATION	6.708022106286949E-6	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999499205789664	WITHOUT_CLASSIFICATION	5.0079421033599864E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999432754950957	WITHOUT_CLASSIFICATION	5.672450490430126E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522120166925	WITHOUT_CLASSIFICATION	4.7787983307555445E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999948556459115	WITHOUT_CLASSIFICATION	5.144354088478188E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999867094557243	WITHOUT_CLASSIFICATION	1.3290544275713452E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999852423360357	WITHOUT_CLASSIFICATION	1.4757663964273554E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999977080202576	WITHOUT_CLASSIFICATION	2.291979742426732E-6	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.999997677868387	WITHOUT_CLASSIFICATION	2.322131613097542E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999886871079143	WITHOUT_CLASSIFICATION	1.1312892085638378E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999838470675234	WITHOUT_CLASSIFICATION	1.615293247657513E-5	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.995711602819656	WITHOUT_CLASSIFICATION	0.004288397180343993	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999529640815603	WITHOUT_CLASSIFICATION	4.703591843970014E-5	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999899358467467	WITHOUT_CLASSIFICATION	1.0064153253412299E-5	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999606300221937	WITHOUT_CLASSIFICATION	3.93699778062579E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9994611597735545	WITHOUT_CLASSIFICATION	5.388402264454506E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9998929599928378	WITHOUT_CLASSIFICATION	1.070400071622438E-4	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999744114569145	WITHOUT_CLASSIFICATION	2.5588543085514222E-5	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987364709921791	WITHOUT_CLASSIFICATION	0.0012635290078208904	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999984464090368	WITHOUT_CLASSIFICATION	1.553590963233556E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999527803143912	WITHOUT_CLASSIFICATION	4.721968560875735E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999118724968019	WITHOUT_CLASSIFICATION	8.812750319804837E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988625607209491	WITHOUT_CLASSIFICATION	0.0011374392790509241	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.529020957645049	IMPLEMENTATION	0.4709790423549509	WITHOUT_CLASSIFICATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999718473101924	WITHOUT_CLASSIFICATION	2.815268980766E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999987291700206	WITHOUT_CLASSIFICATION	1.2708299794421E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999697102267768	WITHOUT_CLASSIFICATION	3.0289773223169064E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989444610342313	WITHOUT_CLASSIFICATION	0.0010555389657687082	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999886161712481	WITHOUT_CLASSIFICATION	1.1383828751851415E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999912398697561	WITHOUT_CLASSIFICATION	8.760130243841758E-6	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999855237788555	WITHOUT_CLASSIFICATION	1.4476221144479502E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999399145196364	WITHOUT_CLASSIFICATION	6.008548036373112E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999959165699335	WITHOUT_CLASSIFICATION	4.0834300665831535E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999815284694128	WITHOUT_CLASSIFICATION	1.847153058722391E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9995438920507034	WITHOUT_CLASSIFICATION	4.561079492966568E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999339288254674	WITHOUT_CLASSIFICATION	6.607117453256465E-5	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999759991326286	WITHOUT_CLASSIFICATION	2.40008673715139E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9995747769728425	WITHOUT_CLASSIFICATION	4.2522302715748814E-4	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998614412547	WITHOUT_CLASSIFICATION	1.385587453610007E-7	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999661053595225	WITHOUT_CLASSIFICATION	3.389464047754389E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999368626276006	WITHOUT_CLASSIFICATION	6.313737239936653E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999948261126552	WITHOUT_CLASSIFICATION	5.173887344747552E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999950317608338	WITHOUT_CLASSIFICATION	4.968239166179818E-6	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999828612645387	WITHOUT_CLASSIFICATION	1.7138735461309625E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999969830332508	WITHOUT_CLASSIFICATION	3.0169667492474387E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998524715400281	WITHOUT_CLASSIFICATION	1.4752845997196865E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998641340802239	WITHOUT_CLASSIFICATION	1.3586591977603562E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998524715400281	WITHOUT_CLASSIFICATION	1.4752845997196865E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998175953937142	WITHOUT_CLASSIFICATION	1.8240460628586748E-4	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999480356254682	WITHOUT_CLASSIFICATION	5.196437453184592E-5	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9962198594406948	WITHOUT_CLASSIFICATION	0.003780140559305115	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999973934793292	WITHOUT_CLASSIFICATION	2.6065206707934324E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999762428755882	WITHOUT_CLASSIFICATION	2.375712441186537E-5	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9962198594406948	WITHOUT_CLASSIFICATION	0.003780140559305115	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999942639108185	WITHOUT_CLASSIFICATION	5.7360891815458675E-6	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997850833474478	WITHOUT_CLASSIFICATION	2.1491665255233948E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999994313275351	WITHOUT_CLASSIFICATION	5.686724648998923E-6	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999516312389543	WITHOUT_CLASSIFICATION	4.836876104570055E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999710751694816	WITHOUT_CLASSIFICATION	2.89248305183645E-5	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999907768914493	WITHOUT_CLASSIFICATION	9.22310855070651E-6	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999946993280178	WITHOUT_CLASSIFICATION	5.300671982291031E-6	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.6255201765700129	WITHOUT_CLASSIFICATION	0.3744798234299871	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9996910807446773	WITHOUT_CLASSIFICATION	3.089192553227343E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999983285939469	WITHOUT_CLASSIFICATION	1.671406053126379E-6	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999988915586133	WITHOUT_CLASSIFICATION	1.1084413866202946E-6	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999907751229945	WITHOUT_CLASSIFICATION	9.224877005498855E-5	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999989466152422	WITHOUT_CLASSIFICATION	1.053384757759956E-6	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999877213684987	WITHOUT_CLASSIFICATION	1.2278631501398501E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999743575406	WITHOUT_CLASSIFICATION	2.564245940449506E-7	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999345498998617	WITHOUT_CLASSIFICATION	6.545010013818276E-5	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999799785061614	WITHOUT_CLASSIFICATION	2.002149383852961E-5	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999901257844859	WITHOUT_CLASSIFICATION	9.874215514175202E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999002449357923	WITHOUT_CLASSIFICATION	9.975506420759713E-5	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998248322814	WITHOUT_CLASSIFICATION	1.751677186028979E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999976223122383	WITHOUT_CLASSIFICATION	2.377687761620772E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999692814735897	WITHOUT_CLASSIFICATION	3.071852641033777E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998676564370423	WITHOUT_CLASSIFICATION	1.3234356295767819E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9993323540145765	WITHOUT_CLASSIFICATION	6.676459854234215E-4	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999787354545787	WITHOUT_CLASSIFICATION	2.126454542131941E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999353681707291	WITHOUT_CLASSIFICATION	6.463182927083535E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999950152	WITHOUT_CLASSIFICATION	4.984779510614041E-12	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998823915258028	WITHOUT_CLASSIFICATION	1.1760847419719997E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999732986279439	WITHOUT_CLASSIFICATION	2.670137205596851E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999797583559257	WITHOUT_CLASSIFICATION	2.0241644074341117E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998676564370423	WITHOUT_CLASSIFICATION	1.3234356295767819E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998633863308468	WITHOUT_CLASSIFICATION	1.3661366915320531E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999760388964735	WITHOUT_CLASSIFICATION	2.3961103526482048E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9995907278588535	WITHOUT_CLASSIFICATION	4.092721411464856E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.958128505024123	WITHOUT_CLASSIFICATION	0.041871494975877166	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998248322814	WITHOUT_CLASSIFICATION	1.751677186028979E-7	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999353578742454	WITHOUT_CLASSIFICATION	6.464212575459956E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999977833497716	WITHOUT_CLASSIFICATION	2.2166502282803804E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999951606718189	WITHOUT_CLASSIFICATION	4.839328181026687E-6	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999695565658929	WITHOUT_CLASSIFICATION	3.0443434107048265E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999552798132719	WITHOUT_CLASSIFICATION	4.472018672808254E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999899819572108	WITHOUT_CLASSIFICATION	1.0018042789150513E-5	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999983096604036	WITHOUT_CLASSIFICATION	1.690339596473195E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999819929161571	WITHOUT_CLASSIFICATION	1.8007083842878572E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999002210600277	WITHOUT_CLASSIFICATION	9.977893997221255E-5	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999487773514778	WITHOUT_CLASSIFICATION	5.1222648522323597E-5	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9998981890504217	WITHOUT_CLASSIFICATION	1.0181094957830801E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999966948020415	WITHOUT_CLASSIFICATION	3.305197958529594E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999976730828507	WITHOUT_CLASSIFICATION	2.326917149309656E-6	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999911716084323	WITHOUT_CLASSIFICATION	8.828391567660472E-6	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999728538992901	WITHOUT_CLASSIFICATION	2.7146100709773942E-5	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999711676695446	WITHOUT_CLASSIFICATION	2.883233045531854E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999828956600123	WITHOUT_CLASSIFICATION	1.7104339987722164E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999353578742454	WITHOUT_CLASSIFICATION	6.464212575459956E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9889522427129965	WITHOUT_CLASSIFICATION	0.01104775728700338	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999544701261008	WITHOUT_CLASSIFICATION	4.552987389913724E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994146423330434	WITHOUT_CLASSIFICATION	5.853576669566603E-4	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999950371145009	WITHOUT_CLASSIFICATION	4.962885499121039E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973871325876247	WITHOUT_CLASSIFICATION	0.0026128674123752815	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973871325876247	WITHOUT_CLASSIFICATION	0.0026128674123752815	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999884916932047	WITHOUT_CLASSIFICATION	1.1508306795232484E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973871325876247	WITHOUT_CLASSIFICATION	0.0026128674123752815	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9973871325876247	WITHOUT_CLASSIFICATION	0.0026128674123752815	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9969210411980667	WITHOUT_CLASSIFICATION	0.0030789588019333775	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999920106029494	WITHOUT_CLASSIFICATION	7.989397050677151E-6	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999950641227422	WITHOUT_CLASSIFICATION	4.935877257802555E-5	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999950641227422	WITHOUT_CLASSIFICATION	4.935877257802555E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999725727474412	WITHOUT_CLASSIFICATION	2.7427252558687793E-5	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9993764911794812	WITHOUT_CLASSIFICATION	6.235088205188323E-4	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999551521032064	WITHOUT_CLASSIFICATION	4.4847896793629055E-5	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999644419327	WITHOUT_CLASSIFICATION	3.555806734757887E-8	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999545014896014	WITHOUT_CLASSIFICATION	4.549851039858627E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998901121853527	WITHOUT_CLASSIFICATION	1.0988781464725754E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998601162306499	WITHOUT_CLASSIFICATION	1.3988376935018335E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999777825711207	WITHOUT_CLASSIFICATION	2.2217428879306232E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999419198385326	WITHOUT_CLASSIFICATION	5.8080161467366495E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999959702597391	WITHOUT_CLASSIFICATION	4.029740260999688E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.99995049827845	WITHOUT_CLASSIFICATION	4.950172154997434E-5	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999965052101241	WITHOUT_CLASSIFICATION	3.4947898759971935E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999969626285731	WITHOUT_CLASSIFICATION	3.0373714270352634E-6	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999848980990328	WITHOUT_CLASSIFICATION	1.5101900967122006E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999954786533711	WITHOUT_CLASSIFICATION	4.521346628899857E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999500606020881	WITHOUT_CLASSIFICATION	4.993939791192358E-5	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999220721707753	WITHOUT_CLASSIFICATION	7.792782922468278E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999402086016053	WITHOUT_CLASSIFICATION	5.9791398394717915E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999969626285731	WITHOUT_CLASSIFICATION	3.0373714270352634E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999976223122383	WITHOUT_CLASSIFICATION	2.377687761620772E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.99984903376312	WITHOUT_CLASSIFICATION	1.509662368801536E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999804484361435	WITHOUT_CLASSIFICATION	1.955156385652165E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999928872887403	WITHOUT_CLASSIFICATION	7.112711259700027E-5	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9998308530271792	WITHOUT_CLASSIFICATION	1.6914697282087557E-4	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999827912838097	WITHOUT_CLASSIFICATION	1.7208716190332522E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9996115659741027	WITHOUT_CLASSIFICATION	3.884340258972885E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999950980466029	WITHOUT_CLASSIFICATION	4.9019533970978713E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999740182688901	WITHOUT_CLASSIFICATION	2.5981731109854194E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999997688731634	WITHOUT_CLASSIFICATION	2.3112683655434944E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999922422191043	WITHOUT_CLASSIFICATION	7.757780895694003E-6	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999970076403552	WITHOUT_CLASSIFICATION	2.9923596449508085E-6	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999657780662959	WITHOUT_CLASSIFICATION	3.422193370403725E-5	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999099842111008	WITHOUT_CLASSIFICATION	9.001578889911808E-5	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9990424562381256	WITHOUT_CLASSIFICATION	9.575437618742602E-4	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999617360709229	WITHOUT_CLASSIFICATION	3.8263929077233424E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.999916523418923	WITHOUT_CLASSIFICATION	8.347658107694005E-5	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9997924501197387	WITHOUT_CLASSIFICATION	2.075498802612361E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999948652259919	WITHOUT_CLASSIFICATION	5.13477400806416E-6	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999320069311148	WITHOUT_CLASSIFICATION	6.799306888511868E-5	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999761725658326	WITHOUT_CLASSIFICATION	2.3827434167487787E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.998158630603142	WITHOUT_CLASSIFICATION	0.0018413693968580304	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999987658797114	WITHOUT_CLASSIFICATION	1.234120288628835E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999740182688901	WITHOUT_CLASSIFICATION	2.5981731109854194E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999363741483744	WITHOUT_CLASSIFICATION	6.362585162563691E-5	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999642381403192	WITHOUT_CLASSIFICATION	3.576185968083096E-5	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.998642019125674	WITHOUT_CLASSIFICATION	0.0013579808743260367	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999757615427713	WITHOUT_CLASSIFICATION	2.4238457228638852E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999363717104319	WITHOUT_CLASSIFICATION	6.36282895680701E-5	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9998312484899817	WITHOUT_CLASSIFICATION	1.6875151001837047E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9991903142390987	WITHOUT_CLASSIFICATION	8.096857609013654E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9998315858054001	WITHOUT_CLASSIFICATION	1.6841419459993087E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9996912296892874	WITHOUT_CLASSIFICATION	3.0877031071267227E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999877734160273	WITHOUT_CLASSIFICATION	1.2226583972807444E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998186547863966	WITHOUT_CLASSIFICATION	1.8134521360335676E-4	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999995257779729	WITHOUT_CLASSIFICATION	4.742220270620395E-7	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999864190014564	WITHOUT_CLASSIFICATION	1.3580998543594645E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999866147701795	WITHOUT_CLASSIFICATION	1.3385229820535484E-5	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999823162710164	WITHOUT_CLASSIFICATION	1.7683728983630235E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999982789526168	WITHOUT_CLASSIFICATION	1.7210473831558466E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999877734160273	WITHOUT_CLASSIFICATION	1.2226583972807444E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999960324589264	WITHOUT_CLASSIFICATION	3.967541073635702E-6	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.999991567910753	WITHOUT_CLASSIFICATION	8.432089246896648E-6	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999688406006064	WITHOUT_CLASSIFICATION	3.115939939348645E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999672812364571	WITHOUT_CLASSIFICATION	3.2718763542922195E-5	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999574345471759	WITHOUT_CLASSIFICATION	4.256545282406256E-5	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998985959946807	WITHOUT_CLASSIFICATION	1.0140400531930001E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999866147701795	WITHOUT_CLASSIFICATION	1.3385229820535484E-5	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999701947866975	WITHOUT_CLASSIFICATION	2.980521330245212E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998568124664	WITHOUT_CLASSIFICATION	1.4318753360022492E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999501971300179	WITHOUT_CLASSIFICATION	4.9802869982083236E-5	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995802501389537	WITHOUT_CLASSIFICATION	4.197498610463165E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995802501389537	WITHOUT_CLASSIFICATION	4.197498610463165E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995802501389537	WITHOUT_CLASSIFICATION	4.197498610463165E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999937839904068	WITHOUT_CLASSIFICATION	6.2160095931287395E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999937839904068	WITHOUT_CLASSIFICATION	6.2160095931287395E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999986927468101	WITHOUT_CLASSIFICATION	1.3072531898560323E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.999995314816276	WITHOUT_CLASSIFICATION	4.685183723954194E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999506229858909	WITHOUT_CLASSIFICATION	4.937701410909139E-5	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999265393058737	WITHOUT_CLASSIFICATION	7.346069412627654E-5	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9882345216964323	WITHOUT_CLASSIFICATION	0.011765478303567608	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516924396031	WITHOUT_CLASSIFICATION	4.830756039680312E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971317814668	WITHOUT_CLASSIFICATION	2.868218533213319E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999885395007	WITHOUT_CLASSIFICATION	1.1460499302085746E-8	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999233895021895	WITHOUT_CLASSIFICATION	7.661049781056931E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516924396031	WITHOUT_CLASSIFICATION	4.830756039680312E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971317814668	WITHOUT_CLASSIFICATION	2.868218533213319E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999995840295082	WITHOUT_CLASSIFICATION	4.1597049176880714E-7	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999955849054721	WITHOUT_CLASSIFICATION	4.415094527870339E-6	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999993302027006	WITHOUT_CLASSIFICATION	6.697972995277501E-7	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999972474494015	WITHOUT_CLASSIFICATION	2.752550598481406E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999600543145875	WITHOUT_CLASSIFICATION	3.994568541248495E-5	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999340573000066	WITHOUT_CLASSIFICATION	6.594269999342553E-5	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999695441543599	WITHOUT_CLASSIFICATION	3.0455845640055358E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999985889074227	WITHOUT_CLASSIFICATION	1.411092577286221E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998884356216463	WITHOUT_CLASSIFICATION	1.1156437835367499E-4	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998080387524932	WITHOUT_CLASSIFICATION	1.9196124750681188E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999922608873745	WITHOUT_CLASSIFICATION	7.739112625445052E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999800162120241	WITHOUT_CLASSIFICATION	1.998378797586467E-5	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.999973426550924	WITHOUT_CLASSIFICATION	2.6573449075966922E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999989297138039	WITHOUT_CLASSIFICATION	1.0702861960999095E-5	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999356552348087	WITHOUT_CLASSIFICATION	6.434476519140617E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999716497780111	WITHOUT_CLASSIFICATION	2.8350221988857646E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998262696881134	WITHOUT_CLASSIFICATION	1.7373031188658538E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999990872614875	WITHOUT_CLASSIFICATION	9.127385126031395E-7	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999624667241839	WITHOUT_CLASSIFICATION	3.7533275816033825E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9899405508146814	WITHOUT_CLASSIFICATION	0.010059449185318666	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999989979467413	WITHOUT_CLASSIFICATION	1.0020532586980437E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999979669845592	WITHOUT_CLASSIFICATION	2.0330154407630597E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9953107895738489	WITHOUT_CLASSIFICATION	0.0046892104261510945	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948657131781	WITHOUT_CLASSIFICATION	5.134286821883846E-5	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999496534663775	WITHOUT_CLASSIFICATION	5.034653362237932E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999990822026351	WITHOUT_CLASSIFICATION	9.177973650120255E-7	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516298442308	WITHOUT_CLASSIFICATION	4.837015576924919E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999630174314762	WITHOUT_CLASSIFICATION	3.6982568523685926E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999864168457193	WITHOUT_CLASSIFICATION	1.3583154280666037E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999864168457193	WITHOUT_CLASSIFICATION	1.3583154280666037E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999772373867388	WITHOUT_CLASSIFICATION	2.2762613261141E-5	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9997996029078186	WITHOUT_CLASSIFICATION	2.0039709218141932E-4	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9984902289445617	WITHOUT_CLASSIFICATION	0.0015097710554382287	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999853088153093	WITHOUT_CLASSIFICATION	1.4691184690642088E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9996932278833196	WITHOUT_CLASSIFICATION	3.06772116680449E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999997883170356	WITHOUT_CLASSIFICATION	2.1168296437411074E-7	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999707324097491	WITHOUT_CLASSIFICATION	2.9267590251008158E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999642105994352	WITHOUT_CLASSIFICATION	3.578940056485168E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9998396234653647	WITHOUT_CLASSIFICATION	1.6037653463533866E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998773241391363	WITHOUT_CLASSIFICATION	1.226758608637508E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763658444877	WITHOUT_CLASSIFICATION	1.2363415551233835E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998765591279783	WITHOUT_CLASSIFICATION	1.234408720216874E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9987351546317613	WITHOUT_CLASSIFICATION	0.0012648453682386905	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9997975780950569	WITHOUT_CLASSIFICATION	2.0242190494318294E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999932014458108	WITHOUT_CLASSIFICATION	6.798554189143924E-6	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999898248376874	WITHOUT_CLASSIFICATION	1.017516231267411E-5	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996937372291	WITHOUT_CLASSIFICATION	3.0626277089070626E-7	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9984594181696078	WITHOUT_CLASSIFICATION	0.0015405818303922047	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999884470864937	WITHOUT_CLASSIFICATION	1.1552913506334256E-5	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9984981065420058	WITHOUT_CLASSIFICATION	0.0015018934579941236	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999932014458108	WITHOUT_CLASSIFICATION	6.798554189143924E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999932014458108	WITHOUT_CLASSIFICATION	6.798554189143924E-6	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999975099520108	WITHOUT_CLASSIFICATION	2.4900479891469016E-6	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999955859856008	WITHOUT_CLASSIFICATION	4.414014399205569E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997981468399769	WITHOUT_CLASSIFICATION	2.0185316002318158E-4	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999951760045516	WITHOUT_CLASSIFICATION	4.823995448500537E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999567457852707	WITHOUT_CLASSIFICATION	4.325421472933186E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998262696881134	WITHOUT_CLASSIFICATION	1.7373031188658538E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999592560106767	WITHOUT_CLASSIFICATION	4.074398932323915E-5	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999680293710616	WITHOUT_CLASSIFICATION	3.197062893846849E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999863250368792	WITHOUT_CLASSIFICATION	1.3674963120887305E-5	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998670300426816	WITHOUT_CLASSIFICATION	1.3296995731825994E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999976223138943	WITHOUT_CLASSIFICATION	2.377686105717397E-6	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999600561120234	WITHOUT_CLASSIFICATION	3.994388797654894E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999650410122873	WITHOUT_CLASSIFICATION	3.495898771259935E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999650410122873	WITHOUT_CLASSIFICATION	3.495898771259935E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999650410122873	WITHOUT_CLASSIFICATION	3.495898771259935E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999650410122873	WITHOUT_CLASSIFICATION	3.495898771259935E-5	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569314483433	WITHOUT_CLASSIFICATION	4.3068551656660675E-5	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999724807802594	WITHOUT_CLASSIFICATION	2.7519219740555096E-5	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999547535741307	WITHOUT_CLASSIFICATION	4.52464258693098E-5	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.997878107141691	WITHOUT_CLASSIFICATION	0.0021218928583089528	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999956782992638	WITHOUT_CLASSIFICATION	4.321700736105952E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999519466392659	WITHOUT_CLASSIFICATION	4.8053360734088605E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999416698032395	WITHOUT_CLASSIFICATION	5.8330196760506595E-5	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999887963560673	WITHOUT_CLASSIFICATION	1.1203643932667609E-5	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999948283005148	WITHOUT_CLASSIFICATION	5.171699485218683E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989491192767	WITHOUT_CLASSIFICATION	1.0508807233007459E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999585327117755	WITHOUT_CLASSIFICATION	4.146728822451552E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999666671042192	WITHOUT_CLASSIFICATION	3.333289578076902E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.999899715137257	WITHOUT_CLASSIFICATION	1.0028486274307867E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999517307526472	WITHOUT_CLASSIFICATION	4.826924735277328E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999517307526472	WITHOUT_CLASSIFICATION	4.826924735277328E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999517307526472	WITHOUT_CLASSIFICATION	4.826924735277328E-5	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999782724265841	WITHOUT_CLASSIFICATION	2.1727573415977827E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.999984087469119	WITHOUT_CLASSIFICATION	1.5912530880991927E-5	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999773659442	WITHOUT_CLASSIFICATION	2.2634055803016757E-7	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562052790882	WITHOUT_CLASSIFICATION	4.379472091168645E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562052790882	WITHOUT_CLASSIFICATION	4.379472091168645E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999831114126149	WITHOUT_CLASSIFICATION	1.688858738513195E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995802501389537	WITHOUT_CLASSIFICATION	4.197498610463165E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9713883863283668	WITHOUT_CLASSIFICATION	0.028611613671633184	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999972509956297	WITHOUT_CLASSIFICATION	2.749004370315115E-6	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999945837891817	WITHOUT_CLASSIFICATION	5.416210818281618E-6	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.965278084279992	WITHOUT_CLASSIFICATION	0.03472191572000804	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999294418850504	WITHOUT_CLASSIFICATION	7.055811494956493E-5	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999995738248225	WITHOUT_CLASSIFICATION	4.2617517745653085E-7	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998826965100032	WITHOUT_CLASSIFICATION	1.1730348999683313E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9988365277036744	WITHOUT_CLASSIFICATION	0.0011634722963256275	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999804838424043	WITHOUT_CLASSIFICATION	1.951615759571257E-5	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999995075184917	WITHOUT_CLASSIFICATION	4.924815082992412E-6	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999974320981471	WITHOUT_CLASSIFICATION	2.567901852970237E-6	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999926789789793	WITHOUT_CLASSIFICATION	7.32102102077558E-6	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999982280117	WITHOUT_CLASSIFICATION	1.771988379094029E-9	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999710332691	WITHOUT_CLASSIFICATION	2.8966730942638576E-8	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999925857203	WITHOUT_CLASSIFICATION	7.4142796612936E-9	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999997042334444	WITHOUT_CLASSIFICATION	2.9576655560941305E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998687803651419	WITHOUT_CLASSIFICATION	1.3121963485810718E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999508883361223	WITHOUT_CLASSIFICATION	4.9111663877739394E-5	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997861772969	WITHOUT_CLASSIFICATION	2.1382270305269046E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999820595428661	WITHOUT_CLASSIFICATION	1.79404571339537E-5	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999245343295	WITHOUT_CLASSIFICATION	7.546567039405569E-8	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999979224770337	WITHOUT_CLASSIFICATION	2.0775229662789166E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997866954893	WITHOUT_CLASSIFICATION	2.133045107137498E-7	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999620780295564	WITHOUT_CLASSIFICATION	3.792197044357357E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999878232356828	WITHOUT_CLASSIFICATION	1.2176764317104341E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9625876398568562	WITHOUT_CLASSIFICATION	0.03741236014314383	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999839556516791	WITHOUT_CLASSIFICATION	1.6044348320889558E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9926941763581317	WITHOUT_CLASSIFICATION	0.007305823641868267	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9997113949740503	WITHOUT_CLASSIFICATION	2.886050259497224E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999913406806836	WITHOUT_CLASSIFICATION	8.65931931642104E-6	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9998913797335339	WITHOUT_CLASSIFICATION	1.0862026646608917E-4	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999995942883019	WITHOUT_CLASSIFICATION	4.057116981770428E-7	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999595381459531	WITHOUT_CLASSIFICATION	4.046185404691752E-5	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9655743682306441	WITHOUT_CLASSIFICATION	0.034425631769355924	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999935239969234	WITHOUT_CLASSIFICATION	6.476003076536136E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999981502531	WITHOUT_CLASSIFICATION	1.8497469497372833E-9	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999699886078461	WITHOUT_CLASSIFICATION	3.0011392153795688E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.999993113203583	WITHOUT_CLASSIFICATION	6.886796417033698E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999928667568644	WITHOUT_CLASSIFICATION	7.133243135654952E-6	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999650059328367	WITHOUT_CLASSIFICATION	3.4994067163310426E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999996001904276	WITHOUT_CLASSIFICATION	3.99809572424765E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999994435360561	WITHOUT_CLASSIFICATION	5.564639440060696E-7	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999825266070034	WITHOUT_CLASSIFICATION	1.7473392996600207E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998318634066892	WITHOUT_CLASSIFICATION	1.681365933107306E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999087996196788	WITHOUT_CLASSIFICATION	9.120038032106696E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999238317050453	WITHOUT_CLASSIFICATION	7.616829495471565E-5	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999573051841387	WITHOUT_CLASSIFICATION	4.269481586132711E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9992915746440658	WITHOUT_CLASSIFICATION	7.084253559341667E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999883115438037	WITHOUT_CLASSIFICATION	1.1688456196157565E-5	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999815488793626	WITHOUT_CLASSIFICATION	1.8451120637373846E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9987416161161352	WITHOUT_CLASSIFICATION	0.001258383883864758	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999910119379258	WITHOUT_CLASSIFICATION	8.988062074180554E-6	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999994088128595	WITHOUT_CLASSIFICATION	5.911871404976331E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999574641354	WITHOUT_CLASSIFICATION	4.253586464016364E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999895347927461	WITHOUT_CLASSIFICATION	1.046520725391237E-5	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999874927842473	WITHOUT_CLASSIFICATION	1.2507215752665683E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999985353046882	WITHOUT_CLASSIFICATION	1.464695311851065E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999970228927668	WITHOUT_CLASSIFICATION	2.977107233252493E-6	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999602332809224	WITHOUT_CLASSIFICATION	3.9766719077646276E-5	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9772750926566085	WITHOUT_CLASSIFICATION	0.022724907343391512	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998848501886963	WITHOUT_CLASSIFICATION	1.1514981130364013E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999752147570011	WITHOUT_CLASSIFICATION	2.4785242998896735E-5	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999263230137039	WITHOUT_CLASSIFICATION	7.367698629619191E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999611075617552	WITHOUT_CLASSIFICATION	3.889243824477701E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999968987486021	WITHOUT_CLASSIFICATION	3.101251397791635E-6	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999163875159	WITHOUT_CLASSIFICATION	8.361248410083202E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999466529665924	WITHOUT_CLASSIFICATION	5.334703340760998E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999843852763871	WITHOUT_CLASSIFICATION	1.5614723612897487E-5	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999132456759589	WITHOUT_CLASSIFICATION	8.675432404115074E-5	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999982249999454	WITHOUT_CLASSIFICATION	1.7750000545770058E-6	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999527204832842	WITHOUT_CLASSIFICATION	4.7279516715698006E-5	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999828973112989	WITHOUT_CLASSIFICATION	1.710268870112311E-5	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997752531550231	WITHOUT_CLASSIFICATION	2.2474684497692584E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6231679015661364	IMPLEMENTATION	0.3768320984338636	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999499643301081	WITHOUT_CLASSIFICATION	5.003566989191792E-5	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9846379678009799	WITHOUT_CLASSIFICATION	0.015362032199020057	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6482428816198823	WITHOUT_CLASSIFICATION	0.3517571183801176	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999372567666766	WITHOUT_CLASSIFICATION	6.274323332340921E-5	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9998911280964872	WITHOUT_CLASSIFICATION	1.0887190351288462E-4	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999806530445724	WITHOUT_CLASSIFICATION	1.93469554276374E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9997110419838424	WITHOUT_CLASSIFICATION	2.889580161576014E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999695355946928	WITHOUT_CLASSIFICATION	3.0464405307164192E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999048785229356	WITHOUT_CLASSIFICATION	9.51214770643461E-5	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999766444861575	WITHOUT_CLASSIFICATION	2.335551384244677E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999608093926016	WITHOUT_CLASSIFICATION	3.919060739842283E-5	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999961474258806	WITHOUT_CLASSIFICATION	3.8525741194009476E-5	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999907688752318	WITHOUT_CLASSIFICATION	9.231124768167044E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9996692432539869	WITHOUT_CLASSIFICATION	3.3075674601314197E-4	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999959637494268	WITHOUT_CLASSIFICATION	4.03625057317747E-6	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999564512649091	WITHOUT_CLASSIFICATION	4.3548735090906565E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999805223458784	WITHOUT_CLASSIFICATION	1.9477654121601092E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999361339733522	WITHOUT_CLASSIFICATION	6.386602664770668E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999375006349426	WITHOUT_CLASSIFICATION	6.249936505743799E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999375006349426	WITHOUT_CLASSIFICATION	6.249936505743799E-5	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999820469628412	WITHOUT_CLASSIFICATION	1.795303715873405E-5	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9984168719049588	WITHOUT_CLASSIFICATION	0.0015831280950413173	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999521633944579	WITHOUT_CLASSIFICATION	4.7836605542139686E-5	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999930396719596	WITHOUT_CLASSIFICATION	6.9603280402990595E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9998263393106942	WITHOUT_CLASSIFICATION	1.736606893058286E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999586974343349	WITHOUT_CLASSIFICATION	4.130256566521525E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999869593265479	WITHOUT_CLASSIFICATION	1.304067345221215E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999400817988848	WITHOUT_CLASSIFICATION	5.991820111511689E-5	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999912817342552	WITHOUT_CLASSIFICATION	8.718265744882953E-6	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.928719534981198	WITHOUT_CLASSIFICATION	0.07128046501880209	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999984570484206	WITHOUT_CLASSIFICATION	1.5429515793352494E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998838089977	WITHOUT_CLASSIFICATION	1.1619100214791145E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9976938553060303	WITHOUT_CLASSIFICATION	0.0023061446939697315	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999949640065792	WITHOUT_CLASSIFICATION	5.0359934208191274E-6	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999552571415363	WITHOUT_CLASSIFICATION	4.4742858463701566E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999953289197815	WITHOUT_CLASSIFICATION	4.671080218479658E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9842503845592844	IMPLEMENTATION	0.015749615440715608	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9842503845592844	IMPLEMENTATION	0.015749615440715608	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999517394498837	WITHOUT_CLASSIFICATION	4.826055011624473E-5	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999982612424184	WITHOUT_CLASSIFICATION	1.7387575815785044E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998831387497404	WITHOUT_CLASSIFICATION	1.1686125025965166E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999688343209053	WITHOUT_CLASSIFICATION	3.1165679094610166E-5	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999614659796938	WITHOUT_CLASSIFICATION	3.8534020306078854E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999656727334477	WITHOUT_CLASSIFICATION	3.4327266552240355E-5	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999614659796938	WITHOUT_CLASSIFICATION	3.8534020306078854E-5	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999841910519	WITHOUT_CLASSIFICATION	1.5808948099947745E-5	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999341021665462	WITHOUT_CLASSIFICATION	6.589783345380774E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998963192588273	WITHOUT_CLASSIFICATION	1.0368074117272887E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998963192588273	WITHOUT_CLASSIFICATION	1.0368074117272887E-4	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999914694314939	WITHOUT_CLASSIFICATION	8.530568506112144E-6	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999781293481234	WITHOUT_CLASSIFICATION	2.187065187665955E-5	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999529640815603	WITHOUT_CLASSIFICATION	4.703591843970014E-5	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998984033525746	WITHOUT_CLASSIFICATION	1.0159664742537843E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999529640815603	WITHOUT_CLASSIFICATION	4.703591843970014E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999935208	WITHOUT_CLASSIFICATION	6.479220852650327E-12	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999760582709626	WITHOUT_CLASSIFICATION	2.3941729037467792E-5	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999934208172366	WITHOUT_CLASSIFICATION	6.579182763448989E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998387968603023	WITHOUT_CLASSIFICATION	1.6120313969773733E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999696264784351	WITHOUT_CLASSIFICATION	3.037352156483668E-5	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999909076355135	WITHOUT_CLASSIFICATION	9.092364486564784E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999967786753747	WITHOUT_CLASSIFICATION	3.2213246252858607E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9996456792199545	WITHOUT_CLASSIFICATION	3.5432078004543345E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999848476671104	WITHOUT_CLASSIFICATION	1.5152332889530093E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999716987534886	WITHOUT_CLASSIFICATION	2.8301246511414196E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999852423360357	WITHOUT_CLASSIFICATION	1.4757663964273554E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998430882263103	WITHOUT_CLASSIFICATION	1.5691177368980748E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998568559974171	WITHOUT_CLASSIFICATION	1.4314400258289505E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.999994602773716	WITHOUT_CLASSIFICATION	5.397226284111374E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999077486599817	WITHOUT_CLASSIFICATION	9.225134001834506E-5	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999850164740079	WITHOUT_CLASSIFICATION	1.498352599208657E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999826714375588	WITHOUT_CLASSIFICATION	1.7328562441167188E-5	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999700404529366	WITHOUT_CLASSIFICATION	2.9959547063391233E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9992412801463864	WITHOUT_CLASSIFICATION	7.587198536136177E-4	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9995750972739683	WITHOUT_CLASSIFICATION	4.249027260316488E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999612199705128	WITHOUT_CLASSIFICATION	3.878002948723098E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999901657268413	WITHOUT_CLASSIFICATION	9.834273158649667E-6	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9796921963979561	WITHOUT_CLASSIFICATION	0.020307803602043917	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.99999871899122	WITHOUT_CLASSIFICATION	1.281008780030111E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999068525504391	WITHOUT_CLASSIFICATION	9.314744956092186E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999948992163	WITHOUT_CLASSIFICATION	5.100783699419745E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999709975623622	WITHOUT_CLASSIFICATION	2.9002437637820664E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999385354737034	WITHOUT_CLASSIFICATION	6.146452629660015E-5	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999984706193529	WITHOUT_CLASSIFICATION	1.529380647166799E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9781449855939097	WITHOUT_CLASSIFICATION	0.021855014406090233	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999506426267343	WITHOUT_CLASSIFICATION	4.935737326576166E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999328029611264	WITHOUT_CLASSIFICATION	6.719703887360591E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999154663417202	WITHOUT_CLASSIFICATION	8.453365827979448E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999154663417202	WITHOUT_CLASSIFICATION	8.453365827979448E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999738130184256	WITHOUT_CLASSIFICATION	2.6186981574396802E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999958303663883	WITHOUT_CLASSIFICATION	4.169633611706097E-5	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999692240789722	WITHOUT_CLASSIFICATION	3.077592102776333E-5	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999502781941437	WITHOUT_CLASSIFICATION	4.972180585615356E-5	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999101737281948	WITHOUT_CLASSIFICATION	8.982627180523166E-5	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999997592815367	WITHOUT_CLASSIFICATION	2.4071846327975114E-7	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999565952125	WITHOUT_CLASSIFICATION	4.3404787476868014E-8	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9995649330257972	WITHOUT_CLASSIFICATION	4.350669742027595E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999738130184256	WITHOUT_CLASSIFICATION	2.6186981574396802E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999958303663883	WITHOUT_CLASSIFICATION	4.169633611706097E-5	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999610131793267	WITHOUT_CLASSIFICATION	3.8986820673331635E-5	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.798488595236809	WITHOUT_CLASSIFICATION	0.20151140476319093	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999995713439656	WITHOUT_CLASSIFICATION	4.286560344563398E-7	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999076050565718	WITHOUT_CLASSIFICATION	9.239494342818401E-5	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997550415459	WITHOUT_CLASSIFICATION	2.4495845406674603E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9934048543779951	WITHOUT_CLASSIFICATION	0.006595145622004953	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9998992711164459	WITHOUT_CLASSIFICATION	1.0072888355401187E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999681328003774	WITHOUT_CLASSIFICATION	3.1867199622591343E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999981153997514	WITHOUT_CLASSIFICATION	1.8846002486267127E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8869001056524458	IMPLEMENTATION	0.11309989434755414	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999093869035218	WITHOUT_CLASSIFICATION	9.061309647813845E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8869001056524458	IMPLEMENTATION	0.11309989434755414	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999594537140631	WITHOUT_CLASSIFICATION	4.05462859369228E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999602332809224	WITHOUT_CLASSIFICATION	3.9766719077646276E-5	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999594537140631	WITHOUT_CLASSIFICATION	4.05462859369228E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988852557224	WITHOUT_CLASSIFICATION	1.1147442775994441E-5	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999584872528516	WITHOUT_CLASSIFICATION	4.151274714840262E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999681328003774	WITHOUT_CLASSIFICATION	3.1867199622591343E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999681328003774	WITHOUT_CLASSIFICATION	3.1867199622591343E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999541309786876	WITHOUT_CLASSIFICATION	4.5869021312395876E-5	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999954362414451	WITHOUT_CLASSIFICATION	4.563758554905711E-5	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999541309786876	WITHOUT_CLASSIFICATION	4.5869021312395876E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999370550098634	WITHOUT_CLASSIFICATION	6.294499013653792E-5	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999566698515217	WITHOUT_CLASSIFICATION	4.3330148478306344E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999700754968561	WITHOUT_CLASSIFICATION	2.992450314387256E-5	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9750762193375562	WITHOUT_CLASSIFICATION	0.024923780662443773	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999364714494628	WITHOUT_CLASSIFICATION	6.352855053708526E-5	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999948840564773	WITHOUT_CLASSIFICATION	5.115943522704074E-6	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999535995249441	WITHOUT_CLASSIFICATION	4.6400475055816255E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999485467882029	WITHOUT_CLASSIFICATION	5.1453211797109375E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999670366464386	WITHOUT_CLASSIFICATION	3.296335356140424E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999898882787	WITHOUT_CLASSIFICATION	1.0111721300052491E-5	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.999902076915234	WITHOUT_CLASSIFICATION	9.792308476602215E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999663631126988	WITHOUT_CLASSIFICATION	3.363688730120736E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999994226082283	WITHOUT_CLASSIFICATION	5.7739177168794466E-6	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999732895315563	WITHOUT_CLASSIFICATION	2.6710468443711332E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999968263242274	WITHOUT_CLASSIFICATION	3.173675772592902E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999968894846533	WITHOUT_CLASSIFICATION	3.1105153467112656E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998568559974171	WITHOUT_CLASSIFICATION	1.4314400258289505E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999826972320748	WITHOUT_CLASSIFICATION	1.73027679252736E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999407664611114	WITHOUT_CLASSIFICATION	5.9233538888517394E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999177404653162	WITHOUT_CLASSIFICATION	8.225953468374178E-5	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998568559974171	WITHOUT_CLASSIFICATION	1.4314400258289505E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998670092964634	WITHOUT_CLASSIFICATION	1.3299070353661334E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999489046192779	WITHOUT_CLASSIFICATION	5.1095380722121904E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9977836195051011	WITHOUT_CLASSIFICATION	0.0022163804948989313	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.6423209438278188	WITHOUT_CLASSIFICATION	0.35767905617218126	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998864554775063	WITHOUT_CLASSIFICATION	1.1354452249373783E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.999933681228075	WITHOUT_CLASSIFICATION	6.631877192495893E-5	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9448161043458064	WITHOUT_CLASSIFICATION	0.05518389565419358	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999384407775793	WITHOUT_CLASSIFICATION	6.155922242066142E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999364714494628	WITHOUT_CLASSIFICATION	6.352855053708526E-5	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999701826232602	WITHOUT_CLASSIFICATION	2.981737673976757E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.8319886697324602	WITHOUT_CLASSIFICATION	0.16801133026753967	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7085479280363393	IMPLEMENTATION	0.2914520719636608	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9999627528085059	WITHOUT_CLASSIFICATION	3.7247191494184046E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999520305346554	WITHOUT_CLASSIFICATION	4.7969465344525596E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999314111883038	WITHOUT_CLASSIFICATION	6.858881169627515E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999370550098634	WITHOUT_CLASSIFICATION	6.294499013653792E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999370550098634	WITHOUT_CLASSIFICATION	6.294499013653792E-5	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9991934187794228	WITHOUT_CLASSIFICATION	8.065812205772267E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999815401246525	WITHOUT_CLASSIFICATION	1.8459875347612124E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999079719431047	WITHOUT_CLASSIFICATION	9.202805689534426E-5	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9997423715736906	WITHOUT_CLASSIFICATION	2.576284263093702E-4	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9996719701449304	WITHOUT_CLASSIFICATION	3.2802985506970365E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999842137398146	WITHOUT_CLASSIFICATION	1.5786260185394406E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.99999588261494	WITHOUT_CLASSIFICATION	4.117385060029331E-6	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998152549873	WITHOUT_CLASSIFICATION	1.847450127275685E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999417509923557	WITHOUT_CLASSIFICATION	5.824900764427182E-5	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999694654217303	WITHOUT_CLASSIFICATION	3.053457826968212E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999995446285742	WITHOUT_CLASSIFICATION	4.5537142579738326E-6	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999994226082283	WITHOUT_CLASSIFICATION	5.7739177168794466E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999738130184256	WITHOUT_CLASSIFICATION	2.6186981574396802E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999995446285742	WITHOUT_CLASSIFICATION	4.5537142579738326E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999610182394434	WITHOUT_CLASSIFICATION	3.898176055669919E-5	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999781182402876	WITHOUT_CLASSIFICATION	2.1881759712406106E-4	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999832052313341	WITHOUT_CLASSIFICATION	1.6794768665916157E-5	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9099243110178311	IMPLEMENTATION	0.09007568898216892	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999503778460265	WITHOUT_CLASSIFICATION	4.962215397342338E-5	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997438609223	WITHOUT_CLASSIFICATION	2.56139077782267E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999988804153739	WITHOUT_CLASSIFICATION	1.1195846261059483E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999986406073	WITHOUT_CLASSIFICATION	1.3593926338510046E-9	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999530551908025	WITHOUT_CLASSIFICATION	4.694480919765228E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999796705986606	WITHOUT_CLASSIFICATION	2.0329401339475367E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999721343682566	WITHOUT_CLASSIFICATION	2.7865631743369343E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999721343682566	WITHOUT_CLASSIFICATION	2.7865631743369343E-5	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999414276031803	WITHOUT_CLASSIFICATION	5.857239681965067E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9902381617374676	WITHOUT_CLASSIFICATION	0.00976183826253234	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999995446285742	WITHOUT_CLASSIFICATION	4.5537142579738326E-6	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999503778460265	WITHOUT_CLASSIFICATION	4.962215397342338E-5	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999988804153739	WITHOUT_CLASSIFICATION	1.1195846261059483E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999878042288562	WITHOUT_CLASSIFICATION	1.2195771143691393E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999295916114967	WITHOUT_CLASSIFICATION	7.040838850323755E-5	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9998940928932635	WITHOUT_CLASSIFICATION	1.0590710673652412E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999784012558889	WITHOUT_CLASSIFICATION	2.159874411106774E-5	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999952294557781	WITHOUT_CLASSIFICATION	4.770544221906161E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999499459000178	WITHOUT_CLASSIFICATION	5.0054099982261117E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999610182394434	WITHOUT_CLASSIFICATION	3.898176055669919E-5	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999565133308073	WITHOUT_CLASSIFICATION	4.348666919280179E-5	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999668735513595	WITHOUT_CLASSIFICATION	3.3126448640383694E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9989015391604561	WITHOUT_CLASSIFICATION	0.001098460839543925	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.8200157059527224	WITHOUT_CLASSIFICATION	0.17998429404727762	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.8238845401930954	WITHOUT_CLASSIFICATION	0.17611545980690452	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.999978064887671	WITHOUT_CLASSIFICATION	2.1935112328979867E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988852557224	WITHOUT_CLASSIFICATION	1.1147442775994441E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940825682846	WITHOUT_CLASSIFICATION	5.917431715402831E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996583094631	WITHOUT_CLASSIFICATION	3.4169053696175294E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999934253195306	WITHOUT_CLASSIFICATION	6.574680469403825E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999999208409097	WITHOUT_CLASSIFICATION	7.915909029747955E-7	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999987242641104	WITHOUT_CLASSIFICATION	1.2757358896020712E-6	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999760082912795	WITHOUT_CLASSIFICATION	2.3991708720423644E-5	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9998800933356072	WITHOUT_CLASSIFICATION	1.199066643928516E-4	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999956601950266	WITHOUT_CLASSIFICATION	4.339804973352212E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999499459000178	WITHOUT_CLASSIFICATION	5.0054099982261117E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999407864023443	WITHOUT_CLASSIFICATION	5.921359765572684E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999516524317115	WITHOUT_CLASSIFICATION	4.834756828857351E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.999888748535404	WITHOUT_CLASSIFICATION	1.1125146459610579E-4	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999941844161456	WITHOUT_CLASSIFICATION	5.8155838543240095E-6	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999481536745335	WITHOUT_CLASSIFICATION	5.18463254664403E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.999892004275746	WITHOUT_CLASSIFICATION	1.0799572425403715E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999583016290146	WITHOUT_CLASSIFICATION	4.1698370985410346E-5	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9824243386931344	WITHOUT_CLASSIFICATION	0.01757566130686559	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999162599578798	WITHOUT_CLASSIFICATION	8.374004212023499E-5	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997314646202	WITHOUT_CLASSIFICATION	2.6853537979333854E-7	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9971287452012921	WITHOUT_CLASSIFICATION	0.002871254798707813	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999729368766991	WITHOUT_CLASSIFICATION	2.70631233009532E-5	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999964490449005	WITHOUT_CLASSIFICATION	3.5509550996075795E-6	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999952648198136	WITHOUT_CLASSIFICATION	4.735180186492763E-6	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999181744548363	WITHOUT_CLASSIFICATION	8.182554516372656E-5	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999822234084281	WITHOUT_CLASSIFICATION	1.777659157183201E-5	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999383111145709	WITHOUT_CLASSIFICATION	6.168888542910321E-4	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999782235600053	WITHOUT_CLASSIFICATION	2.1776439994713213E-5	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999942228743307	WITHOUT_CLASSIFICATION	5.777125669343311E-6	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999759492742586	WITHOUT_CLASSIFICATION	2.405072574141034E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999984900814111	WITHOUT_CLASSIFICATION	1.5099185888953172E-6	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999547168795501	WITHOUT_CLASSIFICATION	4.528312044994738E-5	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8777520550739741	IMPLEMENTATION	0.12224794492602586	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9978251945306	WITHOUT_CLASSIFICATION	0.0021748054694000424	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999591124588244	WITHOUT_CLASSIFICATION	4.088754117553766E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999963606223675	WITHOUT_CLASSIFICATION	3.639377632484528E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5210794044656913	IMPLEMENTATION	0.47892059553430855	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999945823658429	WITHOUT_CLASSIFICATION	5.417634157045325E-6	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997895450898276	WITHOUT_CLASSIFICATION	2.104549101723872E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999927287268251	WITHOUT_CLASSIFICATION	7.271273174896985E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999535839777298	WITHOUT_CLASSIFICATION	4.6416022270199584E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999908530321585	WITHOUT_CLASSIFICATION	9.146967841408327E-6	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998940668783616	WITHOUT_CLASSIFICATION	1.0593312163843357E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9998870545094183	WITHOUT_CLASSIFICATION	1.1294549058181459E-4	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9971506687087949	WITHOUT_CLASSIFICATION	0.00284933129120507	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998940668783616	WITHOUT_CLASSIFICATION	1.0593312163843357E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999908530321585	WITHOUT_CLASSIFICATION	9.146967841408327E-6	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9998870545094183	WITHOUT_CLASSIFICATION	1.1294549058181459E-4	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.999939071362951	WITHOUT_CLASSIFICATION	6.092863704889346E-5	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999114321159167	WITHOUT_CLASSIFICATION	8.856788408330451E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9984940928526387	WITHOUT_CLASSIFICATION	0.0015059071473612817	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.999980360107309	WITHOUT_CLASSIFICATION	1.963989269103672E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999632785918	WITHOUT_CLASSIFICATION	3.672140820262275E-7	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6048965197757519	WITHOUT_CLASSIFICATION	0.39510348022424824	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9975824965888556	WITHOUT_CLASSIFICATION	0.002417503411144555	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999829129672392	WITHOUT_CLASSIFICATION	1.708703276088405E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999845049123	WITHOUT_CLASSIFICATION	1.549508763839865E-8	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999817639169517	WITHOUT_CLASSIFICATION	1.8236083048238177E-5	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9998704189746543	WITHOUT_CLASSIFICATION	1.295810253456249E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999938873506714	WITHOUT_CLASSIFICATION	6.112649328575064E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997779750475136	WITHOUT_CLASSIFICATION	2.2202495248621116E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.999980360107309	WITHOUT_CLASSIFICATION	1.963989269103672E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999993433251479	WITHOUT_CLASSIFICATION	6.566748520997362E-6	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999986103727116	WITHOUT_CLASSIFICATION	1.3896272883334742E-6	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999387841152726	WITHOUT_CLASSIFICATION	6.121588472736735E-5	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999996426139116	WITHOUT_CLASSIFICATION	3.5738608833304906E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9983543367580282	WITHOUT_CLASSIFICATION	0.0016456632419717702	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9982836645335798	WITHOUT_CLASSIFICATION	0.0017163354664202176	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9685646196406226	WITHOUT_CLASSIFICATION	0.03143538035937738	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999066071757284	WITHOUT_CLASSIFICATION	9.339282427157525E-5	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9994091516093628	WITHOUT_CLASSIFICATION	5.908483906371806E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999920036390436	WITHOUT_CLASSIFICATION	7.996360956403821E-6	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9982932222537966	WITHOUT_CLASSIFICATION	0.0017067777462034539	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9982932222537966	WITHOUT_CLASSIFICATION	0.0017067777462034539	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999647502928706	WITHOUT_CLASSIFICATION	3.5249707129399546E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999647502928706	WITHOUT_CLASSIFICATION	3.5249707129399546E-4	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9992815299653101	WITHOUT_CLASSIFICATION	7.184700346900425E-4	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999387841152726	WITHOUT_CLASSIFICATION	6.121588472736735E-5	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.998759987041677	WITHOUT_CLASSIFICATION	0.0012400129583230535	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9992728387294099	WITHOUT_CLASSIFICATION	7.271612705901634E-4	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999606881447839	WITHOUT_CLASSIFICATION	3.9311855216088665E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999606881447839	WITHOUT_CLASSIFICATION	3.9311855216088665E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999622693813238	WITHOUT_CLASSIFICATION	3.773061867628672E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999339594293998	WITHOUT_CLASSIFICATION	6.604057060024675E-5	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999982459759043	WITHOUT_CLASSIFICATION	1.7540240956977544E-5	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9998853032414309	WITHOUT_CLASSIFICATION	1.1469675856910205E-4	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999989522074525	WITHOUT_CLASSIFICATION	1.0477925474953338E-6	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999944146836621	WITHOUT_CLASSIFICATION	5.585316337911056E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999878888880116	WITHOUT_CLASSIFICATION	1.2111111988336327E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999080385310539	WITHOUT_CLASSIFICATION	9.196146894611642E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.999961667641071	WITHOUT_CLASSIFICATION	3.833235892903135E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999984700627587	WITHOUT_CLASSIFICATION	1.5299372413704633E-6	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.999954371257123	WITHOUT_CLASSIFICATION	4.562874287692889E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9999107153392611	WITHOUT_CLASSIFICATION	8.928466073889767E-5	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999746005995054	WITHOUT_CLASSIFICATION	2.539940049456855E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999753781419101	WITHOUT_CLASSIFICATION	2.462185808996679E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9804369656974936	WITHOUT_CLASSIFICATION	0.01956303430250633	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998692407455826	WITHOUT_CLASSIFICATION	1.3075925441733113E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953790342657	WITHOUT_CLASSIFICATION	4.620965734294044E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9996847441280879	WITHOUT_CLASSIFICATION	3.1525587191209424E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9799196951342342	WITHOUT_CLASSIFICATION	0.020080304865765827	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999406114619	WITHOUT_CLASSIFICATION	5.93885379890047E-8	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9996138730257698	WITHOUT_CLASSIFICATION	3.861269742303473E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.99999862389854	WITHOUT_CLASSIFICATION	1.3761014599749059E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997953342370649	WITHOUT_CLASSIFICATION	2.0466576293497809E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999992429402298	WITHOUT_CLASSIFICATION	7.570597701744841E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999853088153093	WITHOUT_CLASSIFICATION	1.4691184690642088E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9996508596948701	WITHOUT_CLASSIFICATION	3.49140305129985E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997314646202	WITHOUT_CLASSIFICATION	2.6853537979333854E-7	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999768050093146	WITHOUT_CLASSIFICATION	2.3194990685326873E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999962764358497	WITHOUT_CLASSIFICATION	3.7235641502979324E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999512158437308	WITHOUT_CLASSIFICATION	4.8784156269238895E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489287580385	WITHOUT_CLASSIFICATION	5.1071241961457536E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999946431084562	WITHOUT_CLASSIFICATION	5.356891543762352E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999946431084562	WITHOUT_CLASSIFICATION	5.356891543762352E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999995719292889	WITHOUT_CLASSIFICATION	4.280707111092922E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999452592978951	WITHOUT_CLASSIFICATION	5.474070210479888E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999578336832775	WITHOUT_CLASSIFICATION	4.216631672240158E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999578336832775	WITHOUT_CLASSIFICATION	4.216631672240158E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9992237784853086	WITHOUT_CLASSIFICATION	7.762215146914561E-4	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999447729510024	WITHOUT_CLASSIFICATION	5.52270489976734E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9959988886513578	WITHOUT_CLASSIFICATION	0.0040011113486422955	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999567457852707	WITHOUT_CLASSIFICATION	4.325421472933186E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999481107657667	WITHOUT_CLASSIFICATION	5.188923423317114E-5	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999990653611756	WITHOUT_CLASSIFICATION	9.346388245427822E-7	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9998139570651241	WITHOUT_CLASSIFICATION	1.8604293487585805E-4	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999972815133496	WITHOUT_CLASSIFICATION	2.7184866504016474E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999972815133496	WITHOUT_CLASSIFICATION	2.7184866504016474E-5	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9990745185055551	WITHOUT_CLASSIFICATION	9.254814944450651E-4	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999919972889348	WITHOUT_CLASSIFICATION	8.002711065145042E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999919972889348	WITHOUT_CLASSIFICATION	8.002711065145042E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999805872950212	WITHOUT_CLASSIFICATION	1.941270497886468E-5	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999796540703019	WITHOUT_CLASSIFICATION	2.0345929698098765E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999944014654893	WITHOUT_CLASSIFICATION	5.598534510607452E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999957960503297	WITHOUT_CLASSIFICATION	4.203949670292952E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997677876709083	WITHOUT_CLASSIFICATION	2.322123290916658E-4	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999977488957714	WITHOUT_CLASSIFICATION	2.251104228585007E-6	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999976037197071	WITHOUT_CLASSIFICATION	2.396280292848921E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999919147505496	WITHOUT_CLASSIFICATION	8.085249450418437E-6	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995344124489108	WITHOUT_CLASSIFICATION	4.655875510892154E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9998492789593032	WITHOUT_CLASSIFICATION	1.5072104069674782E-4	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9392076780691125	WITHOUT_CLASSIFICATION	0.06079232193088747	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999500176724647	WITHOUT_CLASSIFICATION	4.998232753536749E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999500176724647	WITHOUT_CLASSIFICATION	4.998232753536749E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999500176724647	WITHOUT_CLASSIFICATION	4.998232753536749E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999500176724647	WITHOUT_CLASSIFICATION	4.998232753536749E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999867496423672	WITHOUT_CLASSIFICATION	1.3250357632809667E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998415184600131	WITHOUT_CLASSIFICATION	1.5848153998690922E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999769907756542	WITHOUT_CLASSIFICATION	2.300922434580797E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999866166931215	WITHOUT_CLASSIFICATION	1.3383306878496113E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999618178283534	WITHOUT_CLASSIFICATION	3.818217164674872E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998821966143581	WITHOUT_CLASSIFICATION	1.178033856419326E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999707151686574	WITHOUT_CLASSIFICATION	2.9284831342545358E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9997788044935595	WITHOUT_CLASSIFICATION	2.2119550644061057E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9978610929852714	WITHOUT_CLASSIFICATION	0.0021389070147287133	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.999871630531038	WITHOUT_CLASSIFICATION	1.2836946896198898E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999837343053022	WITHOUT_CLASSIFICATION	1.6265694697760706E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999961003293	WITHOUT_CLASSIFICATION	3.8996706755300506E-9	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.5419652063237488	IMPLEMENTATION	0.45803479367625116	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999789933078318	WITHOUT_CLASSIFICATION	2.100669216831456E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999837343053022	WITHOUT_CLASSIFICATION	1.6265694697760706E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.8397232893799298	WITHOUT_CLASSIFICATION	0.16027671062007026	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999423344954965	WITHOUT_CLASSIFICATION	5.7665504503563225E-5	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999987174932338	WITHOUT_CLASSIFICATION	1.2825067662984431E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999856815412291	WITHOUT_CLASSIFICATION	1.4318458770724568E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999783881150018	WITHOUT_CLASSIFICATION	2.1611884998103627E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9995249349068409	WITHOUT_CLASSIFICATION	4.75065093159137E-4	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999906339153867	WITHOUT_CLASSIFICATION	9.366084613407187E-6	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999921972821842	WITHOUT_CLASSIFICATION	7.802717815739143E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972342233158	WITHOUT_CLASSIFICATION	2.765776684253436E-6	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999983084615904	WITHOUT_CLASSIFICATION	1.6915384095729199E-6	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972342233158	WITHOUT_CLASSIFICATION	2.765776684253436E-6	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999950092080204	WITHOUT_CLASSIFICATION	4.990791979564771E-6	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999155431397296	WITHOUT_CLASSIFICATION	8.445686027037248E-5	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.7606550863770594	WITHOUT_CLASSIFICATION	0.2393449136229406	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999804130079072	WITHOUT_CLASSIFICATION	1.95869920927586E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999798509249712	WITHOUT_CLASSIFICATION	2.0149075028799286E-4	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992015794108	WITHOUT_CLASSIFICATION	7.984205891919426E-7	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999669663402154	WITHOUT_CLASSIFICATION	3.3033659784614706E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999925740520922	WITHOUT_CLASSIFICATION	7.4259479078701465E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999669663402154	WITHOUT_CLASSIFICATION	3.3033659784614706E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999806347937625	WITHOUT_CLASSIFICATION	1.9365206237453095E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999974070167457	WITHOUT_CLASSIFICATION	2.592983254430942E-6	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999908649325306	WITHOUT_CLASSIFICATION	9.13506746935957E-6	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.999962629253262	WITHOUT_CLASSIFICATION	3.737074673810124E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999815942335758	WITHOUT_CLASSIFICATION	1.8405766424210003E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998568559974171	WITHOUT_CLASSIFICATION	1.4314400258289505E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999997894333293	WITHOUT_CLASSIFICATION	2.1056667070601813E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992015794108	WITHOUT_CLASSIFICATION	7.984205891919426E-7	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999925740520922	WITHOUT_CLASSIFICATION	7.4259479078701465E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999806347937625	WITHOUT_CLASSIFICATION	1.9365206237453095E-5	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998261326262875	WITHOUT_CLASSIFICATION	1.7386737371255205E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999422966015193	WITHOUT_CLASSIFICATION	5.77033984806936E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9999238861030341	WITHOUT_CLASSIFICATION	7.61138969658753E-5	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999997759955049	WITHOUT_CLASSIFICATION	2.2400449498690386E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9999661728117769	WITHOUT_CLASSIFICATION	3.382718822318869E-5	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999641577151737	WITHOUT_CLASSIFICATION	3.584228482630088E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999853371144102	WITHOUT_CLASSIFICATION	1.4662885589846035E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953790342657	WITHOUT_CLASSIFICATION	4.620965734294044E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999974070167457	WITHOUT_CLASSIFICATION	2.592983254430942E-6	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9309563595161822	WITHOUT_CLASSIFICATION	0.0690436404838179	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999541309786876	WITHOUT_CLASSIFICATION	4.5869021312395876E-5	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999102390768033	WITHOUT_CLASSIFICATION	8.976092319669863E-4	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999780459726021	WITHOUT_CLASSIFICATION	2.195402739794246E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953790342657	WITHOUT_CLASSIFICATION	4.620965734294044E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999926847815483	WITHOUT_CLASSIFICATION	7.315218451637276E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953790342657	WITHOUT_CLASSIFICATION	4.620965734294044E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999992841717779	WITHOUT_CLASSIFICATION	7.158282220883592E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999744114569145	WITHOUT_CLASSIFICATION	2.5588543085514222E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998238995672049	WITHOUT_CLASSIFICATION	1.761004327950589E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9989404366155605	WITHOUT_CLASSIFICATION	0.0010595633844394812	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999718473101924	WITHOUT_CLASSIFICATION	2.815268980766E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999680374856119	WITHOUT_CLASSIFICATION	3.196251438813696E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999887298978616	WITHOUT_CLASSIFICATION	1.1270102138396563E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999961890183239	WITHOUT_CLASSIFICATION	3.8109816760058293E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999408929841099	WITHOUT_CLASSIFICATION	5.910701589000116E-5	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999930310220057	WITHOUT_CLASSIFICATION	6.9689779942851936E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9993930746510648	WITHOUT_CLASSIFICATION	6.069253489352022E-4	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999894876107015	WITHOUT_CLASSIFICATION	1.0512389298549543E-5	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9998656993983239	WITHOUT_CLASSIFICATION	1.343006016761523E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999447472638656	WITHOUT_CLASSIFICATION	5.5252736134286054E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999920887464007	WITHOUT_CLASSIFICATION	7.911253599347042E-6	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999872464769203	WITHOUT_CLASSIFICATION	1.2753523079729548E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999979270648255	WITHOUT_CLASSIFICATION	2.072935174496517E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999980873158989	WITHOUT_CLASSIFICATION	1.9126841010571486E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996754398712	WITHOUT_CLASSIFICATION	3.245601287485747E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999825547115839	WITHOUT_CLASSIFICATION	1.744528841604674E-5	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999914739611135	WITHOUT_CLASSIFICATION	8.526038886429793E-6	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999914739611135	WITHOUT_CLASSIFICATION	8.526038886429793E-6	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999919976066732	WITHOUT_CLASSIFICATION	8.002393326758754E-6	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999950351112757	WITHOUT_CLASSIFICATION	4.964888724307399E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999499452443743	WITHOUT_CLASSIFICATION	5.005475562570076E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998969699562	WITHOUT_CLASSIFICATION	1.0303004383084469E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998789143719984	WITHOUT_CLASSIFICATION	1.210856280015693E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999532147055703	WITHOUT_CLASSIFICATION	4.678529442961909E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999577688735475	WITHOUT_CLASSIFICATION	4.2231126452562345E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.99999965661996	WITHOUT_CLASSIFICATION	3.433800399498503E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.876714160741356	WITHOUT_CLASSIFICATION	0.12328583925864402	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999828612645387	WITHOUT_CLASSIFICATION	1.7138735461309625E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999579105019394	WITHOUT_CLASSIFICATION	4.2089498060633666E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9998106666827357	WITHOUT_CLASSIFICATION	1.893333172643172E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999065992701425	WITHOUT_CLASSIFICATION	9.340072985749706E-5	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999957011821246	WITHOUT_CLASSIFICATION	4.298817875416049E-6	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999973934793292	WITHOUT_CLASSIFICATION	2.6065206707934324E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999907563841305	WITHOUT_CLASSIFICATION	9.243615869482288E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999879242895403	WITHOUT_CLASSIFICATION	1.2075710459715817E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999879242895403	WITHOUT_CLASSIFICATION	1.2075710459715817E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999614842638654	WITHOUT_CLASSIFICATION	3.8515736134697625E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999961890183239	WITHOUT_CLASSIFICATION	3.8109816760058293E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.996426060600465	WITHOUT_CLASSIFICATION	0.003573939399535056	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999847626349443	WITHOUT_CLASSIFICATION	1.5237365055775812E-5	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999862936570664	WITHOUT_CLASSIFICATION	1.370634293359615E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999962122400549	WITHOUT_CLASSIFICATION	3.7877599450259885E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.999808926803077	WITHOUT_CLASSIFICATION	1.910731969231177E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999531678126877	WITHOUT_CLASSIFICATION	4.6832187312244554E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999173812347953	WITHOUT_CLASSIFICATION	8.26187652046499E-5	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997264680484611	WITHOUT_CLASSIFICATION	2.7353195153889274E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999588337610384	WITHOUT_CLASSIFICATION	4.116623896160778E-5	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999995527984824	WITHOUT_CLASSIFICATION	4.47201517525557E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999999981700449	WITHOUT_CLASSIFICATION	1.8299550991842577E-8	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999998205454406	WITHOUT_CLASSIFICATION	1.794545593560483E-7	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9996281691427304	WITHOUT_CLASSIFICATION	3.7183085726957154E-4	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999592548204373	WITHOUT_CLASSIFICATION	4.074517956267193E-5	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999938572848927	WITHOUT_CLASSIFICATION	6.1427151073140725E-6	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999943407757721	WITHOUT_CLASSIFICATION	5.659224227973829E-6	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999190752522529	WITHOUT_CLASSIFICATION	8.092474774710154E-5	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999501005507576	WITHOUT_CLASSIFICATION	4.989944924239237E-5	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999870303262796	WITHOUT_CLASSIFICATION	1.2969673720520543E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999919370431349	WITHOUT_CLASSIFICATION	8.062956865072693E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9996729597322431	WITHOUT_CLASSIFICATION	3.270402677568575E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999487744252635	WITHOUT_CLASSIFICATION	5.122557473641523E-5	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999975167249926	WITHOUT_CLASSIFICATION	2.4832750073635703E-6	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999993565264366	WITHOUT_CLASSIFICATION	6.43473563528337E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999859109201175	WITHOUT_CLASSIFICATION	1.4089079882425102E-5	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.8433003388104532	WITHOUT_CLASSIFICATION	0.15669966118954676	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999117687006902	WITHOUT_CLASSIFICATION	8.823129930970715E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998450578985008	WITHOUT_CLASSIFICATION	1.54942101499271E-4	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999516994673069	WITHOUT_CLASSIFICATION	4.8300532693123656E-5	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999505481934381	WITHOUT_CLASSIFICATION	4.945180656191181E-5	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999081830022167	WITHOUT_CLASSIFICATION	9.181699778329828E-5	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999765750986219	WITHOUT_CLASSIFICATION	2.3424901378073562E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999804059573469	WITHOUT_CLASSIFICATION	1.9594042652965973E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999613094484743	WITHOUT_CLASSIFICATION	3.8690551525779396E-5	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999864378739365	WITHOUT_CLASSIFICATION	1.3562126063480489E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999653704365327	WITHOUT_CLASSIFICATION	3.4629563467309896E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999897359948811	WITHOUT_CLASSIFICATION	1.0264005118898047E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999897359948811	WITHOUT_CLASSIFICATION	1.0264005118898047E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999090177063538	WITHOUT_CLASSIFICATION	9.09822936462637E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999661121313692	WITHOUT_CLASSIFICATION	3.388786863073002E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999990492753726	WITHOUT_CLASSIFICATION	9.507246273804903E-7	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999990492753726	WITHOUT_CLASSIFICATION	9.507246273804903E-7	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999837314470319	WITHOUT_CLASSIFICATION	1.6268552968102345E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999777825711207	WITHOUT_CLASSIFICATION	2.2217428879306232E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999887936997601	WITHOUT_CLASSIFICATION	1.1206300239900259E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999986550936574	WITHOUT_CLASSIFICATION	1.344906342629434E-6	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999967108490421	WITHOUT_CLASSIFICATION	3.2891509578906165E-5	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999547309487306	WITHOUT_CLASSIFICATION	4.526905126944496E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999962236824279	WITHOUT_CLASSIFICATION	3.77631757221877E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999962236824279	WITHOUT_CLASSIFICATION	3.77631757221877E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999547309487306	WITHOUT_CLASSIFICATION	4.526905126944496E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9990669870469354	WITHOUT_CLASSIFICATION	9.33012953064631E-4	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999370550098634	WITHOUT_CLASSIFICATION	6.294499013653792E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999336764361989	WITHOUT_CLASSIFICATION	6.632356380111975E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999336764361989	WITHOUT_CLASSIFICATION	6.632356380111975E-5	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9998696518350506	WITHOUT_CLASSIFICATION	1.3034816494938447E-4	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999403475838856	WITHOUT_CLASSIFICATION	5.9652416114426164E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996870470975073	WITHOUT_CLASSIFICATION	3.129529024926792E-4	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999890924953325	WITHOUT_CLASSIFICATION	1.0907504667428956E-5	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999968750374131	WITHOUT_CLASSIFICATION	3.1249625870217354E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999412217160893	WITHOUT_CLASSIFICATION	5.8778283910749354E-5	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999714988322101	WITHOUT_CLASSIFICATION	2.8501167789754987E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9997353255410469	WITHOUT_CLASSIFICATION	2.6467445895306707E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999863435912408	WITHOUT_CLASSIFICATION	1.3656408759196834E-5	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999977605076744	WITHOUT_CLASSIFICATION	2.239492325566934E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998756671865894	WITHOUT_CLASSIFICATION	1.243328134105116E-4	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9677095799516343	WITHOUT_CLASSIFICATION	0.03229042004836565	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9112086187233984	WITHOUT_CLASSIFICATION	0.08879138127660148	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999988334602359	WITHOUT_CLASSIFICATION	1.1665397641166866E-6	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.999957967131762	WITHOUT_CLASSIFICATION	4.203286823801788E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999943473363355	WITHOUT_CLASSIFICATION	5.652663664466069E-6	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999984046392398	WITHOUT_CLASSIFICATION	1.5953607601894092E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9921978839955066	WITHOUT_CLASSIFICATION	0.007802116004493391	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9980399550181082	WITHOUT_CLASSIFICATION	0.001960044981891885	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9997730649097915	WITHOUT_CLASSIFICATION	2.269350902085391E-4	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.998976251987868	WITHOUT_CLASSIFICATION	0.0010237480121319574	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997948655798177	WITHOUT_CLASSIFICATION	2.0513442018227452E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9982212889623838	WITHOUT_CLASSIFICATION	0.0017787110376162223	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999968060470387	WITHOUT_CLASSIFICATION	3.193952961397939E-6	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999918613337493	WITHOUT_CLASSIFICATION	8.138666250695692E-6	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999852817211204	WITHOUT_CLASSIFICATION	1.4718278879624479E-5	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9995906714493847	WITHOUT_CLASSIFICATION	4.093285506152149E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999994828117068	WITHOUT_CLASSIFICATION	5.171882931378383E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999800162120241	WITHOUT_CLASSIFICATION	1.998378797586467E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999624667241839	WITHOUT_CLASSIFICATION	3.7533275816033825E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999662785480199	WITHOUT_CLASSIFICATION	3.37214519801231E-5	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999870783913242	WITHOUT_CLASSIFICATION	1.2921608675871584E-5	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.999935370757967	WITHOUT_CLASSIFICATION	6.462924203298196E-5	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999375581784773	WITHOUT_CLASSIFICATION	6.244182152264911E-5	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999514598020871	WITHOUT_CLASSIFICATION	4.8540197912936324E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999603934001201	WITHOUT_CLASSIFICATION	3.960659987994987E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999981075798727	WITHOUT_CLASSIFICATION	1.8924201272471593E-6	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999452594482326	WITHOUT_CLASSIFICATION	5.4740551767343974E-5	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.999973563358064	WITHOUT_CLASSIFICATION	2.6436641936114155E-5	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9998632317043976	WITHOUT_CLASSIFICATION	1.367682956023433E-4	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999760735469212	WITHOUT_CLASSIFICATION	2.3926453078777415E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999707149622502	WITHOUT_CLASSIFICATION	2.9285037749812626E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999387887243778	WITHOUT_CLASSIFICATION	6.121127562223926E-5	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999741876831328	WITHOUT_CLASSIFICATION	2.581231686709919E-5	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999019222317912	WITHOUT_CLASSIFICATION	9.807776820878688E-5	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9951072348804176	WITHOUT_CLASSIFICATION	0.004892765119582413	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998669985965639	WITHOUT_CLASSIFICATION	1.3300140343605225E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.999954530294595	WITHOUT_CLASSIFICATION	4.5469705404939404E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998714851621349	WITHOUT_CLASSIFICATION	1.285148378652028E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.7509479397166675	IMPLEMENTATION	0.2490520602833326	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9989392962969282	WITHOUT_CLASSIFICATION	0.0010607037030716869	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999877869028092	WITHOUT_CLASSIFICATION	1.221309719087788E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999942094397767	WITHOUT_CLASSIFICATION	5.790560223367203E-6	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999868744579241	WITHOUT_CLASSIFICATION	1.3125542075957601E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999663849767328	WITHOUT_CLASSIFICATION	3.361502326718976E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.99941464943254	WITHOUT_CLASSIFICATION	5.853505674600263E-4	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999999010700957	WITHOUT_CLASSIFICATION	9.892990422823327E-8	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998526027393839	WITHOUT_CLASSIFICATION	1.4739726061610496E-4	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998526027393839	WITHOUT_CLASSIFICATION	1.4739726061610496E-4	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999911148	WITHOUT_CLASSIFICATION	8.88521845060614E-12	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999446884232702	WITHOUT_CLASSIFICATION	5.53115767297544E-5	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999998570252944	WITHOUT_CLASSIFICATION	1.4297470559923285E-6	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999977528554852	WITHOUT_CLASSIFICATION	2.2471445147706826E-6	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999765422450393	WITHOUT_CLASSIFICATION	2.345775496072789E-5	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999899665772215	WITHOUT_CLASSIFICATION	1.0033422778615016E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999990186637396	WITHOUT_CLASSIFICATION	9.813362603924174E-6	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999995260022	WITHOUT_CLASSIFICATION	4.7399780057914945E-9	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999963087857066	WITHOUT_CLASSIFICATION	3.691214293489108E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999981695039614	WITHOUT_CLASSIFICATION	1.8304960385533017E-6	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999687615515148	WITHOUT_CLASSIFICATION	3.123844848511323E-5	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996838335341078	WITHOUT_CLASSIFICATION	3.1616646589214257E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999517019679	WITHOUT_CLASSIFICATION	4.8298032091732706E-8	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9997980951985388	WITHOUT_CLASSIFICATION	2.019048014611749E-4	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999982789526168	WITHOUT_CLASSIFICATION	1.7210473831558466E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999982789526168	WITHOUT_CLASSIFICATION	1.7210473831558466E-6	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.999997819768145	WITHOUT_CLASSIFICATION	2.180231855052992E-6	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999822327073675	WITHOUT_CLASSIFICATION	1.7767292632503537E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999911288127341	WITHOUT_CLASSIFICATION	8.871187265867108E-6	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999976163992328	WITHOUT_CLASSIFICATION	2.383600767172346E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999877734160273	WITHOUT_CLASSIFICATION	1.2226583972807444E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690651764251	WITHOUT_CLASSIFICATION	3.093482357495717E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998927200977501	WITHOUT_CLASSIFICATION	1.0727990224993422E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999914505186498	WITHOUT_CLASSIFICATION	8.549481350246213E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999848324555584	WITHOUT_CLASSIFICATION	1.5167544441709624E-5	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999913451658606	WITHOUT_CLASSIFICATION	8.654834139293787E-6	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999426840877222	WITHOUT_CLASSIFICATION	5.731591227779605E-5	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9985806650914714	WITHOUT_CLASSIFICATION	0.0014193349085286353	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999375242287232	WITHOUT_CLASSIFICATION	6.247577127681428E-5	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999951660867238	WITHOUT_CLASSIFICATION	4.833913276211572E-6	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9998550893461572	WITHOUT_CLASSIFICATION	1.4491065384286559E-4	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9994289873175465	WITHOUT_CLASSIFICATION	5.710126824534899E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9996874098032456	WITHOUT_CLASSIFICATION	3.125901967544091E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999962986217313	WITHOUT_CLASSIFICATION	3.7013782685910437E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999913494673291	WITHOUT_CLASSIFICATION	8.65053267085404E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999831488120359	WITHOUT_CLASSIFICATION	1.6851187964152288E-5	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999994175091008	WITHOUT_CLASSIFICATION	5.824908991670612E-7	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.999998791701496	WITHOUT_CLASSIFICATION	1.2082985040414904E-6	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999997936002812	WITHOUT_CLASSIFICATION	2.0639971872709862E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999995822515519	WITHOUT_CLASSIFICATION	4.1774844808352907E-7	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999967728836726	WITHOUT_CLASSIFICATION	3.2271163273313856E-6	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999353584134847	WITHOUT_CLASSIFICATION	6.46415865153813E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998884356216463	WITHOUT_CLASSIFICATION	1.1156437835367499E-4	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9995299808960435	WITHOUT_CLASSIFICATION	4.700191039564342E-4	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999397092887744	WITHOUT_CLASSIFICATION	6.029071122561216E-5	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999783803799469	WITHOUT_CLASSIFICATION	2.1619620053116572E-5	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999300428177033	WITHOUT_CLASSIFICATION	6.995718229676713E-5	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999979126861123	WITHOUT_CLASSIFICATION	2.0873138878106325E-6	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999957613052102	WITHOUT_CLASSIFICATION	4.238694789811067E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999869554884335	WITHOUT_CLASSIFICATION	1.3044511566491676E-5	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999966250599349	WITHOUT_CLASSIFICATION	3.3749400649717714E-6	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9957631140873842	WITHOUT_CLASSIFICATION	0.004236885912615809	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.8607330437945939	WITHOUT_CLASSIFICATION	0.13926695620540608	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999436959095056	WITHOUT_CLASSIFICATION	5.630409049445834E-5	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999697121699306	WITHOUT_CLASSIFICATION	3.0287830069378463E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999647805851	WITHOUT_CLASSIFICATION	3.5219414903544234E-7	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9791217019266787	WITHOUT_CLASSIFICATION	0.020878298073321252	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999946740109443	WITHOUT_CLASSIFICATION	5.32598905567785E-6	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996172967905598	WITHOUT_CLASSIFICATION	3.8270320944013166E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996172967905598	WITHOUT_CLASSIFICATION	3.8270320944013166E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999987127107249	WITHOUT_CLASSIFICATION	1.2872892750453824E-6	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999937283218723	WITHOUT_CLASSIFICATION	6.271678127745862E-6	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9927316742663791	WITHOUT_CLASSIFICATION	0.007268325733620905	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999988671808519	WITHOUT_CLASSIFICATION	1.1328191480971887E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9718885941645875	WITHOUT_CLASSIFICATION	0.028111405835412575	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998549790663	WITHOUT_CLASSIFICATION	1.4502093370747027E-7	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999919298835009	WITHOUT_CLASSIFICATION	8.070116498976396E-6	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999135847935343	WITHOUT_CLASSIFICATION	8.64152064656954E-5	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999914767638636	WITHOUT_CLASSIFICATION	8.523236136409532E-6	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998775762955895	WITHOUT_CLASSIFICATION	1.2242370441053078E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998763012339681	WITHOUT_CLASSIFICATION	1.2369876603191438E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999932014458108	WITHOUT_CLASSIFICATION	6.798554189143924E-6	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999337512377	WITHOUT_CLASSIFICATION	6.624876224233675E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999982052259238	WITHOUT_CLASSIFICATION	1.794774076287782E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.985587755802676	WITHOUT_CLASSIFICATION	0.014412244197324129	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999842216695404	WITHOUT_CLASSIFICATION	1.5778330459644777E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999762009558196	WITHOUT_CLASSIFICATION	2.3799044180364815E-5	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999936027030019	WITHOUT_CLASSIFICATION	6.397296998091744E-6	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999915788394246	WITHOUT_CLASSIFICATION	8.421160575399133E-5	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999929699492361	WITHOUT_CLASSIFICATION	7.030050763864562E-6	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999689786121442	WITHOUT_CLASSIFICATION	3.102138785583645E-5	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996361543972	WITHOUT_CLASSIFICATION	3.6384560272053466E-7	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9996973409863322	WITHOUT_CLASSIFICATION	3.0265901366782733E-4	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9979455646290444	WITHOUT_CLASSIFICATION	0.002054435370955529	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.999985874834647	WITHOUT_CLASSIFICATION	1.4125165353073166E-5	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999948486115947	WITHOUT_CLASSIFICATION	5.151388405314232E-6	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999340316923925	WITHOUT_CLASSIFICATION	6.59683076076029E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9996635343383429	WITHOUT_CLASSIFICATION	3.364656616571564E-4	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999356959826359	WITHOUT_CLASSIFICATION	6.430401736414774E-5	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.995421518426226	WITHOUT_CLASSIFICATION	0.004578481573774106	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.999965700735324	WITHOUT_CLASSIFICATION	3.4299264676142316E-5	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9996998965200853	WITHOUT_CLASSIFICATION	3.001034799146215E-4	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999992957611048	WITHOUT_CLASSIFICATION	7.04238895250532E-7	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999992773019177	WITHOUT_CLASSIFICATION	7.226980822491291E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999870464032773	WITHOUT_CLASSIFICATION	1.2953596722688246E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999885240594	WITHOUT_CLASSIFICATION	1.147594066071408E-8	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999901257844859	WITHOUT_CLASSIFICATION	9.874215514175202E-6	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999991683369283	WITHOUT_CLASSIFICATION	8.316630718795013E-7	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999470621377491	WITHOUT_CLASSIFICATION	5.29378622509615E-5	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999996659260631	WITHOUT_CLASSIFICATION	3.3407393690804923E-6	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999530758553112	WITHOUT_CLASSIFICATION	4.692414468870565E-5	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999882944737079	WITHOUT_CLASSIFICATION	1.1705526292120917E-5	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999754326591356	WITHOUT_CLASSIFICATION	2.4567340864407094E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999995456050219	WITHOUT_CLASSIFICATION	4.543949782170515E-7	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999727279297793	WITHOUT_CLASSIFICATION	2.7272070220671463E-5	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9996221370343724	WITHOUT_CLASSIFICATION	3.7786296562766433E-4	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999891034910493	WITHOUT_CLASSIFICATION	1.0896508950698496E-4	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9945524310398421	WITHOUT_CLASSIFICATION	0.005447568960157831	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998176431674	WITHOUT_CLASSIFICATION	1.8235683267126215E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999517019679	WITHOUT_CLASSIFICATION	4.8298032091732706E-8	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999949443517792	WITHOUT_CLASSIFICATION	5.055648220775321E-6	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995080568076	WITHOUT_CLASSIFICATION	4.919431923696845E-7	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999239041824504	WITHOUT_CLASSIFICATION	7.609581754962961E-5	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999999982973185	WITHOUT_CLASSIFICATION	1.7026814927817326E-8	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999999996302818	WITHOUT_CLASSIFICATION	3.697182070464517E-9	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998563961423087	WITHOUT_CLASSIFICATION	1.4360385769135242E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998166728143796	WITHOUT_CLASSIFICATION	1.833271856205582E-4	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.8422018041174413	WITHOUT_CLASSIFICATION	0.1577981958825587	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999989491192767	WITHOUT_CLASSIFICATION	1.0508807233007459E-6	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9898187828503039	WITHOUT_CLASSIFICATION	0.010181217149696166	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999994820954827	WITHOUT_CLASSIFICATION	5.179045172793252E-7	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999545012368112	WITHOUT_CLASSIFICATION	4.549876318871802E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994146423330434	WITHOUT_CLASSIFICATION	5.853576669566603E-4	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999970643412381	WITHOUT_CLASSIFICATION	2.93565876179913E-6	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.993959625183157	WITHOUT_CLASSIFICATION	0.006040374816843065	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904196678651	WITHOUT_CLASSIFICATION	9.580332134844934E-6	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998568559974171	WITHOUT_CLASSIFICATION	1.4314400258289505E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999817530168694	WITHOUT_CLASSIFICATION	1.8246983130570427E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9995329256842801	WITHOUT_CLASSIFICATION	4.670743157198685E-4	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999981022202943	WITHOUT_CLASSIFICATION	1.897779705682418E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904196678651	WITHOUT_CLASSIFICATION	9.580332134844934E-6	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.797566795485975	WITHOUT_CLASSIFICATION	0.20243320451402505	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999696522300616	WITHOUT_CLASSIFICATION	3.0347769938381222E-5	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999917605933856	WITHOUT_CLASSIFICATION	8.239406614513863E-6	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9993733493862317	WITHOUT_CLASSIFICATION	6.266506137683312E-4	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999701688350685	WITHOUT_CLASSIFICATION	2.9831164931524794E-5	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999283809207912	WITHOUT_CLASSIFICATION	7.161907920876561E-5	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999987975731056	WITHOUT_CLASSIFICATION	1.202426894449725E-6	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9889671413207939	WITHOUT_CLASSIFICATION	0.011032858679206064	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999986902879068	WITHOUT_CLASSIFICATION	1.3097120932371252E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999444047381003	WITHOUT_CLASSIFICATION	5.559526189961097E-5	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998223511450133	WITHOUT_CLASSIFICATION	1.7764885498683196E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9975623731070316	WITHOUT_CLASSIFICATION	0.002437626892968526	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999824997174943	WITHOUT_CLASSIFICATION	1.750028250566735E-5	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9972349325754388	WITHOUT_CLASSIFICATION	0.002765067424561091	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999593983172826	WITHOUT_CLASSIFICATION	4.060168271735533E-5	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998689685789138	WITHOUT_CLASSIFICATION	1.3103142108615492E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9996729597322431	WITHOUT_CLASSIFICATION	3.270402677568575E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999970733145168	WITHOUT_CLASSIFICATION	2.9266854830869338E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999952259625041	WITHOUT_CLASSIFICATION	4.7740374958733694E-6	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9979481267330806	WITHOUT_CLASSIFICATION	0.0020518732669193144	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9985961915036998	WITHOUT_CLASSIFICATION	0.0014038084963000847	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9992966144738097	WITHOUT_CLASSIFICATION	7.0338552619027E-4	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999974964206466	WITHOUT_CLASSIFICATION	2.5035793533780677E-6	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9996222328569012	WITHOUT_CLASSIFICATION	3.777671430987574E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999398337	WITHOUT_CLASSIFICATION	6.016632202050169E-11	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999975275376376	WITHOUT_CLASSIFICATION	2.4724623623802044E-6	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999957525788745	WITHOUT_CLASSIFICATION	4.247421125509432E-5	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998683854225321	WITHOUT_CLASSIFICATION	1.3161457746794174E-4	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999804838424043	WITHOUT_CLASSIFICATION	1.951615759571257E-5	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9993188249799341	WITHOUT_CLASSIFICATION	6.811750200659825E-4	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9995939639243819	WITHOUT_CLASSIFICATION	4.060360756181091E-4	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999652664888456	WITHOUT_CLASSIFICATION	3.4733511154316906E-5	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999970838962881	WITHOUT_CLASSIFICATION	2.916103711899875E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999903492148916	WITHOUT_CLASSIFICATION	9.650785108360091E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999998120305159	WITHOUT_CLASSIFICATION	1.8796948409722379E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999684890882	WITHOUT_CLASSIFICATION	3.151091177017998E-8	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999729620382	WITHOUT_CLASSIFICATION	2.7037961821407545E-8	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998951570047	WITHOUT_CLASSIFICATION	1.048429952648304E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9992934402264905	WITHOUT_CLASSIFICATION	7.065597735095365E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999677433207205	WITHOUT_CLASSIFICATION	3.2256679279596416E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999048785229356	WITHOUT_CLASSIFICATION	9.51214770643461E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999900865605696	WITHOUT_CLASSIFICATION	9.913439430345893E-6	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999900865605696	WITHOUT_CLASSIFICATION	9.913439430345893E-6	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999586974343349	WITHOUT_CLASSIFICATION	4.130256566521525E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999984570484206	WITHOUT_CLASSIFICATION	1.5429515793352494E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999688343209053	WITHOUT_CLASSIFICATION	3.1165679094610166E-5	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999960103657487	WITHOUT_CLASSIFICATION	3.989634251336572E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999567457852707	WITHOUT_CLASSIFICATION	4.325421472933186E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999567457852707	WITHOUT_CLASSIFICATION	4.325421472933186E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999681328003774	WITHOUT_CLASSIFICATION	3.1867199622591343E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999932196215948	WITHOUT_CLASSIFICATION	6.780378405295764E-6	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9995934516906086	WITHOUT_CLASSIFICATION	4.065483093914273E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998430882263103	WITHOUT_CLASSIFICATION	1.5691177368980748E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9998568559974171	WITHOUT_CLASSIFICATION	1.4314400258289505E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9992412801463864	WITHOUT_CLASSIFICATION	7.587198536136177E-4	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9665472560325482	WITHOUT_CLASSIFICATION	0.03345274396745172	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999982727159282	WITHOUT_CLASSIFICATION	1.7272840717941665E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999441870646842	WITHOUT_CLASSIFICATION	5.581293531580963E-5	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999425591438479	WITHOUT_CLASSIFICATION	5.7440856152220224E-5	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999808179838342	WITHOUT_CLASSIFICATION	1.9182016165717836E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950663608937	WITHOUT_CLASSIFICATION	4.9336391062933434E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950663608937	WITHOUT_CLASSIFICATION	4.9336391062933434E-6	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998689685789138	WITHOUT_CLASSIFICATION	1.3103142108615492E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999498891509344	WITHOUT_CLASSIFICATION	5.01108490655007E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999530551908025	WITHOUT_CLASSIFICATION	4.694480919765228E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.999983420203612	WITHOUT_CLASSIFICATION	1.6579796387978084E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999832196924477	WITHOUT_CLASSIFICATION	1.6780307552173834E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940825682846	WITHOUT_CLASSIFICATION	5.917431715402831E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999990370614261	WITHOUT_CLASSIFICATION	9.629385739538298E-7	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999945760123681	WITHOUT_CLASSIFICATION	5.423987631962651E-6	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999161571583257	WITHOUT_CLASSIFICATION	8.38428416742852E-5	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999732781950752	WITHOUT_CLASSIFICATION	2.6721804924852293E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999444047381003	WITHOUT_CLASSIFICATION	5.559526189961097E-5	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999930230609531	WITHOUT_CLASSIFICATION	6.976939046920045E-6	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999243660117532	WITHOUT_CLASSIFICATION	7.563398824686479E-5	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999993021972748	WITHOUT_CLASSIFICATION	6.978027250631871E-7	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999421631064922	WITHOUT_CLASSIFICATION	5.7836893507916696E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999440956848525	WITHOUT_CLASSIFICATION	5.590431514744728E-5	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999486156689731	WITHOUT_CLASSIFICATION	5.138433102687271E-5	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999044972417119	WITHOUT_CLASSIFICATION	9.550275828811391E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9998513278721515	WITHOUT_CLASSIFICATION	1.4867212784847955E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998585934632874	WITHOUT_CLASSIFICATION	1.4140653671261482E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99816165149291	WITHOUT_CLASSIFICATION	0.0018383485070899255	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99816165149291	WITHOUT_CLASSIFICATION	0.0018383485070899255	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999837343053022	WITHOUT_CLASSIFICATION	1.6265694697760706E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999983846668955	WITHOUT_CLASSIFICATION	1.615333104464425E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9996519426627813	WITHOUT_CLASSIFICATION	3.480573372185864E-4	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999324715678402	WITHOUT_CLASSIFICATION	6.752843215988284E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999434927826897	WITHOUT_CLASSIFICATION	5.65072173103582E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999258739794731	WITHOUT_CLASSIFICATION	7.412602052690201E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999804130079072	WITHOUT_CLASSIFICATION	1.95869920927586E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999884972	WITHOUT_CLASSIFICATION	1.15026569375922E-11	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998261326262875	WITHOUT_CLASSIFICATION	1.7386737371255205E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999930491887642	WITHOUT_CLASSIFICATION	6.950811235785803E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953790342657	WITHOUT_CLASSIFICATION	4.620965734294044E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998964117249594	WITHOUT_CLASSIFICATION	1.0358827504072633E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999870823440926	WITHOUT_CLASSIFICATION	1.2917655907363918E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999990317899018	WITHOUT_CLASSIFICATION	9.682100981125727E-7	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999992104389819	WITHOUT_CLASSIFICATION	7.89561018037264E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999937829813539	WITHOUT_CLASSIFICATION	6.217018646101852E-5	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9998444299621058	WITHOUT_CLASSIFICATION	1.5557003789417746E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999613859570858	WITHOUT_CLASSIFICATION	3.8614042914156136E-5	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9977420420758196	WITHOUT_CLASSIFICATION	0.0022579579241803938	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999938527375	WITHOUT_CLASSIFICATION	6.147262520688104E-9	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999984306696553	WITHOUT_CLASSIFICATION	1.5693303447427832E-6	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999943286443	WITHOUT_CLASSIFICATION	5.671355673417157E-9	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9996870470975073	WITHOUT_CLASSIFICATION	3.129529024926792E-4	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999646508747527	WITHOUT_CLASSIFICATION	3.534912524722629E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889705301073	WITHOUT_CLASSIFICATION	1.102946989275017E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999889705301073	WITHOUT_CLASSIFICATION	1.102946989275017E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999213448437955	WITHOUT_CLASSIFICATION	7.865515620462536E-5	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9976617698177821	WITHOUT_CLASSIFICATION	0.0023382301822178456	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999894544591124	WITHOUT_CLASSIFICATION	1.0545540887715701E-5	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999780654908585	WITHOUT_CLASSIFICATION	2.1934509141436653E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999866147701795	WITHOUT_CLASSIFICATION	1.3385229820535484E-5	IMPLEMENTATION
