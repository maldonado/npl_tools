todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9992702255450591	WITHOUT_CLASSIFICATION	7.29774454940852E-4	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9992702255450591	WITHOUT_CLASSIFICATION	7.29774454940852E-4	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.5163980296961418	WITHOUT_CLASSIFICATION	0.48360197030385826	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6801148121877927	WITHOUT_CLASSIFICATION	0.3198851878122073	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8442115336065937	WITHOUT_CLASSIFICATION	0.15578846639340624	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9283071117156391	IMPLEMENTATION	0.07169288828436093	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9977156025924362	WITHOUT_CLASSIFICATION	0.0022843974075639306	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.5868265957775736	IMPLEMENTATION	0.4131734042224265	WITHOUT_CLASSIFICATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.6159048967793981	WITHOUT_CLASSIFICATION	0.38409510322060186	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5334212634956427	WITHOUT_CLASSIFICATION	0.46657873650435744	IMPLEMENTATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9936364997605353	WITHOUT_CLASSIFICATION	0.006363500239464672	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9283071117156391	IMPLEMENTATION	0.07169288828436093	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9204422760831643	IMPLEMENTATION	0.07955772391683569	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9204422760831643	IMPLEMENTATION	0.07955772391683569	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9787069732849224	WITHOUT_CLASSIFICATION	0.021293026715077684	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5076448776432086	IMPLEMENTATION	0.4923551223567913	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999994840842596	IMPLEMENTATION	5.159157404477814E-7	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8551429150252616	WITHOUT_CLASSIFICATION	0.14485708497473834	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999954736529698	WITHOUT_CLASSIFICATION	4.526347030105587E-6	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7331847943363056	IMPLEMENTATION	0.26681520566369443	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.895114761588171	IMPLEMENTATION	0.10488523841182895	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9977292846809731	WITHOUT_CLASSIFICATION	0.0022707153190269372	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.8058888318475877	IMPLEMENTATION	0.1941111681524122	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9536753464689184	IMPLEMENTATION	0.04632465353108163	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9536753464689184	IMPLEMENTATION	0.04632465353108163	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.8804439713675734	WITHOUT_CLASSIFICATION	0.1195560286324266	IMPLEMENTATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.7776298778324403	IMPLEMENTATION	0.2223701221675598	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.5398975456916864	IMPLEMENTATION	0.46010245430831365	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.5897171461615554	IMPLEMENTATION	0.4102828538384447	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9880901018629438	IMPLEMENTATION	0.011909898137056188	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6391235809187022	IMPLEMENTATION	0.36087641908129775	WITHOUT_CLASSIFICATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5868265957775736	IMPLEMENTATION	0.4131734042224265	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9998134722427178	WITHOUT_CLASSIFICATION	1.865277572821243E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.7308115930692555	IMPLEMENTATION	0.26918840693074453	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9993674088223021	IMPLEMENTATION	6.325911776979498E-4	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.6378125219577601	IMPLEMENTATION	0.36218747804224005	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.9355412306966051	IMPLEMENTATION	0.06445876930339485	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5085630417691411	WITHOUT_CLASSIFICATION	0.4914369582308589	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.7085185179163459	WITHOUT_CLASSIFICATION	0.29148148208365426	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9711140916520425	IMPLEMENTATION	0.02888590834795743	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9711140916520425	IMPLEMENTATION	0.02888590834795743	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9674748289052326	WITHOUT_CLASSIFICATION	0.03252517109476732	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999581221123168	WITHOUT_CLASSIFICATION	4.187788768322574E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9977797317877818	WITHOUT_CLASSIFICATION	0.0022202682122183185	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9952566563105394	IMPLEMENTATION	0.0047433436894606254	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.5205145059684866	WITHOUT_CLASSIFICATION	0.47948549403151336	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.5062081527406509	IMPLEMENTATION	0.4937918472593491	WITHOUT_CLASSIFICATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.8350370261524139	WITHOUT_CLASSIFICATION	0.16496297384758613	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9997711495892319	WITHOUT_CLASSIFICATION	2.2885041076821987E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.538805853137265	WITHOUT_CLASSIFICATION	0.461194146862735	IMPLEMENTATION
TODO: cache this in an instvar	IMPLEMENTATION	0.8190806691629388	WITHOUT_CLASSIFICATION	0.18091933083706122	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.6576321441527162	WITHOUT_CLASSIFICATION	0.3423678558472839	IMPLEMENTATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.6158615585672691	WITHOUT_CLASSIFICATION	0.38413844143273096	IMPLEMENTATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9829450486856068	IMPLEMENTATION	0.017054951314393184	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6019797576723817	IMPLEMENTATION	0.3980202423276182	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.5086193023193522	IMPLEMENTATION	0.4913806976806479	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6019797576723817	IMPLEMENTATION	0.3980202423276182	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9987914056884959	IMPLEMENTATION	0.0012085943115041791	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.8042804276135188	IMPLEMENTATION	0.19571957238648113	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.6019797576723817	IMPLEMENTATION	0.3980202423276182	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999384689714792	WITHOUT_CLASSIFICATION	6.15310285208036E-5	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999384689714792	WITHOUT_CLASSIFICATION	6.15310285208036E-5	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9999964575450186	IMPLEMENTATION	3.5424549813383863E-6	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.574215741999557	WITHOUT_CLASSIFICATION	0.4257842580004429	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999924483878704	WITHOUT_CLASSIFICATION	7.551612129541148E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999500783147974	WITHOUT_CLASSIFICATION	4.9921685202555264E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999500783147974	WITHOUT_CLASSIFICATION	4.9921685202555264E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999331194783069	WITHOUT_CLASSIFICATION	6.688052169317896E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999824614290382	WITHOUT_CLASSIFICATION	1.753857096173038E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.999946736148959	WITHOUT_CLASSIFICATION	5.326385104088618E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.999946736148959	WITHOUT_CLASSIFICATION	5.326385104088618E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999910891097585	WITHOUT_CLASSIFICATION	8.910890241474893E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999414165631973	WITHOUT_CLASSIFICATION	5.8583436802544037E-5	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999903360260464	WITHOUT_CLASSIFICATION	9.663973953656054E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999870424514081	WITHOUT_CLASSIFICATION	1.2957548591827628E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977728040622	WITHOUT_CLASSIFICATION	2.2271959378028123E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977728040622	WITHOUT_CLASSIFICATION	2.2271959378028123E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999554427962593	WITHOUT_CLASSIFICATION	4.455720374068965E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9984332555633748	WITHOUT_CLASSIFICATION	0.0015667444366252049	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999657372932464	WITHOUT_CLASSIFICATION	3.426270675362771E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999997895735746	WITHOUT_CLASSIFICATION	2.104264253967318E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999430778239	WITHOUT_CLASSIFICATION	5.692217609563634E-7	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999559885949824	WITHOUT_CLASSIFICATION	4.401140501765032E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9998698085794172	WITHOUT_CLASSIFICATION	1.301914205827861E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999057942335108	WITHOUT_CLASSIFICATION	9.42057664891676E-5	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999344452416822	WITHOUT_CLASSIFICATION	6.555475831783908E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979823412285	WITHOUT_CLASSIFICATION	2.017658771514669E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999557453883307	WITHOUT_CLASSIFICATION	4.425461166931974E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999557453883307	WITHOUT_CLASSIFICATION	4.425461166931974E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9991692036620253	WITHOUT_CLASSIFICATION	8.307963379746282E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999590626279676	WITHOUT_CLASSIFICATION	4.09373720324233E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999916556399758	WITHOUT_CLASSIFICATION	8.344360024144645E-6	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999594126040398	WITHOUT_CLASSIFICATION	4.058739596027678E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9487335740470509	WITHOUT_CLASSIFICATION	0.05126642595294902	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999991276183788	WITHOUT_CLASSIFICATION	8.723816211930012E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999894655529739	WITHOUT_CLASSIFICATION	1.053444702612371E-5	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999886597851974	WITHOUT_CLASSIFICATION	1.1340214802585686E-5	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999940707473066	WITHOUT_CLASSIFICATION	5.929252693467137E-6	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999450432104013	WITHOUT_CLASSIFICATION	5.495678959864466E-5	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999955224223448	WITHOUT_CLASSIFICATION	4.477577655193334E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997378571874656	WITHOUT_CLASSIFICATION	2.621428125344616E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999989176531223	WITHOUT_CLASSIFICATION	1.082346877707245E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999971169435071	WITHOUT_CLASSIFICATION	2.8830564927770724E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999712537495872	WITHOUT_CLASSIFICATION	2.874625041287207E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999378519118336	WITHOUT_CLASSIFICATION	6.21480881663453E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999373852839497	WITHOUT_CLASSIFICATION	6.26147160502761E-5	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996922726403564	WITHOUT_CLASSIFICATION	3.077273596436122E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9998140894445346	WITHOUT_CLASSIFICATION	1.8591055546521767E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999571826891086	WITHOUT_CLASSIFICATION	4.2817310891434606E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999571826891086	WITHOUT_CLASSIFICATION	4.2817310891434606E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996922726403564	WITHOUT_CLASSIFICATION	3.077273596436122E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9819459660484526	WITHOUT_CLASSIFICATION	0.018054033951547258	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999331917939417	WITHOUT_CLASSIFICATION	6.680820605829266E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999586785747522	WITHOUT_CLASSIFICATION	4.1321425247738545E-5	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999993375986096	WITHOUT_CLASSIFICATION	6.624013903764315E-7	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999823917134812	WITHOUT_CLASSIFICATION	1.7608286518658162E-5	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9981112455553292	WITHOUT_CLASSIFICATION	0.00188875444467085	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998831937081423	WITHOUT_CLASSIFICATION	1.1680629185766803E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9995737633906429	WITHOUT_CLASSIFICATION	4.262366093571045E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9997290540264386	WITHOUT_CLASSIFICATION	2.7094597356135087E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9993887814635685	WITHOUT_CLASSIFICATION	6.112185364316197E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999571826891086	WITHOUT_CLASSIFICATION	4.2817310891434606E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999966118801551	WITHOUT_CLASSIFICATION	3.388119844778719E-6	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9992803741436902	WITHOUT_CLASSIFICATION	7.196258563098361E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999927201941624	WITHOUT_CLASSIFICATION	7.279805837559897E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999984837816525	WITHOUT_CLASSIFICATION	1.5162183475683317E-6	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999789051943546	WITHOUT_CLASSIFICATION	2.1094805645384777E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999970799904542	WITHOUT_CLASSIFICATION	2.920009545829322E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999952707545208	WITHOUT_CLASSIFICATION	4.729245479233939E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999971059752714	WITHOUT_CLASSIFICATION	2.894024728763163E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999387382358698	WITHOUT_CLASSIFICATION	6.12617641302498E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999997540833103	WITHOUT_CLASSIFICATION	2.4591668975651893E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999904212605357	WITHOUT_CLASSIFICATION	9.578739464302401E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999423597667683	WITHOUT_CLASSIFICATION	5.764023323169669E-5	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6419728610881952	IMPLEMENTATION	0.3580271389118049	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9996343256174717	WITHOUT_CLASSIFICATION	3.6567438252832187E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999769870498711	WITHOUT_CLASSIFICATION	2.3012950128819113E-5	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9533022285601682	WITHOUT_CLASSIFICATION	0.046697771439831726	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999996043599325	WITHOUT_CLASSIFICATION	3.956400674931329E-6	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999967525003772	WITHOUT_CLASSIFICATION	3.2474996228449433E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9998554620499427	WITHOUT_CLASSIFICATION	1.4453795005735603E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999763599436147	WITHOUT_CLASSIFICATION	2.364005638529046E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999956285509869	WITHOUT_CLASSIFICATION	4.37144901308968E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999957750870522	WITHOUT_CLASSIFICATION	4.224912947738218E-6	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999926210795717	WITHOUT_CLASSIFICATION	7.378920428426758E-6	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999799945255	WITHOUT_CLASSIFICATION	2.000547457008119E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999957750870522	WITHOUT_CLASSIFICATION	4.224912947738218E-6	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.998207822333815	WITHOUT_CLASSIFICATION	0.0017921776661849818	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999018639754055	WITHOUT_CLASSIFICATION	9.813602459458831E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999444758171647	WITHOUT_CLASSIFICATION	5.552418283532831E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.999952091224528	WITHOUT_CLASSIFICATION	4.7908775472028425E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999743822661026	WITHOUT_CLASSIFICATION	2.561773389746587E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999743822661026	WITHOUT_CLASSIFICATION	2.561773389746587E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999355199199804	WITHOUT_CLASSIFICATION	6.448008001958203E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998523110967	WITHOUT_CLASSIFICATION	1.476889033255819E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999877388181946	WITHOUT_CLASSIFICATION	1.2261181805398621E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999980759215938	WITHOUT_CLASSIFICATION	1.9240784061917197E-6	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9998674296071447	WITHOUT_CLASSIFICATION	1.3257039285534958E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999998073166469	WITHOUT_CLASSIFICATION	1.926833531002889E-6	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999421028372298	WITHOUT_CLASSIFICATION	5.7897162770071006E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.998191568238368	WITHOUT_CLASSIFICATION	0.0018084317616321205	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999712285642689	WITHOUT_CLASSIFICATION	2.8771435731075654E-5	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999947594615017	WITHOUT_CLASSIFICATION	5.240538498199225E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999891715241228	WITHOUT_CLASSIFICATION	1.0828475877202834E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999891715241228	WITHOUT_CLASSIFICATION	1.0828475877202834E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999389155145295	WITHOUT_CLASSIFICATION	6.108448547047117E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999281986846901	WITHOUT_CLASSIFICATION	7.180131530990599E-5	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999876192182852	WITHOUT_CLASSIFICATION	1.2380781714767445E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999891715241228	WITHOUT_CLASSIFICATION	1.0828475877202834E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999389155145295	WITHOUT_CLASSIFICATION	6.108448547047117E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999389155145295	WITHOUT_CLASSIFICATION	6.108448547047117E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999972151701269	WITHOUT_CLASSIFICATION	2.7848298732007454E-6	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999873065059673	WITHOUT_CLASSIFICATION	1.2693494032693005E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999390740455	WITHOUT_CLASSIFICATION	6.09259545028944E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999991690055497	WITHOUT_CLASSIFICATION	8.309944503420983E-7	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9989158286526455	WITHOUT_CLASSIFICATION	0.0010841713473545207	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9989158286526455	WITHOUT_CLASSIFICATION	0.0010841713473545207	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999933719438022	WITHOUT_CLASSIFICATION	6.628056197892525E-6	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999643005722216	WITHOUT_CLASSIFICATION	3.5699427778330125E-5	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999971392263614	WITHOUT_CLASSIFICATION	2.860773638651656E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999982446674287	WITHOUT_CLASSIFICATION	1.7553325713239563E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999982446674287	WITHOUT_CLASSIFICATION	1.7553325713239563E-6	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999823899792988	WITHOUT_CLASSIFICATION	1.7610020701259496E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995522800759642	WITHOUT_CLASSIFICATION	4.4771992403591084E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999912208593043	WITHOUT_CLASSIFICATION	8.779140695863888E-6	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999861442482	WITHOUT_CLASSIFICATION	1.3855751689359073E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999839371852554	WITHOUT_CLASSIFICATION	1.6062814744735443E-5	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998610123743673	WITHOUT_CLASSIFICATION	1.3898762563274353E-4	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998573351003792	WITHOUT_CLASSIFICATION	1.4266489962083415E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999363077950766	WITHOUT_CLASSIFICATION	6.369220492337461E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999912208593043	WITHOUT_CLASSIFICATION	8.779140695863888E-6	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999869963939997	WITHOUT_CLASSIFICATION	1.3003606000362739E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999817184102785	WITHOUT_CLASSIFICATION	1.828158972141512E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999817184102785	WITHOUT_CLASSIFICATION	1.828158972141512E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999974252235	WITHOUT_CLASSIFICATION	2.5747764495605018E-9	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999913402112687	WITHOUT_CLASSIFICATION	8.659788731277144E-6	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9998736924884617	WITHOUT_CLASSIFICATION	1.2630751153835354E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9913453802456307	WITHOUT_CLASSIFICATION	0.00865461975436936	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999442834633357	WITHOUT_CLASSIFICATION	5.5716536664102426E-5	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999388169876565	WITHOUT_CLASSIFICATION	6.118301234350155E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999878837465255	WITHOUT_CLASSIFICATION	1.2116253474462969E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999559549065166	WITHOUT_CLASSIFICATION	4.404509348349412E-5	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9998975302078129	WITHOUT_CLASSIFICATION	1.0246979218697354E-4	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990284455476	WITHOUT_CLASSIFICATION	9.715544525049603E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990284455476	WITHOUT_CLASSIFICATION	9.715544525049603E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888704747708	WITHOUT_CLASSIFICATION	1.1129525229196832E-5	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999924483878704	WITHOUT_CLASSIFICATION	7.551612129541148E-6	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999819477962554	WITHOUT_CLASSIFICATION	1.8052203744614356E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999500783147974	WITHOUT_CLASSIFICATION	4.9921685202555264E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999327971179696	WITHOUT_CLASSIFICATION	6.720288203051964E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999550761042674	WITHOUT_CLASSIFICATION	4.4923895732588054E-5	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.999906906039785	WITHOUT_CLASSIFICATION	9.309396021493027E-5	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999533487593734	WITHOUT_CLASSIFICATION	4.665124062669464E-5	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999754122350368	WITHOUT_CLASSIFICATION	2.4587764963147575E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999644224597851	WITHOUT_CLASSIFICATION	3.557754021475645E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999577919044912	WITHOUT_CLASSIFICATION	4.2208095508830736E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999723478031667	WITHOUT_CLASSIFICATION	2.7652196833344917E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999533487593734	WITHOUT_CLASSIFICATION	4.665124062669464E-5	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999495813985213	WITHOUT_CLASSIFICATION	5.041860147869876E-5	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999132016982875	WITHOUT_CLASSIFICATION	8.679830171251298E-5	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999072351795356	WITHOUT_CLASSIFICATION	9.276482046445673E-5	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999719312447521	WITHOUT_CLASSIFICATION	2.8068755247761767E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999930686442332	WITHOUT_CLASSIFICATION	6.931355766799954E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.999946736148959	WITHOUT_CLASSIFICATION	5.326385104088618E-5	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998669742878715	WITHOUT_CLASSIFICATION	1.3302571212844844E-4	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999496473095348	WITHOUT_CLASSIFICATION	5.035269046505433E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999873394821356	WITHOUT_CLASSIFICATION	1.2660517864534227E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999803064851503	WITHOUT_CLASSIFICATION	1.969351484969205E-5	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999565202972217	WITHOUT_CLASSIFICATION	4.347970277822239E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999840237001993	WITHOUT_CLASSIFICATION	1.597629980059537E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999925789632723	WITHOUT_CLASSIFICATION	7.421036727704313E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9998615116174525	WITHOUT_CLASSIFICATION	1.384883825475551E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9981900706881849	WITHOUT_CLASSIFICATION	0.0018099293118151922	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999973117220913	WITHOUT_CLASSIFICATION	2.688277908696385E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999500783147974	WITHOUT_CLASSIFICATION	4.9921685202555264E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999500783147974	WITHOUT_CLASSIFICATION	4.9921685202555264E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999577919044912	WITHOUT_CLASSIFICATION	4.2208095508830736E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999565202972217	WITHOUT_CLASSIFICATION	4.347970277822239E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999910891097585	WITHOUT_CLASSIFICATION	8.910890241474893E-6	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999706573371947	WITHOUT_CLASSIFICATION	2.9342662805422317E-5	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999633318457385	WITHOUT_CLASSIFICATION	3.666815426150337E-5	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999788184267048	WITHOUT_CLASSIFICATION	2.118157329516453E-5	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999560039204235	WITHOUT_CLASSIFICATION	4.399607957660217E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999767719275758	WITHOUT_CLASSIFICATION	2.3228072424210575E-5	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999557560178326	WITHOUT_CLASSIFICATION	4.424398216744285E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9998022988685435	WITHOUT_CLASSIFICATION	1.9770113145639088E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997908034302198	WITHOUT_CLASSIFICATION	2.0919656978036014E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997908034302198	WITHOUT_CLASSIFICATION	2.0919656978036014E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999997157488595	WITHOUT_CLASSIFICATION	2.842511405109081E-6	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999864395654305	WITHOUT_CLASSIFICATION	1.356043456935506E-5	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999428354289721	WITHOUT_CLASSIFICATION	5.716457102792281E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999317893427567	WITHOUT_CLASSIFICATION	6.821065724322264E-5	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999756040152146	WITHOUT_CLASSIFICATION	2.439598478546024E-5	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.999980893179401	WITHOUT_CLASSIFICATION	1.910682059899708E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999915555525478	WITHOUT_CLASSIFICATION	8.44444745215489E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999414165631973	WITHOUT_CLASSIFICATION	5.8583436802544037E-5	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999427213557174	WITHOUT_CLASSIFICATION	5.7278644282626086E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999427213557174	WITHOUT_CLASSIFICATION	5.7278644282626086E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999491639984902	WITHOUT_CLASSIFICATION	5.08360015097737E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999814337426622	WITHOUT_CLASSIFICATION	1.856625733779835E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999491639984902	WITHOUT_CLASSIFICATION	5.08360015097737E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999553653632923	WITHOUT_CLASSIFICATION	4.463463670770731E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999817730865762	WITHOUT_CLASSIFICATION	1.822691342377698E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999500783147974	WITHOUT_CLASSIFICATION	4.9921685202555264E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999577919044912	WITHOUT_CLASSIFICATION	4.2208095508830736E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999565202972217	WITHOUT_CLASSIFICATION	4.347970277822239E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999565202972217	WITHOUT_CLASSIFICATION	4.347970277822239E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999507979892233	WITHOUT_CLASSIFICATION	4.920201077674394E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999249927237496	WITHOUT_CLASSIFICATION	7.500727625042321E-5	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999866643560972	WITHOUT_CLASSIFICATION	1.3335643902944827E-5	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999870424514081	WITHOUT_CLASSIFICATION	1.2957548591827628E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999870424514081	WITHOUT_CLASSIFICATION	1.2957548591827628E-5	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9977422330172484	WITHOUT_CLASSIFICATION	0.002257766982751499	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999956565492636	WITHOUT_CLASSIFICATION	4.343450736461879E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999806836749723	WITHOUT_CLASSIFICATION	1.9316325027768567E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999579870002879	WITHOUT_CLASSIFICATION	4.201299971209759E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999803831060691	WITHOUT_CLASSIFICATION	1.961689393092883E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999561937550594	WITHOUT_CLASSIFICATION	4.3806244940699234E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977728040622	WITHOUT_CLASSIFICATION	2.2271959378028123E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999561463040345	WITHOUT_CLASSIFICATION	4.385369596544426E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999561463040345	WITHOUT_CLASSIFICATION	4.385369596544426E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999554427962593	WITHOUT_CLASSIFICATION	4.455720374068965E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999554427962593	WITHOUT_CLASSIFICATION	4.455720374068965E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999847092664315	WITHOUT_CLASSIFICATION	1.5290733568498434E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999847092664315	WITHOUT_CLASSIFICATION	1.5290733568498434E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999398071120479	WITHOUT_CLASSIFICATION	6.019288795209622E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999398071120479	WITHOUT_CLASSIFICATION	6.019288795209622E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999870424514081	WITHOUT_CLASSIFICATION	1.2957548591827628E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999977728040622	WITHOUT_CLASSIFICATION	2.2271959378028123E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999561463040345	WITHOUT_CLASSIFICATION	4.385369596544426E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999561463040345	WITHOUT_CLASSIFICATION	4.385369596544426E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999554427962593	WITHOUT_CLASSIFICATION	4.455720374068965E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999847092664315	WITHOUT_CLASSIFICATION	1.5290733568498434E-4	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.999847092664315	WITHOUT_CLASSIFICATION	1.5290733568498434E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999398071120479	WITHOUT_CLASSIFICATION	6.019288795209622E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999115643350001	WITHOUT_CLASSIFICATION	8.843566499993824E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999750563365994	WITHOUT_CLASSIFICATION	2.494366340050364E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999664799982181	WITHOUT_CLASSIFICATION	3.352000178192271E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9991818432890175	WITHOUT_CLASSIFICATION	8.18156710982542E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999655782801802	WITHOUT_CLASSIFICATION	3.44217198198705E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.999955725578847	WITHOUT_CLASSIFICATION	4.427442115294872E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999999866252793	WITHOUT_CLASSIFICATION	1.3374720709086996E-7	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999984490990885	WITHOUT_CLASSIFICATION	1.5509009114892635E-5	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999983396023416	WITHOUT_CLASSIFICATION	1.660397658457147E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999784249375175	WITHOUT_CLASSIFICATION	2.1575062482505588E-4	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999299359768733	WITHOUT_CLASSIFICATION	7.00640231266875E-5	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999875653936471	WITHOUT_CLASSIFICATION	1.2434606353015524E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999355199199804	WITHOUT_CLASSIFICATION	6.448008001958203E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.999955725578847	WITHOUT_CLASSIFICATION	4.427442115294872E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.999955725578847	WITHOUT_CLASSIFICATION	4.427442115294872E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.999955725578847	WITHOUT_CLASSIFICATION	4.427442115294872E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999968820437717	WITHOUT_CLASSIFICATION	3.1179562283699286E-6	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999393350288776	WITHOUT_CLASSIFICATION	6.066497112257609E-5	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999393350288776	WITHOUT_CLASSIFICATION	6.066497112257609E-5	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999222949996739	WITHOUT_CLASSIFICATION	7.770500032614265E-5	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999701809151	WITHOUT_CLASSIFICATION	2.981908487958512E-8	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999976036915542	WITHOUT_CLASSIFICATION	2.3963084458696554E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997193195844906	WITHOUT_CLASSIFICATION	2.8068041550943334E-4	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997193195844906	WITHOUT_CLASSIFICATION	2.8068041550943334E-4	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999430778239	WITHOUT_CLASSIFICATION	5.692217609563634E-7	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999973051486999	WITHOUT_CLASSIFICATION	2.6948513000934803E-5	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999973051486999	WITHOUT_CLASSIFICATION	2.6948513000934803E-5	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999230169409942	WITHOUT_CLASSIFICATION	7.698305900579849E-4	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999997231464616	WITHOUT_CLASSIFICATION	2.768535384010401E-6	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999979823412285	WITHOUT_CLASSIFICATION	2.017658771514669E-6	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999594004693093	WITHOUT_CLASSIFICATION	4.059953069069954E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999559885949824	WITHOUT_CLASSIFICATION	4.401140501765032E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5010713566784876	IMPLEMENTATION	0.4989286433215124	WITHOUT_CLASSIFICATION
ID	WITHOUT_CLASSIFICATION	0.9998686831148531	WITHOUT_CLASSIFICATION	1.3131688514684945E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999803020858326	WITHOUT_CLASSIFICATION	1.969791416737688E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999514235715119	WITHOUT_CLASSIFICATION	4.8576428488138224E-5	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999878681614914	WITHOUT_CLASSIFICATION	1.21318385085581E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999995765896204	WITHOUT_CLASSIFICATION	4.234103796187969E-7	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999594126040398	WITHOUT_CLASSIFICATION	4.058739596027678E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999744583968251	WITHOUT_CLASSIFICATION	2.5541603174897614E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999353946138925	WITHOUT_CLASSIFICATION	6.4605386107466E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999559136155419	WITHOUT_CLASSIFICATION	4.408638445813197E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999557422638864	WITHOUT_CLASSIFICATION	4.4257736113609175E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999376549835087	WITHOUT_CLASSIFICATION	6.234501649132458E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999780142406385	WITHOUT_CLASSIFICATION	2.1985759361538565E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999979823412285	WITHOUT_CLASSIFICATION	2.017658771514669E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998973734434522	WITHOUT_CLASSIFICATION	1.0262655654774096E-4	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999807435280466	WITHOUT_CLASSIFICATION	1.9256471953506037E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999572610744735	WITHOUT_CLASSIFICATION	4.273892552658382E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999559885949824	WITHOUT_CLASSIFICATION	4.401140501765032E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999780142406385	WITHOUT_CLASSIFICATION	2.1985759361538565E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998973734434522	WITHOUT_CLASSIFICATION	1.0262655654774096E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999572610744735	WITHOUT_CLASSIFICATION	4.273892552658382E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999206463611551	WITHOUT_CLASSIFICATION	7.935363884485675E-5	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999557479639958	WITHOUT_CLASSIFICATION	4.4252036004139044E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999206463611551	WITHOUT_CLASSIFICATION	7.935363884485675E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999557453883307	WITHOUT_CLASSIFICATION	4.425461166931974E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9998070519785544	WITHOUT_CLASSIFICATION	1.9294802144560289E-4	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999045036534003	WITHOUT_CLASSIFICATION	9.549634659964838E-5	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998352079392	WITHOUT_CLASSIFICATION	1.647920607394686E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999965523698466	WITHOUT_CLASSIFICATION	3.44763015328044E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9978073023799602	WITHOUT_CLASSIFICATION	0.0021926976200398896	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999868652013967	WITHOUT_CLASSIFICATION	1.313479860341064E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999092274700222	WITHOUT_CLASSIFICATION	9.077252997780557E-4	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9983247630732982	WITHOUT_CLASSIFICATION	0.0016752369267017844	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999868652013967	WITHOUT_CLASSIFICATION	1.313479860341064E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999590626279676	WITHOUT_CLASSIFICATION	4.09373720324233E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9995773005960152	WITHOUT_CLASSIFICATION	4.2269940398482943E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999557209961937	WITHOUT_CLASSIFICATION	4.4279003806412936E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999780142406385	WITHOUT_CLASSIFICATION	2.1985759361538565E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999422433019122	WITHOUT_CLASSIFICATION	5.7756698087735574E-5	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999633984542362	WITHOUT_CLASSIFICATION	3.6601545763740425E-5	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9962826055553744	WITHOUT_CLASSIFICATION	0.0037173944446255336	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999469242458026	WITHOUT_CLASSIFICATION	5.307575419744563E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999872483219188	WITHOUT_CLASSIFICATION	1.2751678081218533E-5	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999996825107955	WITHOUT_CLASSIFICATION	3.1748920452591317E-7	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999889718270089	WITHOUT_CLASSIFICATION	1.102817299106826E-5	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.999851499821008	WITHOUT_CLASSIFICATION	1.4850017899207575E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999574940920809	WITHOUT_CLASSIFICATION	4.250590791916954E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998022541826633	WITHOUT_CLASSIFICATION	1.9774581733669194E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9985714329249199	WITHOUT_CLASSIFICATION	0.0014285670750800613	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999594126040398	WITHOUT_CLASSIFICATION	4.058739596027678E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999255637666142	WITHOUT_CLASSIFICATION	7.44362333856872E-5	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999665244710831	WITHOUT_CLASSIFICATION	3.347552891677391E-5	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9998517007896163	WITHOUT_CLASSIFICATION	1.482992103838229E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999592896901538	WITHOUT_CLASSIFICATION	4.0710309846259044E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999638056321534	WITHOUT_CLASSIFICATION	3.6194367846714676E-5	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999808847214978	WITHOUT_CLASSIFICATION	1.911527850225464E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999447247978	WITHOUT_CLASSIFICATION	5.527520222085572E-8	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999900934991035	WITHOUT_CLASSIFICATION	9.906500896531793E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9982967715899793	WITHOUT_CLASSIFICATION	0.0017032284100206478	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999505514695946	WITHOUT_CLASSIFICATION	4.9448530405423404E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9983627687104155	WITHOUT_CLASSIFICATION	0.001637231289584426	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9983627687104155	WITHOUT_CLASSIFICATION	0.001637231289584426	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999736436421098	WITHOUT_CLASSIFICATION	2.6356357890149512E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999863675390802	WITHOUT_CLASSIFICATION	1.3632460919746852E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999637297847962	WITHOUT_CLASSIFICATION	3.627021520370204E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999571900044183	WITHOUT_CLASSIFICATION	4.280999558175732E-5	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999773620886877	WITHOUT_CLASSIFICATION	2.263791131232524E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998688895839261	WITHOUT_CLASSIFICATION	1.3111041607393885E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999881884130082	WITHOUT_CLASSIFICATION	1.1811586991873332E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9920330050617274	WITHOUT_CLASSIFICATION	0.007966994938272487	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999996310642175	WITHOUT_CLASSIFICATION	3.6893578250188355E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999511613218789	WITHOUT_CLASSIFICATION	4.883867812103414E-5	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.99993491808168	WITHOUT_CLASSIFICATION	6.508191832000973E-5	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.999655924523574	WITHOUT_CLASSIFICATION	3.440754764260539E-4	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999364416994887	WITHOUT_CLASSIFICATION	6.355830051134796E-5	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999749425894752	WITHOUT_CLASSIFICATION	2.5057410524837083E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9991403265407153	WITHOUT_CLASSIFICATION	8.59673459284729E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999669482043344	WITHOUT_CLASSIFICATION	3.305179566556622E-5	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700832830912	WITHOUT_CLASSIFICATION	2.9916716908665448E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999739882968155	WITHOUT_CLASSIFICATION	2.601170318452575E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995633577462192	WITHOUT_CLASSIFICATION	4.366422537807188E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9998895678143359	WITHOUT_CLASSIFICATION	1.1043218566412168E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999648135206541	WITHOUT_CLASSIFICATION	3.518647934588044E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999804895916261	WITHOUT_CLASSIFICATION	1.951040837394298E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999669482043344	WITHOUT_CLASSIFICATION	3.305179566556622E-5	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999198953497135	WITHOUT_CLASSIFICATION	8.01046502864682E-5	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999017949647615	WITHOUT_CLASSIFICATION	9.820503523845794E-5	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999015371633214	WITHOUT_CLASSIFICATION	9.846283667857658E-5	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999681423194	WITHOUT_CLASSIFICATION	3.185768060184816E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999715380757764	WITHOUT_CLASSIFICATION	2.8461924223507666E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999739882968155	WITHOUT_CLASSIFICATION	2.601170318452575E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999754882507343	WITHOUT_CLASSIFICATION	2.4511749265733848E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998082182453599	WITHOUT_CLASSIFICATION	1.917817546401264E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998778107957529	WITHOUT_CLASSIFICATION	1.2218920424706358E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999576071651272	WITHOUT_CLASSIFICATION	4.239283487272365E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999576071651272	WITHOUT_CLASSIFICATION	4.239283487272365E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999373852839497	WITHOUT_CLASSIFICATION	6.26147160502761E-5	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999709194635976	WITHOUT_CLASSIFICATION	2.9080536402388605E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999333216938915	WITHOUT_CLASSIFICATION	6.667830610845025E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999333216938915	WITHOUT_CLASSIFICATION	6.667830610845025E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9982967715899793	WITHOUT_CLASSIFICATION	0.0017032284100206478	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9998184842468606	WITHOUT_CLASSIFICATION	1.8151575313947772E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993485011707041	WITHOUT_CLASSIFICATION	6.514988292959568E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999458528808761	WITHOUT_CLASSIFICATION	5.414711912393876E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888704747708	WITHOUT_CLASSIFICATION	1.1129525229196832E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993485011707041	WITHOUT_CLASSIFICATION	6.514988292959568E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999458528808761	WITHOUT_CLASSIFICATION	5.414711912393876E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9133160290835487	WITHOUT_CLASSIFICATION	0.08668397091645136	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999999327133102	WITHOUT_CLASSIFICATION	6.728668979333073E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999741534484957	WITHOUT_CLASSIFICATION	2.584655150432166E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999994796816852	WITHOUT_CLASSIFICATION	5.203183146782096E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993106629394645	WITHOUT_CLASSIFICATION	6.893370605354712E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.7893099763994845	WITHOUT_CLASSIFICATION	0.21069002360051553	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996622646021223	WITHOUT_CLASSIFICATION	3.3773539787769024E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996622646021223	WITHOUT_CLASSIFICATION	3.3773539787769024E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999970208249969	WITHOUT_CLASSIFICATION	2.9791750030272154E-6	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999993252864324	WITHOUT_CLASSIFICATION	6.74713567661271E-7	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999868473706881	WITHOUT_CLASSIFICATION	1.3152629311897522E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999996718233157	WITHOUT_CLASSIFICATION	3.28176684276003E-7	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999948357057705	WITHOUT_CLASSIFICATION	5.164294229412942E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999896094553921	WITHOUT_CLASSIFICATION	1.0390544607897396E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888704747708	WITHOUT_CLASSIFICATION	1.1129525229196832E-5	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999896094553921	WITHOUT_CLASSIFICATION	1.0390544607897396E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999953435285761	WITHOUT_CLASSIFICATION	4.656471423897855E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999953435285761	WITHOUT_CLASSIFICATION	4.656471423897855E-6	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999971753786185	WITHOUT_CLASSIFICATION	2.824621381551575E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9133160290835487	WITHOUT_CLASSIFICATION	0.08668397091645136	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9980018808437586	WITHOUT_CLASSIFICATION	0.001998119156241385	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999911836079436	WITHOUT_CLASSIFICATION	8.816392056285438E-6	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9926810052544459	WITHOUT_CLASSIFICATION	0.00731899474555404	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999909386054474	WITHOUT_CLASSIFICATION	9.061394552529129E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998726051609685	WITHOUT_CLASSIFICATION	1.273948390314616E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9133160290835487	WITHOUT_CLASSIFICATION	0.08668397091645136	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999909386054474	WITHOUT_CLASSIFICATION	9.061394552529129E-6	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998726051609685	WITHOUT_CLASSIFICATION	1.273948390314616E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999996822575581	WITHOUT_CLASSIFICATION	3.177424419076999E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998902281294864	WITHOUT_CLASSIFICATION	1.0977187051372709E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999880231736389	WITHOUT_CLASSIFICATION	1.197682636102906E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9133160290835487	WITHOUT_CLASSIFICATION	0.08668397091645136	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9133160290835487	WITHOUT_CLASSIFICATION	0.08668397091645136	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999933250000564	WITHOUT_CLASSIFICATION	6.674999943601563E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.999989291120766	WITHOUT_CLASSIFICATION	1.0708879234088903E-5	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999954385839396	WITHOUT_CLASSIFICATION	4.561416060341176E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999971169435071	WITHOUT_CLASSIFICATION	2.8830564927770724E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999908624727645	WITHOUT_CLASSIFICATION	9.137527235561535E-6	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999937817688571	WITHOUT_CLASSIFICATION	6.218231142894376E-6	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9997595459584402	WITHOUT_CLASSIFICATION	2.4045404155987726E-4	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999885808624999	WITHOUT_CLASSIFICATION	1.1419137500029085E-5	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999843772242923	WITHOUT_CLASSIFICATION	1.5622775707633476E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999566528318261	WITHOUT_CLASSIFICATION	4.334716817384386E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9964834462173603	WITHOUT_CLASSIFICATION	0.003516553782639706	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9981339874532377	WITHOUT_CLASSIFICATION	0.0018660125467623296	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999995221753479	WITHOUT_CLASSIFICATION	4.778246521386011E-7	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9996204279744144	WITHOUT_CLASSIFICATION	3.795720255856024E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998881877372677	WITHOUT_CLASSIFICATION	1.1181226273233688E-4	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999997155853976	WITHOUT_CLASSIFICATION	2.8441460241169524E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999971169435071	WITHOUT_CLASSIFICATION	2.8830564927770724E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999891284548366	WITHOUT_CLASSIFICATION	1.0871545163511307E-5	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999822920875956	WITHOUT_CLASSIFICATION	1.7707912404352604E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998801406893776	WITHOUT_CLASSIFICATION	1.1985931062245627E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.999757711440484	WITHOUT_CLASSIFICATION	2.4228855951610904E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999333293869482	WITHOUT_CLASSIFICATION	6.667061305176899E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999333293869482	WITHOUT_CLASSIFICATION	6.667061305176899E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999971169435071	WITHOUT_CLASSIFICATION	2.8830564927770724E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998914282138432	WITHOUT_CLASSIFICATION	1.0857178615677538E-4	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999970723437505	WITHOUT_CLASSIFICATION	2.9276562496101356E-6	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9902442011456372	WITHOUT_CLASSIFICATION	0.009755798854362788	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999816391635699	WITHOUT_CLASSIFICATION	1.8360836430128115E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558148100647	WITHOUT_CLASSIFICATION	4.4185189935339623E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999788660598471	WITHOUT_CLASSIFICATION	2.1133940152961066E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.99992727812515	WITHOUT_CLASSIFICATION	7.272187484998287E-5	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998738801571665	WITHOUT_CLASSIFICATION	1.261198428335167E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.99999212218557	WITHOUT_CLASSIFICATION	7.87781442993049E-6	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999968376026158	WITHOUT_CLASSIFICATION	3.1623973840501213E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999923110427988	WITHOUT_CLASSIFICATION	7.688957201154368E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999652857390329	WITHOUT_CLASSIFICATION	3.4714260967203685E-5	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998432881459597	WITHOUT_CLASSIFICATION	1.5671185404031657E-4	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944024957618	WITHOUT_CLASSIFICATION	5.597504238205005E-6	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999602755314912	WITHOUT_CLASSIFICATION	3.97244685088495E-5	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9962450518364406	WITHOUT_CLASSIFICATION	0.003754948163559384	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999601474898841	WITHOUT_CLASSIFICATION	3.985251011590689E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999323940611978	WITHOUT_CLASSIFICATION	6.760593880209536E-5	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999976541147596	WITHOUT_CLASSIFICATION	2.345885240468467E-6	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997684253226725	WITHOUT_CLASSIFICATION	2.315746773274149E-4	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999868058594876	WITHOUT_CLASSIFICATION	1.3194140512440622E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970077147057502	WITHOUT_CLASSIFICATION	0.0029922852942496792	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985931095523983	WITHOUT_CLASSIFICATION	0.0014068904476016882	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987678120943179	WITHOUT_CLASSIFICATION	0.0012321879056822016	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639172344782	WITHOUT_CLASSIFICATION	3.60827655217907E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998259826104573	WITHOUT_CLASSIFICATION	0.0017401738954270064	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.999912296827088	WITHOUT_CLASSIFICATION	8.770317291195323E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999965141330675	WITHOUT_CLASSIFICATION	3.4858669325010805E-5	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998745463849017	WITHOUT_CLASSIFICATION	0.0012545361509829597	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989000799101551	WITHOUT_CLASSIFICATION	0.0010999200898449168	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970760123426773	WITHOUT_CLASSIFICATION	0.0029239876573227855	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9956114299664587	WITHOUT_CLASSIFICATION	0.004388570033541351	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982078676134513	WITHOUT_CLASSIFICATION	0.0017921323865487027	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978055026176313	WITHOUT_CLASSIFICATION	0.00219449738236864	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999895144823855	WITHOUT_CLASSIFICATION	1.0485517614453397E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999378735070158	WITHOUT_CLASSIFICATION	6.212649298414988E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.661542228625764	IMPLEMENTATION	0.33845777137423616	WITHOUT_CLASSIFICATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999975847851423	WITHOUT_CLASSIFICATION	2.4152148577312827E-6	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999978689428111	WITHOUT_CLASSIFICATION	2.1310571889821626E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999618048812932	WITHOUT_CLASSIFICATION	3.819511870672419E-5	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9998854715883665	WITHOUT_CLASSIFICATION	1.1452841163356039E-4	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999973947108502	WITHOUT_CLASSIFICATION	2.6052891497986483E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999832289308775	WITHOUT_CLASSIFICATION	1.6771069122479976E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999337217320818	WITHOUT_CLASSIFICATION	6.62782679180611E-5	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999353078394411	WITHOUT_CLASSIFICATION	6.469216055886027E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999570540808567	WITHOUT_CLASSIFICATION	4.294591914320046E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999596723608785	WITHOUT_CLASSIFICATION	4.0327639121500225E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999560687085797	WITHOUT_CLASSIFICATION	4.3931291420347865E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999950950089397	WITHOUT_CLASSIFICATION	4.90499106030594E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9996770691758153	WITHOUT_CLASSIFICATION	3.229308241847219E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999244627994125	WITHOUT_CLASSIFICATION	7.553720058749821E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996802158266003	WITHOUT_CLASSIFICATION	3.19784173399779E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373582196418	WITHOUT_CLASSIFICATION	6.264178035810515E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999613274344729	WITHOUT_CLASSIFICATION	3.867256552721603E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999346730924037	WITHOUT_CLASSIFICATION	6.532690759628975E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999382936918506	WITHOUT_CLASSIFICATION	6.170630814937575E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9990675691216969	WITHOUT_CLASSIFICATION	9.324308783030869E-4	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999259960558706	WITHOUT_CLASSIFICATION	7.400394412929876E-5	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999802322707347	WITHOUT_CLASSIFICATION	1.976772926515449E-5	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998736733908327	WITHOUT_CLASSIFICATION	1.2632660916739834E-4	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998426333148843	WITHOUT_CLASSIFICATION	1.5736668511556404E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999476244749859	WITHOUT_CLASSIFICATION	5.237552501416761E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999919179634061	WITHOUT_CLASSIFICATION	8.082036593842553E-6	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999638311039039	WITHOUT_CLASSIFICATION	3.616889609616022E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999289878107143	WITHOUT_CLASSIFICATION	7.101218928574161E-5	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999886847790681	WITHOUT_CLASSIFICATION	1.1315220931898293E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9990525655992424	WITHOUT_CLASSIFICATION	9.474344007576944E-4	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999975212294742	WITHOUT_CLASSIFICATION	2.4787705257702537E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999123974563867	WITHOUT_CLASSIFICATION	8.760254361325214E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999618048812932	WITHOUT_CLASSIFICATION	3.819511870672419E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999690249056082	WITHOUT_CLASSIFICATION	3.0975094391808326E-4	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999941654038113	WITHOUT_CLASSIFICATION	5.834596188696751E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998558663016427	WITHOUT_CLASSIFICATION	1.4413369835735644E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999975847851423	WITHOUT_CLASSIFICATION	2.4152148577312827E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999371986779154	WITHOUT_CLASSIFICATION	6.280132208457846E-5	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.999963501034512	WITHOUT_CLASSIFICATION	3.649896548797265E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9990675691216969	WITHOUT_CLASSIFICATION	9.324308783030869E-4	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999975565318915	WITHOUT_CLASSIFICATION	2.4434681084196395E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999845285188288	WITHOUT_CLASSIFICATION	1.5471481171211177E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999693679769093	WITHOUT_CLASSIFICATION	3.063202309077223E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998392481832076	WITHOUT_CLASSIFICATION	1.6075181679241077E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999946978586853	WITHOUT_CLASSIFICATION	5.3021413147003126E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999574919253846	WITHOUT_CLASSIFICATION	4.250807461530257E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999296167621932	WITHOUT_CLASSIFICATION	7.038323780679809E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999932189266363	WITHOUT_CLASSIFICATION	6.781073363657127E-6	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999998994675077	WITHOUT_CLASSIFICATION	1.0053249233465712E-7	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999968135385144	WITHOUT_CLASSIFICATION	3.1864614855616915E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999922799907257	WITHOUT_CLASSIFICATION	7.720009274323426E-6	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999975734957928	WITHOUT_CLASSIFICATION	2.4265042071782497E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999748049911179	WITHOUT_CLASSIFICATION	2.5195008882010804E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999616760570297	WITHOUT_CLASSIFICATION	3.83239429701995E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999374607236934	WITHOUT_CLASSIFICATION	6.253927630667335E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999986678928087	WITHOUT_CLASSIFICATION	1.332107191321933E-6	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999742733386796	WITHOUT_CLASSIFICATION	2.5726661320426234E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.999988743649369	WITHOUT_CLASSIFICATION	1.1256350631095781E-5	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999913937169834	WITHOUT_CLASSIFICATION	8.606283016551333E-6	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998080430024471	WITHOUT_CLASSIFICATION	1.919569975528971E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999707816025092	WITHOUT_CLASSIFICATION	2.921839749086651E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999028465281417	WITHOUT_CLASSIFICATION	9.715347185836252E-5	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999910575756524	WITHOUT_CLASSIFICATION	8.942424347567598E-6	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.999900540113015	WITHOUT_CLASSIFICATION	9.945988698501576E-5	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999844779734852	WITHOUT_CLASSIFICATION	1.5522026514807133E-5	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999843390074316	WITHOUT_CLASSIFICATION	1.5660992568442208E-5	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999975847851423	WITHOUT_CLASSIFICATION	2.4152148577312827E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999618048812932	WITHOUT_CLASSIFICATION	3.819511870672419E-5	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997729613470961	WITHOUT_CLASSIFICATION	2.2703865290387023E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9980430542263534	WITHOUT_CLASSIFICATION	0.00195694577364658	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9894207424901058	WITHOUT_CLASSIFICATION	0.010579257509894144	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999373852839497	WITHOUT_CLASSIFICATION	6.26147160502761E-5	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999937504121742	WITHOUT_CLASSIFICATION	6.249587825798763E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999375794183158	WITHOUT_CLASSIFICATION	6.242058168413002E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999618048812932	WITHOUT_CLASSIFICATION	3.819511870672419E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999333555746572	WITHOUT_CLASSIFICATION	6.664442534277686E-5	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999742733386796	WITHOUT_CLASSIFICATION	2.5726661320426234E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998116495172058	WITHOUT_CLASSIFICATION	1.8835048279413312E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999986678928087	WITHOUT_CLASSIFICATION	1.332107191321933E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999829870152972	WITHOUT_CLASSIFICATION	1.701298470275639E-5	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993689653056474	WITHOUT_CLASSIFICATION	6.310346943525741E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999967981660579	WITHOUT_CLASSIFICATION	3.201833942108431E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999693679769093	WITHOUT_CLASSIFICATION	3.063202309077223E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998392481832076	WITHOUT_CLASSIFICATION	1.6075181679241077E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999946978586853	WITHOUT_CLASSIFICATION	5.3021413147003126E-5	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999488851782666	WITHOUT_CLASSIFICATION	5.111482173337764E-5	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9998801820567963	WITHOUT_CLASSIFICATION	1.1981794320373843E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999727249422281	WITHOUT_CLASSIFICATION	2.727505777193945E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999986678928087	WITHOUT_CLASSIFICATION	1.332107191321933E-6	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999829870152972	WITHOUT_CLASSIFICATION	1.701298470275639E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999618048812932	WITHOUT_CLASSIFICATION	3.819511870672419E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999574919253846	WITHOUT_CLASSIFICATION	4.250807461530257E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999296167621932	WITHOUT_CLASSIFICATION	7.038323780679809E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999932189266363	WITHOUT_CLASSIFICATION	6.781073363657127E-6	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505765834265	WITHOUT_CLASSIFICATION	4.9423416573684155E-5	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998529308095582	WITHOUT_CLASSIFICATION	1.4706919044173142E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999429620000119	WITHOUT_CLASSIFICATION	5.7037999988210154E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999942766285194	WITHOUT_CLASSIFICATION	5.723371480654708E-6	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9983748930741251	WITHOUT_CLASSIFICATION	0.0016251069258748341	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999987208673884	WITHOUT_CLASSIFICATION	1.2791326115315983E-6	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999536284582293	WITHOUT_CLASSIFICATION	4.637154177072893E-5	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999703497942873	WITHOUT_CLASSIFICATION	2.965020571270726E-5	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999346032261061	WITHOUT_CLASSIFICATION	6.539677389393018E-5	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998259826104573	WITHOUT_CLASSIFICATION	0.0017401738954270064	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989000799101551	WITHOUT_CLASSIFICATION	0.0010999200898449168	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999609894901664	WITHOUT_CLASSIFICATION	3.901050983352564E-5	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999776288813486	WITHOUT_CLASSIFICATION	2.2371118651442803E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983519194899513	WITHOUT_CLASSIFICATION	0.0016480805100487716	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9970012866337677	WITHOUT_CLASSIFICATION	0.0029987133662323392	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970760123426773	WITHOUT_CLASSIFICATION	0.0029239876573227855	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981934732517833	WITHOUT_CLASSIFICATION	0.0018065267482166355	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999289878107143	WITHOUT_CLASSIFICATION	7.101218928574161E-5	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999790239209982	WITHOUT_CLASSIFICATION	2.097607900176964E-5	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999957042127673	WITHOUT_CLASSIFICATION	4.2957872326308675E-6	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999984377416266	WITHOUT_CLASSIFICATION	1.5622583733983063E-5	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999851989305288	WITHOUT_CLASSIFICATION	1.4801069471162448E-5	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999992730233367	WITHOUT_CLASSIFICATION	7.269766633171436E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999206463611551	WITHOUT_CLASSIFICATION	7.935363884485675E-5	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999887777167944	WITHOUT_CLASSIFICATION	1.1222283205616363E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9998738801571665	WITHOUT_CLASSIFICATION	1.261198428335167E-4	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996519182925521	WITHOUT_CLASSIFICATION	3.4808170744789397E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998861049466448	WITHOUT_CLASSIFICATION	1.1389505335532375E-4	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999819360687439	WITHOUT_CLASSIFICATION	1.8063931256143295E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999977013376619	WITHOUT_CLASSIFICATION	2.2986623380890985E-5	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999916447142958	WITHOUT_CLASSIFICATION	8.355285704320611E-6	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999490284143144	WITHOUT_CLASSIFICATION	5.097158568557883E-5	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999379950943347	WITHOUT_CLASSIFICATION	6.200490566535273E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999274069735792	WITHOUT_CLASSIFICATION	7.259302642085376E-5	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999938486282212	WITHOUT_CLASSIFICATION	6.151371778777615E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9995952123051757	WITHOUT_CLASSIFICATION	4.047876948243263E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998512804803726	WITHOUT_CLASSIFICATION	1.487195196274735E-4	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999891748611347	WITHOUT_CLASSIFICATION	1.0825138865280207E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999984384454589	WITHOUT_CLASSIFICATION	1.5615545410890705E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998837011230876	WITHOUT_CLASSIFICATION	1.1629887691242216E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999686004320995	WITHOUT_CLASSIFICATION	3.139956790054462E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997019716668897	WITHOUT_CLASSIFICATION	2.980283331103021E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999492231448004	WITHOUT_CLASSIFICATION	5.0776855199583665E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998837011230876	WITHOUT_CLASSIFICATION	1.1629887691242216E-4	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999982169619006	WITHOUT_CLASSIFICATION	1.7830380994157235E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999954714772771	WITHOUT_CLASSIFICATION	4.528522722831146E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999542949817173	WITHOUT_CLASSIFICATION	4.5705018282574114E-5	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999693511505183	WITHOUT_CLASSIFICATION	3.0648849481682156E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999644622960607	WITHOUT_CLASSIFICATION	3.553770393930466E-5	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999605892530187	WITHOUT_CLASSIFICATION	3.9410746981248575E-5	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.999971850852001	WITHOUT_CLASSIFICATION	2.8149147998999843E-5	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999656126294905	WITHOUT_CLASSIFICATION	3.438737050958121E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999656126294905	WITHOUT_CLASSIFICATION	3.438737050958121E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999991269005727	WITHOUT_CLASSIFICATION	8.730994273061167E-6	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999641860295819	WITHOUT_CLASSIFICATION	3.5813970418001175E-5	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998924244106341	WITHOUT_CLASSIFICATION	1.075755893659292E-4	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999681630784745	WITHOUT_CLASSIFICATION	3.1836921525628814E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999717226096	WITHOUT_CLASSIFICATION	2.827739032978953E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998680472326725	WITHOUT_CLASSIFICATION	1.319527673274051E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999996121904525	WITHOUT_CLASSIFICATION	3.878095474567216E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999979450755879	WITHOUT_CLASSIFICATION	2.0549244120314203E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999870140178981	WITHOUT_CLASSIFICATION	1.2985982101785137E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999939385320733	WITHOUT_CLASSIFICATION	6.0614679267127835E-6	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999228616674849	WITHOUT_CLASSIFICATION	7.713833251509587E-5	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999912409499416	WITHOUT_CLASSIFICATION	8.759050058438311E-6	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999108422124466	WITHOUT_CLASSIFICATION	8.915778755340186E-5	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.7223089924356549	WITHOUT_CLASSIFICATION	0.277691007564345	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999822611447518	WITHOUT_CLASSIFICATION	1.7738855248189864E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9998627001300608	WITHOUT_CLASSIFICATION	1.372998699391778E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999474585358498	WITHOUT_CLASSIFICATION	5.254146415021835E-5	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9996585784174513	WITHOUT_CLASSIFICATION	3.4142158254871983E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999429056403834	WITHOUT_CLASSIFICATION	5.709435961659767E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999718613471389	WITHOUT_CLASSIFICATION	2.8138652861168803E-5	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999924185104525	WITHOUT_CLASSIFICATION	7.581489547461325E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999798021572462	WITHOUT_CLASSIFICATION	2.0197842753705627E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9927550638204732	WITHOUT_CLASSIFICATION	0.007244936179526751	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999971719338672	WITHOUT_CLASSIFICATION	2.8280661329645563E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999909664280192	WITHOUT_CLASSIFICATION	9.033571980760324E-6	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997853949303644	WITHOUT_CLASSIFICATION	2.14605069635614E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9910992360873359	WITHOUT_CLASSIFICATION	0.008900763912664117	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9995400267994945	WITHOUT_CLASSIFICATION	4.599732005054604E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9894979143795992	WITHOUT_CLASSIFICATION	0.010502085620400838	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998481230604426	WITHOUT_CLASSIFICATION	1.518769395574509E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999873292712543	WITHOUT_CLASSIFICATION	1.267072874558732E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.99998557271211	WITHOUT_CLASSIFICATION	1.4427287890065788E-5	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999993483315221	WITHOUT_CLASSIFICATION	6.516684779020411E-6	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.999988883081338	WITHOUT_CLASSIFICATION	1.1116918661976067E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999794638787128	WITHOUT_CLASSIFICATION	2.053612128721261E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999547204727625	WITHOUT_CLASSIFICATION	4.527952723755049E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999414944954657	WITHOUT_CLASSIFICATION	5.850550453446848E-5	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9981515359673607	WITHOUT_CLASSIFICATION	0.0018484640326393803	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.99992581873901	WITHOUT_CLASSIFICATION	7.418126099002514E-5	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999972457330157	WITHOUT_CLASSIFICATION	2.754266984359406E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998777474810074	WITHOUT_CLASSIFICATION	1.222525189926066E-4	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999922799907257	WITHOUT_CLASSIFICATION	7.720009274323426E-6	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999922799907257	WITHOUT_CLASSIFICATION	7.720009274323426E-6	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999649700688968	WITHOUT_CLASSIFICATION	3.502993110326625E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999987517827759	WITHOUT_CLASSIFICATION	1.24821722421704E-6	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999939961274039	WITHOUT_CLASSIFICATION	6.003872596046734E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999988300358325	WITHOUT_CLASSIFICATION	1.1699641675976446E-6	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999879949769553	WITHOUT_CLASSIFICATION	1.2005023044691693E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9998858886874881	WITHOUT_CLASSIFICATION	1.1411131251197975E-4	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999929401325544	WITHOUT_CLASSIFICATION	7.059867445603333E-5	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999789529439342	WITHOUT_CLASSIFICATION	2.1047056065716496E-5	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999995774393512	WITHOUT_CLASSIFICATION	4.2256064877601677E-7	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9995638661192073	WITHOUT_CLASSIFICATION	4.36133880792623E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999800175391771	WITHOUT_CLASSIFICATION	1.9982460822949806E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.999996758201977	WITHOUT_CLASSIFICATION	3.2417980229529195E-6	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998773811450986	WITHOUT_CLASSIFICATION	1.2261885490137228E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999373551462728	WITHOUT_CLASSIFICATION	6.264485372720505E-5	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999316391453872	WITHOUT_CLASSIFICATION	6.836085461284279E-5	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999832967433065	WITHOUT_CLASSIFICATION	1.670325669345047E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999589028484932	WITHOUT_CLASSIFICATION	4.109715150679239E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9997763076557264	WITHOUT_CLASSIFICATION	2.2369234427364293E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9995146100949106	WITHOUT_CLASSIFICATION	4.8538990508934833E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999714966318703	WITHOUT_CLASSIFICATION	2.850336812970586E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999205818627429	WITHOUT_CLASSIFICATION	7.941813725712238E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999995455143973	WITHOUT_CLASSIFICATION	4.5448560271132437E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999714966318703	WITHOUT_CLASSIFICATION	2.850336812970586E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999914783319618	WITHOUT_CLASSIFICATION	8.521668038242336E-6	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999946890551614	WITHOUT_CLASSIFICATION	5.310944838588848E-6	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998387296893337	WITHOUT_CLASSIFICATION	1.61270310666141E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999855762366831	WITHOUT_CLASSIFICATION	1.4423763316902057E-4	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9998211304562762	WITHOUT_CLASSIFICATION	1.7886954372387225E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999983896107835	WITHOUT_CLASSIFICATION	1.61038921650732E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999644124658268	WITHOUT_CLASSIFICATION	3.5587534173317934E-5	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998507254690179	WITHOUT_CLASSIFICATION	1.4927453098213984E-4	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999375096121539	WITHOUT_CLASSIFICATION	6.24903878461513E-5	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999998103887081	WITHOUT_CLASSIFICATION	1.896112919297487E-7	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999924360501432	WITHOUT_CLASSIFICATION	7.563949856747114E-6	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9997375735554097	WITHOUT_CLASSIFICATION	2.6242644459028495E-4	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999702172662899	WITHOUT_CLASSIFICATION	2.978273371008396E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9983508463303299	WITHOUT_CLASSIFICATION	0.001649153669670127	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999610712843148	WITHOUT_CLASSIFICATION	3.892871568518471E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9976149387806907	WITHOUT_CLASSIFICATION	0.0023850612193093115	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999549233199293	WITHOUT_CLASSIFICATION	4.5076680070713536E-5	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.999969149932514	WITHOUT_CLASSIFICATION	3.085006748610681E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999420575814867	WITHOUT_CLASSIFICATION	5.794241851339541E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9987982105979202	WITHOUT_CLASSIFICATION	0.0012017894020798351	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999128275405593	WITHOUT_CLASSIFICATION	8.717245944070671E-5	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999777716234346	WITHOUT_CLASSIFICATION	2.222837656542151E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999736769083598	WITHOUT_CLASSIFICATION	2.6323091640106943E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9936723623546599	WITHOUT_CLASSIFICATION	0.006327637645340033	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.7838146561908078	WITHOUT_CLASSIFICATION	0.21618534380919224	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999087694150208	WITHOUT_CLASSIFICATION	9.123058497917092E-5	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9983689083746844	WITHOUT_CLASSIFICATION	0.001631091625315619	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999683535105929	WITHOUT_CLASSIFICATION	3.1646489407085335E-5	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999533651658112	WITHOUT_CLASSIFICATION	4.663483418873568E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999490284143144	WITHOUT_CLASSIFICATION	5.097158568557883E-5	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999042894112079	WITHOUT_CLASSIFICATION	9.571058879205605E-5	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999964664220771	WITHOUT_CLASSIFICATION	3.5335779229744387E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9992616263235604	WITHOUT_CLASSIFICATION	7.383736764394998E-4	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999920045166989	WITHOUT_CLASSIFICATION	7.995483301152888E-6	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999997251902978	WITHOUT_CLASSIFICATION	2.7480970219254878E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999535340485625	WITHOUT_CLASSIFICATION	4.646595143753958E-5	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.955291833709858	WITHOUT_CLASSIFICATION	0.04470816629014191	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999971642297005	WITHOUT_CLASSIFICATION	2.8357702995415945E-6	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999522378819107	WITHOUT_CLASSIFICATION	4.7762118089415316E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999922768767494	WITHOUT_CLASSIFICATION	7.72312325060414E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999980539014498	WITHOUT_CLASSIFICATION	1.9460985502773494E-6	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999451410129395	WITHOUT_CLASSIFICATION	5.4858987060443196E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9990951778597161	WITHOUT_CLASSIFICATION	9.048221402838272E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999630214784523	WITHOUT_CLASSIFICATION	3.697852154766181E-5	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999873793505687	WITHOUT_CLASSIFICATION	1.2620649431321999E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999103582037505	WITHOUT_CLASSIFICATION	8.964179624946863E-5	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999962832728952	WITHOUT_CLASSIFICATION	3.716727104735734E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998638285425016	WITHOUT_CLASSIFICATION	1.3617145749842918E-4	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999996742464343	WITHOUT_CLASSIFICATION	3.2575356576033826E-7	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999874291236152	WITHOUT_CLASSIFICATION	1.2570876384886856E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999046295910721	WITHOUT_CLASSIFICATION	9.537040892801942E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999639419023417	WITHOUT_CLASSIFICATION	3.605809765816408E-5	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998167239980809	WITHOUT_CLASSIFICATION	1.8327600191917355E-4	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9997225221152806	WITHOUT_CLASSIFICATION	2.774778847194105E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.999895120739367	WITHOUT_CLASSIFICATION	1.0487926063291127E-4	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999857270216597	WITHOUT_CLASSIFICATION	1.427297834029414E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999990433305762	WITHOUT_CLASSIFICATION	9.566694237759817E-7	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9981287028590956	WITHOUT_CLASSIFICATION	0.0018712971409043427	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9978369950012522	WITHOUT_CLASSIFICATION	0.0021630049987476463	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995483990704	WITHOUT_CLASSIFICATION	4.516009295991307E-5	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870692607207	WITHOUT_CLASSIFICATION	1.1293073927940728E-4	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703801961304	WITHOUT_CLASSIFICATION	2.9619803869634607E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999846984595111	WITHOUT_CLASSIFICATION	1.5301540488867337E-5	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999758503346303	WITHOUT_CLASSIFICATION	2.4149665369727487E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999968591387399	WITHOUT_CLASSIFICATION	3.1408612600864773E-6	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.992773758524387	WITHOUT_CLASSIFICATION	0.007226241475612954	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999059179352676	WITHOUT_CLASSIFICATION	9.408206473243126E-5	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999390883219578	WITHOUT_CLASSIFICATION	6.0911678042160606E-5	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999059179352676	WITHOUT_CLASSIFICATION	9.408206473243126E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.99997340580105	WITHOUT_CLASSIFICATION	2.6594198950018948E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999992214002364	WITHOUT_CLASSIFICATION	7.785997636000412E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999955226729003	WITHOUT_CLASSIFICATION	4.477327099742038E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999956578208485	WITHOUT_CLASSIFICATION	4.342179151459808E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999987797926049	WITHOUT_CLASSIFICATION	1.2202073951096392E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999745563456959	WITHOUT_CLASSIFICATION	2.5443654304117302E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999488066579766	WITHOUT_CLASSIFICATION	5.11933420234853E-5	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999834529750355	WITHOUT_CLASSIFICATION	1.654702496444295E-5	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9997664597473646	WITHOUT_CLASSIFICATION	2.335402526355369E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.881432300011014	WITHOUT_CLASSIFICATION	0.11856769998898589	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9997493665697726	WITHOUT_CLASSIFICATION	2.506334302273817E-4	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9994203406542695	WITHOUT_CLASSIFICATION	5.796593457304891E-4	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999850193284706	WITHOUT_CLASSIFICATION	1.4980671529393492E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.999995596039047	WITHOUT_CLASSIFICATION	4.403960953027547E-6	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9922150236982705	WITHOUT_CLASSIFICATION	0.007784976301729486	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997338320868866	WITHOUT_CLASSIFICATION	2.6616791311338497E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999919567461717	WITHOUT_CLASSIFICATION	8.04325382841142E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999919567461717	WITHOUT_CLASSIFICATION	8.04325382841142E-6	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999659090859164	WITHOUT_CLASSIFICATION	3.409091408359828E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998592461921337	WITHOUT_CLASSIFICATION	1.4075380786615011E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998508100392	WITHOUT_CLASSIFICATION	1.4918996077051735E-7	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999910853209606	WITHOUT_CLASSIFICATION	8.91467903940587E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999961805979021	WITHOUT_CLASSIFICATION	3.819402097894873E-6	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999998845184589	WITHOUT_CLASSIFICATION	1.1548154109346038E-6	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997328932338311	WITHOUT_CLASSIFICATION	2.6710676616898885E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999944278633505	WITHOUT_CLASSIFICATION	5.572136649582285E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999242053746165	WITHOUT_CLASSIFICATION	7.579462538357129E-5	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999951737150943	WITHOUT_CLASSIFICATION	4.826284905666211E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992827705654	WITHOUT_CLASSIFICATION	7.172294346856748E-7	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9993742408022959	WITHOUT_CLASSIFICATION	6.257591977041342E-4	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999314163857864	WITHOUT_CLASSIFICATION	6.858361421364678E-5	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999992042811714	WITHOUT_CLASSIFICATION	7.957188287306231E-7	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996285260312568	WITHOUT_CLASSIFICATION	3.7147396874311186E-4	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9998813865109254	WITHOUT_CLASSIFICATION	1.1861348907459408E-4	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999909446137178	WITHOUT_CLASSIFICATION	9.055386282208272E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999232621333911	WITHOUT_CLASSIFICATION	7.673786660890796E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.999730021115816	WITHOUT_CLASSIFICATION	2.699788841840727E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999989575455094	WITHOUT_CLASSIFICATION	1.0424544905626106E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999958244926848	WITHOUT_CLASSIFICATION	4.175507315175442E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.998959736043352	WITHOUT_CLASSIFICATION	0.001040263956648047	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9987095876389291	WITHOUT_CLASSIFICATION	0.0012904123610709296	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9902599306296722	WITHOUT_CLASSIFICATION	0.0097400693703278	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999914644526653	WITHOUT_CLASSIFICATION	8.535547334800355E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.999999587874253	WITHOUT_CLASSIFICATION	4.1212574691115535E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999782515424712	WITHOUT_CLASSIFICATION	2.17484575287746E-5	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9993586925325155	WITHOUT_CLASSIFICATION	6.413074674844828E-4	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999869196138971	WITHOUT_CLASSIFICATION	1.3080386102914994E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999997841115177	WITHOUT_CLASSIFICATION	2.1588848226610608E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999907841178116	WITHOUT_CLASSIFICATION	9.215882188306258E-6	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.99999947560804	WITHOUT_CLASSIFICATION	5.243919598562431E-7	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999158275785874	WITHOUT_CLASSIFICATION	8.417242141261819E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9849433458556567	WITHOUT_CLASSIFICATION	0.015056654144343188	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.99992369832425	WITHOUT_CLASSIFICATION	7.630167574994778E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999955740511232	WITHOUT_CLASSIFICATION	4.425948876775874E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999801249631359	WITHOUT_CLASSIFICATION	1.9875036864081932E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999984127687028	WITHOUT_CLASSIFICATION	1.587231297198265E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999995057523088	WITHOUT_CLASSIFICATION	4.942476911985592E-7	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9994966080646661	WITHOUT_CLASSIFICATION	5.033919353339265E-4	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999862353472396	WITHOUT_CLASSIFICATION	1.3764652760430697E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438851235426	WITHOUT_CLASSIFICATION	5.611487645750112E-5	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9998316532017628	WITHOUT_CLASSIFICATION	1.683467982370484E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9055602085354113	WITHOUT_CLASSIFICATION	0.09443979146458861	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.997235483937062	WITHOUT_CLASSIFICATION	0.002764516062937991	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999647613618513	WITHOUT_CLASSIFICATION	3.523863814875136E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999703766424077	WITHOUT_CLASSIFICATION	2.9623357592352502E-5	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998446386167	WITHOUT_CLASSIFICATION	1.5536138323218396E-7	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999128963816039	WITHOUT_CLASSIFICATION	8.710361839606618E-5	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999993893620234	WITHOUT_CLASSIFICATION	6.106379765941767E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438851235426	WITHOUT_CLASSIFICATION	5.611487645750112E-5	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999950900997201	WITHOUT_CLASSIFICATION	4.909900279977171E-6	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999930568060698	WITHOUT_CLASSIFICATION	6.943193930313652E-6	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9972022863397804	WITHOUT_CLASSIFICATION	0.0027977136602197724	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999867925952333	WITHOUT_CLASSIFICATION	1.3207404766611083E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999333555746572	WITHOUT_CLASSIFICATION	6.664442534277686E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999333555746572	WITHOUT_CLASSIFICATION	6.664442534277686E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999996853939724	WITHOUT_CLASSIFICATION	3.1460602767357783E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999991736813546	WITHOUT_CLASSIFICATION	8.263186455341434E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999996226680011	WITHOUT_CLASSIFICATION	3.773319988589464E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999976535566757	WITHOUT_CLASSIFICATION	2.346443324302618E-5	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999660765479401	WITHOUT_CLASSIFICATION	3.392345205990147E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.99975886296267	WITHOUT_CLASSIFICATION	2.4113703733000128E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999814663831389	WITHOUT_CLASSIFICATION	1.8533616861114608E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999558472533913	WITHOUT_CLASSIFICATION	4.4152746608690874E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999996936635981	WITHOUT_CLASSIFICATION	3.0633640190243507E-6	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998928162359703	WITHOUT_CLASSIFICATION	1.0718376402979499E-4	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999612804620287	WITHOUT_CLASSIFICATION	3.8719537971338816E-5	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999984229361035	WITHOUT_CLASSIFICATION	1.5770638963666766E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999492772309921	WITHOUT_CLASSIFICATION	5.072276900773766E-5	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999281180338999	WITHOUT_CLASSIFICATION	7.188196610014145E-5	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998819587793633	WITHOUT_CLASSIFICATION	1.180412206367018E-4	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996519924695885	WITHOUT_CLASSIFICATION	3.4800753041155057E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9943585464117888	WITHOUT_CLASSIFICATION	0.005641453588211171	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999939782436288	WITHOUT_CLASSIFICATION	6.021756371208035E-6	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999651218633532	WITHOUT_CLASSIFICATION	3.487813664684481E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999215817857082	WITHOUT_CLASSIFICATION	7.84182142918731E-5	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999373852839497	WITHOUT_CLASSIFICATION	6.26147160502761E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998334604794927	WITHOUT_CLASSIFICATION	1.6653952050731897E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999979549362527	WITHOUT_CLASSIFICATION	2.0450637473107717E-6	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9724268184548842	WITHOUT_CLASSIFICATION	0.027573181545115746	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9970403737285752	WITHOUT_CLASSIFICATION	0.0029596262714246826	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999631645750596	WITHOUT_CLASSIFICATION	3.683542494045536E-5	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999050757323624	WITHOUT_CLASSIFICATION	9.492426763760828E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999123493523812	WITHOUT_CLASSIFICATION	8.765064761888022E-5	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999998963531245	WITHOUT_CLASSIFICATION	1.0364687559856791E-7	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999841447078606	WITHOUT_CLASSIFICATION	1.5855292139463377E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999995461350424	WITHOUT_CLASSIFICATION	4.5386495767922603E-7	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999999539478893	WITHOUT_CLASSIFICATION	4.605211070190724E-7	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997750175362482	WITHOUT_CLASSIFICATION	2.249824637517865E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999995452874972	WITHOUT_CLASSIFICATION	4.547125027227683E-7	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9984189311332993	WITHOUT_CLASSIFICATION	0.0015810688667007252	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999841447078606	WITHOUT_CLASSIFICATION	1.5855292139463377E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999865460727951	WITHOUT_CLASSIFICATION	1.3453927204836758E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999995452874972	WITHOUT_CLASSIFICATION	4.547125027227683E-7	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.99999294599633	WITHOUT_CLASSIFICATION	7.054003669903256E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9995624243723332	WITHOUT_CLASSIFICATION	4.37575627666791E-4	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992827705654	WITHOUT_CLASSIFICATION	7.172294346856748E-7	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999842176744544	WITHOUT_CLASSIFICATION	1.5782325545599012E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999206463611551	WITHOUT_CLASSIFICATION	7.935363884485675E-5	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999990417676938	WITHOUT_CLASSIFICATION	9.582323061440908E-7	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999947401704856	WITHOUT_CLASSIFICATION	5.259829514396448E-6	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999996220621001	WITHOUT_CLASSIFICATION	3.779378997978635E-7	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999976113556401	WITHOUT_CLASSIFICATION	2.3886443599042784E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999528104961072	WITHOUT_CLASSIFICATION	4.718950389290248E-5	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999942974945145	WITHOUT_CLASSIFICATION	5.7025054854491734E-6	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999975240524624	WITHOUT_CLASSIFICATION	2.4759475375778377E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999335698873968	WITHOUT_CLASSIFICATION	6.643011260320645E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999912672466016	WITHOUT_CLASSIFICATION	8.732753398364554E-6	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9993772472543254	WITHOUT_CLASSIFICATION	6.227527456745465E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9998895392089575	WITHOUT_CLASSIFICATION	1.1046079104241057E-4	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997958607970775	WITHOUT_CLASSIFICATION	2.0413920292235418E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999738085272525	WITHOUT_CLASSIFICATION	2.619147274746247E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998980122314465	WITHOUT_CLASSIFICATION	1.0198776855345595E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999825745479214	WITHOUT_CLASSIFICATION	1.742545207863241E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999870714301018	WITHOUT_CLASSIFICATION	1.292856989825882E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9998802808226013	WITHOUT_CLASSIFICATION	1.1971917739870149E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999851502976244	WITHOUT_CLASSIFICATION	1.4849702375561437E-5	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999975934887346	WITHOUT_CLASSIFICATION	2.406511265291063E-6	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999715429170289	WITHOUT_CLASSIFICATION	2.845708297107075E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999203741082773	WITHOUT_CLASSIFICATION	7.962589172266084E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999686534985496	WITHOUT_CLASSIFICATION	3.134650145040693E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969496317567001	WITHOUT_CLASSIFICATION	0.0030503682432997774	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993536461472011	WITHOUT_CLASSIFICATION	6.463538527989797E-4	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9998241144379093	WITHOUT_CLASSIFICATION	1.7588556209076266E-4	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9997390339146794	WITHOUT_CLASSIFICATION	2.6096608532064053E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999936659656883	WITHOUT_CLASSIFICATION	6.334034311653079E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999730429056239	WITHOUT_CLASSIFICATION	2.695709437605293E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999730429056239	WITHOUT_CLASSIFICATION	2.695709437605293E-5	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999771618788539	WITHOUT_CLASSIFICATION	2.2838121146035803E-5	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995515877346186	WITHOUT_CLASSIFICATION	4.4841226538145604E-4	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999798101237256	WITHOUT_CLASSIFICATION	2.018987627444211E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999825849883417	WITHOUT_CLASSIFICATION	1.7415011658333605E-5	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9949408574035115	WITHOUT_CLASSIFICATION	0.00505914259648853	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999238551825572	WITHOUT_CLASSIFICATION	7.614481744281309E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999996857805256	WITHOUT_CLASSIFICATION	3.1421947436050835E-7	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999990125622604	WITHOUT_CLASSIFICATION	9.874377396003131E-6	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999710596170038	WITHOUT_CLASSIFICATION	2.8940382996258793E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999965852001703	WITHOUT_CLASSIFICATION	3.4147998297494535E-6	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998348635993008	WITHOUT_CLASSIFICATION	1.6513640069910736E-4	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999979773158872	WITHOUT_CLASSIFICATION	2.0226841128291767E-6	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999821314397308	WITHOUT_CLASSIFICATION	1.78685602692636E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999730429056239	WITHOUT_CLASSIFICATION	2.695709437605293E-5	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999682971855679	WITHOUT_CLASSIFICATION	3.170281443211948E-5	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999467310759421	WITHOUT_CLASSIFICATION	5.32689240577893E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999945120020253	WITHOUT_CLASSIFICATION	5.48799797464189E-6	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999568320457153	WITHOUT_CLASSIFICATION	4.316795428479444E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999989073834082	WITHOUT_CLASSIFICATION	1.0926165918392981E-6	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999818491931755	WITHOUT_CLASSIFICATION	1.8150806824491093E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999297832592702	WITHOUT_CLASSIFICATION	7.021674072987564E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999986965668108	WITHOUT_CLASSIFICATION	1.3034331891983403E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999904906737264	WITHOUT_CLASSIFICATION	9.5093262736931E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999954588078226	WITHOUT_CLASSIFICATION	4.541192177490477E-6	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999424950513351	WITHOUT_CLASSIFICATION	5.750494866492634E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9969496317567001	WITHOUT_CLASSIFICATION	0.0030503682432997774	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999730429056239	WITHOUT_CLASSIFICATION	2.695709437605293E-5	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999845823458818	WITHOUT_CLASSIFICATION	1.5417654118150844E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999439880975745	WITHOUT_CLASSIFICATION	5.601190242549833E-4	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999696334411664	WITHOUT_CLASSIFICATION	3.0366558833673066E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994812766548267	WITHOUT_CLASSIFICATION	5.187233451733992E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9998306443428724	WITHOUT_CLASSIFICATION	1.6935565712761856E-4	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999581532885992	WITHOUT_CLASSIFICATION	4.184671140085091E-5	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998195811373373	WITHOUT_CLASSIFICATION	1.8041886266278824E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999988474493144	WITHOUT_CLASSIFICATION	1.1525506856182734E-6	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999957350447315	WITHOUT_CLASSIFICATION	4.264955268512972E-6	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999376031763895	WITHOUT_CLASSIFICATION	6.239682361045783E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9994762437925421	WITHOUT_CLASSIFICATION	5.237562074578311E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999869196138971	WITHOUT_CLASSIFICATION	1.3080386102914994E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999867846900231	WITHOUT_CLASSIFICATION	1.3215309976975823E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999667004554534	WITHOUT_CLASSIFICATION	3.329954454659022E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.99997340580105	WITHOUT_CLASSIFICATION	2.6594198950018948E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999976097123561	WITHOUT_CLASSIFICATION	2.390287644000735E-6	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999972970703713	WITHOUT_CLASSIFICATION	2.7029296287897726E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999940879353815	WITHOUT_CLASSIFICATION	5.912064618421479E-6	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999735462749786	WITHOUT_CLASSIFICATION	2.6453725021380476E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9998123540921394	WITHOUT_CLASSIFICATION	1.8764590786060064E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999765136166542	WITHOUT_CLASSIFICATION	2.348638334581634E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999765136166542	WITHOUT_CLASSIFICATION	2.348638334581634E-5	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9996929303631539	WITHOUT_CLASSIFICATION	3.070696368460955E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999921405828341	WITHOUT_CLASSIFICATION	7.859417165836167E-6	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999988842808085	WITHOUT_CLASSIFICATION	1.1157191915067205E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999821853040629	WITHOUT_CLASSIFICATION	1.781469593710763E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999885030757314	WITHOUT_CLASSIFICATION	1.1496924268538383E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999908107753183	WITHOUT_CLASSIFICATION	9.189224681615753E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9997068878784775	WITHOUT_CLASSIFICATION	2.931121215224956E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.998671183255736	WITHOUT_CLASSIFICATION	0.0013288167442640137	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.998671183255736	WITHOUT_CLASSIFICATION	0.0013288167442640137	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9106774084407145	WITHOUT_CLASSIFICATION	0.08932259155928543	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.999959688966124	WITHOUT_CLASSIFICATION	4.0311033876029905E-5	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999978350777823	WITHOUT_CLASSIFICATION	2.164922217819057E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999582393707792	WITHOUT_CLASSIFICATION	4.176062922088766E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999582393707792	WITHOUT_CLASSIFICATION	4.176062922088766E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999582393707792	WITHOUT_CLASSIFICATION	4.176062922088766E-5	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999709079973167	WITHOUT_CLASSIFICATION	2.9092002683229617E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999832291486906	WITHOUT_CLASSIFICATION	1.6770851309411444E-5	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9941229602283183	WITHOUT_CLASSIFICATION	0.005877039771681767	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999991477127751	WITHOUT_CLASSIFICATION	8.522872249007715E-6	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999996383205554	WITHOUT_CLASSIFICATION	3.6167944460876834E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999730429056239	WITHOUT_CLASSIFICATION	2.695709437605293E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999730429056239	WITHOUT_CLASSIFICATION	2.695709437605293E-5	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9994705636022422	WITHOUT_CLASSIFICATION	5.294363977578042E-4	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999967041309002	WITHOUT_CLASSIFICATION	3.29586909976181E-6	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9994791110251046	WITHOUT_CLASSIFICATION	5.208889748955119E-4	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999016050253232	WITHOUT_CLASSIFICATION	9.839497467681008E-5	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999880447943014	WITHOUT_CLASSIFICATION	1.1955205698571847E-5	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999406247391273	WITHOUT_CLASSIFICATION	5.937526087259221E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999700974201429	WITHOUT_CLASSIFICATION	2.9902579857251858E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999775532151716	WITHOUT_CLASSIFICATION	2.2446784828418754E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999833513880145	WITHOUT_CLASSIFICATION	1.6648611985481382E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999993543032238	WITHOUT_CLASSIFICATION	6.456967761322415E-7	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.99999356127117	WITHOUT_CLASSIFICATION	6.438728830025865E-6	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999313915902508	WITHOUT_CLASSIFICATION	6.860840974912705E-5	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999669003719451	WITHOUT_CLASSIFICATION	3.309962805482919E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999669003719451	WITHOUT_CLASSIFICATION	3.309962805482919E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999669003719451	WITHOUT_CLASSIFICATION	3.309962805482919E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999669003719451	WITHOUT_CLASSIFICATION	3.309962805482919E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999669003719451	WITHOUT_CLASSIFICATION	3.309962805482919E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999545827903215	WITHOUT_CLASSIFICATION	4.5417209678490203E-5	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999545827903215	WITHOUT_CLASSIFICATION	4.5417209678490203E-5	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999545827903215	WITHOUT_CLASSIFICATION	4.5417209678490203E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999545827903215	WITHOUT_CLASSIFICATION	4.5417209678490203E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998089985023542	WITHOUT_CLASSIFICATION	1.9100149764581046E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999765136166542	WITHOUT_CLASSIFICATION	2.348638334581634E-5	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9997149737864193	WITHOUT_CLASSIFICATION	2.85026213580779E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999545827903215	WITHOUT_CLASSIFICATION	4.5417209678490203E-5	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9997961147969712	WITHOUT_CLASSIFICATION	2.0388520302872415E-4	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999841112043585	WITHOUT_CLASSIFICATION	1.588879564156883E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999726721599369	WITHOUT_CLASSIFICATION	2.7327840063134213E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999790410566151	WITHOUT_CLASSIFICATION	2.0958943384965942E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999689079371	WITHOUT_CLASSIFICATION	3.1092062866856514E-8	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999675028808171	WITHOUT_CLASSIFICATION	3.2497119182757004E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998413052360068	WITHOUT_CLASSIFICATION	1.5869476399320496E-4	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999904650629644	WITHOUT_CLASSIFICATION	9.534937035606545E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999955680337644	WITHOUT_CLASSIFICATION	4.4319662354998135E-6	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999439853021	WITHOUT_CLASSIFICATION	5.601469787331327E-8	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999988904604054	WITHOUT_CLASSIFICATION	1.1095395945585903E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999814458060011	WITHOUT_CLASSIFICATION	1.8554193998937942E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999477812099175	WITHOUT_CLASSIFICATION	5.2218790082489105E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9997502170715823	WITHOUT_CLASSIFICATION	2.497829284176417E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8999192085394667	WITHOUT_CLASSIFICATION	0.10008079146053336	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999946458480088	WITHOUT_CLASSIFICATION	5.354151991164578E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999992510964228	WITHOUT_CLASSIFICATION	7.489035771873564E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999894977805708	WITHOUT_CLASSIFICATION	1.0502219429272779E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999894977805708	WITHOUT_CLASSIFICATION	1.0502219429272779E-5	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999781050813387	WITHOUT_CLASSIFICATION	2.1894918661292312E-5	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999997000020078	WITHOUT_CLASSIFICATION	2.9999799220079908E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999765566265182	WITHOUT_CLASSIFICATION	2.34433734817792E-5	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999219514149351	WITHOUT_CLASSIFICATION	7.80485850648568E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999719233473668	WITHOUT_CLASSIFICATION	2.8076652633158585E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999569721146848	WITHOUT_CLASSIFICATION	4.3027885315125226E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999591479096204	WITHOUT_CLASSIFICATION	4.0852090379614255E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999972146600634	WITHOUT_CLASSIFICATION	2.7853399365998084E-6	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999873754531768	WITHOUT_CLASSIFICATION	1.2624546823113523E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999996060192312	WITHOUT_CLASSIFICATION	3.939807688080166E-7	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999959440587199	WITHOUT_CLASSIFICATION	4.055941280096355E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999869196138971	WITHOUT_CLASSIFICATION	1.3080386102914994E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999936412569536	WITHOUT_CLASSIFICATION	6.358743046421798E-6	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999981889981487	WITHOUT_CLASSIFICATION	1.8110018512598182E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999817471803791	WITHOUT_CLASSIFICATION	1.8252819620937957E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999870877972844	WITHOUT_CLASSIFICATION	1.291220271563434E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999942949345	WITHOUT_CLASSIFICATION	5.7050654925367555E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999942949345	WITHOUT_CLASSIFICATION	5.7050654925367555E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9988373641979654	WITHOUT_CLASSIFICATION	0.0011626358020345904	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997870147272	WITHOUT_CLASSIFICATION	2.129852727061256E-7	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999918174601011	WITHOUT_CLASSIFICATION	8.18253989882531E-6	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.999993999908264	WITHOUT_CLASSIFICATION	6.000091736027012E-6	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999796276575841	WITHOUT_CLASSIFICATION	2.0372342415855548E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999935028216831	WITHOUT_CLASSIFICATION	6.49717831696882E-6	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999043271985852	WITHOUT_CLASSIFICATION	9.567280141471037E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999769795090507	WITHOUT_CLASSIFICATION	2.3020490949338288E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999707286029178	WITHOUT_CLASSIFICATION	2.9271397082203786E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999188211545	WITHOUT_CLASSIFICATION	8.117884548152998E-8	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999386585266545	WITHOUT_CLASSIFICATION	6.13414733454803E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999769795090507	WITHOUT_CLASSIFICATION	2.3020490949338288E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9996353000888644	WITHOUT_CLASSIFICATION	3.6469991113565034E-4	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9996171276938276	WITHOUT_CLASSIFICATION	3.8287230617240853E-4	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999842379972552	WITHOUT_CLASSIFICATION	1.576200274484548E-5	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999714148885248	WITHOUT_CLASSIFICATION	2.8585111475212048E-5	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999889940346	WITHOUT_CLASSIFICATION	1.1005965342399184E-8	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999579863085138	WITHOUT_CLASSIFICATION	4.201369148618477E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9986025094690157	WITHOUT_CLASSIFICATION	0.0013974905309841997	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999876217957782	WITHOUT_CLASSIFICATION	1.2378204221912668E-5	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999969873229123	WITHOUT_CLASSIFICATION	3.012677087740519E-6	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997531376193594	WITHOUT_CLASSIFICATION	2.46862380640681E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999658570126217	WITHOUT_CLASSIFICATION	3.414298737830296E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999994115906107	WITHOUT_CLASSIFICATION	5.884093892972449E-6	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998347002621462	WITHOUT_CLASSIFICATION	1.652997378538213E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9994536969756666	WITHOUT_CLASSIFICATION	5.463030243334779E-4	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998607101630195	WITHOUT_CLASSIFICATION	1.392898369805396E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999900434602603	WITHOUT_CLASSIFICATION	9.956539739590215E-6	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999793421420544	WITHOUT_CLASSIFICATION	2.0657857945682236E-5	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9969602675673378	WITHOUT_CLASSIFICATION	0.0030397324326622392	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9969602675673378	WITHOUT_CLASSIFICATION	0.0030397324326622392	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9986025094690157	WITHOUT_CLASSIFICATION	0.0013974905309841997	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9956561407092979	WITHOUT_CLASSIFICATION	0.004343859290702144	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999783650375342	WITHOUT_CLASSIFICATION	2.163496246575174E-5	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999951520287451	WITHOUT_CLASSIFICATION	4.8479712549052884E-5	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999581819385908	WITHOUT_CLASSIFICATION	4.181806140920143E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999908875767609	WITHOUT_CLASSIFICATION	9.112423239117868E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999817184102785	WITHOUT_CLASSIFICATION	1.828158972141512E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999897608534882	WITHOUT_CLASSIFICATION	1.023914651188666E-5	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997163130344295	WITHOUT_CLASSIFICATION	2.836869655704912E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999580153934207	WITHOUT_CLASSIFICATION	4.1984606579457165E-5	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999799789190786	WITHOUT_CLASSIFICATION	2.0021080921417503E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999809714139544	WITHOUT_CLASSIFICATION	1.9028586045689897E-5	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999792499007661	WITHOUT_CLASSIFICATION	2.0750099233906844E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998598448342645	WITHOUT_CLASSIFICATION	1.4015516573554716E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999935468156378	WITHOUT_CLASSIFICATION	6.453184362234362E-6	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998877805031229	WITHOUT_CLASSIFICATION	1.1221949687705934E-4	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999956937326244	WITHOUT_CLASSIFICATION	4.306267375604865E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999998846912818	WITHOUT_CLASSIFICATION	1.1530871814971773E-7	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999942949340437	WITHOUT_CLASSIFICATION	5.7050659562761145E-6	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999946277447748	WITHOUT_CLASSIFICATION	5.372255225203001E-5	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999709407189858	WITHOUT_CLASSIFICATION	2.9059281014130007E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9997395377048376	WITHOUT_CLASSIFICATION	2.604622951623667E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999965618021317	WITHOUT_CLASSIFICATION	3.438197868258597E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9996259749630927	WITHOUT_CLASSIFICATION	3.740250369074177E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999942984170108	WITHOUT_CLASSIFICATION	5.70158298908974E-6	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999850168273424	WITHOUT_CLASSIFICATION	1.4983172657507842E-5	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999844683132078	WITHOUT_CLASSIFICATION	1.5531686792261863E-5	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999970874760665	WITHOUT_CLASSIFICATION	2.9125239334221057E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999947162993919	WITHOUT_CLASSIFICATION	5.283700608094846E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999987697557511	WITHOUT_CLASSIFICATION	1.2302442488502414E-6	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999503359266899	WITHOUT_CLASSIFICATION	4.966407331011588E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998877805031229	WITHOUT_CLASSIFICATION	1.1221949687705934E-4	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999916553678351	WITHOUT_CLASSIFICATION	8.344632164839536E-6	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998595642768	WITHOUT_CLASSIFICATION	1.4043572322755276E-7	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999961735500157	WITHOUT_CLASSIFICATION	3.826449984274156E-6	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999604194554721	WITHOUT_CLASSIFICATION	3.958054452794661E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998059007667763	WITHOUT_CLASSIFICATION	1.9409923322377228E-4	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999965280952262	WITHOUT_CLASSIFICATION	3.471904773797395E-6	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999874844726568	WITHOUT_CLASSIFICATION	1.2515527343088765E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999735378832157	WITHOUT_CLASSIFICATION	2.6462116784238965E-5	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9606525843326909	WITHOUT_CLASSIFICATION	0.0393474156673091	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9991584494546146	WITHOUT_CLASSIFICATION	8.415505453854102E-4	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999393488524181	WITHOUT_CLASSIFICATION	6.065114758191474E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999177693246	WITHOUT_CLASSIFICATION	8.223067533344854E-8	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998313557773747	WITHOUT_CLASSIFICATION	1.686442226253579E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999886127794034	WITHOUT_CLASSIFICATION	1.13872205965854E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999720107411164	WITHOUT_CLASSIFICATION	2.7989258883549298E-5	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9968928434319	WITHOUT_CLASSIFICATION	0.0031071565680999653	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997841293923	WITHOUT_CLASSIFICATION	2.1587060779601093E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999988108808177	WITHOUT_CLASSIFICATION	1.1891191823155923E-6	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9990182000833768	WITHOUT_CLASSIFICATION	9.817999166231764E-4	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999993568493448	WITHOUT_CLASSIFICATION	6.43150655192748E-6	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999707286029178	WITHOUT_CLASSIFICATION	2.9271397082203786E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999808244120849	WITHOUT_CLASSIFICATION	1.9175587915089088E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998877805031229	WITHOUT_CLASSIFICATION	1.1221949687705934E-4	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999767526878935	WITHOUT_CLASSIFICATION	2.324731210634957E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999946715752693	WITHOUT_CLASSIFICATION	5.328424730720844E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999863883001008	WITHOUT_CLASSIFICATION	1.361169989921117E-5	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999863114434001	WITHOUT_CLASSIFICATION	1.36885565998885E-5	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999456224820004	WITHOUT_CLASSIFICATION	5.4377517999589475E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999927190807768	WITHOUT_CLASSIFICATION	7.280919223258174E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9955586518372485	WITHOUT_CLASSIFICATION	0.004441348162751459	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999931568913075	WITHOUT_CLASSIFICATION	6.843108692360249E-6	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999374146567777	WITHOUT_CLASSIFICATION	6.258534322231291E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999635648069721	WITHOUT_CLASSIFICATION	3.6435193027962E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9981982202349866	WITHOUT_CLASSIFICATION	0.001801779765013377	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999785687853708	WITHOUT_CLASSIFICATION	2.14312146292226E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9716582392325183	WITHOUT_CLASSIFICATION	0.02834176076748172	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9716582392325183	WITHOUT_CLASSIFICATION	0.02834176076748172	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998867672463	WITHOUT_CLASSIFICATION	1.1323275373251257E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.991771146243261	WITHOUT_CLASSIFICATION	0.008228853756738999	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9951161145244829	WITHOUT_CLASSIFICATION	0.004883885475517063	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999996918527119	WITHOUT_CLASSIFICATION	3.081472881227163E-7	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999994032090014	WITHOUT_CLASSIFICATION	5.967909986232022E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999381275916845	WITHOUT_CLASSIFICATION	6.187240831542297E-5	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992217329322	WITHOUT_CLASSIFICATION	7.782670678528296E-7	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999932691546325	WITHOUT_CLASSIFICATION	6.730845367549056E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999762207689994	WITHOUT_CLASSIFICATION	2.377923100059757E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.99981978688821	WITHOUT_CLASSIFICATION	1.8021311178986236E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.99981978688821	WITHOUT_CLASSIFICATION	1.8021311178986236E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997527365384641	WITHOUT_CLASSIFICATION	2.472634615359431E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999922476551	WITHOUT_CLASSIFICATION	7.75234492520194E-9	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999705624136572	WITHOUT_CLASSIFICATION	2.94375863427551E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999995799295445	WITHOUT_CLASSIFICATION	4.2007045557071654E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9998791446087698	WITHOUT_CLASSIFICATION	1.2085539123015513E-4	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999057129791898	WITHOUT_CLASSIFICATION	9.428702081007289E-5	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999992525953065	WITHOUT_CLASSIFICATION	7.474046934418903E-7	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999953217577143	WITHOUT_CLASSIFICATION	4.678242285665363E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999997134551528	WITHOUT_CLASSIFICATION	2.8654484718123623E-7	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999990307419269	WITHOUT_CLASSIFICATION	9.692580731742025E-7	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999996319888218	WITHOUT_CLASSIFICATION	3.680111782035764E-6	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999928221947366	WITHOUT_CLASSIFICATION	7.177805263374273E-6	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999557768552321	WITHOUT_CLASSIFICATION	4.422314476795684E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998669995827547	WITHOUT_CLASSIFICATION	1.3300041724528854E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940321197971	WITHOUT_CLASSIFICATION	5.9678802029032706E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999968376026158	WITHOUT_CLASSIFICATION	3.1623973840501213E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999662076445812	WITHOUT_CLASSIFICATION	3.379235541866884E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999823899792988	WITHOUT_CLASSIFICATION	1.7610020701259496E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999976005357167	WITHOUT_CLASSIFICATION	2.399464283328435E-6	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999968014712123	WITHOUT_CLASSIFICATION	3.1985287877633252E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999822920875956	WITHOUT_CLASSIFICATION	1.7707912404352604E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999902454761646	WITHOUT_CLASSIFICATION	9.754523835464794E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9958631652760294	WITHOUT_CLASSIFICATION	0.004136834723970703	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999373852839497	WITHOUT_CLASSIFICATION	6.26147160502761E-5	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999903387051693	WITHOUT_CLASSIFICATION	9.661294830670512E-6	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.99995789920058	WITHOUT_CLASSIFICATION	4.210079941988842E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997474040952441	WITHOUT_CLASSIFICATION	2.5259590475595873E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999761642116441	WITHOUT_CLASSIFICATION	2.3835788355773618E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999323509506621	WITHOUT_CLASSIFICATION	6.764904933780451E-5	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984766033168401	WITHOUT_CLASSIFICATION	0.0015233966831598284	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999983321516427	WITHOUT_CLASSIFICATION	1.667848357282469E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999955254110151	WITHOUT_CLASSIFICATION	4.4745889849081586E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998994062911831	WITHOUT_CLASSIFICATION	1.0059370881679813E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983519194899513	WITHOUT_CLASSIFICATION	0.0016480805100487716	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5010713566784876	IMPLEMENTATION	0.4989286433215124	WITHOUT_CLASSIFICATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999696787183143	WITHOUT_CLASSIFICATION	3.0321281685597773E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999994588552759	WITHOUT_CLASSIFICATION	5.411447241509498E-7	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999622665425223	WITHOUT_CLASSIFICATION	3.773345747775349E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984731829171277	WITHOUT_CLASSIFICATION	0.0015268170828722923	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999607387195449	WITHOUT_CLASSIFICATION	3.926128045504497E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999921754090358	WITHOUT_CLASSIFICATION	7.824590964178021E-6	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999742218907087	WITHOUT_CLASSIFICATION	2.5778109291196318E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.999953423314242	WITHOUT_CLASSIFICATION	4.657668575803503E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999933530597465	WITHOUT_CLASSIFICATION	6.646940253500357E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999749374116979	WITHOUT_CLASSIFICATION	2.5062588302151767E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9995319892717779	WITHOUT_CLASSIFICATION	4.6801072822213167E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999438340596799	WITHOUT_CLASSIFICATION	5.616594032013415E-5	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999770316164307	WITHOUT_CLASSIFICATION	2.2968383569332096E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998287501428176	WITHOUT_CLASSIFICATION	1.7124985718247572E-4	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999998095616861	WITHOUT_CLASSIFICATION	1.9043831391652467E-7	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999760414280349	WITHOUT_CLASSIFICATION	2.3958571965194557E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999414249476326	WITHOUT_CLASSIFICATION	5.857505236731025E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999972894724596	WITHOUT_CLASSIFICATION	2.710527540420667E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999941194896902	WITHOUT_CLASSIFICATION	5.880510309830419E-6	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999820781910304	WITHOUT_CLASSIFICATION	1.7921808969632673E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999976888793859	WITHOUT_CLASSIFICATION	2.3111206142080167E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998601498023306	WITHOUT_CLASSIFICATION	1.398501976694842E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998094383852414	WITHOUT_CLASSIFICATION	1.9056161475865534E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998601498023306	WITHOUT_CLASSIFICATION	1.398501976694842E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998841144285479	WITHOUT_CLASSIFICATION	1.1588557145209665E-4	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999593957554254	WITHOUT_CLASSIFICATION	4.060424457461041E-5	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997618189544406	WITHOUT_CLASSIFICATION	2.3818104555935264E-4	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999833516610458	WITHOUT_CLASSIFICATION	1.6648338954204016E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999795297671027	WITHOUT_CLASSIFICATION	2.047023289728079E-5	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997618189544406	WITHOUT_CLASSIFICATION	2.3818104555935264E-4	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999964024249319	WITHOUT_CLASSIFICATION	3.597575067974523E-6	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998775706720332	WITHOUT_CLASSIFICATION	1.2242932796684164E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999932992868407	WITHOUT_CLASSIFICATION	6.7007131593330526E-6	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9995009232818626	WITHOUT_CLASSIFICATION	4.990767181375139E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999833199450009	WITHOUT_CLASSIFICATION	1.6680054999151575E-5	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999930682157133	WITHOUT_CLASSIFICATION	6.931784286706325E-6	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999992058726106	WITHOUT_CLASSIFICATION	7.941273894054557E-6	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.5593466942952849	IMPLEMENTATION	0.44065330570471506	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9997882547948028	WITHOUT_CLASSIFICATION	2.1174520519718558E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999971261825105	WITHOUT_CLASSIFICATION	2.873817489590061E-6	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999988792481924	WITHOUT_CLASSIFICATION	1.120751807665751E-6	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998818346017827	WITHOUT_CLASSIFICATION	1.1816539821736851E-4	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999997968592722	WITHOUT_CLASSIFICATION	2.031407278054407E-6	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999854084919007	WITHOUT_CLASSIFICATION	1.459150809939652E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999811173199	WITHOUT_CLASSIFICATION	1.8882680119175694E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999039992976027	WITHOUT_CLASSIFICATION	9.600070239728597E-5	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999938815843095	WITHOUT_CLASSIFICATION	6.118415690471951E-6	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999757387445565	WITHOUT_CLASSIFICATION	2.4261255443471633E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998868828239046	WITHOUT_CLASSIFICATION	1.1311717609546821E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998089086358	WITHOUT_CLASSIFICATION	1.9109136416761593E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999973153284991	WITHOUT_CLASSIFICATION	2.6846715008964762E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999609519787802	WITHOUT_CLASSIFICATION	3.904802121983808E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998816897120711	WITHOUT_CLASSIFICATION	1.1831028792886377E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9977725158261844	WITHOUT_CLASSIFICATION	0.002227484173815562	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.999968855692269	WITHOUT_CLASSIFICATION	3.1144307730926806E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999137621627087	WITHOUT_CLASSIFICATION	8.623783729131199E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999940109	WITHOUT_CLASSIFICATION	5.989103876019503E-12	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998580249444725	WITHOUT_CLASSIFICATION	1.4197505552754341E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.999974117976647	WITHOUT_CLASSIFICATION	2.588202335305328E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999780698301024	WITHOUT_CLASSIFICATION	2.1930169897651437E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998816897120711	WITHOUT_CLASSIFICATION	1.1831028792886377E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998800580254198	WITHOUT_CLASSIFICATION	1.1994197458014007E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999832177261306	WITHOUT_CLASSIFICATION	1.678227386937298E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9997187513657988	WITHOUT_CLASSIFICATION	2.812486342012861E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9894207424901058	WITHOUT_CLASSIFICATION	0.010579257509894144	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998089086358	WITHOUT_CLASSIFICATION	1.9109136416761593E-7	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999332780533942	WITHOUT_CLASSIFICATION	6.672194660590225E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999981617071301	WITHOUT_CLASSIFICATION	1.8382928698650092E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999935214944692	WITHOUT_CLASSIFICATION	6.478505530810577E-6	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999516958153948	WITHOUT_CLASSIFICATION	4.830418460523365E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999453439403383	WITHOUT_CLASSIFICATION	5.465605966165267E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.999996327857556	WITHOUT_CLASSIFICATION	3.672142444050902E-6	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999983799378571	WITHOUT_CLASSIFICATION	1.6200621429229212E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999848719532433	WITHOUT_CLASSIFICATION	1.512804675661869E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998868714987905	WITHOUT_CLASSIFICATION	1.1312850120951961E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998326888624447	WITHOUT_CLASSIFICATION	1.6731113755535742E-4	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.999909743226344	WITHOUT_CLASSIFICATION	9.025677365609794E-5	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999965426774303	WITHOUT_CLASSIFICATION	3.457322569700155E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999974725483575	WITHOUT_CLASSIFICATION	2.5274516424479886E-6	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999899175769901	WITHOUT_CLASSIFICATION	1.0082423009864878E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999738883934273	WITHOUT_CLASSIFICATION	2.6111606572776377E-5	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999756954751999	WITHOUT_CLASSIFICATION	2.430452480011186E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999823862024598	WITHOUT_CLASSIFICATION	1.7613797540164334E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999332780533942	WITHOUT_CLASSIFICATION	6.672194660590225E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9862499907311607	WITHOUT_CLASSIFICATION	0.013750009268839356	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998700245363696	WITHOUT_CLASSIFICATION	1.299754636303164E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9977788893177811	WITHOUT_CLASSIFICATION	0.0022211106822189633	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999959706786571	WITHOUT_CLASSIFICATION	4.029321342919408E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.997269506137237	WITHOUT_CLASSIFICATION	0.0027304938627631206	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.997269506137237	WITHOUT_CLASSIFICATION	0.0027304938627631206	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999788660598471	WITHOUT_CLASSIFICATION	2.1133940152961066E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.997269506137237	WITHOUT_CLASSIFICATION	0.0027304938627631206	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.997269506137237	WITHOUT_CLASSIFICATION	0.0027304938627631206	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999072392485056	WITHOUT_CLASSIFICATION	9.276075149439418E-4	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999850623958284	WITHOUT_CLASSIFICATION	1.4937604171579192E-5	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999939488748575	WITHOUT_CLASSIFICATION	6.051125142503226E-5	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999939488748575	WITHOUT_CLASSIFICATION	6.051125142503226E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.99992727812515	WITHOUT_CLASSIFICATION	7.272187484998287E-5	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999786283987847	WITHOUT_CLASSIFICATION	2.1371601215293572E-4	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999464764277453	WITHOUT_CLASSIFICATION	5.352357225481912E-5	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999999952923638	WITHOUT_CLASSIFICATION	4.707636207250535E-8	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999490383364368	WITHOUT_CLASSIFICATION	5.0961663563251705E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998807393477035	WITHOUT_CLASSIFICATION	1.1926065229653609E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9996980082537665	WITHOUT_CLASSIFICATION	3.0199174623345067E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999718348037976	WITHOUT_CLASSIFICATION	2.8165196202345216E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999376569619811	WITHOUT_CLASSIFICATION	6.234303801879338E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999949151267967	WITHOUT_CLASSIFICATION	5.084873203305191E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999343521684154	WITHOUT_CLASSIFICATION	6.564783158461834E-5	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999922483479796	WITHOUT_CLASSIFICATION	7.751652020400004E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999968591387399	WITHOUT_CLASSIFICATION	3.1408612600864773E-6	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999077587204155	WITHOUT_CLASSIFICATION	9.224127958444549E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999163095739854	WITHOUT_CLASSIFICATION	8.36904260145629E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999168939368739	WITHOUT_CLASSIFICATION	8.31060631261325E-5	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999031881303958	WITHOUT_CLASSIFICATION	9.681186960422621E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999479779977166	WITHOUT_CLASSIFICATION	5.2022002283275475E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999968591387399	WITHOUT_CLASSIFICATION	3.1408612600864773E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999973153284991	WITHOUT_CLASSIFICATION	2.6846715008964762E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9997418668576518	WITHOUT_CLASSIFICATION	2.581331423481678E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999686004320995	WITHOUT_CLASSIFICATION	3.139956790054462E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998837011230876	WITHOUT_CLASSIFICATION	1.1629887691242216E-4	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9997369318333829	WITHOUT_CLASSIFICATION	2.63068166617083E-4	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999499102471208	WITHOUT_CLASSIFICATION	5.008975287920422E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9995119510863011	WITHOUT_CLASSIFICATION	4.880489136989395E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998864778049504	WITHOUT_CLASSIFICATION	1.135221950495904E-4	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999770202627923	WITHOUT_CLASSIFICATION	2.29797372076684E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999994326130388	WITHOUT_CLASSIFICATION	5.673869611533122E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999921756603574	WITHOUT_CLASSIFICATION	7.824339642597106E-6	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999968165243986	WITHOUT_CLASSIFICATION	3.18347560136735E-6	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999432420048449	WITHOUT_CLASSIFICATION	5.675799515525868E-5	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998750295091728	WITHOUT_CLASSIFICATION	1.24970490827129E-4	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9974667899416728	WITHOUT_CLASSIFICATION	0.0025332100583272408	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999577921578385	WITHOUT_CLASSIFICATION	4.220784216138521E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999054002924586	WITHOUT_CLASSIFICATION	9.459970754145866E-5	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9996210522724907	WITHOUT_CLASSIFICATION	3.789477275093439E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999993125185698	WITHOUT_CLASSIFICATION	6.874814301912513E-6	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998309731429139	WITHOUT_CLASSIFICATION	1.6902685708610778E-4	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.99997982223245	WITHOUT_CLASSIFICATION	2.0177767550045454E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9992451377042947	WITHOUT_CLASSIFICATION	7.548622957053555E-4	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999975666293235	WITHOUT_CLASSIFICATION	2.4333706764824206E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999770202627923	WITHOUT_CLASSIFICATION	2.29797372076684E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999295468974808	WITHOUT_CLASSIFICATION	7.045310251919987E-5	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999479979915861	WITHOUT_CLASSIFICATION	5.200200841393663E-5	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9985800925520844	WITHOUT_CLASSIFICATION	0.0014199074479155627	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999797077692476	WITHOUT_CLASSIFICATION	2.029223075244091E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999345861032841	WITHOUT_CLASSIFICATION	6.541389671582649E-5	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9998789154627773	WITHOUT_CLASSIFICATION	1.2108453722281624E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9991626626136242	WITHOUT_CLASSIFICATION	8.373373863758085E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9998787726378254	WITHOUT_CLASSIFICATION	1.2122736217454624E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.999713401268444	WITHOUT_CLASSIFICATION	2.8659873155599134E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999968439446453	WITHOUT_CLASSIFICATION	3.156055354703647E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998178053760237	WITHOUT_CLASSIFICATION	1.8219462397642237E-4	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999995808846561	WITHOUT_CLASSIFICATION	4.1911534388075667E-7	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999956995090484	WITHOUT_CLASSIFICATION	4.300490951548861E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888704747708	WITHOUT_CLASSIFICATION	1.1129525229196832E-5	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999960027230866	WITHOUT_CLASSIFICATION	3.997276913313542E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999966632170141	WITHOUT_CLASSIFICATION	3.3367829858513642E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999968439446453	WITHOUT_CLASSIFICATION	3.156055354703647E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999927783853141	WITHOUT_CLASSIFICATION	7.2216146860023875E-6	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999869876829942	WITHOUT_CLASSIFICATION	1.301231700589962E-5	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999718613471389	WITHOUT_CLASSIFICATION	2.8138652861168803E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999895502053254	WITHOUT_CLASSIFICATION	1.0449794674620829E-5	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999592802672527	WITHOUT_CLASSIFICATION	4.0719732747407626E-5	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999281803961732	WITHOUT_CLASSIFICATION	7.181960382679205E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888704747708	WITHOUT_CLASSIFICATION	1.1129525229196832E-5	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999980162181561	WITHOUT_CLASSIFICATION	1.9837818438853053E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951640701223	WITHOUT_CLASSIFICATION	4.835929877701083E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999299359768733	WITHOUT_CLASSIFICATION	7.00640231266875E-5	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995224403440246	WITHOUT_CLASSIFICATION	4.7755965597545615E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995224403440246	WITHOUT_CLASSIFICATION	4.7755965597545615E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995224403440246	WITHOUT_CLASSIFICATION	4.7755965597545615E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999909441163419	WITHOUT_CLASSIFICATION	9.055883657958438E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999909441163419	WITHOUT_CLASSIFICATION	9.055883657958438E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999977590820763	WITHOUT_CLASSIFICATION	2.240917923709173E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999942628200474	WITHOUT_CLASSIFICATION	5.737179952530834E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999399969928329	WITHOUT_CLASSIFICATION	6.000300716714446E-5	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999342390052955	WITHOUT_CLASSIFICATION	6.576099470447301E-5	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9839082877249125	WITHOUT_CLASSIFICATION	0.016091712275087478	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999937912459838	WITHOUT_CLASSIFICATION	6.208754016206653E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683529252891	WITHOUT_CLASSIFICATION	3.164707471095232E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999996550879419	WITHOUT_CLASSIFICATION	3.449120581819595E-7	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999027297341464	WITHOUT_CLASSIFICATION	9.727026585353479E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999937912459838	WITHOUT_CLASSIFICATION	6.208754016206653E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683529252891	WITHOUT_CLASSIFICATION	3.164707471095232E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999996693514096	WITHOUT_CLASSIFICATION	3.306485903712648E-7	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999969150387558	WITHOUT_CLASSIFICATION	3.084961244264961E-6	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999998068558782	WITHOUT_CLASSIFICATION	1.9314412179649033E-6	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999990075369833	WITHOUT_CLASSIFICATION	9.924630166250412E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999612493012698	WITHOUT_CLASSIFICATION	3.875069873007941E-5	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.999992372319286	WITHOUT_CLASSIFICATION	7.627680714057505E-6	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999734214704044	WITHOUT_CLASSIFICATION	2.657852959560879E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999829799419652	WITHOUT_CLASSIFICATION	1.702005803475529E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999696409362062	WITHOUT_CLASSIFICATION	3.035906379378084E-5	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997099037444831	WITHOUT_CLASSIFICATION	2.9009625551690255E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999989943542876	WITHOUT_CLASSIFICATION	1.0056457124059967E-5	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999870550113459	WITHOUT_CLASSIFICATION	1.2944988654117503E-5	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999777801030044	WITHOUT_CLASSIFICATION	2.221989699562377E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999871513672351	WITHOUT_CLASSIFICATION	1.2848632764888195E-5	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999335698873968	WITHOUT_CLASSIFICATION	6.643011260320645E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999800899193789	WITHOUT_CLASSIFICATION	1.9910080621025207E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998076791168593	WITHOUT_CLASSIFICATION	1.9232088314073578E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999997940980373	WITHOUT_CLASSIFICATION	2.0590196270392954E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999323104711799	WITHOUT_CLASSIFICATION	6.768952882000596E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9946682983691001	WITHOUT_CLASSIFICATION	0.0053317016308999255	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999984754995734	WITHOUT_CLASSIFICATION	1.5245004266006216E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999982588528866	WITHOUT_CLASSIFICATION	1.7411471133268095E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9934324392288484	WITHOUT_CLASSIFICATION	0.0065675607711516435	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373427722557	WITHOUT_CLASSIFICATION	6.265722774430596E-5	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999382049640577	WITHOUT_CLASSIFICATION	6.179503594229832E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999982408572914	WITHOUT_CLASSIFICATION	1.759142708636621E-6	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999422864327044	WITHOUT_CLASSIFICATION	5.771356729557367E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999551615294682	WITHOUT_CLASSIFICATION	4.483847053193411E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999800175391771	WITHOUT_CLASSIFICATION	1.9982460822949806E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999800175391771	WITHOUT_CLASSIFICATION	1.9982460822949806E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999966111686163	WITHOUT_CLASSIFICATION	3.388831383692997E-5	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9997799616239587	WITHOUT_CLASSIFICATION	2.2003837604140817E-4	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9981981756777035	WITHOUT_CLASSIFICATION	0.00180182432229646	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999869196138971	WITHOUT_CLASSIFICATION	1.3080386102914994E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999507921662973	WITHOUT_CLASSIFICATION	4.920783370269954E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999992462955266	WITHOUT_CLASSIFICATION	7.537044734533026E-7	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.999980682110808	WITHOUT_CLASSIFICATION	1.9317889191906905E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999592761369748	WITHOUT_CLASSIFICATION	4.0723863025248463E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9997763076557264	WITHOUT_CLASSIFICATION	2.2369234427364293E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9968901965253872	WITHOUT_CLASSIFICATION	0.0031098034746128603	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999299950190383	WITHOUT_CLASSIFICATION	7.000498096166132E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999830243781421	WITHOUT_CLASSIFICATION	1.697562185786074E-5	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999911802257767	WITHOUT_CLASSIFICATION	8.819774223230377E-6	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999144361441	WITHOUT_CLASSIFICATION	8.556385589264051E-8	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9985737782115975	WITHOUT_CLASSIFICATION	0.0014262217884025	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999899873787528	WITHOUT_CLASSIFICATION	1.0012621247307083E-5	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.998790170206244	WITHOUT_CLASSIFICATION	0.001209829793756004	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999830243781421	WITHOUT_CLASSIFICATION	1.697562185786074E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999830243781421	WITHOUT_CLASSIFICATION	1.697562185786074E-5	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999989312621097	WITHOUT_CLASSIFICATION	1.0687378903030392E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.99997297709907	WITHOUT_CLASSIFICATION	2.702290093008651E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995220740042818	WITHOUT_CLASSIFICATION	4.779259957181581E-4	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999899304551634	WITHOUT_CLASSIFICATION	1.0069544836594988E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999477812099175	WITHOUT_CLASSIFICATION	5.2218790082489105E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998076791168593	WITHOUT_CLASSIFICATION	1.9232088314073578E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998589149048642	WITHOUT_CLASSIFICATION	1.4108509513575598E-4	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999721318257283	WITHOUT_CLASSIFICATION	2.786817427165336E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999880398816187	WITHOUT_CLASSIFICATION	1.1960118381384213E-5	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998359514013275	WITHOUT_CLASSIFICATION	1.6404859867243088E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999987048020845	WITHOUT_CLASSIFICATION	1.2951979154993184E-6	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999616220290567	WITHOUT_CLASSIFICATION	3.837797094326612E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999507062509023	WITHOUT_CLASSIFICATION	4.929374909754764E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999507062509023	WITHOUT_CLASSIFICATION	4.929374909754764E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999507062509023	WITHOUT_CLASSIFICATION	4.929374909754764E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999507062509023	WITHOUT_CLASSIFICATION	4.929374909754764E-5	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489316782347	WITHOUT_CLASSIFICATION	5.10683217653598E-5	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999910925489975	WITHOUT_CLASSIFICATION	8.90745100246573E-6	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376152527039	WITHOUT_CLASSIFICATION	6.23847472961752E-5	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9981586024027016	WITHOUT_CLASSIFICATION	0.0018413975972983523	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999941170983466	WITHOUT_CLASSIFICATION	5.882901653424832E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999944638901916	WITHOUT_CLASSIFICATION	5.536109808408403E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999927811703016	WITHOUT_CLASSIFICATION	7.218829698393471E-5	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999866008065454	WITHOUT_CLASSIFICATION	1.3399193454480425E-5	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.999993756689185	WITHOUT_CLASSIFICATION	6.24331081500839E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999998318104958	WITHOUT_CLASSIFICATION	1.6818950419375804E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999505984697448	WITHOUT_CLASSIFICATION	4.940153025533011E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999267213498679	WITHOUT_CLASSIFICATION	7.32786501320696E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998826816663088	WITHOUT_CLASSIFICATION	1.1731833369119199E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999482764421599	WITHOUT_CLASSIFICATION	5.172355784014544E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999482764421599	WITHOUT_CLASSIFICATION	5.172355784014544E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999482764421599	WITHOUT_CLASSIFICATION	5.172355784014544E-5	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999910956465335	WITHOUT_CLASSIFICATION	8.904353466477438E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999843215254708	WITHOUT_CLASSIFICATION	1.5678474529260353E-5	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999322484082	WITHOUT_CLASSIFICATION	6.775159181990736E-8	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999385891146013	WITHOUT_CLASSIFICATION	6.141088539861952E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999385891146013	WITHOUT_CLASSIFICATION	6.141088539861952E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999918019038961	WITHOUT_CLASSIFICATION	8.198096103804836E-6	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995224403440246	WITHOUT_CLASSIFICATION	4.7755965597545615E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9864588301547768	WITHOUT_CLASSIFICATION	0.013541169845223194	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999943981036398	WITHOUT_CLASSIFICATION	5.601896360157131E-6	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999949391349755	WITHOUT_CLASSIFICATION	5.0608650244750045E-6	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999052342619767	WITHOUT_CLASSIFICATION	9.476573802316215E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998881877372677	WITHOUT_CLASSIFICATION	1.1181226273233688E-4	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999995880728144	WITHOUT_CLASSIFICATION	4.11927185581923E-7	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999840455683654	WITHOUT_CLASSIFICATION	1.5954431634600353E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999920891294075	WITHOUT_CLASSIFICATION	7.910870592554106E-6	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999662051577813	WITHOUT_CLASSIFICATION	3.3794842218609194E-5	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999772211165137	WITHOUT_CLASSIFICATION	2.2778883486332688E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999894200330893	WITHOUT_CLASSIFICATION	1.0579966910698013E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999854169450847	WITHOUT_CLASSIFICATION	1.4583054915334515E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999926488556	WITHOUT_CLASSIFICATION	7.351144370093396E-9	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998518459343	WITHOUT_CLASSIFICATION	1.4815406575401567E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999358420802	WITHOUT_CLASSIFICATION	6.415791971443463E-8	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999998426442314	WITHOUT_CLASSIFICATION	1.5735576850762182E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999113086671543	WITHOUT_CLASSIFICATION	8.869133284569675E-5	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998773054313734	WITHOUT_CLASSIFICATION	1.2269456862660635E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999997205208049	WITHOUT_CLASSIFICATION	2.7947919506694255E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999793781145705	WITHOUT_CLASSIFICATION	2.062188542944655E-5	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999976120856	WITHOUT_CLASSIFICATION	2.3879143873008206E-8	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999962832728952	WITHOUT_CLASSIFICATION	3.716727104735734E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999998026219858	WITHOUT_CLASSIFICATION	1.973780142209284E-7	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999743069197773	WITHOUT_CLASSIFICATION	2.569308022268756E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999820861672507	WITHOUT_CLASSIFICATION	1.7913832749254644E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9779323386383736	WITHOUT_CLASSIFICATION	0.02206766136162638	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999689904139231	WITHOUT_CLASSIFICATION	3.100958607694187E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9943585464117888	WITHOUT_CLASSIFICATION	0.005641453588211171	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9997583043548222	WITHOUT_CLASSIFICATION	2.4169564517799138E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999875461528458	WITHOUT_CLASSIFICATION	1.2453847154148383E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999042911847927	WITHOUT_CLASSIFICATION	9.570881520729422E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999993585620628	WITHOUT_CLASSIFICATION	6.414379372353588E-7	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999572183266981	WITHOUT_CLASSIFICATION	4.278167330188718E-5	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9884582380296458	WITHOUT_CLASSIFICATION	0.011541761970354133	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999993949168122	WITHOUT_CLASSIFICATION	6.050831877947924E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999671373906	WITHOUT_CLASSIFICATION	3.28626093964431E-8	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999726805164293	WITHOUT_CLASSIFICATION	2.7319483570750446E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999901261583143	WITHOUT_CLASSIFICATION	9.873841685653607E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999919567461717	WITHOUT_CLASSIFICATION	8.04325382841142E-6	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999628933591543	WITHOUT_CLASSIFICATION	3.710664084576038E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999997397059722	WITHOUT_CLASSIFICATION	2.6029402779194664E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999988304724647	WITHOUT_CLASSIFICATION	1.1695275353222431E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998424247105416	WITHOUT_CLASSIFICATION	1.575752894582632E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997820478958711	WITHOUT_CLASSIFICATION	2.1795210412886505E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999151591564102	WITHOUT_CLASSIFICATION	8.484084358985312E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9995422656459936	WITHOUT_CLASSIFICATION	4.5773435400640856E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.999969036836323	WITHOUT_CLASSIFICATION	3.096316367692638E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9991621076223013	WITHOUT_CLASSIFICATION	8.378923776987316E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999901376528341	WITHOUT_CLASSIFICATION	9.862347165923621E-6	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999798706647919	WITHOUT_CLASSIFICATION	2.0129335208066816E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9985267350189948	WITHOUT_CLASSIFICATION	0.0014732649810052197	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999987723908054	WITHOUT_CLASSIFICATION	1.2276091945893459E-5	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999994930263477	WITHOUT_CLASSIFICATION	5.069736523045641E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999843844468	WITHOUT_CLASSIFICATION	1.56155531745701E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999826678255365	WITHOUT_CLASSIFICATION	1.733217446362139E-5	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999878821512971	WITHOUT_CLASSIFICATION	1.2117848702880571E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999973832890104	WITHOUT_CLASSIFICATION	2.6167109896138048E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999990415258604	WITHOUT_CLASSIFICATION	9.58474139602064E-6	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999408806880724	WITHOUT_CLASSIFICATION	5.911931192763688E-5	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9785139993305336	WITHOUT_CLASSIFICATION	0.021486000669466442	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998095575723744	WITHOUT_CLASSIFICATION	1.9044242762565174E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999962751109196	WITHOUT_CLASSIFICATION	3.724889080407905E-5	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999600254839487	WITHOUT_CLASSIFICATION	3.997451605132664E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999267949418444	WITHOUT_CLASSIFICATION	7.320505815561577E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999953351041928	WITHOUT_CLASSIFICATION	4.664895807127211E-6	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999996110581308	WITHOUT_CLASSIFICATION	3.8894186918621706E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999726285739835	WITHOUT_CLASSIFICATION	2.7371426016554027E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999902715479178	WITHOUT_CLASSIFICATION	9.728452082260322E-6	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9998694552096772	WITHOUT_CLASSIFICATION	1.305447903228026E-4	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999879638917674	WITHOUT_CLASSIFICATION	1.2036108232743156E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999311237216095	WITHOUT_CLASSIFICATION	6.887627839048381E-5	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999818325244129	WITHOUT_CLASSIFICATION	1.816747558708392E-5	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998343526238858	WITHOUT_CLASSIFICATION	1.6564737611424177E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6410020390908059	IMPLEMENTATION	0.3589979609091941	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999391729742013	WITHOUT_CLASSIFICATION	6.0827025798618415E-5	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9802321661735216	WITHOUT_CLASSIFICATION	0.019767833826478436	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.6654333255122697	WITHOUT_CLASSIFICATION	0.3345666744877302	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9998750648207752	WITHOUT_CLASSIFICATION	1.249351792249064E-4	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999041514383212	WITHOUT_CLASSIFICATION	9.584856167877777E-5	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999771562387567	WITHOUT_CLASSIFICATION	2.2843761243365755E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9995752780321693	WITHOUT_CLASSIFICATION	4.2472196783075274E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999950385173762	WITHOUT_CLASSIFICATION	4.961482623801514E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998418739874023	WITHOUT_CLASSIFICATION	1.5812601259760495E-4	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999787611307858	WITHOUT_CLASSIFICATION	2.1238869214261818E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999184725724146	WITHOUT_CLASSIFICATION	8.152742758536952E-5	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999914318087545	WITHOUT_CLASSIFICATION	8.568191245503109E-6	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999898913534888	WITHOUT_CLASSIFICATION	1.0108646511123422E-5	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9996040971491612	WITHOUT_CLASSIFICATION	3.959028508388189E-4	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999935342896223	WITHOUT_CLASSIFICATION	6.465710377684043E-6	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999378430206327	WITHOUT_CLASSIFICATION	6.215697936727782E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999769678557384	WITHOUT_CLASSIFICATION	2.303214426155735E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999461908685511	WITHOUT_CLASSIFICATION	5.380913144895865E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998586723709595	WITHOUT_CLASSIFICATION	1.413276290404495E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998586723709595	WITHOUT_CLASSIFICATION	1.413276290404495E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999896768710209	WITHOUT_CLASSIFICATION	1.0323128979157284E-5	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9993577264080091	WITHOUT_CLASSIFICATION	6.422735919909565E-4	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999556470682702	WITHOUT_CLASSIFICATION	4.4352931729806804E-5	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999935045449433	WITHOUT_CLASSIFICATION	6.495455056819887E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9995988869490731	WITHOUT_CLASSIFICATION	4.0111305092693675E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999730767596103	WITHOUT_CLASSIFICATION	2.692324038966977E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999903809431582	WITHOUT_CLASSIFICATION	9.619056841860961E-6	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999353580924097	WITHOUT_CLASSIFICATION	6.464190759024083E-5	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999827104404028	WITHOUT_CLASSIFICATION	1.7289559597220457E-5	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9422757067400381	WITHOUT_CLASSIFICATION	0.05772429325996186	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999989879888986	WITHOUT_CLASSIFICATION	1.0120111013207919E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999997080861814	WITHOUT_CLASSIFICATION	2.9191381855148473E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9956924093321511	WITHOUT_CLASSIFICATION	0.004307590667848973	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999932602376295	WITHOUT_CLASSIFICATION	6.739762370613763E-6	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999531449819943	WITHOUT_CLASSIFICATION	4.685501800571038E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999958667559812	WITHOUT_CLASSIFICATION	4.133244018867125E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9866792511406083	IMPLEMENTATION	0.013320748859391754	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9866792511406083	IMPLEMENTATION	0.013320748859391754	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999762908021205	WITHOUT_CLASSIFICATION	2.3709197879588423E-5	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999982426131424	WITHOUT_CLASSIFICATION	1.7573868577193776E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998615191364273	WITHOUT_CLASSIFICATION	1.3848086357269473E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999582224377731	WITHOUT_CLASSIFICATION	4.1777562227033325E-5	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999544206013554	WITHOUT_CLASSIFICATION	4.5579398644606276E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999631645750596	WITHOUT_CLASSIFICATION	3.683542494045536E-5	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999544206013554	WITHOUT_CLASSIFICATION	4.5579398644606276E-5	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999744091040637	WITHOUT_CLASSIFICATION	2.5590895936366967E-5	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999376907017811	WITHOUT_CLASSIFICATION	6.230929821888439E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999174992959372	WITHOUT_CLASSIFICATION	8.250070406285828E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999174992959372	WITHOUT_CLASSIFICATION	8.250070406285828E-5	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999896492434872	WITHOUT_CLASSIFICATION	1.0350756512760555E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999983186873009	WITHOUT_CLASSIFICATION	1.6813126990958364E-5	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999373852839497	WITHOUT_CLASSIFICATION	6.26147160502761E-5	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997093678931377	WITHOUT_CLASSIFICATION	2.9063210686230815E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999373852839497	WITHOUT_CLASSIFICATION	6.26147160502761E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999835064	WITHOUT_CLASSIFICATION	1.649364184556683E-11	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999623610214673	WITHOUT_CLASSIFICATION	3.7638978532617587E-5	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999958246491417	WITHOUT_CLASSIFICATION	4.175350858347154E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998089985023542	WITHOUT_CLASSIFICATION	1.9100149764581046E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999730429056239	WITHOUT_CLASSIFICATION	2.695709437605293E-5	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999934486068618	WITHOUT_CLASSIFICATION	6.551393138219635E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999945120020253	WITHOUT_CLASSIFICATION	5.48799797464189E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994812766548267	WITHOUT_CLASSIFICATION	5.187233451733992E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999921242267941	WITHOUT_CLASSIFICATION	7.87577320598049E-6	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999669003719451	WITHOUT_CLASSIFICATION	3.309962805482919E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999823899792988	WITHOUT_CLASSIFICATION	1.7610020701259496E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999278610336687	WITHOUT_CLASSIFICATION	7.213896633123684E-5	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998773811450986	WITHOUT_CLASSIFICATION	1.2261885490137228E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999962680750245	WITHOUT_CLASSIFICATION	3.731924975554288E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998098406659248	WITHOUT_CLASSIFICATION	1.9015933407523196E-4	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998311413668155	WITHOUT_CLASSIFICATION	1.6885863318444823E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999791022863947	WITHOUT_CLASSIFICATION	2.0897713605299892E-5	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999545827903215	WITHOUT_CLASSIFICATION	4.5417209678490203E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9980722449776168	WITHOUT_CLASSIFICATION	0.0019277550223832786	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992604254859624	WITHOUT_CLASSIFICATION	7.395745140377048E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999621783321515	WITHOUT_CLASSIFICATION	3.782166784846904E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999851538637218	WITHOUT_CLASSIFICATION	1.4846136278148756E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.968263398870719	WITHOUT_CLASSIFICATION	0.03173660112928106	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999963690187152	WITHOUT_CLASSIFICATION	3.6309812848076704E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998125903884182	WITHOUT_CLASSIFICATION	1.8740961158184613E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999942949345	WITHOUT_CLASSIFICATION	5.7050654925367555E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999708743819018	WITHOUT_CLASSIFICATION	2.9125618098126128E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999367926410836	WITHOUT_CLASSIFICATION	6.320735891644551E-5	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999954782540544	WITHOUT_CLASSIFICATION	4.5217459455593394E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9709607875852209	WITHOUT_CLASSIFICATION	0.029039212414779112	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999964756827638	WITHOUT_CLASSIFICATION	3.524317236211312E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999707926312656	WITHOUT_CLASSIFICATION	2.92073687343695E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999688978144039	WITHOUT_CLASSIFICATION	3.1102185596164124E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999688978144039	WITHOUT_CLASSIFICATION	3.1102185596164124E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999780297830113	WITHOUT_CLASSIFICATION	2.197021698866337E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999514235715119	WITHOUT_CLASSIFICATION	4.8576428488138224E-5	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9997024446199453	WITHOUT_CLASSIFICATION	2.975553800547055E-4	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999300216601348	WITHOUT_CLASSIFICATION	6.997833986519343E-5	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998996144592457	WITHOUT_CLASSIFICATION	1.0038554075429644E-4	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999994773068629	WITHOUT_CLASSIFICATION	5.226931371719749E-7	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999068107195	WITHOUT_CLASSIFICATION	9.318928044422127E-8	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9993844315464602	WITHOUT_CLASSIFICATION	6.155684535399034E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999780297830113	WITHOUT_CLASSIFICATION	2.197021698866337E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999514235715119	WITHOUT_CLASSIFICATION	4.8576428488138224E-5	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999058353608088	WITHOUT_CLASSIFICATION	9.416463919116486E-5	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.7791696805703218	WITHOUT_CLASSIFICATION	0.2208303194296782	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999995705259104	WITHOUT_CLASSIFICATION	4.294740896851789E-7	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999051768405685	WITHOUT_CLASSIFICATION	9.482315943155509E-5	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997182394798	WITHOUT_CLASSIFICATION	2.8176052031042776E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9895225448640741	WITHOUT_CLASSIFICATION	0.010477455135925962	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999304340018186	WITHOUT_CLASSIFICATION	6.956599818136843E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.99997035038795	WITHOUT_CLASSIFICATION	2.9649612050014894E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999998045610315	WITHOUT_CLASSIFICATION	1.9543896849900597E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9060657876958215	IMPLEMENTATION	0.09393421230417852	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9997961947851944	WITHOUT_CLASSIFICATION	2.0380521480551684E-4	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9060657876958215	IMPLEMENTATION	0.09393421230417852	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999309246501626	WITHOUT_CLASSIFICATION	6.907534983734355E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999408806880724	WITHOUT_CLASSIFICATION	5.911931192763688E-5	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999309246501626	WITHOUT_CLASSIFICATION	6.907534983734355E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974999606382	WITHOUT_CLASSIFICATION	2.500039361805747E-5	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999896034682643	WITHOUT_CLASSIFICATION	1.039653173567964E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.99997035038795	WITHOUT_CLASSIFICATION	2.9649612050014894E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.99997035038795	WITHOUT_CLASSIFICATION	2.9649612050014894E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999929401325544	WITHOUT_CLASSIFICATION	7.059867445603333E-5	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999296327621205	WITHOUT_CLASSIFICATION	7.036723787943337E-5	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999929401325544	WITHOUT_CLASSIFICATION	7.059867445603333E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999352269770698	WITHOUT_CLASSIFICATION	6.477302293019809E-5	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999485480098397	WITHOUT_CLASSIFICATION	5.1451990160424104E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999686046037316	WITHOUT_CLASSIFICATION	3.1395396268348566E-5	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9757499215599756	WITHOUT_CLASSIFICATION	0.024250078440024362	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999381239484146	WITHOUT_CLASSIFICATION	6.187605158539599E-5	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999922760583926	WITHOUT_CLASSIFICATION	7.723941607357366E-6	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999572610744735	WITHOUT_CLASSIFICATION	4.273892552658382E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999567770058764	WITHOUT_CLASSIFICATION	4.3222994123609944E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999673265072194	WITHOUT_CLASSIFICATION	3.2673492780626096E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999893535057095	WITHOUT_CLASSIFICATION	1.0646494290496394E-5	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999255457658608	WITHOUT_CLASSIFICATION	7.445423413918601E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999646579929335	WITHOUT_CLASSIFICATION	3.534200706640505E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999890880490118	WITHOUT_CLASSIFICATION	1.0911950988151773E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999786363689058	WITHOUT_CLASSIFICATION	2.1363631094188496E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999729776348942	WITHOUT_CLASSIFICATION	2.7022365105721643E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999473456843737	WITHOUT_CLASSIFICATION	5.2654315626358004E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998773811450986	WITHOUT_CLASSIFICATION	1.2261885490137228E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999751278389672	WITHOUT_CLASSIFICATION	2.487216103271546E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999390714810312	WITHOUT_CLASSIFICATION	6.092851896880591E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998862679116186	WITHOUT_CLASSIFICATION	1.1373208838143424E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998773811450986	WITHOUT_CLASSIFICATION	1.2261885490137228E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999883258712262	WITHOUT_CLASSIFICATION	1.1674128773801751E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999406211270159	WITHOUT_CLASSIFICATION	5.937887298407531E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9981044019750099	WITHOUT_CLASSIFICATION	0.00189559802499001	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.6757843631508094	WITHOUT_CLASSIFICATION	0.32421563684919075	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998729435522917	WITHOUT_CLASSIFICATION	1.2705644770828593E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999446006789389	WITHOUT_CLASSIFICATION	5.539932106107329E-5	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9245150021068627	WITHOUT_CLASSIFICATION	0.07548499789313734	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998817982571044	WITHOUT_CLASSIFICATION	1.1820174289548848E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999381239484146	WITHOUT_CLASSIFICATION	6.187605158539599E-5	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999658981171635	WITHOUT_CLASSIFICATION	3.410188283647373E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.8495787932581533	WITHOUT_CLASSIFICATION	0.15042120674184659	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7218378317693158	IMPLEMENTATION	0.2781621682306841	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.999974519405168	WITHOUT_CLASSIFICATION	2.5480594832012317E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999672795032737	WITHOUT_CLASSIFICATION	3.272049672630923E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999546328232186	WITHOUT_CLASSIFICATION	4.5367176781359145E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999352269770698	WITHOUT_CLASSIFICATION	6.477302293019809E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999352269770698	WITHOUT_CLASSIFICATION	6.477302293019809E-5	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9996741473007161	WITHOUT_CLASSIFICATION	3.258526992839242E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999871178098325	WITHOUT_CLASSIFICATION	1.2882190167439687E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9998939749384333	WITHOUT_CLASSIFICATION	1.0602506156664287E-4	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999229247924827	WITHOUT_CLASSIFICATION	7.70752075173198E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995246182164965	WITHOUT_CLASSIFICATION	4.753817835035093E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998328776762606	WITHOUT_CLASSIFICATION	1.6712232373944532E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.99999143370428	WITHOUT_CLASSIFICATION	8.566295719868754E-6	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999999813535888	WITHOUT_CLASSIFICATION	1.8646411200696354E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999302891561502	WITHOUT_CLASSIFICATION	6.971084384971705E-5	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999748537392666	WITHOUT_CLASSIFICATION	2.5146260733352287E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999944060931839	WITHOUT_CLASSIFICATION	5.593906816073883E-6	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999890880490118	WITHOUT_CLASSIFICATION	1.0911950988151773E-5	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999780297830113	WITHOUT_CLASSIFICATION	2.197021698866337E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999944060931839	WITHOUT_CLASSIFICATION	5.593906816073883E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999603369331665	WITHOUT_CLASSIFICATION	3.966306683335627E-5	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998870462634035	WITHOUT_CLASSIFICATION	1.129537365963998E-4	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999984614034477	WITHOUT_CLASSIFICATION	1.538596552296887E-5	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9155138461251581	IMPLEMENTATION	0.08448615387484198	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997524082628412	WITHOUT_CLASSIFICATION	2.4759173715880646E-4	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999971562243579	WITHOUT_CLASSIFICATION	2.8437756419994343E-6	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999976857292961	WITHOUT_CLASSIFICATION	2.3142707038108606E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999993707841	WITHOUT_CLASSIFICATION	6.292157796820913E-10	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999589281171124	WITHOUT_CLASSIFICATION	4.1071882887628485E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999197810668239	WITHOUT_CLASSIFICATION	8.02189331760726E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999594126040398	WITHOUT_CLASSIFICATION	4.058739596027678E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999594126040398	WITHOUT_CLASSIFICATION	4.058739596027678E-5	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999150522533723	WITHOUT_CLASSIFICATION	8.494774662761916E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9914949433965415	WITHOUT_CLASSIFICATION	0.008505056603458402	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999944060931839	WITHOUT_CLASSIFICATION	5.593906816073883E-6	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997524082628412	WITHOUT_CLASSIFICATION	2.4759173715880646E-4	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999976857292961	WITHOUT_CLASSIFICATION	2.3142707038108606E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999849115851145	WITHOUT_CLASSIFICATION	1.5088414885427593E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9996762448883724	WITHOUT_CLASSIFICATION	3.2375511162769706E-4	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999045167529512	WITHOUT_CLASSIFICATION	9.548324704871E-5	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999739447626305	WITHOUT_CLASSIFICATION	2.605523736947053E-5	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999479260737064	WITHOUT_CLASSIFICATION	5.207392629364259E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999557453883307	WITHOUT_CLASSIFICATION	4.425461166931974E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999603369331665	WITHOUT_CLASSIFICATION	3.966306683335627E-5	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999395855599086	WITHOUT_CLASSIFICATION	6.041444009143878E-5	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999617374257227	WITHOUT_CLASSIFICATION	3.826257427725725E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9991971344505862	WITHOUT_CLASSIFICATION	8.028655494137754E-4	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.7562625613765456	WITHOUT_CLASSIFICATION	0.2437374386234545	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.7516696454177626	WITHOUT_CLASSIFICATION	0.2483303545822374	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999804061344727	WITHOUT_CLASSIFICATION	1.959386552728883E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974999606382	WITHOUT_CLASSIFICATION	2.500039361805747E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933192081786	WITHOUT_CLASSIFICATION	6.680791821310577E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999992939761065	WITHOUT_CLASSIFICATION	7.060238933646829E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999510963830338	WITHOUT_CLASSIFICATION	4.890361696628215E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999958359992149	WITHOUT_CLASSIFICATION	4.164000785101227E-6	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999982023949684	WITHOUT_CLASSIFICATION	1.7976050316483138E-6	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999682859048913	WITHOUT_CLASSIFICATION	3.171409510874246E-5	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999556661424901	WITHOUT_CLASSIFICATION	4.433385750984665E-5	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999929351398247	WITHOUT_CLASSIFICATION	7.064860175340634E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999557453883307	WITHOUT_CLASSIFICATION	4.425461166931974E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999392269232471	WITHOUT_CLASSIFICATION	6.07730767529416E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999544915306056	WITHOUT_CLASSIFICATION	4.5508469394515246E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999857300452153	WITHOUT_CLASSIFICATION	1.4269954784803739E-5	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999906940929189	WITHOUT_CLASSIFICATION	9.3059070811631E-6	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999883391807486	WITHOUT_CLASSIFICATION	1.1660819251461289E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9999113941294845	WITHOUT_CLASSIFICATION	8.860587051559178E-5	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999464956968313	WITHOUT_CLASSIFICATION	5.350430316864907E-5	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9925712347778177	WITHOUT_CLASSIFICATION	0.0074287652221821715	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.999894876058802	WITHOUT_CLASSIFICATION	1.0512394119803114E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997470487599	WITHOUT_CLASSIFICATION	2.5295124010867496E-7	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9943174655532696	WITHOUT_CLASSIFICATION	0.005682534446730405	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999673749878725	WITHOUT_CLASSIFICATION	3.262501212761541E-5	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999889342579031	WITHOUT_CLASSIFICATION	1.1065742096942741E-5	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999941111032479	WITHOUT_CLASSIFICATION	5.888896752072808E-6	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9998386500572658	WITHOUT_CLASSIFICATION	1.6134994273434174E-4	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999753749541967	WITHOUT_CLASSIFICATION	2.4625045803167468E-5	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9990100938364495	WITHOUT_CLASSIFICATION	9.899061635505546E-4	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999685121811441	WITHOUT_CLASSIFICATION	3.1487818855863736E-5	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999985239750306	WITHOUT_CLASSIFICATION	1.476024969405526E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999810430806446	WITHOUT_CLASSIFICATION	1.8956919355371064E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999998160211917	WITHOUT_CLASSIFICATION	1.8397880829567296E-6	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999910009915551	WITHOUT_CLASSIFICATION	8.999008444894577E-5	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8278559547717823	IMPLEMENTATION	0.17214404522821772	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999844645381264	WITHOUT_CLASSIFICATION	1.5535461873593184E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999531719074801	WITHOUT_CLASSIFICATION	4.682809251980793E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999969465907922	WITHOUT_CLASSIFICATION	3.0534092078123807E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5086193023193522	IMPLEMENTATION	0.4913806976806479	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999880518168542	WITHOUT_CLASSIFICATION	1.1948183145796726E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997531376193594	WITHOUT_CLASSIFICATION	2.46862380640681E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999993063384156	WITHOUT_CLASSIFICATION	6.936615843972159E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999808244120849	WITHOUT_CLASSIFICATION	1.9175587915089088E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999768617284068	WITHOUT_CLASSIFICATION	2.313827159312995E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999863659351245	WITHOUT_CLASSIFICATION	1.3634064875508225E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999749217165911	WITHOUT_CLASSIFICATION	2.507828340898648E-5	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9995342437073461	WITHOUT_CLASSIFICATION	4.657562926539159E-4	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999863659351245	WITHOUT_CLASSIFICATION	1.3634064875508225E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999768617284068	WITHOUT_CLASSIFICATION	2.313827159312995E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999749217165911	WITHOUT_CLASSIFICATION	2.507828340898648E-5	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999809138013721	WITHOUT_CLASSIFICATION	1.9086198627916313E-5	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999126937660338	WITHOUT_CLASSIFICATION	8.730623396624001E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9986339069440631	WITHOUT_CLASSIFICATION	0.0013660930559369789	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999822820539073	WITHOUT_CLASSIFICATION	1.7717946092662187E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998033708747	WITHOUT_CLASSIFICATION	1.966291254167459E-7	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.835040003675359	WITHOUT_CLASSIFICATION	0.1649599963246411	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.998116384907437	WITHOUT_CLASSIFICATION	0.001883615092563017	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999903573282277	WITHOUT_CLASSIFICATION	9.642671772259566E-6	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999947120181	WITHOUT_CLASSIFICATION	5.287981892345779E-8	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999688596600675	WITHOUT_CLASSIFICATION	3.114033993248044E-5	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9998539815490461	WITHOUT_CLASSIFICATION	1.460184509538548E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999919177852894	WITHOUT_CLASSIFICATION	8.082214710585865E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999666550265151	WITHOUT_CLASSIFICATION	3.3344973484887667E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999822820539073	WITHOUT_CLASSIFICATION	1.7717946092662187E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999957957586115	WITHOUT_CLASSIFICATION	4.204241388444586E-6	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999969998349287	WITHOUT_CLASSIFICATION	3.0001650713199516E-6	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998870008710891	WITHOUT_CLASSIFICATION	1.1299912891087727E-4	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999995324465957	WITHOUT_CLASSIFICATION	4.6755340439279775E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998825603713457	WITHOUT_CLASSIFICATION	1.1743962865434265E-4	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9991303623483923	WITHOUT_CLASSIFICATION	8.696376516077085E-4	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.99482793220817	WITHOUT_CLASSIFICATION	0.005172067791829914	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999902181215251	WITHOUT_CLASSIFICATION	9.781878474874126E-6	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9992129834483751	WITHOUT_CLASSIFICATION	7.87016551624946E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9998301033257116	WITHOUT_CLASSIFICATION	1.6989667428840953E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9991175935155717	WITHOUT_CLASSIFICATION	8.824064844282262E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9991175935155717	WITHOUT_CLASSIFICATION	8.824064844282262E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999611742957738	WITHOUT_CLASSIFICATION	3.882570422623756E-5	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999611742957738	WITHOUT_CLASSIFICATION	3.882570422623756E-5	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9988291809542316	WITHOUT_CLASSIFICATION	0.0011708190457684956	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998870008710891	WITHOUT_CLASSIFICATION	1.1299912891087727E-4	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9992083552985099	WITHOUT_CLASSIFICATION	7.916447014899217E-4	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999420405294402	WITHOUT_CLASSIFICATION	5.795947055969879E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999672048229534	WITHOUT_CLASSIFICATION	3.2795177046661674E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999672048229534	WITHOUT_CLASSIFICATION	3.2795177046661674E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999964478059809	WITHOUT_CLASSIFICATION	3.5521940191008944E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999331863620877	WITHOUT_CLASSIFICATION	6.681363791228944E-5	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999538120956482	WITHOUT_CLASSIFICATION	4.618790435184727E-5	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.999938499500124	WITHOUT_CLASSIFICATION	6.150049987591817E-5	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999983105337473	WITHOUT_CLASSIFICATION	1.6894662526284055E-6	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999985286268032	WITHOUT_CLASSIFICATION	1.4713731967705545E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999796995523035	WITHOUT_CLASSIFICATION	2.0300447696554906E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998384926134636	WITHOUT_CLASSIFICATION	1.6150738653640507E-4	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999538261445282	WITHOUT_CLASSIFICATION	4.6173855471718346E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999994025396358	WITHOUT_CLASSIFICATION	5.974603641422939E-7	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999473002991143	WITHOUT_CLASSIFICATION	5.269970088569075E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9999231686588577	WITHOUT_CLASSIFICATION	7.683134114233673E-5	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999977321440569	WITHOUT_CLASSIFICATION	2.2678559431042176E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999774261641918	WITHOUT_CLASSIFICATION	2.257383580812393E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9970561136125397	WITHOUT_CLASSIFICATION	0.002943886387460355	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998594398940889	WITHOUT_CLASSIFICATION	1.4056010591122735E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945072487112	WITHOUT_CLASSIFICATION	5.492751288800078E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9996002078226831	WITHOUT_CLASSIFICATION	3.997921773168175E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9683985240461662	WITHOUT_CLASSIFICATION	0.03160147595383386	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999980835248062	WITHOUT_CLASSIFICATION	1.9164751937103183E-6	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.998032396759829	WITHOUT_CLASSIFICATION	0.001967603240171022	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999943392329701	WITHOUT_CLASSIFICATION	5.660767029789125E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998139855681737	WITHOUT_CLASSIFICATION	1.860144318262556E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999998976387589	WITHOUT_CLASSIFICATION	1.023612411048089E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999869196138971	WITHOUT_CLASSIFICATION	1.3080386102914994E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9995652277889578	WITHOUT_CLASSIFICATION	4.3477221104216496E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997470487599	WITHOUT_CLASSIFICATION	2.5295124010867496E-7	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999797499325098	WITHOUT_CLASSIFICATION	2.025006749012569E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999886290287433	WITHOUT_CLASSIFICATION	1.13709712566005E-5	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999403098478962	WITHOUT_CLASSIFICATION	5.969015210376994E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999375134447049	WITHOUT_CLASSIFICATION	6.248655529500677E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999942805404415	WITHOUT_CLASSIFICATION	5.7194595584032225E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999942805404415	WITHOUT_CLASSIFICATION	5.7194595584032225E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999926932516412	WITHOUT_CLASSIFICATION	7.3067483588006724E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999402377000914	WITHOUT_CLASSIFICATION	5.976229990856679E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999384303852971	WITHOUT_CLASSIFICATION	6.15696147029752E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999384303852971	WITHOUT_CLASSIFICATION	6.15696147029752E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998059007667763	WITHOUT_CLASSIFICATION	1.9409923322377228E-4	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999431825019784	WITHOUT_CLASSIFICATION	5.681749802144478E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9915899728480493	WITHOUT_CLASSIFICATION	0.008410027151950699	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999477812099175	WITHOUT_CLASSIFICATION	5.2218790082489105E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999462057237933	WITHOUT_CLASSIFICATION	5.379427620664386E-5	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999999048903137	WITHOUT_CLASSIFICATION	9.510968630755989E-7	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999115643350001	WITHOUT_CLASSIFICATION	8.843566499993824E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999736530150679	WITHOUT_CLASSIFICATION	2.6346984932102756E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999736530150679	WITHOUT_CLASSIFICATION	2.6346984932102756E-5	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9997483299263166	WITHOUT_CLASSIFICATION	2.516700736834556E-4	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999944741740322	WITHOUT_CLASSIFICATION	5.525825967800893E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999944741740322	WITHOUT_CLASSIFICATION	5.525825967800893E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999822018539821	WITHOUT_CLASSIFICATION	1.7798146017857376E-5	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999734871104121	WITHOUT_CLASSIFICATION	2.651288958793033E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999937156275271	WITHOUT_CLASSIFICATION	6.284372472806818E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999956990856274	WITHOUT_CLASSIFICATION	4.300914372591286E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999679323663325	WITHOUT_CLASSIFICATION	3.206763366758577E-5	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999981710658441	WITHOUT_CLASSIFICATION	1.828934155831155E-6	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999969041789968	WITHOUT_CLASSIFICATION	3.0958210032195803E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999873616129735	WITHOUT_CLASSIFICATION	1.2638387026502533E-5	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9991740367099958	WITHOUT_CLASSIFICATION	8.259632900042395E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997681263111917	WITHOUT_CLASSIFICATION	2.3187368880832996E-4	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9319076978266467	WITHOUT_CLASSIFICATION	0.0680923021733533	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558148100647	WITHOUT_CLASSIFICATION	4.4185189935339623E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558148100647	WITHOUT_CLASSIFICATION	4.4185189935339623E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558148100647	WITHOUT_CLASSIFICATION	4.4185189935339623E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558148100647	WITHOUT_CLASSIFICATION	4.4185189935339623E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999817366277679	WITHOUT_CLASSIFICATION	1.826337223205378E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998393965030472	WITHOUT_CLASSIFICATION	1.6060349695278127E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999854942202233	WITHOUT_CLASSIFICATION	1.450577977664239E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999047761778072	WITHOUT_CLASSIFICATION	9.522382219283224E-5	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999476743927384	WITHOUT_CLASSIFICATION	5.23256072616433E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998574838408174	WITHOUT_CLASSIFICATION	1.4251615918256326E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999425249207453	WITHOUT_CLASSIFICATION	5.7475079254756954E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9996604267608824	WITHOUT_CLASSIFICATION	3.395732391176231E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9979517679129483	WITHOUT_CLASSIFICATION	0.0020482320870516563	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9998759913428156	WITHOUT_CLASSIFICATION	1.2400865718442894E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999884855339581	WITHOUT_CLASSIFICATION	1.1514466041787012E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999805607138	WITHOUT_CLASSIFICATION	1.9439286241766336E-8	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.7192290148005933	IMPLEMENTATION	0.2807709851994065	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999602842547055	WITHOUT_CLASSIFICATION	3.971574529451561E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999884855339581	WITHOUT_CLASSIFICATION	1.1514466041787012E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.8030062214510171	WITHOUT_CLASSIFICATION	0.19699377854898287	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998887551199247	WITHOUT_CLASSIFICATION	1.1124488007532916E-4	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999987811301151	WITHOUT_CLASSIFICATION	1.2188698848711875E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999869103338842	WITHOUT_CLASSIFICATION	1.3089666115694319E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999779457356988	WITHOUT_CLASSIFICATION	2.2054264301259422E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9992936277371953	WITHOUT_CLASSIFICATION	7.063722628047646E-4	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999930347889003	WITHOUT_CLASSIFICATION	6.965211099657674E-6	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999953128771781	WITHOUT_CLASSIFICATION	4.687122821855688E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947129067351	WITHOUT_CLASSIFICATION	5.287093264812546E-6	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999975593459054	WITHOUT_CLASSIFICATION	2.4406540945496243E-6	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947129067351	WITHOUT_CLASSIFICATION	5.287093264812546E-6	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999965969791081	WITHOUT_CLASSIFICATION	3.4030208918097164E-6	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998979500955437	WITHOUT_CLASSIFICATION	1.020499044563778E-4	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.7353263503696534	WITHOUT_CLASSIFICATION	0.26467364963034645	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999742312653013	WITHOUT_CLASSIFICATION	2.5768734698772094E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999004688506654	WITHOUT_CLASSIFICATION	9.953114933456206E-5	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999589027789	WITHOUT_CLASSIFICATION	4.10972211033608E-7	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999627551928035	WITHOUT_CLASSIFICATION	3.724480719654144E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999911379400331	WITHOUT_CLASSIFICATION	8.86205996690875E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999627551928035	WITHOUT_CLASSIFICATION	3.724480719654144E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999795511095766	WITHOUT_CLASSIFICATION	2.044889042345581E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999872476173317	WITHOUT_CLASSIFICATION	1.2752382668260163E-5	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.999982324529302	WITHOUT_CLASSIFICATION	1.767547069802175E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999687624264139	WITHOUT_CLASSIFICATION	3.123757358616722E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999655094160194	WITHOUT_CLASSIFICATION	3.449058398056052E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998773811450986	WITHOUT_CLASSIFICATION	1.2261885490137228E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999991352552654	WITHOUT_CLASSIFICATION	8.647447345100861E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999589027789	WITHOUT_CLASSIFICATION	4.10972211033608E-7	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999911379400331	WITHOUT_CLASSIFICATION	8.86205996690875E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999795511095766	WITHOUT_CLASSIFICATION	2.044889042345581E-5	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999783374394356	WITHOUT_CLASSIFICATION	2.1662560564395157E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999248214654528	WITHOUT_CLASSIFICATION	7.517853454719381E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9998809080974468	WITHOUT_CLASSIFICATION	1.1909190255321511E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999998724107381	WITHOUT_CLASSIFICATION	1.275892619529633E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9997411365093067	WITHOUT_CLASSIFICATION	2.588634906932372E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9995612725163556	WITHOUT_CLASSIFICATION	4.387274836443806E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999540094447943	WITHOUT_CLASSIFICATION	4.599055520573698E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945072487112	WITHOUT_CLASSIFICATION	5.492751288800078E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999872476173317	WITHOUT_CLASSIFICATION	1.2752382668260163E-5	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9586378719624574	WITHOUT_CLASSIFICATION	0.041362128037542516	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999929401325544	WITHOUT_CLASSIFICATION	7.059867445603333E-5	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9974721015419448	WITHOUT_CLASSIFICATION	0.0025278984580551856	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999813501755761	WITHOUT_CLASSIFICATION	1.8649824423895766E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945072487112	WITHOUT_CLASSIFICATION	5.492751288800078E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999841434140249	WITHOUT_CLASSIFICATION	1.5856585975065666E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945072487112	WITHOUT_CLASSIFICATION	5.492751288800078E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999894563078703	WITHOUT_CLASSIFICATION	1.0543692129755166E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999323509506621	WITHOUT_CLASSIFICATION	6.764904933780451E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997370407323023	WITHOUT_CLASSIFICATION	2.629592676976758E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9996798611163668	WITHOUT_CLASSIFICATION	3.201388836332656E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999696787183143	WITHOUT_CLASSIFICATION	3.0321281685597773E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999664395469604	WITHOUT_CLASSIFICATION	3.356045303955606E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998761259850212	WITHOUT_CLASSIFICATION	1.2387401497879829E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999971149639659	WITHOUT_CLASSIFICATION	2.885036034061384E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999512484696604	WITHOUT_CLASSIFICATION	4.875153033953628E-5	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999942512394041	WITHOUT_CLASSIFICATION	5.748760595923843E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998106213578227	WITHOUT_CLASSIFICATION	1.8937864217732935E-4	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999917773738879	WITHOUT_CLASSIFICATION	8.222626112134337E-6	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9996746497968981	WITHOUT_CLASSIFICATION	3.2535020310194533E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999469799429561	WITHOUT_CLASSIFICATION	5.302005704392142E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999909130341462	WITHOUT_CLASSIFICATION	9.08696585380131E-6	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999801694864193	WITHOUT_CLASSIFICATION	1.983051358076557E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999966824032296	WITHOUT_CLASSIFICATION	3.31759677036943E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999938156408668	WITHOUT_CLASSIFICATION	6.184359133221282E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999997532094023	WITHOUT_CLASSIFICATION	2.4679059776179867E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999982578719796	WITHOUT_CLASSIFICATION	1.7421280203918758E-5	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999690952087408	WITHOUT_CLASSIFICATION	3.0904791259230196E-5	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999690952087408	WITHOUT_CLASSIFICATION	3.0904791259230196E-5	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.999988492601936	WITHOUT_CLASSIFICATION	1.150739806410733E-5	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999881738014608	WITHOUT_CLASSIFICATION	1.1826198539255579E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.999955725578847	WITHOUT_CLASSIFICATION	4.427442115294872E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998213399337	WITHOUT_CLASSIFICATION	1.7866006622801342E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996003441938386	WITHOUT_CLASSIFICATION	3.9965580616144837E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999201463125144	WITHOUT_CLASSIFICATION	7.985368748557161E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999652857390329	WITHOUT_CLASSIFICATION	3.4714260967203685E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999989940219013	WITHOUT_CLASSIFICATION	1.005978098763217E-6	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.8845744101884547	WITHOUT_CLASSIFICATION	0.11542558981154519	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999820781910304	WITHOUT_CLASSIFICATION	1.7921808969632673E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999603990217891	WITHOUT_CLASSIFICATION	3.960097821098975E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9998263768629966	WITHOUT_CLASSIFICATION	1.7362313700341946E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999255754232552	WITHOUT_CLASSIFICATION	7.442457674472979E-5	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999946192211504	WITHOUT_CLASSIFICATION	5.3807788495991585E-5	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999833516610458	WITHOUT_CLASSIFICATION	1.6648338954204016E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999843393517603	WITHOUT_CLASSIFICATION	1.5660648239588407E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999817184102785	WITHOUT_CLASSIFICATION	1.828158972141512E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999817184102785	WITHOUT_CLASSIFICATION	1.828158972141512E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999739881761455	WITHOUT_CLASSIFICATION	2.6011823854615312E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999971149639659	WITHOUT_CLASSIFICATION	2.885036034061384E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9896216824634355	WITHOUT_CLASSIFICATION	0.010378317536564444	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999854271277927	WITHOUT_CLASSIFICATION	1.4572872207387607E-5	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9996783721404533	WITHOUT_CLASSIFICATION	3.2162785954673576E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999971228539813	WITHOUT_CLASSIFICATION	2.8771460186187527E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9998275370309462	WITHOUT_CLASSIFICATION	1.7246296905395404E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.999959172556149	WITHOUT_CLASSIFICATION	4.0827443850993584E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9996039838469417	WITHOUT_CLASSIFICATION	3.9601615305826356E-4	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998333849285768	WITHOUT_CLASSIFICATION	1.666150714232878E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999483888228466	WITHOUT_CLASSIFICATION	5.161117715334757E-5	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998877696633	WITHOUT_CLASSIFICATION	1.122303367561353E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999224355205	WITHOUT_CLASSIFICATION	7.756447950939611E-8	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999997035869809	WITHOUT_CLASSIFICATION	2.9641301923577986E-7	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9967811589693036	WITHOUT_CLASSIFICATION	0.003218841030696269	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999469045391626	WITHOUT_CLASSIFICATION	5.3095460837422434E-5	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999961704347923	WITHOUT_CLASSIFICATION	3.829565207770814E-6	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999929365020519	WITHOUT_CLASSIFICATION	7.063497948159216E-6	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9996436698652071	WITHOUT_CLASSIFICATION	3.563301347928632E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999275819123759	WITHOUT_CLASSIFICATION	7.24180876241917E-5	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999977358419668	WITHOUT_CLASSIFICATION	2.2641580332121E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999939962439839	WITHOUT_CLASSIFICATION	6.003756016096228E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990839220405892	WITHOUT_CLASSIFICATION	9.1607795941078E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.999938415877043	WITHOUT_CLASSIFICATION	6.158412295699548E-5	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999993240081412	WITHOUT_CLASSIFICATION	6.759918588812586E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999993849164658	WITHOUT_CLASSIFICATION	6.150835342954171E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999799214444642	WITHOUT_CLASSIFICATION	2.0078555535773E-5	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.8799608112998811	WITHOUT_CLASSIFICATION	0.12003918870011893	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997768357302864	WITHOUT_CLASSIFICATION	2.231642697136647E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999798134066217	WITHOUT_CLASSIFICATION	2.0186593378300247E-4	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999937912459838	WITHOUT_CLASSIFICATION	6.208754016206653E-5	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999390455920006	WITHOUT_CLASSIFICATION	6.09544079992952E-5	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999677230407945	WITHOUT_CLASSIFICATION	3.227695920540113E-5	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999719706379938	WITHOUT_CLASSIFICATION	2.8029362006136184E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999828270602679	WITHOUT_CLASSIFICATION	1.7172939732118243E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999541588762084	WITHOUT_CLASSIFICATION	4.584112379153347E-5	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999664788613987	WITHOUT_CLASSIFICATION	3.3521138601344106E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999497705195651	WITHOUT_CLASSIFICATION	5.022948043475354E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998580984008243	WITHOUT_CLASSIFICATION	1.4190159917564014E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998580984008243	WITHOUT_CLASSIFICATION	1.4190159917564014E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999011217124701	WITHOUT_CLASSIFICATION	9.887828752986588E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999778335299244	WITHOUT_CLASSIFICATION	2.2166470075571202E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999975372523245	WITHOUT_CLASSIFICATION	2.4627476754224255E-6	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999975372523245	WITHOUT_CLASSIFICATION	2.4627476754224255E-6	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.999977956220248	WITHOUT_CLASSIFICATION	2.204377975210802E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999718348037976	WITHOUT_CLASSIFICATION	2.8165196202345216E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999654594651377	WITHOUT_CLASSIFICATION	3.454053486222956E-5	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999530931222742	WITHOUT_CLASSIFICATION	4.6906877725821564E-5	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999581799028728	WITHOUT_CLASSIFICATION	4.182009712726115E-5	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999462276619427	WITHOUT_CLASSIFICATION	5.3772338057315925E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999947028069983	WITHOUT_CLASSIFICATION	5.297193001733193E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999947028069983	WITHOUT_CLASSIFICATION	5.297193001733193E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999462276619427	WITHOUT_CLASSIFICATION	5.3772338057315925E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999506088249113	WITHOUT_CLASSIFICATION	4.939117508880996E-5	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999352269770698	WITHOUT_CLASSIFICATION	6.477302293019809E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999322685123816	WITHOUT_CLASSIFICATION	6.773148761844576E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999322685123816	WITHOUT_CLASSIFICATION	6.773148761844576E-5	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9998632706199189	WITHOUT_CLASSIFICATION	1.3672938008111655E-4	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999725801137828	WITHOUT_CLASSIFICATION	2.741988621726643E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9993349105287676	WITHOUT_CLASSIFICATION	6.650894712324315E-4	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999770062820516	WITHOUT_CLASSIFICATION	2.2993717948375835E-5	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999996346339857	WITHOUT_CLASSIFICATION	3.6536601430862025E-7	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.999938581537244	WITHOUT_CLASSIFICATION	6.141846275597444E-5	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999980581271328	WITHOUT_CLASSIFICATION	1.94187286719203E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9998398415987778	WITHOUT_CLASSIFICATION	1.6015840122218867E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999855862654977	WITHOUT_CLASSIFICATION	1.441373450223324E-5	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999989633445288	WITHOUT_CLASSIFICATION	1.0366554712287062E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999840371321546	WITHOUT_CLASSIFICATION	1.596286784549646E-5	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9816577244708968	WITHOUT_CLASSIFICATION	0.01834227552910325	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9112712364136387	WITHOUT_CLASSIFICATION	0.08872876358636118	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999997566977791	WITHOUT_CLASSIFICATION	2.433022209310873E-7	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999558986340148	WITHOUT_CLASSIFICATION	4.4101365985212226E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999893623981015	WITHOUT_CLASSIFICATION	1.0637601898426784E-5	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999352450857085	WITHOUT_CLASSIFICATION	6.475491429154796E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9850808546962841	WITHOUT_CLASSIFICATION	0.014919145303715929	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9976902404420686	WITHOUT_CLASSIFICATION	0.002309759557931462	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9995540612461254	WITHOUT_CLASSIFICATION	4.4593875387455875E-4	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9991179464601506	WITHOUT_CLASSIFICATION	8.820535398493002E-4	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997549255360403	WITHOUT_CLASSIFICATION	2.4507446395968547E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9989685623845904	WITHOUT_CLASSIFICATION	0.0010314376154095942	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999951667315307	WITHOUT_CLASSIFICATION	4.833268469387551E-6	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999917661763119	WITHOUT_CLASSIFICATION	8.23382368803533E-6	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999856898116728	WITHOUT_CLASSIFICATION	1.4310188327292031E-5	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9997186952189827	WITHOUT_CLASSIFICATION	2.813047810173745E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999994410274048	WITHOUT_CLASSIFICATION	5.589725952475051E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999870550113459	WITHOUT_CLASSIFICATION	1.2944988654117503E-5	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999323104711799	WITHOUT_CLASSIFICATION	6.768952882000596E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999779665747035	WITHOUT_CLASSIFICATION	2.203342529655251E-5	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999972886272414	WITHOUT_CLASSIFICATION	2.7113727586057483E-5	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999332924527983	WITHOUT_CLASSIFICATION	6.670754720181073E-5	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999100205461255	WITHOUT_CLASSIFICATION	8.997945387449865E-5	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999543353065016	WITHOUT_CLASSIFICATION	4.566469349837774E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999685950945564	WITHOUT_CLASSIFICATION	3.140490544373277E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999971885830992	WITHOUT_CLASSIFICATION	2.8114169007763122E-6	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999877010155119	WITHOUT_CLASSIFICATION	1.2298984488048576E-5	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999748033305651	WITHOUT_CLASSIFICATION	2.519666943490974E-5	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999505209166056	WITHOUT_CLASSIFICATION	4.9479083394367257E-5	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999732601810045	WITHOUT_CLASSIFICATION	2.6739818995481136E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999756087329692	WITHOUT_CLASSIFICATION	2.4391267030816923E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999362368632221	WITHOUT_CLASSIFICATION	6.376313677793583E-5	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999756719561556	WITHOUT_CLASSIFICATION	2.43280438445256E-5	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999441710191372	WITHOUT_CLASSIFICATION	5.582898086269939E-5	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9946460704216558	WITHOUT_CLASSIFICATION	0.005353929578344295	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999819158938609	WITHOUT_CLASSIFICATION	1.8084106139108175E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999340447156743	WITHOUT_CLASSIFICATION	6.59552843257084E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998126183851979	WITHOUT_CLASSIFICATION	1.8738161480200604E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.7530158617738201	IMPLEMENTATION	0.24698413822617987	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.998760103637999	WITHOUT_CLASSIFICATION	0.0012398963620009803	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999873986452147	WITHOUT_CLASSIFICATION	1.2601354785249992E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999939608205333	WITHOUT_CLASSIFICATION	6.039179466785933E-6	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999875230188412	WITHOUT_CLASSIFICATION	1.2476981158793753E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999729375678482	WITHOUT_CLASSIFICATION	2.7062432151768715E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998512823481938	WITHOUT_CLASSIFICATION	1.4871765180627823E-4	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999998874360054	WITHOUT_CLASSIFICATION	1.1256399460698186E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996643930793936	WITHOUT_CLASSIFICATION	3.356069206063919E-4	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996643930793936	WITHOUT_CLASSIFICATION	3.356069206063919E-4	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999997804407	WITHOUT_CLASSIFICATION	2.195592232787577E-10	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9997339833805619	WITHOUT_CLASSIFICATION	2.660166194381564E-4	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999995014718421	WITHOUT_CLASSIFICATION	4.985281578239253E-7	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999951107238686	WITHOUT_CLASSIFICATION	4.8892761313139475E-6	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999778050252451	WITHOUT_CLASSIFICATION	2.2194974754813552E-5	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999892127199057	WITHOUT_CLASSIFICATION	1.0787280094184762E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999756143693895	WITHOUT_CLASSIFICATION	2.4385630610501132E-5	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998828488861	WITHOUT_CLASSIFICATION	1.1715111395124819E-7	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999952165063593	WITHOUT_CLASSIFICATION	4.783493640778504E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999976708240926	WITHOUT_CLASSIFICATION	2.3291759074259365E-6	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998893229109209	WITHOUT_CLASSIFICATION	1.1067708907912774E-4	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9993165083266868	WITHOUT_CLASSIFICATION	6.834916733131921E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999382722092	WITHOUT_CLASSIFICATION	6.172779074739861E-8	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999642161122491	WITHOUT_CLASSIFICATION	3.578388775089018E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999966632170141	WITHOUT_CLASSIFICATION	3.3367829858513642E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999966632170141	WITHOUT_CLASSIFICATION	3.3367829858513642E-6	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.999997231464616	WITHOUT_CLASSIFICATION	2.768535384010401E-6	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999182318607525	WITHOUT_CLASSIFICATION	8.176813924756105E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999893979617202	WITHOUT_CLASSIFICATION	1.0602038279927586E-5	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999972800000929	WITHOUT_CLASSIFICATION	2.7199999071354317E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999968439446453	WITHOUT_CLASSIFICATION	3.156055354703647E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643419486386	WITHOUT_CLASSIFICATION	3.5658051361380857E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9998895601436559	WITHOUT_CLASSIFICATION	1.104398563440145E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999916481605339	WITHOUT_CLASSIFICATION	8.351839466147078E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999940531063997	WITHOUT_CLASSIFICATION	5.946893600261051E-6	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999607774499063	WITHOUT_CLASSIFICATION	3.9222550093730446E-5	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9995887391118939	WITHOUT_CLASSIFICATION	4.1126088810594896E-4	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9970880621647759	WITHOUT_CLASSIFICATION	0.0029119378352240374	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999439068899665	WITHOUT_CLASSIFICATION	5.609311003348502E-5	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999936602271963	WITHOUT_CLASSIFICATION	6.339772803747469E-6	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997013659896596	WITHOUT_CLASSIFICATION	2.986340103403294E-4	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999304119925975	WITHOUT_CLASSIFICATION	6.958800740246505E-5	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999690249056082	WITHOUT_CLASSIFICATION	3.0975094391808326E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999967981660579	WITHOUT_CLASSIFICATION	3.201833942108431E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999995359435974	WITHOUT_CLASSIFICATION	4.64056402713386E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999829870152972	WITHOUT_CLASSIFICATION	1.701298470275639E-5	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999992819436655	WITHOUT_CLASSIFICATION	7.180563345716831E-7	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999987307336603	WITHOUT_CLASSIFICATION	1.2692663396682989E-6	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999997913671081	WITHOUT_CLASSIFICATION	2.0863289193072352E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999991482808356	WITHOUT_CLASSIFICATION	8.517191645132164E-7	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999938934144217	WITHOUT_CLASSIFICATION	6.106585578405507E-6	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999332773350578	WITHOUT_CLASSIFICATION	6.67226649422431E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999696409362062	WITHOUT_CLASSIFICATION	3.035906379378084E-5	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9993952922589149	WITHOUT_CLASSIFICATION	6.0470774108503E-4	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999087691167137	WITHOUT_CLASSIFICATION	9.123088328633874E-5	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9998248869479593	WITHOUT_CLASSIFICATION	1.7511305204071084E-4	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998942817656108	WITHOUT_CLASSIFICATION	1.0571823438930891E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999978675399361	WITHOUT_CLASSIFICATION	2.1324600637839133E-6	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999949051225595	WITHOUT_CLASSIFICATION	5.094877440543856E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999933180154031	WITHOUT_CLASSIFICATION	6.681984596928886E-6	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999936166019314	WITHOUT_CLASSIFICATION	6.383398068595382E-6	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9940116201000668	WITHOUT_CLASSIFICATION	0.005988379899933116	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9431722477149773	WITHOUT_CLASSIFICATION	0.05682775228502274	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9996013091789078	WITHOUT_CLASSIFICATION	3.9869082109229566E-4	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999764932166373	WITHOUT_CLASSIFICATION	2.350678336269416E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999988798477601	WITHOUT_CLASSIFICATION	1.1201522398569347E-6	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9840455988208371	WITHOUT_CLASSIFICATION	0.01595440117916298	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999947313518325	WITHOUT_CLASSIFICATION	5.268648167470253E-6	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999611625124701	WITHOUT_CLASSIFICATION	3.883748752989607E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999611625124701	WITHOUT_CLASSIFICATION	3.883748752989607E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999993555179154	WITHOUT_CLASSIFICATION	6.444820846780558E-7	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999745213511425	WITHOUT_CLASSIFICATION	2.5478648857435147E-5	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9988997897580391	WITHOUT_CLASSIFICATION	0.0011002102419609614	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999988489167068	WITHOUT_CLASSIFICATION	1.1510832932084736E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.990795125073855	WITHOUT_CLASSIFICATION	0.009204874926144907	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999994150217764	WITHOUT_CLASSIFICATION	5.849782236729796E-7	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999879865796119	WITHOUT_CLASSIFICATION	1.2013420388079158E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997598001227319	WITHOUT_CLASSIFICATION	2.4019987726803696E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999892962362833	WITHOUT_CLASSIFICATION	1.0703763716705029E-5	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999823444584447	WITHOUT_CLASSIFICATION	1.7655541555287223E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999830243781421	WITHOUT_CLASSIFICATION	1.697562185786074E-5	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999372829983	WITHOUT_CLASSIFICATION	6.271700170174313E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999980790882957	WITHOUT_CLASSIFICATION	1.9209117041995095E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9803379393045633	WITHOUT_CLASSIFICATION	0.019662060695436846	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999883470811888	WITHOUT_CLASSIFICATION	1.1652918811239775E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999847781125951	WITHOUT_CLASSIFICATION	1.5221887404990777E-5	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999987147883018	WITHOUT_CLASSIFICATION	1.2852116982066221E-6	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999172449874182	WITHOUT_CLASSIFICATION	8.275501258188924E-5	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999976567258252	WITHOUT_CLASSIFICATION	2.3432741748060304E-5	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998756214868785	WITHOUT_CLASSIFICATION	1.2437851312148564E-4	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999996354642188	WITHOUT_CLASSIFICATION	3.645357813305492E-7	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9992224190780777	WITHOUT_CLASSIFICATION	7.775809219223172E-4	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9973714699603344	WITHOUT_CLASSIFICATION	0.0026285300396655643	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.999973899265607	WITHOUT_CLASSIFICATION	2.6100734393015687E-5	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999905302837272	WITHOUT_CLASSIFICATION	9.469716272722485E-6	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999907585119957	WITHOUT_CLASSIFICATION	9.24148800429472E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997915265347468	WITHOUT_CLASSIFICATION	2.0847346525320609E-4	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999021645820613	WITHOUT_CLASSIFICATION	9.783541793869202E-5	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9958743766991889	WITHOUT_CLASSIFICATION	0.00412562330081112	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999375468490133	WITHOUT_CLASSIFICATION	6.245315098680806E-5	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9996413146866314	WITHOUT_CLASSIFICATION	3.586853133686586E-4	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999998124662673	WITHOUT_CLASSIFICATION	1.8753373277612324E-7	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999988039470846	WITHOUT_CLASSIFICATION	1.1960529154331517E-6	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999635648069721	WITHOUT_CLASSIFICATION	3.6435193027962E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999735177117	WITHOUT_CLASSIFICATION	2.6482288235033413E-8	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999757387445565	WITHOUT_CLASSIFICATION	2.4261255443471633E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999989077798259	WITHOUT_CLASSIFICATION	1.0922201740573588E-6	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999437488889769	WITHOUT_CLASSIFICATION	5.625111102315493E-5	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999965112264737	WITHOUT_CLASSIFICATION	3.4887735262249006E-6	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999336598738401	WITHOUT_CLASSIFICATION	6.634012615983654E-5	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999952269614462	WITHOUT_CLASSIFICATION	4.7730385538632344E-6	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999652114660231	WITHOUT_CLASSIFICATION	3.4788533976816377E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999988912570775	WITHOUT_CLASSIFICATION	1.1087429224087054E-6	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999988081028123	WITHOUT_CLASSIFICATION	1.1918971877032037E-5	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9998386436580883	WITHOUT_CLASSIFICATION	1.6135634191168376E-4	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999660615927484	WITHOUT_CLASSIFICATION	3.393840725157243E-5	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9931910893051726	WITHOUT_CLASSIFICATION	0.00680891069482741	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999992270537778	WITHOUT_CLASSIFICATION	7.729462222552112E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999382722092	WITHOUT_CLASSIFICATION	6.172779074739861E-8	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999738504714291	WITHOUT_CLASSIFICATION	2.6149528570976596E-5	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999994008230424	WITHOUT_CLASSIFICATION	5.99176957652996E-7	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9984044940695572	WITHOUT_CLASSIFICATION	0.0015955059304428624	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999999906716245	WITHOUT_CLASSIFICATION	9.328375498896426E-8	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999659616138	WITHOUT_CLASSIFICATION	3.403838628221255E-8	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997419157226127	WITHOUT_CLASSIFICATION	2.5808427738728627E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9994309594461134	WITHOUT_CLASSIFICATION	5.69040553886697E-4	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9205004337779596	WITHOUT_CLASSIFICATION	0.07949956622204025	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999998318104958	WITHOUT_CLASSIFICATION	1.6818950419375804E-6	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9982313462170108	WITHOUT_CLASSIFICATION	0.001768653782989181	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999989417195532	WITHOUT_CLASSIFICATION	1.0582804467926953E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999644409342079	WITHOUT_CLASSIFICATION	3.555906579216604E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9977788893177811	WITHOUT_CLASSIFICATION	0.0022211106822189633	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999896867734254	WITHOUT_CLASSIFICATION	1.0313226574679856E-5	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9895296911715297	WITHOUT_CLASSIFICATION	0.010470308828470276	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754897436358	WITHOUT_CLASSIFICATION	2.4510256364291924E-5	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998773811450986	WITHOUT_CLASSIFICATION	1.2261885490137228E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999838932354995	WITHOUT_CLASSIFICATION	1.610676450041326E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9980551133649798	WITHOUT_CLASSIFICATION	0.0019448866350203437	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999822135638422	WITHOUT_CLASSIFICATION	1.7786436157798797E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754897436358	WITHOUT_CLASSIFICATION	2.4510256364291924E-5	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.502248959058654	WITHOUT_CLASSIFICATION	0.4977510409413459	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9989982925752409	WITHOUT_CLASSIFICATION	0.0010017074247590638	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999341722365467	WITHOUT_CLASSIFICATION	6.582776345323526E-5	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9959051016430933	WITHOUT_CLASSIFICATION	0.004094898356906691	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999565648347485	WITHOUT_CLASSIFICATION	4.343516525155238E-5	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998628372206801	WITHOUT_CLASSIFICATION	1.371627793198407E-4	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999972771592819	WITHOUT_CLASSIFICATION	2.7228407182078925E-6	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9843047112178056	WITHOUT_CLASSIFICATION	0.015695288782194453	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999972001720636	WITHOUT_CLASSIFICATION	2.799827936434684E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9994301243620309	WITHOUT_CLASSIFICATION	5.698756379690489E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998619417256475	WITHOUT_CLASSIFICATION	1.3805827435243003E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9846573725571273	WITHOUT_CLASSIFICATION	0.01534262744287266	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999916661871459	WITHOUT_CLASSIFICATION	8.333812854104347E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9782971436361602	WITHOUT_CLASSIFICATION	0.021702856363839847	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9998607093330839	WITHOUT_CLASSIFICATION	1.3929066691609196E-4	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999877465653735	WITHOUT_CLASSIFICATION	1.22534346265005E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9990839220405892	WITHOUT_CLASSIFICATION	9.1607795941078E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999938726106493	WITHOUT_CLASSIFICATION	6.127389350715823E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999962482483861	WITHOUT_CLASSIFICATION	3.751751613858053E-6	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9992369201941674	WITHOUT_CLASSIFICATION	7.63079805832685E-4	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.997178238225216	WITHOUT_CLASSIFICATION	0.002821761774784035	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.998945154065443	WITHOUT_CLASSIFICATION	0.0010548459345570186	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999851044536499	WITHOUT_CLASSIFICATION	1.4895546350175834E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9991656334121471	WITHOUT_CLASSIFICATION	8.343665878529248E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999998177755	WITHOUT_CLASSIFICATION	1.822243432082117E-10	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999929216154438	WITHOUT_CLASSIFICATION	7.078384556210415E-6	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999894141221656	WITHOUT_CLASSIFICATION	1.0585877834362868E-5	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9913602608724422	WITHOUT_CLASSIFICATION	0.008639739127557814	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999662051577813	WITHOUT_CLASSIFICATION	3.3794842218609194E-5	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.997947850585641	WITHOUT_CLASSIFICATION	0.0020521494143590307	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.995076585334487	WITHOUT_CLASSIFICATION	0.004923414665513054	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999591592077642	WITHOUT_CLASSIFICATION	4.084079223586127E-5	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999774783614114	WITHOUT_CLASSIFICATION	2.252163858866941E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999794501660018	WITHOUT_CLASSIFICATION	2.054983399819169E-5	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999976939110194	WITHOUT_CLASSIFICATION	2.306088980526094E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999997158000689	WITHOUT_CLASSIFICATION	2.841999311184141E-7	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999944315036	WITHOUT_CLASSIFICATION	5.568496402353832E-8	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999997264105968	WITHOUT_CLASSIFICATION	2.7358940322026246E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997011564213357	WITHOUT_CLASSIFICATION	2.9884357866430736E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999588658394007	WITHOUT_CLASSIFICATION	4.1134160599376316E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998418739874023	WITHOUT_CLASSIFICATION	1.5812601259760495E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999923836297442	WITHOUT_CLASSIFICATION	7.616370255799881E-6	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999923836297442	WITHOUT_CLASSIFICATION	7.616370255799881E-6	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999730767596103	WITHOUT_CLASSIFICATION	2.692324038966977E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999989879888986	WITHOUT_CLASSIFICATION	1.0120111013207919E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999582224377731	WITHOUT_CLASSIFICATION	4.1777562227033325E-5	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999982972872422	WITHOUT_CLASSIFICATION	1.7027127577589587E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999477812099175	WITHOUT_CLASSIFICATION	5.2218790082489105E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999477812099175	WITHOUT_CLASSIFICATION	5.2218790082489105E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.99997035038795	WITHOUT_CLASSIFICATION	2.9649612050014894E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999982486374466	WITHOUT_CLASSIFICATION	1.7513625534032023E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9997364635432495	WITHOUT_CLASSIFICATION	2.6353645675048393E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999278610336687	WITHOUT_CLASSIFICATION	7.213896633123684E-5	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9998773811450986	WITHOUT_CLASSIFICATION	1.2261885490137228E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9980722449776168	WITHOUT_CLASSIFICATION	0.0019277550223832786	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.939851444478078	WITHOUT_CLASSIFICATION	0.06014855552192192	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999964240965553	WITHOUT_CLASSIFICATION	3.5759034446994005E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998016063276886	WITHOUT_CLASSIFICATION	1.9839367231154955E-4	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999936110309837	WITHOUT_CLASSIFICATION	6.388969016304099E-5	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999992807735886	WITHOUT_CLASSIFICATION	7.192264114428266E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897710231123	WITHOUT_CLASSIFICATION	1.0228976887837642E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897710231123	WITHOUT_CLASSIFICATION	1.0228976887837642E-5	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.999877465653735	WITHOUT_CLASSIFICATION	1.22534346265005E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999556934910744	WITHOUT_CLASSIFICATION	4.430650892562472E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999589281171124	WITHOUT_CLASSIFICATION	4.1071882887628485E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999728002173864	WITHOUT_CLASSIFICATION	2.719978261353636E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999845843383435	WITHOUT_CLASSIFICATION	1.5415661656539986E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933192081786	WITHOUT_CLASSIFICATION	6.680791821310577E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999987082700421	WITHOUT_CLASSIFICATION	1.2917299579037511E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999877021546985	WITHOUT_CLASSIFICATION	1.2297845301674088E-5	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9998938407599005	WITHOUT_CLASSIFICATION	1.0615924009942463E-4	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999872621364575	WITHOUT_CLASSIFICATION	1.2737863542487146E-5	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9994301243620309	WITHOUT_CLASSIFICATION	5.698756379690489E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999696094485352	WITHOUT_CLASSIFICATION	3.039055146476899E-5	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999044093830416	WITHOUT_CLASSIFICATION	9.559061695838944E-5	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999992687948467	WITHOUT_CLASSIFICATION	7.312051533160554E-7	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999577821351656	WITHOUT_CLASSIFICATION	4.22178648343748E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999406735330943	WITHOUT_CLASSIFICATION	5.932646690558187E-5	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999373420976778	WITHOUT_CLASSIFICATION	6.265790232214665E-5	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999791480521686	WITHOUT_CLASSIFICATION	2.085194783138948E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9995680354715284	WITHOUT_CLASSIFICATION	4.319645284715942E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998010384339445	WITHOUT_CLASSIFICATION	1.9896156605545457E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.996372777273735	WITHOUT_CLASSIFICATION	0.0036272227262650406	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.996372777273735	WITHOUT_CLASSIFICATION	0.0036272227262650406	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999884855339581	WITHOUT_CLASSIFICATION	1.1514466041787012E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999939206617319	WITHOUT_CLASSIFICATION	6.079338268043117E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9997103280287898	WITHOUT_CLASSIFICATION	2.8967197121022213E-4	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999359082259078	WITHOUT_CLASSIFICATION	6.409177409213006E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999444758171647	WITHOUT_CLASSIFICATION	5.552418283532831E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997475921808845	WITHOUT_CLASSIFICATION	2.524078191155884E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999742312653013	WITHOUT_CLASSIFICATION	2.5768734698772094E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999768099	WITHOUT_CLASSIFICATION	2.3190202726687144E-11	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999783374394356	WITHOUT_CLASSIFICATION	2.1662560564395157E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999586785747522	WITHOUT_CLASSIFICATION	4.1321425247738545E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945072487112	WITHOUT_CLASSIFICATION	5.492751288800078E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.999670434664697	WITHOUT_CLASSIFICATION	3.295653353030462E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999342011906203	WITHOUT_CLASSIFICATION	6.57988093797224E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999966118801551	WITHOUT_CLASSIFICATION	3.388119844778719E-6	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999963644889233	WITHOUT_CLASSIFICATION	3.635511076778122E-6	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999904212605357	WITHOUT_CLASSIFICATION	9.578739464302401E-5	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999671829914804	WITHOUT_CLASSIFICATION	3.281700851966692E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999423597667683	WITHOUT_CLASSIFICATION	5.764023323169669E-5	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9983346410541789	WITHOUT_CLASSIFICATION	0.0016653589458211016	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999998935406226	WITHOUT_CLASSIFICATION	1.0645937748718591E-7	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999944817021084	WITHOUT_CLASSIFICATION	5.518297891662893E-6	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999998470982936	WITHOUT_CLASSIFICATION	1.5290170637189037E-7	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9993349105287676	WITHOUT_CLASSIFICATION	6.650894712324315E-4	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999983816936559	WITHOUT_CLASSIFICATION	1.6183063441005718E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999743822661026	WITHOUT_CLASSIFICATION	2.561773389746587E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999743822661026	WITHOUT_CLASSIFICATION	2.561773389746587E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9995522800759642	WITHOUT_CLASSIFICATION	4.4771992403591084E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9913453802456307	WITHOUT_CLASSIFICATION	0.00865461975436936	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999941998163366	WITHOUT_CLASSIFICATION	5.8001836634173565E-6	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.999899196473856	WITHOUT_CLASSIFICATION	1.0080352614408311E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999888704747708	WITHOUT_CLASSIFICATION	1.1129525229196832E-5	IMPLEMENTATION
