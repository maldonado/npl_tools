todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9991015488408326	WITHOUT_CLASSIFICATION	8.984511591673632E-4	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9991015488408326	WITHOUT_CLASSIFICATION	8.984511591673632E-4	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.6574946756151401	WITHOUT_CLASSIFICATION	0.3425053243848599	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6854005068482171	WITHOUT_CLASSIFICATION	0.3145994931517829	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8079138292096295	WITHOUT_CLASSIFICATION	0.1920861707903704	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.8474169933939466	IMPLEMENTATION	0.15258300660605345	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9740704479832527	WITHOUT_CLASSIFICATION	0.025929552016747303	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6253653572918999	IMPLEMENTATION	0.3746346427081	WITHOUT_CLASSIFICATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.5876010666716923	WITHOUT_CLASSIFICATION	0.41239893332830774	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.5234779902662484	WITHOUT_CLASSIFICATION	0.4765220097337516	IMPLEMENTATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9971655914208739	WITHOUT_CLASSIFICATION	0.002834408579126058	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.8474169933939466	IMPLEMENTATION	0.15258300660605345	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9000359002493366	IMPLEMENTATION	0.09996409975066348	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9000359002493366	IMPLEMENTATION	0.09996409975066348	WITHOUT_CLASSIFICATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.929291241771594	WITHOUT_CLASSIFICATION	0.07070875822840604	IMPLEMENTATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5045639685798594	IMPLEMENTATION	0.4954360314201405	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999995226316629	IMPLEMENTATION	4.773683370955477E-7	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.5408071654781346	WITHOUT_CLASSIFICATION	0.45919283452186543	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999973045077739	WITHOUT_CLASSIFICATION	2.695492226064048E-6	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9157531796431332	IMPLEMENTATION	0.08424682035686683	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.871175932166755	IMPLEMENTATION	0.12882406783324504	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9978034892460593	WITHOUT_CLASSIFICATION	0.0021965107539406274	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.7701132779915887	IMPLEMENTATION	0.22988672200841131	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9667136827376942	IMPLEMENTATION	0.03328631726230577	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9667136827376942	IMPLEMENTATION	0.03328631726230577	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.792947189521589	WITHOUT_CLASSIFICATION	0.20705281047841095	IMPLEMENTATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.6897356957079338	IMPLEMENTATION	0.3102643042920663	WITHOUT_CLASSIFICATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.620310657958129	WITHOUT_CLASSIFICATION	0.379689342041871	IMPLEMENTATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.5176096645320248	IMPLEMENTATION	0.48239033546797516	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9969497320014263	IMPLEMENTATION	0.0030502679985736766	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6650976935637641	WITHOUT_CLASSIFICATION	0.33490230643623586	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6253653572918999	IMPLEMENTATION	0.3746346427081	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9998677594111561	WITHOUT_CLASSIFICATION	1.3224058884392704E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8421257598652928	IMPLEMENTATION	0.15787424013470716	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9984015309125511	IMPLEMENTATION	0.0015984690874489517	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.8180189069268506	IMPLEMENTATION	0.18198109307314927	WITHOUT_CLASSIFICATION
TODO: not visible to the user!	IMPLEMENTATION	0.9355889419229941	IMPLEMENTATION	0.06441105807700587	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5730079243305194	IMPLEMENTATION	0.4269920756694806	WITHOUT_CLASSIFICATION
TODO: use these in methods above	IMPLEMENTATION	0.6955371799116605	WITHOUT_CLASSIFICATION	0.30446282008833947	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9390789865560824	IMPLEMENTATION	0.06092101344391768	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9390789865560824	IMPLEMENTATION	0.06092101344391768	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9510271859993567	WITHOUT_CLASSIFICATION	0.048972814000643405	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.999958180390851	WITHOUT_CLASSIFICATION	4.181960914897662E-5	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9991419775392382	WITHOUT_CLASSIFICATION	8.580224607619009E-4	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9963317515448626	IMPLEMENTATION	0.0036682484551372988	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.5559850133618567	WITHOUT_CLASSIFICATION	0.44401498663814326	IMPLEMENTATION
TODO: formulas ?	IMPLEMENTATION	0.5625001052770239	IMPLEMENTATION	0.4374998947229762	WITHOUT_CLASSIFICATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.7181753171010353	WITHOUT_CLASSIFICATION	0.28182468289896473	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9996968363813497	WITHOUT_CLASSIFICATION	3.031636186504335E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.5804722040578033	IMPLEMENTATION	0.4195277959421968	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.8871020044230581	WITHOUT_CLASSIFICATION	0.11289799557694197	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.8830477288035076	WITHOUT_CLASSIFICATION	0.11695227119649244	IMPLEMENTATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.7459352082012095	IMPLEMENTATION	0.2540647917987906	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9582836612411092	IMPLEMENTATION	0.041716338758890865	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5556206400873979	IMPLEMENTATION	0.4443793599126021	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.5062155207409195	IMPLEMENTATION	0.49378447925908053	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5556206400873979	IMPLEMENTATION	0.4443793599126021	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.796781439279103	IMPLEMENTATION	0.20321856072089683	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.7988946502109735	IMPLEMENTATION	0.20110534978902658	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.5556206400873979	IMPLEMENTATION	0.4443793599126021	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998180025969254	WITHOUT_CLASSIFICATION	1.8199740307462667E-4	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9998180025969254	WITHOUT_CLASSIFICATION	1.8199740307462667E-4	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9946722676011573	IMPLEMENTATION	0.005327732398842548	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.5216958035252581	IMPLEMENTATION	0.47830419647474187	WITHOUT_CLASSIFICATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999936473222059	WITHOUT_CLASSIFICATION	6.352677794087029E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999639560394922	WITHOUT_CLASSIFICATION	3.6043960507698084E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999639560394922	WITHOUT_CLASSIFICATION	3.6043960507698084E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9998903005368684	WITHOUT_CLASSIFICATION	1.09699463131504E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999308564495765	WITHOUT_CLASSIFICATION	6.914355042352476E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998441598840819	WITHOUT_CLASSIFICATION	1.5584011591805578E-4	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998441598840819	WITHOUT_CLASSIFICATION	1.5584011591805578E-4	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999812318825858	WITHOUT_CLASSIFICATION	1.8768117414231926E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999900061885699	WITHOUT_CLASSIFICATION	9.993811430098136E-5	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999869586652215	WITHOUT_CLASSIFICATION	1.3041334778565702E-5	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999949086135694	WITHOUT_CLASSIFICATION	5.091386430558E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999975399463102	WITHOUT_CLASSIFICATION	2.460053689745796E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999975399463102	WITHOUT_CLASSIFICATION	2.460053689745796E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999418890973772	WITHOUT_CLASSIFICATION	5.8110902622764296E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9989187870404699	WITHOUT_CLASSIFICATION	0.0010812129595300873	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999504223153772	WITHOUT_CLASSIFICATION	4.957768462289601E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.99999727819401	WITHOUT_CLASSIFICATION	2.7218059899859853E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999988339559588	WITHOUT_CLASSIFICATION	1.1660440412117427E-6	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999474403040375	WITHOUT_CLASSIFICATION	5.255969596248562E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.999862922659265	WITHOUT_CLASSIFICATION	1.3707734073486148E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998846166300234	WITHOUT_CLASSIFICATION	1.1538336997659692E-4	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999210419044838	WITHOUT_CLASSIFICATION	7.895809551623026E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999967486945639	WITHOUT_CLASSIFICATION	3.2513054359872E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9948147543318122	WITHOUT_CLASSIFICATION	0.005185245668187821	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999523361709586	WITHOUT_CLASSIFICATION	4.766382904131688E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999880942641126	WITHOUT_CLASSIFICATION	1.1905735887350378E-5	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999326475193506	WITHOUT_CLASSIFICATION	6.735248064937291E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9510897704731	WITHOUT_CLASSIFICATION	0.04891022952689993	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999980498495732	WITHOUT_CLASSIFICATION	1.9501504267043536E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999771046912849	WITHOUT_CLASSIFICATION	2.28953087151318E-5	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999877802297562	WITHOUT_CLASSIFICATION	1.2219770243753205E-5	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999751921651338	WITHOUT_CLASSIFICATION	2.480783486613163E-5	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9998681553518556	WITHOUT_CLASSIFICATION	1.318446481445182E-4	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999764342783097	WITHOUT_CLASSIFICATION	2.3565721690288065E-5	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997472992894292	WITHOUT_CLASSIFICATION	2.5270071057076766E-4	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999987302903148	WITHOUT_CLASSIFICATION	1.2697096851963477E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999995403781415	WITHOUT_CLASSIFICATION	4.596218585017456E-6	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999524771208963	WITHOUT_CLASSIFICATION	4.7522879103747E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998931564649245	WITHOUT_CLASSIFICATION	1.0684353507548633E-4	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9998924382198375	WITHOUT_CLASSIFICATION	1.075617801624849E-4	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999688110764894	WITHOUT_CLASSIFICATION	3.118892351060353E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9995564043900784	WITHOUT_CLASSIFICATION	4.4359560992158E-4	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999478101928722	WITHOUT_CLASSIFICATION	5.218980712781055E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999478101928722	WITHOUT_CLASSIFICATION	5.218980712781055E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999688110764894	WITHOUT_CLASSIFICATION	3.118892351060353E-4	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.8041362852971177	WITHOUT_CLASSIFICATION	0.19586371470288227	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998849038847696	WITHOUT_CLASSIFICATION	1.150961152304126E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998294825399046	WITHOUT_CLASSIFICATION	1.70517460095421E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999963244551763	WITHOUT_CLASSIFICATION	3.6755448237132202E-6	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.999994165594142	WITHOUT_CLASSIFICATION	5.83440585799259E-6	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9961770958738512	WITHOUT_CLASSIFICATION	0.003822904126148747	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9998423646645848	WITHOUT_CLASSIFICATION	1.5763533541530498E-4	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9975308105485041	WITHOUT_CLASSIFICATION	0.002469189451495927	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9994973931529072	WITHOUT_CLASSIFICATION	5.026068470927796E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999515178819587	WITHOUT_CLASSIFICATION	4.8482118041395134E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999478101928722	WITHOUT_CLASSIFICATION	5.218980712781055E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999665139041531	WITHOUT_CLASSIFICATION	3.348609584681411E-5	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9992532950981698	WITHOUT_CLASSIFICATION	7.467049018300904E-4	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999949296119465	WITHOUT_CLASSIFICATION	5.0703880535528994E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999965807738029	WITHOUT_CLASSIFICATION	3.419226197018359E-6	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999750496200814	WITHOUT_CLASSIFICATION	2.4950379918571836E-5	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999924756811062	WITHOUT_CLASSIFICATION	7.524318893788677E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999900786143708	WITHOUT_CLASSIFICATION	9.921385629065991E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999938131484362	WITHOUT_CLASSIFICATION	6.186851563837191E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999445567915921	WITHOUT_CLASSIFICATION	5.544320840792829E-5	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999917470780925	WITHOUT_CLASSIFICATION	8.252921907530215E-6	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998575307673662	WITHOUT_CLASSIFICATION	1.4246923263388567E-4	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999893726494683	WITHOUT_CLASSIFICATION	1.0627350531694512E-4	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6876792725079397	IMPLEMENTATION	0.31232072749206036	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9994245314581379	WITHOUT_CLASSIFICATION	5.75468541862066E-4	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999873653964113	WITHOUT_CLASSIFICATION	1.2634603588684818E-5	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9974096185105217	WITHOUT_CLASSIFICATION	0.002590381489478447	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999903674044732	WITHOUT_CLASSIFICATION	9.63259552668549E-6	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999895542022023	WITHOUT_CLASSIFICATION	1.04457977977417E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9992839957889901	WITHOUT_CLASSIFICATION	7.160042110099616E-4	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999616186612517	WITHOUT_CLASSIFICATION	3.8381338748360306E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999955316393565	WITHOUT_CLASSIFICATION	4.468360643546962E-6	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999531619338801	WITHOUT_CLASSIFICATION	4.68380661198935E-5	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999908181061044	WITHOUT_CLASSIFICATION	9.181893895744403E-6	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998911595133	WITHOUT_CLASSIFICATION	1.08840486779606E-7	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999531619338801	WITHOUT_CLASSIFICATION	4.68380661198935E-5	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9930130653666775	WITHOUT_CLASSIFICATION	0.00698693463332242	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998458425329474	WITHOUT_CLASSIFICATION	1.5415746705261675E-4	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999122259638736	WITHOUT_CLASSIFICATION	8.777403612639813E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999389896957258	WITHOUT_CLASSIFICATION	6.101030427432512E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999718675898663	WITHOUT_CLASSIFICATION	2.8132410133677685E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999718675898663	WITHOUT_CLASSIFICATION	2.8132410133677685E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999920615480123	WITHOUT_CLASSIFICATION	7.938451987700277E-5	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999993704232061	WITHOUT_CLASSIFICATION	6.295767939271974E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999968957003524	WITHOUT_CLASSIFICATION	3.104299647611042E-6	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9997635616324301	WITHOUT_CLASSIFICATION	2.3643836756991168E-4	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999929215178365	WITHOUT_CLASSIFICATION	7.078482163591989E-6	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998957306622371	WITHOUT_CLASSIFICATION	1.0426933776278993E-4	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9982897939114176	WITHOUT_CLASSIFICATION	0.0017102060885823673	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999630683931002	WITHOUT_CLASSIFICATION	3.6931606899661287E-5	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999896302546953	WITHOUT_CLASSIFICATION	1.0369745304679379E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999707153785976	WITHOUT_CLASSIFICATION	2.928462140242778E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999707153785976	WITHOUT_CLASSIFICATION	2.928462140242778E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999095622131506	WITHOUT_CLASSIFICATION	9.043778684931524E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999012894930256	WITHOUT_CLASSIFICATION	9.871050697445717E-5	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999773717742395	WITHOUT_CLASSIFICATION	2.262822576050276E-5	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999707153785976	WITHOUT_CLASSIFICATION	2.928462140242778E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999095622131506	WITHOUT_CLASSIFICATION	9.043778684931524E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999095622131506	WITHOUT_CLASSIFICATION	9.043778684931524E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999950545870332	WITHOUT_CLASSIFICATION	4.945412966776727E-6	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998071838706898	WITHOUT_CLASSIFICATION	1.928161293100966E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999070899991	WITHOUT_CLASSIFICATION	9.291000089373852E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999985124094003	WITHOUT_CLASSIFICATION	1.487590599718679E-6	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9984706604238498	WITHOUT_CLASSIFICATION	0.0015293395761501727	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9984706604238498	WITHOUT_CLASSIFICATION	0.0015293395761501727	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999852300234099	WITHOUT_CLASSIFICATION	1.4769976589995763E-5	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999923026670811	WITHOUT_CLASSIFICATION	7.697332918897203E-5	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.999994777560384	WITHOUT_CLASSIFICATION	5.222439615984471E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999961871993153	WITHOUT_CLASSIFICATION	3.812800684713206E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999961871993153	WITHOUT_CLASSIFICATION	3.812800684713206E-6	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999667938455135	WITHOUT_CLASSIFICATION	3.3206154486488354E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9983335416304936	WITHOUT_CLASSIFICATION	0.0016664583695064116	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999470476151131	WITHOUT_CLASSIFICATION	5.2952384886857876E-5	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999601832213	WITHOUT_CLASSIFICATION	3.9816778672788695E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999879723138797	WITHOUT_CLASSIFICATION	1.2027686120351036E-5	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999130783213791	WITHOUT_CLASSIFICATION	8.692167862087343E-5	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998253730395474	WITHOUT_CLASSIFICATION	1.7462696045262668E-4	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999092663046981	WITHOUT_CLASSIFICATION	9.073369530185906E-5	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999470476151131	WITHOUT_CLASSIFICATION	5.2952384886857876E-5	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999848583816855	WITHOUT_CLASSIFICATION	1.5141618314553742E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999840602705278	WITHOUT_CLASSIFICATION	1.5939729472148872E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999840602705278	WITHOUT_CLASSIFICATION	1.5939729472148872E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999863439283	WITHOUT_CLASSIFICATION	1.3656071608663833E-8	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999973999557659	WITHOUT_CLASSIFICATION	2.600044234103575E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.999855770193093	WITHOUT_CLASSIFICATION	1.4422980690698237E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9890380037468157	WITHOUT_CLASSIFICATION	0.010961996253184253	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999123531226239	WITHOUT_CLASSIFICATION	8.764687737608134E-5	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999135024454674	WITHOUT_CLASSIFICATION	8.649755453254279E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999863430483793	WITHOUT_CLASSIFICATION	1.3656951620718203E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999543744056354	WITHOUT_CLASSIFICATION	4.562559436452002E-5	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9996798682395842	WITHOUT_CLASSIFICATION	3.201317604157831E-4	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990488295748	WITHOUT_CLASSIFICATION	9.511704251707884E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999990488295748	WITHOUT_CLASSIFICATION	9.511704251707884E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999835360358322	WITHOUT_CLASSIFICATION	1.6463964167774366E-5	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999936473222059	WITHOUT_CLASSIFICATION	6.352677794087029E-6	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999722606735819	WITHOUT_CLASSIFICATION	2.773932641810029E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999639560394922	WITHOUT_CLASSIFICATION	3.6043960507698084E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999257216927979	WITHOUT_CLASSIFICATION	7.427830720197215E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999226210318426	WITHOUT_CLASSIFICATION	7.737896815740856E-5	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998270916789901	WITHOUT_CLASSIFICATION	1.7290832100997678E-4	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999423336901662	WITHOUT_CLASSIFICATION	5.766630983370377E-5	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999505193063277	WITHOUT_CLASSIFICATION	4.948069367233142E-5	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.999960272107705	WITHOUT_CLASSIFICATION	3.972789229496807E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999492519224528	WITHOUT_CLASSIFICATION	5.074807754730755E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999622369107402	WITHOUT_CLASSIFICATION	3.7763089259843966E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999423336901662	WITHOUT_CLASSIFICATION	5.766630983370377E-5	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998336547924059	WITHOUT_CLASSIFICATION	1.663452075941493E-4	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9997718081895086	WITHOUT_CLASSIFICATION	2.2819181049132419E-4	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998276666743229	WITHOUT_CLASSIFICATION	1.723333256771854E-4	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999620761858733	WITHOUT_CLASSIFICATION	3.7923814126638753E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999772484373133	WITHOUT_CLASSIFICATION	2.2751562686677407E-5	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9998441598840819	WITHOUT_CLASSIFICATION	1.5584011591805578E-4	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9991851298233161	WITHOUT_CLASSIFICATION	8.148701766839151E-4	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999374764906496	WITHOUT_CLASSIFICATION	6.252350935048278E-5	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999702989316733	WITHOUT_CLASSIFICATION	2.970106832666074E-5	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999728144710478	WITHOUT_CLASSIFICATION	2.718552895213714E-5	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.999947611223531	WITHOUT_CLASSIFICATION	5.238877646884976E-5	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999773127498076	WITHOUT_CLASSIFICATION	2.2687250192393795E-5	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999914037000811	WITHOUT_CLASSIFICATION	8.596299918972804E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9997580926173655	WITHOUT_CLASSIFICATION	2.419073826346109E-4	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9969584927831836	WITHOUT_CLASSIFICATION	0.0030415072168164434	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999934242658708	WITHOUT_CLASSIFICATION	6.57573412927791E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999639560394922	WITHOUT_CLASSIFICATION	3.6043960507698084E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999639560394922	WITHOUT_CLASSIFICATION	3.6043960507698084E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999492519224528	WITHOUT_CLASSIFICATION	5.074807754730755E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.999947611223531	WITHOUT_CLASSIFICATION	5.238877646884976E-5	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999812318825858	WITHOUT_CLASSIFICATION	1.8768117414231926E-5	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998710029643886	WITHOUT_CLASSIFICATION	1.2899703561149718E-4	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999950451931202	WITHOUT_CLASSIFICATION	4.954806879793078E-5	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999445865800562	WITHOUT_CLASSIFICATION	5.541341994374133E-5	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999472898341317	WITHOUT_CLASSIFICATION	5.2710165868344594E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999622268166868	WITHOUT_CLASSIFICATION	3.777318331327801E-5	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999470088106435	WITHOUT_CLASSIFICATION	5.2991189356596756E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9996716585993776	WITHOUT_CLASSIFICATION	3.283414006224398E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997947828499794	WITHOUT_CLASSIFICATION	2.0521715002068164E-4	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997947828499794	WITHOUT_CLASSIFICATION	2.0521715002068164E-4	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999908532360036	WITHOUT_CLASSIFICATION	9.146763996373642E-6	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999881680057686	WITHOUT_CLASSIFICATION	1.1831994231393377E-5	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998942916557937	WITHOUT_CLASSIFICATION	1.0570834420636262E-4	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999094956173287	WITHOUT_CLASSIFICATION	9.050438267137824E-5	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999417583461478	WITHOUT_CLASSIFICATION	5.8241653852135345E-5	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999836109515668	WITHOUT_CLASSIFICATION	1.6389048433174875E-5	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999861055568768	WITHOUT_CLASSIFICATION	1.389444312323134E-5	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999900061885699	WITHOUT_CLASSIFICATION	9.993811430098136E-5	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999851579419754	WITHOUT_CLASSIFICATION	1.4842058024636619E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999851579419754	WITHOUT_CLASSIFICATION	1.4842058024636619E-5	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999781407702495	WITHOUT_CLASSIFICATION	2.1859229750567118E-5	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999843224413228	WITHOUT_CLASSIFICATION	1.5677558677152093E-5	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999781407702495	WITHOUT_CLASSIFICATION	2.1859229750567118E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999729446426094	WITHOUT_CLASSIFICATION	2.7055357390558273E-5	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.999974679928522	WITHOUT_CLASSIFICATION	2.532007147810383E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999639560394922	WITHOUT_CLASSIFICATION	3.6043960507698084E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999492519224528	WITHOUT_CLASSIFICATION	5.074807754730755E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.999947611223531	WITHOUT_CLASSIFICATION	5.238877646884976E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.999947611223531	WITHOUT_CLASSIFICATION	5.238877646884976E-5	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999647980441102	WITHOUT_CLASSIFICATION	3.5201955889737E-5	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999253494665117	WITHOUT_CLASSIFICATION	7.465053348841454E-5	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999905495914517	WITHOUT_CLASSIFICATION	9.450408548297148E-6	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999949086135694	WITHOUT_CLASSIFICATION	5.091386430558E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999949086135694	WITHOUT_CLASSIFICATION	5.091386430558E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.998233445197254	WITHOUT_CLASSIFICATION	0.0017665548027460648	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999987941482158	WITHOUT_CLASSIFICATION	1.205851784202673E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999775209604176	WITHOUT_CLASSIFICATION	2.247903958243773E-5	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999487160725349	WITHOUT_CLASSIFICATION	5.128392746509729E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999790589401305	WITHOUT_CLASSIFICATION	2.0941059869538924E-5	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999476267177105	WITHOUT_CLASSIFICATION	5.237328228945632E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999975399463102	WITHOUT_CLASSIFICATION	2.460053689745796E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999474090361112	WITHOUT_CLASSIFICATION	5.2590963888803913E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999474090361112	WITHOUT_CLASSIFICATION	5.2590963888803913E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999418890973772	WITHOUT_CLASSIFICATION	5.8110902622764296E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999418890973772	WITHOUT_CLASSIFICATION	5.8110902622764296E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999781024923655	WITHOUT_CLASSIFICATION	2.1897507634504074E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999781024923655	WITHOUT_CLASSIFICATION	2.1897507634504074E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998978458162318	WITHOUT_CLASSIFICATION	1.0215418376816889E-4	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998978458162318	WITHOUT_CLASSIFICATION	1.0215418376816889E-4	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999949086135694	WITHOUT_CLASSIFICATION	5.091386430558E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999975399463102	WITHOUT_CLASSIFICATION	2.460053689745796E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999474090361112	WITHOUT_CLASSIFICATION	5.2590963888803913E-5	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999474090361112	WITHOUT_CLASSIFICATION	5.2590963888803913E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999418890973772	WITHOUT_CLASSIFICATION	5.8110902622764296E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999781024923655	WITHOUT_CLASSIFICATION	2.1897507634504074E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999781024923655	WITHOUT_CLASSIFICATION	2.1897507634504074E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998978458162318	WITHOUT_CLASSIFICATION	1.0215418376816889E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999255538969986	WITHOUT_CLASSIFICATION	7.444610300149705E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999617129187564	WITHOUT_CLASSIFICATION	3.828708124361937E-5	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.99995989551598	WITHOUT_CLASSIFICATION	4.010448402003554E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9989853825115047	WITHOUT_CLASSIFICATION	0.0010146174884953342	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999474690507404	WITHOUT_CLASSIFICATION	5.253094925951295E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999470000340792	WITHOUT_CLASSIFICATION	5.2999965920851094E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999971611567224	WITHOUT_CLASSIFICATION	2.838843277560838E-6	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999965333932093	WITHOUT_CLASSIFICATION	3.466606790644196E-6	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999992679474949	WITHOUT_CLASSIFICATION	7.320525050172967E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9976752795973224	WITHOUT_CLASSIFICATION	0.0023247204026777117	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998995940753198	WITHOUT_CLASSIFICATION	1.0040592468021666E-4	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999825141633283	WITHOUT_CLASSIFICATION	1.748583667172851E-5	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999920615480123	WITHOUT_CLASSIFICATION	7.938451987700277E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999470000340792	WITHOUT_CLASSIFICATION	5.2999965920851094E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999470000340792	WITHOUT_CLASSIFICATION	5.2999965920851094E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999470000340792	WITHOUT_CLASSIFICATION	5.2999965920851094E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999930877565447	WITHOUT_CLASSIFICATION	6.9122434553410335E-6	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9997935480605181	WITHOUT_CLASSIFICATION	2.064519394818193E-4	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9997935480605181	WITHOUT_CLASSIFICATION	2.064519394818193E-4	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9998564989081168	WITHOUT_CLASSIFICATION	1.4350109188326535E-4	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999697145104	WITHOUT_CLASSIFICATION	3.028548955369236E-8	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999872749800192	WITHOUT_CLASSIFICATION	1.2725019980772463E-5	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999617943552661	WITHOUT_CLASSIFICATION	3.820564473391118E-4	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999617943552661	WITHOUT_CLASSIFICATION	3.820564473391118E-4	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999988339559588	WITHOUT_CLASSIFICATION	1.1660440412117427E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999909789509689	WITHOUT_CLASSIFICATION	9.021049031175045E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999909789509689	WITHOUT_CLASSIFICATION	9.021049031175045E-6	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9990279228563563	WITHOUT_CLASSIFICATION	9.720771436435244E-4	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999947059901334	WITHOUT_CLASSIFICATION	5.2940098665736095E-6	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999967486945639	WITHOUT_CLASSIFICATION	3.2513054359872E-6	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999519738689531	WITHOUT_CLASSIFICATION	4.802613104696294E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999474403040375	WITHOUT_CLASSIFICATION	5.255969596248562E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5488527046054483	WITHOUT_CLASSIFICATION	0.4511472953945517	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998616155350077	WITHOUT_CLASSIFICATION	1.3838446499232258E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999800139438203	WITHOUT_CLASSIFICATION	1.9986056179684926E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999292680472781	WITHOUT_CLASSIFICATION	7.073195272191693E-5	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999654942687624	WITHOUT_CLASSIFICATION	3.450573123760006E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999979131766097	WITHOUT_CLASSIFICATION	2.086823390295991E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999326475193506	WITHOUT_CLASSIFICATION	6.735248064937291E-5	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9998229419500968	WITHOUT_CLASSIFICATION	1.7705804990322626E-4	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999210829130335	WITHOUT_CLASSIFICATION	7.891708696657297E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999473493583408	WITHOUT_CLASSIFICATION	5.2650641659051216E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999470093420996	WITHOUT_CLASSIFICATION	5.2990657900463775E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999245126976323	WITHOUT_CLASSIFICATION	7.548730236777152E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999682439468386	WITHOUT_CLASSIFICATION	3.175605316133013E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999967486945639	WITHOUT_CLASSIFICATION	3.2513054359872E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998607566304601	WITHOUT_CLASSIFICATION	1.3924336953985216E-4	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999748232363553	WITHOUT_CLASSIFICATION	2.5176763644619698E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999486884575193	WITHOUT_CLASSIFICATION	5.1311542480703076E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999474403040375	WITHOUT_CLASSIFICATION	5.255969596248562E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999682439468386	WITHOUT_CLASSIFICATION	3.175605316133013E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9998607566304601	WITHOUT_CLASSIFICATION	1.3924336953985216E-4	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999486884575193	WITHOUT_CLASSIFICATION	5.1311542480703076E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998644503258048	WITHOUT_CLASSIFICATION	1.3554967419514364E-4	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999470010824769	WITHOUT_CLASSIFICATION	5.2998917523035545E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998644503258048	WITHOUT_CLASSIFICATION	1.3554967419514364E-4	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999024086637722	WITHOUT_CLASSIFICATION	9.759133622777805E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999272876846369	WITHOUT_CLASSIFICATION	7.271231536313334E-5	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998205156385	WITHOUT_CLASSIFICATION	1.7948436152090274E-7	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999965072543914	WITHOUT_CLASSIFICATION	3.4927456085735687E-6	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.997097164933065	WITHOUT_CLASSIFICATION	0.0029028350669350425	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999680336184452	WITHOUT_CLASSIFICATION	3.196638155486008E-5	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9960581519566215	WITHOUT_CLASSIFICATION	0.003941848043378475	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9980835850266314	WITHOUT_CLASSIFICATION	0.0019164149733685721	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999680336184452	WITHOUT_CLASSIFICATION	3.196638155486008E-5	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999523361709586	WITHOUT_CLASSIFICATION	4.766382904131688E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998717174450235	WITHOUT_CLASSIFICATION	1.2828255497650628E-4	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999682439468386	WITHOUT_CLASSIFICATION	3.175605316133013E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998581519205538	WITHOUT_CLASSIFICATION	1.4184807944622098E-4	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999316219793061	WITHOUT_CLASSIFICATION	6.837802069392117E-5	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9974801773178107	WITHOUT_CLASSIFICATION	0.002519822682189327	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999348268746654	WITHOUT_CLASSIFICATION	6.517312533455387E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999867908819086	WITHOUT_CLASSIFICATION	1.320911809140736E-5	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999994456378956	WITHOUT_CLASSIFICATION	5.543621044864694E-7	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999915298828159	WITHOUT_CLASSIFICATION	8.470117184010693E-6	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998438632101453	WITHOUT_CLASSIFICATION	1.5613678985471296E-4	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999493862473696	WITHOUT_CLASSIFICATION	5.061375263029688E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997895165452945	WITHOUT_CLASSIFICATION	2.104834547056305E-4	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9983891374908211	WITHOUT_CLASSIFICATION	0.0016108625091788757	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999326475193506	WITHOUT_CLASSIFICATION	6.735248064937291E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999175373805986	WITHOUT_CLASSIFICATION	8.246261940140947E-5	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999381540365473	WITHOUT_CLASSIFICATION	6.184596345267037E-5	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9998242273919206	WITHOUT_CLASSIFICATION	1.757726080795689E-4	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999497441174592	WITHOUT_CLASSIFICATION	5.025588254080433E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999499159899395	WITHOUT_CLASSIFICATION	5.0084010060541955E-5	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999670062218495	WITHOUT_CLASSIFICATION	3.2993778150475026E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999660509122	WITHOUT_CLASSIFICATION	3.39490878255609E-8	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999952329438234	WITHOUT_CLASSIFICATION	4.767056176657534E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9966822437661307	WITHOUT_CLASSIFICATION	0.0033177562338693486	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999398760781615	WITHOUT_CLASSIFICATION	6.0123921838516634E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.997997369732624	WITHOUT_CLASSIFICATION	0.0020026302673759547	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.997997369732624	WITHOUT_CLASSIFICATION	0.0020026302673759547	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999641835318419	WITHOUT_CLASSIFICATION	3.581646815816998E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999968957515241	WITHOUT_CLASSIFICATION	3.104248475904508E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999327557413159	WITHOUT_CLASSIFICATION	6.724425868407796E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999338246841818	WITHOUT_CLASSIFICATION	6.617531581820733E-5	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999960447076415	WITHOUT_CLASSIFICATION	3.9552923585009534E-5	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998201626136376	WITHOUT_CLASSIFICATION	1.798373863624177E-4	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999847433333289	WITHOUT_CLASSIFICATION	1.5256666671188244E-5	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9711439704820073	WITHOUT_CLASSIFICATION	0.02885602951799273	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999915724663527	WITHOUT_CLASSIFICATION	8.427533647255272E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999398940203571	WITHOUT_CLASSIFICATION	6.010597964279512E-5	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999217815942738	WITHOUT_CLASSIFICATION	7.821840572625835E-5	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9991780746789445	WITHOUT_CLASSIFICATION	8.21925321055479E-4	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998450126041427	WITHOUT_CLASSIFICATION	1.5498739585730035E-4	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999644132739598	WITHOUT_CLASSIFICATION	3.5586726040152025E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9989263477834145	WITHOUT_CLASSIFICATION	0.0010736522165855117	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999377896434336	WITHOUT_CLASSIFICATION	6.221035656644575E-5	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525992612484	WITHOUT_CLASSIFICATION	4.740073875157868E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999711423982144	WITHOUT_CLASSIFICATION	2.8857601785585066E-5	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998256195331168	WITHOUT_CLASSIFICATION	1.7438046688315239E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9997998381984704	WITHOUT_CLASSIFICATION	2.0016180152958142E-4	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999622825839133	WITHOUT_CLASSIFICATION	3.7717416086839704E-5	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999852472760759	WITHOUT_CLASSIFICATION	1.4752723924216587E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999377896434336	WITHOUT_CLASSIFICATION	6.221035656644575E-5	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998833011695843	WITHOUT_CLASSIFICATION	1.1669883041562202E-4	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998774346765178	WITHOUT_CLASSIFICATION	1.2256532348224245E-4	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998769657922187	WITHOUT_CLASSIFICATION	1.230342077813154E-4	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999142151159	WITHOUT_CLASSIFICATION	8.578488402989755E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9998716633468482	WITHOUT_CLASSIFICATION	1.283366531518436E-4	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999711423982144	WITHOUT_CLASSIFICATION	2.8857601785585066E-5	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999188163797568	WITHOUT_CLASSIFICATION	8.118362024320058E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997664092632166	WITHOUT_CLASSIFICATION	2.3359073678341807E-4	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998357513664782	WITHOUT_CLASSIFICATION	1.6424863352188667E-4	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999492706069373	WITHOUT_CLASSIFICATION	5.072939306266095E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999492706069373	WITHOUT_CLASSIFICATION	5.072939306266095E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9998924382198375	WITHOUT_CLASSIFICATION	1.075617801624849E-4	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998923270864626	WITHOUT_CLASSIFICATION	1.0767291353751912E-4	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999193381141614	WITHOUT_CLASSIFICATION	8.066188583854892E-5	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999193381141614	WITHOUT_CLASSIFICATION	8.066188583854892E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9966822437661307	WITHOUT_CLASSIFICATION	0.0033177562338693486	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9997796960827829	WITHOUT_CLASSIFICATION	2.2030391721706053E-4	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998565468632806	WITHOUT_CLASSIFICATION	1.4345313671931302E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999370514531558	WITHOUT_CLASSIFICATION	6.294854684423109E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999835360358322	WITHOUT_CLASSIFICATION	1.6463964167774366E-5	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998565468632806	WITHOUT_CLASSIFICATION	1.4345313671931302E-4	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999370514531558	WITHOUT_CLASSIFICATION	6.294854684423109E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7229647094442334	WITHOUT_CLASSIFICATION	0.27703529055576664	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999991340309874	WITHOUT_CLASSIFICATION	8.65969012594236E-7	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999968609006485	WITHOUT_CLASSIFICATION	3.139099351494329E-5	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999993975098144	WITHOUT_CLASSIFICATION	6.024901856871159E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9982478302643834	WITHOUT_CLASSIFICATION	0.0017521697356165844	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.6801421489793742	WITHOUT_CLASSIFICATION	0.3198578510206258	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9993984655247751	WITHOUT_CLASSIFICATION	6.015344752248806E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9993984655247751	WITHOUT_CLASSIFICATION	6.015344752248806E-4	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999840211165615	WITHOUT_CLASSIFICATION	1.5978883438523713E-5	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999986904490638	WITHOUT_CLASSIFICATION	1.3095509361911434E-6	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9997254760842199	WITHOUT_CLASSIFICATION	2.7452391578009644E-4	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999995425867924	WITHOUT_CLASSIFICATION	4.574132075930615E-6	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999976610695817	WITHOUT_CLASSIFICATION	2.338930418404076E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9997360762216941	WITHOUT_CLASSIFICATION	2.63923778305872E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999835360358322	WITHOUT_CLASSIFICATION	1.6463964167774366E-5	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9997360762216941	WITHOUT_CLASSIFICATION	2.63923778305872E-4	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999929271229161	WITHOUT_CLASSIFICATION	7.072877083792825E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999929271229161	WITHOUT_CLASSIFICATION	7.072877083792825E-6	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999920809666745	WITHOUT_CLASSIFICATION	7.919033325541188E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7229647094442334	WITHOUT_CLASSIFICATION	0.27703529055576664	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9951219449581109	WITHOUT_CLASSIFICATION	0.004878055041889051	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999848523956206	WITHOUT_CLASSIFICATION	1.5147604379436215E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9884217158329015	WITHOUT_CLASSIFICATION	0.011578284167098576	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999891647934157	WITHOUT_CLASSIFICATION	1.0835206584311771E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9992217896324505	WITHOUT_CLASSIFICATION	7.782103675496047E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7229647094442334	WITHOUT_CLASSIFICATION	0.27703529055576664	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999891647934157	WITHOUT_CLASSIFICATION	1.0835206584311771E-5	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9992217896324505	WITHOUT_CLASSIFICATION	7.782103675496047E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999939593722876	WITHOUT_CLASSIFICATION	6.040627712487271E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998666999290907	WITHOUT_CLASSIFICATION	1.3330007090929435E-4	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999859271507462	WITHOUT_CLASSIFICATION	1.4072849253901678E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7229647094442334	WITHOUT_CLASSIFICATION	0.27703529055576664	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.7229647094442334	WITHOUT_CLASSIFICATION	0.27703529055576664	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999913727408422	WITHOUT_CLASSIFICATION	8.627259157796262E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.999987812790093	WITHOUT_CLASSIFICATION	1.2187209906967815E-5	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999917077830953	WITHOUT_CLASSIFICATION	8.292216904647148E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999995403781415	WITHOUT_CLASSIFICATION	4.596218585017456E-6	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999826135458993	WITHOUT_CLASSIFICATION	1.738645410062676E-5	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999876694122226	WITHOUT_CLASSIFICATION	1.2330587777490227E-5	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9994675576437712	WITHOUT_CLASSIFICATION	5.32442356228885E-4	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999707827099197	WITHOUT_CLASSIFICATION	2.9217290080234273E-5	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999979907257801	WITHOUT_CLASSIFICATION	2.0092742199011197E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999439200241731	WITHOUT_CLASSIFICATION	5.607997582699026E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9974451425528901	WITHOUT_CLASSIFICATION	0.0025548574471099877	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9951784287454133	WITHOUT_CLASSIFICATION	0.0048215712545866575	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999964195199937	WITHOUT_CLASSIFICATION	3.5804800063556543E-6	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9995713515098911	WITHOUT_CLASSIFICATION	4.286484901089503E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998095921468636	WITHOUT_CLASSIFICATION	1.904078531363673E-4	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999994958655899	WITHOUT_CLASSIFICATION	5.041344100424173E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999995403781415	WITHOUT_CLASSIFICATION	4.596218585017456E-6	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999438413156824	WITHOUT_CLASSIFICATION	5.6158684317625115E-5	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999701161903322	WITHOUT_CLASSIFICATION	2.9883809667778466E-5	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998439472864045	WITHOUT_CLASSIFICATION	1.5605271359556475E-4	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997276561851113	WITHOUT_CLASSIFICATION	2.7234381488869464E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999193426615938	WITHOUT_CLASSIFICATION	8.0657338406289E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999193426615938	WITHOUT_CLASSIFICATION	8.0657338406289E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999995403781415	WITHOUT_CLASSIFICATION	4.596218585017456E-6	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9892947225667666	WITHOUT_CLASSIFICATION	0.010705277433233445	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999773227823708	WITHOUT_CLASSIFICATION	2.2677217629189358E-5	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9933319800788744	WITHOUT_CLASSIFICATION	0.006668019921125735	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999798459172257	WITHOUT_CLASSIFICATION	2.0154082774276298E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999986280816878	WITHOUT_CLASSIFICATION	1.3719183121840398E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999286576319559	WITHOUT_CLASSIFICATION	7.13423680440786E-5	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999876367119827	WITHOUT_CLASSIFICATION	1.2363288017298884E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999988602491227	WITHOUT_CLASSIFICATION	1.1397508773034205E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999927550648744	WITHOUT_CLASSIFICATION	7.244935125599065E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999949494002627	WITHOUT_CLASSIFICATION	5.050599737346083E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999357866613079	WITHOUT_CLASSIFICATION	6.421333869217625E-5	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998295823255905	WITHOUT_CLASSIFICATION	1.7041767440953922E-4	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886400271363	WITHOUT_CLASSIFICATION	1.1359972863752684E-5	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999286634649734	WITHOUT_CLASSIFICATION	7.13365350265154E-5	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9951863170833095	WITHOUT_CLASSIFICATION	0.004813682916690488	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9994544813004373	WITHOUT_CLASSIFICATION	5.455186995627014E-4	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998655397780001	WITHOUT_CLASSIFICATION	1.3446022199992068E-4	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999963133216387	WITHOUT_CLASSIFICATION	3.6866783612733765E-6	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996125553419923	WITHOUT_CLASSIFICATION	3.874446580076028E-4	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999942070584147	WITHOUT_CLASSIFICATION	5.7929415853763185E-6	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998345137116898	WITHOUT_CLASSIFICATION	0.0016548628831020683	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993672935787612	WITHOUT_CLASSIFICATION	6.327064212389122E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981493475003297	WITHOUT_CLASSIFICATION	0.0018506524996702348	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999223059831982	WITHOUT_CLASSIFICATION	7.7694016801754E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977695802569344	WITHOUT_CLASSIFICATION	0.002230419743065573	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9996112020765888	WITHOUT_CLASSIFICATION	3.887979234111181E-4	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998359944169822	WITHOUT_CLASSIFICATION	1.640055830176309E-4	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984418836424408	WITHOUT_CLASSIFICATION	0.0015581163575591871	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985385067797975	WITHOUT_CLASSIFICATION	0.0014614932202024992	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961540897659465	WITHOUT_CLASSIFICATION	0.0038459102340534057	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9905871826702968	WITHOUT_CLASSIFICATION	0.009412817329703158	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976711168258726	WITHOUT_CLASSIFICATION	0.002328883174127397	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970968242004138	WITHOUT_CLASSIFICATION	0.0029031757995862935	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999848112806902	WITHOUT_CLASSIFICATION	1.5188719309782376E-5	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999893144465446	WITHOUT_CLASSIFICATION	1.068555345540962E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.696515139692995	IMPLEMENTATION	0.3034848603070051	WITHOUT_CLASSIFICATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999911233002066	WITHOUT_CLASSIFICATION	8.876699793525998E-6	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999997723618238	WITHOUT_CLASSIFICATION	2.2763817619402927E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998911001331107	WITHOUT_CLASSIFICATION	1.0889986688936936E-4	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9998760253029622	WITHOUT_CLASSIFICATION	1.23974697037845E-4	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999601941878854	WITHOUT_CLASSIFICATION	3.980581211468669E-5	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999779609239161	WITHOUT_CLASSIFICATION	2.2039076083915122E-5	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999200528675185	WITHOUT_CLASSIFICATION	7.994713248150646E-5	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999225448344242	WITHOUT_CLASSIFICATION	7.745516557585615E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999383107848843	WITHOUT_CLASSIFICATION	6.168921511573258E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999376624637705	WITHOUT_CLASSIFICATION	6.233753622947567E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999470952235563	WITHOUT_CLASSIFICATION	5.29047764436767E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999978822912165	WITHOUT_CLASSIFICATION	2.117708783499532E-5	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.999799833198966	WITHOUT_CLASSIFICATION	2.0016680103397986E-4	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999049681769181	WITHOUT_CLASSIFICATION	9.503182308182784E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9993762967418255	WITHOUT_CLASSIFICATION	6.237032581745081E-4	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999817700951309	WITHOUT_CLASSIFICATION	1.8229904869096207E-4	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999044149530654	WITHOUT_CLASSIFICATION	9.558504693467086E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998945276062046	WITHOUT_CLASSIFICATION	1.054723937953937E-4	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9988764935325639	WITHOUT_CLASSIFICATION	0.0011235064674360688	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9997591969240703	WITHOUT_CLASSIFICATION	2.4080307592958602E-4	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999622106546499	WITHOUT_CLASSIFICATION	3.77893453502508E-5	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998417294018052	WITHOUT_CLASSIFICATION	1.5827059819492498E-4	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997326332571681	WITHOUT_CLASSIFICATION	2.6736674283190363E-4	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999267910218212	WITHOUT_CLASSIFICATION	7.320897817870802E-5	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999919418584814	WITHOUT_CLASSIFICATION	8.058141518735524E-6	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999534084823325	WITHOUT_CLASSIFICATION	4.6591517667419823E-5	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998494450451281	WITHOUT_CLASSIFICATION	1.5055495487200615E-4	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9994719106801758	WITHOUT_CLASSIFICATION	5.280893198241025E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9980361621076652	WITHOUT_CLASSIFICATION	0.00196383789233472	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999969773992001	WITHOUT_CLASSIFICATION	3.0226007998761918E-6	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998969627589493	WITHOUT_CLASSIFICATION	1.0303724105060307E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998911001331107	WITHOUT_CLASSIFICATION	1.0889986688936936E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9997698069181945	WITHOUT_CLASSIFICATION	2.3019308180537498E-4	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999975564846034	WITHOUT_CLASSIFICATION	2.443515396697823E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9997381408300438	WITHOUT_CLASSIFICATION	2.618591699562331E-4	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999911233002066	WITHOUT_CLASSIFICATION	8.876699793525998E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998900862731785	WITHOUT_CLASSIFICATION	1.0991372682141023E-4	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999587235036133	WITHOUT_CLASSIFICATION	4.1276496386712885E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9988764935325639	WITHOUT_CLASSIFICATION	0.0011235064674360688	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999961304944025	WITHOUT_CLASSIFICATION	3.869505597517068E-6	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997715848565362	WITHOUT_CLASSIFICATION	2.284151434637238E-4	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999400391243881	WITHOUT_CLASSIFICATION	5.9960875611946734E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997484640782179	WITHOUT_CLASSIFICATION	2.515359217820812E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999076775789593	WITHOUT_CLASSIFICATION	9.232242104078671E-5	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999352521399926	WITHOUT_CLASSIFICATION	6.474786000734771E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9979874584229067	WITHOUT_CLASSIFICATION	0.0020125415770933077	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999998066201792	WITHOUT_CLASSIFICATION	1.9337982080645798E-6	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999970659531642	WITHOUT_CLASSIFICATION	2.934046835723999E-6	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999954415177648	WITHOUT_CLASSIFICATION	4.5584822352660875E-6	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999873456738738	WITHOUT_CLASSIFICATION	1.2654326126134232E-5	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999910089682671	WITHOUT_CLASSIFICATION	8.991031732929192E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999570269454023	WITHOUT_CLASSIFICATION	4.297305459758271E-5	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999576689694712	WITHOUT_CLASSIFICATION	4.2331030528686606E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9998926491343819	WITHOUT_CLASSIFICATION	1.0735086561803874E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992660060625	WITHOUT_CLASSIFICATION	7.339939374428218E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999698284977273	WITHOUT_CLASSIFICATION	3.017150227267363E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999890349326613	WITHOUT_CLASSIFICATION	1.0965067338556981E-5	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999789219841453	WITHOUT_CLASSIFICATION	2.1078015854687203E-5	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9997187945729155	WITHOUT_CLASSIFICATION	2.8120542708452815E-4	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999535948155122	WITHOUT_CLASSIFICATION	4.6405184487905937E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999897370605441	WITHOUT_CLASSIFICATION	1.0262939455890692E-4	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.99999195104079	WITHOUT_CLASSIFICATION	8.048959209995463E-6	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9999299423833147	WITHOUT_CLASSIFICATION	7.005761668540746E-5	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999501012906812	WITHOUT_CLASSIFICATION	4.989870931879919E-5	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999493645814223	WITHOUT_CLASSIFICATION	5.063541857786265E-5	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999911233002066	WITHOUT_CLASSIFICATION	8.876699793525998E-6	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998911001331107	WITHOUT_CLASSIFICATION	1.0889986688936936E-4	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998821559424715	WITHOUT_CLASSIFICATION	1.1784405752843928E-4	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9961898215384404	WITHOUT_CLASSIFICATION	0.0038101784615595957	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9886561916299682	WITHOUT_CLASSIFICATION	0.011343808370031695	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9998924382198375	WITHOUT_CLASSIFICATION	1.075617801624849E-4	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998927456243725	WITHOUT_CLASSIFICATION	1.0725437562748434E-4	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9998929559362014	WITHOUT_CLASSIFICATION	1.0704406379848505E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998911001331107	WITHOUT_CLASSIFICATION	1.0889986688936936E-4	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999193706282269	WITHOUT_CLASSIFICATION	8.062937177315709E-5	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999698284977273	WITHOUT_CLASSIFICATION	3.017150227267363E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999855245799439	WITHOUT_CLASSIFICATION	1.4475420056093483E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992660060625	WITHOUT_CLASSIFICATION	7.339939374428218E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999882766061822	WITHOUT_CLASSIFICATION	1.172339381772376E-5	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9985059782567504	WITHOUT_CLASSIFICATION	0.0014940217432496544	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968634198451	WITHOUT_CLASSIFICATION	3.1365801548915263E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999400391243881	WITHOUT_CLASSIFICATION	5.9960875611946734E-5	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997484640782179	WITHOUT_CLASSIFICATION	2.515359217820812E-4	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999076775789593	WITHOUT_CLASSIFICATION	9.232242104078671E-5	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999658178327094	WITHOUT_CLASSIFICATION	3.418216729050958E-5	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9998570732997376	WITHOUT_CLASSIFICATION	1.4292670026243222E-4	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999957529271951	WITHOUT_CLASSIFICATION	4.247072804894644E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992660060625	WITHOUT_CLASSIFICATION	7.339939374428218E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999882766061822	WITHOUT_CLASSIFICATION	1.172339381772376E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998911001331107	WITHOUT_CLASSIFICATION	1.0889986688936936E-4	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999352521399926	WITHOUT_CLASSIFICATION	6.474786000734771E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9979874584229067	WITHOUT_CLASSIFICATION	0.0020125415770933077	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.999998066201792	WITHOUT_CLASSIFICATION	1.9337982080645798E-6	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999141930444123	WITHOUT_CLASSIFICATION	8.580695558773131E-5	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996920419063904	WITHOUT_CLASSIFICATION	3.079580936095854E-4	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999150407103685	WITHOUT_CLASSIFICATION	8.495928963151792E-5	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999884715217111	WITHOUT_CLASSIFICATION	1.1528478288809871E-5	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9989450017305589	WITHOUT_CLASSIFICATION	0.0010549982694411566	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999986056819248	WITHOUT_CLASSIFICATION	1.394318075211871E-6	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998875779973441	WITHOUT_CLASSIFICATION	1.1242200265597084E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999636710879526	WITHOUT_CLASSIFICATION	3.632891204744078E-5	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998732644481984	WITHOUT_CLASSIFICATION	1.2673555180167084E-4	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977695802569344	WITHOUT_CLASSIFICATION	0.002230419743065573	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985385067797975	WITHOUT_CLASSIFICATION	0.0014614932202024992	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999574629603057	WITHOUT_CLASSIFICATION	4.253703969416519E-5	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999496811623267	WITHOUT_CLASSIFICATION	5.031883767317613E-5	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979069396669531	WITHOUT_CLASSIFICATION	0.0020930603330469155	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9894572939169053	WITHOUT_CLASSIFICATION	0.010542706083094693	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961540897659465	WITHOUT_CLASSIFICATION	0.0038459102340534057	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997651055241531	WITHOUT_CLASSIFICATION	0.002348944758468997	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998494450451281	WITHOUT_CLASSIFICATION	1.5055495487200615E-4	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999975368033811	WITHOUT_CLASSIFICATION	2.463196618978609E-6	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999989065022164	WITHOUT_CLASSIFICATION	1.0934977835916737E-5	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999811039323339	WITHOUT_CLASSIFICATION	1.8896067666200988E-5	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999817320349589	WITHOUT_CLASSIFICATION	1.8267965041037614E-5	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999986656336177	WITHOUT_CLASSIFICATION	1.3343663823438339E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9998644503258048	WITHOUT_CLASSIFICATION	1.3554967419514364E-4	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999895413067512	WITHOUT_CLASSIFICATION	1.0458693248802865E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.999876367119827	WITHOUT_CLASSIFICATION	1.2363288017298884E-4	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995940552320993	WITHOUT_CLASSIFICATION	4.0594476790071317E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998512042675326	WITHOUT_CLASSIFICATION	1.4879573246734973E-4	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999628469104755	WITHOUT_CLASSIFICATION	3.7153089524592046E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999112349720256	WITHOUT_CLASSIFICATION	8.876502797436387E-5	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999883559370113	WITHOUT_CLASSIFICATION	1.1644062988758407E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999348229480042	WITHOUT_CLASSIFICATION	6.517705199585435E-5	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998861247117049	WITHOUT_CLASSIFICATION	1.1387528829514724E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998435837004397	WITHOUT_CLASSIFICATION	1.5641629956021985E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999946980361679	WITHOUT_CLASSIFICATION	5.301963832106624E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999870303227008	WITHOUT_CLASSIFICATION	1.2969677299202152E-4	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9997916165026464	WITHOUT_CLASSIFICATION	2.0838349735362963E-4	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999978877717644	WITHOUT_CLASSIFICATION	2.11222823559572E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999708182749567	WITHOUT_CLASSIFICATION	2.9181725043297896E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998548054892518	WITHOUT_CLASSIFICATION	1.451945107482828E-4	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999733025526231	WITHOUT_CLASSIFICATION	2.6697447376918353E-5	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996945736054279	WITHOUT_CLASSIFICATION	3.0542639457202726E-4	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999918783410865	WITHOUT_CLASSIFICATION	8.121658913502388E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998548054892518	WITHOUT_CLASSIFICATION	1.451945107482828E-4	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999969197046334	WITHOUT_CLASSIFICATION	3.08029536654529E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999875121587237	WITHOUT_CLASSIFICATION	1.2487841276298502E-5	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998940822893522	WITHOUT_CLASSIFICATION	1.0591771064776672E-4	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999494622923449	WITHOUT_CLASSIFICATION	5.053770765519702E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999239051700964	WITHOUT_CLASSIFICATION	7.60948299036349E-5	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.999877651507838	WITHOUT_CLASSIFICATION	1.2234849216203786E-4	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999666849919651	WITHOUT_CLASSIFICATION	3.331500803499222E-5	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999597279881757	WITHOUT_CLASSIFICATION	4.0272011824284285E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999597279881757	WITHOUT_CLASSIFICATION	4.0272011824284285E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999691147796157	WITHOUT_CLASSIFICATION	3.088522038430689E-5	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999455439151834	WITHOUT_CLASSIFICATION	5.445608481656176E-5	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998247049604183	WITHOUT_CLASSIFICATION	1.7529503958160103E-4	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999279632122496	WITHOUT_CLASSIFICATION	7.20367877504214E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999039160679	WITHOUT_CLASSIFICATION	9.608393215920524E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996092148284371	WITHOUT_CLASSIFICATION	3.907851715629057E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999996869821833	WITHOUT_CLASSIFICATION	3.130178166302338E-7	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999968997909079	WITHOUT_CLASSIFICATION	3.1002090921266026E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999157680554333	WITHOUT_CLASSIFICATION	8.42319445667585E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999964886995196	WITHOUT_CLASSIFICATION	3.5113004803888455E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9997800593874587	WITHOUT_CLASSIFICATION	2.1994061254130884E-4	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999676142317326	WITHOUT_CLASSIFICATION	3.2385768267327755E-5	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9996734284462372	WITHOUT_CLASSIFICATION	3.265715537627748E-4	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8559167114759221	WITHOUT_CLASSIFICATION	0.14408328852407803	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9994947680577032	WITHOUT_CLASSIFICATION	5.052319422967923E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9997602432829852	WITHOUT_CLASSIFICATION	2.39756717014783E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999292196012517	WITHOUT_CLASSIFICATION	7.078039874828641E-5	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9991170093730135	WITHOUT_CLASSIFICATION	8.829906269865589E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9996414376894872	WITHOUT_CLASSIFICATION	3.585623105127926E-4	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999558425919363	WITHOUT_CLASSIFICATION	4.415740806372738E-5	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999949287776525	WITHOUT_CLASSIFICATION	5.071222347487518E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999971383836505	WITHOUT_CLASSIFICATION	2.8616163494985154E-5	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9858700850398546	WITHOUT_CLASSIFICATION	0.014129914960145361	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999983226109725	WITHOUT_CLASSIFICATION	1.6773890274018033E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999851735916019	WITHOUT_CLASSIFICATION	1.4826408398066787E-5	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999658631113719	WITHOUT_CLASSIFICATION	3.4136888628100604E-4	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9911517550992256	WITHOUT_CLASSIFICATION	0.008848244900774323	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9998166976825359	WITHOUT_CLASSIFICATION	1.833023174641551E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9970907360936434	WITHOUT_CLASSIFICATION	0.002909263906356599	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998267410916403	WITHOUT_CLASSIFICATION	1.7325890835977656E-4	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999968955098134	WITHOUT_CLASSIFICATION	3.104490186592435E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999801067337682	WITHOUT_CLASSIFICATION	1.9893266231813163E-5	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999908553296947	WITHOUT_CLASSIFICATION	9.144670305381766E-6	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999887424627268	WITHOUT_CLASSIFICATION	1.125753727306963E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999883979146441	WITHOUT_CLASSIFICATION	1.1602085355938633E-5	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999532026669673	WITHOUT_CLASSIFICATION	4.67973330327569E-5	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999527209548902	WITHOUT_CLASSIFICATION	4.727904510992431E-5	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9959644282916615	WITHOUT_CLASSIFICATION	0.004035571708338409	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999000095703467	WITHOUT_CLASSIFICATION	9.999042965321615E-5	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999947778500845	WITHOUT_CLASSIFICATION	5.222149915507318E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999278417068516	WITHOUT_CLASSIFICATION	7.215829314846984E-5	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999873456738738	WITHOUT_CLASSIFICATION	1.2654326126134232E-5	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999873456738738	WITHOUT_CLASSIFICATION	1.2654326126134232E-5	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999695127130903	WITHOUT_CLASSIFICATION	3.0487286909645088E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999982156543215	WITHOUT_CLASSIFICATION	1.7843456785138463E-6	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999803125919691	WITHOUT_CLASSIFICATION	1.968740803089405E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999989866921485	WITHOUT_CLASSIFICATION	1.0133078515372977E-6	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999753398208429	WITHOUT_CLASSIFICATION	2.4660179157128312E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999333874413703	WITHOUT_CLASSIFICATION	6.661255862971172E-5	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999268052881423	WITHOUT_CLASSIFICATION	7.319471185776978E-5	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999059848643739	WITHOUT_CLASSIFICATION	9.401513562606905E-5	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999990432546028	WITHOUT_CLASSIFICATION	9.567453972408412E-7	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9997346430938472	WITHOUT_CLASSIFICATION	2.653569061528509E-4	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999449338266908	WITHOUT_CLASSIFICATION	5.5066173309149723E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999850475104644	WITHOUT_CLASSIFICATION	1.4952489535661767E-5	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998922582568974	WITHOUT_CLASSIFICATION	1.0774174310259515E-4	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999289372928203	WITHOUT_CLASSIFICATION	7.106270717980228E-5	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999491964325289	WITHOUT_CLASSIFICATION	5.0803567470999554E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999417459375617	WITHOUT_CLASSIFICATION	5.825406243828765E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9996743183920683	WITHOUT_CLASSIFICATION	3.2568160793167156E-4	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9995462086769993	WITHOUT_CLASSIFICATION	4.537913230006772E-4	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999191257831527	WITHOUT_CLASSIFICATION	8.08742168473418E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9998389147033491	WITHOUT_CLASSIFICATION	1.6108529665097697E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999976958987913	WITHOUT_CLASSIFICATION	2.304101208767239E-6	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999191257831527	WITHOUT_CLASSIFICATION	8.08742168473418E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999879262973591	WITHOUT_CLASSIFICATION	1.2073702640890532E-5	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999913748661163	WITHOUT_CLASSIFICATION	8.62513388359786E-6	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9996193491265802	WITHOUT_CLASSIFICATION	3.8065087341974794E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997195223146202	WITHOUT_CLASSIFICATION	2.804776853797952E-4	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9997964508871936	WITHOUT_CLASSIFICATION	2.0354911280640644E-4	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999975099089109	WITHOUT_CLASSIFICATION	2.490091089100445E-6	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999371563421965	WITHOUT_CLASSIFICATION	6.28436578034485E-5	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999149800302669	WITHOUT_CLASSIFICATION	8.501996973310753E-5	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999892354901644	WITHOUT_CLASSIFICATION	1.0764509835607227E-4	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999990209666403	WITHOUT_CLASSIFICATION	9.790333597142845E-7	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999209125423629	WITHOUT_CLASSIFICATION	7.908745763708933E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9995778162133869	WITHOUT_CLASSIFICATION	4.2218378661306306E-4	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999689404823704	WITHOUT_CLASSIFICATION	3.105951762954632E-5	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9985328077582484	WITHOUT_CLASSIFICATION	0.001467192241751595	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999906274219432	WITHOUT_CLASSIFICATION	9.372578056797702E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9974770585087058	WITHOUT_CLASSIFICATION	0.002522941491294213	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999489997196975	WITHOUT_CLASSIFICATION	5.100028030251998E-5	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999581832687318	WITHOUT_CLASSIFICATION	4.1816731268159064E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999209658341283	WITHOUT_CLASSIFICATION	7.903416587175957E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9977069360996252	WITHOUT_CLASSIFICATION	0.002293063900374823	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999122795936413	WITHOUT_CLASSIFICATION	8.772040635871306E-5	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999786396633868	WITHOUT_CLASSIFICATION	2.136033661320677E-5	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999727848817845	WITHOUT_CLASSIFICATION	2.7215118215553794E-5	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9853801587030551	WITHOUT_CLASSIFICATION	0.014619841296944956	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.8064720682571888	WITHOUT_CLASSIFICATION	0.1935279317428112	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9992723804492308	WITHOUT_CLASSIFICATION	7.276195507691076E-4	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9976520850775071	WITHOUT_CLASSIFICATION	0.002347914922492806	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999372527586534	WITHOUT_CLASSIFICATION	6.274724134649418E-5	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999374955927741	WITHOUT_CLASSIFICATION	6.250440722590299E-5	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999348229480042	WITHOUT_CLASSIFICATION	6.517705199585435E-5	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997843458150638	WITHOUT_CLASSIFICATION	2.1565418493630072E-4	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999920382480615	WITHOUT_CLASSIFICATION	7.961751938420067E-6	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.997481121033658	WITHOUT_CLASSIFICATION	0.002518878966342025	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999881579635462	WITHOUT_CLASSIFICATION	1.184203645367143E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999996576520321	WITHOUT_CLASSIFICATION	3.423479679062778E-6	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999426525210565	WITHOUT_CLASSIFICATION	5.7347478943509E-5	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9885643593096045	WITHOUT_CLASSIFICATION	0.011435640690395484	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999845450103538	WITHOUT_CLASSIFICATION	1.54549896461717E-5	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999502717565579	WITHOUT_CLASSIFICATION	4.972824344206545E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999183649321756	WITHOUT_CLASSIFICATION	8.163506782437444E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999926454789123	WITHOUT_CLASSIFICATION	7.354521087689955E-6	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999236039011286	WITHOUT_CLASSIFICATION	7.639609887148484E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9986856630965463	WITHOUT_CLASSIFICATION	0.0013143369034537159	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999509929524485	WITHOUT_CLASSIFICATION	4.900704755151297E-5	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999755923016971	WITHOUT_CLASSIFICATION	2.440769830300984E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999163056339623	WITHOUT_CLASSIFICATION	8.369436603775812E-5	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999955191346405	WITHOUT_CLASSIFICATION	4.48086535954553E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999658440189982	WITHOUT_CLASSIFICATION	3.415598100182992E-5	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998042128774	WITHOUT_CLASSIFICATION	1.9578712273984662E-7	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999772629830209	WITHOUT_CLASSIFICATION	2.273701697906392E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999707153806381	WITHOUT_CLASSIFICATION	2.9284619362028213E-5	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999268199184339	WITHOUT_CLASSIFICATION	7.318008156613378E-5	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999461818959406	WITHOUT_CLASSIFICATION	5.3818104059380604E-5	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9995872482683646	WITHOUT_CLASSIFICATION	4.1275173163531233E-4	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9998796960221844	WITHOUT_CLASSIFICATION	1.2030397781561831E-4	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9995515003382573	WITHOUT_CLASSIFICATION	4.484996617426529E-4	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999958826204387	WITHOUT_CLASSIFICATION	4.117379561286406E-6	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9977396652043299	WITHOUT_CLASSIFICATION	0.0022603347956701328	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9952967994493622	WITHOUT_CLASSIFICATION	0.004703200550637803	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956682695512	WITHOUT_CLASSIFICATION	1.0433173044872267E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996143972722721	WITHOUT_CLASSIFICATION	3.856027277279133E-4	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999519642716088	WITHOUT_CLASSIFICATION	4.803572839124446E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999586800944454	WITHOUT_CLASSIFICATION	4.1319905554608074E-5	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999593022603342	WITHOUT_CLASSIFICATION	4.069773966574588E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999948143364223	WITHOUT_CLASSIFICATION	5.185663577614625E-6	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9961344992568975	WITHOUT_CLASSIFICATION	0.00386550074310265	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999135342781478	WITHOUT_CLASSIFICATION	8.646572185226986E-5	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998680314681347	WITHOUT_CLASSIFICATION	1.3196853186531903E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999135342781478	WITHOUT_CLASSIFICATION	8.646572185226986E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999554469011744	WITHOUT_CLASSIFICATION	4.455309882550612E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999927342537835	WITHOUT_CLASSIFICATION	7.265746216461346E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999806893801412	WITHOUT_CLASSIFICATION	1.931061985882689E-5	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999831298313024	WITHOUT_CLASSIFICATION	1.6870168697614447E-5	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999511569063296	WITHOUT_CLASSIFICATION	4.884309367030828E-5	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999550719652656	WITHOUT_CLASSIFICATION	4.492803473444246E-5	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999210037490763	WITHOUT_CLASSIFICATION	7.899625092363223E-5	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999430917281895	WITHOUT_CLASSIFICATION	5.690827181038208E-5	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9998361035442664	WITHOUT_CLASSIFICATION	1.6389645573369494E-4	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9149941200308712	WITHOUT_CLASSIFICATION	0.08500587996912876	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9996807478527451	WITHOUT_CLASSIFICATION	3.192521472548719E-4	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9985434437747965	WITHOUT_CLASSIFICATION	0.001456556225203422	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999694756398797	WITHOUT_CLASSIFICATION	3.052436012038743E-5	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999953655976512	WITHOUT_CLASSIFICATION	4.634402348769873E-6	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9540533226683672	WITHOUT_CLASSIFICATION	0.04594667733163279	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9991655945416957	WITHOUT_CLASSIFICATION	8.344054583042253E-4	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999928008085067	WITHOUT_CLASSIFICATION	7.199191493312373E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999928008085067	WITHOUT_CLASSIFICATION	7.199191493312373E-6	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999514218351548	WITHOUT_CLASSIFICATION	4.857816484525072E-5	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9998033525824563	WITHOUT_CLASSIFICATION	1.9664741754369029E-4	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999995593968616	WITHOUT_CLASSIFICATION	4.406031384165348E-7	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999952814944685	WITHOUT_CLASSIFICATION	4.71850553153036E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999903036010304	WITHOUT_CLASSIFICATION	9.696398969536192E-6	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999991219454736	WITHOUT_CLASSIFICATION	8.780545263607622E-7	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996766568223575	WITHOUT_CLASSIFICATION	3.233431776424576E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999969537476966	WITHOUT_CLASSIFICATION	3.0462523034902168E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9998199933969842	WITHOUT_CLASSIFICATION	1.800066030157114E-4	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999926319973398	WITHOUT_CLASSIFICATION	7.368002660152117E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999980581614383	WITHOUT_CLASSIFICATION	1.9418385617896268E-6	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9998965053519333	WITHOUT_CLASSIFICATION	1.034946480667331E-4	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998987201879854	WITHOUT_CLASSIFICATION	1.0127981201463148E-4	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999980481736396	WITHOUT_CLASSIFICATION	1.951826360400311E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999136183415226	WITHOUT_CLASSIFICATION	8.638165847739515E-4	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.99966128065454	WITHOUT_CLASSIFICATION	3.38719345460085E-4	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999978662814211	WITHOUT_CLASSIFICATION	2.133718578932546E-6	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9996400986413128	WITHOUT_CLASSIFICATION	3.5990135868721137E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9994527100438511	WITHOUT_CLASSIFICATION	5.472899561488343E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999972163001023	WITHOUT_CLASSIFICATION	2.783699897652438E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999934690350841	WITHOUT_CLASSIFICATION	6.5309649158510535E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9992809009727863	WITHOUT_CLASSIFICATION	7.190990272137633E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.998767843644859	WITHOUT_CLASSIFICATION	0.0012321563551409079	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998669416323692	WITHOUT_CLASSIFICATION	1.3305836763074816E-4	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999918084404803	WITHOUT_CLASSIFICATION	8.191559519750864E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999992656478913	WITHOUT_CLASSIFICATION	7.343521087730786E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999684980362934	WITHOUT_CLASSIFICATION	3.15019637066992E-5	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.998591227121549	WITHOUT_CLASSIFICATION	0.0014087728784509714	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999868598169706	WITHOUT_CLASSIFICATION	1.314018302936416E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999993340157473	WITHOUT_CLASSIFICATION	6.659842527754482E-7	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999818384601108	WITHOUT_CLASSIFICATION	1.8161539889178866E-5	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999965343582207	WITHOUT_CLASSIFICATION	3.465641779345983E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998723065515056	WITHOUT_CLASSIFICATION	1.2769344849435064E-4	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9866740063617958	WITHOUT_CLASSIFICATION	0.013325993638204104	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999478298151543	WITHOUT_CLASSIFICATION	5.2170184845752945E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999942237398063	WITHOUT_CLASSIFICATION	5.776260193645694E-6	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999829887231354	WITHOUT_CLASSIFICATION	1.7011276864573982E-5	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999964254421811	WITHOUT_CLASSIFICATION	3.574557818878743E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999990439635084	WITHOUT_CLASSIFICATION	9.560364916291138E-7	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9980760978202876	WITHOUT_CLASSIFICATION	0.0019239021797123367	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999760872330603	WITHOUT_CLASSIFICATION	2.3912766939682183E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998949238012564	WITHOUT_CLASSIFICATION	1.0507619874363034E-4	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9997352142247917	WITHOUT_CLASSIFICATION	2.6478577520828804E-4	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.8615325046249187	WITHOUT_CLASSIFICATION	0.13846749537508127	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9965907985427622	WITHOUT_CLASSIFICATION	0.0034092014572377105	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999491628909112	WITHOUT_CLASSIFICATION	5.083710908887945E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.999947765956908	WITHOUT_CLASSIFICATION	5.223404309199043E-5	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999423048765	WITHOUT_CLASSIFICATION	5.769512344781261E-8	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998826438749738	WITHOUT_CLASSIFICATION	1.173561250262179E-4	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999808280188716	WITHOUT_CLASSIFICATION	1.9171981128426912E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998949238012564	WITHOUT_CLASSIFICATION	1.0507619874363034E-4	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999992228440614	WITHOUT_CLASSIFICATION	7.77155938598307E-6	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999868827487978	WITHOUT_CLASSIFICATION	1.3117251202265162E-5	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9910003550343158	WITHOUT_CLASSIFICATION	0.008999644965684134	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999823287952803	WITHOUT_CLASSIFICATION	1.767120471977495E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999193706282269	WITHOUT_CLASSIFICATION	8.062937177315709E-5	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999193706282269	WITHOUT_CLASSIFICATION	8.062937177315709E-5	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999996976303175	WITHOUT_CLASSIFICATION	3.0236968251869935E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999987757730786	WITHOUT_CLASSIFICATION	1.2242269213622756E-6	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999999358020011	WITHOUT_CLASSIFICATION	6.419799889588363E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9997835206425995	WITHOUT_CLASSIFICATION	2.1647935740063166E-4	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9995628397602927	WITHOUT_CLASSIFICATION	4.371602397072838E-4	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9994951825108253	WITHOUT_CLASSIFICATION	5.04817489174735E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999389480690182	WITHOUT_CLASSIFICATION	6.105193098184313E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999683767122458	WITHOUT_CLASSIFICATION	3.162328775421641E-5	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999926068885564	WITHOUT_CLASSIFICATION	7.393111443660517E-6	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998810150499277	WITHOUT_CLASSIFICATION	1.1898495007223278E-4	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999501985170537	WITHOUT_CLASSIFICATION	4.9801482946269476E-5	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999984907862042	WITHOUT_CLASSIFICATION	1.5092137957582286E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999216848839066	WITHOUT_CLASSIFICATION	7.83151160932982E-5	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999943353752929	WITHOUT_CLASSIFICATION	5.664624707102056E-5	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999118937357041	WITHOUT_CLASSIFICATION	8.810626429585167E-5	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995909923241385	WITHOUT_CLASSIFICATION	4.0900767586147277E-4	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9793730090272327	WITHOUT_CLASSIFICATION	0.020626990972767396	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.99999804461745	WITHOUT_CLASSIFICATION	1.9553825499263013E-6	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999510072974491	WITHOUT_CLASSIFICATION	4.899270255088219E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999541698594311	WITHOUT_CLASSIFICATION	4.58301405689414E-5	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9998924382198375	WITHOUT_CLASSIFICATION	1.075617801624849E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997843072948251	WITHOUT_CLASSIFICATION	2.1569270517488647E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999980703684637	WITHOUT_CLASSIFICATION	1.9296315363943868E-6	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9959301295701637	WITHOUT_CLASSIFICATION	0.004069870429836331	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9988364420085999	WITHOUT_CLASSIFICATION	0.0011635579914001106	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999518044784134	WITHOUT_CLASSIFICATION	4.819552158659744E-5	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999808792011422	WITHOUT_CLASSIFICATION	1.912079885778765E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998788839915741	WITHOUT_CLASSIFICATION	1.2111600842594855E-4	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999999959747832	WITHOUT_CLASSIFICATION	4.0252168053734165E-8	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999702774439665	WITHOUT_CLASSIFICATION	2.972255603342866E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999981492967807	WITHOUT_CLASSIFICATION	1.8507032192561998E-6	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999997470050041	WITHOUT_CLASSIFICATION	2.529949958989272E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9998449444469358	WITHOUT_CLASSIFICATION	1.5505555306424615E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999981442751772	WITHOUT_CLASSIFICATION	1.855724822723064E-6	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9975612507513724	WITHOUT_CLASSIFICATION	0.0024387492486276354	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999702774439665	WITHOUT_CLASSIFICATION	2.972255603342866E-5	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999956911695114	WITHOUT_CLASSIFICATION	4.30883048860628E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999981442751772	WITHOUT_CLASSIFICATION	1.855724822723064E-6	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999956448411607	WITHOUT_CLASSIFICATION	4.355158839361165E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9980448078220102	WITHOUT_CLASSIFICATION	0.0019551921779897207	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999980581614383	WITHOUT_CLASSIFICATION	1.9418385617896268E-6	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999659374608809	WITHOUT_CLASSIFICATION	3.4062539119087535E-5	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998644503258048	WITHOUT_CLASSIFICATION	1.3554967419514364E-4	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999986899156859	WITHOUT_CLASSIFICATION	1.3100843141391559E-6	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999838132385458	WITHOUT_CLASSIFICATION	1.618676145420598E-5	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999215474458	WITHOUT_CLASSIFICATION	7.845255419746066E-7	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999953137960643	WITHOUT_CLASSIFICATION	4.686203935572584E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999372813613046	WITHOUT_CLASSIFICATION	6.27186386953998E-5	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999878414139151	WITHOUT_CLASSIFICATION	1.2158586085047079E-5	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999926706363361	WITHOUT_CLASSIFICATION	7.329363663825945E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999194127266207	WITHOUT_CLASSIFICATION	8.058727337934422E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999828173671625	WITHOUT_CLASSIFICATION	1.7182632837512793E-5	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9996725398256251	WITHOUT_CLASSIFICATION	3.2746017437498734E-4	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999041848734072	WITHOUT_CLASSIFICATION	9.58151265928535E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997825412426257	WITHOUT_CLASSIFICATION	2.1745875737425334E-4	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999393783011954	WITHOUT_CLASSIFICATION	6.0621698804601344E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998579659388865	WITHOUT_CLASSIFICATION	1.4203406111350453E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999846546452016	WITHOUT_CLASSIFICATION	1.5345354798458377E-5	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999883943298898	WITHOUT_CLASSIFICATION	1.160567011018107E-5	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999075099732264	WITHOUT_CLASSIFICATION	9.249002677350242E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999866741091339	WITHOUT_CLASSIFICATION	1.3325890866087402E-5	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999995390382889	WITHOUT_CLASSIFICATION	4.609617110975064E-6	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999499915438299	WITHOUT_CLASSIFICATION	5.000845617014569E-5	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9998979363773489	WITHOUT_CLASSIFICATION	1.0206362265111872E-4	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999687790016172	WITHOUT_CLASSIFICATION	3.122099838279614E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980074055049669	WITHOUT_CLASSIFICATION	0.0019925944950330045	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998574765476113	WITHOUT_CLASSIFICATION	0.0014252345238869924	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999642388739218	WITHOUT_CLASSIFICATION	3.5761126078197097E-4	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9995958861616947	WITHOUT_CLASSIFICATION	4.041138383053445E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999562281390525	WITHOUT_CLASSIFICATION	4.3771860947450815E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999950462827228	WITHOUT_CLASSIFICATION	4.953717277194579E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999950462827228	WITHOUT_CLASSIFICATION	4.953717277194579E-5	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999207748592459	WITHOUT_CLASSIFICATION	7.922514075408174E-5	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999294828922909	WITHOUT_CLASSIFICATION	7.051710770913221E-5	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999594897229185	WITHOUT_CLASSIFICATION	4.051027708152874E-5	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999669695652009	WITHOUT_CLASSIFICATION	3.303043479907652E-5	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9995114045646399	WITHOUT_CLASSIFICATION	4.885954353601047E-4	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999504819671117	WITHOUT_CLASSIFICATION	4.951803288830189E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999997896840244	WITHOUT_CLASSIFICATION	2.1031597559117647E-6	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999986985907584	WITHOUT_CLASSIFICATION	1.3014092416121284E-5	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999433735630598	WITHOUT_CLASSIFICATION	5.6626436940186326E-5	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999947835341804	WITHOUT_CLASSIFICATION	5.2164658196887154E-6	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999678048985706	WITHOUT_CLASSIFICATION	3.219510142929921E-5	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999878477793787	WITHOUT_CLASSIFICATION	1.2152220621331029E-5	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999948135406419	WITHOUT_CLASSIFICATION	5.186459358080247E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999950462827228	WITHOUT_CLASSIFICATION	4.953717277194579E-5	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998957021030801	WITHOUT_CLASSIFICATION	1.0429789691990985E-4	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999435027559396	WITHOUT_CLASSIFICATION	5.6497244060467E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999992698231473	WITHOUT_CLASSIFICATION	7.3017685269172915E-6	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999043867479873	WITHOUT_CLASSIFICATION	9.561325201263844E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999946922545837	WITHOUT_CLASSIFICATION	5.307745416392053E-6	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9997844712526067	WITHOUT_CLASSIFICATION	2.1552874739328202E-4	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999332180091296	WITHOUT_CLASSIFICATION	6.678199087048558E-5	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999656194774094	WITHOUT_CLASSIFICATION	3.4380522590674916E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999860916979573	WITHOUT_CLASSIFICATION	1.3908302042776718E-5	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999568558737142	WITHOUT_CLASSIFICATION	4.3144126285744224E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9997910782550872	WITHOUT_CLASSIFICATION	2.0892174491277888E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980074055049669	WITHOUT_CLASSIFICATION	0.0019925944950330045	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999950462827228	WITHOUT_CLASSIFICATION	4.953717277194579E-5	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999825836126841	WITHOUT_CLASSIFICATION	1.7416387315885284E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9986810627253556	WITHOUT_CLASSIFICATION	0.0013189372746442885	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999632553549495	WITHOUT_CLASSIFICATION	3.6744645050469676E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994748849183128	WITHOUT_CLASSIFICATION	5.251150816872515E-4	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999964171880154	WITHOUT_CLASSIFICATION	3.582811984627899E-6	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999106692672299	WITHOUT_CLASSIFICATION	8.933073277004932E-5	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996255572664234	WITHOUT_CLASSIFICATION	3.7444273357662317E-4	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999996795613764	WITHOUT_CLASSIFICATION	3.2043862373216925E-7	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999944536262871	WITHOUT_CLASSIFICATION	5.546373712890344E-6	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999631925399437	WITHOUT_CLASSIFICATION	3.6807460056270276E-5	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995977173771504	WITHOUT_CLASSIFICATION	4.022826228495801E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999868598169706	WITHOUT_CLASSIFICATION	1.314018302936416E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999768661884303	WITHOUT_CLASSIFICATION	2.313381156967935E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999512036610415	WITHOUT_CLASSIFICATION	4.8796338958453636E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999554469011744	WITHOUT_CLASSIFICATION	4.455309882550612E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999908207178783	WITHOUT_CLASSIFICATION	9.179282121812245E-6	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999975555081758	WITHOUT_CLASSIFICATION	2.444491824142856E-6	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999859854752738	WITHOUT_CLASSIFICATION	1.4014524726158444E-5	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999642290447824	WITHOUT_CLASSIFICATION	3.57709552175968E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999570792055428	WITHOUT_CLASSIFICATION	4.2920794457213E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999217795282896	WITHOUT_CLASSIFICATION	7.822047171030555E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999217795282896	WITHOUT_CLASSIFICATION	7.822047171030555E-5	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9996624475688627	WITHOUT_CLASSIFICATION	3.375524311373709E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999838863215748	WITHOUT_CLASSIFICATION	1.611367842530421E-5	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999718146161106	WITHOUT_CLASSIFICATION	2.818538388927698E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999707956094678	WITHOUT_CLASSIFICATION	2.9204390532191035E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999800873507397	WITHOUT_CLASSIFICATION	1.9912649260347198E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999927338107328	WITHOUT_CLASSIFICATION	7.266189267109855E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999621305848335	WITHOUT_CLASSIFICATION	3.78694151664981E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9979636333607176	WITHOUT_CLASSIFICATION	0.0020363666392823254	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9979636333607176	WITHOUT_CLASSIFICATION	0.0020363666392823254	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.7304022536536912	WITHOUT_CLASSIFICATION	0.269597746346309	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999503274360545	WITHOUT_CLASSIFICATION	4.967256394551484E-5	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999958635879816	WITHOUT_CLASSIFICATION	4.1364120183175265E-6	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999399931107144	WITHOUT_CLASSIFICATION	6.000688928562832E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999399931107144	WITHOUT_CLASSIFICATION	6.000688928562832E-5	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999399931107144	WITHOUT_CLASSIFICATION	6.000688928562832E-5	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999482624687597	WITHOUT_CLASSIFICATION	5.173753124026693E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999937416945628	WITHOUT_CLASSIFICATION	6.258305437236697E-6	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.8932923467286523	WITHOUT_CLASSIFICATION	0.10670765327134772	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999669502034301	WITHOUT_CLASSIFICATION	3.3049796569939074E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999995981346905	WITHOUT_CLASSIFICATION	4.018653094950712E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999950462827228	WITHOUT_CLASSIFICATION	4.953717277194579E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999950462827228	WITHOUT_CLASSIFICATION	4.953717277194579E-5	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9992857679422197	WITHOUT_CLASSIFICATION	7.142320577801917E-4	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999883727639296	WITHOUT_CLASSIFICATION	1.1627236070449924E-5	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9989641140580068	WITHOUT_CLASSIFICATION	0.0010358859419931624	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998772347593818	WITHOUT_CLASSIFICATION	1.2276524061818913E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999981729194333	WITHOUT_CLASSIFICATION	1.8270805666972935E-5	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.999929356091311	WITHOUT_CLASSIFICATION	7.064390868909894E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999989664476848	WITHOUT_CLASSIFICATION	1.033552315201773E-5	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999697546196612	WITHOUT_CLASSIFICATION	3.0245380338727146E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999960031642444	WITHOUT_CLASSIFICATION	3.99683575559575E-5	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999996469757111	WITHOUT_CLASSIFICATION	3.5302428889728546E-7	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999857472258262	WITHOUT_CLASSIFICATION	1.4252774173786725E-5	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999892443517767	WITHOUT_CLASSIFICATION	1.0755648223304305E-4	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999555207366313	WITHOUT_CLASSIFICATION	4.447926336875925E-5	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999555207366313	WITHOUT_CLASSIFICATION	4.447926336875925E-5	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999555207366313	WITHOUT_CLASSIFICATION	4.447926336875925E-5	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999555207366313	WITHOUT_CLASSIFICATION	4.447926336875925E-5	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999555207366313	WITHOUT_CLASSIFICATION	4.447926336875925E-5	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999275775332158	WITHOUT_CLASSIFICATION	7.242246678426759E-5	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999275775332158	WITHOUT_CLASSIFICATION	7.242246678426759E-5	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999275775332158	WITHOUT_CLASSIFICATION	7.242246678426759E-5	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999275775332158	WITHOUT_CLASSIFICATION	7.242246678426759E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9994269739732763	WITHOUT_CLASSIFICATION	5.730260267236772E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999217795282896	WITHOUT_CLASSIFICATION	7.822047171030555E-5	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9997376318176822	WITHOUT_CLASSIFICATION	2.6236818231787224E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999275775332158	WITHOUT_CLASSIFICATION	7.242246678426759E-5	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9975934000821438	WITHOUT_CLASSIFICATION	0.0024065999178561224	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999693660281125	WITHOUT_CLASSIFICATION	3.063397188758364E-5	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999646965371144	WITHOUT_CLASSIFICATION	3.530346288555729E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999736141331144	WITHOUT_CLASSIFICATION	2.6385866885647852E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999459331226	WITHOUT_CLASSIFICATION	5.4066877438115326E-8	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999186136048452	WITHOUT_CLASSIFICATION	8.138639515478397E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997580513854839	WITHOUT_CLASSIFICATION	2.4194861451602942E-4	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999959123643559	WITHOUT_CLASSIFICATION	4.087635644100781E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999840855528296	WITHOUT_CLASSIFICATION	1.5914447170474715E-5	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999998320025683	WITHOUT_CLASSIFICATION	1.6799743175857647E-7	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999972517545207	WITHOUT_CLASSIFICATION	2.7482454792291886E-6	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999769109321167	WITHOUT_CLASSIFICATION	2.3089067883295016E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999200684233582	WITHOUT_CLASSIFICATION	7.993157664172926E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.999739755660111	WITHOUT_CLASSIFICATION	2.6024433988900726E-4	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9802995038753144	WITHOUT_CLASSIFICATION	0.019700496124685593	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999930642363531	WITHOUT_CLASSIFICATION	6.93576364677198E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999932282157731	WITHOUT_CLASSIFICATION	6.771784226820241E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.99998591939703	WITHOUT_CLASSIFICATION	1.4080602970029113E-5	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.99998591939703	WITHOUT_CLASSIFICATION	1.4080602970029113E-5	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999717197309902	WITHOUT_CLASSIFICATION	2.828026900990881E-5	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999983306040914	WITHOUT_CLASSIFICATION	1.6693959086520333E-6	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999628761321177	WITHOUT_CLASSIFICATION	3.712386788228608E-5	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999173825479702	WITHOUT_CLASSIFICATION	8.261745202980771E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999957216289749	WITHOUT_CLASSIFICATION	4.278371025103225E-5	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999332637822466	WITHOUT_CLASSIFICATION	6.67362177534483E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999373230467271	WITHOUT_CLASSIFICATION	6.267695327282197E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999506688024873	WITHOUT_CLASSIFICATION	4.93311975126194E-5	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999623630373742	WITHOUT_CLASSIFICATION	3.763696262570034E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999985115934108	WITHOUT_CLASSIFICATION	1.4884065892257426E-6	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999367931262254	WITHOUT_CLASSIFICATION	6.320687377457853E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999868598169706	WITHOUT_CLASSIFICATION	1.314018302936416E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999940100840128	WITHOUT_CLASSIFICATION	5.989915987216225E-6	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999973321001518	WITHOUT_CLASSIFICATION	2.667899848098146E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999838663425973	WITHOUT_CLASSIFICATION	1.6133657402755208E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999659402176772	WITHOUT_CLASSIFICATION	3.405978232282771E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997697150254	WITHOUT_CLASSIFICATION	2.3028497467324266E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997697150254	WITHOUT_CLASSIFICATION	2.3028497467324266E-7	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996632818606522	WITHOUT_CLASSIFICATION	3.367181393477741E-4	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999999889169628	WITHOUT_CLASSIFICATION	1.1083037059878479E-8	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999833551388886	WITHOUT_CLASSIFICATION	1.6644861111417295E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999896658759125	WITHOUT_CLASSIFICATION	1.0334124087415337E-5	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999782270872728	WITHOUT_CLASSIFICATION	2.1772912727261512E-5	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999978360559434	WITHOUT_CLASSIFICATION	2.1639440565963686E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998598047885425	WITHOUT_CLASSIFICATION	1.4019521145737556E-4	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999739175143706	WITHOUT_CLASSIFICATION	2.608248562952185E-5	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999488007740259	WITHOUT_CLASSIFICATION	5.1199225974031644E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999998943506446	WITHOUT_CLASSIFICATION	1.0564935528425205E-7	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999450073307175	WITHOUT_CLASSIFICATION	5.4992669282471076E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999739175143706	WITHOUT_CLASSIFICATION	2.608248562952185E-5	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998978720552865	WITHOUT_CLASSIFICATION	1.0212794471351119E-4	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9991702727693428	WITHOUT_CLASSIFICATION	8.29727230657168E-4	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999777207739514	WITHOUT_CLASSIFICATION	2.22792260486338E-5	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999425574131107	WITHOUT_CLASSIFICATION	5.744258688936155E-5	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999927170422	WITHOUT_CLASSIFICATION	7.282957805750072E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999742606363989	WITHOUT_CLASSIFICATION	2.5739363601019145E-5	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.998477635029597	WITHOUT_CLASSIFICATION	0.0015223649704029685	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999416037415949	WITHOUT_CLASSIFICATION	5.839625840508479E-5	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999896502637177	WITHOUT_CLASSIFICATION	1.0349736282258505E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999979624384523	WITHOUT_CLASSIFICATION	2.037561547700002E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998184088712441	WITHOUT_CLASSIFICATION	1.8159112875598354E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999806392518525	WITHOUT_CLASSIFICATION	1.9360748147360298E-5	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997597568134557	WITHOUT_CLASSIFICATION	2.4024318654419669E-4	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9984364365801498	WITHOUT_CLASSIFICATION	0.0015635634198501141	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998140109329982	WITHOUT_CLASSIFICATION	1.8598906700172785E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999700378872475	WITHOUT_CLASSIFICATION	2.9962112752641268E-5	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999661216557819	WITHOUT_CLASSIFICATION	3.387834421810843E-5	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9965924039380174	WITHOUT_CLASSIFICATION	0.0034075960619826175	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9965924039380174	WITHOUT_CLASSIFICATION	0.0034075960619826175	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.998477635029597	WITHOUT_CLASSIFICATION	0.0015223649704029685	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9790098828301814	WITHOUT_CLASSIFICATION	0.020990117169818617	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998983951279334	WITHOUT_CLASSIFICATION	1.0160487206648219E-4	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998300948037006	WITHOUT_CLASSIFICATION	1.6990519629949102E-4	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999563868065756	WITHOUT_CLASSIFICATION	4.361319342435244E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999857373693315	WITHOUT_CLASSIFICATION	1.426263066844726E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999840602705278	WITHOUT_CLASSIFICATION	1.5939729472148872E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999879321192973	WITHOUT_CLASSIFICATION	1.2067880702742118E-5	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9994531541874235	WITHOUT_CLASSIFICATION	5.468458125764847E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999938609688321	WITHOUT_CLASSIFICATION	6.139031167894877E-5	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999665184742549	WITHOUT_CLASSIFICATION	3.3481525745180335E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999935946875429	WITHOUT_CLASSIFICATION	6.405312457135882E-6	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999479077572313	WITHOUT_CLASSIFICATION	5.209224276871136E-5	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997397585573551	WITHOUT_CLASSIFICATION	2.602414426449317E-4	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999987990421484	WITHOUT_CLASSIFICATION	1.200957851505979E-6	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999085207911829	WITHOUT_CLASSIFICATION	9.147920881711592E-5	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999961982318111	WITHOUT_CLASSIFICATION	3.8017681889961522E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999344152881	WITHOUT_CLASSIFICATION	6.558471190893365E-8	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999991956477193	WITHOUT_CLASSIFICATION	8.043522806962914E-6	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999153092930086	WITHOUT_CLASSIFICATION	8.469070699132198E-5	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999342086365898	WITHOUT_CLASSIFICATION	6.579136341024296E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9995129985458961	WITHOUT_CLASSIFICATION	4.870014541039498E-4	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999959318536397	WITHOUT_CLASSIFICATION	4.068146360331173E-6	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9995386643884591	WITHOUT_CLASSIFICATION	4.613356115409201E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999972449958139	WITHOUT_CLASSIFICATION	2.755004186086008E-6	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999908886286771	WITHOUT_CLASSIFICATION	9.111371322868715E-6	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999718992804218	WITHOUT_CLASSIFICATION	2.810071957808524E-5	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999943945245205	WITHOUT_CLASSIFICATION	5.605475479469092E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999961473135152	WITHOUT_CLASSIFICATION	3.852686484806654E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999929660937675	WITHOUT_CLASSIFICATION	7.033906232511593E-6	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998839822107896	WITHOUT_CLASSIFICATION	1.1601778921041052E-4	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999085207911829	WITHOUT_CLASSIFICATION	9.147920881711592E-5	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999878788905289	WITHOUT_CLASSIFICATION	1.212110947105481E-5	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999996376128035	WITHOUT_CLASSIFICATION	3.623871963994783E-7	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.999989311305828	WITHOUT_CLASSIFICATION	1.0688694171939208E-5	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999155399629777	WITHOUT_CLASSIFICATION	8.446003702228857E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9991768197620228	WITHOUT_CLASSIFICATION	8.23180237977247E-4	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999884022938654	WITHOUT_CLASSIFICATION	1.1597706134535551E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.999986943253274	WITHOUT_CLASSIFICATION	1.3056746726105295E-5	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999268743296416	WITHOUT_CLASSIFICATION	7.312567035837274E-5	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9949735157688996	WITHOUT_CLASSIFICATION	0.005026484231100355	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.998510291806263	WITHOUT_CLASSIFICATION	0.0014897081937369778	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999552960665834	WITHOUT_CLASSIFICATION	4.470393341665167E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999997692241285	WITHOUT_CLASSIFICATION	2.3077587165576058E-7	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997156345938502	WITHOUT_CLASSIFICATION	2.8436540614985416E-4	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999894964289473	WITHOUT_CLASSIFICATION	1.0503571052667734E-5	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999875938988904	WITHOUT_CLASSIFICATION	1.2406101109592856E-4	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9824105747996773	WITHOUT_CLASSIFICATION	0.017589425200322712	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997110275045	WITHOUT_CLASSIFICATION	2.8897249541018356E-7	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999978501051539	WITHOUT_CLASSIFICATION	2.149894846034895E-6	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.998255390008794	WITHOUT_CLASSIFICATION	0.0017446099912059084	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999904388529224	WITHOUT_CLASSIFICATION	9.561147077645827E-6	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999488007740259	WITHOUT_CLASSIFICATION	5.1199225974031644E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999987482392541	WITHOUT_CLASSIFICATION	1.2517607458908698E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999085207911829	WITHOUT_CLASSIFICATION	9.147920881711592E-5	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999644758055064	WITHOUT_CLASSIFICATION	3.552419449363603E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999884096161543	WITHOUT_CLASSIFICATION	1.1590383845660502E-5	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999900093102637	WITHOUT_CLASSIFICATION	9.990689736317458E-6	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999989810511294	WITHOUT_CLASSIFICATION	1.0189488705953677E-5	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999361917013793	WITHOUT_CLASSIFICATION	6.380829862073542E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999853228606541	WITHOUT_CLASSIFICATION	1.467713934587882E-5	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9960978239575601	WITHOUT_CLASSIFICATION	0.0039021760424400127	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999831600912672	WITHOUT_CLASSIFICATION	1.683990873277031E-5	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999559797880677	WITHOUT_CLASSIFICATION	4.402021193231803E-5	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999701131881563	WITHOUT_CLASSIFICATION	2.9886811843550676E-5	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9957091940353665	WITHOUT_CLASSIFICATION	0.004290805964633503	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999472175481243	WITHOUT_CLASSIFICATION	5.278245187560705E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.983070811585599	WITHOUT_CLASSIFICATION	0.016929188414401	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.983070811585599	WITHOUT_CLASSIFICATION	0.016929188414401	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999998071806278	WITHOUT_CLASSIFICATION	1.928193722653825E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9833812315890486	WITHOUT_CLASSIFICATION	0.016618768410951425	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9926795602399565	WITHOUT_CLASSIFICATION	0.00732043976004346	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999981156665999	WITHOUT_CLASSIFICATION	1.884333400089681E-6	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999991195806653	WITHOUT_CLASSIFICATION	8.804193346677482E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998941425152799	WITHOUT_CLASSIFICATION	1.0585748472009621E-4	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999984500168387	WITHOUT_CLASSIFICATION	1.5499831611866539E-6	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999965917624124	WITHOUT_CLASSIFICATION	3.408237587585219E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999837916300934	WITHOUT_CLASSIFICATION	1.6208369906612605E-5	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9998155955207992	WITHOUT_CLASSIFICATION	1.8440447920079603E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9998155955207992	WITHOUT_CLASSIFICATION	1.8440447920079603E-4	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9996997735049332	WITHOUT_CLASSIFICATION	3.00226495066839E-4	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999993526725592	WITHOUT_CLASSIFICATION	6.473274407193859E-7	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998318780440093	WITHOUT_CLASSIFICATION	1.6812195599079363E-4	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999994705396884	WITHOUT_CLASSIFICATION	5.294603115180543E-7	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9997565213274768	WITHOUT_CLASSIFICATION	2.434786725230231E-4	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998184239159787	WITHOUT_CLASSIFICATION	1.815760840212546E-4	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999991979989542	WITHOUT_CLASSIFICATION	8.020010458788351E-7	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999728041459149	WITHOUT_CLASSIFICATION	2.719585408506207E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999995388052979	WITHOUT_CLASSIFICATION	4.611947020727664E-7	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999996037917546	WITHOUT_CLASSIFICATION	3.962082454052105E-6	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999996357851933	WITHOUT_CLASSIFICATION	3.642148067183704E-6	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999833422983104	WITHOUT_CLASSIFICATION	1.665770168960723E-5	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999471728446875	WITHOUT_CLASSIFICATION	5.282715531257118E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999203423665594	WITHOUT_CLASSIFICATION	7.965763344073907E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999004726748844	WITHOUT_CLASSIFICATION	9.952732511573239E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999927550648744	WITHOUT_CLASSIFICATION	7.244935125599065E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999562147499531	WITHOUT_CLASSIFICATION	4.3785250046926505E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999667938455135	WITHOUT_CLASSIFICATION	3.3206154486488354E-5	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99999125636601	WITHOUT_CLASSIFICATION	8.743633989994262E-6	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.999992251182814	WITHOUT_CLASSIFICATION	7.74881718602246E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999701161903322	WITHOUT_CLASSIFICATION	2.9883809667778466E-5	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999756125852957	WITHOUT_CLASSIFICATION	2.4387414704428535E-5	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.999768618835427	WITHOUT_CLASSIFICATION	2.3138116457300525E-4	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998924382198375	WITHOUT_CLASSIFICATION	1.075617801624849E-4	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999927023060409	WITHOUT_CLASSIFICATION	7.297693959047137E-6	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999788335429811	WITHOUT_CLASSIFICATION	2.1166457018828096E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999100204935487	WITHOUT_CLASSIFICATION	8.997950645129842E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999682312990289	WITHOUT_CLASSIFICATION	3.176870097104561E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998412626828883	WITHOUT_CLASSIFICATION	1.587373171116349E-4	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982835026171498	WITHOUT_CLASSIFICATION	0.0017164973828502226	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999953143246395	WITHOUT_CLASSIFICATION	4.685675360483188E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999354113573771	WITHOUT_CLASSIFICATION	6.458864262292881E-5	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998708388129068	WITHOUT_CLASSIFICATION	1.2916118709322045E-4	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979069396669531	WITHOUT_CLASSIFICATION	0.0020930603330469155	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.5488527046054483	WITHOUT_CLASSIFICATION	0.4511472953945517	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999899172111448	WITHOUT_CLASSIFICATION	1.008278885520876E-5	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999996256136915	WITHOUT_CLASSIFICATION	3.743863085785395E-7	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999433906329144	WITHOUT_CLASSIFICATION	5.6609367085706395E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980466643679432	WITHOUT_CLASSIFICATION	0.0019533356320567932	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999617021100118	WITHOUT_CLASSIFICATION	3.8297889988088905E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999980346984886	WITHOUT_CLASSIFICATION	1.9653015113953708E-5	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999519112604754	WITHOUT_CLASSIFICATION	4.8088739524553104E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999512389205925	WITHOUT_CLASSIFICATION	4.87610794075034E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999922562986505	WITHOUT_CLASSIFICATION	7.743701349542269E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999926001172313	WITHOUT_CLASSIFICATION	7.399882768694464E-5	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9995686644636378	WITHOUT_CLASSIFICATION	4.3133553636214017E-4	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999412328535837	WITHOUT_CLASSIFICATION	5.876714641627705E-5	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999661737608654	WITHOUT_CLASSIFICATION	3.382623913461709E-5	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999689754940727	WITHOUT_CLASSIFICATION	3.1024505927295797E-4	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999999609056034	WITHOUT_CLASSIFICATION	3.9094396587968836E-7	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999767497104953	WITHOUT_CLASSIFICATION	2.3250289504745795E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999868162090943	WITHOUT_CLASSIFICATION	1.3183790905700775E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999981248244078	WITHOUT_CLASSIFICATION	1.8751755922598613E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999875669789027	WITHOUT_CLASSIFICATION	1.2433021097416209E-5	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999836466394332	WITHOUT_CLASSIFICATION	1.6353360566847634E-5	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999993855443213	WITHOUT_CLASSIFICATION	6.144556787080969E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996820434904895	WITHOUT_CLASSIFICATION	3.179565095104942E-4	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9995763623903491	WITHOUT_CLASSIFICATION	4.236376096509739E-4	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996820434904895	WITHOUT_CLASSIFICATION	3.179565095104942E-4	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999752754821167	WITHOUT_CLASSIFICATION	2.472451788327055E-5	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998855973507131	WITHOUT_CLASSIFICATION	1.144026492867726E-4	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999091104784422	WITHOUT_CLASSIFICATION	9.088952155780657E-4	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999411224784229	WITHOUT_CLASSIFICATION	5.88775215769862E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999315176818998	WITHOUT_CLASSIFICATION	6.848231810027309E-5	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999091104784422	WITHOUT_CLASSIFICATION	9.088952155780657E-4	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999944830015365	WITHOUT_CLASSIFICATION	5.516998463554435E-6	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998319822866307	WITHOUT_CLASSIFICATION	1.6801771336933026E-4	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999775079041213	WITHOUT_CLASSIFICATION	2.2492095878704635E-5	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9993820085071242	WITHOUT_CLASSIFICATION	6.1799149287577E-4	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999778757720976	WITHOUT_CLASSIFICATION	2.212422790229441E-5	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999995441317955	WITHOUT_CLASSIFICATION	4.558682044914318E-6	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999815058943022	WITHOUT_CLASSIFICATION	1.8494105697798038E-5	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.7914137259267896	IMPLEMENTATION	0.20858627407321048	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9995859633802926	WITHOUT_CLASSIFICATION	4.140366197073573E-4	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999821713754149	WITHOUT_CLASSIFICATION	1.782862458516713E-5	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999871980531682	WITHOUT_CLASSIFICATION	1.2801946831784548E-5	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999967125951827	WITHOUT_CLASSIFICATION	3.287404817310619E-5	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999996031514254	WITHOUT_CLASSIFICATION	3.968485745397726E-7	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999567324033094	WITHOUT_CLASSIFICATION	4.32675966905851E-5	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999558932449	WITHOUT_CLASSIFICATION	4.410675517054804E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998229448147563	WITHOUT_CLASSIFICATION	1.770551852436679E-4	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999653239051967	WITHOUT_CLASSIFICATION	3.467609480337667E-5	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999451842750045	WITHOUT_CLASSIFICATION	5.4815724995592304E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998165169761611	WITHOUT_CLASSIFICATION	1.8348302383892724E-4	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999856815656	WITHOUT_CLASSIFICATION	1.431843441005057E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999852600700282	WITHOUT_CLASSIFICATION	1.4739929971890662E-5	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999297897300364	WITHOUT_CLASSIFICATION	7.021026996362508E-5	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998439926157536	WITHOUT_CLASSIFICATION	1.5600738424642938E-4	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9951325162165933	WITHOUT_CLASSIFICATION	0.0048674837834067975	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999630461107464	WITHOUT_CLASSIFICATION	3.695388925361015E-5	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999339695736376	WITHOUT_CLASSIFICATION	6.603042636245655E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999998379661	WITHOUT_CLASSIFICATION	1.6203395174905508E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996640537808505	WITHOUT_CLASSIFICATION	3.359462191494467E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999750103799272	WITHOUT_CLASSIFICATION	2.4989620072815452E-5	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999582315062019	WITHOUT_CLASSIFICATION	4.1768493798096316E-5	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998439926157536	WITHOUT_CLASSIFICATION	1.5600738424642938E-4	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998436054009078	WITHOUT_CLASSIFICATION	1.563945990922474E-4	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999838865088572	WITHOUT_CLASSIFICATION	1.611349114280879E-5	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9998476700037428	WITHOUT_CLASSIFICATION	1.5232999625733635E-4	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9886561916299682	WITHOUT_CLASSIFICATION	0.011343808370031695	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.999999856815656	WITHOUT_CLASSIFICATION	1.431843441005057E-7	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999976393669299	WITHOUT_CLASSIFICATION	2.3606330701447205E-6	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999862718025497	WITHOUT_CLASSIFICATION	1.372819745015902E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999724427333783	WITHOUT_CLASSIFICATION	2.755726662175142E-5	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999323964667031	WITHOUT_CLASSIFICATION	6.760353329697902E-5	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999976276153311	WITHOUT_CLASSIFICATION	2.3723846690299864E-6	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999971164499246	WITHOUT_CLASSIFICATION	2.8835500754905728E-6	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999906002578113	WITHOUT_CLASSIFICATION	9.399742188803158E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999816490140458	WITHOUT_CLASSIFICATION	1.8350985954190328E-4	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999406633634407	WITHOUT_CLASSIFICATION	5.933663655929626E-5	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9998463586509834	WITHOUT_CLASSIFICATION	1.5364134901664614E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999964969425228	WITHOUT_CLASSIFICATION	3.5030574771865312E-6	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999930427170588	WITHOUT_CLASSIFICATION	6.9572829411667335E-6	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999897503425926	WITHOUT_CLASSIFICATION	1.0249657407316247E-5	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999345248960351	WITHOUT_CLASSIFICATION	6.547510396489329E-5	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999653314949772	WITHOUT_CLASSIFICATION	3.466850502263975E-5	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999943107035034	WITHOUT_CLASSIFICATION	5.6892964965614176E-6	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9749823541185252	WITHOUT_CLASSIFICATION	0.02501764588147481	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997118541726887	WITHOUT_CLASSIFICATION	2.88145827311209E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994460666410181	WITHOUT_CLASSIFICATION	5.539333589819907E-4	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999929879774879	WITHOUT_CLASSIFICATION	7.01202251218478E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974863489294318	WITHOUT_CLASSIFICATION	0.002513651070568206	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974863489294318	WITHOUT_CLASSIFICATION	0.002513651070568206	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999986280816878	WITHOUT_CLASSIFICATION	1.371918312184041E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974863489294318	WITHOUT_CLASSIFICATION	0.002513651070568206	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.9974863489294318	WITHOUT_CLASSIFICATION	0.002513651070568206	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9975449309047749	WITHOUT_CLASSIFICATION	0.002455069095225148	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999136761327521	WITHOUT_CLASSIFICATION	8.632386724792338E-5	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998971633708749	WITHOUT_CLASSIFICATION	1.0283662912507752E-4	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998971633708749	WITHOUT_CLASSIFICATION	1.0283662912507752E-4	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999286576319559	WITHOUT_CLASSIFICATION	7.13423680440786E-5	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9996846100327917	WITHOUT_CLASSIFICATION	3.153899672083141E-4	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998802142016957	WITHOUT_CLASSIFICATION	1.197857983043149E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999439142654	WITHOUT_CLASSIFICATION	5.60857346237672E-8	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999940247897212	WITHOUT_CLASSIFICATION	5.975210278796871E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998411286807722	WITHOUT_CLASSIFICATION	1.5887131922781502E-4	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998634858623544	WITHOUT_CLASSIFICATION	1.365141376456479E-4	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999810345499958	WITHOUT_CLASSIFICATION	1.8965450004331804E-5	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999036012431886	WITHOUT_CLASSIFICATION	9.639875681136346E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999912777964705	WITHOUT_CLASSIFICATION	8.72220352954591E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998982174803933	WITHOUT_CLASSIFICATION	1.0178251960664937E-4	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999751395326851	WITHOUT_CLASSIFICATION	2.4860467314804264E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999948143364223	WITHOUT_CLASSIFICATION	5.185663577614625E-6	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999810224678713	WITHOUT_CLASSIFICATION	1.8977532128643193E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999378843376835	WITHOUT_CLASSIFICATION	6.21156623164435E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998730235844603	WITHOUT_CLASSIFICATION	1.269764155396986E-4	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999364346340859	WITHOUT_CLASSIFICATION	6.356536591413232E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999196244037026	WITHOUT_CLASSIFICATION	8.037559629734303E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999948143364223	WITHOUT_CLASSIFICATION	5.185663577614625E-6	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999852600700282	WITHOUT_CLASSIFICATION	1.4739929971890662E-5	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999208841329752	WITHOUT_CLASSIFICATION	7.911586702482882E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999733025526231	WITHOUT_CLASSIFICATION	2.6697447376918353E-5	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998548054892518	WITHOUT_CLASSIFICATION	1.451945107482828E-4	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9996271775398574	WITHOUT_CLASSIFICATION	3.7282246014255836E-4	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999792460941916	WITHOUT_CLASSIFICATION	2.0753905808397442E-5	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9994806900974673	WITHOUT_CLASSIFICATION	5.193099025327492E-4	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999789851614119	WITHOUT_CLASSIFICATION	2.10148385881288E-5	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999668719838828	WITHOUT_CLASSIFICATION	3.312801611718581E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999979579631595	WITHOUT_CLASSIFICATION	2.0420368405262746E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.999987147999647	WITHOUT_CLASSIFICATION	1.2852000353061537E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999921290607007	WITHOUT_CLASSIFICATION	7.870939299285837E-6	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997918193082934	WITHOUT_CLASSIFICATION	2.0818069170657733E-4	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998082541597987	WITHOUT_CLASSIFICATION	1.9174584020121982E-4	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9941474140890676	WITHOUT_CLASSIFICATION	0.005852585910932386	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999960247410834	WITHOUT_CLASSIFICATION	3.97525891660594E-5	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9997742326307058	WITHOUT_CLASSIFICATION	2.257673692942859E-4	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9997782556989456	WITHOUT_CLASSIFICATION	2.217443010543469E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999839780392801	WITHOUT_CLASSIFICATION	1.6021960719918856E-5	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998595717035924	WITHOUT_CLASSIFICATION	1.4042829640767494E-4	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999988510868441	WITHOUT_CLASSIFICATION	1.1489131558961746E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9994597098727979	WITHOUT_CLASSIFICATION	5.40290127202209E-4	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999962090268121	WITHOUT_CLASSIFICATION	3.7909731878888307E-6	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999668719838828	WITHOUT_CLASSIFICATION	3.312801611718581E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9998803189489709	WITHOUT_CLASSIFICATION	1.196810510291585E-4	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999033738804373	WITHOUT_CLASSIFICATION	9.662611956281956E-5	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9989141895397075	WITHOUT_CLASSIFICATION	0.001085810460292539	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999702128629537	WITHOUT_CLASSIFICATION	2.9787137046301822E-5	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.999920678700489	WITHOUT_CLASSIFICATION	7.932129951102036E-5	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9998868489817322	WITHOUT_CLASSIFICATION	1.131510182679133E-4	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9990427487644673	WITHOUT_CLASSIFICATION	9.572512355327139E-4	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9998866331170829	WITHOUT_CLASSIFICATION	1.1336688291698034E-4	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9997752370705466	WITHOUT_CLASSIFICATION	2.2476292945346064E-4	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999961217026239	WITHOUT_CLASSIFICATION	3.878297376101003E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999696150497456	WITHOUT_CLASSIFICATION	3.0384950254379523E-5	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999994312769312	WITHOUT_CLASSIFICATION	5.68723068696148E-7	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999895186402933	WITHOUT_CLASSIFICATION	1.0481359706720387E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999835360358322	WITHOUT_CLASSIFICATION	1.6463964167774366E-5	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999982776259988	WITHOUT_CLASSIFICATION	1.722374001200312E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999891515450536	WITHOUT_CLASSIFICATION	1.0848454946436072E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999961217026239	WITHOUT_CLASSIFICATION	3.878297376101003E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999894599572423	WITHOUT_CLASSIFICATION	1.0540042757655563E-5	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999820623569217	WITHOUT_CLASSIFICATION	1.7937643078334932E-5	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999558425919363	WITHOUT_CLASSIFICATION	4.415740806372738E-5	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999823896206108	WITHOUT_CLASSIFICATION	1.761037938918873E-5	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.999949720293551	WITHOUT_CLASSIFICATION	5.027970644905579E-5	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9997187316509968	WITHOUT_CLASSIFICATION	2.8126834900324047E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999835360358322	WITHOUT_CLASSIFICATION	1.6463964167774366E-5	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999677761984541	WITHOUT_CLASSIFICATION	3.222380154590584E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999374425148391	WITHOUT_CLASSIFICATION	6.255748516096437E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998995940753198	WITHOUT_CLASSIFICATION	1.0040592468021666E-4	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993391786572484	WITHOUT_CLASSIFICATION	6.608213427515935E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993391786572484	WITHOUT_CLASSIFICATION	6.608213427515935E-4	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993391786572484	WITHOUT_CLASSIFICATION	6.608213427515935E-4	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999853069863321	WITHOUT_CLASSIFICATION	1.4693013667724633E-5	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999853069863321	WITHOUT_CLASSIFICATION	1.4693013667724633E-5	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999980471092085	WITHOUT_CLASSIFICATION	1.9528907914489064E-6	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999955421072627	WITHOUT_CLASSIFICATION	4.457892737326861E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999303797245903	WITHOUT_CLASSIFICATION	6.962027540968668E-5	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999078142370195	WITHOUT_CLASSIFICATION	9.21857629804824E-5	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9967184202979354	WITHOUT_CLASSIFICATION	0.0032815797020645837	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998925583896152	WITHOUT_CLASSIFICATION	1.0744161038483129E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999293032591492	WITHOUT_CLASSIFICATION	7.069674085079028E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999984371147866	WITHOUT_CLASSIFICATION	1.5628852133626463E-6	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999362004865807	WITHOUT_CLASSIFICATION	6.379951341923607E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998925583896152	WITHOUT_CLASSIFICATION	1.0744161038483129E-4	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999293032591492	WITHOUT_CLASSIFICATION	7.069674085079028E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999990865236081	WITHOUT_CLASSIFICATION	9.13476391958311E-7	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999854399914491	WITHOUT_CLASSIFICATION	1.4560008550975115E-5	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999970803341495	WITHOUT_CLASSIFICATION	2.9196658504398953E-6	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999996439691353	WITHOUT_CLASSIFICATION	3.560308647839618E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999492820197069	WITHOUT_CLASSIFICATION	5.0717980293227604E-5	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999840392447573	WITHOUT_CLASSIFICATION	1.5960755242685834E-5	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999471988575055	WITHOUT_CLASSIFICATION	5.280114249457598E-5	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999256138711344	WITHOUT_CLASSIFICATION	7.438612886557782E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999435900051179	WITHOUT_CLASSIFICATION	5.6409994881994544E-5	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997990159331457	WITHOUT_CLASSIFICATION	2.009840668544348E-4	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999837293871465	WITHOUT_CLASSIFICATION	1.6270612853440022E-5	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999903808577202	WITHOUT_CLASSIFICATION	9.619142279782752E-6	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999716676988494	WITHOUT_CLASSIFICATION	2.8332301150624463E-5	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999936498739529	WITHOUT_CLASSIFICATION	6.350126047091446E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999194127266207	WITHOUT_CLASSIFICATION	8.058727337934422E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999686072917138	WITHOUT_CLASSIFICATION	3.139270828615576E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9995864809439111	WITHOUT_CLASSIFICATION	4.135190560888745E-4	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999917455395303	WITHOUT_CLASSIFICATION	8.254460469652621E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999616749717799	WITHOUT_CLASSIFICATION	3.832502822014721E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9977066466435249	WITHOUT_CLASSIFICATION	0.0022933533564750094	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999454797933948	WITHOUT_CLASSIFICATION	5.452020660520877E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999907978453856	WITHOUT_CLASSIFICATION	9.20215461444905E-6	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9797902857407079	WITHOUT_CLASSIFICATION	0.02020971425929214	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998941611257692	WITHOUT_CLASSIFICATION	1.0583887423077044E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999984793262673	WITHOUT_CLASSIFICATION	1.5206737326660558E-6	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999919372603023	WITHOUT_CLASSIFICATION	8.062739697705684E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998753992600813	WITHOUT_CLASSIFICATION	1.24600739918837E-4	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999449338266908	WITHOUT_CLASSIFICATION	5.5066173309149723E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999449338266908	WITHOUT_CLASSIFICATION	5.5066173309149723E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.99996587559197	WITHOUT_CLASSIFICATION	3.412440802989123E-5	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999039896527133	WITHOUT_CLASSIFICATION	9.601034728676103E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9972372896237512	WITHOUT_CLASSIFICATION	0.0027627103762487347	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999868598169706	WITHOUT_CLASSIFICATION	1.314018302936416E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9988648478745245	WITHOUT_CLASSIFICATION	0.0011351521254755897	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999983320061372	WITHOUT_CLASSIFICATION	1.6679938628017488E-6	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999748292582131	WITHOUT_CLASSIFICATION	2.517074178695322E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999468053176089	WITHOUT_CLASSIFICATION	5.3194682391042455E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9996743183920683	WITHOUT_CLASSIFICATION	3.2568160793167156E-4	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9960830723048311	WITHOUT_CLASSIFICATION	0.003916927695168989	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998466963252237	WITHOUT_CLASSIFICATION	1.5330367477630984E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999668867403176	WITHOUT_CLASSIFICATION	3.3113259682469795E-5	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999979064407698	WITHOUT_CLASSIFICATION	2.093559230079194E-6	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999997290652428	WITHOUT_CLASSIFICATION	2.7093475714726203E-7	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9974165043747419	WITHOUT_CLASSIFICATION	0.002583495625258016	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999779862707472	WITHOUT_CLASSIFICATION	2.201372925278568E-5	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997960474327625	WITHOUT_CLASSIFICATION	2.0395256723753692E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999668867403176	WITHOUT_CLASSIFICATION	3.3113259682469795E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999668867403176	WITHOUT_CLASSIFICATION	3.3113259682469795E-5	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999989376229803	WITHOUT_CLASSIFICATION	1.0623770197015427E-6	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999858235182836	WITHOUT_CLASSIFICATION	1.4176481716401834E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9993406240934152	WITHOUT_CLASSIFICATION	6.593759065848296E-4	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999916727324251	WITHOUT_CLASSIFICATION	8.327267574882009E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999200684233582	WITHOUT_CLASSIFICATION	7.993157664172926E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9995864809439111	WITHOUT_CLASSIFICATION	4.135190560888745E-4	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997282671875308	WITHOUT_CLASSIFICATION	2.717328124692408E-4	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999587740952103	WITHOUT_CLASSIFICATION	4.1225904789682934E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999467324174629	WITHOUT_CLASSIFICATION	5.326758253713627E-5	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995665226689061	WITHOUT_CLASSIFICATION	4.3347733109390493E-4	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999989154204889	WITHOUT_CLASSIFICATION	1.084579511047379E-6	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239036683407	WITHOUT_CLASSIFICATION	7.609633165920602E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999491597924661	WITHOUT_CLASSIFICATION	5.0840207533851074E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999491597924661	WITHOUT_CLASSIFICATION	5.0840207533851074E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999491597924661	WITHOUT_CLASSIFICATION	5.0840207533851074E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999491597924661	WITHOUT_CLASSIFICATION	5.0840207533851074E-5	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999912378839486	WITHOUT_CLASSIFICATION	8.76211605139419E-5	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999881042762012	WITHOUT_CLASSIFICATION	1.189572379874905E-5	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998929836602216	WITHOUT_CLASSIFICATION	1.0701633977837681E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9967995870832331	WITHOUT_CLASSIFICATION	0.003200412916766819	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999883836242107	WITHOUT_CLASSIFICATION	1.1616375789186205E-5	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999026329506031	WITHOUT_CLASSIFICATION	9.736704939696615E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998106045412908	WITHOUT_CLASSIFICATION	1.8939545870916904E-4	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999400136554921	WITHOUT_CLASSIFICATION	5.998634450786177E-5	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999895804980052	WITHOUT_CLASSIFICATION	1.0419501994814073E-5	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994350987587	WITHOUT_CLASSIFICATION	5.649012414155646E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999918682151429	WITHOUT_CLASSIFICATION	8.131784857104466E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997789737425148	WITHOUT_CLASSIFICATION	2.210262574852934E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.999860379746678	WITHOUT_CLASSIFICATION	1.3962025332205216E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9997211228370487	WITHOUT_CLASSIFICATION	2.7887716295124773E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9997211228370487	WITHOUT_CLASSIFICATION	2.7887716295124773E-4	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9997211228370487	WITHOUT_CLASSIFICATION	2.7887716295124773E-4	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999994405206592	WITHOUT_CLASSIFICATION	5.59479340799325E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999846033138284	WITHOUT_CLASSIFICATION	1.5396686171473326E-5	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998748321585	WITHOUT_CLASSIFICATION	1.251678415004728E-7	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956860951307	WITHOUT_CLASSIFICATION	1.0431390486931678E-4	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998956860951307	WITHOUT_CLASSIFICATION	1.0431390486931678E-4	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999845556108963	WITHOUT_CLASSIFICATION	1.544438910379449E-5	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993391786572484	WITHOUT_CLASSIFICATION	6.608213427515935E-4	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9986276137243973	WITHOUT_CLASSIFICATION	0.001372386275602598	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999901416009905	WITHOUT_CLASSIFICATION	9.858399009455686E-6	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999737929361985	WITHOUT_CLASSIFICATION	2.620706380152968E-5	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997923660705913	WITHOUT_CLASSIFICATION	2.0763392940872032E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998095921468636	WITHOUT_CLASSIFICATION	1.904078531363673E-4	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999983076066372	WITHOUT_CLASSIFICATION	1.6923933627846788E-6	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998498410489508	WITHOUT_CLASSIFICATION	1.5015895104925571E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.99996073773436	WITHOUT_CLASSIFICATION	3.9262265639988757E-5	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999278725168196	WITHOUT_CLASSIFICATION	7.212748318040734E-5	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999685933659983	WITHOUT_CLASSIFICATION	3.14066340016094E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999834990333152	WITHOUT_CLASSIFICATION	1.6500966684774086E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999766208912126	WITHOUT_CLASSIFICATION	2.337910878733745E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999909595342	WITHOUT_CLASSIFICATION	9.040465811020082E-9	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996048226298	WITHOUT_CLASSIFICATION	3.95177370241832E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999018535718	WITHOUT_CLASSIFICATION	9.814642822366849E-8	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999996755206921	WITHOUT_CLASSIFICATION	3.2447930788756303E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999867629387192	WITHOUT_CLASSIFICATION	1.3237061280795348E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998909316933718	WITHOUT_CLASSIFICATION	1.0906830662817773E-4	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999994648315612	WITHOUT_CLASSIFICATION	5.351684389092273E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9998649374268506	WITHOUT_CLASSIFICATION	1.3506257314955652E-4	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999750456061	WITHOUT_CLASSIFICATION	2.4954393877786294E-8	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999955191346405	WITHOUT_CLASSIFICATION	4.48086535954553E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999975581189999	WITHOUT_CLASSIFICATION	2.441881000122503E-6	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999404935920908	WITHOUT_CLASSIFICATION	5.9506407909213096E-5	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999761033364631	WITHOUT_CLASSIFICATION	2.3896663536779144E-5	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9645714146654198	WITHOUT_CLASSIFICATION	0.03542858533458021	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999424042048539	WITHOUT_CLASSIFICATION	5.759579514616555E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9793730090272327	WITHOUT_CLASSIFICATION	0.020626990972767396	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9997719005886929	WITHOUT_CLASSIFICATION	2.2809941130711432E-4	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999302378653905	WITHOUT_CLASSIFICATION	6.976213460955758E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999264092264945	WITHOUT_CLASSIFICATION	7.359077350550519E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999997387890997	WITHOUT_CLASSIFICATION	2.612109002975365E-6	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999220881227421	WITHOUT_CLASSIFICATION	7.791187725795619E-5	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9773810409125059	WITHOUT_CLASSIFICATION	0.022618959087494134	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999922957714997	WITHOUT_CLASSIFICATION	7.704228500323248E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999354324486	WITHOUT_CLASSIFICATION	6.45675513938324E-8	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999488850333055	WITHOUT_CLASSIFICATION	5.111496669446813E-5	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999901155914267	WITHOUT_CLASSIFICATION	9.884408573375018E-6	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999928008085067	WITHOUT_CLASSIFICATION	7.199191493312373E-6	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999557176792145	WITHOUT_CLASSIFICATION	4.428232078543916E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999984899439407	WITHOUT_CLASSIFICATION	1.5100560593663571E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999967080559724	WITHOUT_CLASSIFICATION	3.291944027595273E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997599986413784	WITHOUT_CLASSIFICATION	2.400013586215142E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996942623927558	WITHOUT_CLASSIFICATION	3.057376072442332E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998362409932521	WITHOUT_CLASSIFICATION	1.637590067479629E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9992691139611197	WITHOUT_CLASSIFICATION	7.308860388801921E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999628040223174	WITHOUT_CLASSIFICATION	3.719597768262948E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9989166844297969	WITHOUT_CLASSIFICATION	0.0010833155702031625	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999842078540536	WITHOUT_CLASSIFICATION	1.579214594633108E-5	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999835840387618	WITHOUT_CLASSIFICATION	1.6415961238255233E-5	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9980491740787715	WITHOUT_CLASSIFICATION	0.0019508259212285258	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999873577731889	WITHOUT_CLASSIFICATION	1.264222681115355E-5	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999983741496082	WITHOUT_CLASSIFICATION	1.6258503917557875E-6	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999956399136	WITHOUT_CLASSIFICATION	4.3600863979261494E-8	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999532318447115	WITHOUT_CLASSIFICATION	4.676815528849866E-5	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999790690380034	WITHOUT_CLASSIFICATION	2.0930961996515655E-5	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999987895283956	WITHOUT_CLASSIFICATION	1.2104716043851497E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997512559142	WITHOUT_CLASSIFICATION	2.487440856939084E-7	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998993853565762	WITHOUT_CLASSIFICATION	1.0061464342389723E-4	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9720645112868778	WITHOUT_CLASSIFICATION	0.027935488713122222	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998995321034847	WITHOUT_CLASSIFICATION	1.0046789651533679E-4	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999944064454444	WITHOUT_CLASSIFICATION	5.593554555693044E-6	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999031033462911	WITHOUT_CLASSIFICATION	9.689665370894277E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999253148205084	WITHOUT_CLASSIFICATION	7.468517949165916E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999026881152384	WITHOUT_CLASSIFICATION	9.731188476166044E-5	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999986903661977	WITHOUT_CLASSIFICATION	1.3096338022518919E-6	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999535119271085	WITHOUT_CLASSIFICATION	4.6488072891547784E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.999984752060116	WITHOUT_CLASSIFICATION	1.5247939884059058E-5	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9997594923774277	WITHOUT_CLASSIFICATION	2.4050762257235862E-4	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999809011265132	WITHOUT_CLASSIFICATION	1.9098873486849416E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.999908938244693	WITHOUT_CLASSIFICATION	9.106175530701068E-5	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999387415337199	WITHOUT_CLASSIFICATION	6.12584662801295E-5	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998689769718292	WITHOUT_CLASSIFICATION	1.310230281706962E-4	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8438813132095014	IMPLEMENTATION	0.15611868679049865	WITHOUT_CLASSIFICATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998948502918177	WITHOUT_CLASSIFICATION	1.0514970818230291E-4	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9517420213151627	WITHOUT_CLASSIFICATION	0.048257978684837374	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.5831628767796112	WITHOUT_CLASSIFICATION	0.41683712322038885	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9996003935610271	WITHOUT_CLASSIFICATION	3.9960643897291227E-4	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999153400215385	WITHOUT_CLASSIFICATION	8.465997846157758E-5	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999547281597988	WITHOUT_CLASSIFICATION	4.527184020124566E-5	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9991219869756623	WITHOUT_CLASSIFICATION	8.780130243376877E-4	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997834239682327	WITHOUT_CLASSIFICATION	2.1657603176720118E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9990490499146226	WITHOUT_CLASSIFICATION	9.509500853772765E-4	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999712026449044	WITHOUT_CLASSIFICATION	2.8797355095750458E-5	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998918031534487	WITHOUT_CLASSIFICATION	1.0819684655135996E-4	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999835445551011	WITHOUT_CLASSIFICATION	1.645544489892389E-5	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999966694091219	WITHOUT_CLASSIFICATION	3.3305908780028283E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999202828779542	WITHOUT_CLASSIFICATION	7.971712204579016E-4	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999991105311579	WITHOUT_CLASSIFICATION	8.894688421125413E-6	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999294917320036	WITHOUT_CLASSIFICATION	7.050826799644765E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999804303397615	WITHOUT_CLASSIFICATION	1.9569660238506528E-5	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999423035287204	WITHOUT_CLASSIFICATION	5.769647127965662E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997778512192632	WITHOUT_CLASSIFICATION	2.221487807367575E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997778512192632	WITHOUT_CLASSIFICATION	2.221487807367575E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999919868154613	WITHOUT_CLASSIFICATION	8.01318453864346E-6	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9987366469085874	WITHOUT_CLASSIFICATION	0.0012633530914124692	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999934129144547	WITHOUT_CLASSIFICATION	6.587085545301842E-5	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999689709023226	WITHOUT_CLASSIFICATION	3.1029097677272924E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9996884439584058	WITHOUT_CLASSIFICATION	3.115560415941279E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999676814048258	WITHOUT_CLASSIFICATION	3.231859517424075E-5	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999986521618779	WITHOUT_CLASSIFICATION	1.3478381221022654E-5	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.999779458353273	WITHOUT_CLASSIFICATION	2.2054164672707788E-4	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999379526710392	WITHOUT_CLASSIFICATION	6.204732896069854E-5	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.82710006160296	WITHOUT_CLASSIFICATION	0.17289993839704	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999980850368991	WITHOUT_CLASSIFICATION	1.914963100953005E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999994555358976	WITHOUT_CLASSIFICATION	5.444641023612177E-7	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9954305752141283	WITHOUT_CLASSIFICATION	0.004569424785871763	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999995071760272	WITHOUT_CLASSIFICATION	4.92823972797827E-6	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999440513205589	WITHOUT_CLASSIFICATION	5.594867944113072E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999914752709642	WITHOUT_CLASSIFICATION	8.524729035762947E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9845587088713345	IMPLEMENTATION	0.015441291128665477	WITHOUT_CLASSIFICATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9845587088713345	IMPLEMENTATION	0.015441291128665477	WITHOUT_CLASSIFICATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999286395221	WITHOUT_CLASSIFICATION	7.13604779000569E-5	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999958523325371	WITHOUT_CLASSIFICATION	4.1476674629436735E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998462735086404	WITHOUT_CLASSIFICATION	1.537264913596524E-4	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999335948660882	WITHOUT_CLASSIFICATION	6.640513391176029E-5	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998775762623618	WITHOUT_CLASSIFICATION	1.2242373763810243E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999518044784134	WITHOUT_CLASSIFICATION	4.819552158659744E-5	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998775762623618	WITHOUT_CLASSIFICATION	1.2242373763810243E-4	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999867562844468	WITHOUT_CLASSIFICATION	1.3243715553261947E-5	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998985115160633	WITHOUT_CLASSIFICATION	1.0148848393665156E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998640724403594	WITHOUT_CLASSIFICATION	1.3592755964067594E-4	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9998640724403594	WITHOUT_CLASSIFICATION	1.3592755964067594E-4	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999723635383488	WITHOUT_CLASSIFICATION	2.7636461651064003E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999504103866107	WITHOUT_CLASSIFICATION	4.958961338937793E-5	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9998924382198375	WITHOUT_CLASSIFICATION	1.075617801624849E-4	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9997150700658665	WITHOUT_CLASSIFICATION	2.849299341335093E-4	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9998924382198375	WITHOUT_CLASSIFICATION	1.075617801624849E-4	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999897532	WITHOUT_CLASSIFICATION	1.0246730491411532E-11	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9998963349234486	WITHOUT_CLASSIFICATION	1.0366507655144948E-4	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999911826269368	WITHOUT_CLASSIFICATION	8.817373063243507E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9994269739732763	WITHOUT_CLASSIFICATION	5.730260267236772E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.999950462827228	WITHOUT_CLASSIFICATION	4.953717277194579E-5	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999951513471427	WITHOUT_CLASSIFICATION	4.848652857347313E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999992698231473	WITHOUT_CLASSIFICATION	7.3017685269172915E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9994748849183128	WITHOUT_CLASSIFICATION	5.251150816872515E-4	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999979734597963	WITHOUT_CLASSIFICATION	2.026540203704696E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999555207366313	WITHOUT_CLASSIFICATION	4.447926336875925E-5	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999667938455135	WITHOUT_CLASSIFICATION	3.3206154486488354E-5	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9997971051666215	WITHOUT_CLASSIFICATION	2.028948333786253E-4	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999947580562034	WITHOUT_CLASSIFICATION	5.24194379654811E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999978883350108	WITHOUT_CLASSIFICATION	2.111664989294349E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997966082139751	WITHOUT_CLASSIFICATION	2.0339178602486228E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999678726189603	WITHOUT_CLASSIFICATION	3.212738103971008E-5	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999275775332158	WITHOUT_CLASSIFICATION	7.242246678426759E-5	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9990806347016035	WITHOUT_CLASSIFICATION	9.193652983965141E-4	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9995062087008018	WITHOUT_CLASSIFICATION	4.937912991982798E-4	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999254824508015	WITHOUT_CLASSIFICATION	7.451754919854153E-5	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999601567197717	WITHOUT_CLASSIFICATION	3.984328022835791E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9167086112317993	WITHOUT_CLASSIFICATION	0.08329138876820075	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999956746933029	WITHOUT_CLASSIFICATION	4.32530669718203E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998088478537157	WITHOUT_CLASSIFICATION	1.9115214628439065E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999997697150254	WITHOUT_CLASSIFICATION	2.3028497467324266E-7	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999525658420914	WITHOUT_CLASSIFICATION	4.7434157908590575E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999291743287195	WITHOUT_CLASSIFICATION	7.08256712804704E-5	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999937981794058	WITHOUT_CLASSIFICATION	6.201820594241338E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9740758725929617	WITHOUT_CLASSIFICATION	0.025924127407038342	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999392433960397	WITHOUT_CLASSIFICATION	6.0756603960198726E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998932395039244	WITHOUT_CLASSIFICATION	1.0676049607562492E-4	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.999920031154532	WITHOUT_CLASSIFICATION	7.996884546804291E-5	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.999920031154532	WITHOUT_CLASSIFICATION	7.996884546804291E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999682834777314	WITHOUT_CLASSIFICATION	3.171652226873303E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999292680472781	WITHOUT_CLASSIFICATION	7.073195272191693E-5	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998906654715968	WITHOUT_CLASSIFICATION	1.0933452840325017E-4	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9998936297054802	WITHOUT_CLASSIFICATION	1.0637029451978184E-4	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998666031531745	WITHOUT_CLASSIFICATION	1.3339684682539565E-4	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999999242401212	WITHOUT_CLASSIFICATION	7.575987879439879E-7	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999983386425298	WITHOUT_CLASSIFICATION	1.6613574701774076E-6	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9993351529830636	WITHOUT_CLASSIFICATION	6.648470169362674E-4	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999682834777314	WITHOUT_CLASSIFICATION	3.171652226873303E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999292680472781	WITHOUT_CLASSIFICATION	7.073195272191693E-5	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999229796581443	WITHOUT_CLASSIFICATION	7.702034185567622E-5	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.6277162792252394	WITHOUT_CLASSIFICATION	0.3722837207747604	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999956390417704	WITHOUT_CLASSIFICATION	4.3609582296899755E-6	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999572018404936	WITHOUT_CLASSIFICATION	4.27981595064128E-5	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999999682537864	WITHOUT_CLASSIFICATION	3.174621361069501E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9853655406896651	WITHOUT_CLASSIFICATION	0.014634459310334781	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999449771240229	WITHOUT_CLASSIFICATION	5.5022875977110634E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999658945942128	WITHOUT_CLASSIFICATION	3.4105405787095094E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999935121461614	WITHOUT_CLASSIFICATION	6.487853838638771E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7279405528398234	IMPLEMENTATION	0.27205944716017666	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999962787911288	WITHOUT_CLASSIFICATION	3.7212088712287143E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7279405528398234	IMPLEMENTATION	0.27205944716017666	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999144379822424	WITHOUT_CLASSIFICATION	8.556201775752419E-5	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998993853565762	WITHOUT_CLASSIFICATION	1.0061464342389723E-4	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999144379822424	WITHOUT_CLASSIFICATION	8.556201775752419E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999476083265618	WITHOUT_CLASSIFICATION	5.23916734382069E-5	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999923458730742	WITHOUT_CLASSIFICATION	7.654126925796853E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999658945942128	WITHOUT_CLASSIFICATION	3.4105405787095094E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999658945942128	WITHOUT_CLASSIFICATION	3.4105405787095094E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999268052881423	WITHOUT_CLASSIFICATION	7.319471185776978E-5	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999270923191894	WITHOUT_CLASSIFICATION	7.290768081065496E-5	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999268052881423	WITHOUT_CLASSIFICATION	7.319471185776978E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999212377454739	WITHOUT_CLASSIFICATION	7.876225452608898E-5	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999550464382035	WITHOUT_CLASSIFICATION	4.4953561796553405E-5	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999346914406918	WITHOUT_CLASSIFICATION	6.530855930818464E-5	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9486828620905138	WITHOUT_CLASSIFICATION	0.05131713790948613	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999241699974274	WITHOUT_CLASSIFICATION	7.583000257266888E-5	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999873352912617	WITHOUT_CLASSIFICATION	1.2664708738142238E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999486884575193	WITHOUT_CLASSIFICATION	5.1311542480703076E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.99995162874156	WITHOUT_CLASSIFICATION	4.837125844007783E-5	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999530360279336	WITHOUT_CLASSIFICATION	4.6963972066478225E-5	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999969986363544	WITHOUT_CLASSIFICATION	3.0013636456449685E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9998976752471367	WITHOUT_CLASSIFICATION	1.0232475286338024E-4	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999568951238547	WITHOUT_CLASSIFICATION	4.310487614542632E-5	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998896990545599	WITHOUT_CLASSIFICATION	1.1030094543995053E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999503873101478	WITHOUT_CLASSIFICATION	4.961268985213959E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999347365917846	WITHOUT_CLASSIFICATION	6.526340821538236E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999179555405758	WITHOUT_CLASSIFICATION	8.204445942415307E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999674837074128	WITHOUT_CLASSIFICATION	3.25162925870759E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999284827375173	WITHOUT_CLASSIFICATION	7.151726248260064E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998862700903351	WITHOUT_CLASSIFICATION	1.1372990966489042E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998447914856952	WITHOUT_CLASSIFICATION	1.552085143047962E-4	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999350560832102	WITHOUT_CLASSIFICATION	6.494391678982534E-5	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9986732620021268	WITHOUT_CLASSIFICATION	0.0013267379978732414	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.6560728519185427	WITHOUT_CLASSIFICATION	0.3439271480814573	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996229129297198	WITHOUT_CLASSIFICATION	3.770870702801778E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998211690117048	WITHOUT_CLASSIFICATION	1.7883098829528157E-4	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9176225866095868	WITHOUT_CLASSIFICATION	0.08237741339041312	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999314880052189	WITHOUT_CLASSIFICATION	6.851199478108194E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999241699974274	WITHOUT_CLASSIFICATION	7.583000257266888E-5	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999523214603374	WITHOUT_CLASSIFICATION	4.767853966259617E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.775453971374665	WITHOUT_CLASSIFICATION	0.22454602862533507	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.772230752226695	IMPLEMENTATION	0.22776924777330493	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9999786801495764	WITHOUT_CLASSIFICATION	2.1319850423658865E-5	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999796855625662	WITHOUT_CLASSIFICATION	2.0314437433777296E-5	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999403367149564	WITHOUT_CLASSIFICATION	5.9663285043509285E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999212377454739	WITHOUT_CLASSIFICATION	7.876225452608898E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999212377454739	WITHOUT_CLASSIFICATION	7.876225452608898E-5	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998796643165393	WITHOUT_CLASSIFICATION	1.203356834606978E-4	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999829324425933	WITHOUT_CLASSIFICATION	1.7067557406646933E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9989433163791019	WITHOUT_CLASSIFICATION	0.001056683620898123	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999106402763217	WITHOUT_CLASSIFICATION	8.93597236782726E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999666607085161	WITHOUT_CLASSIFICATION	3.33392914838953E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999853817952128	WITHOUT_CLASSIFICATION	1.461820478718655E-4	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999567986461453	WITHOUT_CLASSIFICATION	4.3201353854778705E-5	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997555985295	WITHOUT_CLASSIFICATION	2.4440147050530606E-7	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9998383706973617	WITHOUT_CLASSIFICATION	1.6162930263838578E-4	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999551291717039	WITHOUT_CLASSIFICATION	4.4870828295962596E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999915337767481	WITHOUT_CLASSIFICATION	8.466223251871786E-6	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998896990545599	WITHOUT_CLASSIFICATION	1.1030094543995053E-4	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999682834777314	WITHOUT_CLASSIFICATION	3.171652226873303E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999915337767481	WITHOUT_CLASSIFICATION	8.466223251871786E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999512777355142	WITHOUT_CLASSIFICATION	4.872226448586E-5	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999195382944899	WITHOUT_CLASSIFICATION	8.046170551008372E-5	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999787322440187	WITHOUT_CLASSIFICATION	2.126775598132006E-5	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.896467012223446	IMPLEMENTATION	0.10353298777655397	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996199768583311	WITHOUT_CLASSIFICATION	3.800231416688592E-4	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999961646714461	WITHOUT_CLASSIFICATION	3.8353285538627235E-6	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999996214375124	WITHOUT_CLASSIFICATION	3.7856248759399854E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999993066042	WITHOUT_CLASSIFICATION	6.933958068898379E-10	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999512474888107	WITHOUT_CLASSIFICATION	4.8752511189295677E-5	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998712782577435	WITHOUT_CLASSIFICATION	1.2872174225641333E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999326475193506	WITHOUT_CLASSIFICATION	6.735248064937291E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999326475193506	WITHOUT_CLASSIFICATION	6.735248064937291E-5	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999413558505543	WITHOUT_CLASSIFICATION	5.864414944564241E-5	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9921891530366482	WITHOUT_CLASSIFICATION	0.007810846963351832	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999915337767481	WITHOUT_CLASSIFICATION	8.466223251871786E-6	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996199768583311	WITHOUT_CLASSIFICATION	3.800231416688592E-4	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999996214375124	WITHOUT_CLASSIFICATION	3.7856248759399854E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.999972307870792	WITHOUT_CLASSIFICATION	2.769212920803226E-5	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998789466769094	WITHOUT_CLASSIFICATION	1.2105332309063174E-4	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999273055474602	WITHOUT_CLASSIFICATION	7.269445253975727E-5	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999199421755816	WITHOUT_CLASSIFICATION	8.005782441842306E-5	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999448412161495	WITHOUT_CLASSIFICATION	5.5158783850621126E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999512777355142	WITHOUT_CLASSIFICATION	4.872226448586E-5	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998979260767621	WITHOUT_CLASSIFICATION	1.0207392323783931E-4	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999365365360128	WITHOUT_CLASSIFICATION	6.346346398720385E-5	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9989946705678716	WITHOUT_CLASSIFICATION	0.0010053294321284631	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.6351887871777245	WITHOUT_CLASSIFICATION	0.3648112128222755	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.6133831713221817	WITHOUT_CLASSIFICATION	0.38661682867781827	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999707301390582	WITHOUT_CLASSIFICATION	2.9269860941733175E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999476083265618	WITHOUT_CLASSIFICATION	5.23916734382069E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895419993493	WITHOUT_CLASSIFICATION	1.0458000650600695E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999998031749162	WITHOUT_CLASSIFICATION	1.9682508379933068E-6	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999659026118685	WITHOUT_CLASSIFICATION	3.40973881314859E-5	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999969607430179	WITHOUT_CLASSIFICATION	3.0392569820421093E-6	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999988414222731	WITHOUT_CLASSIFICATION	1.1585777269017793E-6	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999449752957403	WITHOUT_CLASSIFICATION	5.5024704259686796E-5	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999260629864226	WITHOUT_CLASSIFICATION	7.39370135774172E-5	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999740868537706	WITHOUT_CLASSIFICATION	2.5913146229375506E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999269485779586	WITHOUT_CLASSIFICATION	7.305142204145032E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999751391482873	WITHOUT_CLASSIFICATION	2.4860851712704808E-5	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999703751200718	WITHOUT_CLASSIFICATION	2.9624879928220138E-5	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999672550182874	WITHOUT_CLASSIFICATION	3.27449817126234E-5	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9999719306670604	WITHOUT_CLASSIFICATION	2.8069332939712575E-5	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999024855305471	WITHOUT_CLASSIFICATION	9.751446945303762E-5	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9871607580468585	WITHOUT_CLASSIFICATION	0.012839241953141609	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998847605894534	WITHOUT_CLASSIFICATION	1.1523941054651886E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999989988632242	WITHOUT_CLASSIFICATION	1.0011367758589396E-6	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9963018146154865	WITHOUT_CLASSIFICATION	0.003698185384513443	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999611297344101	WITHOUT_CLASSIFICATION	3.887026558989585E-5	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999990186389086	WITHOUT_CLASSIFICATION	9.813610914602115E-7	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999738994182542	WITHOUT_CLASSIFICATION	2.6100581745760147E-5	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9997221145534669	WITHOUT_CLASSIFICATION	2.778854465330844E-4	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999089442916372	WITHOUT_CLASSIFICATION	9.1055708362772E-5	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9991993169631764	WITHOUT_CLASSIFICATION	8.006830368235447E-4	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999706392895356	WITHOUT_CLASSIFICATION	2.936071046440787E-5	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999700327862361	WITHOUT_CLASSIFICATION	2.9967213763975846E-5	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999704031691289	WITHOUT_CLASSIFICATION	2.959683087107063E-5	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999996755607796	WITHOUT_CLASSIFICATION	3.2443922039259303E-6	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9998219855091672	WITHOUT_CLASSIFICATION	1.7801449083269984E-4	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6668868025106793	IMPLEMENTATION	0.3331131974893206	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9996924944465608	WITHOUT_CLASSIFICATION	3.0750555343917455E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999856861777004	WITHOUT_CLASSIFICATION	1.4313822299608501E-4	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999940358558959	WITHOUT_CLASSIFICATION	5.964144104170645E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5062155207409195	IMPLEMENTATION	0.49378447925908053	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999852719689443	WITHOUT_CLASSIFICATION	1.4728031055809304E-5	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999979624384523	WITHOUT_CLASSIFICATION	2.037561547700002E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999892255528465	WITHOUT_CLASSIFICATION	1.077444715351196E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999987482392541	WITHOUT_CLASSIFICATION	1.2517607458908698E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999677995324079	WITHOUT_CLASSIFICATION	3.220046759205132E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998145409428543	WITHOUT_CLASSIFICATION	1.8545905714563373E-4	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999655258034046	WITHOUT_CLASSIFICATION	3.447419659543955E-5	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998219297435923	WITHOUT_CLASSIFICATION	1.7807025640758858E-4	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9998145409428543	WITHOUT_CLASSIFICATION	1.8545905714563373E-4	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999677995324079	WITHOUT_CLASSIFICATION	3.220046759205132E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999655258034046	WITHOUT_CLASSIFICATION	3.447419659543955E-5	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999788555937933	WITHOUT_CLASSIFICATION	2.1144406206786448E-5	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999742477971806	WITHOUT_CLASSIFICATION	2.5752202819353187E-5	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9961694581752596	WITHOUT_CLASSIFICATION	0.0038305418247403084	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999719659643064	WITHOUT_CLASSIFICATION	2.8034035693614703E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998595202974	WITHOUT_CLASSIFICATION	1.4047970261740155E-7	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8197246544638688	WITHOUT_CLASSIFICATION	0.18027534553613117	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.998906205220839	WITHOUT_CLASSIFICATION	0.0010937947791610483	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999989295467047	WITHOUT_CLASSIFICATION	1.0704532954365962E-6	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999997071433819	WITHOUT_CLASSIFICATION	2.9285661808422165E-7	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999950645982142	WITHOUT_CLASSIFICATION	4.935401785805088E-5	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9998644177947436	WITHOUT_CLASSIFICATION	1.355822052564987E-4	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999950857596994	WITHOUT_CLASSIFICATION	4.914240300498211E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9994868074234674	WITHOUT_CLASSIFICATION	5.1319257653256E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999719659643064	WITHOUT_CLASSIFICATION	2.8034035693614703E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999947161520029	WITHOUT_CLASSIFICATION	5.283847997143571E-6	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999944750263302	WITHOUT_CLASSIFICATION	5.524973669732341E-6	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998698449589181	WITHOUT_CLASSIFICATION	1.3015504108195245E-4	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999980107771514	WITHOUT_CLASSIFICATION	1.989222848631543E-6	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999893109996854	WITHOUT_CLASSIFICATION	1.0689000314595938E-4	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9998738617048093	WITHOUT_CLASSIFICATION	1.2613829519078835E-4	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9932425761052193	WITHOUT_CLASSIFICATION	0.006757423894780839	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999623656134122	WITHOUT_CLASSIFICATION	3.763438658774647E-5	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9993294424235056	WITHOUT_CLASSIFICATION	6.705575764942884E-4	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9996513442774408	WITHOUT_CLASSIFICATION	3.486557225591335E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998737961612834	WITHOUT_CLASSIFICATION	1.2620383871667345E-4	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998737961612834	WITHOUT_CLASSIFICATION	1.2620383871667345E-4	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999380693191446	WITHOUT_CLASSIFICATION	6.193068085539307E-5	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999380693191446	WITHOUT_CLASSIFICATION	6.193068085539307E-5	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9994664465901306	WITHOUT_CLASSIFICATION	5.335534098693699E-4	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998698449589181	WITHOUT_CLASSIFICATION	1.3015504108195245E-4	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997273064233495	WITHOUT_CLASSIFICATION	2.72693576650432E-4	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999655190752401	WITHOUT_CLASSIFICATION	3.448092475998457E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999586786340812	WITHOUT_CLASSIFICATION	4.132136591884616E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999586786340812	WITHOUT_CLASSIFICATION	4.132136591884616E-5	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999674864980861	WITHOUT_CLASSIFICATION	3.251350191393996E-5	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999268963859627	WITHOUT_CLASSIFICATION	7.310361403736134E-5	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9996764981684161	WITHOUT_CLASSIFICATION	3.235018315838744E-4	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999562490134416	WITHOUT_CLASSIFICATION	4.37509865584098E-5	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999924613996952	WITHOUT_CLASSIFICATION	7.538600304777926E-6	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999817167053384	WITHOUT_CLASSIFICATION	1.8283294661560825E-5	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.999973106416787	WITHOUT_CLASSIFICATION	2.689358321294356E-5	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998064538527721	WITHOUT_CLASSIFICATION	1.9354614722800104E-4	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999472801255035	WITHOUT_CLASSIFICATION	5.2719874496615226E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999990039525095	WITHOUT_CLASSIFICATION	9.96047490532067E-7	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999440928035582	WITHOUT_CLASSIFICATION	5.590719644167122E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.999888594360203	WITHOUT_CLASSIFICATION	1.1140563979690839E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999603475775902	WITHOUT_CLASSIFICATION	3.965242240985282E-5	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999729244864677	WITHOUT_CLASSIFICATION	2.7075513532353798E-5	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.984664435143473	WITHOUT_CLASSIFICATION	0.015335564856526923	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997229657818258	WITHOUT_CLASSIFICATION	2.7703421817412894E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998988964854654	WITHOUT_CLASSIFICATION	1.0110351453471827E-4	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9996003337620375	WITHOUT_CLASSIFICATION	3.996662379624445E-4	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9727089396882068	WITHOUT_CLASSIFICATION	0.02729106031179315	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998025089322	WITHOUT_CLASSIFICATION	1.9749106797830318E-7	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9976082214530928	WITHOUT_CLASSIFICATION	0.0023917785469071903	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999914146090467	WITHOUT_CLASSIFICATION	8.585390953302634E-6	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997425527930031	WITHOUT_CLASSIFICATION	2.574472069969921E-4	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999988457708454	WITHOUT_CLASSIFICATION	1.1542291545489226E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999868598169706	WITHOUT_CLASSIFICATION	1.314018302936416E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998157103288395	WITHOUT_CLASSIFICATION	1.8428967116055996E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999989988632242	WITHOUT_CLASSIFICATION	1.0011367758589396E-6	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999758448613519	WITHOUT_CLASSIFICATION	2.4155138648101584E-5	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999987431249208	WITHOUT_CLASSIFICATION	1.2568750791723804E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999003754109731	WITHOUT_CLASSIFICATION	9.962458902683549E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998923600543889	WITHOUT_CLASSIFICATION	1.0763994561108548E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999901914373777	WITHOUT_CLASSIFICATION	9.808562622355388E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999901914373777	WITHOUT_CLASSIFICATION	9.808562622355388E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999775338469156	WITHOUT_CLASSIFICATION	2.2466153084486078E-5	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999375302908401	WITHOUT_CLASSIFICATION	6.246970915990704E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999033062721786	WITHOUT_CLASSIFICATION	9.669372782135547E-5	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999033062721786	WITHOUT_CLASSIFICATION	9.669372782135547E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9991768197620228	WITHOUT_CLASSIFICATION	8.23180237977247E-4	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998461616485755	WITHOUT_CLASSIFICATION	1.5383835142437753E-4	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9882906967260474	WITHOUT_CLASSIFICATION	0.011709303273952618	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999200684233582	WITHOUT_CLASSIFICATION	7.993157664172926E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999281854243245	WITHOUT_CLASSIFICATION	7.181457567551605E-5	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999990796164128	WITHOUT_CLASSIFICATION	9.20383587284199E-7	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999255538969986	WITHOUT_CLASSIFICATION	7.444610300149705E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999939641473407	WITHOUT_CLASSIFICATION	6.035852659303937E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999939641473407	WITHOUT_CLASSIFICATION	6.035852659303937E-5	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999724059497428	WITHOUT_CLASSIFICATION	2.759405025719283E-4	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999897097569405	WITHOUT_CLASSIFICATION	1.029024305945379E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999897097569405	WITHOUT_CLASSIFICATION	1.029024305945379E-5	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999938226374991	WITHOUT_CLASSIFICATION	6.1773625009021E-5	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.999960359078954	WITHOUT_CLASSIFICATION	3.9640921046068725E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999876109745823	WITHOUT_CLASSIFICATION	1.2389025417718458E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999898419196644	WITHOUT_CLASSIFICATION	1.0158080335508404E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.999900289816357	WITHOUT_CLASSIFICATION	9.971018364287538E-5	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999998528054214	WITHOUT_CLASSIFICATION	1.471945785672005E-7	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999948986170594	WITHOUT_CLASSIFICATION	5.1013829407036586E-6	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999511892682311	WITHOUT_CLASSIFICATION	4.881073176899637E-5	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9989868264137739	WITHOUT_CLASSIFICATION	0.0010131735862261484	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9997694981293997	WITHOUT_CLASSIFICATION	2.305018706002329E-4	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.986566487826626	WITHOUT_CLASSIFICATION	0.013433512173374091	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999681403489874	WITHOUT_CLASSIFICATION	3.18596510125982E-5	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997477639688588	WITHOUT_CLASSIFICATION	2.5223603114123225E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999795717390221	WITHOUT_CLASSIFICATION	2.0428260977925155E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998774036904907	WITHOUT_CLASSIFICATION	1.2259630950932655E-4	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9998918728333294	WITHOUT_CLASSIFICATION	1.0812716667062435E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997200845928021	WITHOUT_CLASSIFICATION	2.7991540719783366E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.999883415515524	WITHOUT_CLASSIFICATION	1.1658448447605802E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998959198630791	WITHOUT_CLASSIFICATION	1.0408013692095146E-4	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9973815197925493	WITHOUT_CLASSIFICATION	0.002618480207450636	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9998717055423468	WITHOUT_CLASSIFICATION	1.2829445765311141E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999595725706868	WITHOUT_CLASSIFICATION	4.042742931313467E-5	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999089717724	WITHOUT_CLASSIFICATION	9.102822764852117E-8	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.8479634046810461	IMPLEMENTATION	0.1520365953189539	WITHOUT_CLASSIFICATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999890876947999	WITHOUT_CLASSIFICATION	1.0912305200105048E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999595725706868	WITHOUT_CLASSIFICATION	4.042742931313467E-5	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.7810851211021922	WITHOUT_CLASSIFICATION	0.21891487889780772	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998794421675792	WITHOUT_CLASSIFICATION	1.2055783242077398E-4	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999998458564017	WITHOUT_CLASSIFICATION	1.541435983055043E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999759954946278	WITHOUT_CLASSIFICATION	2.4004505372118525E-5	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999765665092369	WITHOUT_CLASSIFICATION	2.3433490763074416E-5	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9989296415309028	WITHOUT_CLASSIFICATION	0.0010703584690972205	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999906115751181	WITHOUT_CLASSIFICATION	9.38842488181471E-6	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999937045913995	WITHOUT_CLASSIFICATION	6.2954086005187464E-6	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880193843347	WITHOUT_CLASSIFICATION	1.1980615665272258E-5	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999962630192675	WITHOUT_CLASSIFICATION	3.7369807325223597E-6	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880193843347	WITHOUT_CLASSIFICATION	1.1980615665272258E-5	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999966681255934	WITHOUT_CLASSIFICATION	3.331874406586988E-6	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998458266168625	WITHOUT_CLASSIFICATION	1.5417338313746968E-4	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.5210542576105741	WITHOUT_CLASSIFICATION	0.47894574238942583	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999762267868108	WITHOUT_CLASSIFICATION	2.3773213189327016E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998925853374825	WITHOUT_CLASSIFICATION	1.0741466251752658E-4	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999963222438177	WITHOUT_CLASSIFICATION	3.6777561822634E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999353953536437	WITHOUT_CLASSIFICATION	6.460464635633761E-5	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999720588150177	WITHOUT_CLASSIFICATION	2.7941184982314997E-5	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999353953536437	WITHOUT_CLASSIFICATION	6.460464635633761E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999481429589145	WITHOUT_CLASSIFICATION	5.185704108554502E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999710020987915	WITHOUT_CLASSIFICATION	2.8997901208382927E-5	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999347785416598	WITHOUT_CLASSIFICATION	6.522145834023692E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999585047757484	WITHOUT_CLASSIFICATION	4.149522425162697E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999338539952235	WITHOUT_CLASSIFICATION	6.614600477649939E-5	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999994929888584	WITHOUT_CLASSIFICATION	5.070111415680994E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999963222438177	WITHOUT_CLASSIFICATION	3.6777561822634E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999720588150177	WITHOUT_CLASSIFICATION	2.7941184982314997E-5	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999481429589145	WITHOUT_CLASSIFICATION	5.185704108554502E-5	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.99980944741762	WITHOUT_CLASSIFICATION	1.905525823799582E-4	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999451740343339	WITHOUT_CLASSIFICATION	5.482596566594754E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9998173560552853	WITHOUT_CLASSIFICATION	1.8264394471473148E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999997269381934	WITHOUT_CLASSIFICATION	2.730618065520368E-7	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9996144148939927	WITHOUT_CLASSIFICATION	3.8558510600721047E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9992815326431466	WITHOUT_CLASSIFICATION	7.184673568534579E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999222829374039	WITHOUT_CLASSIFICATION	7.771706259607543E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998988964854654	WITHOUT_CLASSIFICATION	1.0110351453471827E-4	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999710020987915	WITHOUT_CLASSIFICATION	2.8997901208382927E-5	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9050669609448789	WITHOUT_CLASSIFICATION	0.09493303905512099	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999268052881423	WITHOUT_CLASSIFICATION	7.319471185776978E-5	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9938405725062991	WITHOUT_CLASSIFICATION	0.006159427493700883	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999569695621581	WITHOUT_CLASSIFICATION	4.3030437842055736E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998988964854654	WITHOUT_CLASSIFICATION	1.0110351453471827E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999737257266258	WITHOUT_CLASSIFICATION	2.6274273374202103E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998988964854654	WITHOUT_CLASSIFICATION	1.0110351453471827E-4	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999500944328412	WITHOUT_CLASSIFICATION	4.990556715880116E-5	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998412626828883	WITHOUT_CLASSIFICATION	1.587373171116349E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997363345027284	WITHOUT_CLASSIFICATION	2.6366549727160584E-4	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999262922055784	WITHOUT_CLASSIFICATION	7.370779442160407E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999899172111448	WITHOUT_CLASSIFICATION	1.008278885520876E-5	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999587449651708	WITHOUT_CLASSIFICATION	4.125503482919527E-5	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998336657537102	WITHOUT_CLASSIFICATION	1.6633424628985908E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999954001485047	WITHOUT_CLASSIFICATION	4.599851495262535E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999500347541984	WITHOUT_CLASSIFICATION	4.9965245801559994E-5	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999889256297135	WITHOUT_CLASSIFICATION	1.107437028642469E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999610927872103	WITHOUT_CLASSIFICATION	3.890721278967046E-5	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999880861799708	WITHOUT_CLASSIFICATION	1.1913820029174909E-5	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994422638817161	WITHOUT_CLASSIFICATION	5.57736118283942E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999370626817913	WITHOUT_CLASSIFICATION	6.293731820875725E-5	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999945359327372	WITHOUT_CLASSIFICATION	5.464067262795859E-6	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999894246268376	WITHOUT_CLASSIFICATION	1.0575373162373587E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999940963099456	WITHOUT_CLASSIFICATION	5.9036900543721825E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999926396503652	WITHOUT_CLASSIFICATION	7.360349634726087E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996757908748	WITHOUT_CLASSIFICATION	3.242091251666138E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999991664379916	WITHOUT_CLASSIFICATION	8.335620083911658E-6	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999357427992286	WITHOUT_CLASSIFICATION	6.425720077141301E-5	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999357427992286	WITHOUT_CLASSIFICATION	6.425720077141301E-5	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999843851648913	WITHOUT_CLASSIFICATION	1.5614835108727186E-5	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999952821790886	WITHOUT_CLASSIFICATION	4.717820911418182E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999470000340792	WITHOUT_CLASSIFICATION	5.2999965920851094E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999996190139282	WITHOUT_CLASSIFICATION	3.8098607186986807E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996550027944063	WITHOUT_CLASSIFICATION	3.449972055937461E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9995790060132242	WITHOUT_CLASSIFICATION	4.2099398677580987E-4	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999357866613079	WITHOUT_CLASSIFICATION	6.421333869217625E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999992886833696	WITHOUT_CLASSIFICATION	7.113166303377916E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.8951942726381527	WITHOUT_CLASSIFICATION	0.10480572736184736	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999836466394332	WITHOUT_CLASSIFICATION	1.6353360566847634E-5	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999267702107185	WITHOUT_CLASSIFICATION	7.322978928145515E-5	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.99980818723007	WITHOUT_CLASSIFICATION	1.9181276992994136E-4	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.999873984956082	WITHOUT_CLASSIFICATION	1.2601504391792644E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999960384443662	WITHOUT_CLASSIFICATION	3.961555633806495E-5	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999411224784229	WITHOUT_CLASSIFICATION	5.88775215769862E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999632234342788	WITHOUT_CLASSIFICATION	3.677656572118654E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999840602705278	WITHOUT_CLASSIFICATION	1.5939729472148872E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999840602705278	WITHOUT_CLASSIFICATION	1.5939729472148872E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999972788787813	WITHOUT_CLASSIFICATION	2.7211212186964977E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999954001485047	WITHOUT_CLASSIFICATION	4.599851495262535E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9934456771928063	WITHOUT_CLASSIFICATION	0.0065543228071936145	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999828500035596	WITHOUT_CLASSIFICATION	1.7149996440360285E-5	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9995127271713357	WITHOUT_CLASSIFICATION	4.872728286643707E-4	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999995406869746	WITHOUT_CLASSIFICATION	4.593130253919311E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9998229415963115	WITHOUT_CLASSIFICATION	1.7705840368851711E-4	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999483176013236	WITHOUT_CLASSIFICATION	5.168239867644357E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9996647848958838	WITHOUT_CLASSIFICATION	3.35215104116169E-4	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997737149251568	WITHOUT_CLASSIFICATION	2.2628507484321342E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999627377209355	WITHOUT_CLASSIFICATION	3.726227906460604E-5	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999156489068	WITHOUT_CLASSIFICATION	8.435109317829147E-8	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999996303263917	WITHOUT_CLASSIFICATION	3.696736082791729E-7	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999994132059101	WITHOUT_CLASSIFICATION	5.867940898109203E-7	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9991055635049148	WITHOUT_CLASSIFICATION	8.944364950851428E-4	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999059619112179	WITHOUT_CLASSIFICATION	9.403808878212179E-5	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999900670148111	WITHOUT_CLASSIFICATION	9.932985188912993E-6	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999780476782402	WITHOUT_CLASSIFICATION	2.1952321759889866E-5	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998602743676612	WITHOUT_CLASSIFICATION	1.39725632338848E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999239363533495	WITHOUT_CLASSIFICATION	7.60636466505222E-5	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999582406805191	WITHOUT_CLASSIFICATION	4.17593194808899E-5	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999875921379742	WITHOUT_CLASSIFICATION	1.2407862025728246E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999264951611136	WITHOUT_CLASSIFICATION	7.350483888640876E-4	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9998220058607	WITHOUT_CLASSIFICATION	1.7799413929995466E-4	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999993669545444	WITHOUT_CLASSIFICATION	6.330454555613371E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999993892820646	WITHOUT_CLASSIFICATION	6.1071793537563E-7	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999798569664249	WITHOUT_CLASSIFICATION	2.0143033575120755E-5	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.8242937484499524	WITHOUT_CLASSIFICATION	0.1757062515500476	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.99968885569013	WITHOUT_CLASSIFICATION	3.11144309869997E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997645154658392	WITHOUT_CLASSIFICATION	2.3548453416083375E-4	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998925583896152	WITHOUT_CLASSIFICATION	1.0744161038483129E-4	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998962227340804	WITHOUT_CLASSIFICATION	1.0377726591967046E-4	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999073314019705	WITHOUT_CLASSIFICATION	9.266859802950583E-5	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999149187349494	WITHOUT_CLASSIFICATION	8.508126505066405E-5	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999640818486623	WITHOUT_CLASSIFICATION	3.5918151337685755E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9995661236266368	WITHOUT_CLASSIFICATION	4.3387637336320003E-4	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999961737597844	WITHOUT_CLASSIFICATION	3.8262402156048765E-5	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999279335906026	WITHOUT_CLASSIFICATION	7.206640939737102E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9984175409839743	WITHOUT_CLASSIFICATION	0.0015824590160257545	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9984175409839743	WITHOUT_CLASSIFICATION	0.0015824590160257545	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998754716675494	WITHOUT_CLASSIFICATION	1.2452833245067086E-4	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999735804104967	WITHOUT_CLASSIFICATION	2.6419589503378047E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999996551779191	WITHOUT_CLASSIFICATION	3.4482208089578142E-6	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999996551779191	WITHOUT_CLASSIFICATION	3.4482208089578142E-6	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999709079489921	WITHOUT_CLASSIFICATION	2.909205100783274E-5	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999810345499958	WITHOUT_CLASSIFICATION	1.8965450004331804E-5	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998393894395485	WITHOUT_CLASSIFICATION	1.6061056045137815E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999940619724388	WITHOUT_CLASSIFICATION	5.9380275612988104E-6	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999200736581589	WITHOUT_CLASSIFICATION	7.992634184102748E-5	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999932460982408	WITHOUT_CLASSIFICATION	6.753901759239712E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999932460982408	WITHOUT_CLASSIFICATION	6.753901759239712E-6	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998082775694166	WITHOUT_CLASSIFICATION	1.917224305833955E-4	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999212377454739	WITHOUT_CLASSIFICATION	7.876225452608898E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999176400248746	WITHOUT_CLASSIFICATION	8.235997512542771E-5	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999176400248746	WITHOUT_CLASSIFICATION	8.235997512542771E-5	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999698335387078	WITHOUT_CLASSIFICATION	3.0166461292239733E-5	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999266775146133	WITHOUT_CLASSIFICATION	7.332248538667095E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999990954634896	WITHOUT_CLASSIFICATION	9.045365104011476E-6	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999599266111059	WITHOUT_CLASSIFICATION	4.007338889411678E-5	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999985202955747	WITHOUT_CLASSIFICATION	1.4797044253351837E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999276157550274	WITHOUT_CLASSIFICATION	7.238424497255354E-5	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999981910702408	WITHOUT_CLASSIFICATION	1.8089297591886384E-5	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9997003502615673	WITHOUT_CLASSIFICATION	2.996497384326523E-4	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999735830159463	WITHOUT_CLASSIFICATION	2.6416984053672535E-5	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999998013591017	WITHOUT_CLASSIFICATION	1.986408983012852E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999719431774812	WITHOUT_CLASSIFICATION	2.8056822518769735E-5	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.888741351491897	WITHOUT_CLASSIFICATION	0.11125864850810306	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.8792969906553334	WITHOUT_CLASSIFICATION	0.12070300934466668	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999972806685992	WITHOUT_CLASSIFICATION	2.719331400838359E-6	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999473715580071	WITHOUT_CLASSIFICATION	5.262844199294618E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999964825513208	WITHOUT_CLASSIFICATION	3.5174486791131103E-6	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999719530682607	WITHOUT_CLASSIFICATION	2.8046931739261593E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9917338671009813	WITHOUT_CLASSIFICATION	0.008266132899018659	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9932162554090491	WITHOUT_CLASSIFICATION	0.006783744590950889	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9991096848395237	WITHOUT_CLASSIFICATION	8.90315160476346E-4	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9978592046580925	WITHOUT_CLASSIFICATION	0.0021407953419074616	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998055349503152	WITHOUT_CLASSIFICATION	1.9446504968475355E-4	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9979037064059937	WITHOUT_CLASSIFICATION	0.0020962935940062916	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999842691893608	WITHOUT_CLASSIFICATION	1.573081063922713E-5	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999932371538671	WITHOUT_CLASSIFICATION	6.762846132797485E-6	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999814687186013	WITHOUT_CLASSIFICATION	1.8531281398759725E-5	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998476256284735	WITHOUT_CLASSIFICATION	1.5237437152644745E-4	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999960664469084	WITHOUT_CLASSIFICATION	3.933553091621285E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999903808577202	WITHOUT_CLASSIFICATION	9.619142279782752E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999616749717799	WITHOUT_CLASSIFICATION	3.832502822014721E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999896439534365	WITHOUT_CLASSIFICATION	1.0356046563492931E-4	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999001536961769	WITHOUT_CLASSIFICATION	9.984630382304996E-5	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999192678142298	WITHOUT_CLASSIFICATION	8.07321857701403E-5	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998931791308575	WITHOUT_CLASSIFICATION	1.0682086914249658E-4	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999337938010774	WITHOUT_CLASSIFICATION	6.620619892254712E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999478483768632	WITHOUT_CLASSIFICATION	5.215162313676612E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999949799239534	WITHOUT_CLASSIFICATION	5.020076046660628E-6	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999897438878181	WITHOUT_CLASSIFICATION	1.0256112181918594E-5	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999563891641606	WITHOUT_CLASSIFICATION	4.361083583938401E-5	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999307685859157	WITHOUT_CLASSIFICATION	6.923141408439237E-5	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999674885761795	WITHOUT_CLASSIFICATION	3.251142382059239E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999505678486026	WITHOUT_CLASSIFICATION	4.943215139744125E-5	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999200964599485	WITHOUT_CLASSIFICATION	7.990354005149893E-5	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999580504045653	WITHOUT_CLASSIFICATION	4.1949595434711066E-5	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998413901160104	WITHOUT_CLASSIFICATION	1.5860988398960123E-4	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9886104245040821	WITHOUT_CLASSIFICATION	0.011389575495917948	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998135798196185	WITHOUT_CLASSIFICATION	1.864201803814162E-4	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999336064376504	WITHOUT_CLASSIFICATION	6.639356234956558E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999676014787844	WITHOUT_CLASSIFICATION	3.239852121560624E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.681455352981016	IMPLEMENTATION	0.31854464701898394	WITHOUT_CLASSIFICATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9989127443055049	WITHOUT_CLASSIFICATION	0.0010872556944950874	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999700159412322	WITHOUT_CLASSIFICATION	2.9984058767673903E-5	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999970787247712	WITHOUT_CLASSIFICATION	2.9212752288028473E-5	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999708862157091	WITHOUT_CLASSIFICATION	2.911378429100456E-5	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999727666376116	WITHOUT_CLASSIFICATION	2.723336238849543E-5	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999915778721451	WITHOUT_CLASSIFICATION	8.422127854905565E-5	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999966597310475	WITHOUT_CLASSIFICATION	3.3402689523992753E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9984890923815611	WITHOUT_CLASSIFICATION	0.001510907618438816	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9984890923815611	WITHOUT_CLASSIFICATION	0.001510907618438816	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999985655366	WITHOUT_CLASSIFICATION	1.434463448467495E-9	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9997316458235407	WITHOUT_CLASSIFICATION	2.683541764592993E-4	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999992260865063	WITHOUT_CLASSIFICATION	7.739134937003491E-7	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999926133076046	WITHOUT_CLASSIFICATION	7.386692395414953E-6	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999680832541654	WITHOUT_CLASSIFICATION	3.191674583455014E-5	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999491642577074	WITHOUT_CLASSIFICATION	5.083574229270063E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999948832899926	WITHOUT_CLASSIFICATION	5.116710007337406E-6	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999995538571184	WITHOUT_CLASSIFICATION	4.4614288169105825E-7	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999962412427952	WITHOUT_CLASSIFICATION	3.7587572048845973E-6	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999992972621446	WITHOUT_CLASSIFICATION	7.027378552879577E-7	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999957314029772	WITHOUT_CLASSIFICATION	4.268597022820688E-6	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9995485061030439	WITHOUT_CLASSIFICATION	4.514938969561051E-4	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998561981468	WITHOUT_CLASSIFICATION	1.438018531676587E-7	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999647438162119	WITHOUT_CLASSIFICATION	3.5256183788041666E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999891515450536	WITHOUT_CLASSIFICATION	1.0848454946436072E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999891515450536	WITHOUT_CLASSIFICATION	1.0848454946436072E-5	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999947059901334	WITHOUT_CLASSIFICATION	5.2940098665736095E-6	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998995825356558	WITHOUT_CLASSIFICATION	1.0041746434424388E-4	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.99997614685889	WITHOUT_CLASSIFICATION	2.385314110996526E-5	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999963644357147	WITHOUT_CLASSIFICATION	3.635564285181998E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999961217026239	WITHOUT_CLASSIFICATION	3.878297376101003E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999370443372443	WITHOUT_CLASSIFICATION	6.295566275568982E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9997997994438247	WITHOUT_CLASSIFICATION	2.0020055617539137E-4	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.99999485027873	WITHOUT_CLASSIFICATION	5.149721269946696E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9999910657856309	WITHOUT_CLASSIFICATION	8.93421436898994E-6	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9996477442582704	WITHOUT_CLASSIFICATION	3.522557417295705E-4	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998435304608938	WITHOUT_CLASSIFICATION	1.56469539106243E-4	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9955638249432388	WITHOUT_CLASSIFICATION	0.004436175056761258	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998837399630391	WITHOUT_CLASSIFICATION	1.1626003696087375E-4	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999930696560734	WITHOUT_CLASSIFICATION	6.930343926548016E-6	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9994984828717166	WITHOUT_CLASSIFICATION	5.015171282835058E-4	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998551434775491	WITHOUT_CLASSIFICATION	1.4485652245098483E-4	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9997698069181945	WITHOUT_CLASSIFICATION	2.3019308180537498E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968634198451	WITHOUT_CLASSIFICATION	3.1365801548915263E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999994480325132	WITHOUT_CLASSIFICATION	5.519674867482472E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999882766061822	WITHOUT_CLASSIFICATION	1.172339381772376E-5	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999978941833881	WITHOUT_CLASSIFICATION	2.1058166118735714E-6	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999991776639938	WITHOUT_CLASSIFICATION	8.223360062171139E-7	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999998932706012	WITHOUT_CLASSIFICATION	1.0672939875444074E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999980629212102	WITHOUT_CLASSIFICATION	1.9370787897514534E-6	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999894717946505	WITHOUT_CLASSIFICATION	1.0528205349567559E-5	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999192544105168	WITHOUT_CLASSIFICATION	8.074558948323883E-5	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999435900051179	WITHOUT_CLASSIFICATION	5.6409994881994544E-5	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9971779710227181	WITHOUT_CLASSIFICATION	0.0028220289772819566	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998587934762276	WITHOUT_CLASSIFICATION	1.412065237723748E-4	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9973432606184796	WITHOUT_CLASSIFICATION	0.0026567393815204172	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998404217282345	WITHOUT_CLASSIFICATION	1.5957827176551375E-4	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999966968584018	WITHOUT_CLASSIFICATION	3.303141598272485E-6	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999882382634274	WITHOUT_CLASSIFICATION	1.1761736572480817E-5	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999856833765159	WITHOUT_CLASSIFICATION	1.4316623483999541E-5	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999822357073476	WITHOUT_CLASSIFICATION	1.7764292652418332E-5	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9922199901890852	WITHOUT_CLASSIFICATION	0.007780009810914797	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9869997231019727	WITHOUT_CLASSIFICATION	0.013000276898027388	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9993839967630943	WITHOUT_CLASSIFICATION	6.16003236905618E-4	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999837532247187	WITHOUT_CLASSIFICATION	1.6246775281304907E-5	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999987656336908	WITHOUT_CLASSIFICATION	1.2343663091434597E-6	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9944921257410919	WITHOUT_CLASSIFICATION	0.005507874258908058	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999999761143964	WITHOUT_CLASSIFICATION	2.3885603595612796E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995927482477703	WITHOUT_CLASSIFICATION	4.072517522297015E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995927482477703	WITHOUT_CLASSIFICATION	4.072517522297015E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999978441563275	WITHOUT_CLASSIFICATION	2.155843672426623E-6	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999997095713925	WITHOUT_CLASSIFICATION	2.9042860745483003E-7	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9997837120151103	WITHOUT_CLASSIFICATION	2.1628798488974678E-4	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999836051615819	WITHOUT_CLASSIFICATION	1.639483841804336E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9587094604464296	WITHOUT_CLASSIFICATION	0.04129053955357045	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999987889862406	WITHOUT_CLASSIFICATION	1.2110137593412907E-6	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999725276720719	WITHOUT_CLASSIFICATION	2.7472327928161243E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997335485946326	WITHOUT_CLASSIFICATION	2.664514053674438E-4	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999897351252616	WITHOUT_CLASSIFICATION	1.0264874738394768E-5	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997243048044613	WITHOUT_CLASSIFICATION	2.75695195538679E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999668867403176	WITHOUT_CLASSIFICATION	3.3113259682469795E-5	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999067892918	WITHOUT_CLASSIFICATION	9.321070814234522E-8	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999975699460976	WITHOUT_CLASSIFICATION	2.4300539024510888E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9960917375675329	WITHOUT_CLASSIFICATION	0.003908262432467045	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999579398990559	WITHOUT_CLASSIFICATION	4.206010094414181E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999802695046872	WITHOUT_CLASSIFICATION	1.973049531282111E-5	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999994623102476	WITHOUT_CLASSIFICATION	5.376897524034124E-6	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9998705444629531	WITHOUT_CLASSIFICATION	1.2945553704685482E-4	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999693263670648	WITHOUT_CLASSIFICATION	3.067363293520754E-5	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999897245083318	WITHOUT_CLASSIFICATION	1.0275491668191023E-4	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999970158333797	WITHOUT_CLASSIFICATION	2.984166620289249E-6	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9992965135519688	WITHOUT_CLASSIFICATION	7.034864480312546E-4	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9994439327106409	WITHOUT_CLASSIFICATION	5.56067289359144E-4	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999072240987671	WITHOUT_CLASSIFICATION	9.277590123294346E-5	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999818604171234	WITHOUT_CLASSIFICATION	1.8139582876514792E-5	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999570155419143	WITHOUT_CLASSIFICATION	4.298445808574346E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9990438648079494	WITHOUT_CLASSIFICATION	9.56135192050563E-4	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9998176308599668	WITHOUT_CLASSIFICATION	1.8236914003318756E-4	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.998954003285991	WITHOUT_CLASSIFICATION	0.0010459967140090056	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999135376247703	WITHOUT_CLASSIFICATION	8.646237522970741E-5	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9992726990298189	WITHOUT_CLASSIFICATION	7.273009701810999E-4	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999992745670173	WITHOUT_CLASSIFICATION	7.254329826697849E-7	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999998422571755	WITHOUT_CLASSIFICATION	1.5774282446860786E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999701131881563	WITHOUT_CLASSIFICATION	2.9886811843550676E-5	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999840354775	WITHOUT_CLASSIFICATION	1.596452246105378E-8	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999451842750045	WITHOUT_CLASSIFICATION	5.4815724995592304E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999959058407505	WITHOUT_CLASSIFICATION	4.094159249609296E-6	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998815854946878	WITHOUT_CLASSIFICATION	1.184145053123103E-4	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999995088142814	WITHOUT_CLASSIFICATION	4.911857185901166E-6	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999885317488433	WITHOUT_CLASSIFICATION	1.1468251156693173E-4	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999996626233673	WITHOUT_CLASSIFICATION	3.3737663270519178E-6	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999819018168763	WITHOUT_CLASSIFICATION	1.8098183123743334E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999996463142649	WITHOUT_CLASSIFICATION	3.536857351362865E-7	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999799315769052	WITHOUT_CLASSIFICATION	2.0068423094683845E-5	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9997792180048221	WITHOUT_CLASSIFICATION	2.2078199517788267E-4	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999818110936148	WITHOUT_CLASSIFICATION	1.8188906385123222E-5	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9908975742876672	WITHOUT_CLASSIFICATION	0.009102425712332765	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999010986549	WITHOUT_CLASSIFICATION	9.890134507838185E-8	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998561981468	WITHOUT_CLASSIFICATION	1.438018531676587E-7	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999354770757727	WITHOUT_CLASSIFICATION	6.452292422729272E-5	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999995606487017	WITHOUT_CLASSIFICATION	4.3935129845029814E-7	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9977266543430479	WITHOUT_CLASSIFICATION	0.002273345656952107	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999992024327409	WITHOUT_CLASSIFICATION	7.975672591449255E-7	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999302123264	WITHOUT_CLASSIFICATION	6.978767359577796E-8	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9995813589298396	WITHOUT_CLASSIFICATION	4.186410701604796E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998422031929026	WITHOUT_CLASSIFICATION	1.5779680709748957E-4	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7832261546306061	WITHOUT_CLASSIFICATION	0.21677384536939392	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999994350987587	WITHOUT_CLASSIFICATION	5.649012414155646E-7	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9975405994962248	WITHOUT_CLASSIFICATION	0.002459400503775264	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999987173677658	WITHOUT_CLASSIFICATION	1.2826322342070507E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9994801152685711	WITHOUT_CLASSIFICATION	5.198847314289249E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994460666410181	WITHOUT_CLASSIFICATION	5.539333589819907E-4	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999894230740145	WITHOUT_CLASSIFICATION	1.0576925985402766E-5	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9853970700131861	WITHOUT_CLASSIFICATION	0.014602929986814	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948375051809	WITHOUT_CLASSIFICATION	5.162494819103689E-5	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999753050877153	WITHOUT_CLASSIFICATION	2.4694912284812453E-5	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9970374797819891	WITHOUT_CLASSIFICATION	0.002962520218010914	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999854352052658	WITHOUT_CLASSIFICATION	1.4564794734181152E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999948375051809	WITHOUT_CLASSIFICATION	5.162494819103689E-5	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.8702420003894442	WITHOUT_CLASSIFICATION	0.12975799961055573	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9993233186010714	WITHOUT_CLASSIFICATION	6.766813989285763E-4	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999742182380634	WITHOUT_CLASSIFICATION	2.5781761936510958E-5	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9982803790368873	WITHOUT_CLASSIFICATION	0.0017196209631127179	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998893181638746	WITHOUT_CLASSIFICATION	1.1068183612546112E-4	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998196054888521	WITHOUT_CLASSIFICATION	1.803945111479503E-4	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999960715325394	WITHOUT_CLASSIFICATION	3.928467460534097E-6	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9602418026073896	WITHOUT_CLASSIFICATION	0.039758197392610384	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999966950633019	WITHOUT_CLASSIFICATION	3.3049366979617372E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998455701740979	WITHOUT_CLASSIFICATION	1.544298259021005E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998592915523519	WITHOUT_CLASSIFICATION	1.407084476481275E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9939883375680076	WITHOUT_CLASSIFICATION	0.006011662431992347	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999931017014624	WITHOUT_CLASSIFICATION	6.898298537564569E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9749262807433325	WITHOUT_CLASSIFICATION	0.025073719256667445	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9997548094044615	WITHOUT_CLASSIFICATION	2.451905955384766E-4	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998359649515869	WITHOUT_CLASSIFICATION	1.6403504841319274E-4	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999264951611136	WITHOUT_CLASSIFICATION	7.350483888640876E-4	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999961956443325	WITHOUT_CLASSIFICATION	3.804355667501162E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999929913819311	WITHOUT_CLASSIFICATION	7.008618068942401E-6	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9978987900488379	WITHOUT_CLASSIFICATION	0.0021012099511621726	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9980611964196756	WITHOUT_CLASSIFICATION	0.0019388035803244799	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9967719804567724	WITHOUT_CLASSIFICATION	0.0032280195432276304	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999968780251113	WITHOUT_CLASSIFICATION	3.1219748886907586E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9995056649279945	WITHOUT_CLASSIFICATION	4.943350720055398E-4	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999974412539	WITHOUT_CLASSIFICATION	2.5587461197331604E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999923113765325	WITHOUT_CLASSIFICATION	7.688623467448784E-6	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999894795538834	WITHOUT_CLASSIFICATION	1.0520446116617247E-5	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9983548791020257	WITHOUT_CLASSIFICATION	0.001645120897974229	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999278725168196	WITHOUT_CLASSIFICATION	7.212748318040734E-5	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9472773949283825	WITHOUT_CLASSIFICATION	0.05272260507161749	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9966223993842789	WITHOUT_CLASSIFICATION	0.0033776006157211647	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999614209097855	WITHOUT_CLASSIFICATION	3.857909021452329E-5	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999379863145504	WITHOUT_CLASSIFICATION	6.201368544962016E-5	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999641606426807	WITHOUT_CLASSIFICATION	3.583935731929039E-5	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999949152486483	WITHOUT_CLASSIFICATION	5.084751351725189E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999966889347334	WITHOUT_CLASSIFICATION	3.311065266698069E-6	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999710538638	WITHOUT_CLASSIFICATION	2.894613619814353E-7	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998795153104	WITHOUT_CLASSIFICATION	1.2048468956468062E-7	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996194064647839	WITHOUT_CLASSIFICATION	3.80593535216189E-4	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999240922208344	WITHOUT_CLASSIFICATION	7.590777916546498E-5	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9990490499146226	WITHOUT_CLASSIFICATION	9.509500853772765E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999874598518109	WITHOUT_CLASSIFICATION	1.2540148189129577E-5	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999874598518109	WITHOUT_CLASSIFICATION	1.2540148189129577E-5	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999676814048258	WITHOUT_CLASSIFICATION	3.231859517424075E-5	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999980850368991	WITHOUT_CLASSIFICATION	1.914963100953005E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999335948660882	WITHOUT_CLASSIFICATION	6.640513391176029E-5	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999983633892747	WITHOUT_CLASSIFICATION	1.6366107252533916E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999200684233582	WITHOUT_CLASSIFICATION	7.993157664172926E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999200684233582	WITHOUT_CLASSIFICATION	7.993157664172926E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999658945942128	WITHOUT_CLASSIFICATION	3.4105405787095094E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999782768770974	WITHOUT_CLASSIFICATION	2.1723122902600774E-5	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9996918736577796	WITHOUT_CLASSIFICATION	3.081263422204419E-4	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9997971051666215	WITHOUT_CLASSIFICATION	2.028948333786253E-4	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9998356055809997	WITHOUT_CLASSIFICATION	1.643944190002093E-4	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9990806347016035	WITHOUT_CLASSIFICATION	9.193652983965141E-4	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.8965238070301266	WITHOUT_CLASSIFICATION	0.1034761929698734	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999790288613156	WITHOUT_CLASSIFICATION	2.097113868441813E-5	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999958075622314	WITHOUT_CLASSIFICATION	4.192437768604253E-5	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999477447296415	WITHOUT_CLASSIFICATION	5.2255270358470705E-5	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999860214833518	WITHOUT_CLASSIFICATION	1.397851664818911E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818031913097	WITHOUT_CLASSIFICATION	1.8196808690350467E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818031913097	WITHOUT_CLASSIFICATION	1.8196808690350467E-5	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998359649515869	WITHOUT_CLASSIFICATION	1.6403504841319274E-4	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999469153594037	WITHOUT_CLASSIFICATION	5.308464059625572E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999512474888107	WITHOUT_CLASSIFICATION	4.8752511189295677E-5	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9998404363504105	WITHOUT_CLASSIFICATION	1.5956364958936045E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999675360746003	WITHOUT_CLASSIFICATION	3.246392539967339E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895419993493	WITHOUT_CLASSIFICATION	1.0458000650600695E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999986306426348	WITHOUT_CLASSIFICATION	1.3693573652069562E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999507020860322	WITHOUT_CLASSIFICATION	4.929791396787784E-5	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9998062861140817	WITHOUT_CLASSIFICATION	1.937138859182962E-4	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999925915516545	WITHOUT_CLASSIFICATION	7.408448345469588E-6	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9998455701740979	WITHOUT_CLASSIFICATION	1.544298259021005E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999566566420238	WITHOUT_CLASSIFICATION	4.3343357976133045E-5	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998842679773613	WITHOUT_CLASSIFICATION	1.1573202263868198E-4	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999975967041743	WITHOUT_CLASSIFICATION	2.4032958257275017E-6	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999673963178665	WITHOUT_CLASSIFICATION	3.260368213352407E-5	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999043169671015	WITHOUT_CLASSIFICATION	9.56830328985885E-5	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998922025584435	WITHOUT_CLASSIFICATION	1.0779744155644532E-4	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997923947175855	WITHOUT_CLASSIFICATION	2.0760528241462855E-4	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9995622053954032	WITHOUT_CLASSIFICATION	4.3779460459679757E-4	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997460516108458	WITHOUT_CLASSIFICATION	2.5394838915415876E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9893718071227214	WITHOUT_CLASSIFICATION	0.010628192877278559	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9893718071227214	WITHOUT_CLASSIFICATION	0.010628192877278559	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999595725706868	WITHOUT_CLASSIFICATION	4.042742931313467E-5	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999933273211389	WITHOUT_CLASSIFICATION	6.672678861088421E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999195696560749	WITHOUT_CLASSIFICATION	8.043034392504712E-5	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998921697554711	WITHOUT_CLASSIFICATION	1.0783024452880679E-4	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999122259638736	WITHOUT_CLASSIFICATION	8.777403612639813E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997357709433654	WITHOUT_CLASSIFICATION	2.6422905663454254E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999762267868108	WITHOUT_CLASSIFICATION	2.3773213189327016E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999986127256	WITHOUT_CLASSIFICATION	1.3872743174475108E-9	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.99980944741762	WITHOUT_CLASSIFICATION	1.905525823799582E-4	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998294825399046	WITHOUT_CLASSIFICATION	1.70517460095421E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998988964854654	WITHOUT_CLASSIFICATION	1.0110351453471827E-4	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9994074846032717	WITHOUT_CLASSIFICATION	5.925153967282584E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998551982373436	WITHOUT_CLASSIFICATION	1.4480176265627885E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999665139041531	WITHOUT_CLASSIFICATION	3.348609584681411E-5	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999956793293914	WITHOUT_CLASSIFICATION	4.320670608587511E-6	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998575307673662	WITHOUT_CLASSIFICATION	1.4246923263388567E-4	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999987806728363	WITHOUT_CLASSIFICATION	1.2193271637157015E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999893726494683	WITHOUT_CLASSIFICATION	1.0627350531694512E-4	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9977740942215204	WITHOUT_CLASSIFICATION	0.0022259057784796005	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999989281751414	WITHOUT_CLASSIFICATION	1.0718248586300288E-6	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999993878707605	WITHOUT_CLASSIFICATION	6.121292394979283E-6	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999535590351	WITHOUT_CLASSIFICATION	4.6440964888033796E-8	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999990954634896	WITHOUT_CLASSIFICATION	9.045365104011476E-6	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999891393719	WITHOUT_CLASSIFICATION	1.0860628096485451E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999718675898663	WITHOUT_CLASSIFICATION	2.8132410133677685E-5	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999718675898663	WITHOUT_CLASSIFICATION	2.8132410133677685E-5	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9983335416304936	WITHOUT_CLASSIFICATION	0.0016664583695064116	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9890380037468157	WITHOUT_CLASSIFICATION	0.010961996253184253	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999951160489847	WITHOUT_CLASSIFICATION	4.883951015262141E-6	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998346940870608	WITHOUT_CLASSIFICATION	1.6530591293918638E-4	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999835360358322	WITHOUT_CLASSIFICATION	1.6463964167774366E-5	IMPLEMENTATION
