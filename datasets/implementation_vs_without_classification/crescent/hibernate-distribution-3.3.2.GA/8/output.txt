// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.999242719168155	WITHOUT_CLASSIFICATION	7.572808318449921E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.999242719168155	WITHOUT_CLASSIFICATION	7.572808318449921E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.5345580301773404	WITHOUT_CLASSIFICATION	0.4654419698226597	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.7117114296325454	WITHOUT_CLASSIFICATION	0.28828857036745453	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9770499636714811	WITHOUT_CLASSIFICATION	0.022950036328518806	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9995913018887935	IMPLEMENTATION	4.0869811120644605E-4	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9237725967162307	WITHOUT_CLASSIFICATION	0.0762274032837693	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.8483201028648769	IMPLEMENTATION	0.15167989713512317	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9335711894680303	IMPLEMENTATION	0.0664288105319697	WITHOUT_CLASSIFICATION
//TODO: native ids	IMPLEMENTATION	0.8663343020233982	IMPLEMENTATION	0.13366569797660174	WITHOUT_CLASSIFICATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9654594377419621	WITHOUT_CLASSIFICATION	0.03454056225803791	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9946461525746335	IMPLEMENTATION	0.005353847425366496	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9556267545080908	IMPLEMENTATION	0.04437324549190927	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9556267545080908	IMPLEMENTATION	0.04437324549190927	WITHOUT_CLASSIFICATION
/**	IMPLEMENTATION	0.731161669790279	IMPLEMENTATION	0.268838330209721	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9249054897028922	IMPLEMENTATION	0.0750945102971078	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999882505250096	IMPLEMENTATION	1.1749474990417526E-5	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8883918420175295	WITHOUT_CLASSIFICATION	0.11160815798247048	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999930749375	WITHOUT_CLASSIFICATION	6.925062550966326E-9	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.996381151922188	IMPLEMENTATION	0.0036188480778119635	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.7971190799287647	IMPLEMENTATION	0.2028809200712352	WITHOUT_CLASSIFICATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9994251479346037	WITHOUT_CLASSIFICATION	5.748520653963352E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.8646836748874034	IMPLEMENTATION	0.1353163251125966	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8394003794581278	IMPLEMENTATION	0.16059962054187218	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8394003794581278	IMPLEMENTATION	0.16059962054187218	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.8096046432750349	IMPLEMENTATION	0.19039535672496521	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9704363081284172	IMPLEMENTATION	0.029563691871582833	WITHOUT_CLASSIFICATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9932315930147302	IMPLEMENTATION	0.006768406985269815	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9805606597012333	IMPLEMENTATION	0.019439340298766605	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9904287427360291	IMPLEMENTATION	0.009571257263970944	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.7862647910818003	IMPLEMENTATION	0.21373520891819978	WITHOUT_CLASSIFICATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9587759794075924	IMPLEMENTATION	0.04122402059240757	WITHOUT_CLASSIFICATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9988848987904583	WITHOUT_CLASSIFICATION	0.0011151012095417649	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.5722570643660696	IMPLEMENTATION	0.4277429356339303	WITHOUT_CLASSIFICATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9982702532464166	IMPLEMENTATION	0.0017297467535834028	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9954234418759057	WITHOUT_CLASSIFICATION	0.0045765581240942415	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.999036569251868	IMPLEMENTATION	9.634307481321219E-4	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5070487370574812	WITHOUT_CLASSIFICATION	0.49295126294251873	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9423655841255938	IMPLEMENTATION	0.0576344158744063	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.7089133746022193	WITHOUT_CLASSIFICATION	0.2910866253977808	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.7089133746022193	WITHOUT_CLASSIFICATION	0.2910866253977808	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5729434445845298	WITHOUT_CLASSIFICATION	0.4270565554154703	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9996776920374882	WITHOUT_CLASSIFICATION	3.223079625116722E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9267839767261558	WITHOUT_CLASSIFICATION	0.07321602327384423	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9966740253105306	IMPLEMENTATION	0.0033259746894694527	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9076035737500732	IMPLEMENTATION	0.09239642624992678	WITHOUT_CLASSIFICATION
//TODO: formulas ?	IMPLEMENTATION	0.7290573269206375	WITHOUT_CLASSIFICATION	0.2709426730793625	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.6322865236215529	IMPLEMENTATION	0.36771347637844704	WITHOUT_CLASSIFICATION
// todo : cache this sql...	IMPLEMENTATION	0.9999855397436401	WITHOUT_CLASSIFICATION	1.4460256359862045E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9801533051894565	IMPLEMENTATION	0.019846694810543516	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.7863331139020665	WITHOUT_CLASSIFICATION	0.21366688609793352	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9988381602252714	IMPLEMENTATION	0.0011618397747286929	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9920232920088384	WITHOUT_CLASSIFICATION	0.00797670799116162	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.5179528546892737	WITHOUT_CLASSIFICATION	0.4820471453107262	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.5038414258567583	WITHOUT_CLASSIFICATION	0.4961585741432417	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9818674523953208	IMPLEMENTATION	0.018132547604679163	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.5038414258567583	WITHOUT_CLASSIFICATION	0.4961585741432417	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9979575786570181	IMPLEMENTATION	0.002042421342981874	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9957429530404431	IMPLEMENTATION	0.004257046959556812	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.5038414258567583	WITHOUT_CLASSIFICATION	0.4961585741432417	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9995742552997084	WITHOUT_CLASSIFICATION	4.257447002914877E-4	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9997540945214207	WITHOUT_CLASSIFICATION	2.459054785792701E-4	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.999263960873742	IMPLEMENTATION	7.36039126257925E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.997752935703177	WITHOUT_CLASSIFICATION	0.0022470642968229725	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999678378721828	WITHOUT_CLASSIFICATION	3.2162127817205396E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990625052018	WITHOUT_CLASSIFICATION	9.374947981802255E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990625052018	WITHOUT_CLASSIFICATION	9.374947981802255E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999976069447051	WITHOUT_CLASSIFICATION	2.3930552949272807E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998458755399	WITHOUT_CLASSIFICATION	1.541244601699061E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999991198859282	WITHOUT_CLASSIFICATION	8.801140718200078E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998045878453	WITHOUT_CLASSIFICATION	1.9541215462483996E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998045878453	WITHOUT_CLASSIFICATION	1.9541215462483996E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998885641947	WITHOUT_CLASSIFICATION	1.1143580521608994E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993652651266	WITHOUT_CLASSIFICATION	6.347348735137861E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999631168817393	WITHOUT_CLASSIFICATION	3.6883118260691874E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944634869853	WITHOUT_CLASSIFICATION	5.536513014753299E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999966230606278	WITHOUT_CLASSIFICATION	3.3769393723197675E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999966230606278	WITHOUT_CLASSIFICATION	3.3769393723197675E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999980221885604	WITHOUT_CLASSIFICATION	1.9778114396486913E-6	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997726206628493	WITHOUT_CLASSIFICATION	2.2737933715074219E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999987760201945	WITHOUT_CLASSIFICATION	1.2239798055287467E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999882115333459	WITHOUT_CLASSIFICATION	1.1788466653956174E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999991352366	WITHOUT_CLASSIFICATION	8.647633612195513E-10	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999765731199	WITHOUT_CLASSIFICATION	2.342688010626099E-8	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999944526079841	WITHOUT_CLASSIFICATION	5.54739201586243E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999987221911028	WITHOUT_CLASSIFICATION	1.2778088972337259E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999711245515769	WITHOUT_CLASSIFICATION	2.887544842307079E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9966444444563699	WITHOUT_CLASSIFICATION	0.0033555555436301644	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999927674350612	WITHOUT_CLASSIFICATION	7.232564938822501E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999970218624264	WITHOUT_CLASSIFICATION	2.9781375734192455E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999937301244	WITHOUT_CLASSIFICATION	6.269875667977323E-9	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999965621248279	WITHOUT_CLASSIFICATION	3.4378751721332585E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999965621248279	WITHOUT_CLASSIFICATION	3.4378751721332585E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999997783578443	WITHOUT_CLASSIFICATION	2.216421556783457E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999958234072541	WITHOUT_CLASSIFICATION	4.176592745947626E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998269504861	WITHOUT_CLASSIFICATION	1.730495139673611E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998808478042	WITHOUT_CLASSIFICATION	1.1915219582183527E-7	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999997349452886	WITHOUT_CLASSIFICATION	2.6505471148117416E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.731161669790279	IMPLEMENTATION	0.268838330209721	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.731161669790279	IMPLEMENTATION	0.268838330209721	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999584749913	WITHOUT_CLASSIFICATION	4.1525008727913876E-8	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999998376063483	WITHOUT_CLASSIFICATION	1.6239365170408994E-6	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999998117370986	WITHOUT_CLASSIFICATION	1.8826290148138937E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999788700031995	WITHOUT_CLASSIFICATION	2.1129996800442583E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999971306770937	WITHOUT_CLASSIFICATION	2.869322906341306E-6	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953746592025	WITHOUT_CLASSIFICATION	4.625340797553074E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985718090454	WITHOUT_CLASSIFICATION	1.4281909546208497E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999906173269288	WITHOUT_CLASSIFICATION	9.382673071241814E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999909895586494	WITHOUT_CLASSIFICATION	9.010441350678003E-6	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999952644412	WITHOUT_CLASSIFICATION	4.7355588593278355E-9	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999891773133656	WITHOUT_CLASSIFICATION	1.0822686634374833E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999909895586494	WITHOUT_CLASSIFICATION	9.010441350678003E-6	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999891773133656	WITHOUT_CLASSIFICATION	1.0822686634374833E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999777657986971	WITHOUT_CLASSIFICATION	2.2234201302948222E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999999929213317	WITHOUT_CLASSIFICATION	7.078668298071457E-8	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999997715824648	WITHOUT_CLASSIFICATION	2.2841753519589612E-7	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995651851020513	WITHOUT_CLASSIFICATION	4.348148979487343E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999998389299091	WITHOUT_CLASSIFICATION	1.6107009099141075E-7	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999954405303787	WITHOUT_CLASSIFICATION	4.55946962122461E-6	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998296728891812	WITHOUT_CLASSIFICATION	1.703271108188853E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9995592116813997	WITHOUT_CLASSIFICATION	4.407883186002691E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999988732505977	WITHOUT_CLASSIFICATION	1.1267494023155352E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999590402947672	WITHOUT_CLASSIFICATION	4.095970523271159E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999631367033924	WITHOUT_CLASSIFICATION	3.686329660762786E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999981022375478	WITHOUT_CLASSIFICATION	1.8977624521727551E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999821931183	WITHOUT_CLASSIFICATION	1.7806881738593153E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999809852335344	WITHOUT_CLASSIFICATION	1.9014766465560113E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999990366552411	WITHOUT_CLASSIFICATION	9.633447587755015E-7	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999993906759461	WITHOUT_CLASSIFICATION	6.093240538608938E-7	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999789421965	WITHOUT_CLASSIFICATION	2.1057803502406846E-7	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999923535029046	WITHOUT_CLASSIFICATION	7.6464970954201E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995228444373	WITHOUT_CLASSIFICATION	4.771555627142007E-7	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995649535176	WITHOUT_CLASSIFICATION	4.35046482428814E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999991102365916	WITHOUT_CLASSIFICATION	8.897634084352523E-7	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999973552255217	WITHOUT_CLASSIFICATION	2.644774478388531E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999991803306695	WITHOUT_CLASSIFICATION	8.196693305579496E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999991662806299	WITHOUT_CLASSIFICATION	8.337193701148118E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9566690691791876	WITHOUT_CLASSIFICATION	0.043330930820812324	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999999775591863	WITHOUT_CLASSIFICATION	2.2440813689980175E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999995762660564	WITHOUT_CLASSIFICATION	4.23733943594406E-6	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9975111985629366	WITHOUT_CLASSIFICATION	0.0024888014370633635	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999998503361461	WITHOUT_CLASSIFICATION	1.4966385384548894E-7	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999917699264	WITHOUT_CLASSIFICATION	8.230073556051826E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999952861335641	WITHOUT_CLASSIFICATION	4.713866435912749E-6	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999979679364587	WITHOUT_CLASSIFICATION	2.032063541310576E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999984599073225	WITHOUT_CLASSIFICATION	1.5400926774887798E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999968436616	WITHOUT_CLASSIFICATION	3.156338372372772E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999543645984	WITHOUT_CLASSIFICATION	4.5635401525574385E-8	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999881363	WITHOUT_CLASSIFICATION	1.1863786829440856E-11	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999968436616	WITHOUT_CLASSIFICATION	3.156338372372772E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997903937666	WITHOUT_CLASSIFICATION	2.0960623339207085E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999612809437087	WITHOUT_CLASSIFICATION	3.871905629127917E-5	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999996938442781	WITHOUT_CLASSIFICATION	3.061557218505165E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999993284886716	WITHOUT_CLASSIFICATION	6.715113284769429E-7	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999995075737562	WITHOUT_CLASSIFICATION	4.924262438435685E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979010555	WITHOUT_CLASSIFICATION	2.0989444975164362E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979010555	WITHOUT_CLASSIFICATION	2.0989444975164362E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999849524385136	WITHOUT_CLASSIFICATION	1.5047561486501676E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997973040883	WITHOUT_CLASSIFICATION	2.0269591167194986E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999504499241831	WITHOUT_CLASSIFICATION	4.9550075816978E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999998586567	WITHOUT_CLASSIFICATION	1.4134330283984882E-9	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996366206343	WITHOUT_CLASSIFICATION	3.6337936568736707E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999796209684607	WITHOUT_CLASSIFICATION	2.037903153923789E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999977844819212	WITHOUT_CLASSIFICATION	2.2155180788443825E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999925602213069	WITHOUT_CLASSIFICATION	7.4397786932003665E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999959430430936	WITHOUT_CLASSIFICATION	4.05695690642565E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999898260782	WITHOUT_CLASSIFICATION	1.0173921823739176E-8	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998939517213	WITHOUT_CLASSIFICATION	1.0604827868097029E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998939517213	WITHOUT_CLASSIFICATION	1.0604827868097029E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999998561922606	WITHOUT_CLASSIFICATION	1.4380773939223891E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999996469263871	WITHOUT_CLASSIFICATION	3.530736129695494E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999986036104005	WITHOUT_CLASSIFICATION	1.3963895995200265E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998939517213	WITHOUT_CLASSIFICATION	1.0604827868097029E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999998561922606	WITHOUT_CLASSIFICATION	1.4380773939223891E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999998561922606	WITHOUT_CLASSIFICATION	1.4380773939223891E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999986901865704	WITHOUT_CLASSIFICATION	1.3098134296052256E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999932951383654	WITHOUT_CLASSIFICATION	6.7048616345678106E-6	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999942995912	WITHOUT_CLASSIFICATION	5.700408803429574E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999924396807	WITHOUT_CLASSIFICATION	7.560319179623068E-9	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999897407560041	WITHOUT_CLASSIFICATION	1.0259243995896153E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999897407560041	WITHOUT_CLASSIFICATION	1.0259243995896153E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999801785601392	WITHOUT_CLASSIFICATION	1.9821439860819774E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999996544357697	WITHOUT_CLASSIFICATION	3.455642303372801E-7	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999998608537787	WITHOUT_CLASSIFICATION	1.3914622134319538E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996132718956	WITHOUT_CLASSIFICATION	3.8672810445705445E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996132718956	WITHOUT_CLASSIFICATION	3.8672810445705445E-7	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999997193689626	WITHOUT_CLASSIFICATION	2.80631037339387E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999981792961361	WITHOUT_CLASSIFICATION	1.8207038639696074E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999875322025	WITHOUT_CLASSIFICATION	1.2467797361862358E-8	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.99999496167078	WITHOUT_CLASSIFICATION	5.0383292201261234E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.999999983356138	WITHOUT_CLASSIFICATION	1.6643861930546798E-8	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997765816147	WITHOUT_CLASSIFICATION	2.2341838530577624E-7	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999728230875534	WITHOUT_CLASSIFICATION	2.717691244651593E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999909881314013	WITHOUT_CLASSIFICATION	9.01186859864276E-6	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999965952270979	WITHOUT_CLASSIFICATION	3.404772902045079E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999875322025	WITHOUT_CLASSIFICATION	1.2467797361862358E-8	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999811854501689	WITHOUT_CLASSIFICATION	1.8814549831104725E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999472429190034	WITHOUT_CLASSIFICATION	5.275708099666532E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999472429190034	WITHOUT_CLASSIFICATION	5.275708099666532E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999994864162	WITHOUT_CLASSIFICATION	5.13583828031603E-10	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999995254680218	WITHOUT_CLASSIFICATION	4.7453197818091806E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999915048451036	WITHOUT_CLASSIFICATION	8.495154896440452E-6	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999886972054738	WITHOUT_CLASSIFICATION	1.1302794526262805E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999934394096103	WITHOUT_CLASSIFICATION	6.560590389681156E-6	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999420848852016	WITHOUT_CLASSIFICATION	5.79151147984E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999941688314345	WITHOUT_CLASSIFICATION	5.831168565437609E-6	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999948015461272	WITHOUT_CLASSIFICATION	5.198453872757171E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999776671695	WITHOUT_CLASSIFICATION	2.2332830535807354E-8	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999776671695	WITHOUT_CLASSIFICATION	2.2332830535807354E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996416697113	WITHOUT_CLASSIFICATION	3.583302886848737E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999678378721828	WITHOUT_CLASSIFICATION	3.2162127817205396E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997554204886	WITHOUT_CLASSIFICATION	2.445795114387243E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998207170171	WITHOUT_CLASSIFICATION	1.7928298297277826E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990625052018	WITHOUT_CLASSIFICATION	9.374947981802255E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999998784122914	WITHOUT_CLASSIFICATION	1.2158770851021778E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999997455224494	WITHOUT_CLASSIFICATION	2.5447755051735925E-7	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999531502742	WITHOUT_CLASSIFICATION	4.684972573987009E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999993044544243	WITHOUT_CLASSIFICATION	6.955455757022452E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999999050104598	WITHOUT_CLASSIFICATION	9.498954019969951E-8	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999955547856191	WITHOUT_CLASSIFICATION	4.445214380951575E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999995356944219	WITHOUT_CLASSIFICATION	4.643055780862014E-7	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999986797353965	WITHOUT_CLASSIFICATION	1.3202646035361688E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998458755399	WITHOUT_CLASSIFICATION	1.541244601699061E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996483896927	WITHOUT_CLASSIFICATION	3.5161030737539707E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996483896927	WITHOUT_CLASSIFICATION	3.5161030737539707E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999994153182018	WITHOUT_CLASSIFICATION	5.846817980766877E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999004874082535	WITHOUT_CLASSIFICATION	9.951259174648466E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999999901688263	WITHOUT_CLASSIFICATION	9.831173692782952E-8	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999998175929447	WITHOUT_CLASSIFICATION	1.8240705528119057E-7	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999996609543654	WITHOUT_CLASSIFICATION	3.390456346206601E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999998773622057	WITHOUT_CLASSIFICATION	1.2263779423584315E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998045878453	WITHOUT_CLASSIFICATION	1.9541215462483996E-7	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999632319445416	WITHOUT_CLASSIFICATION	3.676805545830782E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999998337677496	WITHOUT_CLASSIFICATION	1.6623225038861026E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999985846421698	WITHOUT_CLASSIFICATION	1.4153578301811187E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999997333331314	WITHOUT_CLASSIFICATION	2.6666686858390784E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999968898195419	WITHOUT_CLASSIFICATION	3.110180458140318E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999935236737849	WITHOUT_CLASSIFICATION	6.476326215066778E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999964376941203	WITHOUT_CLASSIFICATION	3.5623058796647506E-6	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999983690693888	WITHOUT_CLASSIFICATION	1.6309306111575902E-6	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999897867467537	WITHOUT_CLASSIFICATION	1.0213253246312526E-4	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999996214426267	WITHOUT_CLASSIFICATION	3.7855737332697803E-7	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999975588296055	WITHOUT_CLASSIFICATION	2.441170394497093E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999954634293914	WITHOUT_CLASSIFICATION	4.5365706086338915E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999992283538287	WITHOUT_CLASSIFICATION	7.716461712659971E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990625052018	WITHOUT_CLASSIFICATION	9.374947981802255E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990625052018	WITHOUT_CLASSIFICATION	9.374947981802255E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999995356944219	WITHOUT_CLASSIFICATION	4.643055780862014E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996483896927	WITHOUT_CLASSIFICATION	3.5161030737539707E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999964376941203	WITHOUT_CLASSIFICATION	3.5623058796647506E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998885641947	WITHOUT_CLASSIFICATION	1.1143580521608994E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999962482760555	WITHOUT_CLASSIFICATION	3.751723944434806E-6	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999790439817815	WITHOUT_CLASSIFICATION	2.095601821846992E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999454245028121	WITHOUT_CLASSIFICATION	5.457549718785632E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999980061879948	WITHOUT_CLASSIFICATION	1.9938120052138497E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999610555356	WITHOUT_CLASSIFICATION	3.89444644922901E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999997833409972	WITHOUT_CLASSIFICATION	2.1665900287436912E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999964447014775	WITHOUT_CLASSIFICATION	3.5552985225606714E-6	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999743768307008	WITHOUT_CLASSIFICATION	2.562316929920435E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999958917793468	WITHOUT_CLASSIFICATION	4.108220653310554E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999975799148748	WITHOUT_CLASSIFICATION	2.4200851251545798E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999975799148748	WITHOUT_CLASSIFICATION	2.4200851251545798E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999943511594	WITHOUT_CLASSIFICATION	5.648840566050794E-9	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999818413162098	WITHOUT_CLASSIFICATION	1.815868379014169E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999910260848281	WITHOUT_CLASSIFICATION	8.973915171819942E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999995251079008	WITHOUT_CLASSIFICATION	4.748920991371726E-7	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999927078619	WITHOUT_CLASSIFICATION	7.2921381275362266E-9	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999876772385387	WITHOUT_CLASSIFICATION	1.2322761461281973E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999999414429163	WITHOUT_CLASSIFICATION	5.855708371106592E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993652651266	WITHOUT_CLASSIFICATION	6.347348735137861E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999979026303227	WITHOUT_CLASSIFICATION	2.097369677227121E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999994311313388	WITHOUT_CLASSIFICATION	5.688686610794143E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999994311313388	WITHOUT_CLASSIFICATION	5.688686610794143E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999999922937301	WITHOUT_CLASSIFICATION	7.70626990738312E-8	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999814712220424	WITHOUT_CLASSIFICATION	1.8528777957581072E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999987000597554	WITHOUT_CLASSIFICATION	1.2999402445737065E-6	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999997436435336	WITHOUT_CLASSIFICATION	2.5635646631719027E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999996534158992	WITHOUT_CLASSIFICATION	3.465841007290285E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999990625052018	WITHOUT_CLASSIFICATION	9.374947981802255E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999995356944219	WITHOUT_CLASSIFICATION	4.643055780862014E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998458755399	WITHOUT_CLASSIFICATION	1.541244601699061E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999964376941203	WITHOUT_CLASSIFICATION	3.5623058796647506E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999964376941203	WITHOUT_CLASSIFICATION	3.5623058796647506E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999526777711	WITHOUT_CLASSIFICATION	4.7322228893923284E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999526777711	WITHOUT_CLASSIFICATION	4.7322228893923284E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999989606232125	WITHOUT_CLASSIFICATION	1.0393767875110763E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999989071703551	WITHOUT_CLASSIFICATION	1.0928296449402683E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999989071703551	WITHOUT_CLASSIFICATION	1.0928296449402683E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999951306589552	WITHOUT_CLASSIFICATION	4.869341044782146E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999981516485833	WITHOUT_CLASSIFICATION	1.8483514166994221E-6	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999998353524795	WITHOUT_CLASSIFICATION	1.6464752047732084E-7	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999969970322881	WITHOUT_CLASSIFICATION	3.0029677119378185E-6	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999996367126294	WITHOUT_CLASSIFICATION	3.63287370574939E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944634869853	WITHOUT_CLASSIFICATION	5.536513014753299E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944634869853	WITHOUT_CLASSIFICATION	5.536513014753299E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9996761999986711	WITHOUT_CLASSIFICATION	3.23800001329009E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999885037084211	WITHOUT_CLASSIFICATION	1.1496291578988013E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999101846301	WITHOUT_CLASSIFICATION	8.981536993452578E-8	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999976543944493	WITHOUT_CLASSIFICATION	2.34560555062922E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999744229058	WITHOUT_CLASSIFICATION	2.557709421935853E-8	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999989232288601	WITHOUT_CLASSIFICATION	1.0767711400215762E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999966230606278	WITHOUT_CLASSIFICATION	3.3769393723197675E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999990764449078	WITHOUT_CLASSIFICATION	9.235550922530036E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999990764449078	WITHOUT_CLASSIFICATION	9.235550922530036E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999980221885604	WITHOUT_CLASSIFICATION	1.9778114396486913E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999980221885604	WITHOUT_CLASSIFICATION	1.9778114396486913E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999719047681085	WITHOUT_CLASSIFICATION	2.8095231891471216E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999719047681085	WITHOUT_CLASSIFICATION	2.8095231891471216E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999975882	WITHOUT_CLASSIFICATION	2.4117999491535675E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999975882	WITHOUT_CLASSIFICATION	2.4117999491535675E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944634869853	WITHOUT_CLASSIFICATION	5.536513014753299E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999966230606278	WITHOUT_CLASSIFICATION	3.3769393723197675E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999990764449078	WITHOUT_CLASSIFICATION	9.235550922530036E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999990764449078	WITHOUT_CLASSIFICATION	9.235550922530036E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999980221885604	WITHOUT_CLASSIFICATION	1.9778114396486913E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999719047681085	WITHOUT_CLASSIFICATION	2.8095231891471216E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999719047681085	WITHOUT_CLASSIFICATION	2.8095231891471216E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999975882	WITHOUT_CLASSIFICATION	2.4117999491535675E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999539398445828	WITHOUT_CLASSIFICATION	4.606015541724372E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999993788758041	WITHOUT_CLASSIFICATION	6.211241958353976E-7	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9993609623591115	WITHOUT_CLASSIFICATION	6.390376408885011E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999517713345268	WITHOUT_CLASSIFICATION	4.822866547303974E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999763625856117	WITHOUT_CLASSIFICATION	2.3637414388331575E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999799153957635	WITHOUT_CLASSIFICATION	2.0084604236557944E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999998543959402	WITHOUT_CLASSIFICATION	1.4560405986974946E-7	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999998114980811	WITHOUT_CLASSIFICATION	1.885019187427065E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999955166090095	WITHOUT_CLASSIFICATION	4.483390990462552E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999994559322155	WITHOUT_CLASSIFICATION	5.440677845007264E-7	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999988798593925	WITHOUT_CLASSIFICATION	1.1201406073958656E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999994495850101	WITHOUT_CLASSIFICATION	5.504149899729501E-7	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999849524385136	WITHOUT_CLASSIFICATION	1.5047561486501676E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999799153957635	WITHOUT_CLASSIFICATION	2.0084604236557944E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999540625648894	WITHOUT_CLASSIFICATION	4.593743511071589E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999540625648894	WITHOUT_CLASSIFICATION	4.593743511071589E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999960130161	WITHOUT_CLASSIFICATION	3.986983781871296E-9	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999963875638795	WITHOUT_CLASSIFICATION	3.6124361203372314E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999963875638795	WITHOUT_CLASSIFICATION	3.6124361203372314E-6	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999997431263746	WITHOUT_CLASSIFICATION	2.5687362531439445E-7	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999981050753279	WITHOUT_CLASSIFICATION	1.8949246719986858E-6	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999262814131	WITHOUT_CLASSIFICATION	7.371858685338364E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9994546960038323	WITHOUT_CLASSIFICATION	5.453039961677036E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9994546960038323	WITHOUT_CLASSIFICATION	5.453039961677036E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999991352366	WITHOUT_CLASSIFICATION	8.647633612195513E-10	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999992371048	WITHOUT_CLASSIFICATION	7.62895203082697E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999999992371048	WITHOUT_CLASSIFICATION	7.62895203082697E-9	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999998591968278	WITHOUT_CLASSIFICATION	1.408031721593595E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999583437771	WITHOUT_CLASSIFICATION	4.16562228991425E-8	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999822882768	WITHOUT_CLASSIFICATION	1.771172316200628E-8	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999996273220006	WITHOUT_CLASSIFICATION	3.726779994144943E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999998247799242	WITHOUT_CLASSIFICATION	1.752200758491333E-7	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999998205125166	WITHOUT_CLASSIFICATION	1.7948748331243388E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999765731199	WITHOUT_CLASSIFICATION	2.342688010626099E-8	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999980611128295	WITHOUT_CLASSIFICATION	1.938887170406359E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.8907318717892002	WITHOUT_CLASSIFICATION	0.10926812821079972	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999973315050841	WITHOUT_CLASSIFICATION	2.6684949159372596E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999974745589425	WITHOUT_CLASSIFICATION	2.525441057580287E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999711245515769	WITHOUT_CLASSIFICATION	2.887544842307079E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997387630285	WITHOUT_CLASSIFICATION	2.612369714784592E-7	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999999741224708	WITHOUT_CLASSIFICATION	2.587752915089515E-8	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999966745683023	WITHOUT_CLASSIFICATION	3.325431697697835E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999711245515769	WITHOUT_CLASSIFICATION	2.887544842307079E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999869602695	WITHOUT_CLASSIFICATION	1.3039730479461985E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999464036431	WITHOUT_CLASSIFICATION	5.3596356908640234E-8	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999903296162552	WITHOUT_CLASSIFICATION	9.670383744790629E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999981162807465	WITHOUT_CLASSIFICATION	1.883719253479781E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999981621382342	WITHOUT_CLASSIFICATION	1.8378617657131637E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999987143291348	WITHOUT_CLASSIFICATION	1.2856708652511784E-6	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999990442204127	WITHOUT_CLASSIFICATION	9.55779587293884E-7	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999970218624264	WITHOUT_CLASSIFICATION	2.9781375734192455E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993779761297	WITHOUT_CLASSIFICATION	6.220238702326359E-7	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999937301244	WITHOUT_CLASSIFICATION	6.269875667977323E-9	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999963953442671	WITHOUT_CLASSIFICATION	3.604655733003525E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999994692949197	WITHOUT_CLASSIFICATION	5.307050803127759E-7	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999996407022941	WITHOUT_CLASSIFICATION	3.592977059463303E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999765731199	WITHOUT_CLASSIFICATION	2.342688010626099E-8	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993779761297	WITHOUT_CLASSIFICATION	6.220238702326359E-7	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999963953442671	WITHOUT_CLASSIFICATION	3.604655733003525E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999996407022941	WITHOUT_CLASSIFICATION	3.592977059463303E-7	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997916464617	WITHOUT_CLASSIFICATION	2.0835353828336892E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999859811525046	WITHOUT_CLASSIFICATION	1.401884749547029E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998840193173	WITHOUT_CLASSIFICATION	1.1598068266427095E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999965621248279	WITHOUT_CLASSIFICATION	3.4378751721332585E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999994957832534	WITHOUT_CLASSIFICATION	5.042167465820579E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.999998084738947	WITHOUT_CLASSIFICATION	1.9152610529984823E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999982979523079	WITHOUT_CLASSIFICATION	1.7020476920622565E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999999720251187	WITHOUT_CLASSIFICATION	2.797488130094896E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.999998603738614	WITHOUT_CLASSIFICATION	1.3962613859579948E-6	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999716116926	WITHOUT_CLASSIFICATION	2.8388307406339603E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999977823415	WITHOUT_CLASSIFICATION	2.2176585126318583E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999940724013469	WITHOUT_CLASSIFICATION	5.927598653251515E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999995729715857	WITHOUT_CLASSIFICATION	4.27028414276176E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998922525493	WITHOUT_CLASSIFICATION	1.0774745075990626E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999983780115861	WITHOUT_CLASSIFICATION	1.6219884139659982E-6	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999976425861035	WITHOUT_CLASSIFICATION	2.3574138965403457E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999958234072541	WITHOUT_CLASSIFICATION	4.176592745947626E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999998052597158	WITHOUT_CLASSIFICATION	1.9474028418886818E-6	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.999997912506446	WITHOUT_CLASSIFICATION	2.087493554050037E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993779761297	WITHOUT_CLASSIFICATION	6.220238702326359E-7	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999994864870578	WITHOUT_CLASSIFICATION	5.13512942076285E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999988725851856	WITHOUT_CLASSIFICATION	1.1274148144390612E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999990571945699	WITHOUT_CLASSIFICATION	9.4280543006307E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999888547703816	WITHOUT_CLASSIFICATION	1.1145229618478405E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999989686050951	WITHOUT_CLASSIFICATION	1.031394904931271E-6	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998851513444	WITHOUT_CLASSIFICATION	1.1484865552900871E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999955387788	WITHOUT_CLASSIFICATION	4.461221197243207E-8	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999725108099	WITHOUT_CLASSIFICATION	2.7489190214229727E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999825734109024	WITHOUT_CLASSIFICATION	1.7426589097569475E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999969955802229	WITHOUT_CLASSIFICATION	3.004419777146731E-6	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999996747123988	WITHOUT_CLASSIFICATION	3.2528760120292057E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999988060101395	WITHOUT_CLASSIFICATION	1.1939898605766714E-6	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998765494459143	WITHOUT_CLASSIFICATION	1.2345055408559933E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999998808478042	WITHOUT_CLASSIFICATION	1.1915219582183527E-7	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999994096192673	WITHOUT_CLASSIFICATION	5.903807327063105E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998795078166393	WITHOUT_CLASSIFICATION	1.2049218336079371E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999912272453441	WITHOUT_CLASSIFICATION	8.772754655867851E-6	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999925693583115	WITHOUT_CLASSIFICATION	7.4306416884232845E-6	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999894599851681	WITHOUT_CLASSIFICATION	1.0540014831897064E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999998404537362	WITHOUT_CLASSIFICATION	1.59546263772023E-7	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999907603075	WITHOUT_CLASSIFICATION	9.239692517989024E-9	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999990606217967	WITHOUT_CLASSIFICATION	9.393782032911354E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999989635683701	WITHOUT_CLASSIFICATION	1.0364316298731292E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999992214238985	WITHOUT_CLASSIFICATION	7.785761016131059E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999981767287492	WITHOUT_CLASSIFICATION	1.8232712508210264E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999981767287492	WITHOUT_CLASSIFICATION	1.8232712508210264E-6	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999934356129531	WITHOUT_CLASSIFICATION	6.564387046902722E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999488504611789	WITHOUT_CLASSIFICATION	5.114953882119487E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999965092364885	WITHOUT_CLASSIFICATION	3.4907635113752644E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999999855320579	WITHOUT_CLASSIFICATION	1.4467942101755617E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999704443119	WITHOUT_CLASSIFICATION	2.955568809899235E-8	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999899665731	WITHOUT_CLASSIFICATION	1.0033426839114005E-8	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999998035171113	WITHOUT_CLASSIFICATION	1.9648288863643074E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999919113179	WITHOUT_CLASSIFICATION	8.088682137420753E-9	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999447652235078	WITHOUT_CLASSIFICATION	5.523477649214459E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999988295541039	WITHOUT_CLASSIFICATION	1.1704458961249023E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999971612634333	WITHOUT_CLASSIFICATION	2.838736566699941E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999792791334635	WITHOUT_CLASSIFICATION	2.072086653652366E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999897496348	WITHOUT_CLASSIFICATION	1.025036526669249E-8	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999969766306512	WITHOUT_CLASSIFICATION	3.0233693488068903E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999952504561	WITHOUT_CLASSIFICATION	4.74954390191113E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999078889867	WITHOUT_CLASSIFICATION	9.211101322020164E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999942000089317	WITHOUT_CLASSIFICATION	5.79999106827565E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999990487677	WITHOUT_CLASSIFICATION	9.512322363531605E-10	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999996077397283	WITHOUT_CLASSIFICATION	3.922602716815607E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999854925585996	WITHOUT_CLASSIFICATION	1.4507441400481816E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999967592410001	WITHOUT_CLASSIFICATION	3.24075899992048E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999967592410001	WITHOUT_CLASSIFICATION	3.24075899992048E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999989061592688	WITHOUT_CLASSIFICATION	1.0938407312113204E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999989061592688	WITHOUT_CLASSIFICATION	1.0938407312113204E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999989635683701	WITHOUT_CLASSIFICATION	1.0364316298731292E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999851974370964	WITHOUT_CLASSIFICATION	1.480256290357352E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9986672600032092	WITHOUT_CLASSIFICATION	0.0013327399967908227	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999992535991727	WITHOUT_CLASSIFICATION	7.464008273011087E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996416697113	WITHOUT_CLASSIFICATION	3.583302886848737E-7	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9986672600032092	WITHOUT_CLASSIFICATION	0.0013327399967908227	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999992535991727	WITHOUT_CLASSIFICATION	7.464008273011087E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999921071763219	WITHOUT_CLASSIFICATION	7.892823677976678E-6	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999984254635	WITHOUT_CLASSIFICATION	1.5745365213565485E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999998374742227	WITHOUT_CLASSIFICATION	1.62525777213767E-7	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9998352005471186	WITHOUT_CLASSIFICATION	1.6479945288133755E-4	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999719323173047	WITHOUT_CLASSIFICATION	2.8067682695265466E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999537851906012	WITHOUT_CLASSIFICATION	4.6214809398734324E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999943067651452	WITHOUT_CLASSIFICATION	5.693234854729337E-6	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999522979982453	WITHOUT_CLASSIFICATION	4.77020017547374E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999989987362787	WITHOUT_CLASSIFICATION	1.0012637212313925E-6	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999813522552	WITHOUT_CLASSIFICATION	1.8647744776387902E-8	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999657421537494	WITHOUT_CLASSIFICATION	3.4257846250656756E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.99999903429585	WITHOUT_CLASSIFICATION	9.65704149872778E-7	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999982713916279	WITHOUT_CLASSIFICATION	1.72860837207916E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999729876997931	WITHOUT_CLASSIFICATION	2.701230020682615E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996416697113	WITHOUT_CLASSIFICATION	3.583302886848737E-7	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999934259040973	WITHOUT_CLASSIFICATION	6.574095902583443E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999994469673603	WITHOUT_CLASSIFICATION	5.530326396815508E-7	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999994469673603	WITHOUT_CLASSIFICATION	5.530326396815508E-7	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999954823554	WITHOUT_CLASSIFICATION	4.517644512283916E-9	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999921071763219	WITHOUT_CLASSIFICATION	7.892823677976678E-6	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999999049781458	WITHOUT_CLASSIFICATION	9.502185412644865E-8	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999965410451829	WITHOUT_CLASSIFICATION	3.4589548172268584E-6	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999942263436252	WITHOUT_CLASSIFICATION	5.7736563747912004E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999528162746074	WITHOUT_CLASSIFICATION	4.718372539256382E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998393434462624	WITHOUT_CLASSIFICATION	1.6065655373759382E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999921071763219	WITHOUT_CLASSIFICATION	7.892823677976678E-6	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999528162746074	WITHOUT_CLASSIFICATION	4.718372539256382E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998393434462624	WITHOUT_CLASSIFICATION	1.6065655373759382E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999930026250194	WITHOUT_CLASSIFICATION	6.997374980529104E-6	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999988057213595	WITHOUT_CLASSIFICATION	1.1942786405616188E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999983913460281	WITHOUT_CLASSIFICATION	1.6086539719252818E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999921071763219	WITHOUT_CLASSIFICATION	7.892823677976678E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999921071763219	WITHOUT_CLASSIFICATION	7.892823677976678E-6	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999998743766733	WITHOUT_CLASSIFICATION	1.2562332674288956E-7	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999996341172784	WITHOUT_CLASSIFICATION	3.65882721584633E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.999998341662448	WITHOUT_CLASSIFICATION	1.6583375519707318E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999970541955747	WITHOUT_CLASSIFICATION	2.9458044253538024E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999990205275612	WITHOUT_CLASSIFICATION	9.79472438756338E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999532729824	WITHOUT_CLASSIFICATION	4.672701761069882E-8	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999991072888347	WITHOUT_CLASSIFICATION	8.927111652515067E-7	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999676256305	WITHOUT_CLASSIFICATION	3.2374369482332547E-8	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999995895486442	WITHOUT_CLASSIFICATION	4.104513557599602E-7	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999984346217868	WITHOUT_CLASSIFICATION	1.5653782131009216E-6	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999938422216998	WITHOUT_CLASSIFICATION	6.157778300169144E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999990272905893	WITHOUT_CLASSIFICATION	9.727094106728968E-7	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999601483811	WITHOUT_CLASSIFICATION	3.9851618920356516E-8	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999991993600141	WITHOUT_CLASSIFICATION	8.006399857911654E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966725238751	WITHOUT_CLASSIFICATION	3.327476124818531E-6	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999696835441	WITHOUT_CLASSIFICATION	3.0316455938266946E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999788700031995	WITHOUT_CLASSIFICATION	2.1129996800442583E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999930590819407	WITHOUT_CLASSIFICATION	6.9409180592812525E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997232760482502	WITHOUT_CLASSIFICATION	2.7672395174978026E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999989205675	WITHOUT_CLASSIFICATION	1.079432499794235E-9	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999942197166444	WITHOUT_CLASSIFICATION	5.780283355581733E-6	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9987080308727694	WITHOUT_CLASSIFICATION	0.0012919691272306004	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9987080308727694	WITHOUT_CLASSIFICATION	0.0012919691272306004	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999788700031995	WITHOUT_CLASSIFICATION	2.1129996800442583E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999978252659715	WITHOUT_CLASSIFICATION	2.1747340285099243E-6	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999999921131317	WITHOUT_CLASSIFICATION	7.886868302233548E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999095050673963	WITHOUT_CLASSIFICATION	9.049493260373032E-5	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999989220332567	WITHOUT_CLASSIFICATION	1.07796674329469E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995976293335	WITHOUT_CLASSIFICATION	4.023706664978262E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996974464189	WITHOUT_CLASSIFICATION	3.025535811492493E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999999926018025	WITHOUT_CLASSIFICATION	7.398197494348574E-9	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999992925616632	WITHOUT_CLASSIFICATION	7.074383367665407E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999711836078	WITHOUT_CLASSIFICATION	2.8816392197075788E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999920692957617	WITHOUT_CLASSIFICATION	7.930704238343909E-6	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997279076664	WITHOUT_CLASSIFICATION	2.7209233353861056E-7	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999926474967779	WITHOUT_CLASSIFICATION	7.352503222243159E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999954656215131	WITHOUT_CLASSIFICATION	4.534378486907004E-6	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999968526251393	WITHOUT_CLASSIFICATION	3.147374860778073E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974279528173	WITHOUT_CLASSIFICATION	2.5720471826432478E-6	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999995245529492	WITHOUT_CLASSIFICATION	4.754470507888782E-7	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999994898446549	WITHOUT_CLASSIFICATION	5.101553451583102E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999994575673805	WITHOUT_CLASSIFICATION	5.424326195738765E-7	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990056423229	WITHOUT_CLASSIFICATION	9.943576771509994E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999504726121	WITHOUT_CLASSIFICATION	4.9527387897624205E-8	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999994761706031	WITHOUT_CLASSIFICATION	5.2382939691205065E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999968555609797	WITHOUT_CLASSIFICATION	3.144439020381796E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999457982266335	WITHOUT_CLASSIFICATION	5.4201773366559145E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990080804279138	WITHOUT_CLASSIFICATION	9.91919572086247E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892251758564	WITHOUT_CLASSIFICATION	1.0774824143529287E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999519230167913	WITHOUT_CLASSIFICATION	4.807698320870435E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777897054578	WITHOUT_CLASSIFICATION	2.221029454217923E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907934087844	WITHOUT_CLASSIFICATION	9.206591215657813E-6	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679792802807	WITHOUT_CLASSIFICATION	3.202071971928316E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996655453148	WITHOUT_CLASSIFICATION	3.344546851742144E-7	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.999998200247194	WITHOUT_CLASSIFICATION	1.799752806066556E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999732597316918	WITHOUT_CLASSIFICATION	2.6740268308127728E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953568664312	WITHOUT_CLASSIFICATION	4.643133568862483E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985299270161	WITHOUT_CLASSIFICATION	1.4700729838567061E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879810407776	WITHOUT_CLASSIFICATION	1.2018959222450563E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982598528652	WITHOUT_CLASSIFICATION	1.740147134865618E-6	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999365462266981	WITHOUT_CLASSIFICATION	6.345377330179272E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937539681134	WITHOUT_CLASSIFICATION	6.246031886600947E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873866767668	WITHOUT_CLASSIFICATION	1.261332323327004E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987779265055	WITHOUT_CLASSIFICATION	1.2220734945050161E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999992315206402	WITHOUT_CLASSIFICATION	7.68479359871156E-7	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971386487642	WITHOUT_CLASSIFICATION	2.8613512358874136E-6	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9965137371874757	WITHOUT_CLASSIFICATION	0.003486262812524305	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999521889482	WITHOUT_CLASSIFICATION	4.781105178898692E-8	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999480821287	WITHOUT_CLASSIFICATION	5.191787137111258E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999267156906	WITHOUT_CLASSIFICATION	7.328430937694706E-8	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999984351998025	WITHOUT_CLASSIFICATION	1.564800197577652E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999910512540036	WITHOUT_CLASSIFICATION	8.948745996527248E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999969589424019	WITHOUT_CLASSIFICATION	3.041057598106905E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999416971181	WITHOUT_CLASSIFICATION	5.830288190196301E-8	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999959799824963	WITHOUT_CLASSIFICATION	4.020017503700517E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999954389450839	WITHOUT_CLASSIFICATION	4.561054916025707E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999952926699225	WITHOUT_CLASSIFICATION	4.707330077438188E-6	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999996350520268	WITHOUT_CLASSIFICATION	3.649479731452631E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999969758677766	WITHOUT_CLASSIFICATION	3.0241322234889215E-6	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999121726318	WITHOUT_CLASSIFICATION	8.782736819991024E-8	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999992410174982	WITHOUT_CLASSIFICATION	7.589825018225227E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999995816155308	WITHOUT_CLASSIFICATION	4.183844692042641E-7	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999977745752548	WITHOUT_CLASSIFICATION	2.2254247451859858E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893759509676	WITHOUT_CLASSIFICATION	1.0624049032373653E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976441128123	WITHOUT_CLASSIFICATION	2.355887187614202E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999877891846021	WITHOUT_CLASSIFICATION	1.2210815397897703E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996641590935	WITHOUT_CLASSIFICATION	3.3584090648651486E-6	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9996967131319824	WITHOUT_CLASSIFICATION	3.032868680176507E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999997490760475	WITHOUT_CLASSIFICATION	2.509239525020264E-7	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999905514532867	WITHOUT_CLASSIFICATION	9.448546713345405E-6	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999611834525151	WITHOUT_CLASSIFICATION	3.881654748497916E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979013545017	WITHOUT_CLASSIFICATION	2.098645498227897E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999551429896	WITHOUT_CLASSIFICATION	4.4857010459616E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999998965835003	WITHOUT_CLASSIFICATION	1.0341649967989388E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999439651627	WITHOUT_CLASSIFICATION	5.603483741340814E-8	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999838726603	WITHOUT_CLASSIFICATION	1.6127339597878502E-8	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999997342675317	WITHOUT_CLASSIFICATION	2.657324682963853E-6	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999888264424878	WITHOUT_CLASSIFICATION	1.1173557512267205E-5	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999997851622179	WITHOUT_CLASSIFICATION	2.1483778216725294E-7	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999993068401245	WITHOUT_CLASSIFICATION	6.931598754751163E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999267156906	WITHOUT_CLASSIFICATION	7.328430937694706E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997809581513	WITHOUT_CLASSIFICATION	2.190418486105043E-7	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999952180907279	WITHOUT_CLASSIFICATION	4.781909272109446E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999787043204595	WITHOUT_CLASSIFICATION	2.1295679540513668E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997821135087	WITHOUT_CLASSIFICATION	2.178864912687803E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999995644116718	WITHOUT_CLASSIFICATION	4.355883282142266E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999986752152009	WITHOUT_CLASSIFICATION	1.3247847991065763E-6	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999040188519442	WITHOUT_CLASSIFICATION	9.598114805577253E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999998527510336	WITHOUT_CLASSIFICATION	1.4724896629007308E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999973673617503	WITHOUT_CLASSIFICATION	2.63263824970195E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995205909196	WITHOUT_CLASSIFICATION	4.794090804208471E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999581291612	WITHOUT_CLASSIFICATION	4.187083879874664E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999993419509935	WITHOUT_CLASSIFICATION	6.580490063800172E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996967628245	WITHOUT_CLASSIFICATION	3.032371754225711E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999098275505583	WITHOUT_CLASSIFICATION	9.017244944159946E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999986573530053	WITHOUT_CLASSIFICATION	1.342646994692435E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999935034449177	WITHOUT_CLASSIFICATION	6.496555082228799E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999776826548178	WITHOUT_CLASSIFICATION	2.2317345182155815E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999995527107961	WITHOUT_CLASSIFICATION	4.4728920396856507E-7	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999345355373	WITHOUT_CLASSIFICATION	6.546446279546629E-8	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999852707331431	WITHOUT_CLASSIFICATION	1.4729266856782364E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999984712950825	WITHOUT_CLASSIFICATION	1.5287049174550632E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999988630432606	WITHOUT_CLASSIFICATION	1.1369567394391071E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999522877241637	WITHOUT_CLASSIFICATION	4.771227583636478E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999938307959223	WITHOUT_CLASSIFICATION	6.169204077798956E-6	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999977647586314	WITHOUT_CLASSIFICATION	2.2352413686358832E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999941313847939	WITHOUT_CLASSIFICATION	5.868615206148079E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9966444444563699	WITHOUT_CLASSIFICATION	0.0033555555436301644	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.999994607429423	WITHOUT_CLASSIFICATION	5.392570576889939E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999930720110718	WITHOUT_CLASSIFICATION	6.927988928144807E-6	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999459337338	WITHOUT_CLASSIFICATION	5.4066266261532574E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999267156906	WITHOUT_CLASSIFICATION	7.328430937694706E-8	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999999933518356	WITHOUT_CLASSIFICATION	6.6481643479996495E-9	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998518216899	WITHOUT_CLASSIFICATION	1.481783100500545E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997800642090722	WITHOUT_CLASSIFICATION	2.1993579092780338E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999267156906	WITHOUT_CLASSIFICATION	7.328430937694706E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999969891924403	WITHOUT_CLASSIFICATION	3.010807559624312E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999984712950825	WITHOUT_CLASSIFICATION	1.5287049174550632E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9998194463237433	WITHOUT_CLASSIFICATION	1.805536762566945E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999775165128182	WITHOUT_CLASSIFICATION	2.2483487181851266E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999915155147	WITHOUT_CLASSIFICATION	8.484485300644953E-8	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995205909196	WITHOUT_CLASSIFICATION	4.794090804208471E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999999581291612	WITHOUT_CLASSIFICATION	4.187083879874664E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999993419509935	WITHOUT_CLASSIFICATION	6.580490063800172E-7	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999117188799	WITHOUT_CLASSIFICATION	8.828112007364453E-8	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999982754491572	WITHOUT_CLASSIFICATION	1.724550842816899E-6	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999928293683453	WITHOUT_CLASSIFICATION	7.1706316547455485E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999991225227252	WITHOUT_CLASSIFICATION	8.774772748655061E-7	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999947210921	WITHOUT_CLASSIFICATION	5.278907927630511E-9	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999267156906	WITHOUT_CLASSIFICATION	7.328430937694706E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996967628245	WITHOUT_CLASSIFICATION	3.032371754225711E-7	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999098275505583	WITHOUT_CLASSIFICATION	9.017244944159946E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999934060148	WITHOUT_CLASSIFICATION	6.593985208918214E-9	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999786688294	WITHOUT_CLASSIFICATION	2.1331170594105235E-8	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999981506432	WITHOUT_CLASSIFICATION	1.8493568950912126E-9	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999806566449	WITHOUT_CLASSIFICATION	1.9343355130159947E-8	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999999522061067	WITHOUT_CLASSIFICATION	4.779389330516894E-7	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999089150082	WITHOUT_CLASSIFICATION	9.108499181716325E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987779265055	WITHOUT_CLASSIFICATION	1.2220734945050161E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999762634478	WITHOUT_CLASSIFICATION	2.373655222386653E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9956766227504493	WITHOUT_CLASSIFICATION	0.004323377249550667	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999977165181557	WITHOUT_CLASSIFICATION	2.2834818443459605E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999951796980626	WITHOUT_CLASSIFICATION	4.820301937348654E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999977603676693	WITHOUT_CLASSIFICATION	2.2396323306331545E-6	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777897054578	WITHOUT_CLASSIFICATION	2.221029454217923E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907934087844	WITHOUT_CLASSIFICATION	9.206591215657813E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985299270161	WITHOUT_CLASSIFICATION	1.4700729838567061E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999977603676693	WITHOUT_CLASSIFICATION	2.2396323306331545E-6	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999946106931468	WITHOUT_CLASSIFICATION	5.389306853251597E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997935255788	WITHOUT_CLASSIFICATION	2.064744211727319E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401274548481	WITHOUT_CLASSIFICATION	5.987254515192402E-5	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999289000991263	WITHOUT_CLASSIFICATION	7.109990087368857E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999994148653985	WITHOUT_CLASSIFICATION	5.851346015055206E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999735861313304	WITHOUT_CLASSIFICATION	2.6413868669655138E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879810407776	WITHOUT_CLASSIFICATION	1.2018959222450563E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937539681134	WITHOUT_CLASSIFICATION	6.246031886600947E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999838726603	WITHOUT_CLASSIFICATION	1.6127339597878502E-8	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999967026798988	WITHOUT_CLASSIFICATION	3.2973201011942227E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999998941729712	WITHOUT_CLASSIFICATION	1.0582702876621636E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999989231068092	WITHOUT_CLASSIFICATION	1.0768931908675236E-6	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999996051876432	WITHOUT_CLASSIFICATION	3.948123568497597E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999987482819468	WITHOUT_CLASSIFICATION	1.2517180532271916E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999795672676	WITHOUT_CLASSIFICATION	2.0432732487883615E-8	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999743835786647	WITHOUT_CLASSIFICATION	2.5616421335246386E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999711836078	WITHOUT_CLASSIFICATION	2.8816392197075788E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999401804250179	WITHOUT_CLASSIFICATION	5.981957498206621E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999939191166836	WITHOUT_CLASSIFICATION	6.080883316535612E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999997558921347	WITHOUT_CLASSIFICATION	2.4410786528010397E-7	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999556964676	WITHOUT_CLASSIFICATION	4.4303532502443315E-8	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999999603160483	WITHOUT_CLASSIFICATION	3.968395170471028E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999301385192658	WITHOUT_CLASSIFICATION	6.98614807342195E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960303331697	WITHOUT_CLASSIFICATION	3.969666830243375E-6	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660292687607	WITHOUT_CLASSIFICATION	3.397073123925462E-5	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996893409114	WITHOUT_CLASSIFICATION	3.106590885918242E-7	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999968798813884	WITHOUT_CLASSIFICATION	3.120118611517673E-6	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999601948151323	WITHOUT_CLASSIFICATION	3.980518486776032E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999928369088908	WITHOUT_CLASSIFICATION	7.163091109040844E-6	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985701820513	WITHOUT_CLASSIFICATION	1.4298179487398102E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999102181592	WITHOUT_CLASSIFICATION	8.978184079173681E-7	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991107655711	WITHOUT_CLASSIFICATION	8.892344287404478E-7	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999977174146948	WITHOUT_CLASSIFICATION	2.28258530520668E-6	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999967229307666	WITHOUT_CLASSIFICATION	3.277069233552749E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996439073323	WITHOUT_CLASSIFICATION	3.5609266768384167E-7	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999989355808286	WITHOUT_CLASSIFICATION	1.0644191713640494E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999378941642	WITHOUT_CLASSIFICATION	6.210583584896959E-8	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910124575628	WITHOUT_CLASSIFICATION	8.987542437133136E-6	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999997045226074	WITHOUT_CLASSIFICATION	2.954773925386093E-7	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999355255962	WITHOUT_CLASSIFICATION	6.447440379175204E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997670786089	WITHOUT_CLASSIFICATION	2.3292139102445907E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999977302232496	WITHOUT_CLASSIFICATION	2.269776750460028E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999904199900964	WITHOUT_CLASSIFICATION	9.580009903543595E-6	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999912420963617	WITHOUT_CLASSIFICATION	8.757903638262966E-6	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999989016269236	WITHOUT_CLASSIFICATION	1.0983730763286216E-6	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999964013225378	WITHOUT_CLASSIFICATION	3.598677462233265E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999905031922454	WITHOUT_CLASSIFICATION	9.496807754730164E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999986105956031	WITHOUT_CLASSIFICATION	1.3894043969075152E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999113485342	WITHOUT_CLASSIFICATION	8.865146589804979E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999962476508645	WITHOUT_CLASSIFICATION	3.7523491354478506E-6	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999284931744138	WITHOUT_CLASSIFICATION	7.150682558620403E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999939101193256	WITHOUT_CLASSIFICATION	6.089880674329612E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999978281661518	WITHOUT_CLASSIFICATION	2.171833848154105E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999850531361	WITHOUT_CLASSIFICATION	1.4946863896608304E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999999790546518	WITHOUT_CLASSIFICATION	2.0945348205003248E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999966069384336	WITHOUT_CLASSIFICATION	3.3930615662730566E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999162953005	WITHOUT_CLASSIFICATION	8.370469948731109E-8	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999991490013755	WITHOUT_CLASSIFICATION	8.509986244256752E-7	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998562746173739	WITHOUT_CLASSIFICATION	1.4372538262613852E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999999087273632	WITHOUT_CLASSIFICATION	9.127263671853177E-8	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999981703624687	WITHOUT_CLASSIFICATION	1.8296375312186022E-6	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999960255701852	WITHOUT_CLASSIFICATION	3.974429814871375E-6	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999863361830187	WITHOUT_CLASSIFICATION	1.3663816981365806E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999857840434	WITHOUT_CLASSIFICATION	1.4215956591019805E-8	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999193188615	WITHOUT_CLASSIFICATION	8.068113850376526E-7	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999201102495	WITHOUT_CLASSIFICATION	7.988975050052505E-8	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9976473352142714	WITHOUT_CLASSIFICATION	0.0023526647857285234	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999934128517398	WITHOUT_CLASSIFICATION	6.587148260215938E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999907571975	WITHOUT_CLASSIFICATION	9.242802441615915E-9	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999986704967992	WITHOUT_CLASSIFICATION	1.3295032007054977E-6	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999609543565	WITHOUT_CLASSIFICATION	3.90456434409556E-8	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999995636818	WITHOUT_CLASSIFICATION	4.363181409766992E-10	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999968626154515	WITHOUT_CLASSIFICATION	3.1373845485006978E-6	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999808289564089	WITHOUT_CLASSIFICATION	1.917104359097623E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999987518004085	WITHOUT_CLASSIFICATION	1.2481995914158835E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.999998816399495	WITHOUT_CLASSIFICATION	1.1836005050546216E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999989144416114	WITHOUT_CLASSIFICATION	1.0855583886605327E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999963812826539	WITHOUT_CLASSIFICATION	3.6187173461730092E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999986664539388	WITHOUT_CLASSIFICATION	1.3335460611938533E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999994412274458	WITHOUT_CLASSIFICATION	5.58772554303715E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998948356903378	WITHOUT_CLASSIFICATION	1.0516430966227214E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999943801219036	WITHOUT_CLASSIFICATION	5.619878096477169E-6	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999998844800806	WITHOUT_CLASSIFICATION	1.1551991940286314E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9954539765501841	WITHOUT_CLASSIFICATION	0.004546023449815872	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999996630536825	WITHOUT_CLASSIFICATION	3.3694631744828307E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999996592893352	WITHOUT_CLASSIFICATION	3.407106647922398E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999986878522867	WITHOUT_CLASSIFICATION	1.3121477133017854E-6	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999986323103365	WITHOUT_CLASSIFICATION	1.3676896635134925E-6	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999983121807	WITHOUT_CLASSIFICATION	1.6878193552904235E-9	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999805969859257	WITHOUT_CLASSIFICATION	1.9403014074428574E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999681012275	WITHOUT_CLASSIFICATION	3.189877253884842E-8	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999880235824041	WITHOUT_CLASSIFICATION	1.1976417595820574E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.999997861526877	WITHOUT_CLASSIFICATION	2.138473123053055E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999999783429422	WITHOUT_CLASSIFICATION	2.1657057811090307E-7	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999888095723221	WITHOUT_CLASSIFICATION	1.1190427678062516E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999997812363514	WITHOUT_CLASSIFICATION	2.1876364864763145E-7	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998939940883719	WITHOUT_CLASSIFICATION	1.0600591162811277E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999980907913099	WITHOUT_CLASSIFICATION	1.9092086901020227E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999741037093	WITHOUT_CLASSIFICATION	2.5896290729898146E-8	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999999420502135	WITHOUT_CLASSIFICATION	5.794978664476519E-8	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999865662737047	WITHOUT_CLASSIFICATION	1.3433726295301661E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999993188377092	WITHOUT_CLASSIFICATION	6.811622908725512E-7	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998833475833582	WITHOUT_CLASSIFICATION	1.1665241664180105E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999893867594645	WITHOUT_CLASSIFICATION	1.0613240535551317E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998577087652675	WITHOUT_CLASSIFICATION	1.4229123473252E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999931291280193	WITHOUT_CLASSIFICATION	6.8708719807638155E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.999999994044297	WITHOUT_CLASSIFICATION	5.955703007373562E-9	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999996369203515	WITHOUT_CLASSIFICATION	3.630796485037282E-7	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999938560474672	WITHOUT_CLASSIFICATION	6.143952532960152E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999299011498	WITHOUT_CLASSIFICATION	7.009885022545296E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999996369203515	WITHOUT_CLASSIFICATION	3.630796485037282E-7	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999997917079021	WITHOUT_CLASSIFICATION	2.082920979242729E-7	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999963200071045	WITHOUT_CLASSIFICATION	3.6799928954766734E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999999284063112	WITHOUT_CLASSIFICATION	7.15936888087348E-7	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999938185248768	WITHOUT_CLASSIFICATION	6.181475123267549E-6	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999995053264146	WITHOUT_CLASSIFICATION	4.946735854712023E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999900675945534	WITHOUT_CLASSIFICATION	9.932405446514206E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999908665707489	WITHOUT_CLASSIFICATION	9.133429251079662E-6	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999974509328309	WITHOUT_CLASSIFICATION	2.5490671690447467E-6	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999225881631493	WITHOUT_CLASSIFICATION	7.741183685069152E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999979496134003	WITHOUT_CLASSIFICATION	2.0503865996833083E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999876957648	WITHOUT_CLASSIFICATION	1.230423524167435E-8	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999985969817893	WITHOUT_CLASSIFICATION	1.40301821073408E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999969365619	WITHOUT_CLASSIFICATION	3.0634381354818104E-9	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999954146542	WITHOUT_CLASSIFICATION	4.585345735118159E-9	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999969584488526	WITHOUT_CLASSIFICATION	3.0415511473314658E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999994070131177	WITHOUT_CLASSIFICATION	5.929868822033506E-7	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999784178951585	WITHOUT_CLASSIFICATION	2.158210484156834E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999784178951585	WITHOUT_CLASSIFICATION	2.158210484156834E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999061599614	WITHOUT_CLASSIFICATION	9.384003856918889E-8	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9998323367571564	WITHOUT_CLASSIFICATION	1.676632428435861E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999974027741877	WITHOUT_CLASSIFICATION	2.597225812295622E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998538387888739	WITHOUT_CLASSIFICATION	1.4616121112605307E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998495925730895	WITHOUT_CLASSIFICATION	1.5040742691051562E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997235383043558	WITHOUT_CLASSIFICATION	2.764616956442204E-4	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999963845350895	WITHOUT_CLASSIFICATION	3.6154649103631196E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999807821543	WITHOUT_CLASSIFICATION	1.9217845704073967E-7	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999997344932727	WITHOUT_CLASSIFICATION	2.6550672716740954E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9992188683105071	WITHOUT_CLASSIFICATION	7.81131689492939E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999960966491129	WITHOUT_CLASSIFICATION	3.903350887133379E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999835328924	WITHOUT_CLASSIFICATION	1.646710749979645E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999895589097424	WITHOUT_CLASSIFICATION	1.0441090257589773E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999745628192923	WITHOUT_CLASSIFICATION	2.5437180707743488E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999941120923395	WITHOUT_CLASSIFICATION	5.8879076605473944E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999301385192658	WITHOUT_CLASSIFICATION	6.98614807342195E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999735050236663	WITHOUT_CLASSIFICATION	2.6494976333637642E-5	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999979333282066	WITHOUT_CLASSIFICATION	2.0666717933995096E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9762707568790877	WITHOUT_CLASSIFICATION	0.02372924312091229	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999834681660632	WITHOUT_CLASSIFICATION	1.6531833936818687E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999786052631	WITHOUT_CLASSIFICATION	2.139473686016201E-8	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999972326519584	WITHOUT_CLASSIFICATION	2.767348041604201E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999989881669	WITHOUT_CLASSIFICATION	1.0118330683864103E-9	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999975320243	WITHOUT_CLASSIFICATION	2.467975740546964E-9	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996811153068	WITHOUT_CLASSIFICATION	3.1888469321072024E-7	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998772944813	WITHOUT_CLASSIFICATION	1.2270551874652302E-7	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999904649434	WITHOUT_CLASSIFICATION	9.535056696121875E-9	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9997555466832732	WITHOUT_CLASSIFICATION	2.4445331672683036E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9996610790045893	WITHOUT_CLASSIFICATION	3.389209954105745E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999869644551869	WITHOUT_CLASSIFICATION	1.3035544813108356E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999984360306389	WITHOUT_CLASSIFICATION	1.5639693611819796E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999895425544165	WITHOUT_CLASSIFICATION	1.045744558359957E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999764618045981	WITHOUT_CLASSIFICATION	2.3538195401963047E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999947086776044	WITHOUT_CLASSIFICATION	5.2913223955374565E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999941282389426	WITHOUT_CLASSIFICATION	5.871761057355788E-6	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999979937840983	WITHOUT_CLASSIFICATION	2.0062159018107417E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999921108589893	WITHOUT_CLASSIFICATION	7.889141010558712E-6	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999881116649999	WITHOUT_CLASSIFICATION	1.1888334999975722E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999988977794346	WITHOUT_CLASSIFICATION	1.1022205653951724E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999989922361637	WITHOUT_CLASSIFICATION	1.007763836189948E-6	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999526576662093	WITHOUT_CLASSIFICATION	4.734233379061225E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.999997538265653	WITHOUT_CLASSIFICATION	2.4617343469294475E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999988307285362	WITHOUT_CLASSIFICATION	1.1692714638030718E-6	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998966991509	WITHOUT_CLASSIFICATION	1.033008491586714E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999989380002785	WITHOUT_CLASSIFICATION	1.0619997215137885E-6	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998345265573	WITHOUT_CLASSIFICATION	1.6547344269036801E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984241672669	WITHOUT_CLASSIFICATION	1.57583273319041E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994498957617	WITHOUT_CLASSIFICATION	5.501042382738324E-7	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986214796516	WITHOUT_CLASSIFICATION	1.3785203483667563E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999997080322942	WITHOUT_CLASSIFICATION	2.919677058094185E-7	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999971470659034	WITHOUT_CLASSIFICATION	2.8529340966656568E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997793108747	WITHOUT_CLASSIFICATION	2.2068912540460665E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999997233535274	WITHOUT_CLASSIFICATION	2.7664647261464993E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999877475072476	WITHOUT_CLASSIFICATION	1.2252492752463141E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999311823581793	WITHOUT_CLASSIFICATION	6.881764182060758E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999877475072476	WITHOUT_CLASSIFICATION	1.2252492752463141E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996774911847857	WITHOUT_CLASSIFICATION	3.225088152143948E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999988158273287	WITHOUT_CLASSIFICATION	1.1841726711850988E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999973971637609	WITHOUT_CLASSIFICATION	2.6028362390523663E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999440891444	WITHOUT_CLASSIFICATION	5.591085559118483E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999394032188	WITHOUT_CLASSIFICATION	6.059678119854685E-7	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999997225045759	WITHOUT_CLASSIFICATION	2.774954241335473E-7	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998262268875	WITHOUT_CLASSIFICATION	1.7377311236364605E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.999999918270916	WITHOUT_CLASSIFICATION	8.172908388702835E-8	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999963131829169	WITHOUT_CLASSIFICATION	3.6868170830128154E-6	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999978273366709	WITHOUT_CLASSIFICATION	2.172663329167333E-6	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997861735712731	WITHOUT_CLASSIFICATION	2.138264287268889E-4	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999929476838	WITHOUT_CLASSIFICATION	7.052316162366627E-9	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999998501536054	WITHOUT_CLASSIFICATION	1.4984639460073423E-6	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999996097781249	WITHOUT_CLASSIFICATION	3.9022187518339045E-7	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999999999464871	WITHOUT_CLASSIFICATION	5.351290812877266E-10	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999999768289	WITHOUT_CLASSIFICATION	2.3171099439852945E-10	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999740179903609	WITHOUT_CLASSIFICATION	2.598200963919525E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999740179903609	WITHOUT_CLASSIFICATION	2.598200963919525E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999989723242384	WITHOUT_CLASSIFICATION	1.027675761643328E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999997921664948	WITHOUT_CLASSIFICATION	2.0783350530855855E-7	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999921952255	WITHOUT_CLASSIFICATION	7.804774430523188E-9	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9882091354474984	WITHOUT_CLASSIFICATION	0.011790864552501465	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999982460782	WITHOUT_CLASSIFICATION	1.7539218088132724E-9	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999994088842551	WITHOUT_CLASSIFICATION	5.911157448879792E-7	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999791124684546	WITHOUT_CLASSIFICATION	2.0887531545428392E-5	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999960594304117	WITHOUT_CLASSIFICATION	3.9405695883012583E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999474565531	WITHOUT_CLASSIFICATION	5.2543447047443695E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999746282568	WITHOUT_CLASSIFICATION	2.5371743150430538E-8	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999532171071	WITHOUT_CLASSIFICATION	4.678289297282533E-8	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999982421681199	WITHOUT_CLASSIFICATION	1.7578318799417844E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999981778037047	WITHOUT_CLASSIFICATION	1.8221962952451482E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999759661893	WITHOUT_CLASSIFICATION	2.4033810600277835E-8	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999977726400636	WITHOUT_CLASSIFICATION	2.2273599362993914E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999798319262	WITHOUT_CLASSIFICATION	2.0168073660903518E-8	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9993917699261428	WITHOUT_CLASSIFICATION	6.082300738572599E-4	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9940160382608199	WITHOUT_CLASSIFICATION	0.005983961739180144	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999899128521553	WITHOUT_CLASSIFICATION	1.0087147844757052E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999996917688065	WITHOUT_CLASSIFICATION	3.082311935034857E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998433376919	WITHOUT_CLASSIFICATION	1.5666230817705396E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999806307633897	WITHOUT_CLASSIFICATION	1.936923661025987E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999988092177072	WITHOUT_CLASSIFICATION	1.1907822927430887E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.989181199540132	WITHOUT_CLASSIFICATION	0.010818800459868074	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999998496269521	WITHOUT_CLASSIFICATION	1.5037304789575495E-7	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999660468608	WITHOUT_CLASSIFICATION	3.39531392418255E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999580994772	WITHOUT_CLASSIFICATION	4.1900522786182907E-8	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999953942485724	WITHOUT_CLASSIFICATION	4.605751427535865E-6	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999985370540619	WITHOUT_CLASSIFICATION	1.4629459380425107E-6	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999495747259	WITHOUT_CLASSIFICATION	5.042527414407023E-8	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999989213370741	WITHOUT_CLASSIFICATION	1.0786629258531481E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999988821493826	WITHOUT_CLASSIFICATION	1.1178506173916401E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999379713824562	WITHOUT_CLASSIFICATION	6.202861754383075E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999990006968965	WITHOUT_CLASSIFICATION	9.993031033911986E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9992898298209398	WITHOUT_CLASSIFICATION	7.101701790601741E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999996847227266	WITHOUT_CLASSIFICATION	3.1527727338937364E-7	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999179877801	WITHOUT_CLASSIFICATION	8.201221990192151E-7	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999873314370821	WITHOUT_CLASSIFICATION	1.2668562917879292E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.99999993099267	WITHOUT_CLASSIFICATION	6.900732990303345E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999987738199125	WITHOUT_CLASSIFICATION	1.2261800874301823E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999969442172	WITHOUT_CLASSIFICATION	3.0557829255049297E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983932816721	WITHOUT_CLASSIFICATION	1.6067183279587618E-6	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9998613010153304	WITHOUT_CLASSIFICATION	1.3869898466960354E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9907309403241823	WITHOUT_CLASSIFICATION	0.009269059675817728	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999203631456	WITHOUT_CLASSIFICATION	7.963685451942226E-8	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999996579316139	WITHOUT_CLASSIFICATION	3.420683860819457E-7	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9983653811206382	WITHOUT_CLASSIFICATION	0.0016346188793618132	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999097168979	WITHOUT_CLASSIFICATION	9.028310212672448E-8	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999968577468786	WITHOUT_CLASSIFICATION	3.1422531213089104E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999996945116153	WITHOUT_CLASSIFICATION	3.0548838468180205E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955531529024	WITHOUT_CLASSIFICATION	4.446847097470598E-6	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999587933959	WITHOUT_CLASSIFICATION	4.120660421416584E-8	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999975597673	WITHOUT_CLASSIFICATION	2.440232651612546E-9	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999980508512097	WITHOUT_CLASSIFICATION	1.9491487903056606E-6	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998649482400921	WITHOUT_CLASSIFICATION	1.3505175990785633E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999969891924403	WITHOUT_CLASSIFICATION	3.010807559624312E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999969891924403	WITHOUT_CLASSIFICATION	3.010807559624312E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999977914593	WITHOUT_CLASSIFICATION	2.208540744169341E-9	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999983003187417	WITHOUT_CLASSIFICATION	1.699681258330918E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999938140076886	WITHOUT_CLASSIFICATION	6.1859923114749715E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999996380529211	WITHOUT_CLASSIFICATION	3.619470789216314E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999999711509871	WITHOUT_CLASSIFICATION	2.884901290358835E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999450695561586	WITHOUT_CLASSIFICATION	5.4930443841355885E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999720144217296	WITHOUT_CLASSIFICATION	2.798557827038912E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999998287488533	WITHOUT_CLASSIFICATION	1.712511466819402E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999965851196	WITHOUT_CLASSIFICATION	3.4148804159457578E-9	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999903862189	WITHOUT_CLASSIFICATION	9.613781090823196E-9	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.99998911450968	WITHOUT_CLASSIFICATION	1.0885490319927084E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999979627690558	WITHOUT_CLASSIFICATION	2.0372309442357244E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999969563364212	WITHOUT_CLASSIFICATION	3.043663578969134E-6	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999993328018411	WITHOUT_CLASSIFICATION	6.671981589490689E-7	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999985650391755	WITHOUT_CLASSIFICATION	1.4349608245209414E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999978736669803	WITHOUT_CLASSIFICATION	2.126333019605513E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999991175252859	WITHOUT_CLASSIFICATION	8.824747140074748E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999926790539063	WITHOUT_CLASSIFICATION	7.320946093650839E-6	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999963687974	WITHOUT_CLASSIFICATION	3.631202626125907E-9	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999986223280506	WITHOUT_CLASSIFICATION	1.377671949322534E-6	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999389305875	WITHOUT_CLASSIFICATION	6.106941249702679E-8	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999982624861246	WITHOUT_CLASSIFICATION	1.7375138754053425E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999868580322387	WITHOUT_CLASSIFICATION	1.3141967761373742E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999956606611833	WITHOUT_CLASSIFICATION	4.339338816773766E-6	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999048207160287	WITHOUT_CLASSIFICATION	9.517928397120826E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9998248786379486	WITHOUT_CLASSIFICATION	1.7512136205140096E-4	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9956007645123989	WITHOUT_CLASSIFICATION	0.004399235487601091	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996212509563749	WITHOUT_CLASSIFICATION	3.787490436251221E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999992661713011	WITHOUT_CLASSIFICATION	7.338286988431167E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999868580322387	WITHOUT_CLASSIFICATION	1.3141967761373742E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999996972972391	WITHOUT_CLASSIFICATION	3.0270276090298898E-6	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999999975577	WITHOUT_CLASSIFICATION	2.4423588941711004E-12	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999805482946101	WITHOUT_CLASSIFICATION	1.945170538983244E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999959064512244	WITHOUT_CLASSIFICATION	4.093548775628732E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999999665045	WITHOUT_CLASSIFICATION	3.34955666646632E-11	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999991993775	WITHOUT_CLASSIFICATION	8.006225058703919E-10	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999957514400502	WITHOUT_CLASSIFICATION	4.248559949931986E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999994613974	WITHOUT_CLASSIFICATION	5.386025562150395E-10	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999754495511276	WITHOUT_CLASSIFICATION	2.4550448872353377E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999959064512244	WITHOUT_CLASSIFICATION	4.093548775628732E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999988503337	WITHOUT_CLASSIFICATION	1.1496662701022498E-9	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999994075227	WITHOUT_CLASSIFICATION	5.924773356914119E-10	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999030469745	WITHOUT_CLASSIFICATION	9.695302550878029E-8	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999805801312083	WITHOUT_CLASSIFICATION	1.9419868791682765E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999119522991	WITHOUT_CLASSIFICATION	8.804770088766375E-8	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999532171071	WITHOUT_CLASSIFICATION	4.678289297282533E-8	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999982057842	WITHOUT_CLASSIFICATION	1.794215739036743E-9	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999852264878	WITHOUT_CLASSIFICATION	1.477351219350636E-8	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999996297138786	WITHOUT_CLASSIFICATION	3.702861214607266E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999973077988055	WITHOUT_CLASSIFICATION	2.6922011944967185E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999967605934952	WITHOUT_CLASSIFICATION	3.239406504909321E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999997602746757	WITHOUT_CLASSIFICATION	2.3972532422154594E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999925585978	WITHOUT_CLASSIFICATION	7.441402199921796E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999991815673824	WITHOUT_CLASSIFICATION	8.184326175525675E-7	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999973475051246	WITHOUT_CLASSIFICATION	2.6524948754341533E-6	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999973471617407	WITHOUT_CLASSIFICATION	2.652838259243265E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999982137050975	WITHOUT_CLASSIFICATION	1.7862949025022626E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999991011720895	WITHOUT_CLASSIFICATION	8.988279104369885E-7	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999979718127655	WITHOUT_CLASSIFICATION	2.028187234590588E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999996447845159	WITHOUT_CLASSIFICATION	3.55215484201004E-7	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999997715361435	WITHOUT_CLASSIFICATION	2.2846385647858127E-7	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999736725761698	WITHOUT_CLASSIFICATION	2.6327423830247364E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999992608494033	WITHOUT_CLASSIFICATION	7.391505967176998E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999999714357325	WITHOUT_CLASSIFICATION	2.856426754829184E-8	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999999369710832	WITHOUT_CLASSIFICATION	6.3028916741935E-8	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999895545849043	WITHOUT_CLASSIFICATION	1.0445415095636387E-5	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999873591312598	WITHOUT_CLASSIFICATION	1.2640868740163409E-5	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999991310303059	WITHOUT_CLASSIFICATION	8.689696941420852E-7	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999869276162268	WITHOUT_CLASSIFICATION	1.307238377333056E-5	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999993792457	WITHOUT_CLASSIFICATION	6.207543451210941E-10	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999195418267441	WITHOUT_CLASSIFICATION	8.045817325585657E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9993876925759086	WITHOUT_CLASSIFICATION	6.123074240913759E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999999881579128	WITHOUT_CLASSIFICATION	1.1842087243809423E-8	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996588764441061	WITHOUT_CLASSIFICATION	3.411235558938639E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999169966831845	WITHOUT_CLASSIFICATION	8.300331681560812E-5	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999980003674	WITHOUT_CLASSIFICATION	1.9996325999100303E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999382332997486	WITHOUT_CLASSIFICATION	6.176670025134681E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997106464265	WITHOUT_CLASSIFICATION	2.893535735948932E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999996449637717	WITHOUT_CLASSIFICATION	3.550362282882034E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999996449637717	WITHOUT_CLASSIFICATION	3.550362282882034E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999978615577	WITHOUT_CLASSIFICATION	2.1384423231703284E-9	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999950784557574	WITHOUT_CLASSIFICATION	4.921544242682223E-6	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9984102607323088	WITHOUT_CLASSIFICATION	0.0015897392676912797	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999865798793327	WITHOUT_CLASSIFICATION	1.3420120667250016E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999970877717267	WITHOUT_CLASSIFICATION	2.912228273366102E-6	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999980580563961	WITHOUT_CLASSIFICATION	1.9419436038021282E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999979736657694	WITHOUT_CLASSIFICATION	2.0263342306342535E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999993827876696	WITHOUT_CLASSIFICATION	6.17212330385378E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999999943011252	WITHOUT_CLASSIFICATION	5.6988748102670744E-8	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999968760274	WITHOUT_CLASSIFICATION	3.1239725435542024E-9	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999942630317	WITHOUT_CLASSIFICATION	5.73696829462733E-9	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999948275914272	WITHOUT_CLASSIFICATION	5.172408572740941E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999899541684741	WITHOUT_CLASSIFICATION	1.004583152588039E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999996449637717	WITHOUT_CLASSIFICATION	3.550362282882034E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999971054543798	WITHOUT_CLASSIFICATION	2.8945456200941586E-6	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999997544883689	WITHOUT_CLASSIFICATION	2.455116312069939E-7	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999985502080033	WITHOUT_CLASSIFICATION	1.4497919967071525E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999997846421795	WITHOUT_CLASSIFICATION	2.1535782042647582E-7	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999999434822085	WITHOUT_CLASSIFICATION	5.651779149534324E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999942174830517	WITHOUT_CLASSIFICATION	5.782516948372878E-6	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999990473295504	WITHOUT_CLASSIFICATION	9.526704495946656E-7	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999906549850226	WITHOUT_CLASSIFICATION	9.345014977452776E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999995090904198	WITHOUT_CLASSIFICATION	4.909095801679062E-7	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999891747366191	WITHOUT_CLASSIFICATION	1.0825263380877828E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999988718110247	WITHOUT_CLASSIFICATION	1.1281889752919221E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996588764441061	WITHOUT_CLASSIFICATION	3.411235558938639E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999996449637717	WITHOUT_CLASSIFICATION	3.550362282882034E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999998742326234	WITHOUT_CLASSIFICATION	1.2576737671721411E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998972013238	WITHOUT_CLASSIFICATION	1.0279867617840827E-7	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999997941087229	WITHOUT_CLASSIFICATION	2.0589127701627907E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999518249315494	WITHOUT_CLASSIFICATION	4.817506845056775E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999994659721083	WITHOUT_CLASSIFICATION	5.34027891666476E-7	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999846251583582	WITHOUT_CLASSIFICATION	1.5374841641825097E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994082945403	WITHOUT_CLASSIFICATION	5.9170545978529E-7	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999870594017585	WITHOUT_CLASSIFICATION	1.2940598241421197E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999525955951	WITHOUT_CLASSIFICATION	4.7404404904259713E-7	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999997855257297	WITHOUT_CLASSIFICATION	2.1447427031137296E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998592361713	WITHOUT_CLASSIFICATION	1.407638287355126E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999685873673895	WITHOUT_CLASSIFICATION	3.141263261046053E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999124276783	WITHOUT_CLASSIFICATION	8.757232169152044E-8	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999998705910906	WITHOUT_CLASSIFICATION	1.2940890939479596E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996774911847857	WITHOUT_CLASSIFICATION	3.225088152143948E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999796465276	WITHOUT_CLASSIFICATION	2.0353472311479977E-8	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999998472481	WITHOUT_CLASSIFICATION	1.5275187397546326E-10	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999713128068	WITHOUT_CLASSIFICATION	2.8687193200485098E-8	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999999466449444	WITHOUT_CLASSIFICATION	5.335505557909153E-8	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999629317209	WITHOUT_CLASSIFICATION	3.7068279158378145E-8	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986968616635	WITHOUT_CLASSIFICATION	1.3031383364240266E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986968616635	WITHOUT_CLASSIFICATION	1.3031383364240266E-6	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999993838977259	WITHOUT_CLASSIFICATION	6.161022740372882E-7	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999981931090944	WITHOUT_CLASSIFICATION	1.806890905587236E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999991568433083	WITHOUT_CLASSIFICATION	8.431566916936094E-7	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999893778323097	WITHOUT_CLASSIFICATION	1.0622167690338523E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999977657493236	WITHOUT_CLASSIFICATION	2.2342506763812116E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999996017579027	WITHOUT_CLASSIFICATION	3.982420972873292E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999825901990164	WITHOUT_CLASSIFICATION	1.7409800983706637E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997920577353	WITHOUT_CLASSIFICATION	2.0794226476105598E-7	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997920577353	WITHOUT_CLASSIFICATION	2.0794226476105598E-7	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999971945387185	WITHOUT_CLASSIFICATION	2.805461281493613E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999732401027914	WITHOUT_CLASSIFICATION	2.675989720868175E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999997231179651	WITHOUT_CLASSIFICATION	2.768820348523488E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999931577406748	WITHOUT_CLASSIFICATION	6.842259325149151E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999931577406748	WITHOUT_CLASSIFICATION	6.842259325149151E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999931577406748	WITHOUT_CLASSIFICATION	6.842259325149151E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999018555968135	WITHOUT_CLASSIFICATION	9.814440318637472E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999991887394557	WITHOUT_CLASSIFICATION	8.112605443074203E-7	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9980264748272801	WITHOUT_CLASSIFICATION	0.001973525172719806	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9993888637736829	WITHOUT_CLASSIFICATION	6.111362263171415E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999901356632733	WITHOUT_CLASSIFICATION	9.86433672666462E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999996449637717	WITHOUT_CLASSIFICATION	3.550362282882034E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999996449637717	WITHOUT_CLASSIFICATION	3.550362282882034E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999929750776152	WITHOUT_CLASSIFICATION	7.024922384860499E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.999999936894856	WITHOUT_CLASSIFICATION	6.310514397960612E-8	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999143380276783	WITHOUT_CLASSIFICATION	8.566197232176585E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999669427416	WITHOUT_CLASSIFICATION	3.305725831368804E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999983084593824	WITHOUT_CLASSIFICATION	1.6915406176577623E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997989287813	WITHOUT_CLASSIFICATION	2.0107121860796982E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999981114123926	WITHOUT_CLASSIFICATION	1.8885876074001534E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999970694644801	WITHOUT_CLASSIFICATION	2.9305355200538466E-6	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999997947484235	WITHOUT_CLASSIFICATION	2.0525157644866884E-7	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999996859583161	WITHOUT_CLASSIFICATION	3.140416838777091E-7	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999897153280687	WITHOUT_CLASSIFICATION	1.0284671931269473E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999985913754788	WITHOUT_CLASSIFICATION	1.4086245212901474E-6	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999985913754788	WITHOUT_CLASSIFICATION	1.4086245212901461E-6	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999992369646935	WITHOUT_CLASSIFICATION	7.630353064036692E-7	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999992369646935	WITHOUT_CLASSIFICATION	7.630353064036692E-7	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999991893082617	WITHOUT_CLASSIFICATION	8.106917383518034E-7	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999983757578701	WITHOUT_CLASSIFICATION	1.6242421298362721E-6	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999983757578701	WITHOUT_CLASSIFICATION	1.6242421298362721E-6	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999973542024017	WITHOUT_CLASSIFICATION	2.645797598445779E-6	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999983417280193	WITHOUT_CLASSIFICATION	1.6582719806723047E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9994453049151101	WITHOUT_CLASSIFICATION	5.546950848900399E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999986968616635	WITHOUT_CLASSIFICATION	1.3031383364240266E-6	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999942468720976	WITHOUT_CLASSIFICATION	5.753127902423434E-6	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999983417280193	WITHOUT_CLASSIFICATION	1.6582719806723047E-6	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998036087974893	WITHOUT_CLASSIFICATION	1.9639120251076139E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999961413640243	WITHOUT_CLASSIFICATION	3.85863597574939E-6	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999990838275593	WITHOUT_CLASSIFICATION	9.161724406728121E-7	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999989947492521	WITHOUT_CLASSIFICATION	1.0052507478849363E-6	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998496955981	WITHOUT_CLASSIFICATION	1.503044019028667E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999966944924656	WITHOUT_CLASSIFICATION	3.3055075343391634E-6	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999999448933109	WITHOUT_CLASSIFICATION	5.510668911649945E-8	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999999431660144	WITHOUT_CLASSIFICATION	5.683398564373127E-8	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999209862568	WITHOUT_CLASSIFICATION	7.901374326328222E-8	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999963442812596	WITHOUT_CLASSIFICATION	3.6557187404172423E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999788698495	WITHOUT_CLASSIFICATION	2.113015059170906E-8	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999984588269187	WITHOUT_CLASSIFICATION	1.5411730811955857E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995684418932	WITHOUT_CLASSIFICATION	4.3155810677424533E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999998141567749	WITHOUT_CLASSIFICATION	1.8584322508424023E-7	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999961979404918	WITHOUT_CLASSIFICATION	3.8020595081566486E-6	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999999392549856	WITHOUT_CLASSIFICATION	6.074501427086821E-8	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999650719246763	WITHOUT_CLASSIFICATION	3.4928075323623554E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999995013186076	WITHOUT_CLASSIFICATION	4.986813925180864E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999995013186076	WITHOUT_CLASSIFICATION	4.986813925180864E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999979272750508	WITHOUT_CLASSIFICATION	2.072724949199659E-6	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999922798791913	WITHOUT_CLASSIFICATION	7.720120808678684E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999969961709249	WITHOUT_CLASSIFICATION	3.003829075155584E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999995663899344	WITHOUT_CLASSIFICATION	4.3361006552480653E-7	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999999645008102	WITHOUT_CLASSIFICATION	3.5499189802002966E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999937737203447	WITHOUT_CLASSIFICATION	6.2262796553703385E-6	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999430270357	WITHOUT_CLASSIFICATION	5.6972964386612166E-8	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999977772507929	WITHOUT_CLASSIFICATION	2.2227492071869417E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999999372845714	WITHOUT_CLASSIFICATION	6.271542862678644E-8	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999987063318647	WITHOUT_CLASSIFICATION	1.2936681353154168E-6	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999989422029811	WITHOUT_CLASSIFICATION	1.0577970188771255E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999685873673895	WITHOUT_CLASSIFICATION	3.141263261046053E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999555082753	WITHOUT_CLASSIFICATION	4.449172465507508E-8	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999072062431	WITHOUT_CLASSIFICATION	9.279375698754716E-8	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999587069571177	WITHOUT_CLASSIFICATION	4.129304288222698E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999983195942744	WITHOUT_CLASSIFICATION	1.6804057255818919E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999944905003496	WITHOUT_CLASSIFICATION	5.509499650346236E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999944905003496	WITHOUT_CLASSIFICATION	5.509499650346236E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999772442479742	WITHOUT_CLASSIFICATION	2.2755752025787883E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999998181552486	WITHOUT_CLASSIFICATION	1.8184475126431223E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999950133431269	WITHOUT_CLASSIFICATION	4.986656873098573E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999978198891981	WITHOUT_CLASSIFICATION	2.180110801894592E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999832408100549	WITHOUT_CLASSIFICATION	1.6759189945168094E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999997802745495	WITHOUT_CLASSIFICATION	2.1972545061641683E-7	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9996521889180748	WITHOUT_CLASSIFICATION	3.4781108192516756E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999959506258126	WITHOUT_CLASSIFICATION	4.049374187397102E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999993385759669	WITHOUT_CLASSIFICATION	6.614240331883418E-7	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999986211937	WITHOUT_CLASSIFICATION	1.378806275846933E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999438482166081	WITHOUT_CLASSIFICATION	5.615178339184224E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999959506258126	WITHOUT_CLASSIFICATION	4.049374187397102E-6	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999740464764796	WITHOUT_CLASSIFICATION	2.5953523520413876E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999759504194453	WITHOUT_CLASSIFICATION	2.404958055466907E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999986085628	WITHOUT_CLASSIFICATION	1.3914371451227529E-9	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999997627987766	WITHOUT_CLASSIFICATION	2.3720122345927336E-7	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999842841875	WITHOUT_CLASSIFICATION	1.571581261311457E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998905698592	WITHOUT_CLASSIFICATION	1.094301408798459E-7	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999991609441589	WITHOUT_CLASSIFICATION	8.39055841151425E-7	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999996283547263	WITHOUT_CLASSIFICATION	3.71645273693806E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999915638791	WITHOUT_CLASSIFICATION	8.436120997019818E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999993154713161	WITHOUT_CLASSIFICATION	6.8452868389752714E-6	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999975763157042	WITHOUT_CLASSIFICATION	2.423684295850401E-6	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999725540457	WITHOUT_CLASSIFICATION	2.7445954301220915E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999993824267989	WITHOUT_CLASSIFICATION	6.175732010878937E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999969799293265	WITHOUT_CLASSIFICATION	3.020070673552364E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999910927717859	WITHOUT_CLASSIFICATION	8.907228214069746E-6	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999674381288	WITHOUT_CLASSIFICATION	3.2561871161323704E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999993190658145	WITHOUT_CLASSIFICATION	6.809341855429664E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999747641720333	WITHOUT_CLASSIFICATION	2.5235827966567067E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999841768878247	WITHOUT_CLASSIFICATION	1.5823112175270298E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999992282490766	WITHOUT_CLASSIFICATION	7.717509234323842E-7	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999797148338893	WITHOUT_CLASSIFICATION	2.028516611073076E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.999998606379525	WITHOUT_CLASSIFICATION	1.3936204750975487E-6	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999589463423871	WITHOUT_CLASSIFICATION	4.105365761280982E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999993867080407	WITHOUT_CLASSIFICATION	6.132919593279079E-7	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999996597304076	WITHOUT_CLASSIFICATION	3.4026959236435124E-7	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999472429190034	WITHOUT_CLASSIFICATION	5.275708099666532E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999985224932921	WITHOUT_CLASSIFICATION	1.4775067078960244E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999987866781991	WITHOUT_CLASSIFICATION	1.213321800903119E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999944715794378	WITHOUT_CLASSIFICATION	5.528420562259265E-6	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999975765486088	WITHOUT_CLASSIFICATION	2.423451391239182E-6	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999843110578662	WITHOUT_CLASSIFICATION	1.5688942133846398E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999985574646304	WITHOUT_CLASSIFICATION	1.442535369645799E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999807082430883	WITHOUT_CLASSIFICATION	1.929175691172483E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999687245266	WITHOUT_CLASSIFICATION	3.1275473520764176E-8	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997752385272	WITHOUT_CLASSIFICATION	2.2476147272534986E-7	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999999363079906	WITHOUT_CLASSIFICATION	6.369200945803422E-8	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999974732880568	WITHOUT_CLASSIFICATION	2.526711943291224E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999974485460792	WITHOUT_CLASSIFICATION	2.5514539208102583E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999995574817406	WITHOUT_CLASSIFICATION	4.4251825941014735E-6	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999786504094531	WITHOUT_CLASSIFICATION	2.1349590546982465E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999967505365068	WITHOUT_CLASSIFICATION	3.2494634931932412E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999036825048	WITHOUT_CLASSIFICATION	9.631749519405583E-8	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999270934109	WITHOUT_CLASSIFICATION	7.29065891105864E-8	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997073914805	WITHOUT_CLASSIFICATION	2.92608519607802E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999980685108038	WITHOUT_CLASSIFICATION	1.931489196302484E-6	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999763306016	WITHOUT_CLASSIFICATION	2.3669398438076298E-8	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999489139769266	WITHOUT_CLASSIFICATION	5.108602307327409E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999931001840229	WITHOUT_CLASSIFICATION	6.899815977059068E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999990981491592	WITHOUT_CLASSIFICATION	9.018508407477478E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999999541906913	WITHOUT_CLASSIFICATION	4.5809308723799364E-8	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985036251973	WITHOUT_CLASSIFICATION	1.4963748027790925E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999999864680493	WITHOUT_CLASSIFICATION	1.3531950699003107E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999581827704	WITHOUT_CLASSIFICATION	4.181722967245069E-8	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999963354926	WITHOUT_CLASSIFICATION	3.6645074477501562E-9	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999230268447	WITHOUT_CLASSIFICATION	7.69731552766921E-8	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999993064945444	WITHOUT_CLASSIFICATION	6.935054556100743E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999974055749783	WITHOUT_CLASSIFICATION	2.5944250217547103E-6	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999691524478	WITHOUT_CLASSIFICATION	3.0847552201687375E-8	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999997381198852	WITHOUT_CLASSIFICATION	2.6188011482057847E-7	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999996142169488	WITHOUT_CLASSIFICATION	3.857830511877534E-7	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999988849960669	WITHOUT_CLASSIFICATION	1.1150039330104739E-6	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999983981364993	WITHOUT_CLASSIFICATION	1.601863500675932E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999982941833823	WITHOUT_CLASSIFICATION	1.7058166176961493E-6	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999976312636	WITHOUT_CLASSIFICATION	2.3687363739694574E-9	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999875069732296	WITHOUT_CLASSIFICATION	1.2493026770477066E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999941526583146	WITHOUT_CLASSIFICATION	5.847341685336031E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985036251973	WITHOUT_CLASSIFICATION	1.4963748027790925E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999996448807484	WITHOUT_CLASSIFICATION	3.551192515414222E-7	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999964689790208	WITHOUT_CLASSIFICATION	3.5310209791877094E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999996832244111	WITHOUT_CLASSIFICATION	3.167755887825092E-7	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999762373336	WITHOUT_CLASSIFICATION	2.376266633737924E-8	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999975320371349	WITHOUT_CLASSIFICATION	2.4679628651048405E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999996886378046	WITHOUT_CLASSIFICATION	3.113621953970395E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999993385759669	WITHOUT_CLASSIFICATION	6.614240331883418E-7	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997378007296486	WITHOUT_CLASSIFICATION	2.6219927035137693E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997752385272	WITHOUT_CLASSIFICATION	2.2476147272534986E-7	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997054250228453	WITHOUT_CLASSIFICATION	2.9457497715469757E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999991985235511	WITHOUT_CLASSIFICATION	8.014764489026175E-7	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999033654386	WITHOUT_CLASSIFICATION	9.663456139598954E-7	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999985144018534	WITHOUT_CLASSIFICATION	1.4855981466519264E-6	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999977850811427	WITHOUT_CLASSIFICATION	2.214918857371819E-6	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999995263050508	WITHOUT_CLASSIFICATION	4.736949491996888E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999269671374	WITHOUT_CLASSIFICATION	7.303286266360119E-8	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998150491838	WITHOUT_CLASSIFICATION	1.8495081625339421E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999988799103953	WITHOUT_CLASSIFICATION	1.1200896046771667E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999988574922	WITHOUT_CLASSIFICATION	1.1425077371251893E-9	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999964905418961	WITHOUT_CLASSIFICATION	3.5094581038957113E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999843766147576	WITHOUT_CLASSIFICATION	1.562338524244283E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999796625745	WITHOUT_CLASSIFICATION	2.0337425454729626E-8	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999796625745	WITHOUT_CLASSIFICATION	2.0337425454729626E-8	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999981259967496	WITHOUT_CLASSIFICATION	1.8740032503946675E-6	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999945653556928	WITHOUT_CLASSIFICATION	5.434644307195747E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999993134703	WITHOUT_CLASSIFICATION	6.865297864259905E-10	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999642476127	WITHOUT_CLASSIFICATION	3.575238730883287E-8	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999995029247413	WITHOUT_CLASSIFICATION	4.970752586906643E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999999928188196	WITHOUT_CLASSIFICATION	7.181180396830538E-8	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999806481731	WITHOUT_CLASSIFICATION	1.9351826968832435E-8	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999993785369883	WITHOUT_CLASSIFICATION	6.214630116470186E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999873362567	WITHOUT_CLASSIFICATION	1.2663743318075457E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999982698625346	WITHOUT_CLASSIFICATION	1.7301374653828386E-6	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999961537378402	WITHOUT_CLASSIFICATION	3.846262159779981E-6	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999966771902732	WITHOUT_CLASSIFICATION	3.3228097269222885E-6	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999984428023292	WITHOUT_CLASSIFICATION	1.557197670851412E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999773589	WITHOUT_CLASSIFICATION	2.2641029403843917E-11	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999964958853391	WITHOUT_CLASSIFICATION	3.5041146607419067E-6	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999996934981114	WITHOUT_CLASSIFICATION	3.065018886604741E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999995170656958	WITHOUT_CLASSIFICATION	4.829343041471736E-7	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999995854489162	WITHOUT_CLASSIFICATION	4.1455108375137643E-7	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999958869776133	WITHOUT_CLASSIFICATION	4.1130223867698445E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999027294975	WITHOUT_CLASSIFICATION	9.727050247143207E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999952861626727	WITHOUT_CLASSIFICATION	4.713837327259273E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999987278494902	WITHOUT_CLASSIFICATION	1.2721505097637165E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999997457974056	WITHOUT_CLASSIFICATION	2.542025945116061E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9963464605038104	WITHOUT_CLASSIFICATION	0.0036535394961896696	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9994662770135908	WITHOUT_CLASSIFICATION	5.337229864092703E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999750116989	WITHOUT_CLASSIFICATION	2.498830109454672E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999997279076664	WITHOUT_CLASSIFICATION	2.7209233353861056E-7	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999977932422929	WITHOUT_CLASSIFICATION	2.206757707165793E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999995544618228	WITHOUT_CLASSIFICATION	4.455381771539655E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998226832593	WITHOUT_CLASSIFICATION	1.7731674069069982E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9966444444563699	WITHOUT_CLASSIFICATION	0.0033555555436301644	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999981392282832	WITHOUT_CLASSIFICATION	1.8607717167970165E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999923311940151	WITHOUT_CLASSIFICATION	7.668805984892859E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9997113264772491	WITHOUT_CLASSIFICATION	2.8867352275087474E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996408971908	WITHOUT_CLASSIFICATION	3.591028091169168E-7	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999997473224305	WITHOUT_CLASSIFICATION	2.5267756949527814E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999972699296984	WITHOUT_CLASSIFICATION	2.730070301619267E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9991971583655821	WITHOUT_CLASSIFICATION	8.028416344180189E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999941425690728	WITHOUT_CLASSIFICATION	5.857430927199811E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995405440505	WITHOUT_CLASSIFICATION	4.5945594953380946E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999623898013243	WITHOUT_CLASSIFICATION	3.761019867571123E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999839418869	WITHOUT_CLASSIFICATION	1.605811308257822E-8	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999962290497085	WITHOUT_CLASSIFICATION	3.7709502914838898E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999992875629385	WITHOUT_CLASSIFICATION	7.12437061431451E-7	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999991839387528	WITHOUT_CLASSIFICATION	8.160612471959082E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999401274548481	WITHOUT_CLASSIFICATION	5.987254515192402E-5	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9728941124575566	WITHOUT_CLASSIFICATION	0.0271058875424433	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999662014107439	WITHOUT_CLASSIFICATION	3.3798589256216654E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999992068642656	WITHOUT_CLASSIFICATION	7.931357344531817E-7	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999964123305949	WITHOUT_CLASSIFICATION	3.587669405087955E-6	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932400189233	WITHOUT_CLASSIFICATION	6.7599810767100966E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999799610074033	WITHOUT_CLASSIFICATION	2.0038992596732493E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999969068692	WITHOUT_CLASSIFICATION	3.093130791401338E-9	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999993398268611	WITHOUT_CLASSIFICATION	6.601731389907064E-7	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999992063490929	WITHOUT_CLASSIFICATION	7.936509070994428E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999994757158441	WITHOUT_CLASSIFICATION	5.242841558658165E-7	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999997206343649	WITHOUT_CLASSIFICATION	2.793656350740181E-7	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9996734478924972	WITHOUT_CLASSIFICATION	3.265521075027626E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999910000241055	WITHOUT_CLASSIFICATION	8.999975894524724E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999984729623292	WITHOUT_CLASSIFICATION	1.5270376707224325E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999999922048555	WITHOUT_CLASSIFICATION	7.795144494333906E-8	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999995015054364	WITHOUT_CLASSIFICATION	4.98494563542114E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999982654774413	WITHOUT_CLASSIFICATION	1.7345225586165055E-6	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999827765601	WITHOUT_CLASSIFICATION	1.7223439922122523E-8	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999955229032271	WITHOUT_CLASSIFICATION	4.4770967729039596E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999996285871501	WITHOUT_CLASSIFICATION	3.714128498639301E-7	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999968570839527	WITHOUT_CLASSIFICATION	3.142916047455222E-6	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999978896056669	WITHOUT_CLASSIFICATION	2.1103943329820753E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999883422050875	WITHOUT_CLASSIFICATION	1.1657794912565873E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999988980696564	WITHOUT_CLASSIFICATION	1.1019303435709543E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999883422050875	WITHOUT_CLASSIFICATION	1.1657794912565873E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999992411392	WITHOUT_CLASSIFICATION	7.588607106827409E-10	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999978076143758	WITHOUT_CLASSIFICATION	2.192385624147104E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999780506446935	WITHOUT_CLASSIFICATION	2.1949355306610708E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999976648516362	WITHOUT_CLASSIFICATION	2.3351483638427894E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999951682319146	WITHOUT_CLASSIFICATION	4.831768085368802E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999990278110748	WITHOUT_CLASSIFICATION	9.721889251943756E-6	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999995542678259	WITHOUT_CLASSIFICATION	4.457321740583036E-7	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999968766361964	WITHOUT_CLASSIFICATION	3.123363803624865E-6	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999995195469367	WITHOUT_CLASSIFICATION	4.804530634148693E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999961562541	WITHOUT_CLASSIFICATION	3.8437458974482245E-8	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999995784581167	WITHOUT_CLASSIFICATION	4.215418833677792E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999899039264626	WITHOUT_CLASSIFICATION	1.0096073537502408E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999948884166	WITHOUT_CLASSIFICATION	5.111583345647051E-9	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999997291538527	WITHOUT_CLASSIFICATION	2.708461472949952E-6	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999941675627877	WITHOUT_CLASSIFICATION	5.832437212377606E-6	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.99999933160407	WITHOUT_CLASSIFICATION	6.683959299544025E-7	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999995148983535	WITHOUT_CLASSIFICATION	4.851016465660606E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999952004845	WITHOUT_CLASSIFICATION	4.799515412856802E-9	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998985985633	WITHOUT_CLASSIFICATION	1.0140143673064247E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999998734451515	WITHOUT_CLASSIFICATION	1.2655484845291343E-7	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999993434403424	WITHOUT_CLASSIFICATION	6.565596576567599E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999916909369783	WITHOUT_CLASSIFICATION	8.309063021823899E-6	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999815852762565	WITHOUT_CLASSIFICATION	1.84147237434891E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9982066774344277	WITHOUT_CLASSIFICATION	0.0017933225655723164	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999995504115481	WITHOUT_CLASSIFICATION	4.495884518958312E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999978571038683	WITHOUT_CLASSIFICATION	2.1428961316531423E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999997092718039	WITHOUT_CLASSIFICATION	2.907281960152952E-7	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999879079893741	WITHOUT_CLASSIFICATION	1.2092010625879127E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998844208765	WITHOUT_CLASSIFICATION	1.1557912356091994E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999952215450102	WITHOUT_CLASSIFICATION	4.778454989837356E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999997024244484	WITHOUT_CLASSIFICATION	2.975755516361541E-7	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999983376210747	WITHOUT_CLASSIFICATION	1.66237892529756E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999915287	WITHOUT_CLASSIFICATION	8.471250235821566E-12	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999981936170991	WITHOUT_CLASSIFICATION	1.8063829008873182E-6	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999996489568749	WITHOUT_CLASSIFICATION	3.510431251379974E-7	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999961562482299	WITHOUT_CLASSIFICATION	3.843751770071127E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.999996221745594	WITHOUT_CLASSIFICATION	3.7782544061017357E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999624935999	WITHOUT_CLASSIFICATION	3.750640000234514E-8	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999869564403647	WITHOUT_CLASSIFICATION	1.304355963535421E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999853829051	WITHOUT_CLASSIFICATION	1.4617094873884962E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.999999379134577	WITHOUT_CLASSIFICATION	6.208654228614014E-7	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999630386183603	WITHOUT_CLASSIFICATION	3.696138163970776E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997800642090722	WITHOUT_CLASSIFICATION	2.1993579092780338E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999978571038683	WITHOUT_CLASSIFICATION	2.1428961316531423E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999422812186725	WITHOUT_CLASSIFICATION	5.7718781327651726E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999972250335	WITHOUT_CLASSIFICATION	2.7749665000445892E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999850566504819	WITHOUT_CLASSIFICATION	1.4943349518048327E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999939479778	WITHOUT_CLASSIFICATION	6.052022196386912E-8	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999996199865836	WITHOUT_CLASSIFICATION	3.800134164107325E-7	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999895374842592	WITHOUT_CLASSIFICATION	1.0462515740811803E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999364965060055	WITHOUT_CLASSIFICATION	6.350349399460104E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999825775788187	WITHOUT_CLASSIFICATION	1.7422421181372948E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999973788969717	WITHOUT_CLASSIFICATION	2.6211030282142156E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999892769294855	WITHOUT_CLASSIFICATION	1.0723070514634112E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999938858125971	WITHOUT_CLASSIFICATION	6.114187402933263E-6	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999381317801	WITHOUT_CLASSIFICATION	6.186821988526565E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999865533396499	WITHOUT_CLASSIFICATION	1.3446660349937603E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999999097355935	WITHOUT_CLASSIFICATION	9.026440649107461E-7	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999996469941261	WITHOUT_CLASSIFICATION	3.5300587390328316E-7	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999940083949	WITHOUT_CLASSIFICATION	5.991605046701034E-9	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999981761148707	WITHOUT_CLASSIFICATION	1.8238851291972248E-6	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999586277027	WITHOUT_CLASSIFICATION	4.137229729618037E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999106401700951	WITHOUT_CLASSIFICATION	8.935982990481191E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999422812186725	WITHOUT_CLASSIFICATION	5.7718781327651726E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999963309319821	WITHOUT_CLASSIFICATION	3.6690680179582095E-6	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999925410990774	WITHOUT_CLASSIFICATION	7.458900922585192E-6	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999997374322227	WITHOUT_CLASSIFICATION	2.625677772860824E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998398187455	WITHOUT_CLASSIFICATION	1.6018125438405484E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999610634487	WITHOUT_CLASSIFICATION	3.893655130941966E-8	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.998726420385578	WITHOUT_CLASSIFICATION	0.0012735796144219744	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.998726420385578	WITHOUT_CLASSIFICATION	0.0012735796144219744	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997928746281	WITHOUT_CLASSIFICATION	2.071253719004085E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.998726420385578	WITHOUT_CLASSIFICATION	0.0012735796144219744	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.998726420385578	WITHOUT_CLASSIFICATION	0.0012735796144219744	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999403919928255	WITHOUT_CLASSIFICATION	5.9608007174476144E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999843447455	WITHOUT_CLASSIFICATION	1.5655254590250183E-8	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999993447196533	WITHOUT_CLASSIFICATION	6.552803466952826E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999976145742207	WITHOUT_CLASSIFICATION	2.3854257792963197E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999979909273	WITHOUT_CLASSIFICATION	2.0090727179150847E-9	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999989714351	WITHOUT_CLASSIFICATION	1.0285648345411961E-9	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994184500279177	WITHOUT_CLASSIFICATION	5.815499720822327E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999631105014	WITHOUT_CLASSIFICATION	3.6889498634992794E-8	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999174571267382	WITHOUT_CLASSIFICATION	8.254287326179996E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999918160436039	WITHOUT_CLASSIFICATION	8.183956396103609E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999373228057107	WITHOUT_CLASSIFICATION	6.267719428931596E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998998893873245	WITHOUT_CLASSIFICATION	1.0011061267538929E-4	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999987222725505	WITHOUT_CLASSIFICATION	1.2777274494791574E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999887343547603	WITHOUT_CLASSIFICATION	1.1265645239719371E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999955250926618	WITHOUT_CLASSIFICATION	4.474907338240336E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999983872188674	WITHOUT_CLASSIFICATION	1.6127811326841233E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997793108747	WITHOUT_CLASSIFICATION	2.2068912540460665E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999942091841559	WITHOUT_CLASSIFICATION	5.790815844159712E-6	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999618537346	WITHOUT_CLASSIFICATION	3.814626540005876E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999922267075126	WITHOUT_CLASSIFICATION	7.773292487334147E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999885633956911	WITHOUT_CLASSIFICATION	1.143660430888848E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999978984455291	WITHOUT_CLASSIFICATION	2.1015544708778503E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997793108747	WITHOUT_CLASSIFICATION	2.2068912540460665E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999997092718039	WITHOUT_CLASSIFICATION	2.907281960152952E-7	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9998908380412261	WITHOUT_CLASSIFICATION	1.0916195877380127E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991107655711	WITHOUT_CLASSIFICATION	8.892344287404478E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996439073323	WITHOUT_CLASSIFICATION	3.5609266768384167E-7	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999952069397982	WITHOUT_CLASSIFICATION	4.793060201735601E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999962551348226	WITHOUT_CLASSIFICATION	3.7448651774845356E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.999999383084977	WITHOUT_CLASSIFICATION	6.169150229886117E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998592461021866	WITHOUT_CLASSIFICATION	1.407538978134121E-4	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999959847889064	WITHOUT_CLASSIFICATION	4.015211093611766E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999457023149464	WITHOUT_CLASSIFICATION	5.429768505360589E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999731793666049	WITHOUT_CLASSIFICATION	2.6820633395135756E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999999720976892	WITHOUT_CLASSIFICATION	2.790231079943214E-7	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999998909097627	WITHOUT_CLASSIFICATION	1.0909023731099582E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999653203973	WITHOUT_CLASSIFICATION	3.467960270357639E-7	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998447800537764	WITHOUT_CLASSIFICATION	1.5521994622348225E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998775226506	WITHOUT_CLASSIFICATION	1.2247734938369773E-7	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999997242904601	WITHOUT_CLASSIFICATION	2.757095398096608E-7	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999764015371959	WITHOUT_CLASSIFICATION	2.3598462804013777E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999958977628374	WITHOUT_CLASSIFICATION	4.102237162523158E-6	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.99999528922866	WITHOUT_CLASSIFICATION	4.7107713399488E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999655058094421	WITHOUT_CLASSIFICATION	3.449419055788297E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999630028718816	WITHOUT_CLASSIFICATION	3.699712811847685E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999810673421	WITHOUT_CLASSIFICATION	1.8932657955599656E-8	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999959847889064	WITHOUT_CLASSIFICATION	4.015211093611766E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999994505792676	WITHOUT_CLASSIFICATION	5.494207323050744E-7	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999836646594875	WITHOUT_CLASSIFICATION	1.6335340512555376E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999974296881312	WITHOUT_CLASSIFICATION	2.5703118688013747E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999985999251975	WITHOUT_CLASSIFICATION	1.4000748024659545E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997561592994	WITHOUT_CLASSIFICATION	2.438407006946529E-7	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999928284838555	WITHOUT_CLASSIFICATION	7.171516144515196E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999990157874241	WITHOUT_CLASSIFICATION	9.842125758118142E-7	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999947351401061	WITHOUT_CLASSIFICATION	5.264859893966857E-6	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999928556119084	WITHOUT_CLASSIFICATION	7.14438809158373E-6	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9998291759199991	WITHOUT_CLASSIFICATION	1.7082408000100528E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999990262860321	WITHOUT_CLASSIFICATION	9.737139679326776E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999994614707244	WITHOUT_CLASSIFICATION	5.385292756268767E-7	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999997149593757	WITHOUT_CLASSIFICATION	2.850406243397537E-7	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999427822038	WITHOUT_CLASSIFICATION	5.7217796108757486E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996416697113	WITHOUT_CLASSIFICATION	3.583302886848737E-7	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999825404038885	WITHOUT_CLASSIFICATION	1.7459596111463614E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984857934293	WITHOUT_CLASSIFICATION	1.5142065707971427E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999990262860321	WITHOUT_CLASSIFICATION	9.737139679326776E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999973403397	WITHOUT_CLASSIFICATION	2.6596603208417114E-9	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999953065330677	WITHOUT_CLASSIFICATION	4.693466932357627E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999247334105	WITHOUT_CLASSIFICATION	7.526658941311141E-8	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999984485842129	WITHOUT_CLASSIFICATION	1.5514157869879716E-6	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999973642419578	WITHOUT_CLASSIFICATION	2.635758042072181E-6	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999993447211	WITHOUT_CLASSIFICATION	6.552789000062175E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996416697113	WITHOUT_CLASSIFICATION	3.583302886848737E-7	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999993475386674	WITHOUT_CLASSIFICATION	6.524613325708478E-7	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999648802009	WITHOUT_CLASSIFICATION	3.5119799100729733E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999202832255	WITHOUT_CLASSIFICATION	7.971677450511106E-8	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996533635281168	WITHOUT_CLASSIFICATION	3.4663647188316735E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993673706519474	WITHOUT_CLASSIFICATION	6.326293480526779E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999676016064596	WITHOUT_CLASSIFICATION	3.239839354040644E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995425298202	WITHOUT_CLASSIFICATION	4.57470179906402E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995425298202	WITHOUT_CLASSIFICATION	4.57470179906402E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999999934029661	WITHOUT_CLASSIFICATION	6.597033893869072E-8	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999979799325659	WITHOUT_CLASSIFICATION	2.0200674340014926E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999980497083906	WITHOUT_CLASSIFICATION	1.9502916094346746E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999994621754681	WITHOUT_CLASSIFICATION	5.378245318335304E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999858703169797	WITHOUT_CLASSIFICATION	1.4129683020310124E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998796189314	WITHOUT_CLASSIFICATION	1.2038106850780724E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968055825784	WITHOUT_CLASSIFICATION	3.1944174216778934E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999874148065	WITHOUT_CLASSIFICATION	1.258519349881311E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999757352332	WITHOUT_CLASSIFICATION	2.426476682345489E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996780118335	WITHOUT_CLASSIFICATION	3.219881665147236E-7	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998796189314	WITHOUT_CLASSIFICATION	1.2038106850780724E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968055825784	WITHOUT_CLASSIFICATION	3.1944174216778934E-6	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999874148065	WITHOUT_CLASSIFICATION	1.258519349881311E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999384843011	WITHOUT_CLASSIFICATION	6.151569891356153E-8	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999674280484804	WITHOUT_CLASSIFICATION	3.257195151971717E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999997608368514	WITHOUT_CLASSIFICATION	2.3916314863901263E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999999113983145	WITHOUT_CLASSIFICATION	8.860168551364893E-7	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.99999998681861	WITHOUT_CLASSIFICATION	1.318139005413209E-8	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999996770252835	WITHOUT_CLASSIFICATION	3.2297471650780265E-7	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999536529329495	WITHOUT_CLASSIFICATION	4.6347067050579195E-5	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999484987656919	WITHOUT_CLASSIFICATION	5.150123430810491E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999902892663399	WITHOUT_CLASSIFICATION	9.710733660055586E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999950224745388	WITHOUT_CLASSIFICATION	4.977525461166933E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999747529683	WITHOUT_CLASSIFICATION	2.5247031704276996E-8	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999921718253989	WITHOUT_CLASSIFICATION	7.828174601104183E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999634061234374	WITHOUT_CLASSIFICATION	3.6593876562600506E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999572991464	WITHOUT_CLASSIFICATION	4.270085375673917E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995455302738	WITHOUT_CLASSIFICATION	4.5446972618395303E-7	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999952262140103	WITHOUT_CLASSIFICATION	4.773785989809608E-6	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999991929836911	WITHOUT_CLASSIFICATION	8.070163089316268E-7	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999736040028201	WITHOUT_CLASSIFICATION	2.6395997179894627E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999990804253532	WITHOUT_CLASSIFICATION	9.195746466507579E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999959581994745	WITHOUT_CLASSIFICATION	4.041800525467596E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999962849622479	WITHOUT_CLASSIFICATION	3.715037752054791E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999761281497472	WITHOUT_CLASSIFICATION	2.3871850252799586E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9961447252245254	WITHOUT_CLASSIFICATION	0.0038552747754745436	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999816459072495	WITHOUT_CLASSIFICATION	1.8354092750515988E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999938562755	WITHOUT_CLASSIFICATION	6.143724518040013E-9	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998845167207392	WITHOUT_CLASSIFICATION	1.15483279260844E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999794654132	WITHOUT_CLASSIFICATION	2.0534586785267846E-7	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976483337603	WITHOUT_CLASSIFICATION	2.351666239818802E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999932592014	WITHOUT_CLASSIFICATION	6.7407985774115695E-9	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999054980695	WITHOUT_CLASSIFICATION	9.45019305152715E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994174660408	WITHOUT_CLASSIFICATION	5.8253395920086E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999741037093	WITHOUT_CLASSIFICATION	2.5896290729898146E-8	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999741037093	WITHOUT_CLASSIFICATION	2.5896290729898146E-8	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999641870593	WITHOUT_CLASSIFICATION	3.5812940640389173E-8	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999999999564509	WITHOUT_CLASSIFICATION	4.354909556262569E-10	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999904398845438	WITHOUT_CLASSIFICATION	9.560115456187195E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999685873673895	WITHOUT_CLASSIFICATION	3.141263261046053E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9997250854541452	WITHOUT_CLASSIFICATION	2.7491454585490497E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999950123125	WITHOUT_CLASSIFICATION	4.987687581428359E-9	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999978225455338	WITHOUT_CLASSIFICATION	2.1774544661823777E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.999996471105575	WITHOUT_CLASSIFICATION	3.5288944251338695E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999931291280193	WITHOUT_CLASSIFICATION	6.8708719807638155E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985420117821	WITHOUT_CLASSIFICATION	1.4579882179018135E-6	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978450865464	WITHOUT_CLASSIFICATION	2.1549134535819585E-6	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977267827863	WITHOUT_CLASSIFICATION	2.2732172136928236E-6	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993499763279	WITHOUT_CLASSIFICATION	6.500236721379946E-7	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990591254009	WITHOUT_CLASSIFICATION	9.40874599161896E-7	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983094452755	WITHOUT_CLASSIFICATION	1.690554724568712E-6	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989130772532	WITHOUT_CLASSIFICATION	1.0869227468380326E-6	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975678014844	WITHOUT_CLASSIFICATION	2.4321985155659353E-6	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993235122122	WITHOUT_CLASSIFICATION	6.76487787763978E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961053671521	WITHOUT_CLASSIFICATION	3.89463284788655E-6	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995932119088	WITHOUT_CLASSIFICATION	4.067880912825148E-7	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999915310275922	WITHOUT_CLASSIFICATION	8.468972407819504E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999992698664697	WITHOUT_CLASSIFICATION	7.30133530295027E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999732424257471	WITHOUT_CLASSIFICATION	2.6757574252929335E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999998397940805	WITHOUT_CLASSIFICATION	1.6020591942875905E-7	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999903142622	WITHOUT_CLASSIFICATION	9.685737684059927E-9	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999871176807418	WITHOUT_CLASSIFICATION	1.288231925824715E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999677959782	WITHOUT_CLASSIFICATION	3.220402177400898E-8	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9907211035798034	WITHOUT_CLASSIFICATION	0.009278896420196688	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999732424257471	WITHOUT_CLASSIFICATION	2.6757574252929335E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999732424257471	WITHOUT_CLASSIFICATION	2.6757574252929335E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999888595290372	WITHOUT_CLASSIFICATION	1.114047096286287E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999982566141424	WITHOUT_CLASSIFICATION	1.7433858575761535E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999991881591	WITHOUT_CLASSIFICATION	8.11840979413513E-10	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999862566916078	WITHOUT_CLASSIFICATION	1.3743308392208243E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995684418932	WITHOUT_CLASSIFICATION	4.3155810677424533E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999959581994745	WITHOUT_CLASSIFICATION	4.041800525467596E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999998336915183	WITHOUT_CLASSIFICATION	1.663084816206233E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999740903909468	WITHOUT_CLASSIFICATION	2.5909609053280373E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999999958475964	WITHOUT_CLASSIFICATION	4.1524035983937225E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999484046078704	WITHOUT_CLASSIFICATION	5.159539212976317E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999947528621604	WITHOUT_CLASSIFICATION	5.247137839505646E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988185864187	WITHOUT_CLASSIFICATION	1.1814135813059044E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999990156834122	WITHOUT_CLASSIFICATION	9.84316587903643E-7	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999990156834122	WITHOUT_CLASSIFICATION	9.84316587903643E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989888989052	WITHOUT_CLASSIFICATION	1.0111010948654497E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989888989052	WITHOUT_CLASSIFICATION	1.0111010948654497E-6	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990778162858989	WITHOUT_CLASSIFICATION	9.221837141011036E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999011968504	WITHOUT_CLASSIFICATION	9.880314956705114E-8	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999899469520237	WITHOUT_CLASSIFICATION	1.005304797640613E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998821960271798	WITHOUT_CLASSIFICATION	1.1780397282029852E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.99999420738127	WITHOUT_CLASSIFICATION	5.7926187300270045E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999666542871207	WITHOUT_CLASSIFICATION	3.334571287920159E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981324004192	WITHOUT_CLASSIFICATION	1.8675995806876034E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999663197028	WITHOUT_CLASSIFICATION	3.368029717211867E-8	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999988263545588	WITHOUT_CLASSIFICATION	1.1736454411068236E-6	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999948387283	WITHOUT_CLASSIFICATION	5.161271725479889E-9	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999974884331	WITHOUT_CLASSIFICATION	2.5115668991065422E-8	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999988928615744	WITHOUT_CLASSIFICATION	1.107138425575504E-6	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999648950416378	WITHOUT_CLASSIFICATION	3.5104958362324925E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998092804291	WITHOUT_CLASSIFICATION	1.9071957081780815E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999833455063414	WITHOUT_CLASSIFICATION	1.665449365852321E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999781647901496	WITHOUT_CLASSIFICATION	2.183520985042985E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999781647901496	WITHOUT_CLASSIFICATION	2.183520985042985E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999913512009	WITHOUT_CLASSIFICATION	8.648799140012545E-9	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999983564309973	WITHOUT_CLASSIFICATION	1.6435690027694778E-6	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999966935319	WITHOUT_CLASSIFICATION	3.306468014923227E-9	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999983003839173	WITHOUT_CLASSIFICATION	1.699616082647853E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993505203888	WITHOUT_CLASSIFICATION	6.494796111933227E-7	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979080994242	WITHOUT_CLASSIFICATION	2.091900575765908E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999993366220293	WITHOUT_CLASSIFICATION	6.63377970623536E-7	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815348344212	WITHOUT_CLASSIFICATION	1.846516557883972E-5	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9646421340785868	WITHOUT_CLASSIFICATION	0.035357865921413226	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999998619770013	WITHOUT_CLASSIFICATION	1.380229987005065E-7	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999996915398963	WITHOUT_CLASSIFICATION	3.084601037832176E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9965611788615507	WITHOUT_CLASSIFICATION	0.0034388211384492507	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966725238751	WITHOUT_CLASSIFICATION	3.327476124818531E-6	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999020614876	WITHOUT_CLASSIFICATION	9.793851248554163E-8	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999542468891875	WITHOUT_CLASSIFICATION	4.5753110812412794E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999969555561857	WITHOUT_CLASSIFICATION	3.0444438142981924E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999965194711009	WITHOUT_CLASSIFICATION	3.480528899097401E-6	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999990304430034	WITHOUT_CLASSIFICATION	9.695569964909906E-7	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999990122427925	WITHOUT_CLASSIFICATION	9.877572074834625E-7	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.999999689985268	WITHOUT_CLASSIFICATION	3.1001473199030366E-7	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999559516	WITHOUT_CLASSIFICATION	4.4048386296237797E-11	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999991188292	WITHOUT_CLASSIFICATION	8.811707613048728E-10	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999999304994	WITHOUT_CLASSIFICATION	6.950053614990633E-11	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999414583158099	WITHOUT_CLASSIFICATION	5.8541684190086145E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999997995800874	WITHOUT_CLASSIFICATION	2.004199125562229E-7	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999998536886903	WITHOUT_CLASSIFICATION	1.4631130979075417E-7	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999544320909	WITHOUT_CLASSIFICATION	4.55679091975813E-8	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999999313250347	WITHOUT_CLASSIFICATION	6.867496521926528E-8	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999979977224	WITHOUT_CLASSIFICATION	2.0022776106171745E-9	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999947086776044	WITHOUT_CLASSIFICATION	5.2913223955374565E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999996794022	WITHOUT_CLASSIFICATION	3.205977355320831E-10	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999996738589805	WITHOUT_CLASSIFICATION	3.2614101956704215E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999989428332724	WITHOUT_CLASSIFICATION	1.0571667275951456E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999929788427225	WITHOUT_CLASSIFICATION	7.021157277516053E-6	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999575799211	WITHOUT_CLASSIFICATION	4.242007884678316E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999999503304503	WITHOUT_CLASSIFICATION	4.966954967197409E-8	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999991175252859	WITHOUT_CLASSIFICATION	8.824747140074748E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999202447139096	WITHOUT_CLASSIFICATION	7.975528609041996E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999514983222	WITHOUT_CLASSIFICATION	4.850167773147095E-8	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997856979307764	WITHOUT_CLASSIFICATION	2.1430206922366213E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999828330466	WITHOUT_CLASSIFICATION	1.7166953462765395E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999902325667878	WITHOUT_CLASSIFICATION	9.767433212276508E-6	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999994442521903	WITHOUT_CLASSIFICATION	5.557478097145091E-7	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999998793233128	WITHOUT_CLASSIFICATION	1.206766870926229E-7	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999978534498	WITHOUT_CLASSIFICATION	2.146550218126429E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999699069836203	WITHOUT_CLASSIFICATION	3.0093016379808644E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999984731395473	WITHOUT_CLASSIFICATION	1.5268604526649728E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999740179903609	WITHOUT_CLASSIFICATION	2.598200963919525E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999793867201425	WITHOUT_CLASSIFICATION	2.0613279857477704E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999971256332132	WITHOUT_CLASSIFICATION	2.8743667867239717E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999996759053013	WITHOUT_CLASSIFICATION	3.2409469869674304E-6	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9993501725295957	WITHOUT_CLASSIFICATION	6.498274704043162E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999982284607864	WITHOUT_CLASSIFICATION	1.771539213607903E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999832448012543	WITHOUT_CLASSIFICATION	1.6755198745735277E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999651054244654	WITHOUT_CLASSIFICATION	3.4894575534678016E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999991698383813	WITHOUT_CLASSIFICATION	8.301616187447852E-7	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9985146662820411	WITHOUT_CLASSIFICATION	0.001485333717958932	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999987999183505	WITHOUT_CLASSIFICATION	1.200081649452214E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999019289535	WITHOUT_CLASSIFICATION	9.80710465838205E-8	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999924962502924	WITHOUT_CLASSIFICATION	7.503749707601806E-5	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998941093378	WITHOUT_CLASSIFICATION	1.0589066229218142E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999374976688	WITHOUT_CLASSIFICATION	6.250233121587297E-8	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999936845044	WITHOUT_CLASSIFICATION	6.3154954884485995E-9	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999563407111	WITHOUT_CLASSIFICATION	4.365928884529109E-8	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997716653323	WITHOUT_CLASSIFICATION	2.283346676783183E-7	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999987997463	WITHOUT_CLASSIFICATION	1.2002536231658846E-9	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999909581149	WITHOUT_CLASSIFICATION	9.041885117580097E-9	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999960677000813	WITHOUT_CLASSIFICATION	3.932299918716546E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999868580322387	WITHOUT_CLASSIFICATION	1.3141967761373742E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999868580322387	WITHOUT_CLASSIFICATION	1.3141967761373742E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999998044702951	WITHOUT_CLASSIFICATION	1.9552970501418192E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999986959146263	WITHOUT_CLASSIFICATION	1.3040853737152538E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999684377756564	WITHOUT_CLASSIFICATION	3.1562224343607094E-5	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999242698465559	WITHOUT_CLASSIFICATION	7.573015344413542E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999954707075	WITHOUT_CLASSIFICATION	4.529292533517456E-9	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999383406999879	WITHOUT_CLASSIFICATION	6.165930001206658E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999998649645008	WITHOUT_CLASSIFICATION	1.3503549921875807E-7	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999994135369	WITHOUT_CLASSIFICATION	5.864631072588976E-9	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999888314920113	WITHOUT_CLASSIFICATION	1.1168507988675939E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999854672162	WITHOUT_CLASSIFICATION	1.453278377747043E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999965487709042	WITHOUT_CLASSIFICATION	3.451229095803564E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999999516461425	WITHOUT_CLASSIFICATION	4.835385749992707E-7	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999975992152464	WITHOUT_CLASSIFICATION	2.400784753509072E-6	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999818586609	WITHOUT_CLASSIFICATION	1.8141339065769854E-8	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999871312424733	WITHOUT_CLASSIFICATION	1.2868757526770796E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9981006039034303	WITHOUT_CLASSIFICATION	0.0018993960965697904	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999759722198175	WITHOUT_CLASSIFICATION	2.402778018250201E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998534862264989	WITHOUT_CLASSIFICATION	1.4651377350114613E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9934263796947804	WITHOUT_CLASSIFICATION	0.006573620305219515	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999981286879048	WITHOUT_CLASSIFICATION	1.871312095111176E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999992573750206	WITHOUT_CLASSIFICATION	7.42624979402712E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999977792141637	WITHOUT_CLASSIFICATION	2.2207858363642443E-6	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999796081906365	WITHOUT_CLASSIFICATION	2.039180936352434E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999795679759035	WITHOUT_CLASSIFICATION	2.0432024096469957E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999995921369909	WITHOUT_CLASSIFICATION	4.078630092526328E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999762973519041	WITHOUT_CLASSIFICATION	2.3702648095927935E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999808597384396	WITHOUT_CLASSIFICATION	1.9140261560315178E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999990011029878	WITHOUT_CLASSIFICATION	9.988970121161147E-7	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999989468373297	WITHOUT_CLASSIFICATION	1.0531626703826118E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999994299239687	WITHOUT_CLASSIFICATION	5.700760313146941E-7	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999992722605165	WITHOUT_CLASSIFICATION	7.27739483461985E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999976219270736	WITHOUT_CLASSIFICATION	2.3780729263646278E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999997608887427	WITHOUT_CLASSIFICATION	2.391112573055569E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.999994029553944	WITHOUT_CLASSIFICATION	5.97044605606635E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999972397356557	WITHOUT_CLASSIFICATION	2.7602643442481937E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999972397356557	WITHOUT_CLASSIFICATION	2.7602643442481937E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999952279611942	WITHOUT_CLASSIFICATION	4.7720388057645475E-6	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999804922136624	WITHOUT_CLASSIFICATION	1.9507786337570055E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999997518248527	WITHOUT_CLASSIFICATION	2.481751472583723E-7	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999911052003858	WITHOUT_CLASSIFICATION	8.894799614215188E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999997242576092	WITHOUT_CLASSIFICATION	2.7574239076015923E-7	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999964228107532	WITHOUT_CLASSIFICATION	3.577189246876995E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999999907248052	WITHOUT_CLASSIFICATION	9.275194800835927E-8	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999867143778	WITHOUT_CLASSIFICATION	1.3285622079072356E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999996755608176	WITHOUT_CLASSIFICATION	3.24439182383152E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997299702608	WITHOUT_CLASSIFICATION	2.7002973931912215E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999994352620251	WITHOUT_CLASSIFICATION	5.647379749025669E-7	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999985966233919	WITHOUT_CLASSIFICATION	1.4033766081544794E-6	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999418628124	WITHOUT_CLASSIFICATION	5.8137187718919144E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999949620959937	WITHOUT_CLASSIFICATION	5.0379040063057865E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999989976090835	WITHOUT_CLASSIFICATION	1.0023909165235098E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999948015773411	WITHOUT_CLASSIFICATION	5.198422658970912E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999948015773411	WITHOUT_CLASSIFICATION	5.198422658970912E-6	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999999508107142	WITHOUT_CLASSIFICATION	4.918928579832339E-7	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999105862678	WITHOUT_CLASSIFICATION	8.941373214058038E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999887172170363	WITHOUT_CLASSIFICATION	1.1282782963769907E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992663473556	WITHOUT_CLASSIFICATION	7.336526444078037E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996212509563749	WITHOUT_CLASSIFICATION	3.787490436251221E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999993985745944	WITHOUT_CLASSIFICATION	6.014254055561746E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999413240868	WITHOUT_CLASSIFICATION	5.867591326134108E-8	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999413240868	WITHOUT_CLASSIFICATION	5.867591326134108E-8	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999950672648178	WITHOUT_CLASSIFICATION	4.932735182304172E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999792620329	WITHOUT_CLASSIFICATION	2.0737967109150677E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999825280825548	WITHOUT_CLASSIFICATION	1.7471917445139864E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999935256813	WITHOUT_CLASSIFICATION	6.474318851236265E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999991099428058	WITHOUT_CLASSIFICATION	8.900571942739741E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999805801312083	WITHOUT_CLASSIFICATION	1.9419868791682765E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999971170143417	WITHOUT_CLASSIFICATION	2.8829856584486878E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9994453049151101	WITHOUT_CLASSIFICATION	5.546950848900399E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999996449637717	WITHOUT_CLASSIFICATION	3.550362282882034E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999987856864209	WITHOUT_CLASSIFICATION	1.2143135790721784E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999985502080033	WITHOUT_CLASSIFICATION	1.4497919967071525E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999518249315494	WITHOUT_CLASSIFICATION	4.817506845056775E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999977654828761	WITHOUT_CLASSIFICATION	2.234517123932977E-6	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999991893082617	WITHOUT_CLASSIFICATION	8.106917383518034E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999995544618228	WITHOUT_CLASSIFICATION	4.455381771539655E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999978500839273	WITHOUT_CLASSIFICATION	2.149916072687062E-6	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999781700069	WITHOUT_CLASSIFICATION	2.182999325156001E-8	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999972131185261	WITHOUT_CLASSIFICATION	2.7868814739628643E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999292353672299	WITHOUT_CLASSIFICATION	7.076463277016668E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999686442565352	WITHOUT_CLASSIFICATION	3.1355743464790186E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998846553562	WITHOUT_CLASSIFICATION	1.1534464387426453E-7	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999973542024017	WITHOUT_CLASSIFICATION	2.645797598445779E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999931556450943	WITHOUT_CLASSIFICATION	6.84435490568079E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997467508344	WITHOUT_CLASSIFICATION	2.532491656002505E-7	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999997874414843	WITHOUT_CLASSIFICATION	2.1255851569844322E-6	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999738973553979	WITHOUT_CLASSIFICATION	2.6102644602105304E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999999893206694	WITHOUT_CLASSIFICATION	1.0679330598216065E-8	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9996472925237191	WITHOUT_CLASSIFICATION	3.5270747628095544E-4	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999968854267385	WITHOUT_CLASSIFICATION	3.114573261504501E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999944905003496	WITHOUT_CLASSIFICATION	5.509499650346236E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999501677038773	WITHOUT_CLASSIFICATION	4.98322961225555E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999997976988243	WITHOUT_CLASSIFICATION	2.023011756557562E-7	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999971865785221	WITHOUT_CLASSIFICATION	2.813421477943155E-6	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999942342026027	WITHOUT_CLASSIFICATION	5.765797397263264E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999918385481037	WITHOUT_CLASSIFICATION	8.161451896217193E-6	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999994946189228	WITHOUT_CLASSIFICATION	5.053810770821576E-7	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999985546940332	WITHOUT_CLASSIFICATION	1.4453059668087271E-6	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999988994120095	WITHOUT_CLASSIFICATION	1.1005879904414257E-6	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999998643278987	WITHOUT_CLASSIFICATION	1.3567210138980178E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999991724799173	WITHOUT_CLASSIFICATION	8.275200827331582E-7	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999953298887251	WITHOUT_CLASSIFICATION	4.670111274976281E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999991796060449	WITHOUT_CLASSIFICATION	8.203939551229142E-7	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999644650213978	WITHOUT_CLASSIFICATION	3.553497860223876E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999997331954258	WITHOUT_CLASSIFICATION	2.668045741447697E-7	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999936574311	WITHOUT_CLASSIFICATION	6.34256890967283E-9	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9989709166384101	WITHOUT_CLASSIFICATION	0.0010290833615898515	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999998643278987	WITHOUT_CLASSIFICATION	1.3567210138980178E-7	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999991724799173	WITHOUT_CLASSIFICATION	8.275200827331582E-7	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999986216011756	WITHOUT_CLASSIFICATION	1.3783988244110293E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999751432326172	WITHOUT_CLASSIFICATION	2.4856767382848604E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999170767524	WITHOUT_CLASSIFICATION	8.292324757923892E-8	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998859241499278	WITHOUT_CLASSIFICATION	1.1407585007220582E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999985695840867	WITHOUT_CLASSIFICATION	1.4304159132307082E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999895454901	WITHOUT_CLASSIFICATION	1.0454509921724173E-8	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9991451510765237	WITHOUT_CLASSIFICATION	8.548489234762523E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999991530652966	WITHOUT_CLASSIFICATION	8.46934703441997E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999013673997679	WITHOUT_CLASSIFICATION	9.863260023210316E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9985742742419712	IMPLEMENTATION	0.0014257257580288444	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999991810756944	WITHOUT_CLASSIFICATION	8.189243056714672E-7	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9985742742419712	IMPLEMENTATION	0.0014257257580288444	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999114179533011	WITHOUT_CLASSIFICATION	8.85820466988918E-5	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999977707270394	WITHOUT_CLASSIFICATION	2.2292729605313884E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999991799858814	WITHOUT_CLASSIFICATION	8.200141186073894E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996083191195	WITHOUT_CLASSIFICATION	3.916808805349926E-7	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999948340939557	WITHOUT_CLASSIFICATION	5.165906044359212E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999881750831031	WITHOUT_CLASSIFICATION	1.1824916896822138E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999881750831031	WITHOUT_CLASSIFICATION	1.1824916896822138E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999936996738029	WITHOUT_CLASSIFICATION	6.300326197051411E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999997076537791	WITHOUT_CLASSIFICATION	2.923462209607406E-7	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999951823269052	WITHOUT_CLASSIFICATION	4.817673094696428E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999985819821984	WITHOUT_CLASSIFICATION	1.4180178016082113E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999976890054786	WITHOUT_CLASSIFICATION	2.310994521375189E-6	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999997078749394	WITHOUT_CLASSIFICATION	2.9212506061352167E-7	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999976324648971	WITHOUT_CLASSIFICATION	2.3675351028760017E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999443523285	WITHOUT_CLASSIFICATION	5.5647671445508044E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999996407022941	WITHOUT_CLASSIFICATION	3.592977059463303E-7	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.999997679571385	WITHOUT_CLASSIFICATION	2.320428615063242E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999963046996682	WITHOUT_CLASSIFICATION	3.695300331834768E-6	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9992268042270133	WITHOUT_CLASSIFICATION	7.731957729867765E-4	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.99996322121218	WITHOUT_CLASSIFICATION	3.6778787819996176E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999997115500172	WITHOUT_CLASSIFICATION	2.8844998268630893E-7	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999982432478166	WITHOUT_CLASSIFICATION	1.7567521834132017E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999907956713	WITHOUT_CLASSIFICATION	9.204328708084406E-8	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999988884292828	WITHOUT_CLASSIFICATION	1.1115707172130979E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999960148709806	WITHOUT_CLASSIFICATION	3.98512901941847E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999999969719068	WITHOUT_CLASSIFICATION	3.028093205730744E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999808270598533	WITHOUT_CLASSIFICATION	1.9172940146766575E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999975044110349	WITHOUT_CLASSIFICATION	2.4955889651085752E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999881914209467	WITHOUT_CLASSIFICATION	1.1808579053206866E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999922106771423	WITHOUT_CLASSIFICATION	7.789322857663897E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999914101093087	WITHOUT_CLASSIFICATION	8.589890691217538E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999985886755153	WITHOUT_CLASSIFICATION	1.4113244846992821E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999970819620554	WITHOUT_CLASSIFICATION	2.918037944678238E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9996955256719366	WITHOUT_CLASSIFICATION	3.0447432806332385E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9983580494950003	WITHOUT_CLASSIFICATION	0.0016419505049997322	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9977550571287462	WITHOUT_CLASSIFICATION	0.0022449428712537013	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9857798615701847	WITHOUT_CLASSIFICATION	0.01422013842981534	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.591698246222832	IMPLEMENTATION	0.40830175377716793	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9997595554710871	WITHOUT_CLASSIFICATION	2.4044452891286213E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999976324648971	WITHOUT_CLASSIFICATION	2.3675351028760017E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999999841795918	WITHOUT_CLASSIFICATION	1.5820408191623883E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999820531549479	WITHOUT_CLASSIFICATION	1.794684505211913E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9261610890356473	IMPLEMENTATION	0.0738389109643527	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999871246593466	WITHOUT_CLASSIFICATION	1.2875340653440841E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999971469400922	WITHOUT_CLASSIFICATION	2.8530599078170575E-6	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999992970594959	WITHOUT_CLASSIFICATION	7.029405040850305E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999985819821984	WITHOUT_CLASSIFICATION	1.4180178016082113E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999985819821984	WITHOUT_CLASSIFICATION	1.4180178016082113E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999901975929674	WITHOUT_CLASSIFICATION	9.80240703268544E-6	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999970685900786	WITHOUT_CLASSIFICATION	2.931409921326015E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999622791891482	WITHOUT_CLASSIFICATION	3.772081085185615E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999874618907513	WITHOUT_CLASSIFICATION	1.2538109248682359E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999935941566114	WITHOUT_CLASSIFICATION	6.405843388653643E-6	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999995820194474	WITHOUT_CLASSIFICATION	4.17980552578157E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999999852636375	WITHOUT_CLASSIFICATION	1.4736362466792858E-8	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999584259051724	WITHOUT_CLASSIFICATION	4.1574094827652504E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999983480260453	WITHOUT_CLASSIFICATION	1.6519739546704077E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995652932818	WITHOUT_CLASSIFICATION	4.3470671816761984E-7	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999961568969049	WITHOUT_CLASSIFICATION	3.843103094997593E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998984605690266	WITHOUT_CLASSIFICATION	1.0153943097334577E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999980048026327	WITHOUT_CLASSIFICATION	1.9951973672662257E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995652932818	WITHOUT_CLASSIFICATION	4.3470671816761984E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992385844362	WITHOUT_CLASSIFICATION	7.614155637678024E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9970813700887274	WITHOUT_CLASSIFICATION	0.0029186299112726292	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999612276488414	WITHOUT_CLASSIFICATION	3.877235115854002E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9908704826588108	IMPLEMENTATION	0.00912951734118921	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998984605690266	WITHOUT_CLASSIFICATION	1.0153943097334577E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999954720195695	WITHOUT_CLASSIFICATION	4.52798043053381E-6	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999867690194211	WITHOUT_CLASSIFICATION	1.3230980578915093E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990504842614	WITHOUT_CLASSIFICATION	9.495157385758526E-7	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999983287943	WITHOUT_CLASSIFICATION	1.6712057638641883E-9	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999683951870261	WITHOUT_CLASSIFICATION	3.1604812973845366E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999998341643459	WITHOUT_CLASSIFICATION	1.6583565400887518E-7	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.999999721346901	WITHOUT_CLASSIFICATION	2.7865309901615857E-7	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999077639247	WITHOUT_CLASSIFICATION	9.223607529654245E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999996192463588	WITHOUT_CLASSIFICATION	3.8075364116029653E-7	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999036637391	WITHOUT_CLASSIFICATION	9.633626081066445E-8	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999449067376758	WITHOUT_CLASSIFICATION	5.509326232421603E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999997928910371	WITHOUT_CLASSIFICATION	2.071089628642229E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995652932818	WITHOUT_CLASSIFICATION	4.3470671816761984E-7	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999954720195695	WITHOUT_CLASSIFICATION	4.52798043053381E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990504842614	WITHOUT_CLASSIFICATION	9.495157385758526E-7	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999905467506627	WITHOUT_CLASSIFICATION	9.453249337423982E-6	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999999979233493	WITHOUT_CLASSIFICATION	2.0766507216368955E-9	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999906501243	WITHOUT_CLASSIFICATION	9.349875666658634E-9	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998984605690266	WITHOUT_CLASSIFICATION	1.0153943097334577E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999961446209918	WITHOUT_CLASSIFICATION	3.855379008219192E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999989994545873	WITHOUT_CLASSIFICATION	1.0005454127654535E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999711245515769	WITHOUT_CLASSIFICATION	2.887544842307079E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999965621248279	WITHOUT_CLASSIFICATION	3.4378751721332585E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999077639247	WITHOUT_CLASSIFICATION	9.223607529654245E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992385844362	WITHOUT_CLASSIFICATION	7.614155637678024E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.999998625706717	WITHOUT_CLASSIFICATION	1.3742932829820086E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993466339941	WITHOUT_CLASSIFICATION	6.53366005801385E-7	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999996513551229	WITHOUT_CLASSIFICATION	3.486448771121299E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999922714305886	WITHOUT_CLASSIFICATION	7.728569411473489E-6	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.996170631970527	WITHOUT_CLASSIFICATION	0.003829368029473046	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9787540488424555	WITHOUT_CLASSIFICATION	0.021245951157544525	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999939440490554	WITHOUT_CLASSIFICATION	6.055950944676703E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996083191195	WITHOUT_CLASSIFICATION	3.916808805349926E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999751015475	WITHOUT_CLASSIFICATION	2.4898452511945917E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998226926697	WITHOUT_CLASSIFICATION	1.7730733022189314E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9984826732520768	WITHOUT_CLASSIFICATION	0.0015173267479231456	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999750294099644	WITHOUT_CLASSIFICATION	2.4970590035647385E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.99999798693641	WITHOUT_CLASSIFICATION	2.0130635899735024E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999813236369	WITHOUT_CLASSIFICATION	1.8676363159310405E-8	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.999999601956218	WITHOUT_CLASSIFICATION	3.9804378210078706E-7	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999988711406538	WITHOUT_CLASSIFICATION	1.1288593461708673E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999965621248279	WITHOUT_CLASSIFICATION	3.4378751721332585E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999907426117998	WITHOUT_CLASSIFICATION	9.257388200161195E-6	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999992644703692	WITHOUT_CLASSIFICATION	7.355296307718923E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999886913989455	WITHOUT_CLASSIFICATION	1.1308601054562256E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999992488065381	WITHOUT_CLASSIFICATION	7.511934618293278E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9998642646022474	WITHOUT_CLASSIFICATION	1.3573539775262546E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999876335016873	WITHOUT_CLASSIFICATION	1.2366498312712621E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999940070277487	WITHOUT_CLASSIFICATION	5.992972251377039E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998018379307155	WITHOUT_CLASSIFICATION	1.9816206928451749E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999994633185	WITHOUT_CLASSIFICATION	5.366814375992555E-10	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9820510758886002	WITHOUT_CLASSIFICATION	0.017948924111399853	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999994448605383	WITHOUT_CLASSIFICATION	5.551394617580883E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999991773865157	WITHOUT_CLASSIFICATION	8.226134844458489E-7	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999427156340387	WITHOUT_CLASSIFICATION	5.728436596136639E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999976756045739	WITHOUT_CLASSIFICATION	2.324395426121622E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999999723779216	WITHOUT_CLASSIFICATION	2.7622078403916575E-7	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997555378077	WITHOUT_CLASSIFICATION	2.4446219224615563E-7	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999849171535	WITHOUT_CLASSIFICATION	1.508284643680541E-8	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999982487053626	WITHOUT_CLASSIFICATION	1.7512946373616225E-6	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999942434854333	WITHOUT_CLASSIFICATION	5.756514566681809E-6	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999950710517744	WITHOUT_CLASSIFICATION	4.928948225587164E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999996251805656	WITHOUT_CLASSIFICATION	3.7481943440539323E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998553976408	WITHOUT_CLASSIFICATION	1.4460235914962188E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996689389943	WITHOUT_CLASSIFICATION	3.310610057746397E-7	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999821573072	WITHOUT_CLASSIFICATION	1.7842692721486535E-8	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997806359994	WITHOUT_CLASSIFICATION	2.193640006251807E-7	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9644417494764004	IMPLEMENTATION	0.035558250523599524	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9962331747135246	WITHOUT_CLASSIFICATION	0.003766825286475462	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999989501888492	WITHOUT_CLASSIFICATION	1.0498111506954315E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999996253799915	WITHOUT_CLASSIFICATION	3.746200084711038E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6688347259158391	WITHOUT_CLASSIFICATION	0.33116527408416074	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999111830178	WITHOUT_CLASSIFICATION	8.88169822295284E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999993154713161	WITHOUT_CLASSIFICATION	6.8452868389752714E-6	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999986837949255	WITHOUT_CLASSIFICATION	1.3162050745577004E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997378007296486	WITHOUT_CLASSIFICATION	2.6219927035137693E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999998137882138	WITHOUT_CLASSIFICATION	1.8621178617706982E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999929305265418	WITHOUT_CLASSIFICATION	7.069473458166827E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999996446282321	WITHOUT_CLASSIFICATION	3.5537176791786575E-7	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998171913327	WITHOUT_CLASSIFICATION	1.828086673044564E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999929305265418	WITHOUT_CLASSIFICATION	7.069473458166827E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999998137882138	WITHOUT_CLASSIFICATION	1.8621178617706982E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999996446282321	WITHOUT_CLASSIFICATION	3.5537176791786575E-7	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.999996862877046	WITHOUT_CLASSIFICATION	3.137122954043292E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999995154771165	WITHOUT_CLASSIFICATION	4.845228834623772E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999968731427	WITHOUT_CLASSIFICATION	3.1268573136399437E-9	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999999834254201	WITHOUT_CLASSIFICATION	1.657457990521823E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998600920027	WITHOUT_CLASSIFICATION	1.3990799732149014E-7	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8662898568231441	IMPLEMENTATION	0.13371014317685592	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999512402369652	WITHOUT_CLASSIFICATION	4.875976303470116E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999200160958926	WITHOUT_CLASSIFICATION	7.998390410741453E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999993169540116	WITHOUT_CLASSIFICATION	6.830459884257262E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999983528077087	WITHOUT_CLASSIFICATION	1.6471922914118837E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999994090489999	WITHOUT_CLASSIFICATION	5.909510000820921E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999924305762486	WITHOUT_CLASSIFICATION	7.56942375139633E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999438593305262	WITHOUT_CLASSIFICATION	5.614066947377839E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999993417382114	WITHOUT_CLASSIFICATION	6.582617885862363E-7	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999953556500932	WITHOUT_CLASSIFICATION	4.644349906729467E-6	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999996640044388	WITHOUT_CLASSIFICATION	3.359955611490075E-7	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999712271087	WITHOUT_CLASSIFICATION	2.8772891315582414E-8	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999988725925245	WITHOUT_CLASSIFICATION	1.1274074754968317E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999945277712	WITHOUT_CLASSIFICATION	5.4722287865985395E-9	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999978449705019	WITHOUT_CLASSIFICATION	2.1550294981818357E-6	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9830697236903687	WITHOUT_CLASSIFICATION	0.016930276309631266	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999976011778008	WITHOUT_CLASSIFICATION	2.3988221991809715E-6	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999991438410126	WITHOUT_CLASSIFICATION	8.561589873453373E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999982422099614	WITHOUT_CLASSIFICATION	1.7577900386179218E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999989997947893	WITHOUT_CLASSIFICATION	1.0002052106612829E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999989997947893	WITHOUT_CLASSIFICATION	1.0002052106612829E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999994468231029	WITHOUT_CLASSIFICATION	5.531768970398743E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999994468231029	WITHOUT_CLASSIFICATION	5.531768970398743E-7	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9967300795980666	WITHOUT_CLASSIFICATION	0.0032699204019334587	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999712271087	WITHOUT_CLASSIFICATION	2.8772891315582414E-8	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999996918499306	WITHOUT_CLASSIFICATION	3.081500693980114E-6	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999849217877416	WITHOUT_CLASSIFICATION	1.5078212258285721E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999810663622528	WITHOUT_CLASSIFICATION	1.8933637747136066E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999810663622528	WITHOUT_CLASSIFICATION	1.8933637747136066E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999911308391234	WITHOUT_CLASSIFICATION	8.869160876589685E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999874320572174	WITHOUT_CLASSIFICATION	1.2567942782596217E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999972875918	WITHOUT_CLASSIFICATION	2.7124080967238076E-9	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999696889047199	WITHOUT_CLASSIFICATION	3.031109528008611E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999981684616562	WITHOUT_CLASSIFICATION	1.8315383438421481E-6	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999973745037621	WITHOUT_CLASSIFICATION	2.6254962377921184E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999992920900265	WITHOUT_CLASSIFICATION	7.079099735739272E-7	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999768412374803	WITHOUT_CLASSIFICATION	2.315876251969692E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999929644704967	WITHOUT_CLASSIFICATION	7.035529503370044E-6	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999794666091137	WITHOUT_CLASSIFICATION	2.0533390886228236E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999978553582028	WITHOUT_CLASSIFICATION	2.1446417971281058E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999773016904232	WITHOUT_CLASSIFICATION	2.269830957673236E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999999234827368	WITHOUT_CLASSIFICATION	7.651726320475472E-7	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999989482450594	WITHOUT_CLASSIFICATION	1.0517549406607726E-6	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9934595600729422	WITHOUT_CLASSIFICATION	0.006540439927057711	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999994565038951	WITHOUT_CLASSIFICATION	5.434961049548938E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988665513182	WITHOUT_CLASSIFICATION	1.1334486817573016E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999352723064752	WITHOUT_CLASSIFICATION	6.47276935247667E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999750237938709	WITHOUT_CLASSIFICATION	2.4976206129121387E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999950815890738	WITHOUT_CLASSIFICATION	4.918410926171775E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9993510627058345	WITHOUT_CLASSIFICATION	6.489372941655402E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999998599009692	WITHOUT_CLASSIFICATION	1.4009903078630986E-7	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999959474658551	WITHOUT_CLASSIFICATION	4.0525341449514475E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999994656268295	WITHOUT_CLASSIFICATION	5.343731705237674E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999685873673895	WITHOUT_CLASSIFICATION	3.141263261046053E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999265489993	WITHOUT_CLASSIFICATION	7.345100068657639E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999991773865157	WITHOUT_CLASSIFICATION	8.226134844458489E-7	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999825183033003	WITHOUT_CLASSIFICATION	1.7481696699716338E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999990802068075	WITHOUT_CLASSIFICATION	9.197931926089995E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998441597874	WITHOUT_CLASSIFICATION	1.558402125933817E-6	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941894908261	WITHOUT_CLASSIFICATION	5.810509174002261E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999910281310869	WITHOUT_CLASSIFICATION	8.9718689131961E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999910281310869	WITHOUT_CLASSIFICATION	8.9718689131961E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995339575442	WITHOUT_CLASSIFICATION	4.660424558749676E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.999999723995673	WITHOUT_CLASSIFICATION	2.760043269639169E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999983307650364	WITHOUT_CLASSIFICATION	1.6692349635144335E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999983307650364	WITHOUT_CLASSIFICATION	1.6692349635144335E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999974055749783	WITHOUT_CLASSIFICATION	2.5944250217547103E-6	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999693309976375	WITHOUT_CLASSIFICATION	3.0669002362509806E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999948663466534	WITHOUT_CLASSIFICATION	5.133653346594795E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995684418932	WITHOUT_CLASSIFICATION	4.3155810677424533E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999984641411075	WITHOUT_CLASSIFICATION	1.535858892610762E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999998333838382	WITHOUT_CLASSIFICATION	1.666161617178823E-7	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999984720609897	WITHOUT_CLASSIFICATION	1.5279390102801111E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999539398445828	WITHOUT_CLASSIFICATION	4.606015541724372E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999994469397586	WITHOUT_CLASSIFICATION	5.530602413855021E-7	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999994469397586	WITHOUT_CLASSIFICATION	5.530602413855021E-7	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999992298012818	WITHOUT_CLASSIFICATION	7.701987181051913E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999561693875	WITHOUT_CLASSIFICATION	4.3830612498943883E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999561693875	WITHOUT_CLASSIFICATION	4.3830612498943883E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999993451616433	WITHOUT_CLASSIFICATION	6.548383566615856E-7	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999968822343	WITHOUT_CLASSIFICATION	3.117765637837862E-9	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9868470920343282	WITHOUT_CLASSIFICATION	0.01315290796567177	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998959628917	WITHOUT_CLASSIFICATION	1.0403710821883928E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999480539391	WITHOUT_CLASSIFICATION	5.194606082984639E-8	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999547944952	WITHOUT_CLASSIFICATION	4.520550485483486E-8	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9990999622747005	WITHOUT_CLASSIFICATION	9.000377252994895E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999961327358277	WITHOUT_CLASSIFICATION	3.867264172295672E-6	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999926369634045	WITHOUT_CLASSIFICATION	7.363036595498561E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996690936030886	WITHOUT_CLASSIFICATION	3.309063969113533E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995887340533	WITHOUT_CLASSIFICATION	4.112659467001563E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999206282399214	WITHOUT_CLASSIFICATION	7.93717600785382E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995976293335	WITHOUT_CLASSIFICATION	4.023706664978262E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995976293335	WITHOUT_CLASSIFICATION	4.023706664978262E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995976293335	WITHOUT_CLASSIFICATION	4.023706664978262E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995976293335	WITHOUT_CLASSIFICATION	4.023706664978262E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999990568292151	WITHOUT_CLASSIFICATION	9.431707848137453E-7	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9995388862405682	WITHOUT_CLASSIFICATION	4.6111375943192666E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999920461093749	WITHOUT_CLASSIFICATION	7.953890625115839E-6	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.999997673398704	WITHOUT_CLASSIFICATION	2.3266012958958767E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999996276413736	WITHOUT_CLASSIFICATION	3.723586264322448E-7	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999891218633649	WITHOUT_CLASSIFICATION	1.0878136635152196E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999993746589776	WITHOUT_CLASSIFICATION	6.253410223055752E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999998207014095	WITHOUT_CLASSIFICATION	1.7929859048953402E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999881829639551	WITHOUT_CLASSIFICATION	1.1817036044973342E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998606999896	WITHOUT_CLASSIFICATION	1.3930001052088174E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999957342747489	WITHOUT_CLASSIFICATION	4.265725251134433E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9984467402150337	WITHOUT_CLASSIFICATION	0.0015532597849664258	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999865700895	WITHOUT_CLASSIFICATION	1.3429910438215989E-8	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999999960744051	WITHOUT_CLASSIFICATION	3.9255949016519675E-8	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999971436929326	WITHOUT_CLASSIFICATION	2.856307067439505E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9984467402150337	WITHOUT_CLASSIFICATION	0.0015532597849664258	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999810456273	WITHOUT_CLASSIFICATION	1.8954372755617193E-8	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999967020567672	WITHOUT_CLASSIFICATION	3.2979432329445607E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999992708966512	WITHOUT_CLASSIFICATION	7.291033486834466E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999995888711088	WITHOUT_CLASSIFICATION	4.1112889102906096E-7	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999317135987	WITHOUT_CLASSIFICATION	6.828640133005744E-8	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998800036646	WITHOUT_CLASSIFICATION	1.1999633535745996E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999587502355	WITHOUT_CLASSIFICATION	4.1249764521358784E-8	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998512738744737	WITHOUT_CLASSIFICATION	1.4872612552635823E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999692354565	WITHOUT_CLASSIFICATION	3.0764543416319825E-8	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999990226009315	WITHOUT_CLASSIFICATION	9.773990684733247E-7	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999925586477	WITHOUT_CLASSIFICATION	7.441352397337761E-9	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999854965313485	WITHOUT_CLASSIFICATION	1.4503468651500472E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999968444108158	WITHOUT_CLASSIFICATION	3.1555891842029597E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9993741342471197	WITHOUT_CLASSIFICATION	6.258657528802802E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999579233951314	WITHOUT_CLASSIFICATION	4.207660486860043E-4	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999575924586	WITHOUT_CLASSIFICATION	4.2407541401923997E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999412000072	WITHOUT_CLASSIFICATION	5.879999266267521E-8	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999984942245045	WITHOUT_CLASSIFICATION	1.5057754956208324E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999983935208103	WITHOUT_CLASSIFICATION	1.6064791896639868E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999984942245045	WITHOUT_CLASSIFICATION	1.5057754956208324E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999999644198741	WITHOUT_CLASSIFICATION	3.558012590737126E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999966149481	WITHOUT_CLASSIFICATION	3.3850520070116492E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999997180730978	WITHOUT_CLASSIFICATION	2.819269021287398E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999986299755271	WITHOUT_CLASSIFICATION	1.370024472973674E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999412000072	WITHOUT_CLASSIFICATION	5.879999266267521E-8	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999983935208103	WITHOUT_CLASSIFICATION	1.6064791896639868E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999999644198741	WITHOUT_CLASSIFICATION	3.558012590737126E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999821799107228	WITHOUT_CLASSIFICATION	1.782008927716334E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999929139601781	WITHOUT_CLASSIFICATION	7.08603982194945E-6	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999940176171067	WITHOUT_CLASSIFICATION	5.982382893372041E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999912695823654	WITHOUT_CLASSIFICATION	8.730417634542429E-6	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997549697529149	WITHOUT_CLASSIFICATION	2.450302470850016E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999991903277524	WITHOUT_CLASSIFICATION	8.096722476616432E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988665513182	WITHOUT_CLASSIFICATION	1.1334486817573016E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999966149481	WITHOUT_CLASSIFICATION	3.3850520070116492E-9	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999992066887	WITHOUT_CLASSIFICATION	7.93311220081871E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999995965192332	WITHOUT_CLASSIFICATION	4.0348076690561966E-7	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999997965129752	WITHOUT_CLASSIFICATION	2.0348702467462623E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988665513182	WITHOUT_CLASSIFICATION	1.1334486817573016E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999980918019221	WITHOUT_CLASSIFICATION	1.9081980779200213E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988665513182	WITHOUT_CLASSIFICATION	1.1334486817573016E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999294419477	WITHOUT_CLASSIFICATION	7.055805229754913E-8	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995405440505	WITHOUT_CLASSIFICATION	4.5945594953380946E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998997849868616	WITHOUT_CLASSIFICATION	1.0021501313840295E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997826374909143	WITHOUT_CLASSIFICATION	2.1736250908559692E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999662014107439	WITHOUT_CLASSIFICATION	3.3798589256216654E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999975907304475	WITHOUT_CLASSIFICATION	2.4092695524918717E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9991648845784912	WITHOUT_CLASSIFICATION	8.351154215088317E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999746633873094	WITHOUT_CLASSIFICATION	2.5336612690513524E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999982251110002	WITHOUT_CLASSIFICATION	1.7748889997316185E-6	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.999998842456479	WITHOUT_CLASSIFICATION	1.1575435210441026E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999868580322387	WITHOUT_CLASSIFICATION	1.3141967761373742E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999997994499936	WITHOUT_CLASSIFICATION	2.0055000645122615E-7	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9868470920343282	WITHOUT_CLASSIFICATION	0.01315290796567177	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999995934574093	WITHOUT_CLASSIFICATION	4.065425906942907E-6	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999819768603363	WITHOUT_CLASSIFICATION	1.8023139663674753E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999993287678416	WITHOUT_CLASSIFICATION	6.712321584050378E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999962290497085	WITHOUT_CLASSIFICATION	3.7709502914838898E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999862721088	WITHOUT_CLASSIFICATION	1.3727891073943935E-8	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999400444316	WITHOUT_CLASSIFICATION	5.995556843181243E-8	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999995454144337	WITHOUT_CLASSIFICATION	4.545855663090293E-7	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999954287241557	WITHOUT_CLASSIFICATION	4.571275844277702E-6	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999985359487951	WITHOUT_CLASSIFICATION	1.4640512049324826E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999716828173468	WITHOUT_CLASSIFICATION	2.831718265312559E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9870504149376407	WITHOUT_CLASSIFICATION	0.012949585062359367	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999882225223	WITHOUT_CLASSIFICATION	1.1777477646345601E-8	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999999972058526	WITHOUT_CLASSIFICATION	2.794147399213229E-8	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999970738375464	WITHOUT_CLASSIFICATION	2.9261624535937787E-6	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999986461061725	WITHOUT_CLASSIFICATION	1.3538938275150598E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999540625648894	WITHOUT_CLASSIFICATION	4.593743511071589E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999999839483198	WITHOUT_CLASSIFICATION	1.6051680189806888E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999995800817885	WITHOUT_CLASSIFICATION	4.199182115364363E-7	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999995310873363	WITHOUT_CLASSIFICATION	4.6891266363062853E-7	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999982625062085	WITHOUT_CLASSIFICATION	1.7374937914671778E-6	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999835221549377	WITHOUT_CLASSIFICATION	1.6477845062268976E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9995507856450881	WITHOUT_CLASSIFICATION	4.492143549119489E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999968570839527	WITHOUT_CLASSIFICATION	3.142916047455222E-6	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999945312647229	WITHOUT_CLASSIFICATION	5.468735277055836E-6	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999628976524609	WITHOUT_CLASSIFICATION	3.7102347539060184E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999989699984503	WITHOUT_CLASSIFICATION	1.03000154973063E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999898587474	WITHOUT_CLASSIFICATION	1.0141252603959536E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9703101326420356	WITHOUT_CLASSIFICATION	0.029689867357964382	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999936340861476	WITHOUT_CLASSIFICATION	6.365913852328339E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993410657708	WITHOUT_CLASSIFICATION	6.589342292304502E-7	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999803033827774	WITHOUT_CLASSIFICATION	1.9696617222456907E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999803033827774	WITHOUT_CLASSIFICATION	1.9696617222456907E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999847911000142	WITHOUT_CLASSIFICATION	1.5208899985801223E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999746633873094	WITHOUT_CLASSIFICATION	2.5336612690513524E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999972211130869	WITHOUT_CLASSIFICATION	2.778886913111467E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999984600855101	WITHOUT_CLASSIFICATION	1.5399144898188886E-6	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999279707867	WITHOUT_CLASSIFICATION	7.202921333636897E-8	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999842355110958	WITHOUT_CLASSIFICATION	1.5764488904153744E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999511302945527	WITHOUT_CLASSIFICATION	4.8869705447170625E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999740437556888	WITHOUT_CLASSIFICATION	2.5956244311229355E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999862121457	WITHOUT_CLASSIFICATION	1.3787854380820033E-8	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999576455101	WITHOUT_CLASSIFICATION	4.235448992247279E-8	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999983214106462	WITHOUT_CLASSIFICATION	1.6785893538822743E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.999998932416882	WITHOUT_CLASSIFICATION	1.0675831180561696E-6	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9991660119505639	WITHOUT_CLASSIFICATION	8.339880494362177E-4	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999983359647047	WITHOUT_CLASSIFICATION	1.664035295347227E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999155988383	WITHOUT_CLASSIFICATION	8.440116166936881E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999998288516	WITHOUT_CLASSIFICATION	1.7114838385664218E-10	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997448979676	WITHOUT_CLASSIFICATION	2.551020323408058E-7	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999442783256	WITHOUT_CLASSIFICATION	5.572167438177998E-8	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999206857771	WITHOUT_CLASSIFICATION	7.931422283807903E-8	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999997794570468	WITHOUT_CLASSIFICATION	2.205429531644861E-7	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999882979084814	WITHOUT_CLASSIFICATION	1.170209151845997E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998072183193314	WITHOUT_CLASSIFICATION	1.9278168066872478E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999739277905207	WITHOUT_CLASSIFICATION	2.6072209479306416E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999947320802417	WITHOUT_CLASSIFICATION	5.267919758388622E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9703101326420356	WITHOUT_CLASSIFICATION	0.029689867357964382	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999760589324	WITHOUT_CLASSIFICATION	2.3941067522457274E-8	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9988026762326395	WITHOUT_CLASSIFICATION	0.001197323767360425	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999890174972	WITHOUT_CLASSIFICATION	1.0982502835201083E-8	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999906280928046	WITHOUT_CLASSIFICATION	9.371907195409923E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999884003349694	WITHOUT_CLASSIFICATION	1.1599665030632034E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999453764289346	WITHOUT_CLASSIFICATION	5.462357106543984E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999732996449368	WITHOUT_CLASSIFICATION	2.6700355063216728E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999998560132517	WITHOUT_CLASSIFICATION	1.4398674826695103E-7	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999996363760436	WITHOUT_CLASSIFICATION	3.6362395642727066E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999996440705073	WITHOUT_CLASSIFICATION	3.5592949270424633E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998674368825	WITHOUT_CLASSIFICATION	1.3256311755246178E-7	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999996582586899	WITHOUT_CLASSIFICATION	3.4174131015107825E-7	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999999507572684	WITHOUT_CLASSIFICATION	4.924273160812931E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999994180052246	WITHOUT_CLASSIFICATION	5.819947754143949E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999672979007	WITHOUT_CLASSIFICATION	3.270209924377891E-8	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999672979007	WITHOUT_CLASSIFICATION	3.270209924377891E-8	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999998997145854	WITHOUT_CLASSIFICATION	1.0028541467549045E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999998904607959	WITHOUT_CLASSIFICATION	1.0953920409678908E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999911391287	WITHOUT_CLASSIFICATION	8.860871193816215E-9	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999911391287	WITHOUT_CLASSIFICATION	8.860871193816215E-9	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999196826665	WITHOUT_CLASSIFICATION	8.031733346624671E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998998893873245	WITHOUT_CLASSIFICATION	1.0011061267538929E-4	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999998945397825	WITHOUT_CLASSIFICATION	1.0546021750162761E-6	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999975544862857	WITHOUT_CLASSIFICATION	2.4455137143718484E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.99999906850679	WITHOUT_CLASSIFICATION	9.314932100707298E-7	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999989782789346	WITHOUT_CLASSIFICATION	1.0217210654446067E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995548484	WITHOUT_CLASSIFICATION	4.451515134068178E-10	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999995548484	WITHOUT_CLASSIFICATION	4.451515134068178E-10	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999991439722843	WITHOUT_CLASSIFICATION	8.560277157707242E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.999992991883737	WITHOUT_CLASSIFICATION	7.00811626287973E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999992502275414	WITHOUT_CLASSIFICATION	7.497724584954842E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999995495004262	WITHOUT_CLASSIFICATION	4.504995737428402E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999995495004262	WITHOUT_CLASSIFICATION	4.504995737428402E-7	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999061351006	WITHOUT_CLASSIFICATION	9.386489941065667E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999981393675178	WITHOUT_CLASSIFICATION	1.8606324820683184E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999992607410649	WITHOUT_CLASSIFICATION	7.392589349893144E-7	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999998240451853	WITHOUT_CLASSIFICATION	1.7595481481215213E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999967356601904	WITHOUT_CLASSIFICATION	3.2643398096135137E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998436760278	WITHOUT_CLASSIFICATION	1.5632397216767678E-7	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999999839179174	WITHOUT_CLASSIFICATION	1.6082082592421915E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999993448337082	WITHOUT_CLASSIFICATION	6.55166291773452E-7	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998982914139	WITHOUT_CLASSIFICATION	1.017085861270194E-7	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999337771085	WITHOUT_CLASSIFICATION	6.622289141048135E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9997835231840757	WITHOUT_CLASSIFICATION	2.1647681592436543E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999229986537482	WITHOUT_CLASSIFICATION	7.700134625171831E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9783625239679836	WITHOUT_CLASSIFICATION	0.0216374760320163	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999991463841117	WITHOUT_CLASSIFICATION	8.536158883411413E-7	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.999977650903352	WITHOUT_CLASSIFICATION	2.2349096647914233E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999975180574014	WITHOUT_CLASSIFICATION	2.4819425984600766E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999996317450425	WITHOUT_CLASSIFICATION	3.682549575548428E-7	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999965506834342	WITHOUT_CLASSIFICATION	3.449316565901206E-6	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999787561218205	WITHOUT_CLASSIFICATION	2.1243878179450728E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999898143384549	WITHOUT_CLASSIFICATION	1.0185661545197295E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999986042868984	WITHOUT_CLASSIFICATION	1.3957131016824591E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999967885371936	WITHOUT_CLASSIFICATION	3.2114628062902765E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999905162323719	WITHOUT_CLASSIFICATION	9.48376762816417E-6	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999992019908757	WITHOUT_CLASSIFICATION	7.980091243122448E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999983821774706	WITHOUT_CLASSIFICATION	1.617822529438345E-6	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999789424691874	WITHOUT_CLASSIFICATION	2.1057530812696967E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999997633077562	WITHOUT_CLASSIFICATION	2.3669224388795922E-7	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999939403299071	WITHOUT_CLASSIFICATION	6.059670092921573E-6	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999240055899	WITHOUT_CLASSIFICATION	7.5994410117146E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999995455302738	WITHOUT_CLASSIFICATION	4.5446972618395303E-7	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999761281497472	WITHOUT_CLASSIFICATION	2.3871850252799586E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999934650111	WITHOUT_CLASSIFICATION	6.534988882000876E-9	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999980447668544	WITHOUT_CLASSIFICATION	1.9552331456798335E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999955271228089	WITHOUT_CLASSIFICATION	4.4728771910730514E-6	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999998675033871	WITHOUT_CLASSIFICATION	1.3249661296928735E-7	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999907066476645	WITHOUT_CLASSIFICATION	9.293352335463631E-6	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999948291059384	WITHOUT_CLASSIFICATION	5.17089406161287E-6	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999971711659	WITHOUT_CLASSIFICATION	2.8288339406154362E-9	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9997988598284722	WITHOUT_CLASSIFICATION	2.011401715278641E-4	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999284769424	WITHOUT_CLASSIFICATION	7.152305760487067E-8	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999528073477368	WITHOUT_CLASSIFICATION	4.7192652263254935E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999990383056185	WITHOUT_CLASSIFICATION	9.616943814762954E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999952476807468	WITHOUT_CLASSIFICATION	4.7523192531693546E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999693882981437	WITHOUT_CLASSIFICATION	3.061170185620952E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999990805154824	WITHOUT_CLASSIFICATION	9.194845175574569E-7	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999993187970235	WITHOUT_CLASSIFICATION	6.81202976531123E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.999999660254002	WITHOUT_CLASSIFICATION	3.3974599799547107E-7	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999998505560627	WITHOUT_CLASSIFICATION	1.4944393734489332E-7	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999618050694989	WITHOUT_CLASSIFICATION	3.819493050114825E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999989224498077	WITHOUT_CLASSIFICATION	1.077550192269731E-6	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999984780688244	WITHOUT_CLASSIFICATION	1.5219311756485817E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999999732221755	WITHOUT_CLASSIFICATION	2.6777824510966813E-7	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999995346614886	WITHOUT_CLASSIFICATION	4.653385114362617E-7	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999999976016	WITHOUT_CLASSIFICATION	2.3984033810445406E-12	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999996718601282	WITHOUT_CLASSIFICATION	3.281398717986517E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999999365519312	WITHOUT_CLASSIFICATION	6.344806885788624E-8	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999995249062882	WITHOUT_CLASSIFICATION	4.750937117844614E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999996640229815	WITHOUT_CLASSIFICATION	3.3597701861749316E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999828854368666	WITHOUT_CLASSIFICATION	1.711456313341893E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999998965785325	WITHOUT_CLASSIFICATION	1.0342146756994193E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999245378219751	WITHOUT_CLASSIFICATION	7.546217802485881E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999245378219751	WITHOUT_CLASSIFICATION	7.546217802485881E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999970077812	WITHOUT_CLASSIFICATION	2.9922187996516675E-9	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999929894905803	WITHOUT_CLASSIFICATION	7.010509419695822E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999996381696385	WITHOUT_CLASSIFICATION	3.618303614507328E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999919234437	WITHOUT_CLASSIFICATION	8.076556266794764E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999443028816	WITHOUT_CLASSIFICATION	5.569711845150914E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999990807539996	WITHOUT_CLASSIFICATION	9.192460003252701E-7	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999863294167	WITHOUT_CLASSIFICATION	1.3670583348661492E-8	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999998478232	WITHOUT_CLASSIFICATION	1.5217684732775856E-10	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999726711283	WITHOUT_CLASSIFICATION	2.732887174366796E-8	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999988240580371	WITHOUT_CLASSIFICATION	1.175941962905493E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999960420153773	WITHOUT_CLASSIFICATION	3.9579846227305095E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999714690096464	WITHOUT_CLASSIFICATION	2.8530990353668437E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999515012465	WITHOUT_CLASSIFICATION	4.849875352028392E-8	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999991533293688	WITHOUT_CLASSIFICATION	8.466706312662074E-7	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984857934293	WITHOUT_CLASSIFICATION	1.5142065707971427E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984857934293	WITHOUT_CLASSIFICATION	1.5142065707971427E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999924202062	WITHOUT_CLASSIFICATION	7.579793844662798E-9	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.99957517269552	WITHOUT_CLASSIFICATION	4.248273044799668E-4	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999994173425885	WITHOUT_CLASSIFICATION	5.826574116068202E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999993614773351	WITHOUT_CLASSIFICATION	6.385226649739594E-7	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999990262860321	WITHOUT_CLASSIFICATION	9.737139679326776E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967745662387	WITHOUT_CLASSIFICATION	3.2254337613538514E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.999934995380774	WITHOUT_CLASSIFICATION	6.500461922600178E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999983790346232	WITHOUT_CLASSIFICATION	1.6209653768671413E-6	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999992003371521	WITHOUT_CLASSIFICATION	7.996628479709581E-7	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999499272668436	WITHOUT_CLASSIFICATION	5.007273315638319E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.999969019340059	WITHOUT_CLASSIFICATION	3.098065994104565E-5	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999933482044	WITHOUT_CLASSIFICATION	6.651795535383537E-9	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999998858959	WITHOUT_CLASSIFICATION	1.141041679835112E-10	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999995368387	WITHOUT_CLASSIFICATION	4.631613490403893E-10	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999609898298	WITHOUT_CLASSIFICATION	3.901017015591013E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997809581513	WITHOUT_CLASSIFICATION	2.190418486105043E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.999999915155147	WITHOUT_CLASSIFICATION	8.484485300644953E-8	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999998879445042	WITHOUT_CLASSIFICATION	1.1205549575258818E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999998781347847	WITHOUT_CLASSIFICATION	1.2186521531064846E-7	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998960838189	WITHOUT_CLASSIFICATION	1.0391618113097294E-7	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999943281524483	WITHOUT_CLASSIFICATION	5.6718475517050955E-6	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999938666	WITHOUT_CLASSIFICATION	6.1334017950396724E-12	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999995688699252	WITHOUT_CLASSIFICATION	4.31130074831299E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999994739970509	WITHOUT_CLASSIFICATION	5.260029491216457E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999921718253989	WITHOUT_CLASSIFICATION	7.828174601104183E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999999787684525	WITHOUT_CLASSIFICATION	2.1231547489361413E-8	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999083019617	WITHOUT_CLASSIFICATION	9.16980383386249E-8	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999996623722316	WITHOUT_CLASSIFICATION	3.3762776837806123E-7	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999966704539683	WITHOUT_CLASSIFICATION	3.3295460316421334E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999864573768	WITHOUT_CLASSIFICATION	1.3542623308893522E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999990806915343	WITHOUT_CLASSIFICATION	9.193084657911346E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999992239826496	WITHOUT_CLASSIFICATION	7.760173503945797E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999999832131	WITHOUT_CLASSIFICATION	1.6786865121988258E-11	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997183602121	WITHOUT_CLASSIFICATION	2.816397879708399E-7	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.999746802043516	WITHOUT_CLASSIFICATION	2.5319795648405215E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998481272243	WITHOUT_CLASSIFICATION	1.5187277563630404E-7	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999543501558	WITHOUT_CLASSIFICATION	4.5649844216181143E-8	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999494299707	WITHOUT_CLASSIFICATION	5.0570029222556155E-8	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999999466766388	WITHOUT_CLASSIFICATION	5.332336120051848E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999997298120634	WITHOUT_CLASSIFICATION	2.701879365656302E-7	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999377585242623	WITHOUT_CLASSIFICATION	6.224147573765721E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999377585242623	WITHOUT_CLASSIFICATION	6.224147573765721E-5	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999978897436	WITHOUT_CLASSIFICATION	2.110256453662039E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998615905259	WITHOUT_CLASSIFICATION	1.3840947408937196E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9998917171478304	WITHOUT_CLASSIFICATION	1.0828285216955843E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999944219037676	WITHOUT_CLASSIFICATION	5.578096232273258E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999962503718041	WITHOUT_CLASSIFICATION	3.7496281960390434E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999994511121999	WITHOUT_CLASSIFICATION	5.488878001026338E-7	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999994113261849	WITHOUT_CLASSIFICATION	5.886738150435889E-7	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999985631495623	WITHOUT_CLASSIFICATION	1.4368504377186923E-6	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999672656244727	WITHOUT_CLASSIFICATION	3.27343755273537E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992755448627	WITHOUT_CLASSIFICATION	7.244551372599826E-7	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996747764806	WITHOUT_CLASSIFICATION	3.2522351943653876E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999732424257471	WITHOUT_CLASSIFICATION	2.6757574252929335E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999966363209	WITHOUT_CLASSIFICATION	3.363679145272497E-9	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999638850149	WITHOUT_CLASSIFICATION	3.611498501424011E-8	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999956293494912	WITHOUT_CLASSIFICATION	4.370650508777114E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999937018681	WITHOUT_CLASSIFICATION	6.298131883150174E-9	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999960677039028	WITHOUT_CLASSIFICATION	3.932296097235967E-6	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999999984346275	WITHOUT_CLASSIFICATION	1.5653724989695157E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999825843820304	WITHOUT_CLASSIFICATION	1.7415617969660116E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999931226909	WITHOUT_CLASSIFICATION	6.877309100430121E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999997592845818	WITHOUT_CLASSIFICATION	2.407154181537921E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999990387183317	WITHOUT_CLASSIFICATION	9.612816682248277E-7	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.99999909449606	WITHOUT_CLASSIFICATION	9.055039399712683E-7	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999892207841221	WITHOUT_CLASSIFICATION	1.077921587783718E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999988467413717	WITHOUT_CLASSIFICATION	1.1532586282351521E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999963103964171	WITHOUT_CLASSIFICATION	3.689603582843649E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999992478633478	WITHOUT_CLASSIFICATION	7.52136652204433E-7	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999998694445932	WITHOUT_CLASSIFICATION	1.3055540674587128E-7	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999999239468	WITHOUT_CLASSIFICATION	7.605311087633716E-11	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998784372361158	WITHOUT_CLASSIFICATION	1.2156276388419106E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999870370610943	WITHOUT_CLASSIFICATION	1.2962938905608692E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999913255229	WITHOUT_CLASSIFICATION	8.674477077267128E-9	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999999850063954	WITHOUT_CLASSIFICATION	1.4993604603376068E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999988574922	WITHOUT_CLASSIFICATION	1.1425077371251893E-9	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999768016202	WITHOUT_CLASSIFICATION	2.3198379724640642E-8	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9982066774344277	WITHOUT_CLASSIFICATION	0.0017933225655723164	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999996880524	WITHOUT_CLASSIFICATION	3.1194760843579825E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999997522902425	WITHOUT_CLASSIFICATION	2.4770975745690006E-7	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.99997650060318	WITHOUT_CLASSIFICATION	2.3499396820095924E-5	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999991444687902	WITHOUT_CLASSIFICATION	8.555312098290226E-7	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999980265951587	WITHOUT_CLASSIFICATION	1.9734048412359416E-6	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999997015649309	WITHOUT_CLASSIFICATION	2.9843506907309526E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999998776617667	WITHOUT_CLASSIFICATION	1.2233823341139466E-7	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999965811371	WITHOUT_CLASSIFICATION	3.4188627671161974E-9	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999997429907175	WITHOUT_CLASSIFICATION	2.570092825060237E-7	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999993171121954	WITHOUT_CLASSIFICATION	6.828878046959803E-7	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998375632132	WITHOUT_CLASSIFICATION	1.6243678683434776E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999515012465	WITHOUT_CLASSIFICATION	4.849875352028392E-8	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999670241572	WITHOUT_CLASSIFICATION	3.2975842773071195E-8	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999999085015	WITHOUT_CLASSIFICATION	9.149847146490808E-11	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999976778513823	WITHOUT_CLASSIFICATION	2.3221486178097227E-6	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999963615254371	WITHOUT_CLASSIFICATION	3.6384745628796977E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999990495165	WITHOUT_CLASSIFICATION	9.504835155302634E-10	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999999943751412	WITHOUT_CLASSIFICATION	5.624858713393489E-9	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9990328322046612	WITHOUT_CLASSIFICATION	9.671677953387391E-4	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999995371869298	WITHOUT_CLASSIFICATION	4.628130702458151E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999974884331	WITHOUT_CLASSIFICATION	2.5115668991065422E-8	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999873665576791	WITHOUT_CLASSIFICATION	1.2633442320926179E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999614989933	WITHOUT_CLASSIFICATION	3.850100672975714E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998398187455	WITHOUT_CLASSIFICATION	1.6018125438405484E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999657385467	WITHOUT_CLASSIFICATION	3.4261453347042316E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999993465383	WITHOUT_CLASSIFICATION	6.534617073716643E-10	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999699042147	WITHOUT_CLASSIFICATION	3.0095785296178305E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999990879505157	WITHOUT_CLASSIFICATION	9.120494842081255E-7	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999971048667935	WITHOUT_CLASSIFICATION	2.8951332064093105E-6	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999994272587	WITHOUT_CLASSIFICATION	5.727412712470436E-10	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999999977290451	WITHOUT_CLASSIFICATION	2.2709549023453728E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999699042147	WITHOUT_CLASSIFICATION	3.0095785296178305E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9996632951361498	WITHOUT_CLASSIFICATION	3.36704863850159E-4	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999998481026908	WITHOUT_CLASSIFICATION	1.5189730911731473E-7	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999872844004	WITHOUT_CLASSIFICATION	1.2715599450700194E-8	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999710602892	WITHOUT_CLASSIFICATION	2.8939710871483837E-8	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999970822312794	WITHOUT_CLASSIFICATION	2.9177687206147023E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999751415756	WITHOUT_CLASSIFICATION	2.4858424413789415E-8	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999921479068	WITHOUT_CLASSIFICATION	7.852093120957363E-9	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999993831941979	WITHOUT_CLASSIFICATION	6.168058021009203E-7	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999984950657	WITHOUT_CLASSIFICATION	1.5049342866634797E-9	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999816219119158	WITHOUT_CLASSIFICATION	1.8378088084237257E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999989054702512	WITHOUT_CLASSIFICATION	1.0945297488035656E-5	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.999614766003828	WITHOUT_CLASSIFICATION	3.8523399617195186E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999996427505726	WITHOUT_CLASSIFICATION	3.572494272793364E-7	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999986832249548	WITHOUT_CLASSIFICATION	1.3167750452250497E-6	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999999913626579	WITHOUT_CLASSIFICATION	8.6373421799443E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999947320802417	WITHOUT_CLASSIFICATION	5.267919758388622E-6	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999999975682217	WITHOUT_CLASSIFICATION	2.4317782991685412E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999893022771	WITHOUT_CLASSIFICATION	1.0697723020570424E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999356071593527	WITHOUT_CLASSIFICATION	6.43928406472746E-5	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999997786617504	WITHOUT_CLASSIFICATION	2.2133824960335422E-7	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999979440873161	WITHOUT_CLASSIFICATION	2.055912683762871E-6	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999947251170649	WITHOUT_CLASSIFICATION	5.274882935091359E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999863416993621	WITHOUT_CLASSIFICATION	1.3658300637819378E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999862789475	WITHOUT_CLASSIFICATION	1.3721052517757309E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999971435031	WITHOUT_CLASSIFICATION	2.8564969306222917E-9	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999998469290968	WITHOUT_CLASSIFICATION	1.53070903095288E-7	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999923892801873	WITHOUT_CLASSIFICATION	7.6107198127926264E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999965194711009	WITHOUT_CLASSIFICATION	3.480528899097401E-6	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999998881665196	WITHOUT_CLASSIFICATION	1.1183348026921676E-7	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999965845305427	WITHOUT_CLASSIFICATION	3.4154694571502736E-6	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999991715024116	WITHOUT_CLASSIFICATION	8.284975884671146E-7	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999478995747861	WITHOUT_CLASSIFICATION	5.210042521396517E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999999836826008	WITHOUT_CLASSIFICATION	1.6317399210907804E-8	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999914191094	WITHOUT_CLASSIFICATION	8.580890531271448E-9	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999991570087	WITHOUT_CLASSIFICATION	8.42991254765979E-10	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999833328425	WITHOUT_CLASSIFICATION	1.666715746495785E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999939664566	WITHOUT_CLASSIFICATION	6.0335434335046766E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999426661841193	WITHOUT_CLASSIFICATION	5.733381588055959E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999892415395	WITHOUT_CLASSIFICATION	1.075846049898664E-8	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999995921369909	WITHOUT_CLASSIFICATION	4.078630092526328E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999612535048528	WITHOUT_CLASSIFICATION	3.874649514735302E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999612535048528	WITHOUT_CLASSIFICATION	3.874649514735302E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999964228107532	WITHOUT_CLASSIFICATION	3.577189246876995E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997299702608	WITHOUT_CLASSIFICATION	2.7002973931912215E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992663473556	WITHOUT_CLASSIFICATION	7.336526444078037E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.731161669790279	IMPLEMENTATION	0.268838330209721	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995684418932	WITHOUT_CLASSIFICATION	4.3155810677424533E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999995684418932	WITHOUT_CLASSIFICATION	4.3155810677424533E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999988206593885	WITHOUT_CLASSIFICATION	1.1793406114599062E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999978500839273	WITHOUT_CLASSIFICATION	2.149916072687062E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999881097667	WITHOUT_CLASSIFICATION	1.1890233299860128E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999931556450943	WITHOUT_CLASSIFICATION	6.84435490568079E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999984043120895	WITHOUT_CLASSIFICATION	1.595687910490262E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999983969982995	WITHOUT_CLASSIFICATION	1.6030017004339004E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999997870608951	WITHOUT_CLASSIFICATION	2.1293910490745282E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999549194383	WITHOUT_CLASSIFICATION	4.5080561765199315E-8	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999805995086922	WITHOUT_CLASSIFICATION	1.9400491307804072E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999237790334	WITHOUT_CLASSIFICATION	7.62209667295155E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999237790334	WITHOUT_CLASSIFICATION	7.62209667295155E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999716542276957	WITHOUT_CLASSIFICATION	2.83457723042985E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999999077639247	WITHOUT_CLASSIFICATION	9.223607529654245E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999998341643459	WITHOUT_CLASSIFICATION	1.6583565400887518E-7	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999480042707085	WITHOUT_CLASSIFICATION	5.199572929150142E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999999832210736	WITHOUT_CLASSIFICATION	1.6778926410774526E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999751015475	WITHOUT_CLASSIFICATION	2.4898452511945917E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967759476708	WITHOUT_CLASSIFICATION	3.2240523291675913E-6	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999990073386729	WITHOUT_CLASSIFICATION	9.926613271037476E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999998697675518	WITHOUT_CLASSIFICATION	1.3023244812236294E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9981571477863589	WITHOUT_CLASSIFICATION	0.001842852213641178	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999116652576	WITHOUT_CLASSIFICATION	8.83347424484999E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999816219119158	WITHOUT_CLASSIFICATION	1.8378088084237257E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999920155874752	WITHOUT_CLASSIFICATION	7.98441252479019E-6	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999798210341391	WITHOUT_CLASSIFICATION	2.0178965860900268E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999768638174	WITHOUT_CLASSIFICATION	2.3136182680772488E-8	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999920763030553	WITHOUT_CLASSIFICATION	7.923696944671662E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999945539578036	WITHOUT_CLASSIFICATION	5.446042196320588E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999998946735994	WITHOUT_CLASSIFICATION	1.0532640056437308E-7	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999938395973483	WITHOUT_CLASSIFICATION	6.160402651652148E-6	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999981195159	WITHOUT_CLASSIFICATION	1.880484185355121E-9	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999995105389398	WITHOUT_CLASSIFICATION	4.894610603048572E-7	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998990388686779	WITHOUT_CLASSIFICATION	1.009611313221011E-4	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998990388686779	WITHOUT_CLASSIFICATION	1.009611313221011E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9984467402150337	WITHOUT_CLASSIFICATION	0.0015532597849664258	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999998086709	WITHOUT_CLASSIFICATION	1.9132912179641852E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998380522504737	WITHOUT_CLASSIFICATION	1.6194774952634053E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999856716045686	WITHOUT_CLASSIFICATION	1.4328395431418108E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999993284886716	WITHOUT_CLASSIFICATION	6.715113284769429E-7	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999000923131	WITHOUT_CLASSIFICATION	9.990768699249898E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999579233951314	WITHOUT_CLASSIFICATION	4.207660486860043E-4	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999997628075	WITHOUT_CLASSIFICATION	2.3719241294364636E-10	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999821799107228	WITHOUT_CLASSIFICATION	1.782008927716334E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9995651851020513	WITHOUT_CLASSIFICATION	4.348148979487343E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988665513182	WITHOUT_CLASSIFICATION	1.1334486817573016E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999999780692839	WITHOUT_CLASSIFICATION	2.19307161979481E-8	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999066847850284	WITHOUT_CLASSIFICATION	9.33152149716041E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999821931183	WITHOUT_CLASSIFICATION	1.7806881738593153E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999965724831	WITHOUT_CLASSIFICATION	3.427516869262949E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999991803306695	WITHOUT_CLASSIFICATION	8.196693305579496E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998222944022	WITHOUT_CLASSIFICATION	1.7770559791974388E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999991662806299	WITHOUT_CLASSIFICATION	8.337193701148118E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999502764767887	WITHOUT_CLASSIFICATION	4.972352321142706E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999930821	WITHOUT_CLASSIFICATION	6.917928146665086E-12	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999994834641	WITHOUT_CLASSIFICATION	5.165359692930023E-10	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999518316832	WITHOUT_CLASSIFICATION	4.8168316763814395E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999992607410649	WITHOUT_CLASSIFICATION	7.392589349893144E-7	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999998927822	WITHOUT_CLASSIFICATION	1.0721778367839814E-10	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979010555	WITHOUT_CLASSIFICATION	2.0989444975164362E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999979010555	WITHOUT_CLASSIFICATION	2.0989444975164362E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999981792961361	WITHOUT_CLASSIFICATION	1.8207038639696074E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999915048451036	WITHOUT_CLASSIFICATION	8.495154896440452E-6	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999879074161	WITHOUT_CLASSIFICATION	1.2092583886929057E-8	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999949595685	WITHOUT_CLASSIFICATION	5.040431503330121E-9	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999996416697113	WITHOUT_CLASSIFICATION	3.583302886848737E-7	IMPLEMENTATION
