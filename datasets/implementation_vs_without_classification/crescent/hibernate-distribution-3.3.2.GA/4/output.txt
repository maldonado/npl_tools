// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9933297115776359	WITHOUT_CLASSIFICATION	0.0066702884223641444	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9933297115776359	WITHOUT_CLASSIFICATION	0.0066702884223641444	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.7236582429654141	WITHOUT_CLASSIFICATION	0.27634175703458597	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.866258016397071	WITHOUT_CLASSIFICATION	0.1337419836029289	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9690837740343928	WITHOUT_CLASSIFICATION	0.03091622596560726	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9847272807669764	IMPLEMENTATION	0.015272719233023686	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9230591859465412	WITHOUT_CLASSIFICATION	0.07694081405345875	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9468757575467187	WITHOUT_CLASSIFICATION	0.05312424245328125	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.8648080877466896	WITHOUT_CLASSIFICATION	0.1351919122533103	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.7201339191412693	WITHOUT_CLASSIFICATION	0.2798660808587306	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9021801238143943	WITHOUT_CLASSIFICATION	0.09781987618560566	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.8459992110717869	IMPLEMENTATION	0.15400078892821312	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.5955549605267401	IMPLEMENTATION	0.4044450394732599	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.5955549605267401	IMPLEMENTATION	0.4044450394732599	WITHOUT_CLASSIFICATION
/**	IMPLEMENTATION	0.9922606932216275	WITHOUT_CLASSIFICATION	0.007739306778372635	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.7342929099903	IMPLEMENTATION	0.2657070900096999	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9882531776036839	IMPLEMENTATION	0.011746822396315958	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.952566966483458	WITHOUT_CLASSIFICATION	0.047433033516542	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999998797353289	WITHOUT_CLASSIFICATION	1.202646710502644E-7	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.8393571574878445	IMPLEMENTATION	0.16064284251215555	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9163200767610955	WITHOUT_CLASSIFICATION	0.08367992323890452	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999238055560375	WITHOUT_CLASSIFICATION	7.6194443962447E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.8391124036060393	WITHOUT_CLASSIFICATION	0.1608875963939607	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.6523180821133855	IMPLEMENTATION	0.3476819178866145	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.6523180821133855	IMPLEMENTATION	0.3476819178866145	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.5270308849186994	IMPLEMENTATION	0.47296911508130046	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.5798243827620854	IMPLEMENTATION	0.42017561723791463	WITHOUT_CLASSIFICATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.8595115167711154	IMPLEMENTATION	0.14048848322888466	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.7464347759125317	IMPLEMENTATION	0.25356522408746823	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9356142163534049	IMPLEMENTATION	0.06438578364659506	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.5738574240686767	WITHOUT_CLASSIFICATION	0.42614257593132343	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.6020926028737317	IMPLEMENTATION	0.3979073971262684	WITHOUT_CLASSIFICATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9997110211563827	WITHOUT_CLASSIFICATION	2.889788436173722E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.6410032065041344	WITHOUT_CLASSIFICATION	0.3589967934958656	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9785780307225345	IMPLEMENTATION	0.021421969277465466	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9505541296049385	WITHOUT_CLASSIFICATION	0.04944587039506156	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.7505465757071418	IMPLEMENTATION	0.2494534242928583	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9962758710468622	WITHOUT_CLASSIFICATION	0.003724128953137905	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.8994581689153355	WITHOUT_CLASSIFICATION	0.10054183108466463	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.890721073995681	WITHOUT_CLASSIFICATION	0.1092789260043191	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.890721073995681	WITHOUT_CLASSIFICATION	0.1092789260043191	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9321669205935892	WITHOUT_CLASSIFICATION	0.0678330794064108	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9997833266067521	WITHOUT_CLASSIFICATION	2.1667339324784186E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.8271649515302913	WITHOUT_CLASSIFICATION	0.17283504846970862	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.8448063143470042	WITHOUT_CLASSIFICATION	0.15519368565299588	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.7542514450938935	IMPLEMENTATION	0.24574855490610656	WITHOUT_CLASSIFICATION
//TODO: formulas ?	IMPLEMENTATION	0.601366898772078	WITHOUT_CLASSIFICATION	0.398633101227922	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9365592884330252	WITHOUT_CLASSIFICATION	0.06344071156697478	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999300459310057	WITHOUT_CLASSIFICATION	6.995406899431428E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.6040737865131941	WITHOUT_CLASSIFICATION	0.3959262134868059	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.8102730670371129	WITHOUT_CLASSIFICATION	0.18972693296288717	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9679443366685849	IMPLEMENTATION	0.0320556633314151	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9222014231750693	WITHOUT_CLASSIFICATION	0.0777985768249308	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.7560708557113515	WITHOUT_CLASSIFICATION	0.24392914428864862	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.7678203119295645	WITHOUT_CLASSIFICATION	0.23217968807043557	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.7469473804987827	IMPLEMENTATION	0.2530526195012172	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.7678203119295645	WITHOUT_CLASSIFICATION	0.23217968807043557	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.8551272396464696	IMPLEMENTATION	0.1448727603535304	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6108615529321436	WITHOUT_CLASSIFICATION	0.3891384470678564	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.7678203119295645	WITHOUT_CLASSIFICATION	0.23217968807043557	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9974652748322874	WITHOUT_CLASSIFICATION	0.0025347251677125724	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9964016785280652	WITHOUT_CLASSIFICATION	0.00359832147193498	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9987150838181105	IMPLEMENTATION	0.0012849161818895057	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9825723805808971	WITHOUT_CLASSIFICATION	0.017427619419102907	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999870349543201	WITHOUT_CLASSIFICATION	1.2965045679976822E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999965676729882	WITHOUT_CLASSIFICATION	3.432327011817894E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999965676729882	WITHOUT_CLASSIFICATION	3.432327011817894E-6	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999438683729485	WITHOUT_CLASSIFICATION	5.6131627051616945E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999991953569843	WITHOUT_CLASSIFICATION	8.046430157298272E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999960875184029	WITHOUT_CLASSIFICATION	3.912481597109473E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999942121526025	WITHOUT_CLASSIFICATION	5.7878473974876925E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999942121526025	WITHOUT_CLASSIFICATION	5.7878473974876925E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999839981341	WITHOUT_CLASSIFICATION	1.6001865895565754E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988011002585	WITHOUT_CLASSIFICATION	1.1988997415354778E-6	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999926647301973	WITHOUT_CLASSIFICATION	7.335269802706873E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999992322563487	WITHOUT_CLASSIFICATION	7.677436513987263E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999982210987136	WITHOUT_CLASSIFICATION	1.7789012864249967E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999982210987136	WITHOUT_CLASSIFICATION	1.7789012864249967E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999791844786865	WITHOUT_CLASSIFICATION	2.0815521313524507E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999644700841399	WITHOUT_CLASSIFICATION	3.552991586003398E-5	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999976442562604	WITHOUT_CLASSIFICATION	2.355743739583113E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999956044951632	WITHOUT_CLASSIFICATION	4.395504836852208E-6	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999491566807	WITHOUT_CLASSIFICATION	5.0843319320252205E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999960650143085	WITHOUT_CLASSIFICATION	3.934985691545213E-6	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999550760255774	WITHOUT_CLASSIFICATION	4.492397442256564E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999927771520091	WITHOUT_CLASSIFICATION	7.222847990922818E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998987894211269	WITHOUT_CLASSIFICATION	1.0121057887311061E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9863299760486989	WITHOUT_CLASSIFICATION	0.013670023951301203	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999718533475794	WITHOUT_CLASSIFICATION	2.8146652420617586E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999915253371322	WITHOUT_CLASSIFICATION	8.47466286781891E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994196603811	WITHOUT_CLASSIFICATION	5.8033961892659E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999989075018761	WITHOUT_CLASSIFICATION	1.0924981239092667E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999989075018761	WITHOUT_CLASSIFICATION	1.0924981239092667E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999987495980139	WITHOUT_CLASSIFICATION	1.250401986015166E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999480622164837	WITHOUT_CLASSIFICATION	5.193778351629743E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999983134749411	WITHOUT_CLASSIFICATION	1.6865250588452988E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999999299144434	WITHOUT_CLASSIFICATION	7.008555660518902E-7	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9996938556049041	WITHOUT_CLASSIFICATION	3.061443950959519E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9922606932216275	WITHOUT_CLASSIFICATION	0.007739306778372635	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9922606932216275	WITHOUT_CLASSIFICATION	0.007739306778372635	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999296781014	WITHOUT_CLASSIFICATION	7.032189867299638E-8	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999966923570103	WITHOUT_CLASSIFICATION	3.3076429896795744E-6	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999995577159145	WITHOUT_CLASSIFICATION	4.422840854001756E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999604142399318	WITHOUT_CLASSIFICATION	3.9585760068184716E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999898516340654	WITHOUT_CLASSIFICATION	1.01483659346361E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923039498548	WITHOUT_CLASSIFICATION	7.696050145172691E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955219970831	WITHOUT_CLASSIFICATION	4.478002916903841E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999993695530937	WITHOUT_CLASSIFICATION	6.304469063091522E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999287814314078	WITHOUT_CLASSIFICATION	7.12185685921195E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999983492491	WITHOUT_CLASSIFICATION	1.6507508732070095E-9	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999978057261776	WITHOUT_CLASSIFICATION	2.194273822395744E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999287814314078	WITHOUT_CLASSIFICATION	7.12185685921195E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999978057261776	WITHOUT_CLASSIFICATION	2.194273822395744E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999815025642362	WITHOUT_CLASSIFICATION	1.849743576379994E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999983825599034	WITHOUT_CLASSIFICATION	1.6174400966014207E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999971975442872	WITHOUT_CLASSIFICATION	2.802455712863396E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999892464307489	WITHOUT_CLASSIFICATION	1.0753569251023996E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999980995294336	WITHOUT_CLASSIFICATION	1.900470566449499E-6	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999339993515902	WITHOUT_CLASSIFICATION	6.600064840982429E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999711434733382	WITHOUT_CLASSIFICATION	2.8856526661754063E-5	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9978738508531546	WITHOUT_CLASSIFICATION	0.0021261491468453297	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999897764141902	WITHOUT_CLASSIFICATION	1.0223585809838291E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.999965708570432	WITHOUT_CLASSIFICATION	3.429142956798301E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999702555733333	WITHOUT_CLASSIFICATION	2.974442666668903E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.999993045836971	WITHOUT_CLASSIFICATION	6.954163029011905E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999040326449	WITHOUT_CLASSIFICATION	9.5967355059894E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999960910927387	WITHOUT_CLASSIFICATION	3.908907261255019E-6	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999951719183844	WITHOUT_CLASSIFICATION	4.8280816155301E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999889325891	WITHOUT_CLASSIFICATION	1.106741078689458E-8	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999992001253639	WITHOUT_CLASSIFICATION	7.998746360759016E-7	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999974153107285	WITHOUT_CLASSIFICATION	2.584689271642074E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999989323046105	WITHOUT_CLASSIFICATION	1.067695389578168E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999193315802	WITHOUT_CLASSIFICATION	8.066841979602907E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999999245092891	WITHOUT_CLASSIFICATION	7.54907109053216E-7	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999977850268302	WITHOUT_CLASSIFICATION	2.2149731696504107E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996912435573	WITHOUT_CLASSIFICATION	3.087564427770226E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990739625901	WITHOUT_CLASSIFICATION	9.260374098569286E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9973788599563813	WITHOUT_CLASSIFICATION	0.0026211400436186826	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999737179127	WITHOUT_CLASSIFICATION	2.6282087326636225E-8	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999226304990553	WITHOUT_CLASSIFICATION	7.736950094472302E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9998169457969563	WITHOUT_CLASSIFICATION	1.8305420304361194E-4	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999992330712728	WITHOUT_CLASSIFICATION	7.669287271293682E-7	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999873993656	WITHOUT_CLASSIFICATION	1.260063435661974E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999661280221518	WITHOUT_CLASSIFICATION	3.387197784816589E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999988274514722	WITHOUT_CLASSIFICATION	1.172548527718689E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998124659959514	WITHOUT_CLASSIFICATION	1.8753400404858766E-4	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999994603793567	WITHOUT_CLASSIFICATION	5.396206433661783E-7	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999990839976288	WITHOUT_CLASSIFICATION	9.160023712071483E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999959264295	WITHOUT_CLASSIFICATION	4.0735705445552385E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999994603793567	WITHOUT_CLASSIFICATION	5.396206433661783E-7	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999502860102	WITHOUT_CLASSIFICATION	4.9713989728633316E-8	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9995485772566433	WITHOUT_CLASSIFICATION	4.514227433566494E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999891535393377	WITHOUT_CLASSIFICATION	1.084646066237994E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999958793269357	WITHOUT_CLASSIFICATION	4.120673064387729E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999980774979931	WITHOUT_CLASSIFICATION	1.9225020069608497E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987427712488	WITHOUT_CLASSIFICATION	1.257228751233029E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987427712488	WITHOUT_CLASSIFICATION	1.257228751233029E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999789329349464	WITHOUT_CLASSIFICATION	2.1067065053552328E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999801138901	WITHOUT_CLASSIFICATION	1.988610992348457E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998679234795884	WITHOUT_CLASSIFICATION	1.3207652041159187E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999533699153	WITHOUT_CLASSIFICATION	4.663008470241656E-8	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999997478891834	WITHOUT_CLASSIFICATION	2.521108166068314E-6	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999966646930917	WITHOUT_CLASSIFICATION	3.335306908403569E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999931572603844	WITHOUT_CLASSIFICATION	6.8427396156239685E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999944725727582	WITHOUT_CLASSIFICATION	5.527427241803899E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999998018676327	WITHOUT_CLASSIFICATION	1.9813236724493395E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998991978954	WITHOUT_CLASSIFICATION	1.0080210460365077E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999234982975	WITHOUT_CLASSIFICATION	7.650170250207399E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999234982975	WITHOUT_CLASSIFICATION	7.650170250207399E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999977641255743	WITHOUT_CLASSIFICATION	2.2358744257551798E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999982564385952	WITHOUT_CLASSIFICATION	1.7435614048468647E-6	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999991789634132	WITHOUT_CLASSIFICATION	8.210365869387053E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999234982975	WITHOUT_CLASSIFICATION	7.650170250207399E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999977641255743	WITHOUT_CLASSIFICATION	2.2358744257551798E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999977641255743	WITHOUT_CLASSIFICATION	2.2358744257551798E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999998258801409	WITHOUT_CLASSIFICATION	1.7411985907982027E-7	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999720305968416	WITHOUT_CLASSIFICATION	2.796940315843124E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999604351508	WITHOUT_CLASSIFICATION	3.9564849145629156E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999798792517	WITHOUT_CLASSIFICATION	2.0120748264597444E-8	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999593732452976	WITHOUT_CLASSIFICATION	4.062675470246928E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999593732452976	WITHOUT_CLASSIFICATION	4.062675470246928E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998487587244793	WITHOUT_CLASSIFICATION	1.512412755206177E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999809309133345	WITHOUT_CLASSIFICATION	1.9069086665401712E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999995304230208	WITHOUT_CLASSIFICATION	4.695769791948123E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999829740826838	WITHOUT_CLASSIFICATION	1.702591731618336E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999829740826838	WITHOUT_CLASSIFICATION	1.702591731618336E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999966811533292	WITHOUT_CLASSIFICATION	3.3188466707481893E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999991916029343	WITHOUT_CLASSIFICATION	8.083970657658678E-7	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999958819950561	WITHOUT_CLASSIFICATION	4.118004943958688E-6	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999853346791954	WITHOUT_CLASSIFICATION	1.4665320804588114E-5	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999819047998669	WITHOUT_CLASSIFICATION	1.8095200133077857E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999706839301773	WITHOUT_CLASSIFICATION	2.9316069822640157E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998660090813186	WITHOUT_CLASSIFICATION	1.3399091868143104E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999875615354641	WITHOUT_CLASSIFICATION	1.2438464535986485E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999849699096005	WITHOUT_CLASSIFICATION	1.5030090399371265E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999958819950561	WITHOUT_CLASSIFICATION	4.118004943958688E-6	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.999989045330714	WITHOUT_CLASSIFICATION	1.0954669285997297E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999580808941472	WITHOUT_CLASSIFICATION	4.191910585283639E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999580808941472	WITHOUT_CLASSIFICATION	4.191910585283639E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999151110903	WITHOUT_CLASSIFICATION	8.488890967989933E-8	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999875666369713	WITHOUT_CLASSIFICATION	1.2433363028789477E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999518268731732	WITHOUT_CLASSIFICATION	4.817312682671132E-5	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999421508201756	WITHOUT_CLASSIFICATION	5.784917982437493E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999690416249624	WITHOUT_CLASSIFICATION	3.095837503769368E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999926851945098	WITHOUT_CLASSIFICATION	7.31480549023779E-6	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.999900200576336	WITHOUT_CLASSIFICATION	9.979942366404167E-5	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9993307891436802	WITHOUT_CLASSIFICATION	6.692108563197907E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999849214842	WITHOUT_CLASSIFICATION	1.5078515807042775E-7	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999849214842	WITHOUT_CLASSIFICATION	1.5078515807042775E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999841544899918	WITHOUT_CLASSIFICATION	1.584551000818998E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999870349543201	WITHOUT_CLASSIFICATION	1.2965045679976822E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999956735628172	WITHOUT_CLASSIFICATION	4.32643718281229E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999978555546611	WITHOUT_CLASSIFICATION	2.144445338882578E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999965676729882	WITHOUT_CLASSIFICATION	3.432327011817894E-6	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999963761377177	WITHOUT_CLASSIFICATION	3.6238622822802094E-6	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999970818888906	WITHOUT_CLASSIFICATION	2.91811110941295E-6	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999986065653445	WITHOUT_CLASSIFICATION	1.3934346555299253E-6	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999971892431677	WITHOUT_CLASSIFICATION	2.8107568322445074E-6	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999986322995378	WITHOUT_CLASSIFICATION	1.3677004622036958E-6	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999542100611049	WITHOUT_CLASSIFICATION	4.57899388951356E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999958221255523	WITHOUT_CLASSIFICATION	4.177874447706712E-6	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999978090650729	WITHOUT_CLASSIFICATION	2.1909349270977224E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999991953569843	WITHOUT_CLASSIFICATION	8.046430157298272E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999983254065151	WITHOUT_CLASSIFICATION	1.6745934849352892E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999983254065151	WITHOUT_CLASSIFICATION	1.6745934849352892E-6	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999971875663923	WITHOUT_CLASSIFICATION	2.812433607663048E-6	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9987035809704489	WITHOUT_CLASSIFICATION	0.0012964190295511526	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999936723785418	WITHOUT_CLASSIFICATION	6.327621458177351E-6	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999973758578974	WITHOUT_CLASSIFICATION	2.624142102605233E-6	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999983597842635	WITHOUT_CLASSIFICATION	1.6402157364581494E-6	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999989220745307	WITHOUT_CLASSIFICATION	1.0779254692610897E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999942121526025	WITHOUT_CLASSIFICATION	5.7878473974876925E-6	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9996165261734741	WITHOUT_CLASSIFICATION	3.834738265259124E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999963281986849	WITHOUT_CLASSIFICATION	3.6718013151449662E-6	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999997539069843	WITHOUT_CLASSIFICATION	2.460930157032959E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999983043359872	WITHOUT_CLASSIFICATION	1.695664012676652E-6	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999755362010845	WITHOUT_CLASSIFICATION	2.4463798915604017E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999830674725732	WITHOUT_CLASSIFICATION	1.6932527426861686E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999906179819122	WITHOUT_CLASSIFICATION	9.382018087642325E-6	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999990190538117	WITHOUT_CLASSIFICATION	9.809461883191807E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999809435871566	WITHOUT_CLASSIFICATION	1.9056412843399805E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999908570930016	WITHOUT_CLASSIFICATION	9.142906998397081E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9994033642740378	WITHOUT_CLASSIFICATION	5.966357259622941E-4	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999898883970259	WITHOUT_CLASSIFICATION	1.011160297410298E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999888951894074	WITHOUT_CLASSIFICATION	1.1104810592652695E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999965676729882	WITHOUT_CLASSIFICATION	3.432327011817894E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999965676729882	WITHOUT_CLASSIFICATION	3.432327011817894E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999958221255523	WITHOUT_CLASSIFICATION	4.177874447706712E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999983254065151	WITHOUT_CLASSIFICATION	1.6745934849352892E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999906179819122	WITHOUT_CLASSIFICATION	9.382018087642325E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999839981341	WITHOUT_CLASSIFICATION	1.6001865895565754E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999660834842029	WITHOUT_CLASSIFICATION	3.3916515797143656E-5	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999614735947802	WITHOUT_CLASSIFICATION	3.8526405219888484E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999036004361742	WITHOUT_CLASSIFICATION	9.639956382582409E-5	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999958523163596	WITHOUT_CLASSIFICATION	4.147683640390409E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999992070343859	WITHOUT_CLASSIFICATION	7.929656140201569E-7	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999969273755093	WITHOUT_CLASSIFICATION	3.0726244907650606E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999876578854495	WITHOUT_CLASSIFICATION	1.2342114550527012E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.999796421902284	WITHOUT_CLASSIFICATION	2.0357809771595913E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999947081449908	WITHOUT_CLASSIFICATION	5.29185500921012E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999730938447599	WITHOUT_CLASSIFICATION	2.6906155240097517E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999730938447599	WITHOUT_CLASSIFICATION	2.6906155240097517E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999992729330561	WITHOUT_CLASSIFICATION	7.270669438500509E-7	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999875126428762	WITHOUT_CLASSIFICATION	1.2487357123681021E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999956630833812	WITHOUT_CLASSIFICATION	4.336916618726914E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999981756057198	WITHOUT_CLASSIFICATION	1.8243942801656604E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999994741389965	WITHOUT_CLASSIFICATION	5.258610034231272E-7	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.999963972814923	WITHOUT_CLASSIFICATION	3.602718507708945E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999997759245917	WITHOUT_CLASSIFICATION	2.2407540830253663E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988011002585	WITHOUT_CLASSIFICATION	1.1988997415354778E-6	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999811239652945	WITHOUT_CLASSIFICATION	1.887603470554314E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993767809743	WITHOUT_CLASSIFICATION	6.232190257938474E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993767809743	WITHOUT_CLASSIFICATION	6.232190257938474E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999993683424172	WITHOUT_CLASSIFICATION	6.316575827155964E-7	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999675303130361	WITHOUT_CLASSIFICATION	3.246968696386523E-5	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999992458376433	WITHOUT_CLASSIFICATION	7.541623566757072E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998619707989	WITHOUT_CLASSIFICATION	1.3802920102974995E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999911180411571	WITHOUT_CLASSIFICATION	8.881958842853774E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999965676729882	WITHOUT_CLASSIFICATION	3.432327011817894E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999958221255523	WITHOUT_CLASSIFICATION	4.177874447706712E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999991953569843	WITHOUT_CLASSIFICATION	8.046430157298272E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999906179819122	WITHOUT_CLASSIFICATION	9.382018087642325E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999906179819122	WITHOUT_CLASSIFICATION	9.382018087642325E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988840533146	WITHOUT_CLASSIFICATION	1.1159466854294527E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988840533146	WITHOUT_CLASSIFICATION	1.1159466854294527E-6	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999828531347865	WITHOUT_CLASSIFICATION	1.7146865213548906E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999916869061958	WITHOUT_CLASSIFICATION	8.313093804232502E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999916869061958	WITHOUT_CLASSIFICATION	8.313093804232502E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999970304923403	WITHOUT_CLASSIFICATION	2.9695076596346636E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999967173535403	WITHOUT_CLASSIFICATION	3.2826464595423118E-6	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999987723194782	WITHOUT_CLASSIFICATION	1.2276805217002782E-6	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999790293754333	WITHOUT_CLASSIFICATION	2.097062456676522E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998042384716	WITHOUT_CLASSIFICATION	1.9576152843038484E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999992322563487	WITHOUT_CLASSIFICATION	7.677436513987263E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999992322563487	WITHOUT_CLASSIFICATION	7.677436513987263E-7	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9998581101031234	WITHOUT_CLASSIFICATION	1.4188989687661358E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999972272353379	WITHOUT_CLASSIFICATION	2.772764662165421E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999898503786411	WITHOUT_CLASSIFICATION	1.01496213589367E-5	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999865393007747	WITHOUT_CLASSIFICATION	1.3460699225244164E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999990693755965	WITHOUT_CLASSIFICATION	9.30624403575349E-7	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999906408087986	WITHOUT_CLASSIFICATION	9.359191201296769E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999982210987136	WITHOUT_CLASSIFICATION	1.7789012864249967E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999878923594876	WITHOUT_CLASSIFICATION	1.2107640512345735E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999878923594876	WITHOUT_CLASSIFICATION	1.2107640512345735E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999791844786865	WITHOUT_CLASSIFICATION	2.0815521313524507E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999791844786865	WITHOUT_CLASSIFICATION	2.0815521313524507E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999843319421772	WITHOUT_CLASSIFICATION	1.5668057822757422E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999843319421772	WITHOUT_CLASSIFICATION	1.5668057822757422E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989622898968	WITHOUT_CLASSIFICATION	1.0377101032568858E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989622898968	WITHOUT_CLASSIFICATION	1.0377101032568858E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999992322563487	WITHOUT_CLASSIFICATION	7.677436513987263E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999982210987136	WITHOUT_CLASSIFICATION	1.7789012864249967E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999878923594876	WITHOUT_CLASSIFICATION	1.2107640512345735E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999878923594876	WITHOUT_CLASSIFICATION	1.2107640512345735E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999791844786865	WITHOUT_CLASSIFICATION	2.0815521313524507E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999843319421772	WITHOUT_CLASSIFICATION	1.5668057822757422E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999843319421772	WITHOUT_CLASSIFICATION	1.5668057822757422E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989622898968	WITHOUT_CLASSIFICATION	1.0377101032568858E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999940358312246	WITHOUT_CLASSIFICATION	5.964168775422187E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999957284187386	WITHOUT_CLASSIFICATION	4.271581261427448E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.999962142855361	WITHOUT_CLASSIFICATION	3.7857144638975974E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999913836110581	WITHOUT_CLASSIFICATION	8.616388941766352E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999291834459064	WITHOUT_CLASSIFICATION	7.081655409363219E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999307390985024	WITHOUT_CLASSIFICATION	6.926090149753924E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999534515446	WITHOUT_CLASSIFICATION	4.6548455456692395E-8	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999902694363179	WITHOUT_CLASSIFICATION	9.730563682227124E-6	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999993007586169	WITHOUT_CLASSIFICATION	6.992413831156473E-7	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999993565202344	WITHOUT_CLASSIFICATION	6.434797656117712E-7	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999995594807282	WITHOUT_CLASSIFICATION	4.4051927181591643E-7	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999989826551715	WITHOUT_CLASSIFICATION	1.0173448285412498E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999789329349464	WITHOUT_CLASSIFICATION	2.1067065053552328E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999307390985024	WITHOUT_CLASSIFICATION	6.926090149753924E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998757782749101	WITHOUT_CLASSIFICATION	1.242217250898737E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998757782749101	WITHOUT_CLASSIFICATION	1.242217250898737E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999997460465712	WITHOUT_CLASSIFICATION	2.539534288904264E-7	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999970939189938	WITHOUT_CLASSIFICATION	2.906081006213419E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999970939189938	WITHOUT_CLASSIFICATION	2.906081006213419E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999871048661715	WITHOUT_CLASSIFICATION	1.2895133828535725E-5	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999927407349317	WITHOUT_CLASSIFICATION	7.25926506827108E-6	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999473841437	WITHOUT_CLASSIFICATION	5.261585637218989E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997818288508838	WITHOUT_CLASSIFICATION	2.1817114911623007E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9997818288508838	WITHOUT_CLASSIFICATION	2.1817114911623007E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999491566807	WITHOUT_CLASSIFICATION	5.0843319320252205E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999473937802	WITHOUT_CLASSIFICATION	5.2606219796482764E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999473937802	WITHOUT_CLASSIFICATION	5.2606219796482764E-8	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999998868581144	WITHOUT_CLASSIFICATION	1.1314188560258306E-6	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999987016746482	WITHOUT_CLASSIFICATION	1.2983253517511176E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999987487728775	WITHOUT_CLASSIFICATION	1.2512271225113135E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999695321430117	WITHOUT_CLASSIFICATION	3.0467856988319998E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999889616951505	WITHOUT_CLASSIFICATION	1.103830484947411E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999908094504483	WITHOUT_CLASSIFICATION	9.190549551778451E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999960650143085	WITHOUT_CLASSIFICATION	3.934985691545213E-6	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999933640665536	WITHOUT_CLASSIFICATION	6.635933446473359E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.6867471202522524	WITHOUT_CLASSIFICATION	0.31325287974774757	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999759628718966	WITHOUT_CLASSIFICATION	2.4037128103400053E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999753108605869	WITHOUT_CLASSIFICATION	2.4689139413190136E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998987894211269	WITHOUT_CLASSIFICATION	1.0121057887311061E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999989506739548	WITHOUT_CLASSIFICATION	1.0493260452581212E-6	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998133004059	WITHOUT_CLASSIFICATION	1.8669959416264743E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999625179409595	WITHOUT_CLASSIFICATION	3.748205904057093E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998987894211269	WITHOUT_CLASSIFICATION	1.0121057887311061E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999985274438855	WITHOUT_CLASSIFICATION	1.472556114475055E-6	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999780636900808	WITHOUT_CLASSIFICATION	2.1936309919237803E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999622217665997	WITHOUT_CLASSIFICATION	3.777823340033433E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999844944965025	WITHOUT_CLASSIFICATION	1.5505503497430897E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999883586634184	WITHOUT_CLASSIFICATION	1.1641336581637962E-5	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999665602411635	WITHOUT_CLASSIFICATION	3.343975883658899E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999724572023189	WITHOUT_CLASSIFICATION	2.7542797681127072E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999915253371322	WITHOUT_CLASSIFICATION	8.47466286781891E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999879449506386	WITHOUT_CLASSIFICATION	1.2055049361473331E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999994196603811	WITHOUT_CLASSIFICATION	5.8033961892659E-7	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999976234079815	WITHOUT_CLASSIFICATION	2.37659201849746E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999958944309224	WITHOUT_CLASSIFICATION	4.105569077627342E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999901746835052	WITHOUT_CLASSIFICATION	9.825316494932714E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999960650143085	WITHOUT_CLASSIFICATION	3.934985691545213E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999879449506386	WITHOUT_CLASSIFICATION	1.2055049361473331E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999976234079815	WITHOUT_CLASSIFICATION	2.37659201849746E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999901746835052	WITHOUT_CLASSIFICATION	9.825316494932714E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999985912965321	WITHOUT_CLASSIFICATION	1.4087034679295244E-6	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999476538647754	WITHOUT_CLASSIFICATION	5.234613522463889E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999984820406923	WITHOUT_CLASSIFICATION	1.5179593077391256E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999989075018761	WITHOUT_CLASSIFICATION	1.0924981239092667E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999992827872402	WITHOUT_CLASSIFICATION	7.17212759802515E-6	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999991696876132	WITHOUT_CLASSIFICATION	8.303123869576739E-7	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.999996618110254	WITHOUT_CLASSIFICATION	3.3818897460219687E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999999168528064	WITHOUT_CLASSIFICATION	8.314719356946974E-8	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999846208366926	WITHOUT_CLASSIFICATION	1.5379163307307313E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999984289582341	WITHOUT_CLASSIFICATION	1.5710417658809315E-6	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999099559016	WITHOUT_CLASSIFICATION	9.00440983292033E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999975822335306	WITHOUT_CLASSIFICATION	2.4177664693866645E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999972932498989	WITHOUT_CLASSIFICATION	2.706750100989292E-6	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996048660305	WITHOUT_CLASSIFICATION	3.951339695120048E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999830165727034	WITHOUT_CLASSIFICATION	1.698342729663969E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999852808537343	WITHOUT_CLASSIFICATION	1.4719146265696656E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999480622164837	WITHOUT_CLASSIFICATION	5.193778351629743E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999985575764192	WITHOUT_CLASSIFICATION	1.442423580780059E-6	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999774121187421	WITHOUT_CLASSIFICATION	2.2587881257874816E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999879449506386	WITHOUT_CLASSIFICATION	1.2055049361473331E-5	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999996612313823	WITHOUT_CLASSIFICATION	3.387686176985135E-6	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999692629077024	WITHOUT_CLASSIFICATION	3.073709229756728E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999963321601433	WITHOUT_CLASSIFICATION	3.6678398566354996E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.998631321258069	WITHOUT_CLASSIFICATION	0.001368678741931024	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999874151753003	WITHOUT_CLASSIFICATION	1.2584824699684203E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999989084388728	WITHOUT_CLASSIFICATION	1.0915611271795517E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999046054535	WITHOUT_CLASSIFICATION	9.539454642072903E-8	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998189785482	WITHOUT_CLASSIFICATION	1.8102145191158619E-7	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999504094722842	WITHOUT_CLASSIFICATION	4.9590527715837376E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999580084974996	WITHOUT_CLASSIFICATION	4.199150250042437E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999805365356259	WITHOUT_CLASSIFICATION	1.946346437409124E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999533861828946	WITHOUT_CLASSIFICATION	4.661381710542518E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999995540644421	WITHOUT_CLASSIFICATION	4.4593555794796376E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999999299144434	WITHOUT_CLASSIFICATION	7.008555660518902E-7	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999947323696585	WITHOUT_CLASSIFICATION	5.267630341423999E-6	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999372875645466	WITHOUT_CLASSIFICATION	6.271243545335648E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999960791642489	WITHOUT_CLASSIFICATION	3.920835751150825E-6	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999963722996804	WITHOUT_CLASSIFICATION	3.6277003195597715E-6	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999939062047151	WITHOUT_CLASSIFICATION	6.093795284903759E-6	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999943794205516	WITHOUT_CLASSIFICATION	5.6205794485154534E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999329455511	WITHOUT_CLASSIFICATION	6.70544489297639E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999951198839526	WITHOUT_CLASSIFICATION	4.880116047340478E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999868554541003	WITHOUT_CLASSIFICATION	1.3144545899619482E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999908317719933	WITHOUT_CLASSIFICATION	9.168228006629154E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997935676666448	WITHOUT_CLASSIFICATION	2.0643233335511377E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997935676666448	WITHOUT_CLASSIFICATION	2.0643233335511377E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998811312821062	WITHOUT_CLASSIFICATION	1.1886871789384469E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9994032262151265	WITHOUT_CLASSIFICATION	5.967737848734741E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999998839710271	WITHOUT_CLASSIFICATION	1.1602897289588453E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999862581654294	WITHOUT_CLASSIFICATION	1.3741834570628191E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999863442960022	WITHOUT_CLASSIFICATION	1.3655703997881835E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999993050555547	WITHOUT_CLASSIFICATION	6.949444452722239E-7	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999992740449718	WITHOUT_CLASSIFICATION	7.259550282441851E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999408116388	WITHOUT_CLASSIFICATION	5.918836122314586E-8	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9995868875320348	WITHOUT_CLASSIFICATION	4.1311246796519414E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999348933268984	WITHOUT_CLASSIFICATION	6.510667310158758E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999920978236752	WITHOUT_CLASSIFICATION	7.902176324924918E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999730996685567	WITHOUT_CLASSIFICATION	2.6900331443287976E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999999341229397	WITHOUT_CLASSIFICATION	6.587706030672066E-7	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999998819757365	WITHOUT_CLASSIFICATION	1.1802426349740619E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984913589358	WITHOUT_CLASSIFICATION	1.5086410641827888E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981518841787	WITHOUT_CLASSIFICATION	1.8481158212178398E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999974910063492	WITHOUT_CLASSIFICATION	2.5089936507479323E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999994501148689	WITHOUT_CLASSIFICATION	5.498851310766273E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999998006075932	WITHOUT_CLASSIFICATION	1.9939240679835614E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999932044869635	WITHOUT_CLASSIFICATION	6.795513036471572E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999841727515412	WITHOUT_CLASSIFICATION	1.582724845884651E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999841727515412	WITHOUT_CLASSIFICATION	1.582724845884651E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.999997863186697	WITHOUT_CLASSIFICATION	2.136813302981241E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.999997863186697	WITHOUT_CLASSIFICATION	2.136813302981241E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999868554541003	WITHOUT_CLASSIFICATION	1.3144545899619482E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999721145956788	WITHOUT_CLASSIFICATION	2.788540432111179E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9921641001386826	WITHOUT_CLASSIFICATION	0.00783589986131737	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999658911427728	WITHOUT_CLASSIFICATION	3.4108857227286706E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999841544899918	WITHOUT_CLASSIFICATION	1.584551000818998E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9921641001386826	WITHOUT_CLASSIFICATION	0.00783589986131737	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999658911427728	WITHOUT_CLASSIFICATION	3.4108857227286706E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999996748685628	WITHOUT_CLASSIFICATION	3.251314372047284E-6	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999997815597803	WITHOUT_CLASSIFICATION	2.1844021976638314E-7	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999964904184018	WITHOUT_CLASSIFICATION	3.5095815983427733E-6	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9997657361256467	WITHOUT_CLASSIFICATION	2.342638743533854E-4	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999998362806912	WITHOUT_CLASSIFICATION	1.6371930878962393E-7	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999884180395293	WITHOUT_CLASSIFICATION	1.1581960470788004E-5	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999579858849099	WITHOUT_CLASSIFICATION	4.201411509007812E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9998879465277344	WITHOUT_CLASSIFICATION	1.1205347226565037E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999880353540413	WITHOUT_CLASSIFICATION	1.1964645958685932E-5	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999991746185434	WITHOUT_CLASSIFICATION	8.253814566055974E-7	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999611742714636	WITHOUT_CLASSIFICATION	3.882572853634179E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999912924496173	WITHOUT_CLASSIFICATION	8.707550382749814E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999837773458727	WITHOUT_CLASSIFICATION	1.6222654127274145E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999565174402628	WITHOUT_CLASSIFICATION	4.3482559737149874E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999841544899918	WITHOUT_CLASSIFICATION	1.584551000818998E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999191879544632	WITHOUT_CLASSIFICATION	8.081204553679666E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999988730770115	WITHOUT_CLASSIFICATION	1.126922988535907E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999988730770115	WITHOUT_CLASSIFICATION	1.126922988535907E-6	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999998933227576	WITHOUT_CLASSIFICATION	1.0667724248686173E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999996748685628	WITHOUT_CLASSIFICATION	3.251314372047284E-6	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999942001658897	WITHOUT_CLASSIFICATION	5.79983411034149E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999978883147629	WITHOUT_CLASSIFICATION	2.1116852371100252E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999486416922514	WITHOUT_CLASSIFICATION	5.1358307748542286E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998563424751562	WITHOUT_CLASSIFICATION	1.436575248437653E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999673565442355	WITHOUT_CLASSIFICATION	3.264345576451201E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999996748685628	WITHOUT_CLASSIFICATION	3.251314372047284E-6	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998563424751562	WITHOUT_CLASSIFICATION	1.436575248437653E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999673565442355	WITHOUT_CLASSIFICATION	3.264345576451201E-5	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998901151479839	WITHOUT_CLASSIFICATION	1.0988485201608042E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999938072497562	WITHOUT_CLASSIFICATION	6.192750243876036E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999978923631904	WITHOUT_CLASSIFICATION	2.1076368096529717E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999996748685628	WITHOUT_CLASSIFICATION	3.251314372047284E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999996748685628	WITHOUT_CLASSIFICATION	3.251314372047284E-6	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999977578857073	WITHOUT_CLASSIFICATION	2.2421142926593235E-6	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999992722916664	WITHOUT_CLASSIFICATION	7.277083335087037E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999972164733226	WITHOUT_CLASSIFICATION	2.7835266774121906E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999993210866154	WITHOUT_CLASSIFICATION	6.789133845956276E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999984967646831	WITHOUT_CLASSIFICATION	1.5032353169295967E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999976209377585	WITHOUT_CLASSIFICATION	2.3790622415290584E-6	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999990286026645	WITHOUT_CLASSIFICATION	9.713973354590435E-7	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999990338229343	WITHOUT_CLASSIFICATION	9.661770657270491E-7	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999971009850691	WITHOUT_CLASSIFICATION	2.8990149308851616E-6	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999978104049352	WITHOUT_CLASSIFICATION	2.189595064881502E-6	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999992827598592	WITHOUT_CLASSIFICATION	7.172401407797733E-7	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999956879658047	WITHOUT_CLASSIFICATION	4.312034195341484E-6	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998078877146	WITHOUT_CLASSIFICATION	1.9211228542508666E-7	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999993451868687	WITHOUT_CLASSIFICATION	6.548131313395705E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567403453012	WITHOUT_CLASSIFICATION	4.3259654698789045E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998080662359	WITHOUT_CLASSIFICATION	1.9193376406529461E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999604142399318	WITHOUT_CLASSIFICATION	3.9585760068184716E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999933811841029	WITHOUT_CLASSIFICATION	6.6188158971731255E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999185125790246	WITHOUT_CLASSIFICATION	8.148742097527264E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997731946629	WITHOUT_CLASSIFICATION	2.268053371705293E-7	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999848293476696	WITHOUT_CLASSIFICATION	1.5170652330395334E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9998999821194334	WITHOUT_CLASSIFICATION	1.0001788056655923E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9998999821194334	WITHOUT_CLASSIFICATION	1.0001788056655923E-4	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999604142399318	WITHOUT_CLASSIFICATION	3.9585760068184716E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999996428844034	WITHOUT_CLASSIFICATION	3.571155965950433E-6	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999443703523	WITHOUT_CLASSIFICATION	5.56296476619427E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9995020743975541	WITHOUT_CLASSIFICATION	4.979256024458715E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999930548978365	WITHOUT_CLASSIFICATION	6.945102163472365E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914560559899	WITHOUT_CLASSIFICATION	8.543944010069143E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999964945874046	WITHOUT_CLASSIFICATION	3.5054125954223797E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999952842044436	WITHOUT_CLASSIFICATION	4.715795556408359E-6	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999969620503139	WITHOUT_CLASSIFICATION	3.0379496862543155E-6	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999991391773791	WITHOUT_CLASSIFICATION	8.608226208263527E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998988791732132	WITHOUT_CLASSIFICATION	1.0112082678683804E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999854611770236	WITHOUT_CLASSIFICATION	1.4538822976385889E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999780408940994	WITHOUT_CLASSIFICATION	2.1959105900662786E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999557373334856	WITHOUT_CLASSIFICATION	4.42626665144063E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999959043741146	WITHOUT_CLASSIFICATION	4.09562588541567E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999654924677235	WITHOUT_CLASSIFICATION	3.450753227658452E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999860482171212	WITHOUT_CLASSIFICATION	1.3951782878843939E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999993022047563	WITHOUT_CLASSIFICATION	6.977952436155146E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999927054867471	WITHOUT_CLASSIFICATION	7.29451325297545E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952912047937	WITHOUT_CLASSIFICATION	4.70879520639764E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999725442809667	WITHOUT_CLASSIFICATION	2.7455719033292536E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999911051621	WITHOUT_CLASSIFICATION	8.89483790000798E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999969368672945	WITHOUT_CLASSIFICATION	3.0631327055553782E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935865932537	WITHOUT_CLASSIFICATION	6.413406746341364E-6	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997920498670959	WITHOUT_CLASSIFICATION	2.0795013290398666E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802573714418	WITHOUT_CLASSIFICATION	1.9742628558135433E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998823083907655	WITHOUT_CLASSIFICATION	1.1769160923443492E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999019440039609	WITHOUT_CLASSIFICATION	9.805599603902239E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999623973934477	WITHOUT_CLASSIFICATION	3.7602606552158946E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999104954481822	WITHOUT_CLASSIFICATION	8.950455181769992E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966072879739	WITHOUT_CLASSIFICATION	3.3927120261481913E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.999993705103338	WITHOUT_CLASSIFICATION	6.294896662006293E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999669776679854	WITHOUT_CLASSIFICATION	3.3022332014681315E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798292432641	WITHOUT_CLASSIFICATION	2.0170756735878802E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931611454896	WITHOUT_CLASSIFICATION	6.8388545103631495E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816540880858	WITHOUT_CLASSIFICATION	1.8345911914291168E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856580702132	WITHOUT_CLASSIFICATION	1.4341929786922255E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998042630078887	WITHOUT_CLASSIFICATION	1.957369921112805E-4	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608964541813	WITHOUT_CLASSIFICATION	3.910354581882529E-5	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976200977071	WITHOUT_CLASSIFICATION	2.3799022929071223E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999480608357232	WITHOUT_CLASSIFICATION	5.19391642768037E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999584533168907	WITHOUT_CLASSIFICATION	4.1546683109391656E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991890538587	WITHOUT_CLASSIFICATION	8.109461413043237E-6	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998070151773406	WITHOUT_CLASSIFICATION	1.9298482265938353E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999073986465417	WITHOUT_CLASSIFICATION	9.260135345839937E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998594548012	WITHOUT_CLASSIFICATION	1.4054519884193735E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998111914118	WITHOUT_CLASSIFICATION	1.8880858826128682E-7	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999934172748207	WITHOUT_CLASSIFICATION	6.582725179288397E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999936195970491	WITHOUT_CLASSIFICATION	6.380402950843423E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999940410597029	WITHOUT_CLASSIFICATION	5.958940297038985E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999943269504707	WITHOUT_CLASSIFICATION	5.673049529178159E-6	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999705666977415	WITHOUT_CLASSIFICATION	2.9433302258457247E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999566746626034	WITHOUT_CLASSIFICATION	4.332533739646956E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999650069435044	WITHOUT_CLASSIFICATION	3.4993056495503346E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999893953513939	WITHOUT_CLASSIFICATION	1.0604648606013842E-5	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999962782302199	WITHOUT_CLASSIFICATION	3.7217697802485243E-6	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999991338786943	WITHOUT_CLASSIFICATION	8.66121305718891E-7	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999948440507692	WITHOUT_CLASSIFICATION	5.155949230680561E-6	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999926122603223	WITHOUT_CLASSIFICATION	7.387739677784632E-6	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999963952177343	WITHOUT_CLASSIFICATION	3.6047822658001147E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936085828601	WITHOUT_CLASSIFICATION	6.39141713985984E-6	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948470037439	WITHOUT_CLASSIFICATION	5.152996256110273E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995900872914641	WITHOUT_CLASSIFICATION	4.099127085358817E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879918772068	WITHOUT_CLASSIFICATION	1.2008122793227559E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999688590219087	WITHOUT_CLASSIFICATION	3.114097809136519E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999991094834746	WITHOUT_CLASSIFICATION	8.905165255061301E-7	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999955458584727	WITHOUT_CLASSIFICATION	4.454141527328657E-6	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999467487243056	WITHOUT_CLASSIFICATION	5.325127569437087E-5	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959938101404	WITHOUT_CLASSIFICATION	4.006189859607333E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999985741497033	WITHOUT_CLASSIFICATION	1.4258502966577091E-6	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999980848915356	WITHOUT_CLASSIFICATION	1.915108464299572E-6	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999992159765699	WITHOUT_CLASSIFICATION	7.840234300636689E-7	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.99999954519857	WITHOUT_CLASSIFICATION	4.548014299772635E-7	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999999896631837	WITHOUT_CLASSIFICATION	1.0336816264856292E-8	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999992792816991	WITHOUT_CLASSIFICATION	7.207183009125872E-7	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999708450261668	WITHOUT_CLASSIFICATION	2.9154973833138203E-5	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999997962501804	WITHOUT_CLASSIFICATION	2.037498195072937E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998111914118	WITHOUT_CLASSIFICATION	1.8880858826128682E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999904232962723	WITHOUT_CLASSIFICATION	9.576703727677383E-6	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999967876105176	WITHOUT_CLASSIFICATION	3.212389482544785E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999974085735146	WITHOUT_CLASSIFICATION	2.591426485402055E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998027915696068	WITHOUT_CLASSIFICATION	1.97208430393256E-4	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999963473389514	WITHOUT_CLASSIFICATION	3.652661048708721E-6	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999632940145905	WITHOUT_CLASSIFICATION	3.6705985409564604E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999840912580297	WITHOUT_CLASSIFICATION	1.590874197034711E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999935962745248	WITHOUT_CLASSIFICATION	6.40372547528221E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9993078742977692	WITHOUT_CLASSIFICATION	6.921257022308671E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999965501154544	WITHOUT_CLASSIFICATION	3.449884545474287E-6	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999973022953867	WITHOUT_CLASSIFICATION	2.697704613397696E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999922411434257	WITHOUT_CLASSIFICATION	7.758856574347808E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.99999327716553	WITHOUT_CLASSIFICATION	6.722834469990096E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999561860248016	WITHOUT_CLASSIFICATION	4.381397519839302E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999535945730814	WITHOUT_CLASSIFICATION	4.640542691852943E-5	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999992000413506	WITHOUT_CLASSIFICATION	7.999586494743314E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9997266945883289	WITHOUT_CLASSIFICATION	2.7330541167115604E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998469446534212	WITHOUT_CLASSIFICATION	1.530553465789437E-4	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999948930858463	WITHOUT_CLASSIFICATION	5.106914153630285E-6	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9998762350296406	WITHOUT_CLASSIFICATION	1.2376497035935233E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999907979489316	WITHOUT_CLASSIFICATION	9.202051068378983E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999950627356381	WITHOUT_CLASSIFICATION	4.93726436181619E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9993678268425747	WITHOUT_CLASSIFICATION	6.321731574252101E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999945400586892	WITHOUT_CLASSIFICATION	5.4599413108060404E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999969415799618	WITHOUT_CLASSIFICATION	3.058420038210162E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999661844719206	WITHOUT_CLASSIFICATION	3.3815528079408334E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9863299760486989	WITHOUT_CLASSIFICATION	0.013670023951301203	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999937544139947	WITHOUT_CLASSIFICATION	6.245586005220912E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999846842848595	WITHOUT_CLASSIFICATION	1.531571514050821E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999976825167683	WITHOUT_CLASSIFICATION	2.3174832316943067E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998111914118	WITHOUT_CLASSIFICATION	1.8880858826128682E-7	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999943858756302	WITHOUT_CLASSIFICATION	5.614124369916156E-6	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999730379808	WITHOUT_CLASSIFICATION	2.6962019142775585E-8	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997846972050348	WITHOUT_CLASSIFICATION	2.1530279496522405E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998111914118	WITHOUT_CLASSIFICATION	1.8880858826128682E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999936115096383	WITHOUT_CLASSIFICATION	6.3884903617150084E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999907979489316	WITHOUT_CLASSIFICATION	9.202051068378983E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999298133587065	WITHOUT_CLASSIFICATION	7.018664129346979E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999991750294338	WITHOUT_CLASSIFICATION	8.249705661521589E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999659718030471	WITHOUT_CLASSIFICATION	3.402819695285712E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999965501154544	WITHOUT_CLASSIFICATION	3.449884545474287E-6	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999973022953867	WITHOUT_CLASSIFICATION	2.697704613397696E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999922411434257	WITHOUT_CLASSIFICATION	7.758856574347808E-6	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999983895087275	WITHOUT_CLASSIFICATION	1.6104912725544015E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999951007931268	WITHOUT_CLASSIFICATION	4.899206873217976E-6	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999987371596924	WITHOUT_CLASSIFICATION	1.2628403076040547E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.999993196523115	WITHOUT_CLASSIFICATION	6.8034768849987575E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999558350098005	WITHOUT_CLASSIFICATION	4.416499019961643E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998111914118	WITHOUT_CLASSIFICATION	1.8880858826128682E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.99999327716553	WITHOUT_CLASSIFICATION	6.722834469990096E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999561860248016	WITHOUT_CLASSIFICATION	4.381397519839302E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996297261194	WITHOUT_CLASSIFICATION	3.7027388059635734E-7	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998476754605	WITHOUT_CLASSIFICATION	1.523245395418999E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999478180537	WITHOUT_CLASSIFICATION	5.2181946376319936E-8	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999986675556688	WITHOUT_CLASSIFICATION	1.3324443312242678E-6	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999988880330228	WITHOUT_CLASSIFICATION	1.1119669771399498E-6	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999922927819166	WITHOUT_CLASSIFICATION	7.707218083432207E-6	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999480608357232	WITHOUT_CLASSIFICATION	5.19391642768037E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999995377663602	WITHOUT_CLASSIFICATION	4.62233639799327E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999882531837327	WITHOUT_CLASSIFICATION	1.1746816267301897E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999972218480698	WITHOUT_CLASSIFICATION	2.77815193021363E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9993981346905424	WITHOUT_CLASSIFICATION	6.018653094575774E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999938467031163	WITHOUT_CLASSIFICATION	6.153296883599451E-6	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999019440039609	WITHOUT_CLASSIFICATION	9.805599603902239E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999623973934477	WITHOUT_CLASSIFICATION	3.7602606552158946E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931611454896	WITHOUT_CLASSIFICATION	6.8388545103631495E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999938467031163	WITHOUT_CLASSIFICATION	6.153296883599451E-6	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999333090111475	WITHOUT_CLASSIFICATION	6.669098885245871E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999995163849996	WITHOUT_CLASSIFICATION	4.836150003948728E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999571413041893	WITHOUT_CLASSIFICATION	4.285869581069671E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996823604411086	WITHOUT_CLASSIFICATION	3.176395588913603E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9998677500912926	WITHOUT_CLASSIFICATION	1.3224990870734461E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999715372127241	WITHOUT_CLASSIFICATION	2.8462787275796183E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816540880858	WITHOUT_CLASSIFICATION	1.8345911914291168E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608964541813	WITHOUT_CLASSIFICATION	3.910354581882529E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.99999954519857	WITHOUT_CLASSIFICATION	4.548014299772635E-7	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999841244638003	WITHOUT_CLASSIFICATION	1.587553619970476E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999991675763393	WITHOUT_CLASSIFICATION	8.324236606112682E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999178682472543	WITHOUT_CLASSIFICATION	8.213175274571278E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999946344360207	WITHOUT_CLASSIFICATION	5.3655639792865544E-6	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999989668513561	WITHOUT_CLASSIFICATION	1.0331486438056273E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999982576118445	WITHOUT_CLASSIFICATION	1.742388155507854E-6	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999987467389895	WITHOUT_CLASSIFICATION	1.2532610105160355E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999991391773791	WITHOUT_CLASSIFICATION	8.608226208263527E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999805789968961	WITHOUT_CLASSIFICATION	1.9421003103862564E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999990572739145	WITHOUT_CLASSIFICATION	9.427260855911131E-7	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999998864735839	WITHOUT_CLASSIFICATION	1.135264160946309E-6	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999992314494814	WITHOUT_CLASSIFICATION	7.685505185464463E-7	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999986832912031	WITHOUT_CLASSIFICATION	1.3167087969384847E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999994137506757	WITHOUT_CLASSIFICATION	5.8624932429274105E-6	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961523943934	WITHOUT_CLASSIFICATION	3.8476056065659286E-6	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999824356748972	WITHOUT_CLASSIFICATION	1.7564325102771753E-5	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999867495883519	WITHOUT_CLASSIFICATION	1.3250411648010374E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998471429812138	WITHOUT_CLASSIFICATION	1.5285701878624798E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999387231069163	WITHOUT_CLASSIFICATION	6.12768930836096E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999798809974635	WITHOUT_CLASSIFICATION	2.0119002536570812E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989739435068	WITHOUT_CLASSIFICATION	1.0260564933159753E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999997475398465	WITHOUT_CLASSIFICATION	2.5246015350202145E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999954112604618	WITHOUT_CLASSIFICATION	4.588739538277356E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997805112867704	WITHOUT_CLASSIFICATION	2.1948871322956324E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999589771814296	WITHOUT_CLASSIFICATION	4.102281857039968E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984729817791	WITHOUT_CLASSIFICATION	1.5270182208911926E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999619738738867	WITHOUT_CLASSIFICATION	3.80261261132187E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991726249183	WITHOUT_CLASSIFICATION	8.273750816302328E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876822509525	WITHOUT_CLASSIFICATION	1.2317749047466659E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997724673241078	WITHOUT_CLASSIFICATION	2.2753267589205287E-4	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999992304885891	WITHOUT_CLASSIFICATION	7.695114109825901E-7	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999990125933028	WITHOUT_CLASSIFICATION	9.874066972890122E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.999999194202859	WITHOUT_CLASSIFICATION	8.057971409617551E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999791604405723	WITHOUT_CLASSIFICATION	2.0839559427709003E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999783924416734	WITHOUT_CLASSIFICATION	2.160755832651998E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999964332676484	WITHOUT_CLASSIFICATION	3.5667323516612835E-6	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999951353681427	WITHOUT_CLASSIFICATION	4.864631857360741E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999900566788611	WITHOUT_CLASSIFICATION	9.943321138956908E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999998266737775	WITHOUT_CLASSIFICATION	1.7332622249349348E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999997367541239	WITHOUT_CLASSIFICATION	2.63245876104634E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999961761750573	WITHOUT_CLASSIFICATION	3.823824942686813E-6	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999692240844527	WITHOUT_CLASSIFICATION	3.0775915547275955E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999503171315913	WITHOUT_CLASSIFICATION	4.968286840868318E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999774060884998	WITHOUT_CLASSIFICATION	2.259391150013508E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999992552787951	WITHOUT_CLASSIFICATION	7.447212048624072E-7	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999997576858533	WITHOUT_CLASSIFICATION	2.4231414674527905E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999820573751274	WITHOUT_CLASSIFICATION	1.7942624872602608E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999994888885981	WITHOUT_CLASSIFICATION	5.111114018199538E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999829183096374	WITHOUT_CLASSIFICATION	1.7081690362629162E-5	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999477965214117	WITHOUT_CLASSIFICATION	5.2203478588297486E-5	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999955598279597	WITHOUT_CLASSIFICATION	4.440172040217512E-6	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999938687016786	WITHOUT_CLASSIFICATION	6.131298321420066E-6	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998214755012514	WITHOUT_CLASSIFICATION	1.7852449874853713E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9995101153501121	WITHOUT_CLASSIFICATION	4.898846498878449E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999984011472044	WITHOUT_CLASSIFICATION	1.5988527955029212E-6	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999990989708273	WITHOUT_CLASSIFICATION	9.010291726143449E-7	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999960796178267	WITHOUT_CLASSIFICATION	3.920382173366632E-6	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9997515781249743	WITHOUT_CLASSIFICATION	2.484218750257387E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999949932240155	WITHOUT_CLASSIFICATION	5.006775984517477E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999160070472	WITHOUT_CLASSIFICATION	8.399295276448973E-8	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999983602555542	WITHOUT_CLASSIFICATION	1.6397444458048208E-5	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998723266368	WITHOUT_CLASSIFICATION	1.2767336330262195E-7	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999620648736	WITHOUT_CLASSIFICATION	3.7935126455327334E-8	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9998237113532285	WITHOUT_CLASSIFICATION	1.7628864677153293E-4	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999903732903395	WITHOUT_CLASSIFICATION	9.626709660451625E-6	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999990911132373	WITHOUT_CLASSIFICATION	9.088867626550609E-7	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999986071525971	WITHOUT_CLASSIFICATION	1.3928474028797157E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999988107826836	WITHOUT_CLASSIFICATION	1.1892173163784494E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999959057821055	WITHOUT_CLASSIFICATION	4.094217894471178E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999788377705786	WITHOUT_CLASSIFICATION	2.116222942128266E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999965667699882	WITHOUT_CLASSIFICATION	3.4332300118436153E-6	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9974450773167645	WITHOUT_CLASSIFICATION	0.0025549226832355205	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999986066242591	WITHOUT_CLASSIFICATION	1.3933757408958579E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999918020139233	WITHOUT_CLASSIFICATION	8.197986076611452E-6	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9966298091487855	WITHOUT_CLASSIFICATION	0.0033701908512144174	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999987841019276	WITHOUT_CLASSIFICATION	1.215898072448633E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998936927913372	WITHOUT_CLASSIFICATION	1.0630720866279941E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999415168457565	WITHOUT_CLASSIFICATION	5.8483154243407525E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999904751245546	WITHOUT_CLASSIFICATION	9.524875445411695E-6	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.999999876550858	WITHOUT_CLASSIFICATION	1.234491420613709E-7	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999906237087295	WITHOUT_CLASSIFICATION	9.37629127063657E-6	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999921725285407	WITHOUT_CLASSIFICATION	7.827471459399235E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998852136020049	WITHOUT_CLASSIFICATION	1.1478639799502869E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.999990421273958	WITHOUT_CLASSIFICATION	9.578726042094225E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999992590461827	WITHOUT_CLASSIFICATION	7.409538173363549E-7	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999981948415571	WITHOUT_CLASSIFICATION	1.8051584428936473E-5	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999987924573843	WITHOUT_CLASSIFICATION	1.2075426157374305E-6	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9998994391374499	WITHOUT_CLASSIFICATION	1.0056086255009695E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998957088945833	WITHOUT_CLASSIFICATION	1.0429110541660005E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999962486062396	WITHOUT_CLASSIFICATION	3.751393760356074E-6	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999919060460445	WITHOUT_CLASSIFICATION	8.093953955434588E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999962995315441	WITHOUT_CLASSIFICATION	3.7004684559071775E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999805195274553	WITHOUT_CLASSIFICATION	1.9480472544787656E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996528899216524	WITHOUT_CLASSIFICATION	3.471100783476673E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999901787438323	WITHOUT_CLASSIFICATION	9.821256167780933E-6	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999614666493296	WITHOUT_CLASSIFICATION	3.85333506704407E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999808008900111	WITHOUT_CLASSIFICATION	1.919910998902821E-5	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999834038624	WITHOUT_CLASSIFICATION	1.6596137646669602E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999996548586692	WITHOUT_CLASSIFICATION	3.45141330835911E-7	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999248097991147	WITHOUT_CLASSIFICATION	7.519020088534253E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999972974322772	WITHOUT_CLASSIFICATION	2.702567722843883E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999996548586692	WITHOUT_CLASSIFICATION	3.45141330835911E-7	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999974553199672	WITHOUT_CLASSIFICATION	2.5446800327984933E-6	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999771775525425	WITHOUT_CLASSIFICATION	2.282244745753506E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999972700492092	WITHOUT_CLASSIFICATION	2.7299507907613485E-6	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999982306272505	WITHOUT_CLASSIFICATION	1.7693727495069172E-5	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999981278893676	WITHOUT_CLASSIFICATION	1.8721106322955415E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999852085426826	WITHOUT_CLASSIFICATION	1.4791457317445746E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999069167922238	WITHOUT_CLASSIFICATION	9.308320777625218E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999949723069176	WITHOUT_CLASSIFICATION	5.027693082392579E-6	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999521206110528	WITHOUT_CLASSIFICATION	4.787938894716478E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999645291053886	WITHOUT_CLASSIFICATION	3.5470894611323265E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999996882143972	WITHOUT_CLASSIFICATION	3.117856027868902E-7	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999999201339959	WITHOUT_CLASSIFICATION	7.986600423719246E-8	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999191140131	WITHOUT_CLASSIFICATION	8.088598694560645E-8	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999926659493629	WITHOUT_CLASSIFICATION	7.334050637095625E-6	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999880551262403	WITHOUT_CLASSIFICATION	1.1944873759718393E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999955803095376	WITHOUT_CLASSIFICATION	4.419690462365487E-6	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999624269534297	WITHOUT_CLASSIFICATION	3.7573046570224755E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999624269534297	WITHOUT_CLASSIFICATION	3.7573046570224755E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999966940584037	WITHOUT_CLASSIFICATION	3.3059415962238806E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9996420713719225	WITHOUT_CLASSIFICATION	3.579286280775002E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999908948251905	WITHOUT_CLASSIFICATION	9.105174809501109E-5	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999145757997725	WITHOUT_CLASSIFICATION	8.542420022751527E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997099157670566	WITHOUT_CLASSIFICATION	2.900842329434883E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9994899523855106	WITHOUT_CLASSIFICATION	5.1004761448937E-4	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.999963731352087	WITHOUT_CLASSIFICATION	3.626864791307245E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999952871016079	WITHOUT_CLASSIFICATION	4.712898392138634E-6	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999985995316153	WITHOUT_CLASSIFICATION	1.400468384726099E-6	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9988010692157717	WITHOUT_CLASSIFICATION	0.0011989307842283762	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999501046673624	WITHOUT_CLASSIFICATION	4.9895332637554304E-5	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999567117808	WITHOUT_CLASSIFICATION	4.328821920133629E-7	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999520040322092	WITHOUT_CLASSIFICATION	4.799596779087852E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999928920175968	WITHOUT_CLASSIFICATION	7.107982403128755E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9996254537627086	WITHOUT_CLASSIFICATION	3.7454623729142817E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999994137506757	WITHOUT_CLASSIFICATION	5.8624932429274105E-6	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999888141649749	WITHOUT_CLASSIFICATION	1.1185835025095533E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999808744954549	WITHOUT_CLASSIFICATION	1.9125504545030627E-5	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9962232922081141	WITHOUT_CLASSIFICATION	0.003776707791885866	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999912148433733	WITHOUT_CLASSIFICATION	8.785156626658481E-6	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999965470389925	WITHOUT_CLASSIFICATION	3.452961007568699E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999956662553001	WITHOUT_CLASSIFICATION	4.33374469991666E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998218991528	WITHOUT_CLASSIFICATION	1.7810084722037255E-7	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997731523903	WITHOUT_CLASSIFICATION	2.268476097117914E-7	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999991688076237	WITHOUT_CLASSIFICATION	8.311923762042518E-7	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999994005024079	WITHOUT_CLASSIFICATION	5.994975921251565E-7	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999997967463751	WITHOUT_CLASSIFICATION	2.032536249603904E-7	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9997764132159133	WITHOUT_CLASSIFICATION	2.2358678408677726E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999738075435827	WITHOUT_CLASSIFICATION	2.6192456417339703E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999835437351826	WITHOUT_CLASSIFICATION	1.6456264817412143E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999914746799805	WITHOUT_CLASSIFICATION	8.525320019530678E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999821011872927	WITHOUT_CLASSIFICATION	1.7898812707304364E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999325934837867	WITHOUT_CLASSIFICATION	6.740651621327556E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999946248087536	WITHOUT_CLASSIFICATION	5.375191246331919E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999773127820217	WITHOUT_CLASSIFICATION	2.2687217978234222E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999967120807957	WITHOUT_CLASSIFICATION	3.2879192043008404E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999829284673215	WITHOUT_CLASSIFICATION	1.70715326785042E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999985886231237	WITHOUT_CLASSIFICATION	1.4113768763127155E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999955869250311	WITHOUT_CLASSIFICATION	4.4130749688928955E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999984008225913	WITHOUT_CLASSIFICATION	1.5991774086961427E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999554250347816	WITHOUT_CLASSIFICATION	4.45749652183306E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999987257821559	WITHOUT_CLASSIFICATION	1.2742178440807616E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999204606371865	WITHOUT_CLASSIFICATION	7.953936281347048E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999902489525971	WITHOUT_CLASSIFICATION	9.75104740286685E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9995264206072001	WITHOUT_CLASSIFICATION	4.7357939279996287E-4	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999995715177301	WITHOUT_CLASSIFICATION	4.284822699195617E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960749368298	WITHOUT_CLASSIFICATION	3.925063170098679E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968943025553	WITHOUT_CLASSIFICATION	3.1056974446570712E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916383426212	WITHOUT_CLASSIFICATION	8.361657378811778E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999858518151856	WITHOUT_CLASSIFICATION	1.4148184814413706E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999757044414012	WITHOUT_CLASSIFICATION	2.429555859894505E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999998338320403	WITHOUT_CLASSIFICATION	1.6616795969821125E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999997834425484	WITHOUT_CLASSIFICATION	2.165574515892177E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999919308956462	WITHOUT_CLASSIFICATION	8.069104353726535E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636474269739	WITHOUT_CLASSIFICATION	3.63525730261054E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999919308956462	WITHOUT_CLASSIFICATION	8.069104353726535E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999772241579521	WITHOUT_CLASSIFICATION	2.277584204794481E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999974471907688	WITHOUT_CLASSIFICATION	2.552809231208121E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999938222798219	WITHOUT_CLASSIFICATION	6.177720178003735E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999990882771832	WITHOUT_CLASSIFICATION	9.117228169197847E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999834275657568	WITHOUT_CLASSIFICATION	1.6572434243242103E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999916788869652	WITHOUT_CLASSIFICATION	8.321113034846095E-6	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992712654164	WITHOUT_CLASSIFICATION	7.287345835890121E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.999999581631318	WITHOUT_CLASSIFICATION	4.1836868211605245E-7	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9974751547750872	WITHOUT_CLASSIFICATION	0.0025248452249128097	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999866218770548	WITHOUT_CLASSIFICATION	1.3378122945325037E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.998947579123555	WITHOUT_CLASSIFICATION	0.0010524208764450046	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999901338072194	WITHOUT_CLASSIFICATION	9.866192780601637E-6	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999925370088231	WITHOUT_CLASSIFICATION	7.4629911768845325E-6	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.999991117118288	WITHOUT_CLASSIFICATION	8.882881711958027E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999999609841019	WITHOUT_CLASSIFICATION	3.9015898105179877E-7	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999986599672421	WITHOUT_CLASSIFICATION	1.3400327578700994E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999784996463835	WITHOUT_CLASSIFICATION	2.150035361650936E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999784996463835	WITHOUT_CLASSIFICATION	2.150035361650936E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999495115196991	WITHOUT_CLASSIFICATION	5.0488480300888974E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999910697961495	WITHOUT_CLASSIFICATION	8.930203850487666E-6	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999997801028994	WITHOUT_CLASSIFICATION	2.1989710077272258E-7	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9921064157244187	WITHOUT_CLASSIFICATION	0.007893584275581268	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998371197621	WITHOUT_CLASSIFICATION	1.62880237797285E-7	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9992297694706811	WITHOUT_CLASSIFICATION	7.702305293190145E-4	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999867822431183	WITHOUT_CLASSIFICATION	1.3217756881704775E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999631870326929	WITHOUT_CLASSIFICATION	3.6812967307100613E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999964146766236	WITHOUT_CLASSIFICATION	3.585323376415254E-6	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999998260067849	WITHOUT_CLASSIFICATION	1.739932151012322E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992474850613	WITHOUT_CLASSIFICATION	7.525149386036192E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999989420430427	WITHOUT_CLASSIFICATION	1.057956957258372E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999463104110148	WITHOUT_CLASSIFICATION	5.3689588985319115E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999993038735998	WITHOUT_CLASSIFICATION	6.961264002466765E-7	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999930078185929	WITHOUT_CLASSIFICATION	6.9921814069993865E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999531765331952	WITHOUT_CLASSIFICATION	4.6823466804736584E-5	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999764775103387	WITHOUT_CLASSIFICATION	2.3522489661195982E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9996591618874128	WITHOUT_CLASSIFICATION	3.408381125872873E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999481488521991	WITHOUT_CLASSIFICATION	5.185114780099385E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999228127322	WITHOUT_CLASSIFICATION	7.718726780069715E-8	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999965445367358	WITHOUT_CLASSIFICATION	3.455463264143389E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999591753646107	WITHOUT_CLASSIFICATION	4.0824635389338265E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999995992921928	WITHOUT_CLASSIFICATION	4.0070780724597845E-7	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9924886590155494	WITHOUT_CLASSIFICATION	0.007511340984450549	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999506690223113	WITHOUT_CLASSIFICATION	4.933097768858831E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999993896744082	WITHOUT_CLASSIFICATION	6.103255917074864E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999898495724189	WITHOUT_CLASSIFICATION	1.0150427581079007E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999880552598733	WITHOUT_CLASSIFICATION	1.194474012672034E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999882304250547	WITHOUT_CLASSIFICATION	1.176957494529525E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999989571689649	WITHOUT_CLASSIFICATION	1.0428310350582903E-6	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999961215190226	WITHOUT_CLASSIFICATION	3.878480977390524E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999950434838496	WITHOUT_CLASSIFICATION	4.956516150452704E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999761519638072	WITHOUT_CLASSIFICATION	2.3848036192805395E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999888300088461	WITHOUT_CLASSIFICATION	1.1169991153832374E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999154077354321	WITHOUT_CLASSIFICATION	8.459226456790454E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999956998749264	WITHOUT_CLASSIFICATION	4.300125073586989E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999970278803653	WITHOUT_CLASSIFICATION	2.972119634742847E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999957840206248	WITHOUT_CLASSIFICATION	4.215979375145757E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999998548317684	WITHOUT_CLASSIFICATION	1.4516823159764692E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999990153592834	WITHOUT_CLASSIFICATION	9.846407165893962E-7	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999997810476665	WITHOUT_CLASSIFICATION	2.1895233346202667E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986958188314	WITHOUT_CLASSIFICATION	1.3041811685644691E-6	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9998423015204205	WITHOUT_CLASSIFICATION	1.5769847957953375E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.998980776044443	WITHOUT_CLASSIFICATION	0.0010192239555570056	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999573661528	WITHOUT_CLASSIFICATION	4.263384725641862E-8	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999996058693124	WITHOUT_CLASSIFICATION	3.941306876082395E-6	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9989385899233637	WITHOUT_CLASSIFICATION	0.0010614100766362584	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999941273797635	WITHOUT_CLASSIFICATION	5.872620236564021E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999652283323289	WITHOUT_CLASSIFICATION	3.4771667671074694E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999852661273397	WITHOUT_CLASSIFICATION	1.4733872660166862E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995713062614	WITHOUT_CLASSIFICATION	4.286937385947988E-6	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999989614237057	WITHOUT_CLASSIFICATION	1.0385762942899748E-6	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999996803139	WITHOUT_CLASSIFICATION	3.1968609821487835E-9	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999832389454242	WITHOUT_CLASSIFICATION	1.6761054575848907E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9997763879358069	WITHOUT_CLASSIFICATION	2.2361206419314026E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999936115096383	WITHOUT_CLASSIFICATION	6.3884903617150084E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999936115096383	WITHOUT_CLASSIFICATION	6.3884903617150084E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999996066995308	WITHOUT_CLASSIFICATION	3.9330046916032985E-7	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999818855425887	WITHOUT_CLASSIFICATION	1.8114457411326694E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999992276425506	WITHOUT_CLASSIFICATION	7.723574494048073E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999651235821436	WITHOUT_CLASSIFICATION	3.487641785633722E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999968287045319	WITHOUT_CLASSIFICATION	3.1712954681030624E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999984168623966	WITHOUT_CLASSIFICATION	1.5831376033954044E-5	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999918990733958	WITHOUT_CLASSIFICATION	8.10092660412041E-6	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999813917079363	WITHOUT_CLASSIFICATION	1.8608292063695584E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999996639850521	WITHOUT_CLASSIFICATION	3.3601494791095397E-7	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998235286	WITHOUT_CLASSIFICATION	1.764714000064745E-7	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999803859371813	WITHOUT_CLASSIFICATION	1.9614062818670698E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999948819063702	WITHOUT_CLASSIFICATION	5.118093629823628E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998433345599662	WITHOUT_CLASSIFICATION	1.5666544003389442E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999930636341475	WITHOUT_CLASSIFICATION	6.936365852426961E-6	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999553503767236	WITHOUT_CLASSIFICATION	4.4649623276521166E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999727945674066	WITHOUT_CLASSIFICATION	2.720543259335884E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999990419491435	WITHOUT_CLASSIFICATION	9.58050856585926E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999863604071196	WITHOUT_CLASSIFICATION	1.3639592880414808E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999996464088573	WITHOUT_CLASSIFICATION	3.5359114276502157E-7	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999756934085223	WITHOUT_CLASSIFICATION	2.4306591477723917E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999962718507033	WITHOUT_CLASSIFICATION	3.7281492966919213E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999941195124843	WITHOUT_CLASSIFICATION	5.880487515787943E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999379894299177	WITHOUT_CLASSIFICATION	6.201057008232434E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999963713645225	WITHOUT_CLASSIFICATION	3.628635477585135E-6	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9994373151662094	WITHOUT_CLASSIFICATION	5.626848337906863E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9988019180289178	WITHOUT_CLASSIFICATION	0.0011980819710822063	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9957596322519553	WITHOUT_CLASSIFICATION	0.004240367748044746	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997841213709527	WITHOUT_CLASSIFICATION	2.1587862904723641E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999993633470663	WITHOUT_CLASSIFICATION	6.366529337068028E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999379894299177	WITHOUT_CLASSIFICATION	6.201057008232434E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999636671438211	WITHOUT_CLASSIFICATION	3.633285617883351E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999989702855	WITHOUT_CLASSIFICATION	1.0297145445948652E-9	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9997634847599488	WITHOUT_CLASSIFICATION	2.365152400511283E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999970959785379	WITHOUT_CLASSIFICATION	2.9040214620886566E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999877879726	WITHOUT_CLASSIFICATION	1.2212027275791725E-8	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999979663588237	WITHOUT_CLASSIFICATION	2.0336411764674404E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999819050346227	WITHOUT_CLASSIFICATION	1.8094965377219675E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999879315637	WITHOUT_CLASSIFICATION	1.2068436257128302E-8	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999358471350481	WITHOUT_CLASSIFICATION	6.415286495194295E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999970959785379	WITHOUT_CLASSIFICATION	2.9040214620886566E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999996253572602	WITHOUT_CLASSIFICATION	3.7464273980477607E-7	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999864583983	WITHOUT_CLASSIFICATION	1.354160177341272E-8	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999997656880275	WITHOUT_CLASSIFICATION	2.3431197254435059E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999322663474903	WITHOUT_CLASSIFICATION	6.77336525097069E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999962779709346	WITHOUT_CLASSIFICATION	3.722029065378656E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992474850613	WITHOUT_CLASSIFICATION	7.525149386036192E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999854027257	WITHOUT_CLASSIFICATION	1.4597274255003087E-8	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999996607214388	WITHOUT_CLASSIFICATION	3.392785612524982E-7	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999977980504366	WITHOUT_CLASSIFICATION	2.2019495634411267E-6	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999973312820284	WITHOUT_CLASSIFICATION	2.6687179716457627E-6	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999973761074659	WITHOUT_CLASSIFICATION	2.6238925341955835E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999974731842542	WITHOUT_CLASSIFICATION	2.526815745857445E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999821475954889	WITHOUT_CLASSIFICATION	1.7852404511069492E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999860569468152	WITHOUT_CLASSIFICATION	1.3943053184727515E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999301701860906	WITHOUT_CLASSIFICATION	6.982981390939728E-5	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999856199289489	WITHOUT_CLASSIFICATION	1.4380071051138917E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999209781781342	WITHOUT_CLASSIFICATION	7.902182186576342E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999803263613894	WITHOUT_CLASSIFICATION	1.9673638610484785E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999294484191419	WITHOUT_CLASSIFICATION	7.055158085806696E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999932955642623	WITHOUT_CLASSIFICATION	6.704435737755477E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999857841750699	WITHOUT_CLASSIFICATION	1.4215824930074845E-5	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999391459480473	WITHOUT_CLASSIFICATION	6.085405195261907E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999976043763028	WITHOUT_CLASSIFICATION	2.395623697133233E-6	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999997597536306	WITHOUT_CLASSIFICATION	2.40246369416285E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999992602851753	WITHOUT_CLASSIFICATION	7.397148248611657E-7	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999592394408089	WITHOUT_CLASSIFICATION	4.0760559191093445E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998083749659613	WITHOUT_CLASSIFICATION	1.9162503403875143E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999989911956828	WITHOUT_CLASSIFICATION	1.0088043172328865E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999975135770192	WITHOUT_CLASSIFICATION	2.486422980843176E-6	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999995996796838	WITHOUT_CLASSIFICATION	4.003203161201074E-7	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999532086545996	WITHOUT_CLASSIFICATION	4.679134540041143E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999260555099236	WITHOUT_CLASSIFICATION	7.394449007640694E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999976055266825	WITHOUT_CLASSIFICATION	2.394473317396656E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994783409982699	WITHOUT_CLASSIFICATION	5.216590017300807E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996631840187881	WITHOUT_CLASSIFICATION	3.368159812119161E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999971025975468	WITHOUT_CLASSIFICATION	2.8974024531456095E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999828728421589	WITHOUT_CLASSIFICATION	1.712715784109452E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999954627584601	WITHOUT_CLASSIFICATION	4.537241539901503E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999811748898682	WITHOUT_CLASSIFICATION	1.882511013187209E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999811748898682	WITHOUT_CLASSIFICATION	1.882511013187209E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999998587837398	WITHOUT_CLASSIFICATION	1.4121626020257323E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997960873330095	WITHOUT_CLASSIFICATION	2.0391266699045803E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999730581886491	WITHOUT_CLASSIFICATION	2.6941811350815877E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999893519212313	WITHOUT_CLASSIFICATION	1.064807876872943E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999585303765111	WITHOUT_CLASSIFICATION	4.146962348892187E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999731203293252	WITHOUT_CLASSIFICATION	2.6879670674920613E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999988422753503	WITHOUT_CLASSIFICATION	1.157724649743883E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999993750071487	WITHOUT_CLASSIFICATION	6.24992851293363E-6	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999975382410017	WITHOUT_CLASSIFICATION	2.4617589982542132E-6	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999802383002	WITHOUT_CLASSIFICATION	1.9761699802677983E-8	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999988391460941	WITHOUT_CLASSIFICATION	1.1608539059016144E-6	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999983291648384	WITHOUT_CLASSIFICATION	1.670835161629733E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999202239725985	WITHOUT_CLASSIFICATION	7.977602740141683E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999811748898682	WITHOUT_CLASSIFICATION	1.882511013187209E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999826285601382	WITHOUT_CLASSIFICATION	1.737143986184905E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999991091782519	WITHOUT_CLASSIFICATION	8.908217480879472E-7	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999990305781156	WITHOUT_CLASSIFICATION	9.694218843579718E-7	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999979454511969	WITHOUT_CLASSIFICATION	2.0545488031030014E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999996624457168	WITHOUT_CLASSIFICATION	3.375542831631919E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999937805252237	WITHOUT_CLASSIFICATION	6.2194747762433554E-6	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999199220658	WITHOUT_CLASSIFICATION	8.007793411107554E-8	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999929173243501	WITHOUT_CLASSIFICATION	7.0826756498575E-6	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999928061245735	WITHOUT_CLASSIFICATION	7.19387542644816E-6	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999726892227606	WITHOUT_CLASSIFICATION	2.7310777239424582E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999946903613147	WITHOUT_CLASSIFICATION	5.309638685285518E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994783409982699	WITHOUT_CLASSIFICATION	5.216590017300807E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999811748898682	WITHOUT_CLASSIFICATION	1.882511013187209E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999970018099681	WITHOUT_CLASSIFICATION	2.9981900318930077E-6	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999993687367975	WITHOUT_CLASSIFICATION	6.312632025068949E-7	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999971406751972	WITHOUT_CLASSIFICATION	2.859324802857317E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999985940195582	WITHOUT_CLASSIFICATION	1.4059804418111305E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999986359560173	WITHOUT_CLASSIFICATION	1.3640439826923297E-6	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999772130761685	WITHOUT_CLASSIFICATION	2.278692383150794E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874462164603	WITHOUT_CLASSIFICATION	1.2553783539809727E-5	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9998781088676438	WITHOUT_CLASSIFICATION	1.2189113235610915E-4	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999706419470863	WITHOUT_CLASSIFICATION	2.9358052913730613E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999585763736188	WITHOUT_CLASSIFICATION	4.1423626381198286E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999835662040109	WITHOUT_CLASSIFICATION	1.6433795989206755E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998070992501003	WITHOUT_CLASSIFICATION	1.9290074989964938E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999994305455031	WITHOUT_CLASSIFICATION	5.694544969203195E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999875025858717	WITHOUT_CLASSIFICATION	1.2497414128369478E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999772241579521	WITHOUT_CLASSIFICATION	2.277584204794481E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999986271835926	WITHOUT_CLASSIFICATION	1.3728164075199998E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999145741993	WITHOUT_CLASSIFICATION	8.542580072041054E-8	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999889110044394	WITHOUT_CLASSIFICATION	1.1088995560616521E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999992099046053	WITHOUT_CLASSIFICATION	7.900953946546662E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999319867123	WITHOUT_CLASSIFICATION	6.801328770997354E-7	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999701988705003	WITHOUT_CLASSIFICATION	2.9801129499665746E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999701988705003	WITHOUT_CLASSIFICATION	2.9801129499665746E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999999788490126	WITHOUT_CLASSIFICATION	2.115098738688983E-7	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999868411109837	WITHOUT_CLASSIFICATION	1.3158889016281984E-5	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999946477613191	WITHOUT_CLASSIFICATION	5.352238680944385E-6	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999810696698002	WITHOUT_CLASSIFICATION	1.8930330199894496E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999945441524438	WITHOUT_CLASSIFICATION	5.455847556105461E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999998292150255	WITHOUT_CLASSIFICATION	1.707849744913727E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999791536960374	WITHOUT_CLASSIFICATION	2.084630396250874E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9997353492895072	WITHOUT_CLASSIFICATION	2.6465071049270965E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9997353492895072	WITHOUT_CLASSIFICATION	2.6465071049270965E-4	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998443585393428	WITHOUT_CLASSIFICATION	1.556414606571674E-4	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9998761456311032	WITHOUT_CLASSIFICATION	1.2385436889678645E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999982139084403	WITHOUT_CLASSIFICATION	1.7860915595599221E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999956292917534	WITHOUT_CLASSIFICATION	4.370708246610048E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999956292917534	WITHOUT_CLASSIFICATION	4.370708246610048E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999956292917534	WITHOUT_CLASSIFICATION	4.370708246610048E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999224376850651	WITHOUT_CLASSIFICATION	7.756231493494645E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999988960233975	WITHOUT_CLASSIFICATION	1.1039766024499515E-6	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999760947501116	WITHOUT_CLASSIFICATION	2.3905249888337964E-5	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.988438729739798	WITHOUT_CLASSIFICATION	0.011561270260201907	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9997286046863921	WITHOUT_CLASSIFICATION	2.713953136078964E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999811748898682	WITHOUT_CLASSIFICATION	1.882511013187209E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999811748898682	WITHOUT_CLASSIFICATION	1.882511013187209E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999901349653815	WITHOUT_CLASSIFICATION	9.86503461850734E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999295795702	WITHOUT_CLASSIFICATION	7.042042992815143E-8	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999587667930343	WITHOUT_CLASSIFICATION	4.123320696572431E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999998764025819	WITHOUT_CLASSIFICATION	1.235974181047444E-6	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999900778051607	WITHOUT_CLASSIFICATION	9.922194839278732E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999558582288076	WITHOUT_CLASSIFICATION	4.4141771192329034E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999919272804628	WITHOUT_CLASSIFICATION	8.072719537196732E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999936506835099	WITHOUT_CLASSIFICATION	6.349316490139256E-6	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999985899946536	WITHOUT_CLASSIFICATION	1.4100053463832565E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999992651330074	WITHOUT_CLASSIFICATION	7.3486699251407E-7	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999904356013103	WITHOUT_CLASSIFICATION	9.564398689797136E-6	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998943283940377	WITHOUT_CLASSIFICATION	1.0567160596232605E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998943283940377	WITHOUT_CLASSIFICATION	1.0567160596232605E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999283270718309	WITHOUT_CLASSIFICATION	7.167292816915898E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999283270718309	WITHOUT_CLASSIFICATION	7.167292816915898E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999282425480835	WITHOUT_CLASSIFICATION	7.175745191646663E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998952096337229	WITHOUT_CLASSIFICATION	1.0479036627703392E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998952096337229	WITHOUT_CLASSIFICATION	1.0479036627703392E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998796381985451	WITHOUT_CLASSIFICATION	1.2036180145492316E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998514970741881	WITHOUT_CLASSIFICATION	1.4850292581194675E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988433172314193	WITHOUT_CLASSIFICATION	0.0011566827685806837	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999701988705003	WITHOUT_CLASSIFICATION	2.9801129499665746E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999802885923182	WITHOUT_CLASSIFICATION	1.9711407681803042E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998514970741881	WITHOUT_CLASSIFICATION	1.4850292581194675E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999628598579152	WITHOUT_CLASSIFICATION	3.714014208478112E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999035049505468	WITHOUT_CLASSIFICATION	9.649504945315772E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999782711734567	WITHOUT_CLASSIFICATION	2.1728826543185907E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999625870982715	WITHOUT_CLASSIFICATION	3.741290172845996E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999994215416315	WITHOUT_CLASSIFICATION	5.784583686648111E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999794976115972	WITHOUT_CLASSIFICATION	2.0502388402720164E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999994325969399	WITHOUT_CLASSIFICATION	5.674030601020936E-7	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999551433009392	WITHOUT_CLASSIFICATION	4.4856699060841486E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999963320961921	WITHOUT_CLASSIFICATION	3.6679038077905566E-6	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999440250799879	WITHOUT_CLASSIFICATION	5.597492001204543E-5	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999993475866844	WITHOUT_CLASSIFICATION	6.524133156369436E-7	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999994510456942	WITHOUT_CLASSIFICATION	5.489543058019331E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999892624828215	WITHOUT_CLASSIFICATION	1.0737517178596963E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999981780439164	WITHOUT_CLASSIFICATION	1.8219560835928698E-6	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9986156275327822	WITHOUT_CLASSIFICATION	0.0013843724672177218	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999980238148803	WITHOUT_CLASSIFICATION	1.9761851195909996E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999944895837578	WITHOUT_CLASSIFICATION	5.510416242202375E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999990598222686	WITHOUT_CLASSIFICATION	9.401777315099821E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999990598222686	WITHOUT_CLASSIFICATION	9.401777315099821E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999956094337855	WITHOUT_CLASSIFICATION	4.390566214447201E-6	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999891427620102	WITHOUT_CLASSIFICATION	1.0857237989780274E-5	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999937008917806	WITHOUT_CLASSIFICATION	6.2991082193805455E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999949455134421	WITHOUT_CLASSIFICATION	5.054486557801143E-6	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999995661804087	WITHOUT_CLASSIFICATION	4.3381959127916126E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999916101265348	WITHOUT_CLASSIFICATION	8.389873465228632E-6	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999861000909794	WITHOUT_CLASSIFICATION	1.3899909020518357E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999993428263761	WITHOUT_CLASSIFICATION	6.571736237733533E-7	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999978386779652	WITHOUT_CLASSIFICATION	2.1613220348252575E-6	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999546913141377	WITHOUT_CLASSIFICATION	4.530868586240462E-5	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999109524582158	WITHOUT_CLASSIFICATION	8.904754178416838E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998070992501003	WITHOUT_CLASSIFICATION	1.9290074989964938E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999985855550898	WITHOUT_CLASSIFICATION	1.4144449101100122E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999997843733278	WITHOUT_CLASSIFICATION	2.1562667224125185E-7	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999882157543467	WITHOUT_CLASSIFICATION	1.1784245653392065E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.99999703240044	WITHOUT_CLASSIFICATION	2.9675995599501558E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999133432006121	WITHOUT_CLASSIFICATION	8.665679938785328E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999133432006121	WITHOUT_CLASSIFICATION	8.665679938785328E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999666068590389	WITHOUT_CLASSIFICATION	3.339314096103E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999991644388663	WITHOUT_CLASSIFICATION	8.355611337024955E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999889175591972	WITHOUT_CLASSIFICATION	1.108244080285453E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999832928142861	WITHOUT_CLASSIFICATION	1.6707185713819216E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999753288099993	WITHOUT_CLASSIFICATION	2.467119000071455E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999993380200356	WITHOUT_CLASSIFICATION	6.6197996439382976E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993817424816366	WITHOUT_CLASSIFICATION	6.18257518363411E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999607456339809	WITHOUT_CLASSIFICATION	3.925436601915983E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999971219473813	WITHOUT_CLASSIFICATION	2.8780526186168283E-6	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999998581561292	WITHOUT_CLASSIFICATION	1.4184387068503664E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.99955590239035	WITHOUT_CLASSIFICATION	4.4409760965006764E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999607456339809	WITHOUT_CLASSIFICATION	3.925436601915983E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999575885523013	WITHOUT_CLASSIFICATION	4.2411447698726315E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9996147602457	WITHOUT_CLASSIFICATION	3.852397543000155E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999997715298696	WITHOUT_CLASSIFICATION	2.2847013032521322E-7	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.99998153435468	WITHOUT_CLASSIFICATION	1.8465645320111414E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999997894042326	WITHOUT_CLASSIFICATION	2.105957674218236E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999968808185834	WITHOUT_CLASSIFICATION	3.1191814166202586E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999931133585108	WITHOUT_CLASSIFICATION	6.8866414892785674E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998058424332	WITHOUT_CLASSIFICATION	1.9415756683683554E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999083266646	WITHOUT_CLASSIFICATION	9.16733354589582E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999996925702847	WITHOUT_CLASSIFICATION	3.074297152874278E-6	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999946885593114	WITHOUT_CLASSIFICATION	5.311440688596006E-6	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999954301712	WITHOUT_CLASSIFICATION	4.569828814653847E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999892358013873	WITHOUT_CLASSIFICATION	1.0764198612716663E-5	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999998077276118	WITHOUT_CLASSIFICATION	1.9227238819752915E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999969559783858	WITHOUT_CLASSIFICATION	3.04402161433078E-6	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999996922200762	WITHOUT_CLASSIFICATION	3.0777992383381453E-7	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999994433838206	WITHOUT_CLASSIFICATION	5.56616179333575E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999068430888896	WITHOUT_CLASSIFICATION	9.315691111041548E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999265270870741	WITHOUT_CLASSIFICATION	7.347291292593868E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999956167969265	WITHOUT_CLASSIFICATION	4.383203073448643E-6	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9991048238245841	WITHOUT_CLASSIFICATION	8.951761754159017E-4	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9996158002946169	WITHOUT_CLASSIFICATION	3.8419970538305264E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998102544416934	WITHOUT_CLASSIFICATION	1.8974555830669534E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999844208692112	WITHOUT_CLASSIFICATION	1.557913078873894E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999900425931395	WITHOUT_CLASSIFICATION	9.957406860402243E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999580808941472	WITHOUT_CLASSIFICATION	4.191910585283639E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999961256615505	WITHOUT_CLASSIFICATION	3.874338449565177E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999997609349772	WITHOUT_CLASSIFICATION	2.390650227929081E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999839453337677	WITHOUT_CLASSIFICATION	1.6054666232367708E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999315252979897	WITHOUT_CLASSIFICATION	6.84747020103265E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999847991902988	WITHOUT_CLASSIFICATION	1.5200809701126111E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999981670067609	WITHOUT_CLASSIFICATION	1.832993239078447E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999432374161376	WITHOUT_CLASSIFICATION	5.6762583862419996E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9998301760987347	WITHOUT_CLASSIFICATION	1.698239012652514E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.99999182807551	WITHOUT_CLASSIFICATION	8.171924490055776E-6	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999980734231103	WITHOUT_CLASSIFICATION	1.926576889624892E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999997636925906	WITHOUT_CLASSIFICATION	2.363074093883386E-6	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999958307983094	WITHOUT_CLASSIFICATION	4.169201690642002E-6	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999961165264234	WITHOUT_CLASSIFICATION	3.8834735765473595E-6	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998929304057879	WITHOUT_CLASSIFICATION	1.0706959421212677E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999999001001478	WITHOUT_CLASSIFICATION	9.98998521987387E-7	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999514245062	WITHOUT_CLASSIFICATION	4.857549381167065E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999990688652687	WITHOUT_CLASSIFICATION	9.311347313218587E-7	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999914836125001	WITHOUT_CLASSIFICATION	8.516387499920771E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999956876635947	WITHOUT_CLASSIFICATION	4.312336405202106E-6	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999961304265362	WITHOUT_CLASSIFICATION	3.869573463742807E-6	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9994969204211424	WITHOUT_CLASSIFICATION	5.030795788576085E-4	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999957395172399	WITHOUT_CLASSIFICATION	4.260482760123078E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999920381351949	WITHOUT_CLASSIFICATION	7.961864805166966E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999995024836175	WITHOUT_CLASSIFICATION	4.975163824951978E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987001814148	WITHOUT_CLASSIFICATION	1.2998185852119228E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999969147380882	WITHOUT_CLASSIFICATION	3.0852619117457608E-6	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999997114115738	WITHOUT_CLASSIFICATION	2.8858842609996754E-7	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999996505794848	WITHOUT_CLASSIFICATION	3.494205151886673E-7	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999969335577653	WITHOUT_CLASSIFICATION	3.0664422348182487E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999989718156032	WITHOUT_CLASSIFICATION	1.0281843967671066E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999885820001904	WITHOUT_CLASSIFICATION	1.1417999809607823E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999790056687	WITHOUT_CLASSIFICATION	2.0994331313095825E-8	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999858337518224	WITHOUT_CLASSIFICATION	1.4166248177539957E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999972833785361	WITHOUT_CLASSIFICATION	2.7166214638949725E-6	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999998378996816	WITHOUT_CLASSIFICATION	1.6210031840815186E-6	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999963802146788	WITHOUT_CLASSIFICATION	3.619785321109105E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999370879267063	WITHOUT_CLASSIFICATION	6.291207329363189E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999997613760414	WITHOUT_CLASSIFICATION	2.3862395858133397E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999840176694076	WITHOUT_CLASSIFICATION	1.5982330592424052E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999169307281858	WITHOUT_CLASSIFICATION	8.306927181423903E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987001814148	WITHOUT_CLASSIFICATION	1.2998185852119228E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999984612076186	WITHOUT_CLASSIFICATION	1.5387923814392228E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999961317136845	WITHOUT_CLASSIFICATION	3.868286315480213E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999927627632703	WITHOUT_CLASSIFICATION	7.237236729687018E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999977504936416	WITHOUT_CLASSIFICATION	2.2495063585150365E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999792590632258	WITHOUT_CLASSIFICATION	2.0740936774077198E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999934453189329	WITHOUT_CLASSIFICATION	6.55468106718494E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999971219473813	WITHOUT_CLASSIFICATION	2.8780526186168283E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999858579891542	WITHOUT_CLASSIFICATION	1.4142010845799596E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.99999182807551	WITHOUT_CLASSIFICATION	8.171924490055776E-6	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9993741149117956	WITHOUT_CLASSIFICATION	6.258850882043487E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999923739035862	WITHOUT_CLASSIFICATION	7.626096413750518E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.99999149788777	WITHOUT_CLASSIFICATION	8.502112230082945E-6	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999873614666378	WITHOUT_CLASSIFICATION	1.263853336213422E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999949488905142	WITHOUT_CLASSIFICATION	5.051109485723878E-6	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999960370803501	WITHOUT_CLASSIFICATION	3.9629196498379E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998408651395	WITHOUT_CLASSIFICATION	1.5913486056655305E-7	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999969383312575	WITHOUT_CLASSIFICATION	3.061668742497693E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999857416045572	WITHOUT_CLASSIFICATION	1.4258395442789136E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999732042898	WITHOUT_CLASSIFICATION	2.6795710137294797E-8	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999992417206461	WITHOUT_CLASSIFICATION	7.58279353804631E-7	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999943096308541	WITHOUT_CLASSIFICATION	5.690369145929982E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999458438494	WITHOUT_CLASSIFICATION	5.415615046795031E-8	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999458438494	WITHOUT_CLASSIFICATION	5.415615046795031E-8	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999794004406	WITHOUT_CLASSIFICATION	2.059955940465073E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999959864377111	WITHOUT_CLASSIFICATION	4.013562288862139E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999765741747	WITHOUT_CLASSIFICATION	2.342582529770683E-8	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999983179669051	WITHOUT_CLASSIFICATION	1.6820330949928778E-6	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999859394176972	WITHOUT_CLASSIFICATION	1.406058230286345E-5	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999994357738995	WITHOUT_CLASSIFICATION	5.642261004182801E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994001504838	WITHOUT_CLASSIFICATION	5.998495161658158E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999958852251517	WITHOUT_CLASSIFICATION	4.114774848310568E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999909676166	WITHOUT_CLASSIFICATION	9.032383394027427E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999969748723362	WITHOUT_CLASSIFICATION	3.025127663850708E-6	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999128235128076	WITHOUT_CLASSIFICATION	8.71764871924005E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998930900192192	WITHOUT_CLASSIFICATION	1.069099807807767E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999648896510627	WITHOUT_CLASSIFICATION	3.5110348937280045E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999994505566	WITHOUT_CLASSIFICATION	5.494433731111248E-10	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999871636354822	WITHOUT_CLASSIFICATION	1.2836364517826228E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999965007863707	WITHOUT_CLASSIFICATION	3.4992136292522562E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999819711388664	WITHOUT_CLASSIFICATION	1.8028861133575137E-5	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999844341251397	WITHOUT_CLASSIFICATION	1.5565874860284244E-5	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999994259722998	WITHOUT_CLASSIFICATION	5.740277001629851E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999997615451518	WITHOUT_CLASSIFICATION	2.3845484819109363E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999828289213659	WITHOUT_CLASSIFICATION	1.7171078634045617E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999705482561949	WITHOUT_CLASSIFICATION	2.9451743805166184E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999962892398607	WITHOUT_CLASSIFICATION	3.710760139389593E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9996865766075181	WITHOUT_CLASSIFICATION	3.134233924817957E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999235065298796	WITHOUT_CLASSIFICATION	7.649347012038795E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922252083939	WITHOUT_CLASSIFICATION	7.7747916060894E-6	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999854611770236	WITHOUT_CLASSIFICATION	1.4538822976385889E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999914905794983	WITHOUT_CLASSIFICATION	8.509420501693119E-6	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999984718439221	WITHOUT_CLASSIFICATION	1.5281560779004045E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999296921851706	WITHOUT_CLASSIFICATION	7.030781482950692E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9863299760486989	WITHOUT_CLASSIFICATION	0.013670023951301203	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997973366224994	WITHOUT_CLASSIFICATION	2.0266337750058763E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999913687167167	WITHOUT_CLASSIFICATION	8.631283283325887E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999760607735627	WITHOUT_CLASSIFICATION	2.3939226437358493E-5	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999667778515539	WITHOUT_CLASSIFICATION	3.322214844610495E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999978043982915	WITHOUT_CLASSIFICATION	2.195601708490178E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999654477033219	WITHOUT_CLASSIFICATION	3.455229667812328E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999869379559126	WITHOUT_CLASSIFICATION	1.3062044087400578E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9994390560001774	WITHOUT_CLASSIFICATION	5.609439998226053E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999926977429487	WITHOUT_CLASSIFICATION	7.3022570512289925E-6	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998896258421655	WITHOUT_CLASSIFICATION	1.103741578345946E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998742187396	WITHOUT_CLASSIFICATION	1.2578126047360844E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999933932455143	WITHOUT_CLASSIFICATION	6.606754485700529E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999834284950955	WITHOUT_CLASSIFICATION	1.65715049045429E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999934182895291	WITHOUT_CLASSIFICATION	6.581710470760133E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999571413041893	WITHOUT_CLASSIFICATION	4.285869581069671E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.5884598432614915	WITHOUT_CLASSIFICATION	0.41154015673850847	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999636407161361	WITHOUT_CLASSIFICATION	3.635928386387556E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.999997943314842	WITHOUT_CLASSIFICATION	2.056685157871988E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999917530713263	WITHOUT_CLASSIFICATION	8.246928673802504E-6	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653449207329	WITHOUT_CLASSIFICATION	3.4655079267172286E-5	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9998957826258893	WITHOUT_CLASSIFICATION	1.0421737411070544E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999994458897898	WITHOUT_CLASSIFICATION	5.541102100508311E-7	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999997649149862	WITHOUT_CLASSIFICATION	2.350850138071717E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999971090214212	WITHOUT_CLASSIFICATION	2.890978578801037E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999940698228801	WITHOUT_CLASSIFICATION	5.930177120031512E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999955674515457	WITHOUT_CLASSIFICATION	4.432548454299782E-6	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999536160877971	WITHOUT_CLASSIFICATION	4.6383912202942556E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999926984296154	WITHOUT_CLASSIFICATION	7.301570384608111E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999984906358018	WITHOUT_CLASSIFICATION	1.5093641981403875E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999976539813661	WITHOUT_CLASSIFICATION	2.3460186339288777E-6	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999950129440818	WITHOUT_CLASSIFICATION	4.987055918235494E-6	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999805833814357	WITHOUT_CLASSIFICATION	1.9416618564327155E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.99999913878756	WITHOUT_CLASSIFICATION	8.61212439917382E-7	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9998782729301904	WITHOUT_CLASSIFICATION	1.2172706980962205E-4	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999994383712334	WITHOUT_CLASSIFICATION	5.616287666584302E-7	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999965188601742	WITHOUT_CLASSIFICATION	3.481139825858171E-6	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999928271161992	WITHOUT_CLASSIFICATION	7.17288380079441E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999931933368907	WITHOUT_CLASSIFICATION	6.806663109276238E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999928675013363	WITHOUT_CLASSIFICATION	7.132498663709539E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999931933368907	WITHOUT_CLASSIFICATION	6.806663109276238E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999976338692995	WITHOUT_CLASSIFICATION	2.3661307005758846E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999934928556583	WITHOUT_CLASSIFICATION	6.507144341754084E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999680932674078	WITHOUT_CLASSIFICATION	3.1906732592244446E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999996652318497	WITHOUT_CLASSIFICATION	3.3476815030525708E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999893302014943	WITHOUT_CLASSIFICATION	1.0669798505763156E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999262597156232	WITHOUT_CLASSIFICATION	7.374028437675323E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999980169997708	WITHOUT_CLASSIFICATION	1.983000229177059E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999733272555438	WITHOUT_CLASSIFICATION	2.6672744456282117E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999996916273806	WITHOUT_CLASSIFICATION	3.083726194215425E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999984037942516	WITHOUT_CLASSIFICATION	1.5962057482472955E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999926184468356	WITHOUT_CLASSIFICATION	7.381553164400678E-6	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999531795698576	WITHOUT_CLASSIFICATION	4.682043014239294E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999992580772475	WITHOUT_CLASSIFICATION	7.419227525177279E-7	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999874234136585	WITHOUT_CLASSIFICATION	1.2576586341578022E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999994104223563	WITHOUT_CLASSIFICATION	5.8957764370257205E-6	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999997978472803	WITHOUT_CLASSIFICATION	2.0215271969713494E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999938460268106	WITHOUT_CLASSIFICATION	6.153973189372424E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999528744236	WITHOUT_CLASSIFICATION	4.71255763864279E-7	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999966787155014	WITHOUT_CLASSIFICATION	3.3212844985355338E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999921360243824	WITHOUT_CLASSIFICATION	7.863975617611308E-6	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999790227308891	WITHOUT_CLASSIFICATION	2.0977269110798633E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999870597804447	WITHOUT_CLASSIFICATION	1.2940219555276444E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999988715205912	WITHOUT_CLASSIFICATION	1.1284794088527101E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9996041638709806	WITHOUT_CLASSIFICATION	3.9583612901934533E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999954938039357	WITHOUT_CLASSIFICATION	4.506196064243135E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999685842924999	WITHOUT_CLASSIFICATION	3.141570750015041E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999964137712171	WITHOUT_CLASSIFICATION	3.586228783019283E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999961080624168	WITHOUT_CLASSIFICATION	3.891937583187423E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999985397730294	WITHOUT_CLASSIFICATION	1.4602269705820967E-6	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999985141936275	WITHOUT_CLASSIFICATION	1.4858063725612521E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999985936006873	WITHOUT_CLASSIFICATION	1.4063993126487729E-6	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999769477952501	WITHOUT_CLASSIFICATION	2.305220474987212E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999974519458	WITHOUT_CLASSIFICATION	2.548054220039657E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999968226779655	WITHOUT_CLASSIFICATION	3.1773220344419294E-6	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999992373797302	WITHOUT_CLASSIFICATION	7.626202697126693E-7	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999908667780126	WITHOUT_CLASSIFICATION	9.13322198732661E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999980405496702	WITHOUT_CLASSIFICATION	1.9594503297602885E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999990448262257	WITHOUT_CLASSIFICATION	9.551737741944431E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999602314466676	WITHOUT_CLASSIFICATION	3.9768553332399366E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997490680516	WITHOUT_CLASSIFICATION	2.509319483956154E-7	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999820427723547	WITHOUT_CLASSIFICATION	1.795722764530509E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.999934599739013	WITHOUT_CLASSIFICATION	6.540026098703014E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997846972050348	WITHOUT_CLASSIFICATION	2.1530279496522405E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999685842924999	WITHOUT_CLASSIFICATION	3.141570750015041E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998286646364823	WITHOUT_CLASSIFICATION	1.7133536351767066E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999754828876428	WITHOUT_CLASSIFICATION	2.451711235718614E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999989149242431	WITHOUT_CLASSIFICATION	1.0850757569139159E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999998135355425	WITHOUT_CLASSIFICATION	1.8646445748782722E-6	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999995347603591	WITHOUT_CLASSIFICATION	4.652396409443083E-7	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999640545357705	WITHOUT_CLASSIFICATION	3.5945464229377205E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999916783656465	WITHOUT_CLASSIFICATION	8.321634353504348E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999996755357632	WITHOUT_CLASSIFICATION	3.24464236829878E-7	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999977857759382	WITHOUT_CLASSIFICATION	2.2142240617099888E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9997517962598582	WITHOUT_CLASSIFICATION	2.4820374014181937E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999905326239467	WITHOUT_CLASSIFICATION	9.46737605333758E-6	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999954198708841	WITHOUT_CLASSIFICATION	4.580129115865041E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999872856416618	WITHOUT_CLASSIFICATION	1.271435833815275E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999980750058165	WITHOUT_CLASSIFICATION	1.9249941834943628E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999948568672016	WITHOUT_CLASSIFICATION	5.143132798455656E-6	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998152415707	WITHOUT_CLASSIFICATION	1.8475842941141564E-7	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999883049108684	WITHOUT_CLASSIFICATION	1.1695089131460278E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999978687477628	WITHOUT_CLASSIFICATION	2.131252237209495E-6	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999998794952705	WITHOUT_CLASSIFICATION	1.2050472949299712E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998286646364823	WITHOUT_CLASSIFICATION	1.7133536351767066E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999742169835298	WITHOUT_CLASSIFICATION	2.5783016470080142E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999439759365765	WITHOUT_CLASSIFICATION	5.6024063423565476E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999930386489282	WITHOUT_CLASSIFICATION	6.961351071786374E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998551286351056	WITHOUT_CLASSIFICATION	1.448713648944609E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999971995388697	WITHOUT_CLASSIFICATION	2.800461130296237E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997559341074939	WITHOUT_CLASSIFICATION	2.440658925060817E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997559341074939	WITHOUT_CLASSIFICATION	2.440658925060817E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999971598194881	WITHOUT_CLASSIFICATION	2.840180511925837E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997559341074939	WITHOUT_CLASSIFICATION	2.440658925060817E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9997559341074939	WITHOUT_CLASSIFICATION	2.440658925060817E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9997735986572189	WITHOUT_CLASSIFICATION	2.264013427811354E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999997328720353	WITHOUT_CLASSIFICATION	2.67127964757782E-7	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999919130594297	WITHOUT_CLASSIFICATION	8.086940570334092E-6	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999894282151894	WITHOUT_CLASSIFICATION	1.0571784810521525E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999969467538008	WITHOUT_CLASSIFICATION	3.0532461992061727E-6	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999975141614111	WITHOUT_CLASSIFICATION	2.4858385888088735E-6	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996706191193195	WITHOUT_CLASSIFICATION	3.293808806804313E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999948214996555	WITHOUT_CLASSIFICATION	5.17850034451609E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999099537879449	WITHOUT_CLASSIFICATION	9.00462120550698E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999976065679236	WITHOUT_CLASSIFICATION	2.3934320764817776E-6	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999913190204568	WITHOUT_CLASSIFICATION	8.680979543172957E-6	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999868289963052	WITHOUT_CLASSIFICATION	1.3171003694751277E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999993556961376	WITHOUT_CLASSIFICATION	6.443038624169051E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999986327279659	WITHOUT_CLASSIFICATION	1.3672720341610754E-6	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999953320100332	WITHOUT_CLASSIFICATION	4.6679899668862525E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999701358180696	WITHOUT_CLASSIFICATION	2.9864181930414914E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999998338320403	WITHOUT_CLASSIFICATION	1.6616795969821125E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997749214887028	WITHOUT_CLASSIFICATION	2.2507851129710226E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999994391690203	WITHOUT_CLASSIFICATION	5.608309796996744E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999991166743146	WITHOUT_CLASSIFICATION	8.833256854008641E-7	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999844033346363	WITHOUT_CLASSIFICATION	1.5596665363702202E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.999974951664088	WITHOUT_CLASSIFICATION	2.5048335911965857E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999998338320403	WITHOUT_CLASSIFICATION	1.6616795969821125E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999964137712171	WITHOUT_CLASSIFICATION	3.586228783019283E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999636503446966	WITHOUT_CLASSIFICATION	3.6349655303343775E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999954112604618	WITHOUT_CLASSIFICATION	4.588739538277356E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984729817791	WITHOUT_CLASSIFICATION	1.5270182208911926E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999924002224988	WITHOUT_CLASSIFICATION	7.599777501074545E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999892810953176	WITHOUT_CLASSIFICATION	1.071890468233749E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999995686058103	WITHOUT_CLASSIFICATION	4.3139418973508865E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999366044580822	WITHOUT_CLASSIFICATION	6.339554191782969E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999969530582744	WITHOUT_CLASSIFICATION	3.0469417255113805E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9997941403516004	WITHOUT_CLASSIFICATION	2.0585964839961552E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999789594569529	WITHOUT_CLASSIFICATION	2.1040543047063238E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999993373655771	WITHOUT_CLASSIFICATION	6.626344228893545E-6	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999974940258808	WITHOUT_CLASSIFICATION	2.5059741191884077E-6	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999882329774781	WITHOUT_CLASSIFICATION	1.1767022521850102E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9994637153336305	WITHOUT_CLASSIFICATION	5.362846663694064E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999889555971644	WITHOUT_CLASSIFICATION	1.1044402835630712E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999961119739801	WITHOUT_CLASSIFICATION	3.888026019911105E-6	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999737455569957	WITHOUT_CLASSIFICATION	2.6254443004289275E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999985515691988	WITHOUT_CLASSIFICATION	1.4484308012456347E-6	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999949080717683	WITHOUT_CLASSIFICATION	5.091928231707561E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999505691365229	WITHOUT_CLASSIFICATION	4.9430863477199606E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9997103821342428	WITHOUT_CLASSIFICATION	2.896178657571258E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999990728520175	WITHOUT_CLASSIFICATION	9.27147982426365E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999969530582744	WITHOUT_CLASSIFICATION	3.0469417255113805E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999980387434555	WITHOUT_CLASSIFICATION	1.961256544462191E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999926471345512	WITHOUT_CLASSIFICATION	7.352865448842106E-6	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9995023960834981	WITHOUT_CLASSIFICATION	4.976039165018156E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999980511507697	WITHOUT_CLASSIFICATION	1.9488492303062087E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968228998826	WITHOUT_CLASSIFICATION	3.177100117412259E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999986662854468	WITHOUT_CLASSIFICATION	1.3337145532024536E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999963137150806	WITHOUT_CLASSIFICATION	3.686284919453354E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999908748138274	WITHOUT_CLASSIFICATION	9.125186172486219E-6	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999881615687546	WITHOUT_CLASSIFICATION	1.1838431245414411E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999814583388245	WITHOUT_CLASSIFICATION	1.8541661175491243E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999667338624886	WITHOUT_CLASSIFICATION	3.3266137511313754E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999910429060795	WITHOUT_CLASSIFICATION	8.957093920445257E-6	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999981738421893	WITHOUT_CLASSIFICATION	1.826157810742759E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999973619464984	WITHOUT_CLASSIFICATION	2.63805350168948E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999841544899918	WITHOUT_CLASSIFICATION	1.584551000818998E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997890614844153	WITHOUT_CLASSIFICATION	2.1093851558478372E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999842569290087	WITHOUT_CLASSIFICATION	1.574307099133235E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999667338624886	WITHOUT_CLASSIFICATION	3.3266137511313754E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999979345225213	WITHOUT_CLASSIFICATION	2.0654774787965652E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999515680478458	WITHOUT_CLASSIFICATION	4.843195215419196E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999954438967386	WITHOUT_CLASSIFICATION	4.556103261416881E-6	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999930899952109	WITHOUT_CLASSIFICATION	6.910004789180431E-6	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999953461031731	WITHOUT_CLASSIFICATION	4.65389682694571E-6	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999950917111818	WITHOUT_CLASSIFICATION	4.908288818157844E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999841544899918	WITHOUT_CLASSIFICATION	1.584551000818998E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999598045612	WITHOUT_CLASSIFICATION	4.019543880059109E-7	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981313392718	WITHOUT_CLASSIFICATION	1.8686607280484986E-6	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996684897	WITHOUT_CLASSIFICATION	3.315102999922562E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963551488502	WITHOUT_CLASSIFICATION	3.6448511497213944E-6	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998718229552096	WITHOUT_CLASSIFICATION	1.2817704479048213E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999242067553425	WITHOUT_CLASSIFICATION	7.579324465743661E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999961127288485	WITHOUT_CLASSIFICATION	3.887271151473676E-6	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999961127288485	WITHOUT_CLASSIFICATION	3.887271151473676E-6	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999945468900229	WITHOUT_CLASSIFICATION	5.453109977144503E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999479602971608	WITHOUT_CLASSIFICATION	5.2039702839201885E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999974731230558	WITHOUT_CLASSIFICATION	2.5268769442173454E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999993275163936	WITHOUT_CLASSIFICATION	6.724836064587356E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9922925320515933	WITHOUT_CLASSIFICATION	0.007707467948406719	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905791074705	WITHOUT_CLASSIFICATION	9.42089252948732E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791943202994	WITHOUT_CLASSIFICATION	2.080567970061764E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998398498795	WITHOUT_CLASSIFICATION	1.601501204974172E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999419204049	WITHOUT_CLASSIFICATION	5.807959508069024E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966223762292	WITHOUT_CLASSIFICATION	3.3776237708842746E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999905791074705	WITHOUT_CLASSIFICATION	9.42089252948732E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791943202994	WITHOUT_CLASSIFICATION	2.080567970061764E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998398498795	WITHOUT_CLASSIFICATION	1.601501204974172E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999956353596255	WITHOUT_CLASSIFICATION	4.3646403743934085E-6	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9997262305061583	WITHOUT_CLASSIFICATION	2.737694938417831E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999993198475692	WITHOUT_CLASSIFICATION	6.801524308278432E-7	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999971164844487	WITHOUT_CLASSIFICATION	2.8835155513057677E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999989822688707	WITHOUT_CLASSIFICATION	1.017731129261485E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999792944681369	WITHOUT_CLASSIFICATION	2.0705531863164017E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997146956385784	WITHOUT_CLASSIFICATION	2.853043614215617E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9995034961230855	WITHOUT_CLASSIFICATION	4.965038769145469E-4	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.999822346341961	WITHOUT_CLASSIFICATION	1.7765365803907177E-4	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999586217316763	WITHOUT_CLASSIFICATION	4.137826832365559E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999985833361463	WITHOUT_CLASSIFICATION	1.416663853693856E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999722168521963	WITHOUT_CLASSIFICATION	2.7783147803709696E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9995948398471294	WITHOUT_CLASSIFICATION	4.05160152870617E-4	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998002317273	WITHOUT_CLASSIFICATION	1.9976827280715638E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999983871783288	WITHOUT_CLASSIFICATION	1.6128216712618598E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999716628020373	WITHOUT_CLASSIFICATION	2.8337197962747496E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999925134699904	WITHOUT_CLASSIFICATION	7.486530009532806E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999136852279864	WITHOUT_CLASSIFICATION	8.631477201359353E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999972699811162	WITHOUT_CLASSIFICATION	2.7300188838577963E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996705839919093	WITHOUT_CLASSIFICATION	3.294160080906305E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999994737455598	WITHOUT_CLASSIFICATION	5.262544402226357E-7	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999966843154997	WITHOUT_CLASSIFICATION	3.3156845003127525E-6	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.984505787450031	WITHOUT_CLASSIFICATION	0.015494212549968871	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999929805994472	WITHOUT_CLASSIFICATION	7.019400552829384E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999966094122	WITHOUT_CLASSIFICATION	3.390587879946212E-9	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998778206866692	WITHOUT_CLASSIFICATION	1.221793133308249E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969106691587	WITHOUT_CLASSIFICATION	3.0893308413634607E-6	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723339387795	WITHOUT_CLASSIFICATION	2.7666061220471464E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999932961251004	WITHOUT_CLASSIFICATION	6.703874899625529E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898846970656	WITHOUT_CLASSIFICATION	1.011530293434668E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999774006232931	WITHOUT_CLASSIFICATION	2.25993767068687E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999962486062396	WITHOUT_CLASSIFICATION	3.751393760356074E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999962486062396	WITHOUT_CLASSIFICATION	3.751393760356074E-6	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999989923246744	WITHOUT_CLASSIFICATION	1.007675325643635E-6	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999994532974277	WITHOUT_CLASSIFICATION	5.467025722892717E-7	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999956304626981	WITHOUT_CLASSIFICATION	4.369537301881599E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998070992501003	WITHOUT_CLASSIFICATION	1.9290074989964938E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9996784286691036	WITHOUT_CLASSIFICATION	3.2157133089637604E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999998827173439	WITHOUT_CLASSIFICATION	1.1728265614141819E-7	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.999972732357118	WITHOUT_CLASSIFICATION	2.7267642881981518E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999951461646074	WITHOUT_CLASSIFICATION	4.853835392575619E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999808008900111	WITHOUT_CLASSIFICATION	1.919910998902821E-5	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859836248567	WITHOUT_CLASSIFICATION	1.4016375143307407E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874621250094	WITHOUT_CLASSIFICATION	1.2537874990616529E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668479961633	WITHOUT_CLASSIFICATION	3.315200383671135E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975333761546	WITHOUT_CLASSIFICATION	2.4666238454025088E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785993411644	WITHOUT_CLASSIFICATION	2.1400658835637957E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999764812662887	WITHOUT_CLASSIFICATION	2.3518733711401684E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850123716137	WITHOUT_CLASSIFICATION	1.498762838626804E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999647700145684	WITHOUT_CLASSIFICATION	3.522998543167332E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884488062982	WITHOUT_CLASSIFICATION	1.1551193701843207E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898463012307	WITHOUT_CLASSIFICATION	1.0153698769357248E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941911378765	WITHOUT_CLASSIFICATION	5.8088621235161975E-6	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999845732981809	WITHOUT_CLASSIFICATION	1.542670181908921E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999210290953988	WITHOUT_CLASSIFICATION	7.897090460111785E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998584795480152	WITHOUT_CLASSIFICATION	1.415204519848796E-4	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999923947399084	WITHOUT_CLASSIFICATION	7.605260091638484E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999998838831651	WITHOUT_CLASSIFICATION	1.161168349104984E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999847970513975	WITHOUT_CLASSIFICATION	1.5202948602552589E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999995260330597	WITHOUT_CLASSIFICATION	4.739669403279891E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9988053715950771	WITHOUT_CLASSIFICATION	0.0011946284049229154	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998584795480152	WITHOUT_CLASSIFICATION	1.415204519848796E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998584795480152	WITHOUT_CLASSIFICATION	1.415204519848796E-4	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999970727321434	WITHOUT_CLASSIFICATION	2.9272678565307955E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999971321704152	WITHOUT_CLASSIFICATION	2.867829584911069E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998778838819	WITHOUT_CLASSIFICATION	1.2211611804255495E-7	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999774358434972	WITHOUT_CLASSIFICATION	2.2564156502797486E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999892624828215	WITHOUT_CLASSIFICATION	1.0737517178596963E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9996705839919093	WITHOUT_CLASSIFICATION	3.294160080906305E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999994613455996	WITHOUT_CLASSIFICATION	5.386544004542662E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999073786827339	WITHOUT_CLASSIFICATION	9.262131726601579E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999964064629608	WITHOUT_CLASSIFICATION	3.593537039178475E-6	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701298035376	WITHOUT_CLASSIFICATION	2.98701964624587E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999999104696793	WITHOUT_CLASSIFICATION	8.953032069519067E-7	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876929024981	WITHOUT_CLASSIFICATION	1.2307097501785738E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999436070231298	WITHOUT_CLASSIFICATION	5.6392976870105144E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999436070231298	WITHOUT_CLASSIFICATION	5.6392976870105144E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999592979342304	WITHOUT_CLASSIFICATION	4.070206576955802E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999592979342304	WITHOUT_CLASSIFICATION	4.070206576955802E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694165508336	WITHOUT_CLASSIFICATION	3.058344916645853E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996858840121	WITHOUT_CLASSIFICATION	3.14115987889075E-6	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999913254077006	WITHOUT_CLASSIFICATION	8.674592299398517E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998607575893396	WITHOUT_CLASSIFICATION	1.3924241066051046E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999870943286489	WITHOUT_CLASSIFICATION	1.2905671351199223E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999025704827729	WITHOUT_CLASSIFICATION	9.742951722719376E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897973856551	WITHOUT_CLASSIFICATION	1.020261434481007E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975739858944	WITHOUT_CLASSIFICATION	2.426014105726261E-6	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998931846905639	WITHOUT_CLASSIFICATION	1.0681530943605733E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999996697960761	WITHOUT_CLASSIFICATION	3.3020392396124483E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999998630626037	WITHOUT_CLASSIFICATION	1.3693739630127488E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999839021055488	WITHOUT_CLASSIFICATION	1.609789445121292E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998737678110429	WITHOUT_CLASSIFICATION	1.2623218895703694E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999946070283394	WITHOUT_CLASSIFICATION	5.392971660625019E-6	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999898897357955	WITHOUT_CLASSIFICATION	1.0110264204529651E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999842384108786	WITHOUT_CLASSIFICATION	1.5761589121435873E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999842384108786	WITHOUT_CLASSIFICATION	1.5761589121435873E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999999880064668	WITHOUT_CLASSIFICATION	1.199353320254856E-7	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9995464735487198	WITHOUT_CLASSIFICATION	4.535264512802417E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999993966819191	WITHOUT_CLASSIFICATION	6.033180809236376E-7	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999818857164153	WITHOUT_CLASSIFICATION	1.811428358466947E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910307542056	WITHOUT_CLASSIFICATION	8.969245794327203E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999737738512444	WITHOUT_CLASSIFICATION	2.6226148755640234E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999974559847492	WITHOUT_CLASSIFICATION	2.544015250908312E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841056400377	WITHOUT_CLASSIFICATION	1.5894359962302418E-5	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9988699492535503	WITHOUT_CLASSIFICATION	0.0011300507464497632	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999996342709785	WITHOUT_CLASSIFICATION	3.6572902153174317E-7	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999676663716	WITHOUT_CLASSIFICATION	3.233362847131918E-8	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9985738780473646	WITHOUT_CLASSIFICATION	0.0014261219526353207	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999567403453012	WITHOUT_CLASSIFICATION	4.3259654698789045E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999988763684317	WITHOUT_CLASSIFICATION	1.1236315683241738E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996984346086372	WITHOUT_CLASSIFICATION	3.0156539136283136E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999971198710925	WITHOUT_CLASSIFICATION	2.880128907496481E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999954982683613	WITHOUT_CLASSIFICATION	4.50173163868213E-6	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999962592449668	WITHOUT_CLASSIFICATION	3.740755033246102E-6	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999995117870014	WITHOUT_CLASSIFICATION	4.8821299859083734E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999952168116909	WITHOUT_CLASSIFICATION	4.783188309074155E-6	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999649723861	WITHOUT_CLASSIFICATION	3.5027613810789916E-8	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999999133219	WITHOUT_CLASSIFICATION	8.667810389024523E-10	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999560325751	WITHOUT_CLASSIFICATION	4.396742501622834E-8	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9997152568898876	WITHOUT_CLASSIFICATION	2.8474311011231803E-4	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999980655855415	WITHOUT_CLASSIFICATION	1.9344144585446877E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999705746644908	WITHOUT_CLASSIFICATION	2.9425335509178532E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999996687874333	WITHOUT_CLASSIFICATION	3.3121256671396794E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999996727542189	WITHOUT_CLASSIFICATION	3.2724578108067175E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999902482207	WITHOUT_CLASSIFICATION	9.751779309545056E-9	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999946248087536	WITHOUT_CLASSIFICATION	5.375191246331919E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999989712099476	WITHOUT_CLASSIFICATION	1.0287900523297725E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999986507866063	WITHOUT_CLASSIFICATION	1.3492133936232944E-6	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999977980047782	WITHOUT_CLASSIFICATION	2.201995221742924E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9997198211065199	WITHOUT_CLASSIFICATION	2.801788934800534E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999880753552016	WITHOUT_CLASSIFICATION	1.192464479832006E-5	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999998075856965	WITHOUT_CLASSIFICATION	1.9241430353324764E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999990419491435	WITHOUT_CLASSIFICATION	9.58050856585926E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998347000019	WITHOUT_CLASSIFICATION	1.6529999810001032E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999980539727226	WITHOUT_CLASSIFICATION	1.9460272774340123E-6	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9988134160245404	WITHOUT_CLASSIFICATION	0.0011865839754596414	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999978650776442	WITHOUT_CLASSIFICATION	2.1349223558527152E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999895209935954	WITHOUT_CLASSIFICATION	1.0479006404664294E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999981085705678	WITHOUT_CLASSIFICATION	1.891429432197563E-6	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999991543924737	WITHOUT_CLASSIFICATION	8.456075262667448E-7	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999995328609729	WITHOUT_CLASSIFICATION	4.671390271079156E-6	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999160608443209	WITHOUT_CLASSIFICATION	8.393915567914549E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999929013083418	WITHOUT_CLASSIFICATION	7.098691658131284E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999784996463835	WITHOUT_CLASSIFICATION	2.150035361650936E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998859685502728	WITHOUT_CLASSIFICATION	1.1403144972722732E-4	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999980093278406	WITHOUT_CLASSIFICATION	1.990672159373185E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999992986271674	WITHOUT_CLASSIFICATION	7.013728325211627E-7	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999021172319096	WITHOUT_CLASSIFICATION	9.788276809044313E-5	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999995667474895	WITHOUT_CLASSIFICATION	4.332525105000539E-6	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999973272579759	WITHOUT_CLASSIFICATION	2.672742024156538E-6	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999606420530536	WITHOUT_CLASSIFICATION	3.935794694635358E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999839244820524	WITHOUT_CLASSIFICATION	1.60755179476631E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999412690060141	WITHOUT_CLASSIFICATION	5.873099398589441E-5	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.999993593279242	WITHOUT_CLASSIFICATION	6.4067207581191345E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999654257880836	WITHOUT_CLASSIFICATION	3.457421191655183E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997971745764012	WITHOUT_CLASSIFICATION	2.0282542359881812E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999998805064993	WITHOUT_CLASSIFICATION	1.1949350070274924E-6	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999988288789227	WITHOUT_CLASSIFICATION	1.1711210773527287E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998473336212	WITHOUT_CLASSIFICATION	1.526663786257614E-7	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999938813231039	WITHOUT_CLASSIFICATION	6.118676896219932E-6	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999977835182114	WITHOUT_CLASSIFICATION	2.2164817885867375E-6	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.999989773406789	WITHOUT_CLASSIFICATION	1.0226593211050082E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999799225718164	WITHOUT_CLASSIFICATION	2.0077428183564005E-5	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999885958631584	WITHOUT_CLASSIFICATION	1.1404136841696118E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999379894299177	WITHOUT_CLASSIFICATION	6.201057008232434E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999379894299177	WITHOUT_CLASSIFICATION	6.201057008232434E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999930088271042	WITHOUT_CLASSIFICATION	6.991172895764075E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999928609883013	WITHOUT_CLASSIFICATION	7.139011698690321E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997683152852183	WITHOUT_CLASSIFICATION	2.3168471478183023E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999587184340604	WITHOUT_CLASSIFICATION	4.128156593967421E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999995560303104	WITHOUT_CLASSIFICATION	4.4396968960712167E-7	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999976545266025	WITHOUT_CLASSIFICATION	2.3454733974960883E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999996962151895	WITHOUT_CLASSIFICATION	3.03784810565168E-7	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999965924950822	WITHOUT_CLASSIFICATION	3.4075049177206433E-6	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999368561871269	WITHOUT_CLASSIFICATION	6.314381287309842E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999991021269944	WITHOUT_CLASSIFICATION	8.978730056206809E-7	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999995313237381	WITHOUT_CLASSIFICATION	4.6867626195064416E-7	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999964052067292	WITHOUT_CLASSIFICATION	3.5947932709125E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999922456788592	WITHOUT_CLASSIFICATION	7.754321140672283E-6	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999977000070668	WITHOUT_CLASSIFICATION	2.2999929331958972E-6	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997600875906428	WITHOUT_CLASSIFICATION	2.3991240935714093E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9995773750748909	WITHOUT_CLASSIFICATION	4.2262492510913125E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999901428496014	WITHOUT_CLASSIFICATION	9.857150398497332E-6	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999676543275985	WITHOUT_CLASSIFICATION	3.234567240146887E-5	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9990367383254867	WITHOUT_CLASSIFICATION	9.632616745133657E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999930126059685	WITHOUT_CLASSIFICATION	6.98739403149924E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.999995868340335	WITHOUT_CLASSIFICATION	4.1316596649493155E-6	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999996362310165	WITHOUT_CLASSIFICATION	3.637689835031331E-6	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999700830320503	WITHOUT_CLASSIFICATION	2.991696794967619E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999978702083006	WITHOUT_CLASSIFICATION	2.1297916993287034E-6	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999990781432745	WITHOUT_CLASSIFICATION	9.218567254870939E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999448471357483	WITHOUT_CLASSIFICATION	5.515286425166396E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999554401474952	WITHOUT_CLASSIFICATION	4.455985250473754E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999906728109729	WITHOUT_CLASSIFICATION	9.327189027190135E-6	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999786767489437	WITHOUT_CLASSIFICATION	2.1323251056404136E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999988615479243	WITHOUT_CLASSIFICATION	1.1384520757027594E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998236182462	WITHOUT_CLASSIFICATION	1.7638175370128473E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999901708937599	WITHOUT_CLASSIFICATION	9.82910624002161E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999993248528833	WITHOUT_CLASSIFICATION	6.751471166967127E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999896455011255	WITHOUT_CLASSIFICATION	1.0354498874626987E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999984784739532	WITHOUT_CLASSIFICATION	1.5215260468733301E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999984784739532	WITHOUT_CLASSIFICATION	1.5215260468733301E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999614055579306	WITHOUT_CLASSIFICATION	3.859444206935165E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999581252895635	WITHOUT_CLASSIFICATION	4.1874710436452254E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999945833277778	WITHOUT_CLASSIFICATION	5.4166722221986584E-6	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999844803504955	WITHOUT_CLASSIFICATION	1.5519649504556327E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999845246066552	WITHOUT_CLASSIFICATION	1.5475393344779996E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999970876424094	WITHOUT_CLASSIFICATION	2.9123575906206604E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999911327661486	WITHOUT_CLASSIFICATION	8.867233851450743E-6	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999806298877	WITHOUT_CLASSIFICATION	1.937011224843028E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999539385839056	WITHOUT_CLASSIFICATION	4.606141609444121E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999959354066356	WITHOUT_CLASSIFICATION	4.0645933644801E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999401045558	WITHOUT_CLASSIFICATION	5.989544423677181E-8	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999998506378291	WITHOUT_CLASSIFICATION	1.493621707856076E-7	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999992658056466	WITHOUT_CLASSIFICATION	7.341943534875129E-7	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999991971407561	WITHOUT_CLASSIFICATION	8.028592439613857E-7	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999971323232327	WITHOUT_CLASSIFICATION	2.867676767358609E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999994356962706	WITHOUT_CLASSIFICATION	5.643037294058468E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999994356962706	WITHOUT_CLASSIFICATION	5.643037294058468E-6	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999969879574275	WITHOUT_CLASSIFICATION	3.0120425724864197E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999997396826708	WITHOUT_CLASSIFICATION	2.603173291931218E-7	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999420606099905	WITHOUT_CLASSIFICATION	5.793939000957532E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999968883530349	WITHOUT_CLASSIFICATION	3.1116469650062867E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997841213709527	WITHOUT_CLASSIFICATION	2.1587862904723641E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999936235741586	WITHOUT_CLASSIFICATION	6.376425841534134E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999910000756583	WITHOUT_CLASSIFICATION	8.999924341600521E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999910000756583	WITHOUT_CLASSIFICATION	8.999924341600521E-6	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999960848874148	WITHOUT_CLASSIFICATION	3.9151125851445735E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999611060585	WITHOUT_CLASSIFICATION	3.889394148108518E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999286227296422	WITHOUT_CLASSIFICATION	7.137727035775661E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999993523526955	WITHOUT_CLASSIFICATION	6.476473044974251E-7	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999779637709849	WITHOUT_CLASSIFICATION	2.2036229015158254E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999322663474903	WITHOUT_CLASSIFICATION	6.77336525097069E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999992163629126	WITHOUT_CLASSIFICATION	7.836370873830537E-7	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9988433172314193	WITHOUT_CLASSIFICATION	0.0011566827685806837	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999811748898682	WITHOUT_CLASSIFICATION	1.882511013187209E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999533267993558	WITHOUT_CLASSIFICATION	4.6673200644259405E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999990305781156	WITHOUT_CLASSIFICATION	9.694218843579718E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999985940195582	WITHOUT_CLASSIFICATION	1.4059804418111305E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999891931628805	WITHOUT_CLASSIFICATION	1.0806837119501469E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999282425480835	WITHOUT_CLASSIFICATION	7.175745191646663E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999984718439221	WITHOUT_CLASSIFICATION	1.5281560779004045E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999941431580115	WITHOUT_CLASSIFICATION	5.856841988556264E-6	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999845234049886	WITHOUT_CLASSIFICATION	1.5476595011379698E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999961236296226	WITHOUT_CLASSIFICATION	3.8763703773211655E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9977017678392817	WITHOUT_CLASSIFICATION	0.0022982321607183044	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999734037135021	WITHOUT_CLASSIFICATION	2.659628649797009E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999994087270731	WITHOUT_CLASSIFICATION	5.912729268922047E-6	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998796381985451	WITHOUT_CLASSIFICATION	1.2036180145492316E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999828624546878	WITHOUT_CLASSIFICATION	1.7137545312199556E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.99972240918539	WITHOUT_CLASSIFICATION	2.77590814609935E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999813252640033	WITHOUT_CLASSIFICATION	1.867473599670295E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999993539545961	WITHOUT_CLASSIFICATION	6.460454038982989E-6	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999998170655887	WITHOUT_CLASSIFICATION	1.8293441128535073E-7	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999578026333711	WITHOUT_CLASSIFICATION	4.2197366628869966E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999951559444417	WITHOUT_CLASSIFICATION	4.8440555583433624E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999133432006121	WITHOUT_CLASSIFICATION	8.665679938785328E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9994326789240758	WITHOUT_CLASSIFICATION	5.673210759241738E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999864716607599	WITHOUT_CLASSIFICATION	1.3528339240106524E-5	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999108792091083	WITHOUT_CLASSIFICATION	8.912079089172266E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9993874016435608	WITHOUT_CLASSIFICATION	6.12598356439169E-4	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999836707607141	WITHOUT_CLASSIFICATION	1.6329239285892535E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999926132215192	WITHOUT_CLASSIFICATION	7.386778480731833E-6	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999848397467964	WITHOUT_CLASSIFICATION	1.516025320367449E-5	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999889942243924	WITHOUT_CLASSIFICATION	1.1005775607600735E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999978866974765	WITHOUT_CLASSIFICATION	2.113302523507894E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999961525514035	WITHOUT_CLASSIFICATION	3.847448596454166E-6	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999997920947887	WITHOUT_CLASSIFICATION	2.0790521131377584E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.999986528713864	WITHOUT_CLASSIFICATION	1.3471286136134454E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998542805631386	WITHOUT_CLASSIFICATION	1.4571943686128032E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999991384307152	WITHOUT_CLASSIFICATION	8.615692848619581E-7	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999982609753069	WITHOUT_CLASSIFICATION	1.7390246931701756E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999151009776239	WITHOUT_CLASSIFICATION	8.489902237603572E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999978866974765	WITHOUT_CLASSIFICATION	2.113302523507894E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999961525514035	WITHOUT_CLASSIFICATION	3.847448596454166E-6	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999925996787604	WITHOUT_CLASSIFICATION	7.400321239655739E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999717628208682	WITHOUT_CLASSIFICATION	2.823717913184855E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999985649504441	WITHOUT_CLASSIFICATION	1.435049555880021E-6	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9998973271718328	WITHOUT_CLASSIFICATION	1.0267282816726022E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999823632020641	WITHOUT_CLASSIFICATION	1.7636797935846373E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999617244218	WITHOUT_CLASSIFICATION	3.827557818617059E-8	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9992097480398446	WITHOUT_CLASSIFICATION	7.902519601553075E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999904080040154	WITHOUT_CLASSIFICATION	9.591995984613206E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9997362265405834	WITHOUT_CLASSIFICATION	2.637734594166464E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7473709387117191	IMPLEMENTATION	0.2526290612882809	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999428775803959	WITHOUT_CLASSIFICATION	5.712241960402672E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7473709387117191	IMPLEMENTATION	0.2526290612882809	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999981074130644	WITHOUT_CLASSIFICATION	1.8925869355688995E-6	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999956252567226	WITHOUT_CLASSIFICATION	4.3747432774174195E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999994766311507	WITHOUT_CLASSIFICATION	5.233688493725693E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979206556576	WITHOUT_CLASSIFICATION	2.0793443423080454E-6	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999901126829726	WITHOUT_CLASSIFICATION	9.887317027407034E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999554892906034	WITHOUT_CLASSIFICATION	4.4510709396618385E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999554892906034	WITHOUT_CLASSIFICATION	4.4510709396618385E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999973906678714	WITHOUT_CLASSIFICATION	2.6093321285691966E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999992936111664	WITHOUT_CLASSIFICATION	7.063888336303674E-7	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999958987572317	WITHOUT_CLASSIFICATION	4.10124276825442E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999631355995152	WITHOUT_CLASSIFICATION	3.686440048488729E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998579952001155	WITHOUT_CLASSIFICATION	1.4200479988447E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999973610728177	WITHOUT_CLASSIFICATION	2.638927182419571E-6	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999971428931739	WITHOUT_CLASSIFICATION	2.857106826202953E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999994030894466	WITHOUT_CLASSIFICATION	5.969105534527079E-7	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999901746835052	WITHOUT_CLASSIFICATION	9.825316494932714E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999078644136221	WITHOUT_CLASSIFICATION	9.21355863779453E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999525459793844	WITHOUT_CLASSIFICATION	4.745402061548749E-5	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9985821099919417	WITHOUT_CLASSIFICATION	0.00141789000805836	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999231487075937	WITHOUT_CLASSIFICATION	7.6851292406205E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999959179289665	WITHOUT_CLASSIFICATION	4.082071033599564E-6	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999978398942793	WITHOUT_CLASSIFICATION	2.1601057207195E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999997305883073	WITHOUT_CLASSIFICATION	2.6941169272305276E-7	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999975652116088	WITHOUT_CLASSIFICATION	2.4347883912393235E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999931054897525	WITHOUT_CLASSIFICATION	6.8945102474865995E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998048287329	WITHOUT_CLASSIFICATION	1.9517126722002357E-7	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998325753827627	WITHOUT_CLASSIFICATION	1.6742461723725217E-4	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999713427111502	WITHOUT_CLASSIFICATION	2.865728884987763E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998654902556543	WITHOUT_CLASSIFICATION	1.3450974434571505E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999955049502762	WITHOUT_CLASSIFICATION	4.495049723756863E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999941273389644	WITHOUT_CLASSIFICATION	5.872661035526633E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999864456360766	WITHOUT_CLASSIFICATION	1.3554363923347894E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999959955334154	WITHOUT_CLASSIFICATION	4.004466584592664E-5	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999465661974032	WITHOUT_CLASSIFICATION	5.343380259680127E-5	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999859215958313	WITHOUT_CLASSIFICATION	1.4078404168601229E-5	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9976839285509063	WITHOUT_CLASSIFICATION	0.0023160714490938396	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9883197718712645	WITHOUT_CLASSIFICATION	0.01168022812873544	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9100774044621116	WITHOUT_CLASSIFICATION	0.0899225955378884	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999741684595987	WITHOUT_CLASSIFICATION	2.5831540401267772E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999971428931739	WITHOUT_CLASSIFICATION	2.857106826202953E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.999996438166841	WITHOUT_CLASSIFICATION	3.561833158944426E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999873400462516	WITHOUT_CLASSIFICATION	1.2659953748454157E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6458227654988806	IMPLEMENTATION	0.3541772345011195	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999865792152075	WITHOUT_CLASSIFICATION	1.3420784792559237E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999899437728057	WITHOUT_CLASSIFICATION	1.0056227194235437E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999916966684345	WITHOUT_CLASSIFICATION	8.303331565496945E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999631355995152	WITHOUT_CLASSIFICATION	3.686440048488729E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999631355995152	WITHOUT_CLASSIFICATION	3.686440048488729E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999872861253764	WITHOUT_CLASSIFICATION	1.2713874623608744E-4	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999847904705784	WITHOUT_CLASSIFICATION	1.520952942150425E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999711668478363	WITHOUT_CLASSIFICATION	2.8833152163792668E-5	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999773136846264	WITHOUT_CLASSIFICATION	2.2686315373562164E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998440364026003	WITHOUT_CLASSIFICATION	1.5596359739975397E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999932642246054	WITHOUT_CLASSIFICATION	6.735775394593282E-6	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999993622224562	WITHOUT_CLASSIFICATION	6.377775436858556E-7	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9983629956925743	WITHOUT_CLASSIFICATION	0.0016370043074257464	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999349003044501	WITHOUT_CLASSIFICATION	6.50996955498973E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970858342143	WITHOUT_CLASSIFICATION	2.9141657857007972E-6	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999977233159975	WITHOUT_CLASSIFICATION	2.276684002416991E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999668912211868	WITHOUT_CLASSIFICATION	3.3108778813186775E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999871525906873	WITHOUT_CLASSIFICATION	1.284740931272588E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970858342143	WITHOUT_CLASSIFICATION	2.9141657857007972E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962499886289	WITHOUT_CLASSIFICATION	3.750011371117122E-6	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998851298851792	WITHOUT_CLASSIFICATION	1.148701148207312E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999528811889365	WITHOUT_CLASSIFICATION	4.7118811063382334E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9842327940231943	IMPLEMENTATION	0.015767205976805698	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999668912211868	WITHOUT_CLASSIFICATION	3.3108778813186775E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999899142666588	WITHOUT_CLASSIFICATION	1.0085733341169443E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999760620756981	WITHOUT_CLASSIFICATION	2.3937924301945313E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999736079465654	WITHOUT_CLASSIFICATION	2.6392053434673374E-5	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999037319329	WITHOUT_CLASSIFICATION	9.62680671476842E-8	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999055971700561	WITHOUT_CLASSIFICATION	9.44028299438027E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999963019164142	WITHOUT_CLASSIFICATION	3.698083585789969E-6	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999994578542782	WITHOUT_CLASSIFICATION	5.421457218116548E-7	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999993036326694	WITHOUT_CLASSIFICATION	6.963673305986284E-6	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999964887603031	WITHOUT_CLASSIFICATION	3.5112396969946695E-6	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999993934759756	WITHOUT_CLASSIFICATION	6.0652402441470126E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999649593000672	WITHOUT_CLASSIFICATION	3.504069993277117E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999979631833642	WITHOUT_CLASSIFICATION	2.036816635787345E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970858342143	WITHOUT_CLASSIFICATION	2.9141657857007972E-6	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999899142666588	WITHOUT_CLASSIFICATION	1.0085733341169443E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999736079465654	WITHOUT_CLASSIFICATION	2.6392053434673374E-5	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999834259671565	WITHOUT_CLASSIFICATION	1.6574032843492846E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999642378584572	WITHOUT_CLASSIFICATION	3.5762141542746335E-5	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999994724654606	WITHOUT_CLASSIFICATION	5.275345393170692E-7	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999668912211868	WITHOUT_CLASSIFICATION	3.3108778813186775E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999994635902963	WITHOUT_CLASSIFICATION	5.364097035406352E-7	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999941296385155	WITHOUT_CLASSIFICATION	5.870361484556504E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998987894211269	WITHOUT_CLASSIFICATION	1.0121057887311061E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999989075018761	WITHOUT_CLASSIFICATION	1.0924981239092667E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999993036326694	WITHOUT_CLASSIFICATION	6.963673305986284E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999962499886289	WITHOUT_CLASSIFICATION	3.750011371117122E-6	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999830095533395	WITHOUT_CLASSIFICATION	1.699044666045889E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999991887614206	WITHOUT_CLASSIFICATION	8.112385793806431E-7	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999968124447816	WITHOUT_CLASSIFICATION	3.187555218499617E-6	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999837478858852	WITHOUT_CLASSIFICATION	1.6252114114768297E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999965567039575	WITHOUT_CLASSIFICATION	3.44329604242892E-6	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999981384728941	WITHOUT_CLASSIFICATION	1.861527105885058E-5	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999970853604138	WITHOUT_CLASSIFICATION	2.9146395862364508E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979206556576	WITHOUT_CLASSIFICATION	2.0793443423080454E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993259706214	WITHOUT_CLASSIFICATION	6.740293786974355E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996557911813	WITHOUT_CLASSIFICATION	3.4420881865166685E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9959817854731189	WITHOUT_CLASSIFICATION	0.004018214526881101	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999076514821467	WITHOUT_CLASSIFICATION	9.234851785338869E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998444702422346	WITHOUT_CLASSIFICATION	1.5552975776537557E-4	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999988317527227	WITHOUT_CLASSIFICATION	1.1682472772390149E-6	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999975830567311	WITHOUT_CLASSIFICATION	2.4169432689018368E-6	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999998059561625	WITHOUT_CLASSIFICATION	1.9404383750278518E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999989075018761	WITHOUT_CLASSIFICATION	1.0924981239092667E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.99997307727061	WITHOUT_CLASSIFICATION	2.6922729389963295E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999833346607225	WITHOUT_CLASSIFICATION	1.6665339277486324E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999571614465212	WITHOUT_CLASSIFICATION	4.2838553478782824E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999988821478754	WITHOUT_CLASSIFICATION	1.1178521245944048E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9997033422303822	WITHOUT_CLASSIFICATION	2.9665776961778625E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999279884179982	WITHOUT_CLASSIFICATION	7.201158200176521E-5	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999786988707297	WITHOUT_CLASSIFICATION	2.1301129270399176E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9990856559067494	WITHOUT_CLASSIFICATION	9.143440932505542E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999630352698	WITHOUT_CLASSIFICATION	3.696473017027215E-8	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999637503198693	WITHOUT_CLASSIFICATION	3.6249680130686566E-4	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999984536171265	WITHOUT_CLASSIFICATION	1.5463828735058476E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999936151139425	WITHOUT_CLASSIFICATION	6.384886057638985E-6	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9989194002931019	WITHOUT_CLASSIFICATION	0.0010805997068980562	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999871826746294	WITHOUT_CLASSIFICATION	1.2817325370731911E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999800060973804	WITHOUT_CLASSIFICATION	1.9993902619606997E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999997573085797	WITHOUT_CLASSIFICATION	2.426914202912713E-6	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999885357003715	WITHOUT_CLASSIFICATION	1.146429962851493E-5	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999955468078544	WITHOUT_CLASSIFICATION	4.4531921455905045E-6	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998800468014281	WITHOUT_CLASSIFICATION	1.1995319857186537E-4	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999973023748502	WITHOUT_CLASSIFICATION	2.6976251497645932E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999934802833567	WITHOUT_CLASSIFICATION	6.519716643288632E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999974508256352	WITHOUT_CLASSIFICATION	2.549174364699655E-6	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999986275657616	WITHOUT_CLASSIFICATION	1.3724342383839379E-6	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999992401062534	WITHOUT_CLASSIFICATION	7.598937467110749E-7	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999987414926909	WITHOUT_CLASSIFICATION	1.2585073091465588E-6	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9595564178865068	IMPLEMENTATION	0.040443582113493116	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9996257753832716	WITHOUT_CLASSIFICATION	3.7422461672843496E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999977864547956	WITHOUT_CLASSIFICATION	2.2135452044319145E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999993066255635	WITHOUT_CLASSIFICATION	6.933744365509702E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8504670367169308	WITHOUT_CLASSIFICATION	0.14953296328306923	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999809299452	WITHOUT_CLASSIFICATION	1.9070054801607696E-7	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999996925702847	WITHOUT_CLASSIFICATION	3.074297152874278E-6	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999936676492951	WITHOUT_CLASSIFICATION	6.332350704929226E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999858579891542	WITHOUT_CLASSIFICATION	1.4142010845799596E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999985286746322	WITHOUT_CLASSIFICATION	1.4713253677513513E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999698187390802	WITHOUT_CLASSIFICATION	3.018126091973458E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999921877533886	WITHOUT_CLASSIFICATION	7.812246611376157E-6	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999997761173336	WITHOUT_CLASSIFICATION	2.2388266641046494E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999698187390802	WITHOUT_CLASSIFICATION	3.018126091973458E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999985286746322	WITHOUT_CLASSIFICATION	1.4713253677513513E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999921877533886	WITHOUT_CLASSIFICATION	7.812246611376157E-6	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999946033600339	WITHOUT_CLASSIFICATION	5.396639966180811E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9996958529913278	WITHOUT_CLASSIFICATION	3.041470086721735E-4	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999853850844	WITHOUT_CLASSIFICATION	1.4614915667973691E-8	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999999264326136	WITHOUT_CLASSIFICATION	7.35673864064307E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999998900603938	WITHOUT_CLASSIFICATION	1.0993960619999792E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7248599057429909	IMPLEMENTATION	0.27514009425700914	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9997233190459074	WITHOUT_CLASSIFICATION	2.7668095409251237E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999394726041672	WITHOUT_CLASSIFICATION	6.0527395832919324E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999993408697164	WITHOUT_CLASSIFICATION	6.591302836623554E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999987537731408	WITHOUT_CLASSIFICATION	1.2462268592038608E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999990291948849	WITHOUT_CLASSIFICATION	9.708051150669587E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998891122233783	WITHOUT_CLASSIFICATION	1.1088777662162931E-4	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999549454498762	WITHOUT_CLASSIFICATION	4.505455012375657E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999979867926856	WITHOUT_CLASSIFICATION	2.0132073145233238E-6	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998432677493	WITHOUT_CLASSIFICATION	1.5673225071276034E-7	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999676606350398	WITHOUT_CLASSIFICATION	3.233936496011379E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999980452598454	WITHOUT_CLASSIFICATION	1.9547401546054535E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999989642347817	WITHOUT_CLASSIFICATION	1.0357652182309507E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999064207499	WITHOUT_CLASSIFICATION	9.357925006353071E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999961310822819	WITHOUT_CLASSIFICATION	3.8689177180461265E-6	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9923267158372122	WITHOUT_CLASSIFICATION	0.007673284162787819	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999946549363287	WITHOUT_CLASSIFICATION	5.345063671326661E-6	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999954724824526	WITHOUT_CLASSIFICATION	4.527517547398713E-6	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999991718853533	WITHOUT_CLASSIFICATION	8.281146467227739E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999979406456335	WITHOUT_CLASSIFICATION	2.059354366456421E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999979406456335	WITHOUT_CLASSIFICATION	2.059354366456421E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999993531207301	WITHOUT_CLASSIFICATION	6.468792698839422E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999993531207301	WITHOUT_CLASSIFICATION	6.468792698839422E-7	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9998584199520972	WITHOUT_CLASSIFICATION	1.4158004790282747E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999980452598454	WITHOUT_CLASSIFICATION	1.9547401546054535E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997991798319285	WITHOUT_CLASSIFICATION	2.0082016807162757E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999102726585063	WITHOUT_CLASSIFICATION	8.972734149369652E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999922307741489	WITHOUT_CLASSIFICATION	7.769225851089716E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999922307741489	WITHOUT_CLASSIFICATION	7.769225851089716E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999994340604242	WITHOUT_CLASSIFICATION	5.659395756871028E-7	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999829574565198	WITHOUT_CLASSIFICATION	1.704254348016433E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999996205965119	WITHOUT_CLASSIFICATION	3.7940348797807823E-7	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999977527882773	WITHOUT_CLASSIFICATION	2.2472117226869562E-6	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999898343067163	WITHOUT_CLASSIFICATION	1.0165693283755449E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999567627444755	WITHOUT_CLASSIFICATION	4.323725552447336E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999937264878923	WITHOUT_CLASSIFICATION	6.273512107723693E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999881291222688	WITHOUT_CLASSIFICATION	1.1870877731325496E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999878876649199	WITHOUT_CLASSIFICATION	1.2112335080017881E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999931875164096	WITHOUT_CLASSIFICATION	6.812483590398881E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.999996688293742	WITHOUT_CLASSIFICATION	3.3117062580855436E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999049824637227	WITHOUT_CLASSIFICATION	9.5017536277215E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999866820204806	WITHOUT_CLASSIFICATION	1.331797951944479E-5	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999974537334742	WITHOUT_CLASSIFICATION	2.546266525785021E-6	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9838834263247654	WITHOUT_CLASSIFICATION	0.01611657367523446	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999997897707257	WITHOUT_CLASSIFICATION	2.1022927435322426E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930461493658	WITHOUT_CLASSIFICATION	6.953850634252888E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999668236030934	WITHOUT_CLASSIFICATION	3.317639690667645E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999725949674291	WITHOUT_CLASSIFICATION	2.740503257084483E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999775952220774	WITHOUT_CLASSIFICATION	2.2404777922571277E-5	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999680799838626	WITHOUT_CLASSIFICATION	3.192001613739007E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999994953391207	WITHOUT_CLASSIFICATION	5.046608792609223E-7	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999935606110465	WITHOUT_CLASSIFICATION	6.439388953405898E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999987759167724	WITHOUT_CLASSIFICATION	1.2240832276149481E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998070992501003	WITHOUT_CLASSIFICATION	1.9290074989964938E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998464752338	WITHOUT_CLASSIFICATION	1.5352476626398954E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999936151139425	WITHOUT_CLASSIFICATION	6.384886057638985E-6	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998757717741734	WITHOUT_CLASSIFICATION	1.2422822582650413E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999979150082274	WITHOUT_CLASSIFICATION	2.084991772615919E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796357733894	WITHOUT_CLASSIFICATION	2.036422661055559E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840475354366	WITHOUT_CLASSIFICATION	1.595246456339351E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999855441588756	WITHOUT_CLASSIFICATION	1.4455841124373163E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999855441588756	WITHOUT_CLASSIFICATION	1.4455841124373163E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998098472984	WITHOUT_CLASSIFICATION	1.901527016284294E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999970381974049	WITHOUT_CLASSIFICATION	2.9618025951600036E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999894882275763	WITHOUT_CLASSIFICATION	1.0511772423687324E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999894882275763	WITHOUT_CLASSIFICATION	1.0511772423687324E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999885820001904	WITHOUT_CLASSIFICATION	1.1417999809607823E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9990195720363648	WITHOUT_CLASSIFICATION	9.8042796363518E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999803315986993	WITHOUT_CLASSIFICATION	1.9668401300828006E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999892624828215	WITHOUT_CLASSIFICATION	1.0737517178596963E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999881575960988	WITHOUT_CLASSIFICATION	1.1842403901129059E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999987512229696	WITHOUT_CLASSIFICATION	1.248777030410235E-6	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999942780327679	WITHOUT_CLASSIFICATION	5.721967232208048E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999940358312246	WITHOUT_CLASSIFICATION	5.964168775422187E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999963035705878	WITHOUT_CLASSIFICATION	3.6964294122930237E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999963035705878	WITHOUT_CLASSIFICATION	3.6964294122930237E-6	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999995615625432	WITHOUT_CLASSIFICATION	4.384374567257277E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999992261751809	WITHOUT_CLASSIFICATION	7.738248192440861E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999992261751809	WITHOUT_CLASSIFICATION	7.738248192440861E-7	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999965586599464	WITHOUT_CLASSIFICATION	3.4413400535324347E-6	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999997716165097	WITHOUT_CLASSIFICATION	2.2838349040211554E-7	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8897527510860214	WITHOUT_CLASSIFICATION	0.11024724891397851	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999996591499022	WITHOUT_CLASSIFICATION	3.408500978431523E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999996858054478	WITHOUT_CLASSIFICATION	3.1419455219182944E-7	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999979295293899	WITHOUT_CLASSIFICATION	2.0704706101688414E-6	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998450714068424	WITHOUT_CLASSIFICATION	1.5492859315751104E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999977821307635	WITHOUT_CLASSIFICATION	2.217869236403797E-6	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999995957540481	WITHOUT_CLASSIFICATION	4.042459518942029E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9990373574420083	WITHOUT_CLASSIFICATION	9.626425579918051E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999994000407092	WITHOUT_CLASSIFICATION	5.999592907498591E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999778283302931	WITHOUT_CLASSIFICATION	2.217166970691007E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914560559899	WITHOUT_CLASSIFICATION	8.543944010069143E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914560559899	WITHOUT_CLASSIFICATION	8.543944010069143E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914560559899	WITHOUT_CLASSIFICATION	8.543944010069143E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914560559899	WITHOUT_CLASSIFICATION	8.543944010069143E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999950387893487	WITHOUT_CLASSIFICATION	4.961210651263674E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999187890897939	WITHOUT_CLASSIFICATION	8.121091020610527E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999150695353644	WITHOUT_CLASSIFICATION	8.493046463563668E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999876717955214	WITHOUT_CLASSIFICATION	1.2328204478632514E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999924680637098	WITHOUT_CLASSIFICATION	7.5319362902017615E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999803743272976	WITHOUT_CLASSIFICATION	1.962567270234131E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999940587181297	WITHOUT_CLASSIFICATION	5.9412818703076685E-6	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999947684934755	WITHOUT_CLASSIFICATION	5.231506524523231E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999239344390545	WITHOUT_CLASSIFICATION	7.60655609455309E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999989051053338	WITHOUT_CLASSIFICATION	1.0948946662293789E-6	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999720579424369	WITHOUT_CLASSIFICATION	2.7942057563068537E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998943015404802	WITHOUT_CLASSIFICATION	1.0569845951976956E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999995468550047	WITHOUT_CLASSIFICATION	4.5314499525031825E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999980264637597	WITHOUT_CLASSIFICATION	1.9735362403623382E-6	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999902379945722	WITHOUT_CLASSIFICATION	9.762005427781948E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998943015404802	WITHOUT_CLASSIFICATION	1.0569845951976956E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999991182797776	WITHOUT_CLASSIFICATION	8.817202223353724E-7	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999909006452693	WITHOUT_CLASSIFICATION	9.099354730666205E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999960467843438	WITHOUT_CLASSIFICATION	3.953215656214814E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999992039923053	WITHOUT_CLASSIFICATION	7.96007694705853E-6	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998702624721404	WITHOUT_CLASSIFICATION	1.297375278596344E-4	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999660572556924	WITHOUT_CLASSIFICATION	3.394274430743617E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999976283497204	WITHOUT_CLASSIFICATION	2.3716502796381896E-6	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999833021109785	WITHOUT_CLASSIFICATION	1.6697889021511328E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973249107948	WITHOUT_CLASSIFICATION	2.675089205094604E-6	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999968751727573	WITHOUT_CLASSIFICATION	3.1248272427790324E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980948424976	WITHOUT_CLASSIFICATION	1.9051575025058193E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999950749440734	WITHOUT_CLASSIFICATION	4.9250559266230555E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999874102343139	WITHOUT_CLASSIFICATION	1.2589765686072556E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999558860721224	WITHOUT_CLASSIFICATION	4.4113927877734366E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999905263728973	WITHOUT_CLASSIFICATION	9.473627102664692E-6	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.999998120691934	WITHOUT_CLASSIFICATION	1.8793080659921474E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999366007417	WITHOUT_CLASSIFICATION	6.33992583180381E-8	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999981146732732	WITHOUT_CLASSIFICATION	1.8853267268746555E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999998600855331	WITHOUT_CLASSIFICATION	1.3991446684314606E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999981146732732	WITHOUT_CLASSIFICATION	1.8853267268746555E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999925746112194	WITHOUT_CLASSIFICATION	7.425388780634856E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999998006189965	WITHOUT_CLASSIFICATION	1.9938100339216176E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999964373687357	WITHOUT_CLASSIFICATION	3.5626312643274997E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999985962090849	WITHOUT_CLASSIFICATION	1.4037909150823725E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999366007417	WITHOUT_CLASSIFICATION	6.33992583180381E-8	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999998600855331	WITHOUT_CLASSIFICATION	1.3991446684314606E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999925746112194	WITHOUT_CLASSIFICATION	7.425388780634856E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998550387759998	WITHOUT_CLASSIFICATION	1.4496122400023666E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999910587994213	WITHOUT_CLASSIFICATION	8.94120057868713E-6	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999985164719788	WITHOUT_CLASSIFICATION	1.4835280212272447E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999903390472933	WITHOUT_CLASSIFICATION	9.660952706778142E-6	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998438076208429	WITHOUT_CLASSIFICATION	1.56192379157054E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999983053002793	WITHOUT_CLASSIFICATION	1.694699720717981E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930461493658	WITHOUT_CLASSIFICATION	6.953850634252888E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999998006189965	WITHOUT_CLASSIFICATION	1.9938100339216176E-7	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999927348496	WITHOUT_CLASSIFICATION	7.265150362692434E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999973429607206	WITHOUT_CLASSIFICATION	2.6570392793864037E-6	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999950971025688	WITHOUT_CLASSIFICATION	4.902897431153848E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930461493658	WITHOUT_CLASSIFICATION	6.953850634252888E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999968995639084	WITHOUT_CLASSIFICATION	3.100436091602326E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930461493658	WITHOUT_CLASSIFICATION	6.953850634252888E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999997804881875	WITHOUT_CLASSIFICATION	2.1951181245059352E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999926977429487	WITHOUT_CLASSIFICATION	7.3022570512289925E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999252162227675	WITHOUT_CLASSIFICATION	7.478377723252547E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999293846879197	WITHOUT_CLASSIFICATION	7.061531208031435E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999636407161361	WITHOUT_CLASSIFICATION	3.635928386387556E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999924762145679	WITHOUT_CLASSIFICATION	7.5237854320253334E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998639218390829	WITHOUT_CLASSIFICATION	1.3607816091705928E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999872657647866	WITHOUT_CLASSIFICATION	1.2734235213400168E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999735972550862	WITHOUT_CLASSIFICATION	2.640274491379949E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999954541653091	WITHOUT_CLASSIFICATION	4.545834690963174E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999379894299177	WITHOUT_CLASSIFICATION	6.201057008232434E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999995498620471	WITHOUT_CLASSIFICATION	4.5013795286051413E-7	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8897527510860214	WITHOUT_CLASSIFICATION	0.11024724891397851	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999878803901744	WITHOUT_CLASSIFICATION	1.2119609825582713E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999998919422816	WITHOUT_CLASSIFICATION	1.0805771849129765E-7	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999818258378131	WITHOUT_CLASSIFICATION	1.8174162186849646E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999933932455143	WITHOUT_CLASSIFICATION	6.606754485700529E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999985703765509	WITHOUT_CLASSIFICATION	1.4296234491451324E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999973047542163	WITHOUT_CLASSIFICATION	2.6952457837762983E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999359781298773	WITHOUT_CLASSIFICATION	6.40218701227581E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9983127113643274	WITHOUT_CLASSIFICATION	0.0016872886356727066	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999943074224195	WITHOUT_CLASSIFICATION	5.692577580528604E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998410239022483	WITHOUT_CLASSIFICATION	1.5897609775178948E-4	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.8899452627841612	WITHOUT_CLASSIFICATION	0.1100547372158388	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999454269718	WITHOUT_CLASSIFICATION	5.457302822331454E-8	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998494325204	WITHOUT_CLASSIFICATION	1.505674795100148E-7	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999944053706692	WITHOUT_CLASSIFICATION	5.5946293308913794E-6	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999946514042485	WITHOUT_CLASSIFICATION	5.348595751477956E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998757782749101	WITHOUT_CLASSIFICATION	1.242217250898737E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998841270606	WITHOUT_CLASSIFICATION	1.1587293932966619E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999997834916639	WITHOUT_CLASSIFICATION	2.1650833609302293E-7	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999987160639529	WITHOUT_CLASSIFICATION	1.2839360471095236E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999449044714087	WITHOUT_CLASSIFICATION	5.5095528591253844E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999982748377123	WITHOUT_CLASSIFICATION	1.72516228770375E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9873933508169478	WITHOUT_CLASSIFICATION	0.012606649183052107	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999965188601742	WITHOUT_CLASSIFICATION	3.481139825858171E-6	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999987122893036	WITHOUT_CLASSIFICATION	1.2877106963973776E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.99994296937454	WITHOUT_CLASSIFICATION	5.703062546013167E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999969084483011	WITHOUT_CLASSIFICATION	3.0915516988479915E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999983061446367	WITHOUT_CLASSIFICATION	1.6938553632450957E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8963811826114167	WITHOUT_CLASSIFICATION	0.10361881738858328	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999985522853677	WITHOUT_CLASSIFICATION	1.4477146322294187E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999994903323431	WITHOUT_CLASSIFICATION	5.096676569052898E-6	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999805538099951	WITHOUT_CLASSIFICATION	1.944619000495652E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999805538099951	WITHOUT_CLASSIFICATION	1.944619000495652E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9997509310120919	WITHOUT_CLASSIFICATION	2.490689879081854E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999872657647866	WITHOUT_CLASSIFICATION	1.2734235213400168E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999916269206073	WITHOUT_CLASSIFICATION	8.373079392696655E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999846863173125	WITHOUT_CLASSIFICATION	1.531368268749898E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999973268264838	WITHOUT_CLASSIFICATION	2.6731735162704595E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999930564244952	WITHOUT_CLASSIFICATION	6.9435755047719595E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999914795601198	WITHOUT_CLASSIFICATION	8.520439880212882E-6	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.999865964302789	WITHOUT_CLASSIFICATION	1.3403569721105288E-4	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999980969712415	WITHOUT_CLASSIFICATION	1.9030287584343585E-6	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999997184931426	WITHOUT_CLASSIFICATION	2.8150685729893324E-7	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999958291343622	WITHOUT_CLASSIFICATION	4.170865637776357E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.999998444221765	WITHOUT_CLASSIFICATION	1.555778235033721E-6	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.991565463627094	WITHOUT_CLASSIFICATION	0.008434536372905988	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999967191860892	WITHOUT_CLASSIFICATION	3.280813910845199E-6	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999989171724428	WITHOUT_CLASSIFICATION	1.0828275571465961E-6	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998579945417	WITHOUT_CLASSIFICATION	1.4200545830529225E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999984755188535	WITHOUT_CLASSIFICATION	1.5244811465132145E-6	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999988154829131	WITHOUT_CLASSIFICATION	1.1845170869419692E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999996896131139	WITHOUT_CLASSIFICATION	3.10386886032535E-7	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999805903425818	WITHOUT_CLASSIFICATION	1.9409657418243664E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999419994468888	WITHOUT_CLASSIFICATION	5.800055311120381E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999982112497899	WITHOUT_CLASSIFICATION	1.7887502100921465E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999894167582524	WITHOUT_CLASSIFICATION	1.05832417477291E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999024243998	WITHOUT_CLASSIFICATION	9.757560011340684E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8963811826114167	WITHOUT_CLASSIFICATION	0.10361881738858328	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999991517542827	WITHOUT_CLASSIFICATION	8.482457172374748E-7	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9991671856309488	WITHOUT_CLASSIFICATION	8.328143690512157E-4	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998356400259	WITHOUT_CLASSIFICATION	1.6435997410921204E-7	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999826835717146	WITHOUT_CLASSIFICATION	1.731642828531566E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999002823394515	WITHOUT_CLASSIFICATION	9.971766054858119E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999990571840716	WITHOUT_CLASSIFICATION	9.428159285156398E-7	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999221710671171	WITHOUT_CLASSIFICATION	7.782893288289645E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999910383152211	WITHOUT_CLASSIFICATION	8.961684778949857E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999986022824543	WITHOUT_CLASSIFICATION	1.3977175456910967E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999987824691258	WITHOUT_CLASSIFICATION	1.2175308742268712E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999987360264719	WITHOUT_CLASSIFICATION	1.263973528071675E-6	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999937581259959	WITHOUT_CLASSIFICATION	6.241874004110416E-6	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999990796678331	WITHOUT_CLASSIFICATION	9.203321669976101E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999343179087701	WITHOUT_CLASSIFICATION	6.568209122992136E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999990850064	WITHOUT_CLASSIFICATION	9.149935561231769E-10	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999990850064	WITHOUT_CLASSIFICATION	9.149935561231769E-10	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999987564901022	WITHOUT_CLASSIFICATION	1.2435098977628803E-6	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999993755249935	WITHOUT_CLASSIFICATION	6.244750063971012E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999998164973466	WITHOUT_CLASSIFICATION	1.8350265348700573E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999998164973466	WITHOUT_CLASSIFICATION	1.8350265348700573E-7	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999992691622765	WITHOUT_CLASSIFICATION	7.308377233833258E-7	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999868289963052	WITHOUT_CLASSIFICATION	1.3171003694751277E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999936136613593	WITHOUT_CLASSIFICATION	6.386338640667069E-6	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999989485752351	WITHOUT_CLASSIFICATION	1.0514247648538148E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999949411484823	WITHOUT_CLASSIFICATION	5.058851517673456E-6	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999986941529259	WITHOUT_CLASSIFICATION	1.3058470741468799E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998962133879	WITHOUT_CLASSIFICATION	1.037866121493821E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998962133879	WITHOUT_CLASSIFICATION	1.037866121493821E-7	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999988026107065	WITHOUT_CLASSIFICATION	1.1973892935296304E-6	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999886771471985	WITHOUT_CLASSIFICATION	1.1322852801496387E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999995738109129	WITHOUT_CLASSIFICATION	4.261890870988869E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999970946196739	WITHOUT_CLASSIFICATION	2.9053803261398512E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999970946196739	WITHOUT_CLASSIFICATION	2.9053803261398512E-6	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999982086370471	WITHOUT_CLASSIFICATION	1.7913629528644708E-6	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999985720704976	WITHOUT_CLASSIFICATION	1.4279295024068838E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999464381765034	WITHOUT_CLASSIFICATION	5.3561823496467595E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999983199713468	WITHOUT_CLASSIFICATION	1.6800286531402387E-6	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999151588048161	WITHOUT_CLASSIFICATION	8.484119518394746E-5	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999978266680289	WITHOUT_CLASSIFICATION	2.1733319711666402E-6	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999912255277144	WITHOUT_CLASSIFICATION	8.774472285694646E-6	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999917340433585	WITHOUT_CLASSIFICATION	8.265956641457597E-6	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999979759443018	WITHOUT_CLASSIFICATION	2.0240556982267455E-6	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999942197440448	WITHOUT_CLASSIFICATION	5.7802559552707735E-6	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9993014391983113	WITHOUT_CLASSIFICATION	6.985608016887958E-4	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999886772092166	WITHOUT_CLASSIFICATION	1.13227907834888E-5	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9999893341365963	WITHOUT_CLASSIFICATION	1.066586340373465E-5	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999881921628564	WITHOUT_CLASSIFICATION	1.1807837143671142E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999721849353432	WITHOUT_CLASSIFICATION	2.781506465681393E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999791787598938	WITHOUT_CLASSIFICATION	2.0821240106235193E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999986859687824	WITHOUT_CLASSIFICATION	1.314031217615628E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999874856020042	WITHOUT_CLASSIFICATION	1.2514397995692644E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999914448132639	WITHOUT_CLASSIFICATION	8.555186736121517E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999932018617848	WITHOUT_CLASSIFICATION	6.79813821519122E-6	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999993210034021	WITHOUT_CLASSIFICATION	6.789965979054474E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999078478446196	WITHOUT_CLASSIFICATION	9.215215538042579E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999118700481366	WITHOUT_CLASSIFICATION	8.81299518633504E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999991121748317	WITHOUT_CLASSIFICATION	8.878251682605738E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999664266725172	WITHOUT_CLASSIFICATION	3.357332748281177E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999275409162799	WITHOUT_CLASSIFICATION	7.245908372012769E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999990038258957	WITHOUT_CLASSIFICATION	9.961741043817048E-7	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999126953000543	WITHOUT_CLASSIFICATION	8.730469994567594E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999993178721289	WITHOUT_CLASSIFICATION	6.821278711726221E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999983871783288	WITHOUT_CLASSIFICATION	1.6128216712618598E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999966843154997	WITHOUT_CLASSIFICATION	3.3156845003127525E-6	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999993732758621	WITHOUT_CLASSIFICATION	6.267241379342935E-7	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999972955019975	WITHOUT_CLASSIFICATION	2.7044980025670833E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999684069279797	WITHOUT_CLASSIFICATION	3.1593072020181364E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999958325439314	WITHOUT_CLASSIFICATION	4.167456068578134E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999701685234255	WITHOUT_CLASSIFICATION	2.9831476574597937E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999935152264919	WITHOUT_CLASSIFICATION	6.4847735080224195E-6	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999996178290911	WITHOUT_CLASSIFICATION	3.821709089180899E-7	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999767131502737	WITHOUT_CLASSIFICATION	2.3286849726318077E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999998378939601	WITHOUT_CLASSIFICATION	1.6210603990137963E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999117767477831	WITHOUT_CLASSIFICATION	8.822325221696876E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999976549216655	WITHOUT_CLASSIFICATION	2.345078334584801E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999957738851232	WITHOUT_CLASSIFICATION	4.2261148768566E-6	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9997074889100205	WITHOUT_CLASSIFICATION	2.925110899795774E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999990452278912	WITHOUT_CLASSIFICATION	9.54772108778908E-7	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999989338722894	WITHOUT_CLASSIFICATION	1.0661277105806603E-6	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999988144738567	WITHOUT_CLASSIFICATION	1.1855261433507362E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999948659868364	WITHOUT_CLASSIFICATION	5.134013163546574E-6	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999961437558428	WITHOUT_CLASSIFICATION	3.856244157203116E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999940926165628	WITHOUT_CLASSIFICATION	5.907383437265705E-6	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999858469692096	WITHOUT_CLASSIFICATION	1.4153030790438758E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999989562169599	WITHOUT_CLASSIFICATION	1.0437830401461775E-6	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999988405804864	WITHOUT_CLASSIFICATION	1.159419513683067E-6	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999966568344	WITHOUT_CLASSIFICATION	3.343165648556933E-9	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999956440532288	WITHOUT_CLASSIFICATION	4.3559467711009126E-6	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999996672346497	WITHOUT_CLASSIFICATION	3.3276535019435415E-7	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999990236523137	WITHOUT_CLASSIFICATION	9.763476862747794E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999936945295176	WITHOUT_CLASSIFICATION	6.305470482495782E-6	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999852253267123	WITHOUT_CLASSIFICATION	1.4774673287618767E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999992047503111	WITHOUT_CLASSIFICATION	7.952496888825345E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996587686407905	WITHOUT_CLASSIFICATION	3.412313592095544E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996587686407905	WITHOUT_CLASSIFICATION	3.412313592095544E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999838901007	WITHOUT_CLASSIFICATION	1.6109899276563786E-8	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999978620215093	WITHOUT_CLASSIFICATION	2.1379784906969715E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999075276108	WITHOUT_CLASSIFICATION	9.247238916017632E-8	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999458756605	WITHOUT_CLASSIFICATION	5.412433939538455E-8	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999178466185	WITHOUT_CLASSIFICATION	8.215338145668575E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999978763486331	WITHOUT_CLASSIFICATION	2.123651366902573E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999944857220217	WITHOUT_CLASSIFICATION	5.514277978314433E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999997590477	WITHOUT_CLASSIFICATION	2.409521599378268E-10	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999996447147204	WITHOUT_CLASSIFICATION	3.552852795721972E-7	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999992514517948	WITHOUT_CLASSIFICATION	7.485482052915224E-7	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999802742068061	WITHOUT_CLASSIFICATION	1.9725793193893554E-5	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998734426881986	WITHOUT_CLASSIFICATION	1.2655731180154562E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999719553272632	WITHOUT_CLASSIFICATION	2.804467273682019E-5	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999747065152267	WITHOUT_CLASSIFICATION	2.5293484773324087E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999842569290087	WITHOUT_CLASSIFICATION	1.574307099133235E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999842569290087	WITHOUT_CLASSIFICATION	1.574307099133235E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999029421992	WITHOUT_CLASSIFICATION	9.70578007994755E-8	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999866062760709	WITHOUT_CLASSIFICATION	1.3393723929080245E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999817964488896	WITHOUT_CLASSIFICATION	1.8203551110369442E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999974269429388	WITHOUT_CLASSIFICATION	2.5730570611169096E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999667338624886	WITHOUT_CLASSIFICATION	3.3266137511313754E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999443367330417	WITHOUT_CLASSIFICATION	5.566326695824218E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999823510575981	WITHOUT_CLASSIFICATION	1.7648942401797395E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999948848279705	WITHOUT_CLASSIFICATION	5.115172029489024E-6	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999992645448645	WITHOUT_CLASSIFICATION	7.354551354698415E-7	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999922688477264	WITHOUT_CLASSIFICATION	7.731152273581423E-6	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999846852533665	WITHOUT_CLASSIFICATION	1.5314746633496643E-5	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999771171697	WITHOUT_CLASSIFICATION	2.2882830294596404E-7	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999998483039113	WITHOUT_CLASSIFICATION	1.516960887436261E-7	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999998867271335	WITHOUT_CLASSIFICATION	1.13272866528727E-7	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997524371594	WITHOUT_CLASSIFICATION	2.475628404712296E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999904232962723	WITHOUT_CLASSIFICATION	9.576703727677383E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999659718030471	WITHOUT_CLASSIFICATION	3.402819695285712E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999987200901884	WITHOUT_CLASSIFICATION	1.2799098115722653E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999480757488	WITHOUT_CLASSIFICATION	5.192425131060586E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999971039038967	WITHOUT_CLASSIFICATION	2.896096103271062E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999131065231344	WITHOUT_CLASSIFICATION	8.689347686560185E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999995854918	WITHOUT_CLASSIFICATION	4.145081189944326E-10	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997482197137	WITHOUT_CLASSIFICATION	2.517802863062657E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999950852936235	WITHOUT_CLASSIFICATION	4.914706376544578E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999722168521963	WITHOUT_CLASSIFICATION	2.7783147803709696E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999805169611569	WITHOUT_CLASSIFICATION	1.948303884324472E-5	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999999446232276	WITHOUT_CLASSIFICATION	5.537677240206407E-7	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999921855231595	WITHOUT_CLASSIFICATION	7.814476840560825E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999986854683977	WITHOUT_CLASSIFICATION	1.3145316023599606E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999491699326	WITHOUT_CLASSIFICATION	5.083006739316757E-8	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999931221263441	WITHOUT_CLASSIFICATION	6.877873655928486E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999990342722817	WITHOUT_CLASSIFICATION	9.65727718297201E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999898736637	WITHOUT_CLASSIFICATION	1.0126336325452153E-8	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999997749564837	WITHOUT_CLASSIFICATION	2.250435162908473E-6	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9997804417093133	WITHOUT_CLASSIFICATION	2.1955829068650434E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999965005746777	WITHOUT_CLASSIFICATION	3.499425322263681E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999991995823552	WITHOUT_CLASSIFICATION	8.004176447410952E-7	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999819771388341	WITHOUT_CLASSIFICATION	1.802286116598019E-5	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999968363076702	WITHOUT_CLASSIFICATION	3.1636923297923857E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999616165557018	WITHOUT_CLASSIFICATION	3.838344429823594E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998865560121719	WITHOUT_CLASSIFICATION	1.1344398782811441E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998865560121719	WITHOUT_CLASSIFICATION	1.1344398782811441E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999471470714	WITHOUT_CLASSIFICATION	5.285292854059749E-8	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998981906664716	WITHOUT_CLASSIFICATION	1.0180933352842504E-4	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9997177433529604	WITHOUT_CLASSIFICATION	2.822566470395933E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999993933266235	WITHOUT_CLASSIFICATION	6.066733764433385E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999853587414914	WITHOUT_CLASSIFICATION	1.4641258508638348E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999993215597367	WITHOUT_CLASSIFICATION	6.784402631940507E-7	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999984203274591	WITHOUT_CLASSIFICATION	1.579672540789827E-6	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999994844796622	WITHOUT_CLASSIFICATION	5.155203378497447E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999977798806732	WITHOUT_CLASSIFICATION	2.220119326856077E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869813727428	WITHOUT_CLASSIFICATION	1.3018627257132425E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932829354815	WITHOUT_CLASSIFICATION	6.717064518582736E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998584795480152	WITHOUT_CLASSIFICATION	1.415204519848796E-4	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999921991398	WITHOUT_CLASSIFICATION	7.800860105600823E-9	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999999918398121	WITHOUT_CLASSIFICATION	8.160187895378468E-8	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999981207672687	WITHOUT_CLASSIFICATION	1.8792327313001309E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999796835921	WITHOUT_CLASSIFICATION	2.0316407792692206E-8	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999653166160719	WITHOUT_CLASSIFICATION	3.4683383928012916E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999955083739134	WITHOUT_CLASSIFICATION	4.491626086668259E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999953781278142	WITHOUT_CLASSIFICATION	4.621872185730222E-6	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999998647414113	WITHOUT_CLASSIFICATION	1.3525858860276987E-7	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999998978759618	WITHOUT_CLASSIFICATION	1.0212403823109052E-7	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999983965675345	WITHOUT_CLASSIFICATION	1.6034324654483967E-6	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999998647885356	WITHOUT_CLASSIFICATION	1.352114644044859E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999110799790554	WITHOUT_CLASSIFICATION	8.89200209446618E-5	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999940359196575	WITHOUT_CLASSIFICATION	5.964080342559692E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999717737728832	WITHOUT_CLASSIFICATION	2.8226227116923427E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999665556735002	WITHOUT_CLASSIFICATION	3.344432649974857E-5	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999026143503	WITHOUT_CLASSIFICATION	9.738564964705501E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999872182401508	WITHOUT_CLASSIFICATION	1.2781759849332846E-5	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999930045726217	WITHOUT_CLASSIFICATION	6.9954273782607845E-6	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9998886041863982	WITHOUT_CLASSIFICATION	1.1139581360173816E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999975919467231	WITHOUT_CLASSIFICATION	2.408053276810955E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999834429169036	WITHOUT_CLASSIFICATION	1.655708309639618E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999732042898	WITHOUT_CLASSIFICATION	2.6795710137294797E-8	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999999574011514	WITHOUT_CLASSIFICATION	4.2598848599814953E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9996041638709806	WITHOUT_CLASSIFICATION	3.9583612901934533E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999840643967	WITHOUT_CLASSIFICATION	1.5935603331061716E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999902717464365	WITHOUT_CLASSIFICATION	9.72825356354013E-6	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999982243334281	WITHOUT_CLASSIFICATION	1.7756665718936428E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999964792147994	WITHOUT_CLASSIFICATION	3.5207852005137707E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999947227710476	WITHOUT_CLASSIFICATION	5.277228952361418E-6	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999993609416292	WITHOUT_CLASSIFICATION	6.390583707007361E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999622637972446	WITHOUT_CLASSIFICATION	3.7736202755285786E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999980426608285	WITHOUT_CLASSIFICATION	1.9573391715316692E-6	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999978205592491	WITHOUT_CLASSIFICATION	2.179440750846073E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999793215992169	WITHOUT_CLASSIFICATION	2.0678400783068507E-5	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999577846548094	WITHOUT_CLASSIFICATION	4.2215345190644794E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999719553272632	WITHOUT_CLASSIFICATION	2.804467273682019E-5	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999997460708785	WITHOUT_CLASSIFICATION	2.539291215080364E-7	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999254058812	WITHOUT_CLASSIFICATION	7.459411868658564E-8	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999847718753794	WITHOUT_CLASSIFICATION	1.5228124620684612E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999260108566	WITHOUT_CLASSIFICATION	7.398914339583384E-8	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999997847704418	WITHOUT_CLASSIFICATION	2.152295581545723E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999984610414394	WITHOUT_CLASSIFICATION	1.5389585606440678E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997394643237673	WITHOUT_CLASSIFICATION	2.6053567623274336E-4	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999997454669391	WITHOUT_CLASSIFICATION	2.5453306081482174E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999998630626037	WITHOUT_CLASSIFICATION	1.3693739630127488E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999824739462759	WITHOUT_CLASSIFICATION	1.752605372410475E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999995801911258	WITHOUT_CLASSIFICATION	4.1980887425078675E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998551286351056	WITHOUT_CLASSIFICATION	1.448713648944609E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999995900979605	WITHOUT_CLASSIFICATION	4.0990203959127037E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999845132048	WITHOUT_CLASSIFICATION	1.5486795121859466E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959687744705	WITHOUT_CLASSIFICATION	4.031225529526351E-6	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999954242659459	WITHOUT_CLASSIFICATION	4.575734054129191E-6	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999978166872	WITHOUT_CLASSIFICATION	2.1833128001117475E-6	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999870057169	WITHOUT_CLASSIFICATION	1.2994283206521452E-8	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999884767754333	WITHOUT_CLASSIFICATION	1.1523224566639135E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959687744705	WITHOUT_CLASSIFICATION	4.031225529526351E-6	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998608052067236	WITHOUT_CLASSIFICATION	1.3919479327641394E-4	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999996579098579	WITHOUT_CLASSIFICATION	3.420901420800491E-7	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999476379113	WITHOUT_CLASSIFICATION	5.2362088620110476E-8	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999744622481062	WITHOUT_CLASSIFICATION	2.5537751893739334E-5	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999983875095253	WITHOUT_CLASSIFICATION	1.612490474783034E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999988517005128	WITHOUT_CLASSIFICATION	1.1482994871804805E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999997161776097	WITHOUT_CLASSIFICATION	2.838223902973299E-7	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999978754951041	WITHOUT_CLASSIFICATION	2.1245048958852096E-5	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999674375533	WITHOUT_CLASSIFICATION	3.256244678674595E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991309097823	WITHOUT_CLASSIFICATION	8.69090217767208E-7	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999966190224794	WITHOUT_CLASSIFICATION	3.3809775206280026E-6	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998876432256139	WITHOUT_CLASSIFICATION	1.123567743861492E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999957748227455	WITHOUT_CLASSIFICATION	4.225177254567111E-6	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999907311855759	WITHOUT_CLASSIFICATION	9.268814424210907E-6	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999998132559142	WITHOUT_CLASSIFICATION	1.8674408574133632E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999024243998	WITHOUT_CLASSIFICATION	9.757560011340684E-8	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999598227818	WITHOUT_CLASSIFICATION	4.017721830038209E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999981212913306	WITHOUT_CLASSIFICATION	1.8787086694156277E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998241457996471	WITHOUT_CLASSIFICATION	1.7585420035305546E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999965671530084	WITHOUT_CLASSIFICATION	3.432846991540577E-6	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999964512791316	WITHOUT_CLASSIFICATION	3.5487208684710887E-6	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999544617656189	WITHOUT_CLASSIFICATION	4.55382343811215E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.999999556316987	WITHOUT_CLASSIFICATION	4.436830129857269E-7	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999992091257616	WITHOUT_CLASSIFICATION	7.908742385407707E-7	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999262617449	WITHOUT_CLASSIFICATION	7.37382550639518E-8	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999994119989979	WITHOUT_CLASSIFICATION	5.880010021903197E-7	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999603907923532	WITHOUT_CLASSIFICATION	3.9609207646796594E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999954982683613	WITHOUT_CLASSIFICATION	4.50173163868213E-6	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999994087972517	WITHOUT_CLASSIFICATION	5.912027482622586E-7	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9998812382695764	WITHOUT_CLASSIFICATION	1.187617304236797E-4	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999910171944827	WITHOUT_CLASSIFICATION	8.982805517250546E-6	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999059863595595	WITHOUT_CLASSIFICATION	9.40136404404314E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999967197547202	WITHOUT_CLASSIFICATION	3.2802452797935055E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999984782100949	WITHOUT_CLASSIFICATION	1.5217899049776488E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999946845172	WITHOUT_CLASSIFICATION	5.3154828490110824E-9	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999849604042	WITHOUT_CLASSIFICATION	1.503959580005668E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999953160564754	WITHOUT_CLASSIFICATION	4.6839435246210235E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9997913117805258	WITHOUT_CLASSIFICATION	2.0868821947416332E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999973261968061	WITHOUT_CLASSIFICATION	2.6738031938512297E-6	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999990781432745	WITHOUT_CLASSIFICATION	9.218567254870939E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.99992889865762	WITHOUT_CLASSIFICATION	7.110134237989921E-5	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.99992889865762	WITHOUT_CLASSIFICATION	7.110134237989921E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999970876424094	WITHOUT_CLASSIFICATION	2.9123575906206604E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999959354066356	WITHOUT_CLASSIFICATION	4.0645933644801E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999968883530349	WITHOUT_CLASSIFICATION	3.1116469650062867E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9922606932216275	WITHOUT_CLASSIFICATION	0.007739306778372635	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999892624828215	WITHOUT_CLASSIFICATION	1.0737517178596963E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999892624828215	WITHOUT_CLASSIFICATION	1.0737517178596963E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.999991797563775	WITHOUT_CLASSIFICATION	8.20243622501077E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999941431580115	WITHOUT_CLASSIFICATION	5.856841988556264E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999095758822004	WITHOUT_CLASSIFICATION	9.042411779954283E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999828624546878	WITHOUT_CLASSIFICATION	1.7137545312199556E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999287969047163	WITHOUT_CLASSIFICATION	7.120309528370623E-5	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999938248159388	WITHOUT_CLASSIFICATION	6.175184061291241E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999940854133132	WITHOUT_CLASSIFICATION	5.914586686696167E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999976607872406	WITHOUT_CLASSIFICATION	2.3392127593667257E-6	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999339702062089	WITHOUT_CLASSIFICATION	6.602979379115149E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995453429339	WITHOUT_CLASSIFICATION	4.546570661289771E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995453429339	WITHOUT_CLASSIFICATION	4.546570661289771E-7	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997211617659502	WITHOUT_CLASSIFICATION	2.788382340497926E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999993036326694	WITHOUT_CLASSIFICATION	6.963673305986284E-6	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999963019164142	WITHOUT_CLASSIFICATION	3.698083585789969E-6	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999595406181784	WITHOUT_CLASSIFICATION	4.0459381821535794E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999986968914227	WITHOUT_CLASSIFICATION	1.3031085772516524E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993259706214	WITHOUT_CLASSIFICATION	6.740293786974355E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602225217377	WITHOUT_CLASSIFICATION	3.977747826238855E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999965932997767	WITHOUT_CLASSIFICATION	3.4067002233341126E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999990034863137	WITHOUT_CLASSIFICATION	9.965136863333155E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999880480882442	WITHOUT_CLASSIFICATION	1.1951911755760577E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999912421930924	WITHOUT_CLASSIFICATION	8.757806907617896E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991309097823	WITHOUT_CLASSIFICATION	8.69090217767208E-7	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999962178037537	WITHOUT_CLASSIFICATION	3.782196246293238E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999365047842923	WITHOUT_CLASSIFICATION	6.349521570769529E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999962141978164	WITHOUT_CLASSIFICATION	3.7858021836122958E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999874287077067	WITHOUT_CLASSIFICATION	1.2571292293235153E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999849542964695	WITHOUT_CLASSIFICATION	1.504570353041249E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999992604157443	WITHOUT_CLASSIFICATION	7.395842557749496E-7	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9998920693280839	WITHOUT_CLASSIFICATION	1.0793067191608252E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999904380985	WITHOUT_CLASSIFICATION	9.561901602798627E-9	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999967482130628	WITHOUT_CLASSIFICATION	3.251786937144127E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99994634102168	WITHOUT_CLASSIFICATION	5.3658978320007464E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99994634102168	WITHOUT_CLASSIFICATION	5.3658978320007464E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998943015404802	WITHOUT_CLASSIFICATION	1.0569845951976956E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999001638568	WITHOUT_CLASSIFICATION	9.983614330551904E-8	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998029975041675	WITHOUT_CLASSIFICATION	1.9700249583261444E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998786678696294	WITHOUT_CLASSIFICATION	1.2133213037058685E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999958793269357	WITHOUT_CLASSIFICATION	4.120673064387729E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999996210869122	WITHOUT_CLASSIFICATION	3.7891308780216267E-7	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999905263728973	WITHOUT_CLASSIFICATION	9.473627102664692E-6	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999844441805	WITHOUT_CLASSIFICATION	1.5555819495126524E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998550387759998	WITHOUT_CLASSIFICATION	1.4496122400023666E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999892464307489	WITHOUT_CLASSIFICATION	1.0753569251023996E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930461493658	WITHOUT_CLASSIFICATION	6.953850634252888E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999514138165779	WITHOUT_CLASSIFICATION	4.8586183422126275E-5	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9931546630709297	WITHOUT_CLASSIFICATION	0.006845336929070332	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999040326449	WITHOUT_CLASSIFICATION	9.5967355059894E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999992560829679	WITHOUT_CLASSIFICATION	7.439170320752399E-7	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999996912435573	WITHOUT_CLASSIFICATION	3.087564427770226E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999933080813368	WITHOUT_CLASSIFICATION	6.69191866320127E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990739625901	WITHOUT_CLASSIFICATION	9.260374098569286E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997661219491334	WITHOUT_CLASSIFICATION	2.338780508666296E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999993821161	WITHOUT_CLASSIFICATION	6.178839087534134E-10	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999228543621	WITHOUT_CLASSIFICATION	7.714563785321242E-8	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999993729629332	WITHOUT_CLASSIFICATION	6.270370668607309E-7	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999464381765034	WITHOUT_CLASSIFICATION	5.3561823496467595E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999835842958029	WITHOUT_CLASSIFICATION	1.641570419704121E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987427712488	WITHOUT_CLASSIFICATION	1.257228751233029E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999987427712488	WITHOUT_CLASSIFICATION	1.257228751233029E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999991916029343	WITHOUT_CLASSIFICATION	8.083970657658678E-7	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999518268731732	WITHOUT_CLASSIFICATION	4.817312682671132E-5	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999995004343636	WITHOUT_CLASSIFICATION	4.995656364438067E-7	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999968267526914	WITHOUT_CLASSIFICATION	3.1732473085058977E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999841544899918	WITHOUT_CLASSIFICATION	1.584551000818998E-5	IMPLEMENTATION
