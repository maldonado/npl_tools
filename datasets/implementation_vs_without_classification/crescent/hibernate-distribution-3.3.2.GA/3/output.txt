// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9961078536049932	WITHOUT_CLASSIFICATION	0.0038921463950067564	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9961078536049932	WITHOUT_CLASSIFICATION	0.0038921463950067564	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.8552189939041266	WITHOUT_CLASSIFICATION	0.14478100609587344	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9246514749791456	WITHOUT_CLASSIFICATION	0.0753485250208544	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9501761429683593	WITHOUT_CLASSIFICATION	0.049823857031640724	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8212981558405164	WITHOUT_CLASSIFICATION	0.1787018441594836	IMPLEMENTATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.5037476344543175	IMPLEMENTATION	0.4962523655456825	WITHOUT_CLASSIFICATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9702701966468769	WITHOUT_CLASSIFICATION	0.029729803353123124	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9975691865278411	WITHOUT_CLASSIFICATION	0.0024308134721590198	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.8972449403448525	WITHOUT_CLASSIFICATION	0.1027550596551475	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9688407555112291	WITHOUT_CLASSIFICATION	0.031159244488770926	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9712763055232159	WITHOUT_CLASSIFICATION	0.02872369447678412	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9672451355426354	WITHOUT_CLASSIFICATION	0.03275486445736453	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9672451355426354	WITHOUT_CLASSIFICATION	0.03275486445736453	IMPLEMENTATION
/**	IMPLEMENTATION	0.9907929590433159	WITHOUT_CLASSIFICATION	0.009207040956684209	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.7111223663592424	WITHOUT_CLASSIFICATION	0.28887763364075764	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.909118698471517	IMPLEMENTATION	0.09088130152848288	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9863800860861072	WITHOUT_CLASSIFICATION	0.013619913913892837	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999994207338474	WITHOUT_CLASSIFICATION	5.792661525489348E-7	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.6896869085247004	IMPLEMENTATION	0.3103130914752996	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8956064198949549	WITHOUT_CLASSIFICATION	0.10439358010504504	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9995993390867257	WITHOUT_CLASSIFICATION	4.0066091327437366E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9443692727770625	WITHOUT_CLASSIFICATION	0.055630727222937375	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.5318741575562201	WITHOUT_CLASSIFICATION	0.46812584244377997	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.5318741575562201	WITHOUT_CLASSIFICATION	0.46812584244377997	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.7394045550930575	IMPLEMENTATION	0.2605954449069425	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.7720948816298839	WITHOUT_CLASSIFICATION	0.227905118370116	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9181939136881179	IMPLEMENTATION	0.08180608631188212	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8878088752357487	WITHOUT_CLASSIFICATION	0.11219112476425129	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.7981685306102645	IMPLEMENTATION	0.2018314693897355	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9588469529644167	WITHOUT_CLASSIFICATION	0.04115304703558326	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.7815754332227495	WITHOUT_CLASSIFICATION	0.21842456677725056	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9997681883563868	WITHOUT_CLASSIFICATION	2.3181164361310244E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8434880856822896	WITHOUT_CLASSIFICATION	0.1565119143177105	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8003205951711241	WITHOUT_CLASSIFICATION	0.19967940482887597	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9621201892089151	WITHOUT_CLASSIFICATION	0.03787981079108493	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9108450813046273	WITHOUT_CLASSIFICATION	0.08915491869537272	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9989018670310642	WITHOUT_CLASSIFICATION	0.0010981329689357046	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9834242336035844	WITHOUT_CLASSIFICATION	0.016575766396415538	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9983240262263398	WITHOUT_CLASSIFICATION	0.0016759737736603269	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9983240262263398	WITHOUT_CLASSIFICATION	0.0016759737736603269	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.7373809932953413	WITHOUT_CLASSIFICATION	0.2626190067046586	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9998608965714939	WITHOUT_CLASSIFICATION	1.3910342850611385E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9982216668712449	WITHOUT_CLASSIFICATION	0.0017783331287550036	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.5395026060027782	IMPLEMENTATION	0.4604973939972218	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.6337560342154	IMPLEMENTATION	0.36624396578459983	WITHOUT_CLASSIFICATION
//TODO: formulas ?	IMPLEMENTATION	0.710135376583398	WITHOUT_CLASSIFICATION	0.28986462341660213	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.927529650533679	WITHOUT_CLASSIFICATION	0.07247034946632093	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999392818000138	WITHOUT_CLASSIFICATION	6.071819998614442E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.8597237565579682	WITHOUT_CLASSIFICATION	0.1402762434420318	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9127024416451331	WITHOUT_CLASSIFICATION	0.08729755835486691	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.8916210471466891	IMPLEMENTATION	0.10837895285331092	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.8861565193419467	WITHOUT_CLASSIFICATION	0.11384348065805334	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9964159470717494	WITHOUT_CLASSIFICATION	0.003584052928250577	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9549511008043735	WITHOUT_CLASSIFICATION	0.045048899195626504	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.5366985120323478	IMPLEMENTATION	0.46330148796765236	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.9549511008043735	WITHOUT_CLASSIFICATION	0.045048899195626504	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.6314289045680956	WITHOUT_CLASSIFICATION	0.36857109543190447	IMPLEMENTATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.741847105024062	WITHOUT_CLASSIFICATION	0.258152894975938	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9549511008043735	WITHOUT_CLASSIFICATION	0.045048899195626504	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9548661008547353	WITHOUT_CLASSIFICATION	0.0451338991452647	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9321068483464708	WITHOUT_CLASSIFICATION	0.06789315165352913	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.627950893236145	IMPLEMENTATION	0.3720491067638549	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9383520702203217	WITHOUT_CLASSIFICATION	0.061647929779678264	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999788920294566	WITHOUT_CLASSIFICATION	2.110797054340447E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898878869781	WITHOUT_CLASSIFICATION	1.011211302191892E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898878869781	WITHOUT_CLASSIFICATION	1.011211302191892E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999422746411558	WITHOUT_CLASSIFICATION	5.772535884425389E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.999996797124446	WITHOUT_CLASSIFICATION	3.2028755540089746E-6	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999822975140041	WITHOUT_CLASSIFICATION	1.7702485995858694E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999704406837112	WITHOUT_CLASSIFICATION	2.9559316288884484E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999704406837112	WITHOUT_CLASSIFICATION	2.9559316288884484E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995070341903	WITHOUT_CLASSIFICATION	4.929658096527121E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988332620787	WITHOUT_CLASSIFICATION	1.1667379212522163E-6	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999823949912385	WITHOUT_CLASSIFICATION	1.760500876140196E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944805648847	WITHOUT_CLASSIFICATION	5.519435115298858E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999969709068053	WITHOUT_CLASSIFICATION	3.0290931947377623E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999969709068053	WITHOUT_CLASSIFICATION	3.0290931947377623E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999827178390354	WITHOUT_CLASSIFICATION	1.72821609646891E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999330423716228	WITHOUT_CLASSIFICATION	6.695762837717086E-5	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999922045289867	WITHOUT_CLASSIFICATION	7.795471013357809E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999570517246503	WITHOUT_CLASSIFICATION	4.2948275349619844E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999346914429	WITHOUT_CLASSIFICATION	6.530855715832136E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999854867165716	WITHOUT_CLASSIFICATION	1.4513283428428066E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999571046050363	WITHOUT_CLASSIFICATION	4.289539496365926E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999762735263436	WITHOUT_CLASSIFICATION	2.3726473656394894E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999049090448481	WITHOUT_CLASSIFICATION	9.509095515192957E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9862657092915731	WITHOUT_CLASSIFICATION	0.013734290708426893	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999752936989031	WITHOUT_CLASSIFICATION	2.470630109685286E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999819818192199	WITHOUT_CLASSIFICATION	1.801818078005165E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999975617249468	WITHOUT_CLASSIFICATION	2.4382750531382756E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999748105825061	WITHOUT_CLASSIFICATION	2.518941749390876E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999748105825061	WITHOUT_CLASSIFICATION	2.518941749390876E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999925246056937	WITHOUT_CLASSIFICATION	7.475394306346108E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9998782404469901	WITHOUT_CLASSIFICATION	1.2175955300978229E-4	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999949097635373	WITHOUT_CLASSIFICATION	5.09023646269174E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999967172991211	WITHOUT_CLASSIFICATION	3.282700879038589E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999428314319979	WITHOUT_CLASSIFICATION	5.7168568002089846E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9907929590433159	WITHOUT_CLASSIFICATION	0.009207040956684209	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9907929590433159	WITHOUT_CLASSIFICATION	0.009207040956684209	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999871418299	WITHOUT_CLASSIFICATION	1.2858170095920904E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999812377929015	WITHOUT_CLASSIFICATION	1.876220709848032E-5	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999901444516133	WITHOUT_CLASSIFICATION	9.855548386613286E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999645583343588	WITHOUT_CLASSIFICATION	3.544166564112399E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999748526797887	WITHOUT_CLASSIFICATION	2.5147320211352085E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854851237775	WITHOUT_CLASSIFICATION	1.4514876222495896E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929115421623	WITHOUT_CLASSIFICATION	7.088457837700427E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999962761867307	WITHOUT_CLASSIFICATION	3.7238132692871035E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999497958733676	WITHOUT_CLASSIFICATION	5.020412663233043E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999999597986196	WITHOUT_CLASSIFICATION	4.020138046603048E-8	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999741120985	WITHOUT_CLASSIFICATION	2.588790150002119E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999497958733676	WITHOUT_CLASSIFICATION	5.020412663233043E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999741120985	WITHOUT_CLASSIFICATION	2.588790150002119E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999928056429821	WITHOUT_CLASSIFICATION	7.1943570179371025E-6	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999989409754674	WITHOUT_CLASSIFICATION	1.0590245326061261E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999984464966538	WITHOUT_CLASSIFICATION	1.553503346182249E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999878159475112	WITHOUT_CLASSIFICATION	1.2184052488795713E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999694239093904	WITHOUT_CLASSIFICATION	3.057609060970134E-5	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.999904070961773	WITHOUT_CLASSIFICATION	9.592903822705665E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998604446860927	WITHOUT_CLASSIFICATION	1.3955531390740216E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9984154064879435	WITHOUT_CLASSIFICATION	0.0015845935120564628	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999892116632799	WITHOUT_CLASSIFICATION	1.0788336720110618E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999081661270875	WITHOUT_CLASSIFICATION	9.183387291243313E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999913277999924	WITHOUT_CLASSIFICATION	8.67220000754941E-6	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.999991270183711	WITHOUT_CLASSIFICATION	8.72981628899397E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999214613544	WITHOUT_CLASSIFICATION	7.85386455208781E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999997734241649	WITHOUT_CLASSIFICATION	2.2657583509855634E-6	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999955616813311	WITHOUT_CLASSIFICATION	4.438318668898223E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999903966604	WITHOUT_CLASSIFICATION	9.603339499296869E-9	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999995930034952	WITHOUT_CLASSIFICATION	4.0699650486307094E-7	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999974745527431	WITHOUT_CLASSIFICATION	2.5254472568529265E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999913698958494	WITHOUT_CLASSIFICATION	8.630104150620254E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999995348034072	WITHOUT_CLASSIFICATION	4.651965928021508E-6	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999974973616791	WITHOUT_CLASSIFICATION	2.5026383209810387E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999923709708917	WITHOUT_CLASSIFICATION	7.629029108390775E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997238278555	WITHOUT_CLASSIFICATION	2.7617214446850447E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999978850682333	WITHOUT_CLASSIFICATION	2.1149317667629193E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9635412304062626	WITHOUT_CLASSIFICATION	0.036458769593737415	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996745837573	WITHOUT_CLASSIFICATION	3.2541624275964036E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999318467828062	WITHOUT_CLASSIFICATION	6.815321719383164E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9989323985835225	WITHOUT_CLASSIFICATION	0.0010676014164775613	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999908637074412	WITHOUT_CLASSIFICATION	9.13629255875095E-6	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999990021303157	WITHOUT_CLASSIFICATION	9.978696843769955E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9996808432934652	WITHOUT_CLASSIFICATION	3.1915670653483944E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999972355363398	WITHOUT_CLASSIFICATION	2.764463660182882E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9997621169440379	WITHOUT_CLASSIFICATION	2.3788305596206139E-4	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999994582058231	WITHOUT_CLASSIFICATION	5.417941769112916E-6	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999887214859237	WITHOUT_CLASSIFICATION	1.127851407624089E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997255829787	WITHOUT_CLASSIFICATION	2.744170214062348E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999994582058231	WITHOUT_CLASSIFICATION	5.417941769112916E-6	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998486361382	WITHOUT_CLASSIFICATION	1.513638616753066E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998439047858189	WITHOUT_CLASSIFICATION	1.5609521418117518E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999890437312987	WITHOUT_CLASSIFICATION	1.0956268701248836E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999994103293822	WITHOUT_CLASSIFICATION	5.896706178046474E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.999996228589814	WITHOUT_CLASSIFICATION	3.771410185967617E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998615245134	WITHOUT_CLASSIFICATION	1.3847548660256535E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998615245134	WITHOUT_CLASSIFICATION	1.3847548660256535E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999776447742725	WITHOUT_CLASSIFICATION	2.2355225727530396E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999772027779	WITHOUT_CLASSIFICATION	2.2797222009458837E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999004209238946	WITHOUT_CLASSIFICATION	9.957907610535199E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999779466023	WITHOUT_CLASSIFICATION	2.2053397691960088E-7	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999990945952567	WITHOUT_CLASSIFICATION	9.054047433140867E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999882359583999	WITHOUT_CLASSIFICATION	1.176404159999024E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999835982272266	WITHOUT_CLASSIFICATION	1.6401772773436338E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999952834950075	WITHOUT_CLASSIFICATION	4.716504992404902E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999991765149981	WITHOUT_CLASSIFICATION	8.234850018089958E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999994052530117	WITHOUT_CLASSIFICATION	5.947469882693567E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999958183769534	WITHOUT_CLASSIFICATION	4.181623046611631E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999958183769534	WITHOUT_CLASSIFICATION	4.181623046611631E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973024730489	WITHOUT_CLASSIFICATION	2.69752695112057E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999078127925	WITHOUT_CLASSIFICATION	9.218720748996526E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999972473784942	WITHOUT_CLASSIFICATION	2.752621505951658E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999958183769534	WITHOUT_CLASSIFICATION	4.181623046611631E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973024730489	WITHOUT_CLASSIFICATION	2.69752695112057E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973024730489	WITHOUT_CLASSIFICATION	2.69752695112057E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999997676700585	WITHOUT_CLASSIFICATION	2.323299415963553E-7	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999738198337866	WITHOUT_CLASSIFICATION	2.6180166213342572E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999189605706	WITHOUT_CLASSIFICATION	8.103942934759123E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999831937707	WITHOUT_CLASSIFICATION	1.6806229295553238E-7	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999983046173909	WITHOUT_CLASSIFICATION	1.6953826091070538E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999983046173909	WITHOUT_CLASSIFICATION	1.6953826091070538E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999671814917301	WITHOUT_CLASSIFICATION	3.28185082698508E-5	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998136527241346	WITHOUT_CLASSIFICATION	1.8634727586538735E-4	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999986650175715	WITHOUT_CLASSIFICATION	1.3349824284299594E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999753559958713	WITHOUT_CLASSIFICATION	2.464400412879648E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999753559958713	WITHOUT_CLASSIFICATION	2.464400412879648E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999933476677411	WITHOUT_CLASSIFICATION	6.652332258897474E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999969589316342	WITHOUT_CLASSIFICATION	3.041068365858473E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999765936875632	WITHOUT_CLASSIFICATION	2.3406312436832756E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999628464753587	WITHOUT_CLASSIFICATION	3.7153524641270215E-5	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9998072867464456	WITHOUT_CLASSIFICATION	1.9271325355442505E-4	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999718081352256	WITHOUT_CLASSIFICATION	2.8191864774455446E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999202851654865	WITHOUT_CLASSIFICATION	7.971483451353923E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999845388541166	WITHOUT_CLASSIFICATION	1.5461145883328316E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999911982616739	WITHOUT_CLASSIFICATION	8.801738325988395E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999765936875632	WITHOUT_CLASSIFICATION	2.3406312436832756E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999825758452637	WITHOUT_CLASSIFICATION	1.7424154736216127E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999762824397049	WITHOUT_CLASSIFICATION	2.3717560295072637E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999762824397049	WITHOUT_CLASSIFICATION	2.3717560295072637E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999986286513054	WITHOUT_CLASSIFICATION	1.3713486945307993E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999973453581474	WITHOUT_CLASSIFICATION	2.654641852508634E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998803752670522	WITHOUT_CLASSIFICATION	1.1962473294772399E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999650518180264	WITHOUT_CLASSIFICATION	3.4948181973585294E-5	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999714685641216	WITHOUT_CLASSIFICATION	2.8531435878509835E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.999990849424353	WITHOUT_CLASSIFICATION	9.150575646959308E-6	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9998393518034063	WITHOUT_CLASSIFICATION	1.6064819659371602E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999665408862951	WITHOUT_CLASSIFICATION	3.345911370499783E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999954722142258	WITHOUT_CLASSIFICATION	4.527785774206839E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999954722142258	WITHOUT_CLASSIFICATION	4.527785774206839E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999748836711525	WITHOUT_CLASSIFICATION	2.511632884752904E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999788920294566	WITHOUT_CLASSIFICATION	2.110797054340447E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999972230321182	WITHOUT_CLASSIFICATION	2.776967881726843E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999936384015533	WITHOUT_CLASSIFICATION	6.361598446711177E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898878869781	WITHOUT_CLASSIFICATION	1.011211302191892E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999989153525863	WITHOUT_CLASSIFICATION	1.0846474136846649E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999987278293925	WITHOUT_CLASSIFICATION	1.272170607500703E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999933847953009	WITHOUT_CLASSIFICATION	6.615204699077366E-6	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999935204390429	WITHOUT_CLASSIFICATION	6.479560957111593E-6	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999829378302844	WITHOUT_CLASSIFICATION	1.706216971564328E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999637517274481	WITHOUT_CLASSIFICATION	3.624827255186738E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999897890615406	WITHOUT_CLASSIFICATION	1.021093845947047E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999928479474178	WITHOUT_CLASSIFICATION	7.152052582171651E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.999996797124446	WITHOUT_CLASSIFICATION	3.2028755540089746E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999961383394885	WITHOUT_CLASSIFICATION	3.861660511487832E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999961383394885	WITHOUT_CLASSIFICATION	3.861660511487832E-6	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999953753478106	WITHOUT_CLASSIFICATION	4.624652189476477E-6	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9989007588856286	WITHOUT_CLASSIFICATION	0.0010992411143714751	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999073507873912	WITHOUT_CLASSIFICATION	9.264921260877481E-5	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999894129999641	WITHOUT_CLASSIFICATION	1.0587000035935565E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999958118901913	WITHOUT_CLASSIFICATION	4.188109808773507E-6	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999914713452365	WITHOUT_CLASSIFICATION	8.528654763548773E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999704406837112	WITHOUT_CLASSIFICATION	2.9559316288884484E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998264375736174	WITHOUT_CLASSIFICATION	1.7356242638252755E-4	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999862096792506	WITHOUT_CLASSIFICATION	1.3790320749468838E-5	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999925160918554	WITHOUT_CLASSIFICATION	7.483908144625815E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999961489046344	WITHOUT_CLASSIFICATION	3.851095365663927E-6	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999569078275583	WITHOUT_CLASSIFICATION	4.309217244173426E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999801310064834	WITHOUT_CLASSIFICATION	1.986899351658395E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999719365746098	WITHOUT_CLASSIFICATION	2.806342539014374E-5	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999993437624521	WITHOUT_CLASSIFICATION	6.562375479445327E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999811978057365	WITHOUT_CLASSIFICATION	1.8802194263556532E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999660635561697	WITHOUT_CLASSIFICATION	3.3936443830334106E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9997887174802463	WITHOUT_CLASSIFICATION	2.1128251975363046E-4	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999357898031495	WITHOUT_CLASSIFICATION	6.421019685054056E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999816039414231	WITHOUT_CLASSIFICATION	1.8396058576892843E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898878869781	WITHOUT_CLASSIFICATION	1.011211302191892E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898878869781	WITHOUT_CLASSIFICATION	1.011211302191892E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999897890615406	WITHOUT_CLASSIFICATION	1.021093845947047E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999961383394885	WITHOUT_CLASSIFICATION	3.861660511487832E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999719365746098	WITHOUT_CLASSIFICATION	2.806342539014374E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995070341903	WITHOUT_CLASSIFICATION	4.929658096527121E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.999857561370783	WITHOUT_CLASSIFICATION	1.42438629217052E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999479634213657	WITHOUT_CLASSIFICATION	5.203657863431615E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9997146428611072	WITHOUT_CLASSIFICATION	2.8535713889277854E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999877893288277	WITHOUT_CLASSIFICATION	1.2210671172299878E-5	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999991837851604	WITHOUT_CLASSIFICATION	8.162148396094845E-6	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999917891502744	WITHOUT_CLASSIFICATION	8.210849725516681E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999966924024368	WITHOUT_CLASSIFICATION	3.3075975632116914E-6	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9998203862896735	WITHOUT_CLASSIFICATION	1.7961371032653727E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999870258290051	WITHOUT_CLASSIFICATION	1.2974170994864296E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999400611746108	WITHOUT_CLASSIFICATION	5.9938825389252844E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999400611746108	WITHOUT_CLASSIFICATION	5.9938825389252844E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999908676044431	WITHOUT_CLASSIFICATION	9.132395556842852E-6	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999880858323524	WITHOUT_CLASSIFICATION	1.1914167647708758E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999871616220267	WITHOUT_CLASSIFICATION	1.2838377973335771E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999914699376139	WITHOUT_CLASSIFICATION	8.53006238600073E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999930508644609	WITHOUT_CLASSIFICATION	6.949135539125187E-6	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.999994070445798	WITHOUT_CLASSIFICATION	5.929554202029416E-6	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999965487942079	WITHOUT_CLASSIFICATION	3.4512057920613213E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999988332620787	WITHOUT_CLASSIFICATION	1.1667379212522163E-6	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999871853216692	WITHOUT_CLASSIFICATION	1.2814678330851636E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999990602016087	WITHOUT_CLASSIFICATION	9.397983913778688E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999990602016087	WITHOUT_CLASSIFICATION	9.397983913778688E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999989095053329	WITHOUT_CLASSIFICATION	1.0904946671390532E-6	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999949474230283	WITHOUT_CLASSIFICATION	5.052576971694162E-6	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999991255259505	WITHOUT_CLASSIFICATION	8.744740494993427E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999997590904038	WITHOUT_CLASSIFICATION	2.409095961290159E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999761663078441	WITHOUT_CLASSIFICATION	2.3833692155817365E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999898878869781	WITHOUT_CLASSIFICATION	1.011211302191892E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999897890615406	WITHOUT_CLASSIFICATION	1.021093845947047E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.999996797124446	WITHOUT_CLASSIFICATION	3.2028755540089746E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999719365746098	WITHOUT_CLASSIFICATION	2.806342539014374E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999719365746098	WITHOUT_CLASSIFICATION	2.806342539014374E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999989438451781	WITHOUT_CLASSIFICATION	1.0561548219307838E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999989438451781	WITHOUT_CLASSIFICATION	1.0561548219307838E-6	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999888653067307	WITHOUT_CLASSIFICATION	1.1134693269248993E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999877143718042	WITHOUT_CLASSIFICATION	1.228562819575885E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999877143718042	WITHOUT_CLASSIFICATION	1.228562819575885E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999963167191529	WITHOUT_CLASSIFICATION	3.683280846960073E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999897912950443	WITHOUT_CLASSIFICATION	1.0208704955689563E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.999993448582801	WITHOUT_CLASSIFICATION	6.551417198870246E-6	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999986382779372	WITHOUT_CLASSIFICATION	1.3617220628041046E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999994714216697	WITHOUT_CLASSIFICATION	5.285783303835681E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944805648847	WITHOUT_CLASSIFICATION	5.519435115298858E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944805648847	WITHOUT_CLASSIFICATION	5.519435115298858E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.99996723898728	WITHOUT_CLASSIFICATION	3.276101272000877E-5	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999915229703298	WITHOUT_CLASSIFICATION	8.477029670236295E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999922324714573	WITHOUT_CLASSIFICATION	7.767528542650605E-6	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999829309663969	WITHOUT_CLASSIFICATION	1.7069033603062822E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999854125217819	WITHOUT_CLASSIFICATION	1.4587478218216684E-5	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.999982062514131	WITHOUT_CLASSIFICATION	1.7937485868902716E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999969709068053	WITHOUT_CLASSIFICATION	3.0290931947377623E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999856865403294	WITHOUT_CLASSIFICATION	1.4313459670534065E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999856865403294	WITHOUT_CLASSIFICATION	1.4313459670534065E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999827178390354	WITHOUT_CLASSIFICATION	1.72821609646891E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999827178390354	WITHOUT_CLASSIFICATION	1.72821609646891E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999714820716117	WITHOUT_CLASSIFICATION	2.8517928388350163E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999714820716117	WITHOUT_CLASSIFICATION	2.8517928388350163E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999950419969359	WITHOUT_CLASSIFICATION	4.958003064193678E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999950419969359	WITHOUT_CLASSIFICATION	4.958003064193678E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999944805648847	WITHOUT_CLASSIFICATION	5.519435115298858E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999969709068053	WITHOUT_CLASSIFICATION	3.0290931947377623E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999856865403294	WITHOUT_CLASSIFICATION	1.4313459670534065E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999856865403294	WITHOUT_CLASSIFICATION	1.4313459670534065E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999827178390354	WITHOUT_CLASSIFICATION	1.72821609646891E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999714820716117	WITHOUT_CLASSIFICATION	2.8517928388350163E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999714820716117	WITHOUT_CLASSIFICATION	2.8517928388350163E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999950419969359	WITHOUT_CLASSIFICATION	4.958003064193678E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999829123770926	WITHOUT_CLASSIFICATION	1.708762290732957E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999945183480561	WITHOUT_CLASSIFICATION	5.481651943934048E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999027965739359	WITHOUT_CLASSIFICATION	9.720342606403723E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999865525387066	WITHOUT_CLASSIFICATION	1.3447461293434466E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998433747821157	WITHOUT_CLASSIFICATION	1.5662521788427776E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999710546594387	WITHOUT_CLASSIFICATION	2.8945340561405914E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999998362154199	WITHOUT_CLASSIFICATION	1.637845800889789E-7	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999847721526424	WITHOUT_CLASSIFICATION	1.5227847357575649E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999989760845981	WITHOUT_CLASSIFICATION	1.0239154019124905E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999368326242	WITHOUT_CLASSIFICATION	6.316737579411479E-7	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999992187781857	WITHOUT_CLASSIFICATION	7.812218143302433E-7	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999981474099643	WITHOUT_CLASSIFICATION	1.852590035659068E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999776447742725	WITHOUT_CLASSIFICATION	2.2355225727530396E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999710546594387	WITHOUT_CLASSIFICATION	2.8945340561405914E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998598156575554	WITHOUT_CLASSIFICATION	1.4018434244461318E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998598156575554	WITHOUT_CLASSIFICATION	1.4018434244461318E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999996389790591	WITHOUT_CLASSIFICATION	3.6102094086836813E-7	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999603531254005	WITHOUT_CLASSIFICATION	3.96468745993857E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999603531254005	WITHOUT_CLASSIFICATION	3.96468745993857E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999949618795264	WITHOUT_CLASSIFICATION	5.0381204735311025E-6	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998250746933605	WITHOUT_CLASSIFICATION	1.7492530663953024E-4	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999993070197025	WITHOUT_CLASSIFICATION	6.929802973473565E-7	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999715413787478	WITHOUT_CLASSIFICATION	2.845862125218063E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999715413787478	WITHOUT_CLASSIFICATION	2.845862125218063E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999346914429	WITHOUT_CLASSIFICATION	6.530855715832136E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999937662791	WITHOUT_CLASSIFICATION	6.233720779992942E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999937662791	WITHOUT_CLASSIFICATION	6.233720779992942E-9	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999846561897019	WITHOUT_CLASSIFICATION	1.534381029802755E-5	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999957762729053	WITHOUT_CLASSIFICATION	4.223727094731878E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999954535803317	WITHOUT_CLASSIFICATION	4.546419668346599E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999279800110529	WITHOUT_CLASSIFICATION	7.20199889471536E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999798574878312	WITHOUT_CLASSIFICATION	2.0142512168776243E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999848195235633	WITHOUT_CLASSIFICATION	1.5180476436782716E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999854867165716	WITHOUT_CLASSIFICATION	1.4513283428428066E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999865234937012	WITHOUT_CLASSIFICATION	1.3476506298757328E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.7695096799752346	WITHOUT_CLASSIFICATION	0.23049032002476544	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.999956247794691	WITHOUT_CLASSIFICATION	4.375220530889354E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999524240418186	WITHOUT_CLASSIFICATION	4.757595818133663E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999049090448481	WITHOUT_CLASSIFICATION	9.509095515192957E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999952523214125	WITHOUT_CLASSIFICATION	4.747678587513022E-6	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999995924933978	WITHOUT_CLASSIFICATION	4.0750660231354167E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999882732300207	WITHOUT_CLASSIFICATION	1.1726769979293513E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999049090448481	WITHOUT_CLASSIFICATION	9.509095515192957E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999977714086482	WITHOUT_CLASSIFICATION	2.22859135181917E-6	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999865426036993	WITHOUT_CLASSIFICATION	1.3457396300696391E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999709966460012	WITHOUT_CLASSIFICATION	2.900335399889681E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999711708950455	WITHOUT_CLASSIFICATION	2.8829104954552043E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999696754897628	WITHOUT_CLASSIFICATION	3.032451023721967E-5	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999731071376347	WITHOUT_CLASSIFICATION	2.689286236530249E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999314679257094	WITHOUT_CLASSIFICATION	6.853207429056982E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999819818192199	WITHOUT_CLASSIFICATION	1.801818078005165E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999679082072986	WITHOUT_CLASSIFICATION	3.209179270130557E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999975617249468	WITHOUT_CLASSIFICATION	2.4382750531382756E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999962607786369	WITHOUT_CLASSIFICATION	3.739221363216127E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999891816346786	WITHOUT_CLASSIFICATION	1.08183653212805E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999761309970777	WITHOUT_CLASSIFICATION	2.3869002922228216E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999854867165716	WITHOUT_CLASSIFICATION	1.4513283428428066E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999679082072986	WITHOUT_CLASSIFICATION	3.209179270130557E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999962607786369	WITHOUT_CLASSIFICATION	3.739221363216127E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999761309970777	WITHOUT_CLASSIFICATION	2.3869002922228216E-5	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999904280401476	WITHOUT_CLASSIFICATION	9.571959852433872E-6	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9998825272975966	WITHOUT_CLASSIFICATION	1.1747270240344224E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999919612709637	WITHOUT_CLASSIFICATION	8.038729036210004E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999748105825061	WITHOUT_CLASSIFICATION	2.518941749390876E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999858917369564	WITHOUT_CLASSIFICATION	1.4108263043500724E-5	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999983479751091	WITHOUT_CLASSIFICATION	1.6520248908694561E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999924579296362	WITHOUT_CLASSIFICATION	7.542070363719018E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998201673999	WITHOUT_CLASSIFICATION	1.7983260004666325E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999729894119889	WITHOUT_CLASSIFICATION	2.7010588011260164E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997580831187	WITHOUT_CLASSIFICATION	2.4191688131198743E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999583299027	WITHOUT_CLASSIFICATION	4.1670097193018E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999711413007446	WITHOUT_CLASSIFICATION	2.8858699255368435E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.999999679427992	WITHOUT_CLASSIFICATION	3.205720080627313E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998447058268	WITHOUT_CLASSIFICATION	1.5529417321178617E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999832446942962	WITHOUT_CLASSIFICATION	1.6755305703801206E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999864886199864	WITHOUT_CLASSIFICATION	1.351138001355087E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9998782404469901	WITHOUT_CLASSIFICATION	1.2175955300978229E-4	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999985896533041	WITHOUT_CLASSIFICATION	1.4103466959348243E-6	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999709552359257	WITHOUT_CLASSIFICATION	2.904476407424571E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999679082072986	WITHOUT_CLASSIFICATION	3.209179270130557E-5	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999940543401877	WITHOUT_CLASSIFICATION	5.945659812166764E-6	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999414860541078	WITHOUT_CLASSIFICATION	5.851394589224535E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999957374182502	WITHOUT_CLASSIFICATION	4.262581749830329E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999565366608604	WITHOUT_CLASSIFICATION	4.346333913960353E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999684603259663	WITHOUT_CLASSIFICATION	3.153967403364862E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999982681598492	WITHOUT_CLASSIFICATION	1.7318401508008674E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999266963868	WITHOUT_CLASSIFICATION	7.3303613200781E-8	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999997737002246	WITHOUT_CLASSIFICATION	2.262997752680966E-7	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999502737514702	WITHOUT_CLASSIFICATION	4.9726248529918865E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999374366451838	WITHOUT_CLASSIFICATION	6.256335481628663E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999829771980853	WITHOUT_CLASSIFICATION	1.7022801914771512E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999730581787258	WITHOUT_CLASSIFICATION	2.6941821274232535E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999994611202975	WITHOUT_CLASSIFICATION	5.388797025156708E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999967172991211	WITHOUT_CLASSIFICATION	3.282700879038589E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999807928375898	WITHOUT_CLASSIFICATION	1.9207162410211054E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999977750485756	WITHOUT_CLASSIFICATION	2.224951424403127E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999813568535434	WITHOUT_CLASSIFICATION	1.8643146456599233E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999956820948164	WITHOUT_CLASSIFICATION	4.317905183610717E-6	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999898557828255	WITHOUT_CLASSIFICATION	1.0144217174379076E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999897982631181	WITHOUT_CLASSIFICATION	1.0201736882018218E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999990810789013	WITHOUT_CLASSIFICATION	9.189210986246899E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999970460587682	WITHOUT_CLASSIFICATION	2.953941231777721E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998972068348144	WITHOUT_CLASSIFICATION	1.0279316518565831E-4	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999933408978064	WITHOUT_CLASSIFICATION	6.659102193489469E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998930496796176	WITHOUT_CLASSIFICATION	1.0695032038246223E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998930496796176	WITHOUT_CLASSIFICATION	1.0695032038246223E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998703335171215	WITHOUT_CLASSIFICATION	1.2966648287853502E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999088772281941	WITHOUT_CLASSIFICATION	9.112277180588488E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999989975796822	WITHOUT_CLASSIFICATION	1.0024203177142284E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999950335898213	WITHOUT_CLASSIFICATION	4.9664101787047125E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999636813935924	WITHOUT_CLASSIFICATION	3.631860640750847E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999897678785934	WITHOUT_CLASSIFICATION	1.023212140647845E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999993639770313	WITHOUT_CLASSIFICATION	6.360229687591424E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999997674007255	WITHOUT_CLASSIFICATION	2.3259927439496531E-7	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997979834499042	WITHOUT_CLASSIFICATION	2.020165500957614E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999428766662195	WITHOUT_CLASSIFICATION	5.7123333780418515E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999914769749586	WITHOUT_CLASSIFICATION	8.523025041304316E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999857010867218	WITHOUT_CLASSIFICATION	1.4298913278074102E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999983877118873	WITHOUT_CLASSIFICATION	1.6122881126587041E-6	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999982607702546	WITHOUT_CLASSIFICATION	1.7392297454772703E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961492343752	WITHOUT_CLASSIFICATION	3.850765624722379E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931434516647	WITHOUT_CLASSIFICATION	6.8565483353799E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999980867900969	WITHOUT_CLASSIFICATION	1.9132099029986488E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999998201458286	WITHOUT_CLASSIFICATION	1.7985417139558983E-6	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999983158299971	WITHOUT_CLASSIFICATION	1.684170002824314E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999669308911548	WITHOUT_CLASSIFICATION	3.306910884524147E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999883772801144	WITHOUT_CLASSIFICATION	1.1622719885735816E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999883772801144	WITHOUT_CLASSIFICATION	1.1622719885735816E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999922054000066	WITHOUT_CLASSIFICATION	7.794599993466035E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999922054000066	WITHOUT_CLASSIFICATION	7.794599993466035E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998972068348144	WITHOUT_CLASSIFICATION	1.0279316518565831E-4	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999931830193253	WITHOUT_CLASSIFICATION	6.816980674632852E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9992824456066801	WITHOUT_CLASSIFICATION	7.175543933198441E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999505690407906	WITHOUT_CLASSIFICATION	4.94309592093285E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999748836711525	WITHOUT_CLASSIFICATION	2.511632884752904E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9992824456066801	WITHOUT_CLASSIFICATION	7.175543933198441E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999505690407906	WITHOUT_CLASSIFICATION	4.94309592093285E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999864217276466	WITHOUT_CLASSIFICATION	1.3578272353448836E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999979031607177	WITHOUT_CLASSIFICATION	2.0968392823200044E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999831665037336	WITHOUT_CLASSIFICATION	1.6833496266416066E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9998905172030064	WITHOUT_CLASSIFICATION	1.0948279699355497E-4	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999992123110577	WITHOUT_CLASSIFICATION	7.876889422669095E-7	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9998942027369029	WITHOUT_CLASSIFICATION	1.0579726309707545E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999863395757933	WITHOUT_CLASSIFICATION	1.366042420678369E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999615121076537	WITHOUT_CLASSIFICATION	3.8487892346348905E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998059695824147	WITHOUT_CLASSIFICATION	1.9403041758516391E-4	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999991518495847	WITHOUT_CLASSIFICATION	8.481504154229794E-7	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999810317171351	WITHOUT_CLASSIFICATION	1.896828286487688E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999810470597931	WITHOUT_CLASSIFICATION	1.8952940206842887E-5	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999952294719804	WITHOUT_CLASSIFICATION	4.77052801960382E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999669450083293	WITHOUT_CLASSIFICATION	3.305499167069158E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999748836711525	WITHOUT_CLASSIFICATION	2.511632884752904E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999367525421053	WITHOUT_CLASSIFICATION	6.324745789458519E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999926023520008	WITHOUT_CLASSIFICATION	7.397647999186513E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999926023520008	WITHOUT_CLASSIFICATION	7.397647999186513E-6	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999999762258501	WITHOUT_CLASSIFICATION	2.3774149902744365E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999864217276466	WITHOUT_CLASSIFICATION	1.3578272353448836E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999935279838778	WITHOUT_CLASSIFICATION	6.472016122302908E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999881461130787	WITHOUT_CLASSIFICATION	1.1853886921404742E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9997560844769614	WITHOUT_CLASSIFICATION	2.4391552303847216E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997019957288221	WITHOUT_CLASSIFICATION	2.980042711777951E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998525910375404	WITHOUT_CLASSIFICATION	1.4740896245958192E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999864217276466	WITHOUT_CLASSIFICATION	1.3578272353448836E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997019957288221	WITHOUT_CLASSIFICATION	2.980042711777951E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998525910375404	WITHOUT_CLASSIFICATION	1.4740896245958192E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998830284185447	WITHOUT_CLASSIFICATION	1.1697158145530476E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999926756090878	WITHOUT_CLASSIFICATION	7.3243909121245754E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999965673706136	WITHOUT_CLASSIFICATION	3.4326293864853398E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999864217276466	WITHOUT_CLASSIFICATION	1.3578272353448836E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999864217276466	WITHOUT_CLASSIFICATION	1.3578272353448836E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999919032517306	WITHOUT_CLASSIFICATION	8.09674826934108E-6	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999982311043011	WITHOUT_CLASSIFICATION	1.768895698996029E-6	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999961232223031	WITHOUT_CLASSIFICATION	3.876777696887945E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999913549480162	WITHOUT_CLASSIFICATION	8.645051983841329E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999980807097171	WITHOUT_CLASSIFICATION	1.9192902828929147E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999790090788975	WITHOUT_CLASSIFICATION	2.0990921102581717E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999993200683848	WITHOUT_CLASSIFICATION	6.799316151277951E-7	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999960451387863	WITHOUT_CLASSIFICATION	3.954861213726995E-6	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999982145484281	WITHOUT_CLASSIFICATION	1.7854515718889478E-6	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999944093324649	WITHOUT_CLASSIFICATION	5.590667535088602E-6	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999952556406448	WITHOUT_CLASSIFICATION	4.7443593550915735E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999921352891331	WITHOUT_CLASSIFICATION	7.86471086695884E-6	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999989731057084	WITHOUT_CLASSIFICATION	1.0268942916637344E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999994002488586	WITHOUT_CLASSIFICATION	5.997511413219213E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281012808977	WITHOUT_CLASSIFICATION	7.189871910229626E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999988959254903	WITHOUT_CLASSIFICATION	1.104074509630847E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999645583343588	WITHOUT_CLASSIFICATION	3.544166564112399E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999917755462022	WITHOUT_CLASSIFICATION	8.224453797709997E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999545567008988	WITHOUT_CLASSIFICATION	4.544329910109923E-5	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999980237997037	WITHOUT_CLASSIFICATION	1.9762002962952258E-6	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999735538045713	WITHOUT_CLASSIFICATION	2.6446195428696938E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999777446025728	WITHOUT_CLASSIFICATION	2.2255397427247487E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999777446025728	WITHOUT_CLASSIFICATION	2.2255397427247487E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999645583343588	WITHOUT_CLASSIFICATION	3.544166564112399E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999940376409031	WITHOUT_CLASSIFICATION	5.962359096972461E-6	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999981085038142	WITHOUT_CLASSIFICATION	1.891496185765894E-6	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999407549877131	WITHOUT_CLASSIFICATION	5.92450122868839E-5	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999957641827403	WITHOUT_CLASSIFICATION	4.2358172598079434E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999580558887546	WITHOUT_CLASSIFICATION	4.1944111245304394E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999947404401552	WITHOUT_CLASSIFICATION	5.259559844849583E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999986556108397	WITHOUT_CLASSIFICATION	1.3443891603081174E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999873734868364	WITHOUT_CLASSIFICATION	1.262651316361234E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999737652722	WITHOUT_CLASSIFICATION	2.6234727800987173E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999178710282547	WITHOUT_CLASSIFICATION	8.212897174519725E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999727668948422	WITHOUT_CLASSIFICATION	2.7233105157909583E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999908942293151	WITHOUT_CLASSIFICATION	9.105770684805536E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999850457012268	WITHOUT_CLASSIFICATION	1.4954298773194648E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999965969099369	WITHOUT_CLASSIFICATION	3.403090062973379E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870108330245	WITHOUT_CLASSIFICATION	1.2989166975511314E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999857768274354	WITHOUT_CLASSIFICATION	1.4223172564629049E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999975920019065	WITHOUT_CLASSIFICATION	2.4079980935147917E-6	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999855200641157	WITHOUT_CLASSIFICATION	1.4479935884362098E-5	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974893401192	WITHOUT_CLASSIFICATION	2.5106598807804097E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999674084110328	WITHOUT_CLASSIFICATION	3.25915889672425E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999983923359876	WITHOUT_CLASSIFICATION	1.6076640124159004E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999967615600036	WITHOUT_CLASSIFICATION	3.2384399963570045E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977689467965	WITHOUT_CLASSIFICATION	2.2310532035208557E-6	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687698419302	WITHOUT_CLASSIFICATION	3.123015806976356E-5	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855773551874	WITHOUT_CLASSIFICATION	1.4422644812599249E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998064713995227	WITHOUT_CLASSIFICATION	1.9352860047718438E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999655009681887	WITHOUT_CLASSIFICATION	3.44990318113281E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936337283676	WITHOUT_CLASSIFICATION	6.366271632371048E-6	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776606323351	WITHOUT_CLASSIFICATION	2.2339367664996993E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998845518132	WITHOUT_CLASSIFICATION	1.1544818679389027E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999968208084081	WITHOUT_CLASSIFICATION	3.179191591801624E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999373926137609	WITHOUT_CLASSIFICATION	6.260738623905637E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939495079505	WITHOUT_CLASSIFICATION	6.050492049541398E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972677402418	WITHOUT_CLASSIFICATION	2.7322597582512584E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859471965721	WITHOUT_CLASSIFICATION	1.4052803427851546E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838039338714	WITHOUT_CLASSIFICATION	1.6196066128610504E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999674406156852	WITHOUT_CLASSIFICATION	3.2559384314794186E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956651255189	WITHOUT_CLASSIFICATION	4.3348744811604855E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999769807514458	WITHOUT_CLASSIFICATION	2.3019248554148134E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829352777633	WITHOUT_CLASSIFICATION	1.7064722236763344E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999519658519551	WITHOUT_CLASSIFICATION	4.80341480449628E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809595579529	WITHOUT_CLASSIFICATION	1.904044204716026E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999983271800928	WITHOUT_CLASSIFICATION	1.6728199071971628E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999551599247823	WITHOUT_CLASSIFICATION	4.484007521769474E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998891556123	WITHOUT_CLASSIFICATION	1.1084438765156905E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999940569091	WITHOUT_CLASSIFICATION	5.943090899518966E-7	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999733113662621	WITHOUT_CLASSIFICATION	2.6688633737954634E-5	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999961481210459	WITHOUT_CLASSIFICATION	3.851878954107449E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999746819518065	WITHOUT_CLASSIFICATION	2.5318048193548772E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999980770040832	WITHOUT_CLASSIFICATION	1.9229959167988844E-5	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999758138056344	WITHOUT_CLASSIFICATION	2.4186194365638708E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999976011909267	WITHOUT_CLASSIFICATION	2.3988090732960284E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999185440398551	WITHOUT_CLASSIFICATION	8.14559601449376E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999738259886972	WITHOUT_CLASSIFICATION	2.6174011302745053E-5	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999995621863317	WITHOUT_CLASSIFICATION	4.378136683212545E-7	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999980846280059	WITHOUT_CLASSIFICATION	1.9153719941081083E-6	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999953286258535	WITHOUT_CLASSIFICATION	4.671374146490709E-6	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999743961055967	WITHOUT_CLASSIFICATION	2.5603894403325194E-5	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999989926059304	WITHOUT_CLASSIFICATION	1.0073940696007724E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757304691894	WITHOUT_CLASSIFICATION	2.426953081056826E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881176783567	WITHOUT_CLASSIFICATION	1.1882321643227932E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994274994233354	WITHOUT_CLASSIFICATION	5.725005766645901E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987309701889	WITHOUT_CLASSIFICATION	1.2690298111042308E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999934771020697	WITHOUT_CLASSIFICATION	6.522897930378818E-6	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999949266998109	WITHOUT_CLASSIFICATION	5.073300188989639E-6	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999957140452179	WITHOUT_CLASSIFICATION	4.285954782175614E-6	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999983685096255	WITHOUT_CLASSIFICATION	1.631490374372448E-6	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996389873151	WITHOUT_CLASSIFICATION	3.6101268488957254E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999917117130609	WITHOUT_CLASSIFICATION	8.288286939070168E-6	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999991334642191	WITHOUT_CLASSIFICATION	8.665357809529325E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999954207536462	WITHOUT_CLASSIFICATION	4.579246353750154E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999947534617418	WITHOUT_CLASSIFICATION	5.246538258155972E-6	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999996420040688	WITHOUT_CLASSIFICATION	3.579959312269908E-7	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999985858838367	WITHOUT_CLASSIFICATION	1.4141161632752326E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9987281591317408	WITHOUT_CLASSIFICATION	0.0012718408682592028	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999991090917726	WITHOUT_CLASSIFICATION	8.909082274174967E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999940569091	WITHOUT_CLASSIFICATION	5.943090899518966E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999326209946123	WITHOUT_CLASSIFICATION	6.737900538758162E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999860387109896	WITHOUT_CLASSIFICATION	1.3961289010479413E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999978024290042	WITHOUT_CLASSIFICATION	2.197570995837028E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999950142223294	WITHOUT_CLASSIFICATION	4.985777670584352E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999906377077009	WITHOUT_CLASSIFICATION	9.362292299036285E-6	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999680567939168	WITHOUT_CLASSIFICATION	3.194320608318701E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999879981974951	WITHOUT_CLASSIFICATION	1.2001802504861875E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999927734754176	WITHOUT_CLASSIFICATION	7.2265245824913255E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999716391899003	WITHOUT_CLASSIFICATION	2.8360810099728143E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999882191964415	WITHOUT_CLASSIFICATION	1.1780803558421862E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999899549950688	WITHOUT_CLASSIFICATION	1.0045004931210394E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999856370505245	WITHOUT_CLASSIFICATION	1.4362949475455397E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999930312561282	WITHOUT_CLASSIFICATION	6.96874387181452E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999079681473395	WITHOUT_CLASSIFICATION	9.203185266046413E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999308971242565	WITHOUT_CLASSIFICATION	6.910287574340454E-5	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999990330747154	WITHOUT_CLASSIFICATION	9.669252846388035E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999224350706682	WITHOUT_CLASSIFICATION	7.756492933175682E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999085014969296	WITHOUT_CLASSIFICATION	9.149850307053996E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999801219712446	WITHOUT_CLASSIFICATION	1.9878028755266067E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9996820196506737	WITHOUT_CLASSIFICATION	3.1798034932628317E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999935584846302	WITHOUT_CLASSIFICATION	6.4415153697671715E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999953711576125	WITHOUT_CLASSIFICATION	4.628842387530418E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9995044480336669	WITHOUT_CLASSIFICATION	4.955519663332204E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998805215489766	WITHOUT_CLASSIFICATION	1.1947845102354578E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999776703542305	WITHOUT_CLASSIFICATION	2.2329645769546523E-5	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999096293342354	WITHOUT_CLASSIFICATION	9.037066576457886E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9862657092915731	WITHOUT_CLASSIFICATION	0.013734290708426893	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999862662888741	WITHOUT_CLASSIFICATION	1.3733711125848476E-5	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999736063701984	WITHOUT_CLASSIFICATION	2.6393629801571862E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999897170209698	WITHOUT_CLASSIFICATION	1.0282979030091856E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999940569091	WITHOUT_CLASSIFICATION	5.943090899518966E-7	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999996078341691	WITHOUT_CLASSIFICATION	3.921658309382324E-7	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999999985453402	WITHOUT_CLASSIFICATION	1.454659806051838E-8	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999844372475626	WITHOUT_CLASSIFICATION	1.5562752437398546E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999940569091	WITHOUT_CLASSIFICATION	5.943090899518966E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999896055787437	WITHOUT_CLASSIFICATION	1.0394421256289624E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999935584846302	WITHOUT_CLASSIFICATION	6.4415153697671715E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999881487263376	WITHOUT_CLASSIFICATION	1.1851273662344346E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999990208335039	WITHOUT_CLASSIFICATION	9.79166496173502E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999833160340906	WITHOUT_CLASSIFICATION	1.66839659093381E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999882191964415	WITHOUT_CLASSIFICATION	1.1780803558421862E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999899549950688	WITHOUT_CLASSIFICATION	1.0045004931210394E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999856370505245	WITHOUT_CLASSIFICATION	1.4362949475455397E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999966944109371	WITHOUT_CLASSIFICATION	3.3055890629267367E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999769587832459	WITHOUT_CLASSIFICATION	2.304121675410165E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999462431878242	WITHOUT_CLASSIFICATION	5.375681217580181E-5	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999949526841974	WITHOUT_CLASSIFICATION	5.047315802735205E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999874791954039	WITHOUT_CLASSIFICATION	1.2520804596258313E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.99999940569091	WITHOUT_CLASSIFICATION	5.943090899518966E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999930312561282	WITHOUT_CLASSIFICATION	6.96874387181452E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999079681473395	WITHOUT_CLASSIFICATION	9.203185266046413E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977908480638	WITHOUT_CLASSIFICATION	2.2091519362690546E-6	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995396720017	WITHOUT_CLASSIFICATION	4.603279982269175E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999987655132556	WITHOUT_CLASSIFICATION	1.2344867443512353E-6	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999960528100323	WITHOUT_CLASSIFICATION	3.947189967680784E-6	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999959305560545	WITHOUT_CLASSIFICATION	4.069443945531952E-6	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999755451968801	WITHOUT_CLASSIFICATION	2.445480311992089E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999829352777633	WITHOUT_CLASSIFICATION	1.7064722236763344E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999977326969114	WITHOUT_CLASSIFICATION	2.267303088549624E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999727145234887	WITHOUT_CLASSIFICATION	2.7285476511334267E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999940427170515	WITHOUT_CLASSIFICATION	5.957282948433995E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9977881782353978	WITHOUT_CLASSIFICATION	0.0022118217646022384	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999732886208345	WITHOUT_CLASSIFICATION	2.6711379165474556E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999655009681887	WITHOUT_CLASSIFICATION	3.44990318113281E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936337283676	WITHOUT_CLASSIFICATION	6.366271632371048E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972677402418	WITHOUT_CLASSIFICATION	2.7322597582512584E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999732886208345	WITHOUT_CLASSIFICATION	2.6711379165474556E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9997671083715218	WITHOUT_CLASSIFICATION	2.328916284780802E-4	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999996504617058	WITHOUT_CLASSIFICATION	3.495382941872158E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999246400499702	WITHOUT_CLASSIFICATION	7.535995002986675E-5	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110087694358	WITHOUT_CLASSIFICATION	8.899123056410384E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999980698374851	WITHOUT_CLASSIFICATION	1.93016251499831E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999314380466117	WITHOUT_CLASSIFICATION	6.856195338833589E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859471965721	WITHOUT_CLASSIFICATION	1.4052803427851546E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956651255189	WITHOUT_CLASSIFICATION	4.3348744811604855E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999947534617418	WITHOUT_CLASSIFICATION	5.246538258155972E-6	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999970898166186	WITHOUT_CLASSIFICATION	2.910183381426116E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999986926054981	WITHOUT_CLASSIFICATION	1.3073945019062052E-6	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999612309039938	WITHOUT_CLASSIFICATION	3.876909600627391E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999984603687577	WITHOUT_CLASSIFICATION	1.539631242296326E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999878469467328	WITHOUT_CLASSIFICATION	1.2153053267214836E-5	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999980042592611	WITHOUT_CLASSIFICATION	1.995740738906136E-6	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999989535592384	WITHOUT_CLASSIFICATION	1.0464407616005541E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999737652722	WITHOUT_CLASSIFICATION	2.6234727800987173E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999857871899774	WITHOUT_CLASSIFICATION	1.4212810022565843E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999801213072085	WITHOUT_CLASSIFICATION	1.9878692791574E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999982181099821	WITHOUT_CLASSIFICATION	1.7818900179812677E-6	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999979742382211	WITHOUT_CLASSIFICATION	2.0257617788173866E-6	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999958758892452	WITHOUT_CLASSIFICATION	4.1241107546832454E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999887696406421	WITHOUT_CLASSIFICATION	1.1230359357904495E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948918423006	WITHOUT_CLASSIFICATION	5.108157699461056E-6	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999715063071779	WITHOUT_CLASSIFICATION	2.849369282203431E-5	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999086684697638	WITHOUT_CLASSIFICATION	9.13315302362389E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998656797922278	WITHOUT_CLASSIFICATION	1.343202077721565E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999242922684067	WITHOUT_CLASSIFICATION	7.570773159323373E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998183122895793	WITHOUT_CLASSIFICATION	1.8168771042062284E-4	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999842667527188	WITHOUT_CLASSIFICATION	1.5733247281207165E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999977091968314	WITHOUT_CLASSIFICATION	2.290803168605984E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99997196443631	WITHOUT_CLASSIFICATION	2.803556369013678E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998589971800995	WITHOUT_CLASSIFICATION	1.410028199003772E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998745767782441	WITHOUT_CLASSIFICATION	1.25423221756015E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999904503801386	WITHOUT_CLASSIFICATION	9.549619861515148E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999560901553494	WITHOUT_CLASSIFICATION	4.390984465055703E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999833932919325	WITHOUT_CLASSIFICATION	1.6606708067508414E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967724300749	WITHOUT_CLASSIFICATION	3.22756992510143E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999965980634197	WITHOUT_CLASSIFICATION	3.4019365803003645E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999962174430118	WITHOUT_CLASSIFICATION	3.782556988268256E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999977822554376	WITHOUT_CLASSIFICATION	2.2177445623576826E-6	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.999997991332572	WITHOUT_CLASSIFICATION	2.0086674281635963E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999914078079714	WITHOUT_CLASSIFICATION	8.592192028600261E-6	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999916296061881	WITHOUT_CLASSIFICATION	8.370393811841567E-6	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999988808002013	WITHOUT_CLASSIFICATION	1.1191997986707856E-6	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999994931282973	WITHOUT_CLASSIFICATION	5.068717026928927E-7	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999955816734904	WITHOUT_CLASSIFICATION	4.418326509609977E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999994567467376	WITHOUT_CLASSIFICATION	5.432532622456564E-7	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999023159810069	WITHOUT_CLASSIFICATION	9.768401899316309E-5	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999949102408078	WITHOUT_CLASSIFICATION	5.089759192148755E-6	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999520287724768	WITHOUT_CLASSIFICATION	4.797122752317213E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999651705645658	WITHOUT_CLASSIFICATION	3.4829435434263666E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999743593900038	WITHOUT_CLASSIFICATION	2.5640609996258442E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999975950427331	WITHOUT_CLASSIFICATION	2.4049572668721564E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999982927502743	WITHOUT_CLASSIFICATION	1.7072497257758765E-6	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999768320175618	WITHOUT_CLASSIFICATION	2.3167982438205187E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999984473166728	WITHOUT_CLASSIFICATION	1.5526833272485552E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998274457189658	WITHOUT_CLASSIFICATION	1.7255428103425655E-4	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998490695381119	WITHOUT_CLASSIFICATION	1.5093046188815543E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999899175845167	WITHOUT_CLASSIFICATION	1.00824154833256E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999876890051993	WITHOUT_CLASSIFICATION	1.2310994800722984E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999431369500076	WITHOUT_CLASSIFICATION	5.686304999247325E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999787819681573	WITHOUT_CLASSIFICATION	2.121803184280703E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999880046991966	WITHOUT_CLASSIFICATION	1.1995300803305322E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999989593512173	WITHOUT_CLASSIFICATION	1.0406487826382662E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999963493819048	WITHOUT_CLASSIFICATION	3.6506180952634653E-6	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999747058556597	WITHOUT_CLASSIFICATION	2.52941443402477E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999945130367245	WITHOUT_CLASSIFICATION	5.486963275601623E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995118720962	WITHOUT_CLASSIFICATION	4.881279038282408E-7	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999973786350188	WITHOUT_CLASSIFICATION	2.62136498115843E-6	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999997802329903	WITHOUT_CLASSIFICATION	2.1976700975316252E-7	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998526122723	WITHOUT_CLASSIFICATION	1.4738772770972312E-7	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999284474657868	WITHOUT_CLASSIFICATION	7.15525342131986E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999744486253317	WITHOUT_CLASSIFICATION	2.5551374668279867E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999975147615543	WITHOUT_CLASSIFICATION	2.4852384456688887E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999987622601243	WITHOUT_CLASSIFICATION	1.237739875680119E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999989245547931	WITHOUT_CLASSIFICATION	1.0754452068690668E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999972394126899	WITHOUT_CLASSIFICATION	2.7605873101405107E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999928418416341	WITHOUT_CLASSIFICATION	7.158158365988659E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999976801009802	WITHOUT_CLASSIFICATION	2.3198990198163813E-6	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9977035675244189	WITHOUT_CLASSIFICATION	0.0022964324755811363	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999880788462099	WITHOUT_CLASSIFICATION	1.1921153790104766E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999948959338605	WITHOUT_CLASSIFICATION	5.104066139592173E-6	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9987882662897066	WITHOUT_CLASSIFICATION	0.001211733710293403	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999835991660374	WITHOUT_CLASSIFICATION	1.6400833962578745E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998658988059022	WITHOUT_CLASSIFICATION	1.3410119409791552E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998895569325771	WITHOUT_CLASSIFICATION	1.1044306742291018E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999979406068071	WITHOUT_CLASSIFICATION	2.059393192855908E-6	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999992968163677	WITHOUT_CLASSIFICATION	7.031836323830907E-7	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999701716473536	WITHOUT_CLASSIFICATION	2.9828352646480823E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999956688969286	WITHOUT_CLASSIFICATION	4.331103071343723E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997387685915575	WITHOUT_CLASSIFICATION	2.612314084425346E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999561593135565	WITHOUT_CLASSIFICATION	4.384068644354893E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999989333695343	WITHOUT_CLASSIFICATION	1.0666304656631128E-6	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998585778449085	WITHOUT_CLASSIFICATION	1.4142215509158618E-4	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999972140055748	WITHOUT_CLASSIFICATION	2.785994425134929E-6	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999888951138175	WITHOUT_CLASSIFICATION	1.1104886182422161E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999137654226855	WITHOUT_CLASSIFICATION	8.623457731449562E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999853808907017	WITHOUT_CLASSIFICATION	1.461910929842194E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999911122632255	WITHOUT_CLASSIFICATION	8.887736774443062E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999519256372338	WITHOUT_CLASSIFICATION	4.8074362766124216E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999661459449126	WITHOUT_CLASSIFICATION	3.385405508733741E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999630257779525	WITHOUT_CLASSIFICATION	3.697422204750671E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999595417545921	WITHOUT_CLASSIFICATION	4.0458245407832176E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999559234115992	WITHOUT_CLASSIFICATION	4.407658840069865E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999459759519921	WITHOUT_CLASSIFICATION	5.4024048007998676E-5	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998012181679	WITHOUT_CLASSIFICATION	1.9878183210574586E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999984784782171	WITHOUT_CLASSIFICATION	1.521521782903535E-6	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999290944879022	WITHOUT_CLASSIFICATION	7.090551209775522E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999639479542525	WITHOUT_CLASSIFICATION	3.605204574760963E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999984784782171	WITHOUT_CLASSIFICATION	1.521521782903535E-6	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999871041248454	WITHOUT_CLASSIFICATION	1.2895875154615075E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999584106260814	WITHOUT_CLASSIFICATION	4.158937391867713E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999929870205828	WITHOUT_CLASSIFICATION	7.012979417164967E-6	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999806120632724	WITHOUT_CLASSIFICATION	1.938793672754828E-5	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999938389341345	WITHOUT_CLASSIFICATION	6.1610658653948464E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999660899014167	WITHOUT_CLASSIFICATION	3.3910098583365096E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999246245892267	WITHOUT_CLASSIFICATION	7.537541077333157E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999947963137696	WITHOUT_CLASSIFICATION	5.2036862302953765E-6	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999911591932656	WITHOUT_CLASSIFICATION	8.840806734325444E-6	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999680621152732	WITHOUT_CLASSIFICATION	3.193788472678341E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999954756374015	WITHOUT_CLASSIFICATION	4.524362598500729E-6	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999981675584524	WITHOUT_CLASSIFICATION	1.8324415475679945E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999082852823	WITHOUT_CLASSIFICATION	9.171471768026139E-8	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999827935504942	WITHOUT_CLASSIFICATION	1.7206449505837352E-5	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999922645097071	WITHOUT_CLASSIFICATION	7.735490292949162E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999963496059502	WITHOUT_CLASSIFICATION	3.650394049801483E-6	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999691471874869	WITHOUT_CLASSIFICATION	3.0852812513228156E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999691471874869	WITHOUT_CLASSIFICATION	3.0852812513228156E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999943311424867	WITHOUT_CLASSIFICATION	5.668857513303574E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9994805150827889	WITHOUT_CLASSIFICATION	5.194849172110873E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998408996857483	WITHOUT_CLASSIFICATION	1.591003142517354E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999042042787615	WITHOUT_CLASSIFICATION	9.579572123854713E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9998269639331954	WITHOUT_CLASSIFICATION	1.7303606680463005E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998789670070563	WITHOUT_CLASSIFICATION	1.2103299294364493E-4	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999328759246563	WITHOUT_CLASSIFICATION	6.712407534373429E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.99999630558635	WITHOUT_CLASSIFICATION	3.6944136499321708E-6	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999897502261764	WITHOUT_CLASSIFICATION	1.0249773823616536E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9996978021129199	WITHOUT_CLASSIFICATION	3.021978870800959E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9996690350664905	WITHOUT_CLASSIFICATION	3.3096493350956213E-4	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999926415210306	WITHOUT_CLASSIFICATION	7.358478969352315E-6	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999661353224214	WITHOUT_CLASSIFICATION	3.386467757861671E-5	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999843345611763	WITHOUT_CLASSIFICATION	1.5665438823633318E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9994086838082766	WITHOUT_CLASSIFICATION	5.913161917233019E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999887696406421	WITHOUT_CLASSIFICATION	1.1230359357904495E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998007046436086	WITHOUT_CLASSIFICATION	1.9929535639138949E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999441798346996	WITHOUT_CLASSIFICATION	5.58201653003437E-5	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9991256964408888	WITHOUT_CLASSIFICATION	8.743035591112956E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999924300976568	WITHOUT_CLASSIFICATION	7.56990234322344E-6	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999844868217561	WITHOUT_CLASSIFICATION	1.5513178243933412E-5	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999875881290682	WITHOUT_CLASSIFICATION	1.2411870931760284E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999990252177664	WITHOUT_CLASSIFICATION	9.747822335830985E-7	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998139081957	WITHOUT_CLASSIFICATION	1.8609180418614674E-7	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999977793740698	WITHOUT_CLASSIFICATION	2.2206259303690703E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999991718518778	WITHOUT_CLASSIFICATION	8.281481222529626E-7	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999992805789624	WITHOUT_CLASSIFICATION	7.19421037649571E-7	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9997575539152931	WITHOUT_CLASSIFICATION	2.4244608470686162E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999828118449703	WITHOUT_CLASSIFICATION	1.7188155029664902E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999690987793466	WITHOUT_CLASSIFICATION	3.090122065351466E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999979749913953	WITHOUT_CLASSIFICATION	2.0250086047088214E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999716194155442	WITHOUT_CLASSIFICATION	2.8380584455683878E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999241516674945	WITHOUT_CLASSIFICATION	7.584833250552336E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999915326652291	WITHOUT_CLASSIFICATION	8.46733477093436E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999839678661658	WITHOUT_CLASSIFICATION	1.6032133834063892E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999885707342445	WITHOUT_CLASSIFICATION	1.1429265755513868E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999741590734024	WITHOUT_CLASSIFICATION	2.5840926597634294E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999912728344496	WITHOUT_CLASSIFICATION	8.727165550546489E-6	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999993230920975	WITHOUT_CLASSIFICATION	6.769079025179684E-7	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999959688016354	WITHOUT_CLASSIFICATION	4.031198364622411E-6	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.999888953906585	WITHOUT_CLASSIFICATION	1.1104609341488976E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999972422272397	WITHOUT_CLASSIFICATION	2.75777276025303E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999324621841565	WITHOUT_CLASSIFICATION	6.753781584347562E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999658138107482	WITHOUT_CLASSIFICATION	3.4186189251847315E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9994638752629363	WITHOUT_CLASSIFICATION	5.36124737063694E-4	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999984436597105	WITHOUT_CLASSIFICATION	1.5563402895504051E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943581129922	WITHOUT_CLASSIFICATION	5.6418870078351644E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951329391076	WITHOUT_CLASSIFICATION	4.867060892381142E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852507899791	WITHOUT_CLASSIFICATION	1.4749210020932146E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999841400746492	WITHOUT_CLASSIFICATION	1.5859925350806266E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999950790519497	WITHOUT_CLASSIFICATION	4.920948050169995E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991452641251	WITHOUT_CLASSIFICATION	8.547358748031962E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999991259149775	WITHOUT_CLASSIFICATION	8.740850225958656E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999724837825366	WITHOUT_CLASSIFICATION	2.7516217463477844E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763579639742	WITHOUT_CLASSIFICATION	2.3642036025866238E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999724837825366	WITHOUT_CLASSIFICATION	2.7516217463477844E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999763882143986	WITHOUT_CLASSIFICATION	2.3611785601413436E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999966815088451	WITHOUT_CLASSIFICATION	3.3184911548186573E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999910742397771	WITHOUT_CLASSIFICATION	8.925760222921203E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999995740460475	WITHOUT_CLASSIFICATION	4.259539524997762E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999909662519569	WITHOUT_CLASSIFICATION	9.033748043090288E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999807678374945	WITHOUT_CLASSIFICATION	1.9232162505604095E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999967232456929	WITHOUT_CLASSIFICATION	3.2767543070149345E-6	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999988936676808	WITHOUT_CLASSIFICATION	1.1063323191718286E-6	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999539137047764	WITHOUT_CLASSIFICATION	4.6086295223622206E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999893698697898	WITHOUT_CLASSIFICATION	1.063013021014409E-5	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999109888870803	WITHOUT_CLASSIFICATION	8.901111291972148E-5	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999738399951055	WITHOUT_CLASSIFICATION	2.6160004894528183E-5	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999885313926795	WITHOUT_CLASSIFICATION	1.1468607320529744E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999707382588364	WITHOUT_CLASSIFICATION	2.9261741163540493E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999997501105331	WITHOUT_CLASSIFICATION	2.4988946687085717E-7	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999948887345218	WITHOUT_CLASSIFICATION	5.111265478177683E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999784266425689	WITHOUT_CLASSIFICATION	2.1573357431088052E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999784266425689	WITHOUT_CLASSIFICATION	2.1573357431088052E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999321434149009	WITHOUT_CLASSIFICATION	6.785658509916276E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999546639999352	WITHOUT_CLASSIFICATION	4.533600006492135E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999993803673978	WITHOUT_CLASSIFICATION	6.196326021470067E-7	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999660706167102	WITHOUT_CLASSIFICATION	3.3929383289793634E-4	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999957742258235	WITHOUT_CLASSIFICATION	4.225774176478823E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9996224241663673	WITHOUT_CLASSIFICATION	3.775758336327037E-4	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998568187875887	WITHOUT_CLASSIFICATION	1.4318121241133143E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997311012602207	WITHOUT_CLASSIFICATION	2.688987397792881E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999790965866945	WITHOUT_CLASSIFICATION	2.0903413305571712E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999994522965973	WITHOUT_CLASSIFICATION	5.477034027514533E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999979830168174	WITHOUT_CLASSIFICATION	2.016983182578414E-6	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999801947611627	WITHOUT_CLASSIFICATION	1.9805238837261862E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999915585894457	WITHOUT_CLASSIFICATION	8.441410554308479E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999989236407119	WITHOUT_CLASSIFICATION	1.076359288127667E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999798175182448	WITHOUT_CLASSIFICATION	2.01824817551215E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999947232187597	WITHOUT_CLASSIFICATION	5.276781240272905E-6	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999194924197439	WITHOUT_CLASSIFICATION	8.050758025616741E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9991233335156495	WITHOUT_CLASSIFICATION	8.766664843504355E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999407423838231	WITHOUT_CLASSIFICATION	5.925761617684132E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999992836416757	WITHOUT_CLASSIFICATION	7.163583243410153E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999954917305447	WITHOUT_CLASSIFICATION	4.508269455288499E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999909089477773	WITHOUT_CLASSIFICATION	9.091052222655857E-6	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999995074016663	WITHOUT_CLASSIFICATION	4.925983336138915E-7	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998869172300219	WITHOUT_CLASSIFICATION	1.1308276997816887E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999414015114766	WITHOUT_CLASSIFICATION	5.8598488523484304E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999978883039328	WITHOUT_CLASSIFICATION	2.1116960672114866E-6	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999703401512561	WITHOUT_CLASSIFICATION	2.9659848743942012E-5	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999882712304499	WITHOUT_CLASSIFICATION	1.1728769550084182E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999552001662521	WITHOUT_CLASSIFICATION	4.47998337478234E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999946082908574	WITHOUT_CLASSIFICATION	5.391709142513489E-6	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999947738265741	WITHOUT_CLASSIFICATION	5.226173425831405E-6	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999904214989268	WITHOUT_CLASSIFICATION	9.578501073265058E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999851742688474	WITHOUT_CLASSIFICATION	1.4825731152611502E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999812440528342	WITHOUT_CLASSIFICATION	1.8755947165753915E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999256075734493	WITHOUT_CLASSIFICATION	7.439242655074744E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999950626812435	WITHOUT_CLASSIFICATION	4.937318756442914E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999939540641859	WITHOUT_CLASSIFICATION	6.045935814104029E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999997360313442	WITHOUT_CLASSIFICATION	2.6396865581135173E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999974879402191	WITHOUT_CLASSIFICATION	2.5120597808116764E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999931931987542	WITHOUT_CLASSIFICATION	6.80680124580898E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999975474463609	WITHOUT_CLASSIFICATION	2.4525536390471955E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968884163667	WITHOUT_CLASSIFICATION	3.1115836333209745E-6	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9998293201767896	WITHOUT_CLASSIFICATION	1.7067982321029474E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999467148433302	WITHOUT_CLASSIFICATION	5.328515666973342E-5	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999996082175736	WITHOUT_CLASSIFICATION	3.917824264583167E-7	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999839308349571	WITHOUT_CLASSIFICATION	1.6069165042964414E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9998108364536102	WITHOUT_CLASSIFICATION	1.8916354638971253E-4	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999991674878337	WITHOUT_CLASSIFICATION	8.325121662517717E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999869341071226	WITHOUT_CLASSIFICATION	1.3065892877383647E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999613783803971	WITHOUT_CLASSIFICATION	3.8621619602868445E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956661125418	WITHOUT_CLASSIFICATION	4.333887458234953E-6	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999798201120047	WITHOUT_CLASSIFICATION	2.0179887995298225E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999998701834162	WITHOUT_CLASSIFICATION	1.2981658376492313E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999715291118281	WITHOUT_CLASSIFICATION	2.84708881719505E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998517452096373	WITHOUT_CLASSIFICATION	1.4825479036276553E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999896055787437	WITHOUT_CLASSIFICATION	1.0394421256289624E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999896055787437	WITHOUT_CLASSIFICATION	1.0394421256289624E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999989669203015	WITHOUT_CLASSIFICATION	1.033079698487225E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999724411118084	WITHOUT_CLASSIFICATION	2.7558888191614498E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999771280515124	WITHOUT_CLASSIFICATION	2.2871948487564143E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997253793356967	WITHOUT_CLASSIFICATION	2.74620664303255E-4	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.99994502360058	WITHOUT_CLASSIFICATION	5.497639941993554E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999991840835797	WITHOUT_CLASSIFICATION	8.159164203015435E-6	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999913230906288	WITHOUT_CLASSIFICATION	8.676909371302106E-6	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999955914978327	WITHOUT_CLASSIFICATION	4.408502167281377E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999954378165915	WITHOUT_CLASSIFICATION	4.562183408542249E-6	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999976870176679	WITHOUT_CLASSIFICATION	2.3129823320698154E-6	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999885110482907	WITHOUT_CLASSIFICATION	1.1488951709306675E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999880000216332	WITHOUT_CLASSIFICATION	1.1999978366767037E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998012364756547	WITHOUT_CLASSIFICATION	1.9876352434529157E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999992637903936	WITHOUT_CLASSIFICATION	7.362096063976733E-6	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999442276118746	WITHOUT_CLASSIFICATION	5.577238812528708E-5	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999929380535229	WITHOUT_CLASSIFICATION	7.061946477178433E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999943887831868	WITHOUT_CLASSIFICATION	5.611216813132008E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999812860957681	WITHOUT_CLASSIFICATION	1.8713904231917514E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999954506949058	WITHOUT_CLASSIFICATION	4.5493050941248915E-6	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999809271590482	WITHOUT_CLASSIFICATION	1.9072840951786438E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999965202505522	WITHOUT_CLASSIFICATION	3.4797494478020566E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999897924474348	WITHOUT_CLASSIFICATION	1.020755256521793E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999142694230752	WITHOUT_CLASSIFICATION	8.573057692475358E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999992936935832	WITHOUT_CLASSIFICATION	7.063064169053008E-7	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9995634328256893	WITHOUT_CLASSIFICATION	4.3656717431063674E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999377363095082	WITHOUT_CLASSIFICATION	6.226369049181794E-5	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9991838514022147	WITHOUT_CLASSIFICATION	8.161485977853749E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997954093154343	WITHOUT_CLASSIFICATION	2.0459068456582166E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999744813897744	WITHOUT_CLASSIFICATION	2.5518610225601724E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999142694230752	WITHOUT_CLASSIFICATION	8.573057692475358E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999317773779002	WITHOUT_CLASSIFICATION	6.822262209982895E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999971453679	WITHOUT_CLASSIFICATION	2.8546321832621545E-9	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9996523570019312	WITHOUT_CLASSIFICATION	3.47642998068692E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999899897125439	WITHOUT_CLASSIFICATION	1.0010287456133208E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999674067809	WITHOUT_CLASSIFICATION	3.2593219220828444E-8	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998867832415	WITHOUT_CLASSIFICATION	1.13216758478304E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999751261478101	WITHOUT_CLASSIFICATION	2.4873852189828853E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999177724189	WITHOUT_CLASSIFICATION	8.22275810420755E-8	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9996000748825423	WITHOUT_CLASSIFICATION	3.9992511745773844E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999899897125439	WITHOUT_CLASSIFICATION	1.0010287456133208E-5	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999998067601914	WITHOUT_CLASSIFICATION	1.9323980857252378E-7	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999132167728	WITHOUT_CLASSIFICATION	8.678322717834134E-8	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999988915488858	WITHOUT_CLASSIFICATION	1.1084511142523135E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999046576543166	WITHOUT_CLASSIFICATION	9.534234568343107E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999980135362186	WITHOUT_CLASSIFICATION	1.9864637813509615E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999979830168174	WITHOUT_CLASSIFICATION	2.016983182578414E-6	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998046215592	WITHOUT_CLASSIFICATION	1.9537844072467832E-7	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999995795188135	WITHOUT_CLASSIFICATION	4.20481186421209E-7	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999992871075957	WITHOUT_CLASSIFICATION	7.128924043689028E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999996413317696	WITHOUT_CLASSIFICATION	3.586682303946991E-6	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999863526629253	WITHOUT_CLASSIFICATION	1.3647337074659529E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999986705143801	WITHOUT_CLASSIFICATION	1.3294856199617714E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999515560639654	WITHOUT_CLASSIFICATION	4.84439360345843E-5	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999793696768116	WITHOUT_CLASSIFICATION	2.0630323188347372E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999311484813233	WITHOUT_CLASSIFICATION	6.885151867673136E-5	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999945879618364	WITHOUT_CLASSIFICATION	5.412038163626905E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998858964983202	WITHOUT_CLASSIFICATION	1.1410350167983961E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999554534328983	WITHOUT_CLASSIFICATION	4.4546567101697663E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999738626479933	WITHOUT_CLASSIFICATION	2.61373520067238E-5	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999936026104568	WITHOUT_CLASSIFICATION	6.397389543154644E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999970997962055	WITHOUT_CLASSIFICATION	2.900203794482109E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998653579075972	WITHOUT_CLASSIFICATION	1.3464209240281538E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999963612607542	WITHOUT_CLASSIFICATION	3.638739245804936E-6	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999984241676214	WITHOUT_CLASSIFICATION	1.5758323786605635E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999965465017354	WITHOUT_CLASSIFICATION	3.453498264487397E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.99946710381379	WITHOUT_CLASSIFICATION	5.328961862100048E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997205925095713	WITHOUT_CLASSIFICATION	2.7940749042861787E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999986854709872	WITHOUT_CLASSIFICATION	1.3145290127616352E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999982942239628	WITHOUT_CLASSIFICATION	1.7057760371832412E-6	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999961690213193	WITHOUT_CLASSIFICATION	3.830978680783929E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999611381148376	WITHOUT_CLASSIFICATION	3.8861885162512724E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998603790378656	WITHOUT_CLASSIFICATION	1.3962096213432137E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999913135738991	WITHOUT_CLASSIFICATION	8.686426100898082E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818202323801	WITHOUT_CLASSIFICATION	1.8179767619877645E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999329865008367	WITHOUT_CLASSIFICATION	6.701349916327855E-5	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999992769330025	WITHOUT_CLASSIFICATION	7.23066997477997E-7	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999893569236699	WITHOUT_CLASSIFICATION	1.0643076330142898E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999906141950994	WITHOUT_CLASSIFICATION	9.385804900544986E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999624797269204	WITHOUT_CLASSIFICATION	3.752027307955029E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999624797269204	WITHOUT_CLASSIFICATION	3.752027307955029E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999981527384121	WITHOUT_CLASSIFICATION	1.8472615878150183E-6	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999204287669453	WITHOUT_CLASSIFICATION	7.957123305476701E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999682960570091	WITHOUT_CLASSIFICATION	3.1703942990941136E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999996135622764	WITHOUT_CLASSIFICATION	3.86437723600032E-6	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9998797482361378	WITHOUT_CLASSIFICATION	1.2025176386221545E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999962474390848	WITHOUT_CLASSIFICATION	3.7525609151787588E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999992865811181	WITHOUT_CLASSIFICATION	7.134188819030202E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999873615441083	WITHOUT_CLASSIFICATION	1.26384558917357E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999860373163584	WITHOUT_CLASSIFICATION	1.3962683641707388E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998817129121	WITHOUT_CLASSIFICATION	1.1828708792035984E-7	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999847092529118	WITHOUT_CLASSIFICATION	1.529074708809745E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999985904971629	WITHOUT_CLASSIFICATION	1.4095028370753415E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999908264204576	WITHOUT_CLASSIFICATION	9.1735795423651E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999624797269204	WITHOUT_CLASSIFICATION	3.752027307955029E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999824165592002	WITHOUT_CLASSIFICATION	1.758344079988874E-5	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999966854450907	WITHOUT_CLASSIFICATION	3.3145549092913944E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999987185488416	WITHOUT_CLASSIFICATION	1.2814511584332245E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999985218075481	WITHOUT_CLASSIFICATION	1.4781924518806135E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999918317805289	WITHOUT_CLASSIFICATION	8.168219471025665E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999748562999851	WITHOUT_CLASSIFICATION	2.5143700014941615E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999995479394149	WITHOUT_CLASSIFICATION	4.520605850411269E-7	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999768702106888	WITHOUT_CLASSIFICATION	2.3129789311228673E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999673702426962	WITHOUT_CLASSIFICATION	3.2629757303687305E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998949689162389	WITHOUT_CLASSIFICATION	1.0503108376111618E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999972277281912	WITHOUT_CLASSIFICATION	2.7722718086960793E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818202323801	WITHOUT_CLASSIFICATION	1.8179767619877645E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999624797269204	WITHOUT_CLASSIFICATION	3.752027307955029E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999922936600879	WITHOUT_CLASSIFICATION	7.70633991207079E-6	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999963965851716	WITHOUT_CLASSIFICATION	3.603414828289068E-6	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.999991949829484	WITHOUT_CLASSIFICATION	8.050170515918885E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999756689797976	WITHOUT_CLASSIFICATION	2.4331020202411424E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999967776000636	WITHOUT_CLASSIFICATION	3.222399936380717E-6	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999690079736204	WITHOUT_CLASSIFICATION	3.099202637949674E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999448224862566	WITHOUT_CLASSIFICATION	5.517751374352591E-5	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9998259395643022	WITHOUT_CLASSIFICATION	1.7406043569781411E-4	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999660540512144	WITHOUT_CLASSIFICATION	3.394594878556249E-5	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998230747223277	WITHOUT_CLASSIFICATION	1.769252776723473E-4	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999829066607427	WITHOUT_CLASSIFICATION	1.7093339257321218E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999725835611325	WITHOUT_CLASSIFICATION	2.741643886749603E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999870606727977	WITHOUT_CLASSIFICATION	1.2939327202282898E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999833239845772	WITHOUT_CLASSIFICATION	1.6676015422779533E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999763882143986	WITHOUT_CLASSIFICATION	2.3611785601413436E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999905974067529	WITHOUT_CLASSIFICATION	9.402593247180156E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999958953839531	WITHOUT_CLASSIFICATION	4.104616046913082E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999406590161442	WITHOUT_CLASSIFICATION	5.934098385580362E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999972684457834	WITHOUT_CLASSIFICATION	2.7315542165648733E-6	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999996420783669	WITHOUT_CLASSIFICATION	3.579216330869527E-7	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999776126149488	WITHOUT_CLASSIFICATION	2.238738505119406E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999776126149488	WITHOUT_CLASSIFICATION	2.238738505119406E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999999364277816	WITHOUT_CLASSIFICATION	6.357221840435938E-7	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999984456311534	WITHOUT_CLASSIFICATION	1.554368846665729E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999868785463671	WITHOUT_CLASSIFICATION	1.3121453632847015E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999891298704259	WITHOUT_CLASSIFICATION	1.0870129574095827E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999573503564376	WITHOUT_CLASSIFICATION	4.264964356241459E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999978751167093	WITHOUT_CLASSIFICATION	2.124883290591524E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999690326018716	WITHOUT_CLASSIFICATION	3.0967398128272785E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999134212233489	WITHOUT_CLASSIFICATION	8.657877665117296E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999134212233489	WITHOUT_CLASSIFICATION	8.657877665117296E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9993233125635401	WITHOUT_CLASSIFICATION	6.766874364599729E-4	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999802831732578	WITHOUT_CLASSIFICATION	1.9716826742191543E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999715679900215	WITHOUT_CLASSIFICATION	2.84320099784174E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999435353417191	WITHOUT_CLASSIFICATION	5.646465828092267E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999435353417191	WITHOUT_CLASSIFICATION	5.646465828092267E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999435353417191	WITHOUT_CLASSIFICATION	5.646465828092267E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999565981869676	WITHOUT_CLASSIFICATION	4.340181303237569E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999990383691875	WITHOUT_CLASSIFICATION	9.616308124997546E-6	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999700734632354	WITHOUT_CLASSIFICATION	2.9926536764578773E-5	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9984145367990577	WITHOUT_CLASSIFICATION	0.0015854632009422377	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9997267344504477	WITHOUT_CLASSIFICATION	2.732655495523045E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999624797269204	WITHOUT_CLASSIFICATION	3.752027307955029E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999624797269204	WITHOUT_CLASSIFICATION	3.752027307955029E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999929899847745	WITHOUT_CLASSIFICATION	7.01001522551059E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999997553273652	WITHOUT_CLASSIFICATION	2.4467263484845274E-7	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999143566757397	WITHOUT_CLASSIFICATION	8.564332426037295E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999943793623172	WITHOUT_CLASSIFICATION	5.620637682815795E-6	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999913288376908	WITHOUT_CLASSIFICATION	8.671162309257992E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999693278701676	WITHOUT_CLASSIFICATION	3.067212983242623E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998751606758438	WITHOUT_CLASSIFICATION	1.248393241562348E-4	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999980573955436	WITHOUT_CLASSIFICATION	1.9426044563939812E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999987759728718	WITHOUT_CLASSIFICATION	1.2240271281762008E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999954431571961	WITHOUT_CLASSIFICATION	4.556842803893131E-6	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999729688672094	WITHOUT_CLASSIFICATION	2.70311327905581E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997872844775805	WITHOUT_CLASSIFICATION	2.1271552241948572E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997872844775805	WITHOUT_CLASSIFICATION	2.1271552241948572E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999865835176017	WITHOUT_CLASSIFICATION	1.3416482398298193E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999865835176017	WITHOUT_CLASSIFICATION	1.3416482398298204E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998646282048393	WITHOUT_CLASSIFICATION	1.3537179516060196E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997937313571221	WITHOUT_CLASSIFICATION	2.0626864287798661E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997937313571221	WITHOUT_CLASSIFICATION	2.0626864287798661E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997953540656789	WITHOUT_CLASSIFICATION	2.0464593432118668E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999711957599467	WITHOUT_CLASSIFICATION	2.880424005330523E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998154879159179	WITHOUT_CLASSIFICATION	1.8451208408205294E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999776126149488	WITHOUT_CLASSIFICATION	2.238738505119406E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999782137943858	WITHOUT_CLASSIFICATION	2.1786205614133878E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999711957599467	WITHOUT_CLASSIFICATION	2.880424005330523E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998304178991759	WITHOUT_CLASSIFICATION	1.6958210082402495E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997961986316941	WITHOUT_CLASSIFICATION	2.0380136830579318E-4	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999652214174329	WITHOUT_CLASSIFICATION	3.477858256703388E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999339730607161	WITHOUT_CLASSIFICATION	6.602693928395726E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999984769063028	WITHOUT_CLASSIFICATION	1.523093697244981E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999370633694028	WITHOUT_CLASSIFICATION	6.293663059725812E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999983336333051	WITHOUT_CLASSIFICATION	1.666366694769578E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999829074463659	WITHOUT_CLASSIFICATION	1.7092553634147883E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999922962140914	WITHOUT_CLASSIFICATION	7.703785908744925E-6	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999553674014349	WITHOUT_CLASSIFICATION	4.4632598565166706E-5	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999934274934863	WITHOUT_CLASSIFICATION	6.572506513601492E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999959443834482	WITHOUT_CLASSIFICATION	4.055616551852967E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999985816155674	WITHOUT_CLASSIFICATION	1.4183844326065779E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999922841134533	WITHOUT_CLASSIFICATION	7.715886546651391E-6	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.995272480925084	WITHOUT_CLASSIFICATION	0.004727519074915951	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999984278591616	WITHOUT_CLASSIFICATION	1.5721408384166344E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999982374966494	WITHOUT_CLASSIFICATION	1.7625033505411437E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999979408217702	WITHOUT_CLASSIFICATION	2.0591782298560126E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999979408217702	WITHOUT_CLASSIFICATION	2.0591782298560126E-6	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999980990965724	WITHOUT_CLASSIFICATION	1.9009034276605789E-6	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999983720448045	WITHOUT_CLASSIFICATION	1.627955195645938E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999971910685763	WITHOUT_CLASSIFICATION	2.8089314236896166E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999955588667157	WITHOUT_CLASSIFICATION	4.441133284337595E-6	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999981555538143	WITHOUT_CLASSIFICATION	1.844446185703632E-6	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999994869457299	WITHOUT_CLASSIFICATION	5.1305427010082705E-6	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999719924223639	WITHOUT_CLASSIFICATION	2.8007577636106825E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999974934942788	WITHOUT_CLASSIFICATION	2.5065057212338475E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999933997459419	WITHOUT_CLASSIFICATION	6.600254058136103E-6	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9990054779821883	WITHOUT_CLASSIFICATION	9.945220178117747E-4	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998909558705061	WITHOUT_CLASSIFICATION	1.0904412949386204E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999725835611325	WITHOUT_CLASSIFICATION	2.741643886749603E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999939618769131	WITHOUT_CLASSIFICATION	6.038123086852481E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999998367519195	WITHOUT_CLASSIFICATION	1.6324808047946793E-7	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.99999968990654	WITHOUT_CLASSIFICATION	3.100934600613028E-7	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999919107036324	WITHOUT_CLASSIFICATION	8.089296367581072E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999781187628516	WITHOUT_CLASSIFICATION	2.1881237148491067E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999781187628516	WITHOUT_CLASSIFICATION	2.1881237148491067E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999747440991504	WITHOUT_CLASSIFICATION	2.5255900849583414E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999979585124061	WITHOUT_CLASSIFICATION	2.0414875938273784E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999892650173016	WITHOUT_CLASSIFICATION	1.0734982698335135E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999667854288949	WITHOUT_CLASSIFICATION	3.321457110500784E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999753403278269	WITHOUT_CLASSIFICATION	2.4659672173117224E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999898731785553	WITHOUT_CLASSIFICATION	1.0126821444687225E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9997779960979355	WITHOUT_CLASSIFICATION	2.2200390206455556E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998761266258732	WITHOUT_CLASSIFICATION	1.2387337412681174E-4	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999927619925728	WITHOUT_CLASSIFICATION	7.238007427211142E-6	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999994071937175	WITHOUT_CLASSIFICATION	5.928062824690526E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9994660039729327	WITHOUT_CLASSIFICATION	5.339960270672225E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998761266258732	WITHOUT_CLASSIFICATION	1.2387337412681174E-4	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998912522675767	WITHOUT_CLASSIFICATION	1.0874773242329331E-4	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998128876414855	WITHOUT_CLASSIFICATION	1.8711235851465023E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999983530920902	WITHOUT_CLASSIFICATION	1.6469079098951163E-6	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999468652212178	WITHOUT_CLASSIFICATION	5.313477878218947E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999994696412141	WITHOUT_CLASSIFICATION	5.303587858597675E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999937887927004	WITHOUT_CLASSIFICATION	6.211207299668306E-6	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999990097561509	WITHOUT_CLASSIFICATION	9.90243849083288E-7	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999946218930559	WITHOUT_CLASSIFICATION	5.37810694403332E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999957306669197	WITHOUT_CLASSIFICATION	4.269333080227178E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999989521651031	WITHOUT_CLASSIFICATION	1.0478348968483642E-6	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999990092267361	WITHOUT_CLASSIFICATION	9.90773263853497E-7	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999564608532	WITHOUT_CLASSIFICATION	4.353914688132867E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999766275718911	WITHOUT_CLASSIFICATION	2.337242810891237E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999980530000389	WITHOUT_CLASSIFICATION	1.9469999612097147E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999922169289811	WITHOUT_CLASSIFICATION	7.78307101900409E-6	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999991339481323	WITHOUT_CLASSIFICATION	8.660518675366814E-7	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999987506165261	WITHOUT_CLASSIFICATION	1.2493834738401982E-6	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999956859870255	WITHOUT_CLASSIFICATION	4.314012974497202E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999966171278915	WITHOUT_CLASSIFICATION	3.382872108510559E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999988802097841	WITHOUT_CLASSIFICATION	1.1197902159737633E-6	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999382794252071	WITHOUT_CLASSIFICATION	6.172057479294649E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9986649900544802	WITHOUT_CLASSIFICATION	0.0013350099455198188	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999631017388	WITHOUT_CLASSIFICATION	3.689826119999686E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999701949662334	WITHOUT_CLASSIFICATION	2.980503376665356E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9998236767017101	WITHOUT_CLASSIFICATION	1.7632329828995533E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999762824397049	WITHOUT_CLASSIFICATION	2.3717560295072637E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999910307897852	WITHOUT_CLASSIFICATION	8.969210214769574E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999871961277897	WITHOUT_CLASSIFICATION	1.2803872210332426E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999625932375701	WITHOUT_CLASSIFICATION	3.740676242987838E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9989452211448392	WITHOUT_CLASSIFICATION	0.0010547788551607629	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999884877014669	WITHOUT_CLASSIFICATION	1.1512298533087256E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999918324367677	WITHOUT_CLASSIFICATION	8.16756323237396E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999951069720787	WITHOUT_CLASSIFICATION	4.893027921318603E-6	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999733188742687	WITHOUT_CLASSIFICATION	2.6681125731261798E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999984699538452	WITHOUT_CLASSIFICATION	1.530046154799063E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999920147079758	WITHOUT_CLASSIFICATION	7.985292024212626E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998623942824436	WITHOUT_CLASSIFICATION	1.3760571755637284E-4	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999865967190914	WITHOUT_CLASSIFICATION	1.3403280908511145E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999881990468962	WITHOUT_CLASSIFICATION	1.180095310371562E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999063362317717	WITHOUT_CLASSIFICATION	9.366376822833988E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999909507703749	WITHOUT_CLASSIFICATION	9.049229625102703E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999984928508879	WITHOUT_CLASSIFICATION	1.5071491119904446E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999965668743545	WITHOUT_CLASSIFICATION	3.4331256454266754E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999891991896935	WITHOUT_CLASSIFICATION	1.0800810306498085E-5	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999813959695886	WITHOUT_CLASSIFICATION	1.8604030411384582E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999886633056797	WITHOUT_CLASSIFICATION	1.1336694320295446E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997332818889757	WITHOUT_CLASSIFICATION	2.667181110243421E-4	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999870625310158	WITHOUT_CLASSIFICATION	1.2937468984192293E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999935102972448	WITHOUT_CLASSIFICATION	6.489702755166021E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999990525361738	WITHOUT_CLASSIFICATION	9.474638260502463E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973864591768	WITHOUT_CLASSIFICATION	2.6135408231883153E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999927506174018	WITHOUT_CLASSIFICATION	7.249382598245518E-6	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999961519791799	WITHOUT_CLASSIFICATION	3.848020820185841E-6	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999994229745738	WITHOUT_CLASSIFICATION	5.770254261998356E-6	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999967516935181	WITHOUT_CLASSIFICATION	3.2483064819889406E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999990284376501	WITHOUT_CLASSIFICATION	9.71562349994143E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999818194641228	WITHOUT_CLASSIFICATION	1.8180535877277467E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999998999418943	WITHOUT_CLASSIFICATION	1.0005810570031108E-7	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999912907719712	WITHOUT_CLASSIFICATION	8.709228028731474E-6	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999996075404341	WITHOUT_CLASSIFICATION	3.924595659040376E-6	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999978158811473	WITHOUT_CLASSIFICATION	2.1841188526527737E-6	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999994015904792	WITHOUT_CLASSIFICATION	5.984095208498804E-7	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999876448824817	WITHOUT_CLASSIFICATION	1.2355117518366164E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999922662867138	WITHOUT_CLASSIFICATION	7.733713286156272E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999602660302713	WITHOUT_CLASSIFICATION	3.973396972863765E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999620081794978	WITHOUT_CLASSIFICATION	3.799182050214575E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973864591768	WITHOUT_CLASSIFICATION	2.6135408231883153E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999989662788292	WITHOUT_CLASSIFICATION	1.033721170777336E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999978641709927	WITHOUT_CLASSIFICATION	2.1358290072526723E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999932136629796	WITHOUT_CLASSIFICATION	6.786337020448378E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999984807447438	WITHOUT_CLASSIFICATION	1.5192552561340645E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999818343724431	WITHOUT_CLASSIFICATION	1.8165627556863663E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999983069664877	WITHOUT_CLASSIFICATION	1.6930335123227383E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999927619925728	WITHOUT_CLASSIFICATION	7.238007427211142E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999840867650375	WITHOUT_CLASSIFICATION	1.591323496255096E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999984699538452	WITHOUT_CLASSIFICATION	1.530046154799063E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9996489211315225	WITHOUT_CLASSIFICATION	3.510788684774716E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999965837802934	WITHOUT_CLASSIFICATION	3.416219706608837E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998809683068175	WITHOUT_CLASSIFICATION	1.1903169318244281E-4	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998618875260238	WITHOUT_CLASSIFICATION	1.381124739761324E-4	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999555601478524	WITHOUT_CLASSIFICATION	4.443985214758197E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999988113435393	WITHOUT_CLASSIFICATION	1.188656460702752E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999985790824154	WITHOUT_CLASSIFICATION	1.420917584569502E-6	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999917455331809	WITHOUT_CLASSIFICATION	8.254466819104609E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999985946205635	WITHOUT_CLASSIFICATION	1.4053794365014637E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997177182577	WITHOUT_CLASSIFICATION	2.8228174225554553E-7	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999950823831066	WITHOUT_CLASSIFICATION	4.917616893366822E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999959572988742	WITHOUT_CLASSIFICATION	4.042701125764455E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997347625684	WITHOUT_CLASSIFICATION	2.6523743159659406E-7	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997347625684	WITHOUT_CLASSIFICATION	2.6523743159659406E-7	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999992370144799	WITHOUT_CLASSIFICATION	7.629855201428468E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999796634922598	WITHOUT_CLASSIFICATION	2.0336507740342913E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999680694793	WITHOUT_CLASSIFICATION	3.1930520771200135E-8	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999702420148976	WITHOUT_CLASSIFICATION	2.975798510242293E-5	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999885602396313	WITHOUT_CLASSIFICATION	1.1439760368707305E-5	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999966689076218	WITHOUT_CLASSIFICATION	3.3310923781890296E-6	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999933789392051	WITHOUT_CLASSIFICATION	6.621060794826855E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999994166389699	WITHOUT_CLASSIFICATION	5.833610301121953E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999990393440024	WITHOUT_CLASSIFICATION	9.606559976167837E-7	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999866866963049	WITHOUT_CLASSIFICATION	1.3313303695146463E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999792372647869	WITHOUT_CLASSIFICATION	2.076273521315684E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999583953689928	WITHOUT_CLASSIFICATION	4.160463100727682E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999710477768493	WITHOUT_CLASSIFICATION	2.8952223150770824E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999950545576	WITHOUT_CLASSIFICATION	4.945442320056422E-9	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998950306946984	WITHOUT_CLASSIFICATION	1.0496930530151297E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999857689045775	WITHOUT_CLASSIFICATION	1.4231095422543873E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998321061115456	WITHOUT_CLASSIFICATION	1.6789388845446417E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999865012137561	WITHOUT_CLASSIFICATION	1.3498786243967664E-5	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999952380877815	WITHOUT_CLASSIFICATION	4.761912218640847E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999866206214161	WITHOUT_CLASSIFICATION	1.3379378583923276E-5	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999099558622451	WITHOUT_CLASSIFICATION	9.004413775494488E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999904047278291	WITHOUT_CLASSIFICATION	9.595272170820438E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999965363294586	WITHOUT_CLASSIFICATION	3.4636705413860613E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9998438033067147	WITHOUT_CLASSIFICATION	1.5619669328523176E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999842514468146	WITHOUT_CLASSIFICATION	1.574855318536038E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779155849081	WITHOUT_CLASSIFICATION	2.208441509184708E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999727668948422	WITHOUT_CLASSIFICATION	2.7233105157909583E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999568259454589	WITHOUT_CLASSIFICATION	4.3174054541135365E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999774994124901	WITHOUT_CLASSIFICATION	2.250058750996023E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999857704094482	WITHOUT_CLASSIFICATION	1.4229590551829352E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9862657092915731	WITHOUT_CLASSIFICATION	0.013734290708426893	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996659376660906	WITHOUT_CLASSIFICATION	3.3406233390946246E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999974861807036	WITHOUT_CLASSIFICATION	2.513819296383054E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999980153566834	WITHOUT_CLASSIFICATION	1.9846433166203098E-6	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999723975368394	WITHOUT_CLASSIFICATION	2.760246316054214E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999997843715231	WITHOUT_CLASSIFICATION	2.156284768968725E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999822038232672	WITHOUT_CLASSIFICATION	1.779617673273277E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999924353789739	WITHOUT_CLASSIFICATION	7.564621026097564E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9996145875951616	WITHOUT_CLASSIFICATION	3.854124048383016E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999793713323937	WITHOUT_CLASSIFICATION	2.0628667606251836E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714655228067	WITHOUT_CLASSIFICATION	2.853447719331097E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999990262518822	WITHOUT_CLASSIFICATION	9.737481178145853E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999612922670386	WITHOUT_CLASSIFICATION	3.870773296146154E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999861724354562	WITHOUT_CLASSIFICATION	1.3827564543794221E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999942690625634	WITHOUT_CLASSIFICATION	5.730937436694031E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999246400499702	WITHOUT_CLASSIFICATION	7.535995002986675E-5	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.7433898442229062	WITHOUT_CLASSIFICATION	0.25661015577709373	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999928693251974	WITHOUT_CLASSIFICATION	7.130674802654158E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999993638879592	WITHOUT_CLASSIFICATION	6.361120408769083E-7	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999925955155161	WITHOUT_CLASSIFICATION	7.404484483833468E-6	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993315599949	WITHOUT_CLASSIFICATION	6.684400050985701E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999940652092902	WITHOUT_CLASSIFICATION	5.9347907098102855E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999969869646176	WITHOUT_CLASSIFICATION	3.0130353824824247E-6	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999993805872289	WITHOUT_CLASSIFICATION	6.194127710926202E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999753542961766	WITHOUT_CLASSIFICATION	2.4645703823415607E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999845545910057	WITHOUT_CLASSIFICATION	1.544540899433287E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999864724109886	WITHOUT_CLASSIFICATION	1.3527589011260765E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999394225408745	WITHOUT_CLASSIFICATION	6.057745912539305E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999912519692497	WITHOUT_CLASSIFICATION	8.748030750420022E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999977698889226	WITHOUT_CLASSIFICATION	2.2301110773833954E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999960525590416	WITHOUT_CLASSIFICATION	3.947440958393095E-6	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999944560157866	WITHOUT_CLASSIFICATION	5.543984213318549E-6	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999795377785469	WITHOUT_CLASSIFICATION	2.0462221453192255E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999977122774093	WITHOUT_CLASSIFICATION	2.287722590627862E-6	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999868201234897	WITHOUT_CLASSIFICATION	1.3179876510326688E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999978095577254	WITHOUT_CLASSIFICATION	2.1904422746506277E-6	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999932937822068	WITHOUT_CLASSIFICATION	6.706217793212557E-6	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999828134639827	WITHOUT_CLASSIFICATION	1.7186536017275536E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999971880611287	WITHOUT_CLASSIFICATION	2.811938871310756E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999863373580191	WITHOUT_CLASSIFICATION	1.3662641980879497E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999971880611287	WITHOUT_CLASSIFICATION	2.811938871310756E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999970947684443	WITHOUT_CLASSIFICATION	2.9052315555653775E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999905282575938	WITHOUT_CLASSIFICATION	9.47174240608599E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999291280767293	WITHOUT_CLASSIFICATION	7.087192327072704E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999993223495606	WITHOUT_CLASSIFICATION	6.776504393971452E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999531945817782	WITHOUT_CLASSIFICATION	4.6805418221760876E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9996534619629843	WITHOUT_CLASSIFICATION	3.4653803701568497E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997370336898	WITHOUT_CLASSIFICATION	2.629663101657584E-7	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999701682990484	WITHOUT_CLASSIFICATION	2.983170095153998E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999994475327204	WITHOUT_CLASSIFICATION	5.524672795959915E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999990082600495	WITHOUT_CLASSIFICATION	9.917399505083954E-7	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999626853258055	WITHOUT_CLASSIFICATION	3.7314674194602126E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999748557555316	WITHOUT_CLASSIFICATION	2.5144244468436128E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999948021652197	WITHOUT_CLASSIFICATION	5.197834780213722E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999040591218089	WITHOUT_CLASSIFICATION	9.594087819106425E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999953819849228	WITHOUT_CLASSIFICATION	4.6180150771840535E-6	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999861758044959	WITHOUT_CLASSIFICATION	1.3824195504120305E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999793828526814	WITHOUT_CLASSIFICATION	2.0617147318604658E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999981396835326	WITHOUT_CLASSIFICATION	1.8603164675217767E-6	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999997237561501	WITHOUT_CLASSIFICATION	2.7624384989769688E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999986419963312	WITHOUT_CLASSIFICATION	1.358003668792646E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999767324202893	WITHOUT_CLASSIFICATION	2.3267579710775517E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999881474799508	WITHOUT_CLASSIFICATION	1.1852520049217075E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999975391044326	WITHOUT_CLASSIFICATION	2.460895567507053E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999053192660119	WITHOUT_CLASSIFICATION	9.468073398802309E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999978331874471	WITHOUT_CLASSIFICATION	2.166812552999194E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999928223167457	WITHOUT_CLASSIFICATION	7.177683254282064E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999875775214554	WITHOUT_CLASSIFICATION	1.2422478544542274E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999935246392717	WITHOUT_CLASSIFICATION	6.475360728394334E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999997155082113	WITHOUT_CLASSIFICATION	2.8449178869975193E-6	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999974890680919	WITHOUT_CLASSIFICATION	2.5109319080115905E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999863426049701	WITHOUT_CLASSIFICATION	1.3657395029900497E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999877696500706	WITHOUT_CLASSIFICATION	1.22303499293522E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999998483056751	WITHOUT_CLASSIFICATION	1.516943249953831E-7	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999937600247346	WITHOUT_CLASSIFICATION	6.239975265398956E-6	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999989853956197	WITHOUT_CLASSIFICATION	1.0146043803517463E-6	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999775031970407	WITHOUT_CLASSIFICATION	2.249680295929639E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999938618040048	WITHOUT_CLASSIFICATION	6.138195995169636E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999998383333894	WITHOUT_CLASSIFICATION	1.6166661058808235E-6	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999675255933698	WITHOUT_CLASSIFICATION	3.24744066301462E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999983857503741	WITHOUT_CLASSIFICATION	1.6142496258524403E-6	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999481177793048	WITHOUT_CLASSIFICATION	5.1882220695310506E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999705229419988	WITHOUT_CLASSIFICATION	2.947705800116269E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999844372475626	WITHOUT_CLASSIFICATION	1.5562752437398546E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999928223167457	WITHOUT_CLASSIFICATION	7.177683254282064E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.999837039265385	WITHOUT_CLASSIFICATION	1.6296073461507352E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999852606761732	WITHOUT_CLASSIFICATION	1.4739323826767619E-5	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999776751025148	WITHOUT_CLASSIFICATION	2.2324897485209416E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999938225052869	WITHOUT_CLASSIFICATION	6.177494712984728E-6	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.999996628509342	WITHOUT_CLASSIFICATION	3.3714906580056455E-6	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999921668525991	WITHOUT_CLASSIFICATION	7.833147400842067E-6	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9994817611435706	WITHOUT_CLASSIFICATION	5.182388564294672E-4	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999992675099372	WITHOUT_CLASSIFICATION	7.324900628026285E-7	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999989684876008	WITHOUT_CLASSIFICATION	1.0315123992398005E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998694208615881	WITHOUT_CLASSIFICATION	1.3057913841189924E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999804105039324	WITHOUT_CLASSIFICATION	1.9589496067558096E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999828572962169	WITHOUT_CLASSIFICATION	1.714270378306423E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999825205141895	WITHOUT_CLASSIFICATION	1.747948581054969E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999593991638278	WITHOUT_CLASSIFICATION	4.060083617222863E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999995616189315	WITHOUT_CLASSIFICATION	4.383810685081943E-6	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999986100488366	WITHOUT_CLASSIFICATION	1.3899511634350825E-6	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999821840483084	WITHOUT_CLASSIFICATION	1.7815951691536963E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999894808630847	WITHOUT_CLASSIFICATION	1.0519136915317317E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999997427974684	WITHOUT_CLASSIFICATION	2.572025316254101E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.999837039265385	WITHOUT_CLASSIFICATION	1.6296073461507352E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999766821955836	WITHOUT_CLASSIFICATION	2.331780441637384E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999155361113677	WITHOUT_CLASSIFICATION	8.446388863233001E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999976178521811	WITHOUT_CLASSIFICATION	2.3821478189109882E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999866679576904	WITHOUT_CLASSIFICATION	1.3332042309604665E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999905595750943	WITHOUT_CLASSIFICATION	9.440424905652441E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9999153810861029	WITHOUT_CLASSIFICATION	8.461891389712891E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9999153810861029	WITHOUT_CLASSIFICATION	8.461891389712891E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999958575196464	WITHOUT_CLASSIFICATION	4.142480353656779E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9999153810861029	WITHOUT_CLASSIFICATION	8.461891389712891E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9999153810861029	WITHOUT_CLASSIFICATION	8.461891389712891E-5	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9993031225615374	WITHOUT_CLASSIFICATION	6.968774384624722E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999990952902786	WITHOUT_CLASSIFICATION	9.047097211990062E-7	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999829577348451	WITHOUT_CLASSIFICATION	1.7042265154854752E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999907619935874	WITHOUT_CLASSIFICATION	9.238006412720436E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999936575257661	WITHOUT_CLASSIFICATION	6.342474233973877E-6	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999777077861919	WITHOUT_CLASSIFICATION	2.2292213808061265E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996041710438948	WITHOUT_CLASSIFICATION	3.9582895610527815E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999786144450327	WITHOUT_CLASSIFICATION	2.1385554967296476E-5	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999251428993353	WITHOUT_CLASSIFICATION	7.485710066462589E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999971805431661	WITHOUT_CLASSIFICATION	2.8194568339185398E-6	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999920697389364	WITHOUT_CLASSIFICATION	7.930261063735991E-6	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999771066056848	WITHOUT_CLASSIFICATION	2.289339431515464E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999986710369184	WITHOUT_CLASSIFICATION	1.3289630816523684E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999981354410095	WITHOUT_CLASSIFICATION	1.8645589905870315E-6	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999997680774793	WITHOUT_CLASSIFICATION	2.3192252070060434E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999818238245086	WITHOUT_CLASSIFICATION	1.8176175491321643E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991452641251	WITHOUT_CLASSIFICATION	8.547358748031962E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998412897899985	WITHOUT_CLASSIFICATION	1.5871021000145145E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999792966531346	WITHOUT_CLASSIFICATION	2.0703346865428285E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999987307849582	WITHOUT_CLASSIFICATION	1.2692150418320893E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999937561002913	WITHOUT_CLASSIFICATION	6.2438997086973375E-6	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999632451521	WITHOUT_CLASSIFICATION	3.6754847899917915E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991452641251	WITHOUT_CLASSIFICATION	8.547358748031962E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999875775214554	WITHOUT_CLASSIFICATION	1.2422478544542274E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.999987726907461	WITHOUT_CLASSIFICATION	1.2273092539017969E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99997196443631	WITHOUT_CLASSIFICATION	2.803556369013678E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999904503801386	WITHOUT_CLASSIFICATION	9.549619861515148E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999852306470776	WITHOUT_CLASSIFICATION	1.4769352922489515E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999953401881682	WITHOUT_CLASSIFICATION	4.659811831866553E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999989349313416	WITHOUT_CLASSIFICATION	1.0650686583143803E-6	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999953146772145	WITHOUT_CLASSIFICATION	4.685322785550121E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999976016391471	WITHOUT_CLASSIFICATION	2.3983608530112397E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998945750266884	WITHOUT_CLASSIFICATION	1.0542497331149942E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999650812190941	WITHOUT_CLASSIFICATION	3.491878090595941E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999785124510631	WITHOUT_CLASSIFICATION	2.1487548936992985E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999711921723423	WITHOUT_CLASSIFICATION	2.8807827657708642E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999924935884416	WITHOUT_CLASSIFICATION	7.506411558544682E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998988599783888	WITHOUT_CLASSIFICATION	1.0114002161125988E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999653616721074	WITHOUT_CLASSIFICATION	3.463832789256034E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999907490840045	WITHOUT_CLASSIFICATION	9.250915995475115E-6	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999940683954817	WITHOUT_CLASSIFICATION	5.931604518400031E-6	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999995884456127	WITHOUT_CLASSIFICATION	4.1155438739684736E-7	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999988679633339	WITHOUT_CLASSIFICATION	1.1320366660875486E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999792968023614	WITHOUT_CLASSIFICATION	2.0703197638481347E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999590348261321	WITHOUT_CLASSIFICATION	4.0965173867903065E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999998264122171	WITHOUT_CLASSIFICATION	1.7358778291073143E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999976016391471	WITHOUT_CLASSIFICATION	2.3983608530112397E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999977900677037	WITHOUT_CLASSIFICATION	2.209932296284673E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999739317771281	WITHOUT_CLASSIFICATION	2.6068222871776036E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999747057327296	WITHOUT_CLASSIFICATION	2.529426727038449E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999997600222708	WITHOUT_CLASSIFICATION	2.3997772919382065E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909345851067	WITHOUT_CLASSIFICATION	9.065414893404414E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999846210124526	WITHOUT_CLASSIFICATION	1.5378987547390462E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999875741668222	WITHOUT_CLASSIFICATION	1.2425833177855078E-5	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999904476888191	WITHOUT_CLASSIFICATION	9.55231118090938E-6	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999815363082631	WITHOUT_CLASSIFICATION	1.8463691736792994E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999813984530924	WITHOUT_CLASSIFICATION	1.8601546907548668E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999689691673648	WITHOUT_CLASSIFICATION	3.103083263525986E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999948976880656	WITHOUT_CLASSIFICATION	5.1023119343509145E-6	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999985858545433	WITHOUT_CLASSIFICATION	1.4141454568070465E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999686737995301	WITHOUT_CLASSIFICATION	3.132620046993377E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999748836711525	WITHOUT_CLASSIFICATION	2.511632884752904E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9995813753447348	WITHOUT_CLASSIFICATION	4.186246552652648E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999785109743479	WITHOUT_CLASSIFICATION	2.1489025652132467E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999689691673648	WITHOUT_CLASSIFICATION	3.103083263525986E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999920925909142	WITHOUT_CLASSIFICATION	7.907409085858693E-6	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999357373912837	WITHOUT_CLASSIFICATION	6.426260871632586E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999800287615717	WITHOUT_CLASSIFICATION	1.9971238428341072E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999971616035369	WITHOUT_CLASSIFICATION	2.838396463088913E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999940897626612	WITHOUT_CLASSIFICATION	5.910237338682643E-6	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999985217086174	WITHOUT_CLASSIFICATION	1.4782913825991647E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999748836711525	WITHOUT_CLASSIFICATION	2.511632884752904E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999996652634644	WITHOUT_CLASSIFICATION	3.3473653563458313E-7	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981997406554	WITHOUT_CLASSIFICATION	1.8002593446431274E-6	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991822025487	WITHOUT_CLASSIFICATION	8.177974512919293E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877020372843	WITHOUT_CLASSIFICATION	1.2297962715599174E-5	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997749358646087	WITHOUT_CLASSIFICATION	2.2506413539133817E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998808699110583	WITHOUT_CLASSIFICATION	1.1913008894160792E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999873872634565	WITHOUT_CLASSIFICATION	1.2612736543527262E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999873872634565	WITHOUT_CLASSIFICATION	1.2612736543527262E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999983123468733	WITHOUT_CLASSIFICATION	1.6876531266953856E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.99999362631913	WITHOUT_CLASSIFICATION	6.373680869894999E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999951078652358	WITHOUT_CLASSIFICATION	4.892134764197196E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999979958773917	WITHOUT_CLASSIFICATION	2.0041226083022487E-6	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999829173242978	WITHOUT_CLASSIFICATION	1.708267570221267E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990794526162	WITHOUT_CLASSIFICATION	9.205473837917272E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777255846906	WITHOUT_CLASSIFICATION	2.2274415309383533E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955109942104	WITHOUT_CLASSIFICATION	4.489005789563853E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999991378415787	WITHOUT_CLASSIFICATION	8.621584213640954E-7	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987309235597	WITHOUT_CLASSIFICATION	1.2690764403018776E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990794526162	WITHOUT_CLASSIFICATION	9.205473837917272E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777255846906	WITHOUT_CLASSIFICATION	2.2274415309383533E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955109942104	WITHOUT_CLASSIFICATION	4.489005789563853E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.999992476850978	WITHOUT_CLASSIFICATION	7.523149021944637E-6	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9997976949173557	WITHOUT_CLASSIFICATION	2.0230508264423687E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999970073966026	WITHOUT_CLASSIFICATION	2.9926033973885377E-6	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999879187037338	WITHOUT_CLASSIFICATION	1.2081296266113176E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999993838361565	WITHOUT_CLASSIFICATION	6.16163843585374E-7	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999995614287854	WITHOUT_CLASSIFICATION	4.385712145936656E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997669849510872	WITHOUT_CLASSIFICATION	2.3301504891285786E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.998716854477659	WITHOUT_CLASSIFICATION	0.0012831455223409566	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9997928364197054	WITHOUT_CLASSIFICATION	2.0716358029457916E-4	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999846460331245	WITHOUT_CLASSIFICATION	1.535396687544951E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999919378974854	WITHOUT_CLASSIFICATION	8.06210251456589E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999410669541242	WITHOUT_CLASSIFICATION	5.893304587569413E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9976358542550823	WITHOUT_CLASSIFICATION	0.0023641457449176495	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999975346166076	WITHOUT_CLASSIFICATION	2.4653833924494857E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999984420867162	WITHOUT_CLASSIFICATION	1.557913283751839E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999497532341637	WITHOUT_CLASSIFICATION	5.024676583629892E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999334943089273	WITHOUT_CLASSIFICATION	6.650569107267795E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998731040746275	WITHOUT_CLASSIFICATION	1.2689592537253391E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999933863649395	WITHOUT_CLASSIFICATION	6.613635060406118E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999267075537435	WITHOUT_CLASSIFICATION	7.32924462565013E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999987464186273	WITHOUT_CLASSIFICATION	1.2535813726960378E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999933019753561	WITHOUT_CLASSIFICATION	6.698024643917982E-6	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9994706445640026	WITHOUT_CLASSIFICATION	5.293554359974294E-4	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999680087983407	WITHOUT_CLASSIFICATION	3.1991201659358794E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.99999994974229	WITHOUT_CLASSIFICATION	5.025771011179593E-8	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999264531495591	WITHOUT_CLASSIFICATION	7.354685044098009E-5	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875620095253	WITHOUT_CLASSIFICATION	1.2437990474604095E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683710967399	WITHOUT_CLASSIFICATION	3.162890326023636E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999766797957556	WITHOUT_CLASSIFICATION	2.332020424450343E-5	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998379550019	WITHOUT_CLASSIFICATION	1.6204499809909632E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999683216056111	WITHOUT_CLASSIFICATION	3.167839438885615E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999853808907017	WITHOUT_CLASSIFICATION	1.461910929842194E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999853808907017	WITHOUT_CLASSIFICATION	1.461910929842194E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999963953620981	WITHOUT_CLASSIFICATION	3.6046379018827573E-6	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999920837294645	WITHOUT_CLASSIFICATION	7.916270535485298E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999959340713452	WITHOUT_CLASSIFICATION	4.065928654803996E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999725835611325	WITHOUT_CLASSIFICATION	2.741643886749603E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999741135744088	WITHOUT_CLASSIFICATION	2.5886425591199332E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999988932384533	WITHOUT_CLASSIFICATION	1.1067615466684257E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999422461847357	WITHOUT_CLASSIFICATION	5.7753815264273985E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999950387499709	WITHOUT_CLASSIFICATION	4.961250029130416E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999459759519921	WITHOUT_CLASSIFICATION	5.4024048007998676E-5	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707442546252	WITHOUT_CLASSIFICATION	2.925574537479691E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727025622532	WITHOUT_CLASSIFICATION	2.7297437746836534E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940624179825	WITHOUT_CLASSIFICATION	5.9375820174898646E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781952887955	WITHOUT_CLASSIFICATION	2.1804711204446315E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999872807092289	WITHOUT_CLASSIFICATION	1.2719290771031848E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999529298864582	WITHOUT_CLASSIFICATION	4.7070113541860526E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726187073518	WITHOUT_CLASSIFICATION	2.7381292648195886E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555336333212	WITHOUT_CLASSIFICATION	4.446636667882326E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762017429824	WITHOUT_CLASSIFICATION	2.3798257017538367E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707671901067	WITHOUT_CLASSIFICATION	2.9232809893301292E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856608942608	WITHOUT_CLASSIFICATION	1.4339105739239678E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999991370898985	WITHOUT_CLASSIFICATION	8.629101014877693E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999761875671407	WITHOUT_CLASSIFICATION	2.381243285931437E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999642423737967	WITHOUT_CLASSIFICATION	3.57576262033288E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999897400068113	WITHOUT_CLASSIFICATION	1.0259993188770768E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999989530808491	WITHOUT_CLASSIFICATION	1.046919150896302E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999925323792677	WITHOUT_CLASSIFICATION	7.467620732295107E-6	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999958605156112	WITHOUT_CLASSIFICATION	4.139484388813143E-6	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9953894558394216	WITHOUT_CLASSIFICATION	0.004610544160578375	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999642423737967	WITHOUT_CLASSIFICATION	3.57576262033288E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999642423737967	WITHOUT_CLASSIFICATION	3.57576262033288E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999916867629227	WITHOUT_CLASSIFICATION	8.313237077326375E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999984322209692	WITHOUT_CLASSIFICATION	1.567779030840849E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999995131328575	WITHOUT_CLASSIFICATION	4.868671425277596E-7	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999813252888642	WITHOUT_CLASSIFICATION	1.8674711135849132E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999985816155674	WITHOUT_CLASSIFICATION	1.4183844326065779E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999267075537435	WITHOUT_CLASSIFICATION	7.32924462565013E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999975143899577	WITHOUT_CLASSIFICATION	2.4856100423418034E-6	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999752224421916	WITHOUT_CLASSIFICATION	2.477755780829117E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999883611213269	WITHOUT_CLASSIFICATION	1.1638878673152853E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944181269534	WITHOUT_CLASSIFICATION	5.581873046610474E-6	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999994436041403	WITHOUT_CLASSIFICATION	5.563958596764518E-7	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835951009651	WITHOUT_CLASSIFICATION	1.6404899034867193E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999093036775883	WITHOUT_CLASSIFICATION	9.069632241168393E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999093036775883	WITHOUT_CLASSIFICATION	9.069632241168393E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999468842644144	WITHOUT_CLASSIFICATION	5.3115735585672684E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999468842644144	WITHOUT_CLASSIFICATION	5.3115735585672684E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855521538035	WITHOUT_CLASSIFICATION	1.4447846196602114E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893705469712	WITHOUT_CLASSIFICATION	1.0629453028842758E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999446741524275	WITHOUT_CLASSIFICATION	5.5325847572621425E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894835677998	WITHOUT_CLASSIFICATION	1.0516432200150362E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999960442819495	WITHOUT_CLASSIFICATION	3.9557180504827505E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999277994527	WITHOUT_CLASSIFICATION	7.220054729997099E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911923226685	WITHOUT_CLASSIFICATION	8.80767733138486E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997247798703	WITHOUT_CLASSIFICATION	2.752201297016847E-6	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999500273674027	WITHOUT_CLASSIFICATION	4.99726325973816E-5	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999978806974414	WITHOUT_CLASSIFICATION	2.119302558600878E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999989345147362	WITHOUT_CLASSIFICATION	1.0654852637946305E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999980063081692	WITHOUT_CLASSIFICATION	1.9936918308132925E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999794051646876	WITHOUT_CLASSIFICATION	2.059483531235891E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999932088067858	WITHOUT_CLASSIFICATION	6.791193214314429E-6	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999847003926519	WITHOUT_CLASSIFICATION	1.52996073480532E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999907499525217	WITHOUT_CLASSIFICATION	9.250047478399489E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999907499525217	WITHOUT_CLASSIFICATION	9.250047478399489E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999904801056	WITHOUT_CLASSIFICATION	9.519894341994601E-9	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9997287547365368	WITHOUT_CLASSIFICATION	2.71245263463248E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999977597930468	WITHOUT_CLASSIFICATION	2.2402069531948903E-6	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999724412550401	WITHOUT_CLASSIFICATION	2.755874495980858E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963803985916	WITHOUT_CLASSIFICATION	3.619601408310456E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810389087637	WITHOUT_CLASSIFICATION	1.8961091236299637E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999754358171253	WITHOUT_CLASSIFICATION	2.4564182874631546E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853930788144	WITHOUT_CLASSIFICATION	1.4606921185653728E-5	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999539432734362	WITHOUT_CLASSIFICATION	4.605672656370822E-5	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999984597070255	WITHOUT_CLASSIFICATION	1.5402929743866956E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999999879682673	WITHOUT_CLASSIFICATION	1.203173269705619E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9980310425244147	WITHOUT_CLASSIFICATION	0.0019689574755853705	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999281012808977	WITHOUT_CLASSIFICATION	7.189871910229626E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999959120439152	WITHOUT_CLASSIFICATION	4.087956084821635E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999976821329033	WITHOUT_CLASSIFICATION	2.317867096666214E-6	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999904622616227	WITHOUT_CLASSIFICATION	9.537738377263117E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999967376056578	WITHOUT_CLASSIFICATION	3.262394342190391E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999726009597898	WITHOUT_CLASSIFICATION	2.739904021027208E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999753901963307	WITHOUT_CLASSIFICATION	2.4609803669279286E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999950018145406	WITHOUT_CLASSIFICATION	4.998185459395453E-6	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999931846812968	WITHOUT_CLASSIFICATION	6.815318703192565E-6	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999528625287	WITHOUT_CLASSIFICATION	4.713747121208753E-8	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998244822402	WITHOUT_CLASSIFICATION	1.7551775984612683E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999111817865893	WITHOUT_CLASSIFICATION	8.88182134107433E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999955070636811	WITHOUT_CLASSIFICATION	4.4929363189114376E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999320220392776	WITHOUT_CLASSIFICATION	6.797796072252118E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999940828014466	WITHOUT_CLASSIFICATION	5.917198553278696E-6	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999977363794473	WITHOUT_CLASSIFICATION	2.2636205526366196E-6	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999989555322729	WITHOUT_CLASSIFICATION	1.0444677271440528E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999915326652291	WITHOUT_CLASSIFICATION	8.46733477093436E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999640334911096	WITHOUT_CLASSIFICATION	3.596650889034923E-5	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999962834574386	WITHOUT_CLASSIFICATION	3.7165425612695454E-6	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999841329287729	WITHOUT_CLASSIFICATION	1.586707122714057E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999796574807872	WITHOUT_CLASSIFICATION	2.034251921286508E-5	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999839556529078	WITHOUT_CLASSIFICATION	1.604434709214149E-5	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999988601461575	WITHOUT_CLASSIFICATION	1.1398538425379402E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999943887831868	WITHOUT_CLASSIFICATION	5.611216813132008E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999927770047561	WITHOUT_CLASSIFICATION	7.222995244023442E-6	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999955044165918	WITHOUT_CLASSIFICATION	4.495583408276853E-6	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999096176132082	WITHOUT_CLASSIFICATION	9.038238679181145E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999580075432531	WITHOUT_CLASSIFICATION	4.199245674689739E-5	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999936686584341	WITHOUT_CLASSIFICATION	6.331341565917915E-6	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999951912461778	WITHOUT_CLASSIFICATION	4.8087538221904825E-6	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999950221985621	WITHOUT_CLASSIFICATION	4.977801437993263E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999962079908314	WITHOUT_CLASSIFICATION	3.7920091685563694E-6	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998970331255702	WITHOUT_CLASSIFICATION	1.0296687442972132E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999811905658752	WITHOUT_CLASSIFICATION	1.8809434124863657E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999784266425689	WITHOUT_CLASSIFICATION	2.1573357431088052E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999135691828082	WITHOUT_CLASSIFICATION	8.643081719188999E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999758476783109	WITHOUT_CLASSIFICATION	2.4152321689098636E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999989203093891	WITHOUT_CLASSIFICATION	1.0796906108530736E-6	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9995831013733231	WITHOUT_CLASSIFICATION	4.1689862667690554E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999765395910923	WITHOUT_CLASSIFICATION	2.3460408907742853E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999977075965744	WITHOUT_CLASSIFICATION	2.292403425641334E-6	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999955797580152	WITHOUT_CLASSIFICATION	4.420241984801049E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999845529860211	WITHOUT_CLASSIFICATION	1.5447013978918212E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9990696101764115	WITHOUT_CLASSIFICATION	9.303898235885521E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999927417174378	WITHOUT_CLASSIFICATION	7.25828256225519E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9998434435359589	WITHOUT_CLASSIFICATION	1.5655646404108908E-4	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9996681745549147	WITHOUT_CLASSIFICATION	3.3182544508526335E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999962558138961	WITHOUT_CLASSIFICATION	3.7441861039900055E-6	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999992083680285	WITHOUT_CLASSIFICATION	7.91631971516779E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999994686012605	WITHOUT_CLASSIFICATION	5.313987394240665E-7	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999769978434001	WITHOUT_CLASSIFICATION	2.300215659991407E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999981718602575	WITHOUT_CLASSIFICATION	1.8281397424576156E-6	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999753445690119	WITHOUT_CLASSIFICATION	2.4655430987962685E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999949929768853	WITHOUT_CLASSIFICATION	5.0070231146272155E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999902062509866	WITHOUT_CLASSIFICATION	9.79374901352853E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999142694230752	WITHOUT_CLASSIFICATION	8.573057692475358E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999142694230752	WITHOUT_CLASSIFICATION	8.573057692475358E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999828568617287	WITHOUT_CLASSIFICATION	1.714313827133028E-5	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999955116827058	WITHOUT_CLASSIFICATION	4.488317294181795E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999918050845167	WITHOUT_CLASSIFICATION	8.194915483315781E-6	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999992131922393	WITHOUT_CLASSIFICATION	7.868077607047563E-6	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999945363431231	WITHOUT_CLASSIFICATION	5.4636568769223195E-6	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999735446193752	WITHOUT_CLASSIFICATION	2.6455380624874883E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999950869070044	WITHOUT_CLASSIFICATION	4.913092995568244E-6	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999993086807404	WITHOUT_CLASSIFICATION	6.913192596062962E-6	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999280046610934	WITHOUT_CLASSIFICATION	7.1995338906552E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999967684046501	WITHOUT_CLASSIFICATION	3.2315953498494704E-6	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999956400961998	WITHOUT_CLASSIFICATION	4.359903800251133E-6	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999991429877816	WITHOUT_CLASSIFICATION	8.570122183618571E-7	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999849140686857	WITHOUT_CLASSIFICATION	1.508593131422256E-5	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999952832221735	WITHOUT_CLASSIFICATION	4.716777826508758E-6	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999441137759405	WITHOUT_CLASSIFICATION	5.588622405955727E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9996008837733519	WITHOUT_CLASSIFICATION	3.991162266481425E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999764411633815	WITHOUT_CLASSIFICATION	2.3558836618572495E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998990988124548	WITHOUT_CLASSIFICATION	1.0090118754521164E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9996095716613357	WITHOUT_CLASSIFICATION	3.904283386642479E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999947084899354	WITHOUT_CLASSIFICATION	5.291510064645126E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999943911422967	WITHOUT_CLASSIFICATION	5.608857703295455E-6	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999995424042242	WITHOUT_CLASSIFICATION	4.575957758033988E-6	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998899508611558	WITHOUT_CLASSIFICATION	1.1004913884412945E-4	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999903230932252	WITHOUT_CLASSIFICATION	9.676906774707142E-6	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999994903228886	WITHOUT_CLASSIFICATION	5.096771113716934E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999511703229279	WITHOUT_CLASSIFICATION	4.882967707214263E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999428674508283	WITHOUT_CLASSIFICATION	5.7132549171803296E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999950075653768	WITHOUT_CLASSIFICATION	4.992434623187463E-5	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999868596635807	WITHOUT_CLASSIFICATION	1.3140336419337205E-5	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999964033044692	WITHOUT_CLASSIFICATION	3.596695530875692E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999982383508249	WITHOUT_CLASSIFICATION	1.761649175077226E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999751695094556	WITHOUT_CLASSIFICATION	2.483049054443796E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999965856577833	WITHOUT_CLASSIFICATION	3.4143422166746705E-6	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999853115229858	WITHOUT_CLASSIFICATION	1.4688477014242946E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999986097861416	WITHOUT_CLASSIFICATION	1.3902138583748783E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999986097861416	WITHOUT_CLASSIFICATION	1.3902138583748783E-6	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999836397191119	WITHOUT_CLASSIFICATION	1.636028088816471E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999427902202289	WITHOUT_CLASSIFICATION	5.720977977116111E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999877478517828	WITHOUT_CLASSIFICATION	1.2252148217132926E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999877057606759	WITHOUT_CLASSIFICATION	1.2294239324085268E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999963004061238	WITHOUT_CLASSIFICATION	3.699593876210335E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999957414330611	WITHOUT_CLASSIFICATION	4.258566938809762E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999827460322691	WITHOUT_CLASSIFICATION	1.7253967730957366E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999402661223	WITHOUT_CLASSIFICATION	5.973387769794612E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999392785748503	WITHOUT_CLASSIFICATION	6.07214251497436E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999740873320485	WITHOUT_CLASSIFICATION	2.5912667951471185E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998901150019	WITHOUT_CLASSIFICATION	1.0988499805671136E-7	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999996108987494	WITHOUT_CLASSIFICATION	3.8910125052563963E-7	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999979278713957	WITHOUT_CLASSIFICATION	2.0721286042419783E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999992970395495	WITHOUT_CLASSIFICATION	7.029604504865508E-7	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999993243490145	WITHOUT_CLASSIFICATION	6.75650985507505E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999982885514831	WITHOUT_CLASSIFICATION	1.7114485168636376E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999982885514831	WITHOUT_CLASSIFICATION	1.7114485168636376E-6	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999894509360964	WITHOUT_CLASSIFICATION	1.0549063903604932E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999985264060092	WITHOUT_CLASSIFICATION	1.4735939907916645E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999979966547792	WITHOUT_CLASSIFICATION	2.0033452209029923E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999988560637904	WITHOUT_CLASSIFICATION	1.1439362096132507E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997954093154343	WITHOUT_CLASSIFICATION	2.0459068456582166E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999779790617327	WITHOUT_CLASSIFICATION	2.202093826738662E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999849032321511	WITHOUT_CLASSIFICATION	1.5096767849089503E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999849032321511	WITHOUT_CLASSIFICATION	1.5096767849089503E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999943572467811	WITHOUT_CLASSIFICATION	5.642753218869353E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999996756935141	WITHOUT_CLASSIFICATION	3.2430648593113186E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999971483019591	WITHOUT_CLASSIFICATION	2.8516980408933026E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999983445833891	WITHOUT_CLASSIFICATION	1.6554166108001064E-6	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9998787786345036	WITHOUT_CLASSIFICATION	1.2122136549633034E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999046576543166	WITHOUT_CLASSIFICATION	9.534234568343107E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999993847601856	WITHOUT_CLASSIFICATION	6.152398145224083E-7	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998154879159179	WITHOUT_CLASSIFICATION	1.8451208408205294E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999624797269204	WITHOUT_CLASSIFICATION	3.752027307955029E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999898917438743	WITHOUT_CLASSIFICATION	1.0108256125705196E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999987185488416	WITHOUT_CLASSIFICATION	1.2814511584332245E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999756689797976	WITHOUT_CLASSIFICATION	2.4331020202411424E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997850229189066	WITHOUT_CLASSIFICATION	2.149770810934598E-4	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998646282048393	WITHOUT_CLASSIFICATION	1.3537179516060196E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999774994124901	WITHOUT_CLASSIFICATION	2.250058750996023E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999872404524706	WITHOUT_CLASSIFICATION	1.2759547529344595E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999734935944671	WITHOUT_CLASSIFICATION	2.6506405532979356E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999922209383901	WITHOUT_CLASSIFICATION	7.779061609931442E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999000257717008	WITHOUT_CLASSIFICATION	9.997422829923745E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999149504782675	WITHOUT_CLASSIFICATION	8.504952173255505E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999914072137609	WITHOUT_CLASSIFICATION	8.592786239136846E-6	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997953540656789	WITHOUT_CLASSIFICATION	2.0464593432118668E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999490615688189	WITHOUT_CLASSIFICATION	5.093843118105228E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999236948774348	WITHOUT_CLASSIFICATION	7.630512256522369E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999526119646073	WITHOUT_CLASSIFICATION	4.7388035392762256E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999817642202665	WITHOUT_CLASSIFICATION	1.8235779733511737E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999992721837138	WITHOUT_CLASSIFICATION	7.278162861126331E-7	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999611336774242	WITHOUT_CLASSIFICATION	3.886632257583906E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999992854519226	WITHOUT_CLASSIFICATION	7.145480773561488E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999781187628516	WITHOUT_CLASSIFICATION	2.1881237148491067E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9996644764497201	WITHOUT_CLASSIFICATION	3.35523550279878E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999924267589955	WITHOUT_CLASSIFICATION	7.5732410045819504E-6	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999032053967272	WITHOUT_CLASSIFICATION	9.679460327292808E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9998897488253075	WITHOUT_CLASSIFICATION	1.1025117469255133E-4	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999375562480535	WITHOUT_CLASSIFICATION	6.244375194658014E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999228436037011	WITHOUT_CLASSIFICATION	7.715639629880412E-5	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9998994033747771	WITHOUT_CLASSIFICATION	1.0059662522285706E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999142109585051	WITHOUT_CLASSIFICATION	8.578904149490425E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999947977629172	WITHOUT_CLASSIFICATION	5.202237082793634E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999844792990007	WITHOUT_CLASSIFICATION	1.5520700999250625E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999983916026982	WITHOUT_CLASSIFICATION	1.6083973018414783E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999867694417729	WITHOUT_CLASSIFICATION	1.3230558227215618E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998507470883807	WITHOUT_CLASSIFICATION	1.4925291161927462E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999896096399957	WITHOUT_CLASSIFICATION	1.0390360004213805E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999974009510001	WITHOUT_CLASSIFICATION	2.5990489998758727E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999864589678152	WITHOUT_CLASSIFICATION	1.3541032184700412E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999947977629172	WITHOUT_CLASSIFICATION	5.202237082793634E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999844792990007	WITHOUT_CLASSIFICATION	1.5520700999250625E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999909443946701	WITHOUT_CLASSIFICATION	9.055605329955439E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999010692327163	WITHOUT_CLASSIFICATION	9.893076728379251E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999934816031951	WITHOUT_CLASSIFICATION	6.518396804903668E-6	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999662177139741	WITHOUT_CLASSIFICATION	3.378228602591965E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999609635983795	WITHOUT_CLASSIFICATION	3.903640162047668E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999992324767164	WITHOUT_CLASSIFICATION	7.675232836335196E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997200009695908	WITHOUT_CLASSIFICATION	2.7999903040920165E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999829319795904	WITHOUT_CLASSIFICATION	1.7068020409592517E-5	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999310881180362	WITHOUT_CLASSIFICATION	6.891188196368007E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6831689759320636	WITHOUT_CLASSIFICATION	0.3168310240679365	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999995875117635	WITHOUT_CLASSIFICATION	4.1248823640979715E-7	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6831689759320636	WITHOUT_CLASSIFICATION	0.3168310240679365	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999984358558115	WITHOUT_CLASSIFICATION	1.564144188428848E-6	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999951477700518	WITHOUT_CLASSIFICATION	4.852229948177385E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999998696557345	WITHOUT_CLASSIFICATION	1.3034426550431099E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939669989698	WITHOUT_CLASSIFICATION	6.033001030162693E-6	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998742570018841	WITHOUT_CLASSIFICATION	1.2574299811571817E-4	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999397155877344	WITHOUT_CLASSIFICATION	6.028441226566827E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999397155877344	WITHOUT_CLASSIFICATION	6.028441226566827E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999962144821029	WITHOUT_CLASSIFICATION	3.7855178970869573E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999985331199777	WITHOUT_CLASSIFICATION	1.466880022394771E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999925238846245	WITHOUT_CLASSIFICATION	7.4761153755041174E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999719691528873	WITHOUT_CLASSIFICATION	2.8030847112634157E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999061138074639	WITHOUT_CLASSIFICATION	9.38861925362102E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998725295394937	WITHOUT_CLASSIFICATION	1.2747046050620942E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999940076804812	WITHOUT_CLASSIFICATION	5.992319518796853E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999972465993017	WITHOUT_CLASSIFICATION	2.753400698332447E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999761309970777	WITHOUT_CLASSIFICATION	2.3869002922228216E-5	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9998670156357377	WITHOUT_CLASSIFICATION	1.329843642623289E-4	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9998865134552395	WITHOUT_CLASSIFICATION	1.1348654476055031E-4	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9992473210516397	WITHOUT_CLASSIFICATION	7.526789483602816E-4	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999423818525044	WITHOUT_CLASSIFICATION	5.76181474956797E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999916266031847	WITHOUT_CLASSIFICATION	8.373396815193822E-6	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999803155033611	WITHOUT_CLASSIFICATION	1.968449663893074E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999983618696677	WITHOUT_CLASSIFICATION	1.6381303322204521E-6	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999967360601424	WITHOUT_CLASSIFICATION	3.2639398575645723E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999872923991591	WITHOUT_CLASSIFICATION	1.2707600840976823E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999984018099533	WITHOUT_CLASSIFICATION	1.5981900467333883E-6	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998226488167291	WITHOUT_CLASSIFICATION	1.7735118327095705E-4	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999458727345807	WITHOUT_CLASSIFICATION	5.4127265419338606E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998178419515596	WITHOUT_CLASSIFICATION	1.8215804844035687E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999992576271713	WITHOUT_CLASSIFICATION	7.423728287031311E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999968017313892	WITHOUT_CLASSIFICATION	3.198268610798309E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999629965761511	WITHOUT_CLASSIFICATION	3.700342384906801E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999387828297442	WITHOUT_CLASSIFICATION	6.12171702557166E-5	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9996318958297035	WITHOUT_CLASSIFICATION	3.681041702965201E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999884120067237	WITHOUT_CLASSIFICATION	1.1587993276218187E-5	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998155717020913	WITHOUT_CLASSIFICATION	1.844282979086459E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9987907247092215	WITHOUT_CLASSIFICATION	0.0012092752907784795	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9438375983054608	WITHOUT_CLASSIFICATION	0.05616240169453924	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999953994886239	WITHOUT_CLASSIFICATION	4.600511376035541E-6	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999940076804812	WITHOUT_CLASSIFICATION	5.992319518796853E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999902870415133	WITHOUT_CLASSIFICATION	9.712958486755813E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999500447677578	WITHOUT_CLASSIFICATION	4.9955232242147055E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7612723141311454	WITHOUT_CLASSIFICATION	0.2387276858688546	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999684099046471	WITHOUT_CLASSIFICATION	3.159009535290914E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999967814296123	WITHOUT_CLASSIFICATION	3.2185703876221324E-6	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.999992486966718	WITHOUT_CLASSIFICATION	7.5130332819071204E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999719691528873	WITHOUT_CLASSIFICATION	2.8030847112634157E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999719691528873	WITHOUT_CLASSIFICATION	2.8030847112634157E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999066576902771	WITHOUT_CLASSIFICATION	9.334230972289531E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999992672048671	WITHOUT_CLASSIFICATION	7.327951328927668E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998847895653344	WITHOUT_CLASSIFICATION	1.1521043466550827E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999767894805455	WITHOUT_CLASSIFICATION	2.3210519454591432E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999085775897958	WITHOUT_CLASSIFICATION	9.142241020419824E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999752645986967	WITHOUT_CLASSIFICATION	2.4735401303365368E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999964040054088	WITHOUT_CLASSIFICATION	3.595994591244669E-6	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9988469392025577	WITHOUT_CLASSIFICATION	0.0011530607974423706	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999704489004906	WITHOUT_CLASSIFICATION	2.9551099509396707E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947172594833	WITHOUT_CLASSIFICATION	5.282740516677248E-6	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999874270589302	WITHOUT_CLASSIFICATION	1.2572941069744208E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995842292311469	WITHOUT_CLASSIFICATION	4.1577076885303076E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999775681511809	WITHOUT_CLASSIFICATION	2.243184881908401E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947172594833	WITHOUT_CLASSIFICATION	5.282740516677248E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999950733453814	WITHOUT_CLASSIFICATION	4.926654618583415E-6	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998397518670127	WITHOUT_CLASSIFICATION	1.6024813298732158E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999788625789472	WITHOUT_CLASSIFICATION	2.1137421052759672E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9304068933239847	IMPLEMENTATION	0.06959310667601526	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995842292311469	WITHOUT_CLASSIFICATION	4.1577076885303076E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999890457132065	WITHOUT_CLASSIFICATION	1.0954286793497144E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999912803636306	WITHOUT_CLASSIFICATION	8.719636369441369E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999861998516334	WITHOUT_CLASSIFICATION	1.3800148366528627E-5	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999997887292963	WITHOUT_CLASSIFICATION	2.112707036171854E-7	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998394094988688	WITHOUT_CLASSIFICATION	1.605905011311771E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999922765155282	WITHOUT_CLASSIFICATION	7.723484471758752E-6	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999989513077354	WITHOUT_CLASSIFICATION	1.048692264584525E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999895849328282	WITHOUT_CLASSIFICATION	1.0415067171815495E-5	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999905295332394	WITHOUT_CLASSIFICATION	9.47046676050758E-6	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999884026976364	WITHOUT_CLASSIFICATION	1.1597302363428426E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999405864301663	WITHOUT_CLASSIFICATION	5.941356983381659E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999721980738789	WITHOUT_CLASSIFICATION	2.7801926120958216E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999947172594833	WITHOUT_CLASSIFICATION	5.282740516677248E-6	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999890457132065	WITHOUT_CLASSIFICATION	1.0954286793497144E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999861998516334	WITHOUT_CLASSIFICATION	1.3800148366528627E-5	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999892140223285	WITHOUT_CLASSIFICATION	1.0785977671415872E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999998672457843	WITHOUT_CLASSIFICATION	1.3275421569700766E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999969017116288	WITHOUT_CLASSIFICATION	3.098288371127635E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995842292311469	WITHOUT_CLASSIFICATION	4.1577076885303076E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999943436077113	WITHOUT_CLASSIFICATION	5.656392288733857E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999797907150125	WITHOUT_CLASSIFICATION	2.0209284987502505E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999049090448481	WITHOUT_CLASSIFICATION	9.509095515192957E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999748105825061	WITHOUT_CLASSIFICATION	2.518941749390876E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999895849328282	WITHOUT_CLASSIFICATION	1.0415067171815495E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999950733453814	WITHOUT_CLASSIFICATION	4.926654618583415E-6	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999685687586932	WITHOUT_CLASSIFICATION	3.143124130678258E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999985603377817	WITHOUT_CLASSIFICATION	1.439662218383736E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999987772647009	WITHOUT_CLASSIFICATION	1.2227352991007833E-5	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999858212198516	WITHOUT_CLASSIFICATION	1.4178780148367796E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999966044610806	WITHOUT_CLASSIFICATION	3.39553891941607E-6	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999858453577875	WITHOUT_CLASSIFICATION	1.4154642212514805E-5	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999944309172428	WITHOUT_CLASSIFICATION	5.569082757082123E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939669989698	WITHOUT_CLASSIFICATION	6.033001030162693E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975716506232	WITHOUT_CLASSIFICATION	2.428349376748973E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999916283005331	WITHOUT_CLASSIFICATION	8.371699466867458E-6	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9994571584093414	WITHOUT_CLASSIFICATION	5.428415906585795E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999641674761534	WITHOUT_CLASSIFICATION	3.583252384676688E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998888748880941	WITHOUT_CLASSIFICATION	1.11125111905888E-4	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999998103804473	WITHOUT_CLASSIFICATION	1.8961955270472735E-6	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999949424182406	WITHOUT_CLASSIFICATION	5.057581759375053E-6	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999958417847498	WITHOUT_CLASSIFICATION	4.158215250284008E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999748105825061	WITHOUT_CLASSIFICATION	2.518941749390876E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.99995857688341	WITHOUT_CLASSIFICATION	4.142311658989612E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999816776431378	WITHOUT_CLASSIFICATION	1.8322356862134866E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999426082304405	WITHOUT_CLASSIFICATION	5.7391769559554156E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999985755532945	WITHOUT_CLASSIFICATION	1.424446705500942E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9995093469195983	WITHOUT_CLASSIFICATION	4.906530804018377E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999943072367534	WITHOUT_CLASSIFICATION	5.6927632464924385E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999976199494418	WITHOUT_CLASSIFICATION	2.380050558224231E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.999938570884834	WITHOUT_CLASSIFICATION	6.142911516604507E-5	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999158292515	WITHOUT_CLASSIFICATION	8.417074859129146E-8	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998597771374781	WITHOUT_CLASSIFICATION	1.4022286252186918E-4	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999964307811631	WITHOUT_CLASSIFICATION	3.569218836795877E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999831022168918	WITHOUT_CLASSIFICATION	1.6897783108290353E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9994871948521025	WITHOUT_CLASSIFICATION	5.12805147897466E-4	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999634705661614	WITHOUT_CLASSIFICATION	3.6529433838633416E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999955663196083	WITHOUT_CLASSIFICATION	4.433680391673466E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999950367378329	WITHOUT_CLASSIFICATION	4.9632621671042486E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999792298784733	WITHOUT_CLASSIFICATION	2.0770121526605496E-5	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999872131615051	WITHOUT_CLASSIFICATION	1.278683849500923E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999788003867947	WITHOUT_CLASSIFICATION	2.119961320537529E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999916970854832	WITHOUT_CLASSIFICATION	8.302914516688524E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999867843212632	WITHOUT_CLASSIFICATION	1.3215678736891479E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999965802865555	WITHOUT_CLASSIFICATION	3.419713444503613E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999946838779582	WITHOUT_CLASSIFICATION	5.316122041762654E-6	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999303512134	WITHOUT_CLASSIFICATION	6.964878660496043E-7	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999969880729658	WITHOUT_CLASSIFICATION	3.011927034287868E-6	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8972968599637492	IMPLEMENTATION	0.10270314003625088	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9988413103887146	WITHOUT_CLASSIFICATION	0.0011586896112854637	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999928628470329	WITHOUT_CLASSIFICATION	7.137152967183768E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999982169055035	WITHOUT_CLASSIFICATION	1.7830944965900682E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9370485475774276	WITHOUT_CLASSIFICATION	0.06295145242257247	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999998653142153	WITHOUT_CLASSIFICATION	1.3468578478354323E-7	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999989521651031	WITHOUT_CLASSIFICATION	1.0478348968483642E-6	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999721649982544	WITHOUT_CLASSIFICATION	2.783500174559204E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999840867650375	WITHOUT_CLASSIFICATION	1.591323496255096E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999976514373119	WITHOUT_CLASSIFICATION	2.348562688115299E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999505985483952	WITHOUT_CLASSIFICATION	4.9401451604772184E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999761086637555	WITHOUT_CLASSIFICATION	2.389133624445194E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998275796925	WITHOUT_CLASSIFICATION	1.724203075000809E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999505985483952	WITHOUT_CLASSIFICATION	4.9401451604772184E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999976514373119	WITHOUT_CLASSIFICATION	2.348562688115299E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999761086637555	WITHOUT_CLASSIFICATION	2.389133624445194E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999816908983309	WITHOUT_CLASSIFICATION	1.8309101669116885E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999569986617042	WITHOUT_CLASSIFICATION	4.300133829584787E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999033913508	WITHOUT_CLASSIFICATION	9.660864919488613E-8	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999990155294424	WITHOUT_CLASSIFICATION	9.844705576475206E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999957449560812	WITHOUT_CLASSIFICATION	4.255043918739577E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7314473937661186	IMPLEMENTATION	0.2685526062338814	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998934694990553	WITHOUT_CLASSIFICATION	1.0653050094466968E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998040378654345	WITHOUT_CLASSIFICATION	1.9596213456541954E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999993245866461	WITHOUT_CLASSIFICATION	6.754133539083046E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999833948810639	WITHOUT_CLASSIFICATION	1.6605118936141187E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.999995558733875	WITHOUT_CLASSIFICATION	4.441266125048495E-6	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999538434946655	WITHOUT_CLASSIFICATION	4.61565053345019E-4	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999819460008187	WITHOUT_CLASSIFICATION	1.80539991812806E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999963417074947	WITHOUT_CLASSIFICATION	3.658292505197803E-6	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998146891912	WITHOUT_CLASSIFICATION	1.8531080885678743E-7	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999863136708458	WITHOUT_CLASSIFICATION	1.3686329154239027E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999883766873515	WITHOUT_CLASSIFICATION	1.1623312648444765E-5	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999995674909676	WITHOUT_CLASSIFICATION	4.32509032429243E-7	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999982318704697	WITHOUT_CLASSIFICATION	1.768129530379896E-6	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999965842541283	WITHOUT_CLASSIFICATION	3.415745871704367E-6	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.999171562831406	WITHOUT_CLASSIFICATION	8.284371685940286E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999990561367219	WITHOUT_CLASSIFICATION	9.438632780367764E-7	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999961089631016	WITHOUT_CLASSIFICATION	3.891036898264551E-6	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999997817735848	WITHOUT_CLASSIFICATION	2.182264150558108E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999984955833905	WITHOUT_CLASSIFICATION	1.5044166094792791E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999984955833905	WITHOUT_CLASSIFICATION	1.5044166094792791E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998744902066	WITHOUT_CLASSIFICATION	1.2550979337105563E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998744902066	WITHOUT_CLASSIFICATION	1.2550979337105563E-7	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.999994555239649	WITHOUT_CLASSIFICATION	5.4447603509844915E-6	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999883766873515	WITHOUT_CLASSIFICATION	1.1623312648444765E-5	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9994556538371968	WITHOUT_CLASSIFICATION	5.44346162803206E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998812030758006	WITHOUT_CLASSIFICATION	1.1879692419932218E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999402598907825	WITHOUT_CLASSIFICATION	5.974010921756268E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999402598907825	WITHOUT_CLASSIFICATION	5.974010921756268E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999994418457273	WITHOUT_CLASSIFICATION	5.581542725962451E-7	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999751229186055	WITHOUT_CLASSIFICATION	2.4877081394623442E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999988678111285	WITHOUT_CLASSIFICATION	1.1321888714580774E-6	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.999993396242621	WITHOUT_CLASSIFICATION	6.603757379009298E-6	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999881182400707	WITHOUT_CLASSIFICATION	1.188175992929382E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999818024437211	WITHOUT_CLASSIFICATION	1.8197556278792722E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999800480616282	WITHOUT_CLASSIFICATION	1.9951938371808485E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999601005996087	WITHOUT_CLASSIFICATION	3.989940039127453E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999752711265131	WITHOUT_CLASSIFICATION	2.4728873486993806E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9997635238506029	WITHOUT_CLASSIFICATION	2.3647614939706184E-4	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999920263814572	WITHOUT_CLASSIFICATION	7.973618542856589E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999572963699772	WITHOUT_CLASSIFICATION	4.270363002269515E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999840306927392	WITHOUT_CLASSIFICATION	1.5969307260748876E-5	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999937381943591	WITHOUT_CLASSIFICATION	6.261805640868935E-6	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9985694912121983	WITHOUT_CLASSIFICATION	0.0014305087878016941	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999993750150511	WITHOUT_CLASSIFICATION	6.249849488692575E-7	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884286035037	WITHOUT_CLASSIFICATION	1.1571396496216329E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999975564606181	WITHOUT_CLASSIFICATION	2.443539381896688E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999903681924145	WITHOUT_CLASSIFICATION	9.631807585499232E-6	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999852558644714	WITHOUT_CLASSIFICATION	1.474413552859487E-5	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999528431571123	WITHOUT_CLASSIFICATION	4.715684288770359E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999960815693706	WITHOUT_CLASSIFICATION	3.918430629483198E-6	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999740902020469	WITHOUT_CLASSIFICATION	2.590979795307896E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999977590785281	WITHOUT_CLASSIFICATION	2.2409214720060427E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999725835611325	WITHOUT_CLASSIFICATION	2.741643886749603E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999988241674921	WITHOUT_CLASSIFICATION	1.1758325079387324E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999831022168918	WITHOUT_CLASSIFICATION	1.6897783108290353E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999621624160859	WITHOUT_CLASSIFICATION	3.78375839139967E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999957302554646	WITHOUT_CLASSIFICATION	4.2697445353875305E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965409833827	WITHOUT_CLASSIFICATION	3.459016617293521E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811681495999	WITHOUT_CLASSIFICATION	1.8831850400154246E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999840002184985	WITHOUT_CLASSIFICATION	1.599978150151854E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999840002184985	WITHOUT_CLASSIFICATION	1.599978150151854E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998216329071	WITHOUT_CLASSIFICATION	1.7836709291541486E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999912702694653	WITHOUT_CLASSIFICATION	8.729730534659906E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999869586545335	WITHOUT_CLASSIFICATION	1.3041345466595414E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999869586545335	WITHOUT_CLASSIFICATION	1.3041345466595414E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999818194641228	WITHOUT_CLASSIFICATION	1.8180535877277467E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999476595273979	WITHOUT_CLASSIFICATION	5.234047260208891E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999873653641879	WITHOUT_CLASSIFICATION	1.2634635812155907E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999985816155674	WITHOUT_CLASSIFICATION	1.4183844326065779E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999469089428962	WITHOUT_CLASSIFICATION	5.309105710372604E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999997776819927	WITHOUT_CLASSIFICATION	2.22318007305801E-6	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999934476317662	WITHOUT_CLASSIFICATION	6.552368233787331E-6	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999829123770926	WITHOUT_CLASSIFICATION	1.708762290732957E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999989129805156	WITHOUT_CLASSIFICATION	1.0870194844251977E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999989129805156	WITHOUT_CLASSIFICATION	1.0870194844251977E-6	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999934060439261	WITHOUT_CLASSIFICATION	6.593956073876769E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999983089894746	WITHOUT_CLASSIFICATION	1.6910105252930829E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999983089894746	WITHOUT_CLASSIFICATION	1.6910105252930829E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999989868800192	WITHOUT_CLASSIFICATION	1.0131199808273233E-6	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999970338852139	WITHOUT_CLASSIFICATION	2.9661147861409403E-6	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8938399180049905	WITHOUT_CLASSIFICATION	0.10616008199500945	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999992627630366	WITHOUT_CLASSIFICATION	7.372369632959656E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999995508771591	WITHOUT_CLASSIFICATION	4.491228409497564E-7	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999813855783727	WITHOUT_CLASSIFICATION	1.8614421627237188E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998250819207678	WITHOUT_CLASSIFICATION	1.7491807923220986E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999866674182841	WITHOUT_CLASSIFICATION	1.333258171586297E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999822601058558	WITHOUT_CLASSIFICATION	1.773989414424112E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.99998806399772	WITHOUT_CLASSIFICATION	1.193600227998283E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999993100229304	WITHOUT_CLASSIFICATION	6.899770695089894E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999968238463108	WITHOUT_CLASSIFICATION	3.176153689297256E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999580558887546	WITHOUT_CLASSIFICATION	4.1944111245304394E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999580558887546	WITHOUT_CLASSIFICATION	4.1944111245304394E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999580558887546	WITHOUT_CLASSIFICATION	4.1944111245304394E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999580558887546	WITHOUT_CLASSIFICATION	4.1944111245304394E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999972709135574	WITHOUT_CLASSIFICATION	2.729086442580246E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998700602512637	WITHOUT_CLASSIFICATION	1.299397487364043E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998984600370153	WITHOUT_CLASSIFICATION	1.0153996298468923E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999790936992586	WITHOUT_CLASSIFICATION	2.090630074138323E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999762897487285	WITHOUT_CLASSIFICATION	2.3710251271460116E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999582623765082	WITHOUT_CLASSIFICATION	4.173762349179131E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999732415996425	WITHOUT_CLASSIFICATION	2.675840035739921E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999850920726037	WITHOUT_CLASSIFICATION	1.4907927396297804E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999836569346752	WITHOUT_CLASSIFICATION	1.634306532484563E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999993210706409	WITHOUT_CLASSIFICATION	6.789293589631021E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999346017993808	WITHOUT_CLASSIFICATION	6.539820061918705E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998479633244011	WITHOUT_CLASSIFICATION	1.5203667559886625E-4	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999981423277157	WITHOUT_CLASSIFICATION	1.857672284303097E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999989298112959	WITHOUT_CLASSIFICATION	1.0701887041047341E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999929280951109	WITHOUT_CLASSIFICATION	7.071904889201527E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998479633244011	WITHOUT_CLASSIFICATION	1.5203667559886625E-4	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999990401157599	WITHOUT_CLASSIFICATION	9.598842400989446E-6	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999973804041671	WITHOUT_CLASSIFICATION	2.6195958328979434E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999996978806019	WITHOUT_CLASSIFICATION	3.021193980844136E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999488507327201	WITHOUT_CLASSIFICATION	5.114926727991212E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9987751446356797	WITHOUT_CLASSIFICATION	0.001224855364320216	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999918886995884	WITHOUT_CLASSIFICATION	8.111300411552865E-6	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999893316213779	WITHOUT_CLASSIFICATION	1.06683786219783E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999939308123713	WITHOUT_CLASSIFICATION	6.069187628696355E-6	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899798782141	WITHOUT_CLASSIFICATION	1.0020121785898376E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999883664320934	WITHOUT_CLASSIFICATION	1.1633567906520811E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935427483675	WITHOUT_CLASSIFICATION	6.457251632531383E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999965420150049	WITHOUT_CLASSIFICATION	3.4579849952514664E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999736307300018	WITHOUT_CLASSIFICATION	2.63692699982375E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999466122865343	WITHOUT_CLASSIFICATION	5.338771346580427E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999983761485637	WITHOUT_CLASSIFICATION	1.6238514362789079E-6	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999941140530724	WITHOUT_CLASSIFICATION	5.885946927678156E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992234918479	WITHOUT_CLASSIFICATION	7.765081520712323E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999967084695369	WITHOUT_CLASSIFICATION	3.291530463035149E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999987215641698	WITHOUT_CLASSIFICATION	1.278435830176638E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999967084695369	WITHOUT_CLASSIFICATION	3.291530463035149E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999995581693544	WITHOUT_CLASSIFICATION	4.41830645602496E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999996650075776	WITHOUT_CLASSIFICATION	3.3499242233332304E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999870404669514	WITHOUT_CLASSIFICATION	1.2959533048653956E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999985329668186	WITHOUT_CLASSIFICATION	1.46703318143074E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992234918479	WITHOUT_CLASSIFICATION	7.765081520712323E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999987215641698	WITHOUT_CLASSIFICATION	1.278435830176638E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999995581693544	WITHOUT_CLASSIFICATION	4.41830645602496E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999978538624554	WITHOUT_CLASSIFICATION	2.1461375446009765E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999786547958105	WITHOUT_CLASSIFICATION	2.1345204189457876E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999939244295283	WITHOUT_CLASSIFICATION	6.075570471695142E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999796277993289	WITHOUT_CLASSIFICATION	2.0372200671142095E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999958775155654	WITHOUT_CLASSIFICATION	4.122484434605392E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999972844504048	WITHOUT_CLASSIFICATION	2.7155495950836755E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884286035037	WITHOUT_CLASSIFICATION	1.1571396496216329E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999996650075776	WITHOUT_CLASSIFICATION	3.3499242233332304E-7	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999987623695449	WITHOUT_CLASSIFICATION	1.2376304551184034E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999976654096271	WITHOUT_CLASSIFICATION	2.3345903728495565E-6	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999900048165193	WITHOUT_CLASSIFICATION	9.995183480670952E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884286035037	WITHOUT_CLASSIFICATION	1.1571396496216329E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999887911179081	WITHOUT_CLASSIFICATION	1.120888209194851E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884286035037	WITHOUT_CLASSIFICATION	1.1571396496216329E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999997393195238	WITHOUT_CLASSIFICATION	2.6068047614252595E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999793713323937	WITHOUT_CLASSIFICATION	2.0628667606251836E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999479582277904	WITHOUT_CLASSIFICATION	5.204177220955729E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997793056787336	WITHOUT_CLASSIFICATION	2.206943212664146E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999928693251974	WITHOUT_CLASSIFICATION	7.130674802654158E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999929773466856	WITHOUT_CLASSIFICATION	7.0226533143936445E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998765263867749	WITHOUT_CLASSIFICATION	1.2347361322500143E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999897539791901	WITHOUT_CLASSIFICATION	1.0246020809851961E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999602512259264	WITHOUT_CLASSIFICATION	3.974877407364979E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.999988491204204	WITHOUT_CLASSIFICATION	1.1508795796109018E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999142694230752	WITHOUT_CLASSIFICATION	8.573057692475358E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999974290287336	WITHOUT_CLASSIFICATION	2.5709712664619326E-6	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.8938399180049905	WITHOUT_CLASSIFICATION	0.10616008199500945	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999861397975996	WITHOUT_CLASSIFICATION	1.3860202400434064E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999998604992546	WITHOUT_CLASSIFICATION	1.3950074542469075E-7	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.999984273817182	WITHOUT_CLASSIFICATION	1.5726182818018213E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999612922670386	WITHOUT_CLASSIFICATION	3.870773296146154E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999941593810664	WITHOUT_CLASSIFICATION	5.840618933703834E-6	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999977840099379	WITHOUT_CLASSIFICATION	2.215990062113678E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999703973900583	WITHOUT_CLASSIFICATION	2.9602609941682606E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9989474744685874	WITHOUT_CLASSIFICATION	0.0010525255314125775	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999963097870271	WITHOUT_CLASSIFICATION	3.6902129727084248E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999600349211858	WITHOUT_CLASSIFICATION	3.9965078814235785E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.8941410520077012	WITHOUT_CLASSIFICATION	0.10585894799229874	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999996227005308	WITHOUT_CLASSIFICATION	3.772994691831968E-7	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999994680240964	WITHOUT_CLASSIFICATION	5.319759035013901E-7	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999912038050035	WITHOUT_CLASSIFICATION	8.796194996480013E-6	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999963848798845	WITHOUT_CLASSIFICATION	3.6151201154221914E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9998598156575554	WITHOUT_CLASSIFICATION	1.4018434244461318E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999988666612425	WITHOUT_CLASSIFICATION	1.1333387575174271E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999995482014392	WITHOUT_CLASSIFICATION	4.5179856072335277E-7	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999972162424562	WITHOUT_CLASSIFICATION	2.7837575438678972E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999047798753096	WITHOUT_CLASSIFICATION	9.522012469034308E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999572141309717	WITHOUT_CLASSIFICATION	4.278586902832053E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9834243799609209	WITHOUT_CLASSIFICATION	0.01657562003907912	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999932937822068	WITHOUT_CLASSIFICATION	6.706217793212557E-6	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999610569521643	WITHOUT_CLASSIFICATION	3.8943047835593894E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999294702448525	WITHOUT_CLASSIFICATION	7.052975514759151E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999812267706657	WITHOUT_CLASSIFICATION	1.8773229334285064E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999990894079193	WITHOUT_CLASSIFICATION	9.105920807531532E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8857631138686136	WITHOUT_CLASSIFICATION	0.11423688613138638	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999986270648028	WITHOUT_CLASSIFICATION	1.3729351972591877E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999898824011139	WITHOUT_CLASSIFICATION	1.0117598886093295E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999597312522268	WITHOUT_CLASSIFICATION	4.026874777330034E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999597312522268	WITHOUT_CLASSIFICATION	4.026874777330034E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999985569013728	WITHOUT_CLASSIFICATION	1.443098627138996E-6	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999897539791901	WITHOUT_CLASSIFICATION	1.0246020809851961E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999883508266598	WITHOUT_CLASSIFICATION	1.1649173340238749E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999974278481043	WITHOUT_CLASSIFICATION	2.5721518956864003E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999971674293032	WITHOUT_CLASSIFICATION	2.8325706967756948E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999945053232372	WITHOUT_CLASSIFICATION	5.4946767627104636E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999820712906142	WITHOUT_CLASSIFICATION	1.792870938573018E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9997180429443248	WITHOUT_CLASSIFICATION	2.819570556751912E-4	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999962008539182	WITHOUT_CLASSIFICATION	3.799146081808479E-6	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999980144667147	WITHOUT_CLASSIFICATION	1.9855332853484035E-6	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999919536269853	WITHOUT_CLASSIFICATION	8.046373014616195E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999945911887694	WITHOUT_CLASSIFICATION	5.408811230511249E-6	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999407983342294	WITHOUT_CLASSIFICATION	5.920166577058438E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999759203180872	WITHOUT_CLASSIFICATION	2.407968191278291E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999921190495631	WITHOUT_CLASSIFICATION	7.8809504369025E-6	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999991125885812	WITHOUT_CLASSIFICATION	8.874114188758413E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999973467003788	WITHOUT_CLASSIFICATION	2.6532996212656667E-6	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999953246128169	WITHOUT_CLASSIFICATION	4.675387182978339E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999994371614728	WITHOUT_CLASSIFICATION	5.628385271943891E-6	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999793362209762	WITHOUT_CLASSIFICATION	2.0663779023749817E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999898857258964	WITHOUT_CLASSIFICATION	1.0114274103566682E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999983041529411	WITHOUT_CLASSIFICATION	1.6958470589088404E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999920578065556	WITHOUT_CLASSIFICATION	7.942193444413909E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999022404228	WITHOUT_CLASSIFICATION	9.775957716339421E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8857631138686136	WITHOUT_CLASSIFICATION	0.11423688613138638	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999913356883852	WITHOUT_CLASSIFICATION	8.664311614913842E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9997698397988276	WITHOUT_CLASSIFICATION	2.3016020117241074E-4	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999997232099854	WITHOUT_CLASSIFICATION	2.7679001457954156E-7	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999826724672957	WITHOUT_CLASSIFICATION	1.7327532704367324E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999389595344741	WITHOUT_CLASSIFICATION	6.104046552592712E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999998240810773	WITHOUT_CLASSIFICATION	1.7591892268710844E-6	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999774741525135	WITHOUT_CLASSIFICATION	2.25258474865879E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999897453853069	WITHOUT_CLASSIFICATION	1.0254614692946787E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999976738651757	WITHOUT_CLASSIFICATION	2.3261348244316393E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999977481086958	WITHOUT_CLASSIFICATION	2.2518913040843156E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999957520592594	WITHOUT_CLASSIFICATION	4.247940740592085E-6	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999880673083206	WITHOUT_CLASSIFICATION	1.1932691679418609E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999972721617107	WITHOUT_CLASSIFICATION	2.7278382892424927E-6	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999934250713083	WITHOUT_CLASSIFICATION	6.574928691649995E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999754649082	WITHOUT_CLASSIFICATION	2.4535091879033703E-8	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999754649082	WITHOUT_CLASSIFICATION	2.4535091879033703E-8	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999976400458321	WITHOUT_CLASSIFICATION	2.3599541678999913E-6	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999989840474495	WITHOUT_CLASSIFICATION	1.0159525505619692E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999992925788156	WITHOUT_CLASSIFICATION	7.074211843528295E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999992925788156	WITHOUT_CLASSIFICATION	7.074211843528295E-7	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999990051027875	WITHOUT_CLASSIFICATION	9.948972124407884E-7	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999771066056848	WITHOUT_CLASSIFICATION	2.289339431515464E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999996571866143	WITHOUT_CLASSIFICATION	3.4281338560530116E-7	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999997702598417	WITHOUT_CLASSIFICATION	2.2974015830465133E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999994249119663	WITHOUT_CLASSIFICATION	5.750880337129614E-6	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999977446806264	WITHOUT_CLASSIFICATION	2.255319373537149E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999984715086109	WITHOUT_CLASSIFICATION	1.5284913891245715E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999984715086109	WITHOUT_CLASSIFICATION	1.5284913891245715E-6	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999953941597711	WITHOUT_CLASSIFICATION	4.605840228870519E-6	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999879260565339	WITHOUT_CLASSIFICATION	1.2073943466065331E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.999978686034636	WITHOUT_CLASSIFICATION	2.131396536393518E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999959937677347	WITHOUT_CLASSIFICATION	4.006232265175657E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999959937677347	WITHOUT_CLASSIFICATION	4.006232265175657E-6	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.999992025258521	WITHOUT_CLASSIFICATION	7.974741478950142E-6	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999672335447383	WITHOUT_CLASSIFICATION	3.276645526183659E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999968106033258	WITHOUT_CLASSIFICATION	3.1893966741138657E-6	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999867189723256	WITHOUT_CLASSIFICATION	1.3281027674396747E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9982108079299685	WITHOUT_CLASSIFICATION	0.0017891920700315598	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999946475728888	WITHOUT_CLASSIFICATION	5.352427111183798E-6	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999994759664489	WITHOUT_CLASSIFICATION	5.2403355110376525E-6	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999843731355883	WITHOUT_CLASSIFICATION	1.5626864411708952E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999961244351573	WITHOUT_CLASSIFICATION	3.87556484269284E-6	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999940455653106	WITHOUT_CLASSIFICATION	5.9544346894548525E-6	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9983665408773212	WITHOUT_CLASSIFICATION	0.0016334591226787602	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999936483321645	WITHOUT_CLASSIFICATION	6.351667835488805E-6	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9999899004727982	WITHOUT_CLASSIFICATION	1.0099527201791816E-5	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999938620962436	WITHOUT_CLASSIFICATION	6.137903756290481E-6	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999631569496974	WITHOUT_CLASSIFICATION	3.6843050302644014E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999977154626536	WITHOUT_CLASSIFICATION	2.284537346393087E-5	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999972292051591	WITHOUT_CLASSIFICATION	2.770794840858275E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999965379280862	WITHOUT_CLASSIFICATION	3.4620719138699625E-6	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999963751280464	WITHOUT_CLASSIFICATION	3.624871953631435E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999578188009699	WITHOUT_CLASSIFICATION	4.218119902998075E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999603262387297	WITHOUT_CLASSIFICATION	3.967376127026567E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999869816230872	WITHOUT_CLASSIFICATION	1.3018376912806923E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998366892519835	WITHOUT_CLASSIFICATION	1.6331074801638525E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999970271355983	WITHOUT_CLASSIFICATION	2.9728644016335932E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999137659330887	WITHOUT_CLASSIFICATION	8.623406691131838E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999901475436686	WITHOUT_CLASSIFICATION	9.852456331323121E-6	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999978970740475	WITHOUT_CLASSIFICATION	2.1029259524621364E-6	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999424804281848	WITHOUT_CLASSIFICATION	5.7519571815199035E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999952846848376	WITHOUT_CLASSIFICATION	4.715315162492839E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999984420867162	WITHOUT_CLASSIFICATION	1.557913283751839E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999933019753561	WITHOUT_CLASSIFICATION	6.698024643917982E-6	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999993101086832	WITHOUT_CLASSIFICATION	6.898913167968038E-6	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999973494722705	WITHOUT_CLASSIFICATION	2.6505277295997234E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999483529309333	WITHOUT_CLASSIFICATION	5.1647069066718106E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999958202265324	WITHOUT_CLASSIFICATION	4.179773467541672E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999751420012337	WITHOUT_CLASSIFICATION	2.4857998766307454E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999910065607018	WITHOUT_CLASSIFICATION	8.993439298265069E-6	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999988652802602	WITHOUT_CLASSIFICATION	1.1347197397953278E-6	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999789700559542	WITHOUT_CLASSIFICATION	2.102994404590109E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999985154541955	WITHOUT_CLASSIFICATION	1.484545804502827E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999757420992038	WITHOUT_CLASSIFICATION	2.425790079611527E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999984508778346	WITHOUT_CLASSIFICATION	1.5491221655104718E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999826648025276	WITHOUT_CLASSIFICATION	1.7335197472396863E-5	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999436380911866	WITHOUT_CLASSIFICATION	5.636190881338027E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999972121139915	WITHOUT_CLASSIFICATION	2.7878860085333907E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999970952278855	WITHOUT_CLASSIFICATION	2.904772114418738E-6	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999987201279067	WITHOUT_CLASSIFICATION	1.2798720933503556E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999949952695345	WITHOUT_CLASSIFICATION	5.004730465494675E-5	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999864995308462	WITHOUT_CLASSIFICATION	1.350046915373895E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999904876300756	WITHOUT_CLASSIFICATION	9.51236992439257E-6	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999937668786104	WITHOUT_CLASSIFICATION	6.233121389595094E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999162926602	WITHOUT_CLASSIFICATION	8.370733973233743E-8	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999992187265098	WITHOUT_CLASSIFICATION	7.812734903510977E-7	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999958873299	WITHOUT_CLASSIFICATION	4.112670137708501E-9	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999964806661447	WITHOUT_CLASSIFICATION	3.5193338553347495E-6	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999987130119896	WITHOUT_CLASSIFICATION	1.2869880103812464E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999988436291232	WITHOUT_CLASSIFICATION	1.1563708768935373E-6	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999966696953665	WITHOUT_CLASSIFICATION	3.330304633453785E-6	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999680981751857	WITHOUT_CLASSIFICATION	3.190182481434319E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999933643265454	WITHOUT_CLASSIFICATION	6.635673454661466E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996737954011832	WITHOUT_CLASSIFICATION	3.26204598816769E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9996737954011832	WITHOUT_CLASSIFICATION	3.26204598816769E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999522316293	WITHOUT_CLASSIFICATION	4.77683707981385E-8	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999995389602256	WITHOUT_CLASSIFICATION	4.610397743392662E-7	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999976282292052	WITHOUT_CLASSIFICATION	2.3717707948104873E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999701411484	WITHOUT_CLASSIFICATION	2.985885149301151E-8	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999997155349247	WITHOUT_CLASSIFICATION	2.8446507534574713E-7	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999947100271374	WITHOUT_CLASSIFICATION	5.289972862684494E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999967418819987	WITHOUT_CLASSIFICATION	3.2581180013357488E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999870080897	WITHOUT_CLASSIFICATION	1.2991910330997878E-8	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999990320691405	WITHOUT_CLASSIFICATION	9.679308595421181E-7	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999995423677595	WITHOUT_CLASSIFICATION	4.576322405876858E-7	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999990781741296	WITHOUT_CLASSIFICATION	9.21825870327163E-7	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999928681900444	WITHOUT_CLASSIFICATION	7.131809955607864E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9997650359193853	WITHOUT_CLASSIFICATION	2.3496408061476277E-4	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999932426904039	WITHOUT_CLASSIFICATION	6.757309596139484E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999785109743479	WITHOUT_CLASSIFICATION	2.1489025652132467E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999785109743479	WITHOUT_CLASSIFICATION	2.1489025652132467E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999994360339062	WITHOUT_CLASSIFICATION	5.639660938097922E-7	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999983741482791	WITHOUT_CLASSIFICATION	1.6258517208636278E-6	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999950653841123	WITHOUT_CLASSIFICATION	4.934615887614583E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999982929016793	WITHOUT_CLASSIFICATION	1.7070983207379942E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999689691673648	WITHOUT_CLASSIFICATION	3.103083263525986E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999046679298912	WITHOUT_CLASSIFICATION	9.533207010872838E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999739492504909	WITHOUT_CLASSIFICATION	2.605074950914732E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999927933194087	WITHOUT_CLASSIFICATION	7.206680591239273E-6	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999786057817098	WITHOUT_CLASSIFICATION	2.1394218290056684E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999836672148702	WITHOUT_CLASSIFICATION	1.6332785129733348E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998929542186299	WITHOUT_CLASSIFICATION	1.0704578137009023E-4	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999662136301	WITHOUT_CLASSIFICATION	3.3786369902097E-7	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999951291530786	WITHOUT_CLASSIFICATION	4.870846921380743E-6	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999091549882	WITHOUT_CLASSIFICATION	9.084501187120241E-8	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999651023503588	WITHOUT_CLASSIFICATION	3.489764964111795E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999326209946123	WITHOUT_CLASSIFICATION	6.737900538758162E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999833160340906	WITHOUT_CLASSIFICATION	1.66839659093381E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999838712020792	WITHOUT_CLASSIFICATION	1.612879792077543E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999998652051582	WITHOUT_CLASSIFICATION	1.3479484186213074E-7	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999989294279433	WITHOUT_CLASSIFICATION	1.0705720565834215E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999618215588304	WITHOUT_CLASSIFICATION	3.817844116954444E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999938640629	WITHOUT_CLASSIFICATION	6.135937148260427E-9	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997846196863	WITHOUT_CLASSIFICATION	2.1538031373806712E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999773345719425	WITHOUT_CLASSIFICATION	2.2665428057444837E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999410669541242	WITHOUT_CLASSIFICATION	5.893304587569413E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999903253329762	WITHOUT_CLASSIFICATION	9.674667023907998E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999991949914581	WITHOUT_CLASSIFICATION	8.05008541935316E-7	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999920895868989	WITHOUT_CLASSIFICATION	7.910413101088126E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999968543373412	WITHOUT_CLASSIFICATION	3.1456626587289312E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999996567308839	WITHOUT_CLASSIFICATION	3.4326911605478805E-7	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999727581919244	WITHOUT_CLASSIFICATION	2.7241808075566187E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999942044357311	WITHOUT_CLASSIFICATION	5.795564268977632E-6	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999997109541863	WITHOUT_CLASSIFICATION	2.8904581374668534E-7	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999978173223384	WITHOUT_CLASSIFICATION	2.1826776617219813E-6	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9910264115739	WITHOUT_CLASSIFICATION	0.008973588426099919	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999976230267204	WITHOUT_CLASSIFICATION	2.376973279645725E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999946756001292	WITHOUT_CLASSIFICATION	5.324399870809583E-6	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999659453750512	WITHOUT_CLASSIFICATION	3.405462494876398E-5	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999937254759812	WITHOUT_CLASSIFICATION	6.274524018798623E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9991478858244002	WITHOUT_CLASSIFICATION	8.521141755998567E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999171628393385	WITHOUT_CLASSIFICATION	8.283716066154991E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999171628393385	WITHOUT_CLASSIFICATION	8.283716066154991E-5	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999993122836652	WITHOUT_CLASSIFICATION	6.877163348093209E-7	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999970044448373	WITHOUT_CLASSIFICATION	2.9955551626688697E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9973647284856535	WITHOUT_CLASSIFICATION	0.00263527151434644	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999982369131579	WITHOUT_CLASSIFICATION	1.7630868421160548E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999211173476661	WITHOUT_CLASSIFICATION	7.888265233394148E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999981211052316	WITHOUT_CLASSIFICATION	1.8788947685013209E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999916782959124	WITHOUT_CLASSIFICATION	8.321704087600572E-6	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999987016987099	WITHOUT_CLASSIFICATION	1.2983012901868772E-6	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999994452356601	WITHOUT_CLASSIFICATION	5.547643398442812E-7	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751918285867	WITHOUT_CLASSIFICATION	2.4808171413197862E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838509548181	WITHOUT_CLASSIFICATION	1.6149045181889843E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999642423737967	WITHOUT_CLASSIFICATION	3.57576262033288E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999438174747	WITHOUT_CLASSIFICATION	5.618252534248249E-8	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999994234284614	WITHOUT_CLASSIFICATION	5.765715386236727E-7	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.99999965613598	WITHOUT_CLASSIFICATION	3.438640201281404E-7	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999996041146483	WITHOUT_CLASSIFICATION	3.958853517181952E-7	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999128160915296	WITHOUT_CLASSIFICATION	8.718390847045163E-5	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999910064667007	WITHOUT_CLASSIFICATION	8.993533299353222E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999926519958355	WITHOUT_CLASSIFICATION	7.348004164449105E-6	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999996704071251	WITHOUT_CLASSIFICATION	3.2959287486305206E-7	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999983354212678	WITHOUT_CLASSIFICATION	1.664578732127235E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999998665052623	WITHOUT_CLASSIFICATION	1.3349473763800048E-7	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999912356976668	WITHOUT_CLASSIFICATION	8.764302333287179E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9979237364497059	WITHOUT_CLASSIFICATION	0.002076263550294119	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999933921235988	WITHOUT_CLASSIFICATION	6.607876401222334E-6	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999947732679585	WITHOUT_CLASSIFICATION	5.226732041489502E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997840687425461	WITHOUT_CLASSIFICATION	2.1593125745388684E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999997751943426	WITHOUT_CLASSIFICATION	2.248056573986925E-6	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999993525581325	WITHOUT_CLASSIFICATION	6.474418673515285E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999892700532576	WITHOUT_CLASSIFICATION	1.0729946742375409E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999237464078289	WITHOUT_CLASSIFICATION	7.625359217110747E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999972981649159	WITHOUT_CLASSIFICATION	2.7018350841632604E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999655149406845	WITHOUT_CLASSIFICATION	3.448505931549107E-5	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997177182577	WITHOUT_CLASSIFICATION	2.8228174225554553E-7	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999947131834082	WITHOUT_CLASSIFICATION	5.2868165918107E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999053192660119	WITHOUT_CLASSIFICATION	9.468073398802309E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999615698681	WITHOUT_CLASSIFICATION	3.843013189249884E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999915320719961	WITHOUT_CLASSIFICATION	8.467928003900904E-5	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999984452179665	WITHOUT_CLASSIFICATION	1.554782033447121E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999943032330015	WITHOUT_CLASSIFICATION	5.696766998429668E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999970185331569	WITHOUT_CLASSIFICATION	2.9814668431191643E-6	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999259827567	WITHOUT_CLASSIFICATION	7.401724335745274E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998164708485485	WITHOUT_CLASSIFICATION	1.8352915145160458E-4	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999997557555025	WITHOUT_CLASSIFICATION	2.4424449751261163E-6	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999727642752231	WITHOUT_CLASSIFICATION	2.723572477700278E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.99999514619135	WITHOUT_CLASSIFICATION	4.8538086500071E-6	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999519098544601	WITHOUT_CLASSIFICATION	4.809014553984615E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9997650359193853	WITHOUT_CLASSIFICATION	2.3496408061476277E-4	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999974274605348	WITHOUT_CLASSIFICATION	2.5725394651620156E-6	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999996488530433	WITHOUT_CLASSIFICATION	3.511469567863489E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999965999816798	WITHOUT_CLASSIFICATION	3.4000183202112674E-6	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999996216573884	WITHOUT_CLASSIFICATION	3.7834261165508997E-7	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999904060880008	WITHOUT_CLASSIFICATION	9.593911999222111E-6	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999980178331381	WITHOUT_CLASSIFICATION	1.9821668618840324E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9986845757955685	WITHOUT_CLASSIFICATION	0.0013154242044315723	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999985994642248	WITHOUT_CLASSIFICATION	1.4005357752821393E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999989345147362	WITHOUT_CLASSIFICATION	1.0654852637946305E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999917760158595	WITHOUT_CLASSIFICATION	8.223984140501613E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999991035436537	WITHOUT_CLASSIFICATION	8.964563462315739E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999866679576904	WITHOUT_CLASSIFICATION	1.3332042309604665E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999995574425325	WITHOUT_CLASSIFICATION	4.42557467491273E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999988429062124	WITHOUT_CLASSIFICATION	1.1570937875951166E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963151849393	WITHOUT_CLASSIFICATION	3.6848150607715274E-6	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.99999436764959	WITHOUT_CLASSIFICATION	5.632350409992822E-6	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999955578346787	WITHOUT_CLASSIFICATION	4.442165321229391E-6	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999807468013	WITHOUT_CLASSIFICATION	1.9253198664888826E-8	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999304136652826	WITHOUT_CLASSIFICATION	6.958633471744588E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963151849393	WITHOUT_CLASSIFICATION	3.6848150607715274E-6	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999733041045464	WITHOUT_CLASSIFICATION	2.669589545359637E-4	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999973649264855	WITHOUT_CLASSIFICATION	2.635073514580301E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999997827975436	WITHOUT_CLASSIFICATION	2.1720245625667123E-7	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999450877583035	WITHOUT_CLASSIFICATION	5.4912241696453344E-5	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999980889670847	WITHOUT_CLASSIFICATION	1.911032915294121E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999994987972628	WITHOUT_CLASSIFICATION	5.012027372124362E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999984160838532	WITHOUT_CLASSIFICATION	1.5839161467465802E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9993986148127553	WITHOUT_CLASSIFICATION	6.013851872446717E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999995737333747	WITHOUT_CLASSIFICATION	4.2626662541558264E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999972110004025	WITHOUT_CLASSIFICATION	2.7889995975173296E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999951082846666	WITHOUT_CLASSIFICATION	4.891715333399226E-6	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999966722367049	WITHOUT_CLASSIFICATION	3.327763295208741E-6	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999996326725586	WITHOUT_CLASSIFICATION	3.6732744139970004E-6	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999324735370135	WITHOUT_CLASSIFICATION	6.752646298650625E-5	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999996374865339	WITHOUT_CLASSIFICATION	3.625134661142447E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999022404228	WITHOUT_CLASSIFICATION	9.775957716339421E-8	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999994432704514	WITHOUT_CLASSIFICATION	5.567295484996332E-7	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999972064125086	WITHOUT_CLASSIFICATION	2.793587491485745E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998079612837691	WITHOUT_CLASSIFICATION	1.9203871623091353E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999855570422402	WITHOUT_CLASSIFICATION	1.4442957759792671E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999959324695928	WITHOUT_CLASSIFICATION	4.0675304071962975E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999140697827541	WITHOUT_CLASSIFICATION	8.593021724588293E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999960622446267	WITHOUT_CLASSIFICATION	3.937755373254888E-6	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999978825706931	WITHOUT_CLASSIFICATION	2.1174293069770077E-6	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999998111853134	WITHOUT_CLASSIFICATION	1.888146864680584E-7	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999282858245	WITHOUT_CLASSIFICATION	7.171417549153902E-7	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999970693914583	WITHOUT_CLASSIFICATION	2.930608541788167E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999967376056578	WITHOUT_CLASSIFICATION	3.262394342190391E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999999687860196	WITHOUT_CLASSIFICATION	3.12139805106664E-8	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9989630430629981	WITHOUT_CLASSIFICATION	0.0010369569370019317	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999946472616074	WITHOUT_CLASSIFICATION	5.352738392717582E-6	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998957670943703	WITHOUT_CLASSIFICATION	1.042329056297038E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999997699315793	WITHOUT_CLASSIFICATION	2.3006842070991527E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999974322198101	WITHOUT_CLASSIFICATION	2.5677801899006936E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999417156902	WITHOUT_CLASSIFICATION	5.828430977865903E-8	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999697324412	WITHOUT_CLASSIFICATION	3.0267558802033656E-7	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999998528882947	WITHOUT_CLASSIFICATION	1.4711170529533216E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9998241411354536	WITHOUT_CLASSIFICATION	1.7585886454646684E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999929856314657	WITHOUT_CLASSIFICATION	7.014368534273049E-6	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999994903228886	WITHOUT_CLASSIFICATION	5.096771113716934E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998725777727671	WITHOUT_CLASSIFICATION	1.2742222723289434E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998725777727671	WITHOUT_CLASSIFICATION	1.2742222723289434E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999957414330611	WITHOUT_CLASSIFICATION	4.258566938809762E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999740873320485	WITHOUT_CLASSIFICATION	2.5912667951471185E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999988560637904	WITHOUT_CLASSIFICATION	1.1439362096132507E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9907929590433159	WITHOUT_CLASSIFICATION	0.009207040956684209	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999985816155674	WITHOUT_CLASSIFICATION	1.4183844326065779E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.999985816155674	WITHOUT_CLASSIFICATION	1.4183844326065779E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999830618192775	WITHOUT_CLASSIFICATION	1.6938180722435646E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999872404524706	WITHOUT_CLASSIFICATION	1.2759547529344595E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9998668204626433	WITHOUT_CLASSIFICATION	1.3317953735668975E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999490615688189	WITHOUT_CLASSIFICATION	5.093843118105228E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999907532893267	WITHOUT_CLASSIFICATION	9.246710673199545E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999966813373199	WITHOUT_CLASSIFICATION	3.3186626800283504E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999958691997627	WITHOUT_CLASSIFICATION	4.130800237314126E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999888055161298	WITHOUT_CLASSIFICATION	1.1194483870231162E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9998323844510544	WITHOUT_CLASSIFICATION	1.6761554894555736E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979215964286	WITHOUT_CLASSIFICATION	2.078403571470932E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979215964286	WITHOUT_CLASSIFICATION	2.078403571470932E-6	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997523655687449	WITHOUT_CLASSIFICATION	2.4763443125503726E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999895849328282	WITHOUT_CLASSIFICATION	1.0415067171815495E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999922765155282	WITHOUT_CLASSIFICATION	7.723484471758752E-6	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999187732032152	WITHOUT_CLASSIFICATION	8.122679678476635E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999995930400009	WITHOUT_CLASSIFICATION	4.069599990914598E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975716506232	WITHOUT_CLASSIFICATION	2.428349376748973E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999267257773929	WITHOUT_CLASSIFICATION	7.327422260701872E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999694194728432	WITHOUT_CLASSIFICATION	3.05805271567715E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999973473651066	WITHOUT_CLASSIFICATION	2.6526348934402814E-6	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999924333871013	WITHOUT_CLASSIFICATION	7.566612898701821E-6	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999889242893674	WITHOUT_CLASSIFICATION	1.1075710632546875E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999972110004025	WITHOUT_CLASSIFICATION	2.7889995975173296E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999953850346884	WITHOUT_CLASSIFICATION	4.614965311601807E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999539393781028	WITHOUT_CLASSIFICATION	4.6060621897158204E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999915599914387	WITHOUT_CLASSIFICATION	8.440008561126279E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999770720215715	WITHOUT_CLASSIFICATION	2.2927978428578266E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999812642919585	WITHOUT_CLASSIFICATION	1.8735708041502564E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999924675004286	WITHOUT_CLASSIFICATION	7.532499571430763E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9997363838828737	WITHOUT_CLASSIFICATION	2.636161171263821E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999625554549	WITHOUT_CLASSIFICATION	3.744454514046977E-8	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999983745949194	WITHOUT_CLASSIFICATION	1.6254050805988567E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999830676677105	WITHOUT_CLASSIFICATION	1.693233228960756E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999830676677105	WITHOUT_CLASSIFICATION	1.693233228960756E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998479633244011	WITHOUT_CLASSIFICATION	1.5203667559886625E-4	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999997709090699	WITHOUT_CLASSIFICATION	2.2909093017590588E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997384006676412	WITHOUT_CLASSIFICATION	2.6159933235880747E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999598931400484	WITHOUT_CLASSIFICATION	4.0106859951506874E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.999994103293822	WITHOUT_CLASSIFICATION	5.896706178046474E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999942208797523	WITHOUT_CLASSIFICATION	5.7791202477144085E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999983761485637	WITHOUT_CLASSIFICATION	1.6238514362789079E-6	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999999819865717	WITHOUT_CLASSIFICATION	1.8013428295042217E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999978538624554	WITHOUT_CLASSIFICATION	2.1461375446009765E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999878159475112	WITHOUT_CLASSIFICATION	1.2184052488795713E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884286035037	WITHOUT_CLASSIFICATION	1.1571396496216329E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998771855000747	WITHOUT_CLASSIFICATION	1.228144999253558E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9935527405442854	WITHOUT_CLASSIFICATION	0.006447259455714607	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999214613544	WITHOUT_CLASSIFICATION	7.85386455208781E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999992967450197	WITHOUT_CLASSIFICATION	7.03254980315014E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997238278555	WITHOUT_CLASSIFICATION	2.7617214446850447E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999305300453472	WITHOUT_CLASSIFICATION	6.946995465290924E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999978850682333	WITHOUT_CLASSIFICATION	2.1149317667629193E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999283422803202	WITHOUT_CLASSIFICATION	7.165771967972526E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999361178755	WITHOUT_CLASSIFICATION	6.388212454265579E-8	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999995182057714	WITHOUT_CLASSIFICATION	4.817942286085989E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999896416477692	WITHOUT_CLASSIFICATION	1.0358352230787663E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999968106033258	WITHOUT_CLASSIFICATION	3.1893966741138657E-6	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999920850632256	WITHOUT_CLASSIFICATION	7.914936774382743E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998615245134	WITHOUT_CLASSIFICATION	1.3847548660256535E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998615245134	WITHOUT_CLASSIFICATION	1.3847548660256535E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999969589316342	WITHOUT_CLASSIFICATION	3.041068365858473E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998803752670522	WITHOUT_CLASSIFICATION	1.1962473294772399E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999958264120412	WITHOUT_CLASSIFICATION	4.1735879588020156E-6	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999600980261593	WITHOUT_CLASSIFICATION	3.9901973840724684E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999748836711525	WITHOUT_CLASSIFICATION	2.511632884752904E-5	IMPLEMENTATION
