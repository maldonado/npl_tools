// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9946977665227513	WITHOUT_CLASSIFICATION	0.005302233477248775	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9946977665227513	WITHOUT_CLASSIFICATION	0.005302233477248775	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9998208038582751	WITHOUT_CLASSIFICATION	1.7919614172484866E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9695963671591474	WITHOUT_CLASSIFICATION	0.03040363284085254	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9840809059454998	WITHOUT_CLASSIFICATION	0.015919094054500288	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9555834892263422	IMPLEMENTATION	0.04441651077365791	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9918459060886995	WITHOUT_CLASSIFICATION	0.008154093911300437	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9555977999653117	WITHOUT_CLASSIFICATION	0.0444022000346883	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.994230763472625	WITHOUT_CLASSIFICATION	0.005769236527375023	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9012448493543406	WITHOUT_CLASSIFICATION	0.09875515064565946	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9868403349504099	WITHOUT_CLASSIFICATION	0.013159665049590201	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.5649811809423103	IMPLEMENTATION	0.4350188190576898	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9546069009553403	WITHOUT_CLASSIFICATION	0.045393099044659775	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9546069009553403	WITHOUT_CLASSIFICATION	0.045393099044659775	IMPLEMENTATION
/**	IMPLEMENTATION	0.728966510454421	IMPLEMENTATION	0.27103348954557904	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.7369594421493108	IMPLEMENTATION	0.2630405578506894	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9998733271735449	IMPLEMENTATION	1.266728264549927E-4	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9988716462034201	WITHOUT_CLASSIFICATION	0.0011283537965798844	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999995383816	WITHOUT_CLASSIFICATION	4.616183854570718E-10	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.5915701738137045	IMPLEMENTATION	0.4084298261862956	WITHOUT_CLASSIFICATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.875503273523433	WITHOUT_CLASSIFICATION	0.12449672647656697	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999149300253004	WITHOUT_CLASSIFICATION	8.50699746997035E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9461996674617514	WITHOUT_CLASSIFICATION	0.05380033253824857	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8351665478834435	IMPLEMENTATION	0.16483345211655648	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8351665478834435	IMPLEMENTATION	0.16483345211655648	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9982192195002035	IMPLEMENTATION	0.0017807804997965547	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9422054895120885	WITHOUT_CLASSIFICATION	0.057794510487911475	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.998930686560528	IMPLEMENTATION	0.0010693134394720155	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8337026223392595	IMPLEMENTATION	0.1662973776607406	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.7640837870886733	IMPLEMENTATION	0.23591621291132683	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9692503549295703	WITHOUT_CLASSIFICATION	0.030749645070429734	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.8262685020816269	IMPLEMENTATION	0.17373149791837303	WITHOUT_CLASSIFICATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9988622334362796	WITHOUT_CLASSIFICATION	0.0011377665637205016	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.6553663142576123	WITHOUT_CLASSIFICATION	0.34463368574238773	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8239777292206013	IMPLEMENTATION	0.1760222707793986	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9994922165537935	WITHOUT_CLASSIFICATION	5.077834462064516E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.8156145430753765	IMPLEMENTATION	0.18438545692462344	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9705510100836934	WITHOUT_CLASSIFICATION	0.029448989916306616	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9858155017509251	WITHOUT_CLASSIFICATION	0.014184498249074782	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9940931262833966	IMPLEMENTATION	0.005906873716603318	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9940931262833966	IMPLEMENTATION	0.005906873716603318	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.8355083018924476	IMPLEMENTATION	0.16449169810755232	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9993230552283984	WITHOUT_CLASSIFICATION	6.769447716016744E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9497881168186771	WITHOUT_CLASSIFICATION	0.050211883181322824	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9995449303925629	IMPLEMENTATION	4.550696074370032E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9363131568183671	WITHOUT_CLASSIFICATION	0.06368684318163285	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9988289537131922	WITHOUT_CLASSIFICATION	0.0011710462868077859	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.950564326955203	WITHOUT_CLASSIFICATION	0.049435673044797	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999870458965999	WITHOUT_CLASSIFICATION	1.2954103400005287E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.5768891543561312	IMPLEMENTATION	0.42311084564386886	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9980194664073325	WITHOUT_CLASSIFICATION	0.0019805335926674594	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.998838026546426	IMPLEMENTATION	0.001161973453574049	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.7649182676865284	WITHOUT_CLASSIFICATION	0.23508173231347163	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.949958359216081	WITHOUT_CLASSIFICATION	0.05004164078391895	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.8889430442760732	WITHOUT_CLASSIFICATION	0.11105695572392688	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9639746564785693	IMPLEMENTATION	0.03602534352143064	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8889430442760732	WITHOUT_CLASSIFICATION	0.11105695572392688	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999948200773471	IMPLEMENTATION	5.179922653036825E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9940601716057295	IMPLEMENTATION	0.005939828394270503	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8889430442760732	WITHOUT_CLASSIFICATION	0.11105695572392688	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999630634335	WITHOUT_CLASSIFICATION	3.693656644059965E-8	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999769695433	WITHOUT_CLASSIFICATION	2.3030456748535507E-8	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.999798150828371	IMPLEMENTATION	2.0184917162906433E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999894112915605	WITHOUT_CLASSIFICATION	1.0588708439536722E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999742024175077	WITHOUT_CLASSIFICATION	2.5797582492231028E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962306018	WITHOUT_CLASSIFICATION	1.0376939816199015E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962306018	WITHOUT_CLASSIFICATION	1.0376939816199015E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999988739903093	WITHOUT_CLASSIFICATION	1.1260096906798103E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999123671529	WITHOUT_CLASSIFICATION	8.763284707530794E-8	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999997508027055	WITHOUT_CLASSIFICATION	2.4919729443590625E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999527724843	WITHOUT_CLASSIFICATION	4.722751564671877E-8	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999527724843	WITHOUT_CLASSIFICATION	4.722751564671877E-8	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999927813967	WITHOUT_CLASSIFICATION	7.218603299544191E-9	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995596937812	WITHOUT_CLASSIFICATION	4.403062188848684E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999998137754837	WITHOUT_CLASSIFICATION	1.8622451630391803E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999998585249114	WITHOUT_CLASSIFICATION	1.4147508860351067E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960306	WITHOUT_CLASSIFICATION	9.403969376223667E-9	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960306	WITHOUT_CLASSIFICATION	9.403969376223667E-9	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032453196	WITHOUT_CLASSIFICATION	1.9675468031510575E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9987045306447649	WITHOUT_CLASSIFICATION	0.0012954693552349873	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999986207887334	WITHOUT_CLASSIFICATION	1.3792112666379895E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999997388898638	WITHOUT_CLASSIFICATION	2.611101361583978E-7	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998904213	WITHOUT_CLASSIFICATION	1.0957869985122252E-10	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983080899	WITHOUT_CLASSIFICATION	1.6919100817976117E-9	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999982026590938	WITHOUT_CLASSIFICATION	1.7973409061702738E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999998480987481	WITHOUT_CLASSIFICATION	1.5190125199585596E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330603504	WITHOUT_CLASSIFICATION	2.0966939649612438E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9967641393082168	WITHOUT_CLASSIFICATION	0.003235860691783103	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999937266254932	WITHOUT_CLASSIFICATION	6.273374506688082E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998833141175	WITHOUT_CLASSIFICATION	1.1668588249969075E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999999977771	WITHOUT_CLASSIFICATION	2.2229050254388862E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999998936560815	WITHOUT_CLASSIFICATION	1.0634391850588898E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999998936560815	WITHOUT_CLASSIFICATION	1.0634391850588898E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999999418355312	WITHOUT_CLASSIFICATION	5.816446866355298E-8	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999994747468411	WITHOUT_CLASSIFICATION	5.252531588402648E-7	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999997951164371	WITHOUT_CLASSIFICATION	2.0488356298981874E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999851074279877	WITHOUT_CLASSIFICATION	1.4892572012257941E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9998509550721943	WITHOUT_CLASSIFICATION	1.490449278057274E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.728966510454421	IMPLEMENTATION	0.27103348954557904	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.728966510454421	IMPLEMENTATION	0.27103348954557904	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995380438026	WITHOUT_CLASSIFICATION	4.619561973968375E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999967050215	WITHOUT_CLASSIFICATION	3.2949786181113595E-9	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999982964819	WITHOUT_CLASSIFICATION	1.7035180433830567E-9	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999917465057498	WITHOUT_CLASSIFICATION	8.253494250146866E-6	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999998193897799	WITHOUT_CLASSIFICATION	1.806102201034052E-7	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985238587626	WITHOUT_CLASSIFICATION	1.4761412374189911E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999826431106	WITHOUT_CLASSIFICATION	1.7356889404092593E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998958300814	WITHOUT_CLASSIFICATION	1.0416991856118365E-7	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999879633468953	WITHOUT_CLASSIFICATION	1.2036653104769152E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999997984361866	WITHOUT_CLASSIFICATION	2.0156381343224721E-7	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999949507452107	WITHOUT_CLASSIFICATION	5.049254789314088E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999879633468953	WITHOUT_CLASSIFICATION	1.2036653104769152E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999949507452107	WITHOUT_CLASSIFICATION	5.049254789314088E-6	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999087860523	WITHOUT_CLASSIFICATION	9.12139477498285E-8	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999991260608075	WITHOUT_CLASSIFICATION	8.739391923967228E-7	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999953077075296	WITHOUT_CLASSIFICATION	4.6922924702942185E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9992882707840749	WITHOUT_CLASSIFICATION	7.117292159251146E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999951720501	WITHOUT_CLASSIFICATION	4.827949942216879E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999863489532	WITHOUT_CLASSIFICATION	1.3651046824348602E-8	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9987758567723382	WITHOUT_CLASSIFICATION	0.0012241432276617994	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9978720615267912	WITHOUT_CLASSIFICATION	0.0021279384732087537	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9996113843226812	WITHOUT_CLASSIFICATION	3.8861567731892044E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998834497011996	WITHOUT_CLASSIFICATION	1.1655029880044085E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999726963410581	WITHOUT_CLASSIFICATION	2.73036589419733E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999990485689944	WITHOUT_CLASSIFICATION	9.514310055762554E-7	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999956068875	WITHOUT_CLASSIFICATION	4.393112579444816E-9	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999967430847825	WITHOUT_CLASSIFICATION	3.2569152175035484E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999997861339333	WITHOUT_CLASSIFICATION	2.1386606672296125E-7	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999993813625	WITHOUT_CLASSIFICATION	6.186373859706444E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999964643998	WITHOUT_CLASSIFICATION	3.5356002042717165E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999434469903883	WITHOUT_CLASSIFICATION	5.6553009611570985E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999948272179442	WITHOUT_CLASSIFICATION	5.172782055850103E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998608651816	WITHOUT_CLASSIFICATION	1.391348184879848E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999970568732143	WITHOUT_CLASSIFICATION	2.9431267856430898E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999923925988	WITHOUT_CLASSIFICATION	7.607401132611412E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997081870967	WITHOUT_CLASSIFICATION	2.9181290326457446E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999997772049819	WITHOUT_CLASSIFICATION	2.2279501797615223E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9851733462915566	WITHOUT_CLASSIFICATION	0.014826653708443332	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999998981467847	WITHOUT_CLASSIFICATION	1.0185321535031969E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999048061813	WITHOUT_CLASSIFICATION	9.519381873695047E-8	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9402302796420572	WITHOUT_CLASSIFICATION	0.05976972035794285	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999937347579	WITHOUT_CLASSIFICATION	6.265242138433855E-9	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999947305547	WITHOUT_CLASSIFICATION	5.2694453837173405E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999547077651	WITHOUT_CLASSIFICATION	4.529223482717025E-8	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999472344768	WITHOUT_CLASSIFICATION	5.276552306227221E-8	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999999886455371	WITHOUT_CLASSIFICATION	1.1354462906871586E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999932957714	WITHOUT_CLASSIFICATION	6.704228645101041E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999998888148371	WITHOUT_CLASSIFICATION	1.1118516287803305E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999653552	WITHOUT_CLASSIFICATION	3.4644846253952476E-11	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999932957714	WITHOUT_CLASSIFICATION	6.704228645101041E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999995255897833	WITHOUT_CLASSIFICATION	4.744102167512954E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999961165843759	WITHOUT_CLASSIFICATION	3.883415623985374E-6	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999991569890913	WITHOUT_CLASSIFICATION	8.430109088414718E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999985552998647	WITHOUT_CLASSIFICATION	1.4447001353060723E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999990537637026	WITHOUT_CLASSIFICATION	9.46236297457839E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850212	WITHOUT_CLASSIFICATION	6.4149787370627196E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850212	WITHOUT_CLASSIFICATION	6.4149787370627196E-9	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999952895014809	WITHOUT_CLASSIFICATION	4.71049851915305E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999874363003	WITHOUT_CLASSIFICATION	1.2563699671861295E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999602599457091	WITHOUT_CLASSIFICATION	3.974005429089421E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999999235796	WITHOUT_CLASSIFICATION	7.642038413621206E-11	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996117901824	WITHOUT_CLASSIFICATION	3.8820981764925073E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999935311956015	WITHOUT_CLASSIFICATION	6.468804398478648E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999996824335894	WITHOUT_CLASSIFICATION	3.175664106592612E-7	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999950158916573	WITHOUT_CLASSIFICATION	4.984108342710627E-6	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995548351549	WITHOUT_CLASSIFICATION	4.451648451479792E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999991354557	WITHOUT_CLASSIFICATION	8.645442703871357E-10	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998505155664	WITHOUT_CLASSIFICATION	1.4948443358008453E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998505155664	WITHOUT_CLASSIFICATION	1.4948443358008453E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999781766636535	WITHOUT_CLASSIFICATION	2.1823336346489388E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999345749025	WITHOUT_CLASSIFICATION	6.542509748520079E-8	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998126956169	WITHOUT_CLASSIFICATION	1.8730438307094465E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999998505155664	WITHOUT_CLASSIFICATION	1.4948443358008453E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999781766636535	WITHOUT_CLASSIFICATION	2.1823336346489388E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999781766636535	WITHOUT_CLASSIFICATION	2.1823336346489388E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999862154284	WITHOUT_CLASSIFICATION	1.3784571700518424E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999877613699969	WITHOUT_CLASSIFICATION	1.2238630003137495E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999996863474	WITHOUT_CLASSIFICATION	3.136526005438924E-9	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999868111811	WITHOUT_CLASSIFICATION	1.3188818953943454E-8	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999994327299833	WITHOUT_CLASSIFICATION	5.672700167027968E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999994327299833	WITHOUT_CLASSIFICATION	5.672700167027968E-6	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999985393836801	WITHOUT_CLASSIFICATION	1.4606163198349818E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.99999998890799	WITHOUT_CLASSIFICATION	1.1092010047791817E-8	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999999710147961	WITHOUT_CLASSIFICATION	2.8985203954952862E-8	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999930337766	WITHOUT_CLASSIFICATION	6.9662233080575235E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999930337766	WITHOUT_CLASSIFICATION	6.9662233080575235E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999998571871647	WITHOUT_CLASSIFICATION	1.4281283533541285E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996621651752	WITHOUT_CLASSIFICATION	3.378348247243808E-7	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999939335293673	WITHOUT_CLASSIFICATION	6.066470632721824E-6	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999674330057	WITHOUT_CLASSIFICATION	3.256699429810528E-8	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999998836437	WITHOUT_CLASSIFICATION	1.1635623494849797E-10	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999943569546	WITHOUT_CLASSIFICATION	5.6430454223571104E-9	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999648860383944	WITHOUT_CLASSIFICATION	3.5113961605599836E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999870370145626	WITHOUT_CLASSIFICATION	1.2962985437405373E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999906949933806	WITHOUT_CLASSIFICATION	9.305006619411262E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999939335293673	WITHOUT_CLASSIFICATION	6.066470632721824E-6	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.999993653612688	WITHOUT_CLASSIFICATION	6.346387312048541E-6	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999489191469509	WITHOUT_CLASSIFICATION	5.108085304893381E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999489191469509	WITHOUT_CLASSIFICATION	5.108085304893381E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999999894990247	WITHOUT_CLASSIFICATION	1.05009752942857E-7	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999912140788478	WITHOUT_CLASSIFICATION	8.785921152204229E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998234706133052	WITHOUT_CLASSIFICATION	1.7652938669470252E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999990851613311	WITHOUT_CLASSIFICATION	9.14838669005429E-7	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998485712707218	WITHOUT_CLASSIFICATION	1.5142872927831577E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999315048454681	WITHOUT_CLASSIFICATION	6.84951545318678E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999964982244948	WITHOUT_CLASSIFICATION	3.5017755051504657E-6	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999981532076623	WITHOUT_CLASSIFICATION	1.846792337731382E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999996721878	WITHOUT_CLASSIFICATION	3.278122138626291E-10	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999996721878	WITHOUT_CLASSIFICATION	3.278122138626291E-10	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997127538195	WITHOUT_CLASSIFICATION	2.8724618047194304E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999742024175077	WITHOUT_CLASSIFICATION	2.5797582492231028E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999916339525	WITHOUT_CLASSIFICATION	8.366047610392893E-9	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999999472224693	WITHOUT_CLASSIFICATION	5.277753067450686E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962306018	WITHOUT_CLASSIFICATION	1.0376939816199015E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999998379279097	WITHOUT_CLASSIFICATION	1.620720902072375E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999604044226	WITHOUT_CLASSIFICATION	3.959557734467763E-8	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999827736573	WITHOUT_CLASSIFICATION	1.7226342651334695E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999995113934059	WITHOUT_CLASSIFICATION	4.886065941269196E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999994384785125	WITHOUT_CLASSIFICATION	5.615214875195642E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999993228589834	WITHOUT_CLASSIFICATION	6.771410165356658E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999506387486	WITHOUT_CLASSIFICATION	4.936125144000869E-8	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999989182307529	WITHOUT_CLASSIFICATION	1.0817692470643689E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999123671529	WITHOUT_CLASSIFICATION	8.763284707530794E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998690304461	WITHOUT_CLASSIFICATION	1.3096955390157073E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998690304461	WITHOUT_CLASSIFICATION	1.3096955390157073E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998321190118	WITHOUT_CLASSIFICATION	1.6788098816387361E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999518120532285	WITHOUT_CLASSIFICATION	4.818794677153573E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999998440137118	WITHOUT_CLASSIFICATION	1.5598628825522632E-7	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999999259355968	WITHOUT_CLASSIFICATION	7.406440309055464E-8	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999996022472609	WITHOUT_CLASSIFICATION	3.977527390096968E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999994575542696	WITHOUT_CLASSIFICATION	5.4244573051614E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999999527724843	WITHOUT_CLASSIFICATION	4.722751564671877E-8	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999957077389227	WITHOUT_CLASSIFICATION	4.292261077355495E-6	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999994676107528	WITHOUT_CLASSIFICATION	5.32389247372085E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999987783553498	WITHOUT_CLASSIFICATION	1.221644650238715E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999999868765256	WITHOUT_CLASSIFICATION	1.3123474406701745E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999949383082609	WITHOUT_CLASSIFICATION	5.061691739017699E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999981577056238	WITHOUT_CLASSIFICATION	1.8422943760754258E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326552373	WITHOUT_CLASSIFICATION	4.6734476263276005E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999678427092	WITHOUT_CLASSIFICATION	3.215729087246162E-8	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999890806394232	WITHOUT_CLASSIFICATION	1.0919360576840006E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999996367358778	WITHOUT_CLASSIFICATION	3.632641222286174E-7	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999836214243636	WITHOUT_CLASSIFICATION	1.637857563646819E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999981469917539	WITHOUT_CLASSIFICATION	1.853008246097274E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999997644424258	WITHOUT_CLASSIFICATION	2.3555757424361175E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962306018	WITHOUT_CLASSIFICATION	1.0376939816199015E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962306018	WITHOUT_CLASSIFICATION	1.0376939816199015E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999506387486	WITHOUT_CLASSIFICATION	4.936125144000869E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998690304461	WITHOUT_CLASSIFICATION	1.3096955390157073E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326552373	WITHOUT_CLASSIFICATION	4.6734476263276005E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999927813967	WITHOUT_CLASSIFICATION	7.218603299544191E-9	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999451210502	WITHOUT_CLASSIFICATION	5.4878949952802704E-8	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999997929785146	WITHOUT_CLASSIFICATION	2.0702148541210273E-7	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999949043152021	WITHOUT_CLASSIFICATION	5.095684797960399E-6	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999987982039774	WITHOUT_CLASSIFICATION	1.2017960226511113E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999819748513	WITHOUT_CLASSIFICATION	1.8025148611913295E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999999938429374	WITHOUT_CLASSIFICATION	6.157062607488752E-8	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999999824971585	WITHOUT_CLASSIFICATION	1.7502841496061717E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999835277117429	WITHOUT_CLASSIFICATION	1.647228825706943E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999995870283341	WITHOUT_CLASSIFICATION	4.1297166578930964E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999986169516161	WITHOUT_CLASSIFICATION	1.3830483839355091E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999986169516161	WITHOUT_CLASSIFICATION	1.3830483839355091E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999994883458	WITHOUT_CLASSIFICATION	5.116542047808912E-10	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999988773667463	WITHOUT_CLASSIFICATION	1.1226332537163356E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999928181857713	WITHOUT_CLASSIFICATION	7.181814228647563E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999969178169905	WITHOUT_CLASSIFICATION	3.0821830095342398E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999984944913	WITHOUT_CLASSIFICATION	1.5055086770734826E-9	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999980591044665	WITHOUT_CLASSIFICATION	1.9408955334985015E-6	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999709886412	WITHOUT_CLASSIFICATION	2.9011358719028533E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995596937812	WITHOUT_CLASSIFICATION	4.403062188848684E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999990652216384	WITHOUT_CLASSIFICATION	9.34778361591216E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999865345774	WITHOUT_CLASSIFICATION	1.346542253764337E-8	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999865345774	WITHOUT_CLASSIFICATION	1.346542253764337E-8	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999662667037	WITHOUT_CLASSIFICATION	3.3733296246628946E-8	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999993265342273	WITHOUT_CLASSIFICATION	6.734657728041915E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999997856164834	WITHOUT_CLASSIFICATION	2.1438351650963986E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999673212306	WITHOUT_CLASSIFICATION	3.2678769358276104E-8	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999999258756046	WITHOUT_CLASSIFICATION	7.412439547274437E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998962306018	WITHOUT_CLASSIFICATION	1.0376939816199015E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999999506387486	WITHOUT_CLASSIFICATION	4.936125144000869E-8	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999999123671529	WITHOUT_CLASSIFICATION	8.763284707530794E-8	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326552373	WITHOUT_CLASSIFICATION	4.6734476263276005E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999995326552373	WITHOUT_CLASSIFICATION	4.6734476263276005E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997192778706	WITHOUT_CLASSIFICATION	2.807221294142059E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997192778706	WITHOUT_CLASSIFICATION	2.807221294142059E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999991034381428	WITHOUT_CLASSIFICATION	8.96561857236848E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999993675123094	WITHOUT_CLASSIFICATION	6.32487690616131E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999993675123094	WITHOUT_CLASSIFICATION	6.32487690616131E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999982945830109	WITHOUT_CLASSIFICATION	1.7054169890700847E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999997635118669	WITHOUT_CLASSIFICATION	2.3648813313188602E-7	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999544064518	WITHOUT_CLASSIFICATION	4.559354815574837E-8	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999998518460484	WITHOUT_CLASSIFICATION	1.4815395157569785E-7	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998981964179	WITHOUT_CLASSIFICATION	1.0180358206960339E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999998585249114	WITHOUT_CLASSIFICATION	1.4147508860351067E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999998585249114	WITHOUT_CLASSIFICATION	1.4147508860351067E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997550792355399	WITHOUT_CLASSIFICATION	2.449207644601221E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999983959227261	WITHOUT_CLASSIFICATION	1.6040772738809207E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999859075818	WITHOUT_CLASSIFICATION	1.4092418311401645E-8	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999985798601001	WITHOUT_CLASSIFICATION	1.4201398998397832E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999965131587	WITHOUT_CLASSIFICATION	3.486841372717184E-9	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999997141258146	WITHOUT_CLASSIFICATION	2.8587418550036745E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960306	WITHOUT_CLASSIFICATION	9.403969376223667E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468483963	WITHOUT_CLASSIFICATION	5.315160364383079E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468483963	WITHOUT_CLASSIFICATION	5.315160364383079E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032453196	WITHOUT_CLASSIFICATION	1.9675468031510575E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032453196	WITHOUT_CLASSIFICATION	1.9675468031510575E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513479404	WITHOUT_CLASSIFICATION	1.754865205959663E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513479404	WITHOUT_CLASSIFICATION	1.754865205959663E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999965417612	WITHOUT_CLASSIFICATION	3.4582387954194115E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999965417612	WITHOUT_CLASSIFICATION	3.4582387954194115E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999998585249114	WITHOUT_CLASSIFICATION	1.4147508860351067E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999905960306	WITHOUT_CLASSIFICATION	9.403969376223667E-9	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468483963	WITHOUT_CLASSIFICATION	5.315160364383079E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999468483963	WITHOUT_CLASSIFICATION	5.315160364383079E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998032453196	WITHOUT_CLASSIFICATION	1.9675468031510575E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513479404	WITHOUT_CLASSIFICATION	1.754865205959663E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999824513479404	WITHOUT_CLASSIFICATION	1.754865205959663E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999965417612	WITHOUT_CLASSIFICATION	3.4582387954194115E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999891639162789	WITHOUT_CLASSIFICATION	1.0836083721027823E-5	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999999714857165	WITHOUT_CLASSIFICATION	2.85142835011714E-7	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999430007552348	WITHOUT_CLASSIFICATION	5.699924476517455E-5	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999945222881285	WITHOUT_CLASSIFICATION	5.4777118714911974E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.999995514122789	WITHOUT_CLASSIFICATION	4.485877211091279E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999981702379318	WITHOUT_CLASSIFICATION	1.8297620682357893E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999999914789746	WITHOUT_CLASSIFICATION	8.521025397914638E-8	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999999711228338	WITHOUT_CLASSIFICATION	2.8877166209270158E-8	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999994590902538	WITHOUT_CLASSIFICATION	5.409097462221859E-7	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999354058832	WITHOUT_CLASSIFICATION	6.459411684759452E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999996851496937	WITHOUT_CLASSIFICATION	3.14850306287313E-7	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999902427553	WITHOUT_CLASSIFICATION	9.75724466409237E-9	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999952895014809	WITHOUT_CLASSIFICATION	4.71049851915305E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999981702379318	WITHOUT_CLASSIFICATION	1.8297620682357893E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999909676709542	WITHOUT_CLASSIFICATION	9.032329045904984E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999909676709542	WITHOUT_CLASSIFICATION	9.032329045904984E-6	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999834996849	WITHOUT_CLASSIFICATION	1.6500315114925966E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999531180311	WITHOUT_CLASSIFICATION	4.688196880895423E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999531180311	WITHOUT_CLASSIFICATION	4.688196880895423E-8	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999980565362	WITHOUT_CLASSIFICATION	1.9434638596153255E-9	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999848147456	WITHOUT_CLASSIFICATION	1.5185254395396364E-7	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999667424173	WITHOUT_CLASSIFICATION	3.3257582711984765E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999694317187026	WITHOUT_CLASSIFICATION	3.056828129744572E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999694317187026	WITHOUT_CLASSIFICATION	3.056828129744572E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998904213	WITHOUT_CLASSIFICATION	1.0957869985122252E-10	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998281173303	WITHOUT_CLASSIFICATION	1.718826696966856E-7	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999998281173303	WITHOUT_CLASSIFICATION	1.718826696966856E-7	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999801006105	WITHOUT_CLASSIFICATION	1.9899389498322523E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999954460135	WITHOUT_CLASSIFICATION	4.553986458248177E-9	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999998460445	WITHOUT_CLASSIFICATION	1.53955428367666E-10	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999983060760954	WITHOUT_CLASSIFICATION	1.693923904510899E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.999999975438837	WITHOUT_CLASSIFICATION	2.4561162945343697E-8	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999999704509723	WITHOUT_CLASSIFICATION	2.95490276045037E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983080899	WITHOUT_CLASSIFICATION	1.6919100817976117E-9	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999989756772639	WITHOUT_CLASSIFICATION	1.0243227360695727E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9889541064004136	WITHOUT_CLASSIFICATION	0.011045893599586408	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999988518724697	WITHOUT_CLASSIFICATION	1.1481275302840072E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999998534022304	WITHOUT_CLASSIFICATION	1.4659776954768746E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330603504	WITHOUT_CLASSIFICATION	2.0966939649612438E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999778595972	WITHOUT_CLASSIFICATION	2.2140402853750988E-8	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.999999859471476	WITHOUT_CLASSIFICATION	1.405285241164141E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999423253931	WITHOUT_CLASSIFICATION	5.767460690322146E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330603504	WITHOUT_CLASSIFICATION	2.0966939649612438E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999556024184	WITHOUT_CLASSIFICATION	4.439758167820227E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999988231869871	WITHOUT_CLASSIFICATION	1.1768130129134478E-6	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999946325108204	WITHOUT_CLASSIFICATION	5.3674891796324885E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999996055990907	WITHOUT_CLASSIFICATION	3.944009093311584E-7	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999996405210005	WITHOUT_CLASSIFICATION	3.594789994913157E-7	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999998593895225	WITHOUT_CLASSIFICATION	1.4061047742546764E-7	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999999424371949	WITHOUT_CLASSIFICATION	5.756280522618883E-8	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.999998833141175	WITHOUT_CLASSIFICATION	1.1668588249969075E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999652102726	WITHOUT_CLASSIFICATION	3.478972744572695E-8	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999999977771	WITHOUT_CLASSIFICATION	2.2229050254388862E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999988271835238	WITHOUT_CLASSIFICATION	1.1728164761607273E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999954005371	WITHOUT_CLASSIFICATION	4.59946285300387E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999330180036	WITHOUT_CLASSIFICATION	6.698199641473231E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983080899	WITHOUT_CLASSIFICATION	1.6919100817976117E-9	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999652102726	WITHOUT_CLASSIFICATION	3.478972744572695E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999988271835238	WITHOUT_CLASSIFICATION	1.1728164761607273E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999330180036	WITHOUT_CLASSIFICATION	6.698199641473231E-8	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999994241726915	WITHOUT_CLASSIFICATION	5.758273085936871E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999963284924794	WITHOUT_CLASSIFICATION	3.6715075206153517E-6	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996747858573	WITHOUT_CLASSIFICATION	3.2521414272239525E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999998936560815	WITHOUT_CLASSIFICATION	1.0634391850588898E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999998999185535	WITHOUT_CLASSIFICATION	1.0008144645069837E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999914717533447	WITHOUT_CLASSIFICATION	8.52824665526344E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999993087052873	WITHOUT_CLASSIFICATION	6.91294712755134E-7	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999998244326475	WITHOUT_CLASSIFICATION	1.7556735249784106E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999999050624289	WITHOUT_CLASSIFICATION	9.493757110645114E-8	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999975888636	WITHOUT_CLASSIFICATION	2.4111365130469735E-9	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999626724044	WITHOUT_CLASSIFICATION	3.732759555833734E-8	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999980683214774	WITHOUT_CLASSIFICATION	1.9316785226080484E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999674235772	WITHOUT_CLASSIFICATION	3.257642277958533E-8	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997282402957	WITHOUT_CLASSIFICATION	2.717597043546522E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999995580266732	WITHOUT_CLASSIFICATION	4.4197332692362974E-7	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999993695566942	WITHOUT_CLASSIFICATION	6.304433058208972E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999994747468411	WITHOUT_CLASSIFICATION	5.252531588402648E-7	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999814209894	WITHOUT_CLASSIFICATION	1.8579010535698103E-8	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999997801256111	WITHOUT_CLASSIFICATION	2.1987438893339566E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999652102726	WITHOUT_CLASSIFICATION	3.478972744572695E-8	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999998687658945	WITHOUT_CLASSIFICATION	1.312341054358597E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999970189202417	WITHOUT_CLASSIFICATION	2.9810797582329597E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999992831957799	WITHOUT_CLASSIFICATION	7.168042200904006E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999988569538162	WITHOUT_CLASSIFICATION	1.1430461838529133E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999681266999	WITHOUT_CLASSIFICATION	3.187330002102399E-8	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999999588735708	WITHOUT_CLASSIFICATION	4.112642919645747E-8	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999928212404	WITHOUT_CLASSIFICATION	7.17875957171582E-9	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999799738615	WITHOUT_CLASSIFICATION	2.0026138496467356E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999946743992848	WITHOUT_CLASSIFICATION	5.325600715255586E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999993920064434	WITHOUT_CLASSIFICATION	6.079935566178651E-7	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999966244696294	WITHOUT_CLASSIFICATION	3.375530370564791E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999997243635483	WITHOUT_CLASSIFICATION	2.756364517012197E-7	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9995546417502968	WITHOUT_CLASSIFICATION	4.453582497032354E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999851074279877	WITHOUT_CLASSIFICATION	1.4892572012257941E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998082699583	WITHOUT_CLASSIFICATION	1.9173004174508501E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998413106143137	WITHOUT_CLASSIFICATION	1.586893856863968E-4	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999515056233218	WITHOUT_CLASSIFICATION	4.8494376678086516E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999833270297682	WITHOUT_CLASSIFICATION	1.6672970231812503E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999871728556728	WITHOUT_CLASSIFICATION	1.2827144327215765E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999969576004709	WITHOUT_CLASSIFICATION	3.0423995291088896E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999957848288	WITHOUT_CLASSIFICATION	4.215171286328754E-9	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999970336442565	WITHOUT_CLASSIFICATION	2.9663557434446984E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999978433100888	WITHOUT_CLASSIFICATION	2.1566899112286324E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999999682613293	WITHOUT_CLASSIFICATION	3.173867070399021E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999826623122244	WITHOUT_CLASSIFICATION	1.733768777557517E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999826623122244	WITHOUT_CLASSIFICATION	1.733768777557517E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999748718734361	WITHOUT_CLASSIFICATION	2.5128126563823936E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997273560578557	WITHOUT_CLASSIFICATION	2.72643942144318E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999972717194144	WITHOUT_CLASSIFICATION	2.7282805855846437E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999998040856581	WITHOUT_CLASSIFICATION	1.9591434194289673E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999999992227887	WITHOUT_CLASSIFICATION	7.772112908941764E-9	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999970556557	WITHOUT_CLASSIFICATION	2.9443443071460343E-9	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999995313419813	WITHOUT_CLASSIFICATION	4.6865801877691013E-7	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999997362312718	WITHOUT_CLASSIFICATION	2.637687282582039E-7	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999990378404885	WITHOUT_CLASSIFICATION	9.621595115847884E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999998375712161	WITHOUT_CLASSIFICATION	1.624287839570558E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999958086952438	WITHOUT_CLASSIFICATION	4.191304756139975E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999871910058709	WITHOUT_CLASSIFICATION	1.2808994129276795E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999889004949	WITHOUT_CLASSIFICATION	1.109950518112469E-8	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999988277390484	WITHOUT_CLASSIFICATION	1.17226095168767E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999972546195	WITHOUT_CLASSIFICATION	2.745380572817358E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994555138578	WITHOUT_CLASSIFICATION	5.444861421114059E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999994266691217	WITHOUT_CLASSIFICATION	5.733308782596192E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999996312892	WITHOUT_CLASSIFICATION	3.687108290543316E-10	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999995426590642	WITHOUT_CLASSIFICATION	4.573409357012194E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9997770295011346	WITHOUT_CLASSIFICATION	2.2297049886549347E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999995829986246	WITHOUT_CLASSIFICATION	4.170013753986995E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999995829986246	WITHOUT_CLASSIFICATION	4.170013753986995E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999997495733538	WITHOUT_CLASSIFICATION	2.5042664628720114E-7	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999997495733538	WITHOUT_CLASSIFICATION	2.5042664628720114E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999978433100888	WITHOUT_CLASSIFICATION	2.1566899112286324E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999989973980538	WITHOUT_CLASSIFICATION	1.0026019462155987E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993945088647004	WITHOUT_CLASSIFICATION	6.054911352994811E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995438604272	WITHOUT_CLASSIFICATION	4.561395726770036E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997127538195	WITHOUT_CLASSIFICATION	2.8724618047194304E-7	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993945088647004	WITHOUT_CLASSIFICATION	6.054911352994811E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995438604272	WITHOUT_CLASSIFICATION	4.561395726770036E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839839708471	WITHOUT_CLASSIFICATION	1.6016029152839655E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999988045322	WITHOUT_CLASSIFICATION	1.1954677886019238E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999356767082	WITHOUT_CLASSIFICATION	6.432329180848608E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999992654548705	WITHOUT_CLASSIFICATION	7.345451294453343E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999266559686393	WITHOUT_CLASSIFICATION	7.334403136068971E-5	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9974303260743366	WITHOUT_CLASSIFICATION	0.0025696739256634037	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999849922169	WITHOUT_CLASSIFICATION	1.5007783132711608E-8	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998608580328	WITHOUT_CLASSIFICATION	1.391419671872688E-7	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999993090332927	WITHOUT_CLASSIFICATION	6.909667073105453E-7	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999977025562	WITHOUT_CLASSIFICATION	2.2974438684872438E-9	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999975915596048	WITHOUT_CLASSIFICATION	2.4084403952414736E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999845683014	WITHOUT_CLASSIFICATION	1.5431698629810245E-8	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999237237308	WITHOUT_CLASSIFICATION	7.627626919373615E-8	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999873230137352	WITHOUT_CLASSIFICATION	1.267698626487657E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997127538195	WITHOUT_CLASSIFICATION	2.8724618047194304E-7	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999965386378736	WITHOUT_CLASSIFICATION	3.461362126382604E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999709581447	WITHOUT_CLASSIFICATION	2.9041855183436826E-8	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999709581447	WITHOUT_CLASSIFICATION	2.9041855183436826E-8	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999999018666716	WITHOUT_CLASSIFICATION	9.813332836012259E-8	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839839708471	WITHOUT_CLASSIFICATION	1.6016029152839655E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999965099080116	WITHOUT_CLASSIFICATION	3.4900919884252376E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999703043447269	WITHOUT_CLASSIFICATION	2.969565527310224E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9993450804336776	WITHOUT_CLASSIFICATION	6.549195663223533E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998698560119	WITHOUT_CLASSIFICATION	1.3014398811475853E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997261596125256	WITHOUT_CLASSIFICATION	2.7384038747437016E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839839708471	WITHOUT_CLASSIFICATION	1.6016029152839655E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998698560119	WITHOUT_CLASSIFICATION	1.3014398811475853E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997261596125256	WITHOUT_CLASSIFICATION	2.7384038747437016E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999519126640074	WITHOUT_CLASSIFICATION	4.808733599261558E-5	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999995746603333	WITHOUT_CLASSIFICATION	4.253396667554824E-7	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999971442319541	WITHOUT_CLASSIFICATION	2.8557680458525364E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839839708471	WITHOUT_CLASSIFICATION	1.6016029152839655E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999839839708471	WITHOUT_CLASSIFICATION	1.6016029152839655E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999999067632389	WITHOUT_CLASSIFICATION	9.323676106937409E-8	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999997833072657	WITHOUT_CLASSIFICATION	2.1669273427774047E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.99999870628703	WITHOUT_CLASSIFICATION	1.293712969912146E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999979692651951	WITHOUT_CLASSIFICATION	2.030734804910805E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999998787941767	WITHOUT_CLASSIFICATION	1.2120582325213442E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999972188651	WITHOUT_CLASSIFICATION	2.7811348204631577E-9	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999982132085108	WITHOUT_CLASSIFICATION	1.7867914892266708E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999271917925	WITHOUT_CLASSIFICATION	7.280820746419501E-8	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999999440027211	WITHOUT_CLASSIFICATION	5.599727896654377E-8	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.99999914473224	WITHOUT_CLASSIFICATION	8.552677600019804E-7	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999989565484717	WITHOUT_CLASSIFICATION	1.0434515282177544E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999984405924488	WITHOUT_CLASSIFICATION	1.5594075511488659E-6	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999990064917	WITHOUT_CLASSIFICATION	9.935083246182416E-10	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999998332411879	WITHOUT_CLASSIFICATION	1.6675881209248485E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999219096793	WITHOUT_CLASSIFICATION	7.809032069408142E-8	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999991451873	WITHOUT_CLASSIFICATION	8.548126808869607E-10	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999917465057498	WITHOUT_CLASSIFICATION	8.253494250146866E-6	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.999998966193302	WITHOUT_CLASSIFICATION	1.0338066980632404E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998444340735649	WITHOUT_CLASSIFICATION	1.5556592643516473E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997751762327	WITHOUT_CLASSIFICATION	2.248237672783016E-7	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999878323038178	WITHOUT_CLASSIFICATION	1.2167696182155585E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9969740843287148	WITHOUT_CLASSIFICATION	0.003025915671285101	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9969740843287148	WITHOUT_CLASSIFICATION	0.003025915671285101	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999917465057498	WITHOUT_CLASSIFICATION	8.253494250146866E-6	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999993615524901	WITHOUT_CLASSIFICATION	6.384475099874721E-7	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999835582806	WITHOUT_CLASSIFICATION	1.6441719473900285E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9899043883805587	WITHOUT_CLASSIFICATION	0.01009561161944125	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999999927379699	WITHOUT_CLASSIFICATION	7.262030100250271E-8	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963589772768	WITHOUT_CLASSIFICATION	3.6410227231386427E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999999220893664	WITHOUT_CLASSIFICATION	7.791063363586581E-8	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998120916088	WITHOUT_CLASSIFICATION	1.879083911466856E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999991840004021	WITHOUT_CLASSIFICATION	8.159995979140412E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999771677249	WITHOUT_CLASSIFICATION	2.2832275122968386E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999996639150088	WITHOUT_CLASSIFICATION	3.3608499113211393E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998303164457	WITHOUT_CLASSIFICATION	1.6968355430529773E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999967696926422	WITHOUT_CLASSIFICATION	3.2303073576829874E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999855626953544	WITHOUT_CLASSIFICATION	1.4437304645476959E-5	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999990954875261	WITHOUT_CLASSIFICATION	9.045124738505037E-7	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989433389338	WITHOUT_CLASSIFICATION	1.0566610662609423E-6	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999867009901	WITHOUT_CLASSIFICATION	1.32990098816327E-8	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999857656839	WITHOUT_CLASSIFICATION	1.4234315959853919E-8	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999991287827227	WITHOUT_CLASSIFICATION	8.712172773891319E-7	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999882735347	WITHOUT_CLASSIFICATION	1.1726465292935722E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998345220973	WITHOUT_CLASSIFICATION	1.6547790269487982E-7	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999729275185941	WITHOUT_CLASSIFICATION	2.70724814057869E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999972771681496	WITHOUT_CLASSIFICATION	2.7228318503790173E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869638784845	WITHOUT_CLASSIFICATION	1.3036121515556334E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995127717200684	WITHOUT_CLASSIFICATION	4.872282799316187E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904439675268	WITHOUT_CLASSIFICATION	9.556032473339648E-6	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720638619316	WITHOUT_CLASSIFICATION	2.793613806832275E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998043720623471	WITHOUT_CLASSIFICATION	1.9562793765299185E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815345097424	WITHOUT_CLASSIFICATION	1.846549025760998E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999842842002849	WITHOUT_CLASSIFICATION	1.5715799715100968E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977771830266	WITHOUT_CLASSIFICATION	2.222816973400623E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999950600056803	WITHOUT_CLASSIFICATION	4.93999431981186E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999877041492695	WITHOUT_CLASSIFICATION	1.2295850730464426E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954324645164	WITHOUT_CLASSIFICATION	4.5675354835793044E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999096352118	WITHOUT_CLASSIFICATION	9.03647882050686E-7	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999428230364144	WITHOUT_CLASSIFICATION	5.7176963585626054E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999044805871827	WITHOUT_CLASSIFICATION	9.551941281721069E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851565898751	WITHOUT_CLASSIFICATION	1.4843410125035399E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954070378586	WITHOUT_CLASSIFICATION	4.592962141374471E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998969729338288	WITHOUT_CLASSIFICATION	1.0302706617116175E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999930868238131	WITHOUT_CLASSIFICATION	6.913176186891924E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999994864224184	WITHOUT_CLASSIFICATION	5.135775816533993E-7	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853252896221	WITHOUT_CLASSIFICATION	1.4674710378013341E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.997642781545341	WITHOUT_CLASSIFICATION	0.002357218454659033	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999509979228	WITHOUT_CLASSIFICATION	4.90020771751062E-8	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999955878236	WITHOUT_CLASSIFICATION	4.412176364461615E-9	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562019196	WITHOUT_CLASSIFICATION	4.3798080511483186E-8	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999974230794827	WITHOUT_CLASSIFICATION	2.5769205172773885E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999968706715118	WITHOUT_CLASSIFICATION	3.1293284881994854E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999999800036575	WITHOUT_CLASSIFICATION	1.9996342497783027E-7	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999933655188	WITHOUT_CLASSIFICATION	6.634481209481312E-9	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999984065016914	WITHOUT_CLASSIFICATION	1.5934983086367433E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999986651953403	WITHOUT_CLASSIFICATION	1.3348046596413615E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999995186355898	WITHOUT_CLASSIFICATION	4.81364410280415E-7	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999998837051206	WITHOUT_CLASSIFICATION	1.1629487931248464E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999475919296	WITHOUT_CLASSIFICATION	5.2408070431145095E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999958370147	WITHOUT_CLASSIFICATION	4.162985266341295E-9	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999991584914537	WITHOUT_CLASSIFICATION	8.415085464077234E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999999630624447	WITHOUT_CLASSIFICATION	3.6937555268990774E-8	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999996039827882	WITHOUT_CLASSIFICATION	3.9601721180571687E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947577363603	WITHOUT_CLASSIFICATION	5.2422636396994144E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966799422728	WITHOUT_CLASSIFICATION	3.3200577271070593E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999617475387147	WITHOUT_CLASSIFICATION	3.82524612853147E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987980472382	WITHOUT_CLASSIFICATION	1.2019527618059819E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999047626621096	WITHOUT_CLASSIFICATION	9.523733789040586E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999832489694	WITHOUT_CLASSIFICATION	1.6751030621747176E-8	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9968588402256096	WITHOUT_CLASSIFICATION	0.0031411597743904508	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9996640009714199	WITHOUT_CLASSIFICATION	3.3599902858015064E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900158067017	WITHOUT_CLASSIFICATION	9.984193298428372E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999835819149	WITHOUT_CLASSIFICATION	1.6418085079588108E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999746791071	WITHOUT_CLASSIFICATION	2.5320892888465237E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999859192723	WITHOUT_CLASSIFICATION	1.408072768116768E-8	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999967219187	WITHOUT_CLASSIFICATION	3.2780811692590194E-9	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999920532202696	WITHOUT_CLASSIFICATION	7.946779730392234E-6	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.999995632292507	WITHOUT_CLASSIFICATION	4.3677074929960745E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999894945506	WITHOUT_CLASSIFICATION	1.0505449386020006E-8	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999999241312537	WITHOUT_CLASSIFICATION	7.586874628844813E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562019196	WITHOUT_CLASSIFICATION	4.3798080511483186E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997835902182	WITHOUT_CLASSIFICATION	2.1640978187060446E-7	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999793171800304	WITHOUT_CLASSIFICATION	2.06828199695439E-5	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999901396835378	WITHOUT_CLASSIFICATION	9.86031646209662E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996341344394	WITHOUT_CLASSIFICATION	3.658655606686014E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999996944227488	WITHOUT_CLASSIFICATION	3.055772511994518E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999997255333369	WITHOUT_CLASSIFICATION	2.7446666303395624E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999836554420009	WITHOUT_CLASSIFICATION	1.6344557999121533E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999997406912868	WITHOUT_CLASSIFICATION	2.5930871319087157E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999990002339787	WITHOUT_CLASSIFICATION	9.9976602121462E-7	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998738408922	WITHOUT_CLASSIFICATION	1.2615910776004507E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999981690436398	WITHOUT_CLASSIFICATION	1.8309563602002587E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999987429946	WITHOUT_CLASSIFICATION	1.2570054003327036E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999887681991	WITHOUT_CLASSIFICATION	1.1231800911725735E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999979433187838	WITHOUT_CLASSIFICATION	2.056681216189127E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999369875231	WITHOUT_CLASSIFICATION	6.301247689340259E-8	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999995232602863	WITHOUT_CLASSIFICATION	4.767397136817602E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999898616524305	WITHOUT_CLASSIFICATION	1.0138347569476166E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985423310744	WITHOUT_CLASSIFICATION	1.4576689256803585E-6	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.99999919227811	WITHOUT_CLASSIFICATION	8.077218900748544E-7	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999882621379159	WITHOUT_CLASSIFICATION	1.1737862084103202E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999988974027069	WITHOUT_CLASSIFICATION	1.1025972930518933E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999985327911488	WITHOUT_CLASSIFICATION	1.4672088512031438E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999843514342347	WITHOUT_CLASSIFICATION	1.564856576530889E-5	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999903953869584	WITHOUT_CLASSIFICATION	9.604613041605469E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999964913756285	WITHOUT_CLASSIFICATION	3.5086243713903833E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997602365657	WITHOUT_CLASSIFICATION	2.397634342811549E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9967641393082168	WITHOUT_CLASSIFICATION	0.003235860691783103	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999989940485419	WITHOUT_CLASSIFICATION	1.0059514581286216E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999995898873846	WITHOUT_CLASSIFICATION	4.1011261537641823E-7	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999646005074	WITHOUT_CLASSIFICATION	3.539949262187811E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562019196	WITHOUT_CLASSIFICATION	4.3798080511483186E-8	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999997540722696	WITHOUT_CLASSIFICATION	2.4592773039044847E-7	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998719937756	WITHOUT_CLASSIFICATION	1.2800622433774847E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996792585217	WITHOUT_CLASSIFICATION	3.2074147832689867E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562019196	WITHOUT_CLASSIFICATION	4.3798080511483186E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999161685598	WITHOUT_CLASSIFICATION	8.383144032461806E-8	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999988974027069	WITHOUT_CLASSIFICATION	1.1025972930518933E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999743848412764	WITHOUT_CLASSIFICATION	2.561515872363046E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999853155598861	WITHOUT_CLASSIFICATION	1.4684440113843663E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968745235974	WITHOUT_CLASSIFICATION	3.12547640261021E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998738408922	WITHOUT_CLASSIFICATION	1.2615910776004507E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999981690436398	WITHOUT_CLASSIFICATION	1.8309563602002587E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999987429946	WITHOUT_CLASSIFICATION	1.2570054003327036E-7	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999990075844	WITHOUT_CLASSIFICATION	9.924156271073452E-10	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.999999729035043	WITHOUT_CLASSIFICATION	2.709649570716967E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999982972346224	WITHOUT_CLASSIFICATION	1.702765377577179E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999600659587	WITHOUT_CLASSIFICATION	3.9934041259230346E-8	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999999129962	WITHOUT_CLASSIFICATION	8.700383259035657E-11	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999562019196	WITHOUT_CLASSIFICATION	4.3798080511483186E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999887681991	WITHOUT_CLASSIFICATION	1.1231800911725735E-8	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999979433187838	WITHOUT_CLASSIFICATION	2.056681216189127E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999904223877	WITHOUT_CLASSIFICATION	9.577612306298286E-9	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999725465614	WITHOUT_CLASSIFICATION	2.7453438743766788E-8	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999993552968	WITHOUT_CLASSIFICATION	6.447031221799259E-10	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999974230921	WITHOUT_CLASSIFICATION	2.5769079236791184E-9	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999999978845006	WITHOUT_CLASSIFICATION	2.1154993915918194E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999488332753	WITHOUT_CLASSIFICATION	5.116672460572344E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999930868238131	WITHOUT_CLASSIFICATION	6.913176186891924E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999841524443	WITHOUT_CLASSIFICATION	1.5847555648672887E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9981458742037428	WITHOUT_CLASSIFICATION	0.001854125796257205	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999997219014838	WITHOUT_CLASSIFICATION	2.780985161355457E-7	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999987005415742	WITHOUT_CLASSIFICATION	1.2994584257884658E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997817671911	WITHOUT_CLASSIFICATION	2.182328089654122E-7	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998043720623471	WITHOUT_CLASSIFICATION	1.9562793765299185E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815345097424	WITHOUT_CLASSIFICATION	1.846549025760998E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999096352118	WITHOUT_CLASSIFICATION	9.03647882050686E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999997817671911	WITHOUT_CLASSIFICATION	2.182328089654122E-7	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999939766138258	WITHOUT_CLASSIFICATION	6.023386174141157E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998666367068	WITHOUT_CLASSIFICATION	1.3336329320500014E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997576502419165	WITHOUT_CLASSIFICATION	2.4234975808348297E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998889130167875	WITHOUT_CLASSIFICATION	1.1108698321236974E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999601670777474	WITHOUT_CLASSIFICATION	3.9832922252609406E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.999959655549549	WITHOUT_CLASSIFICATION	4.0344450451049635E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999428230364144	WITHOUT_CLASSIFICATION	5.7176963585626054E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954070378586	WITHOUT_CLASSIFICATION	4.592962141374471E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999967219187	WITHOUT_CLASSIFICATION	3.2780811692590194E-9	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999928024562	WITHOUT_CLASSIFICATION	7.197543694479696E-9	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999114919008	WITHOUT_CLASSIFICATION	8.850809909392712E-8	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999173524308	WITHOUT_CLASSIFICATION	8.264756920431947E-8	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999515698218	WITHOUT_CLASSIFICATION	4.8430178319134176E-8	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999996531829579	WITHOUT_CLASSIFICATION	3.4681704210053465E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999997402368682	WITHOUT_CLASSIFICATION	2.59763131759627E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999849689362265	WITHOUT_CLASSIFICATION	1.5031063773503907E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999771677249	WITHOUT_CLASSIFICATION	2.2832275122968386E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999970189147493	WITHOUT_CLASSIFICATION	2.9810852507029702E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999956270160054	WITHOUT_CLASSIFICATION	4.372983994585623E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999888495643685	WITHOUT_CLASSIFICATION	1.115043563138102E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999261640538	WITHOUT_CLASSIFICATION	7.383594620233285E-8	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999995650729727	WITHOUT_CLASSIFICATION	4.3492702729165796E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999846408560205	WITHOUT_CLASSIFICATION	1.535914397951178E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999786091392425	WITHOUT_CLASSIFICATION	2.1390860757417864E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999592479837604	WITHOUT_CLASSIFICATION	4.075201623959996E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998624157353	WITHOUT_CLASSIFICATION	1.3758426470518933E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999993311849227	WITHOUT_CLASSIFICATION	6.68815077306692E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999945398758071	WITHOUT_CLASSIFICATION	5.460124192869495E-6	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999762159333802	WITHOUT_CLASSIFICATION	2.3784066619850086E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999948096092627	WITHOUT_CLASSIFICATION	5.1903907372535086E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988044925756	WITHOUT_CLASSIFICATION	1.195507424488065E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982950595281	WITHOUT_CLASSIFICATION	1.7049404718561347E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998604092382	WITHOUT_CLASSIFICATION	1.395907619022382E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998186316197	WITHOUT_CLASSIFICATION	1.8136838029451668E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996158817637	WITHOUT_CLASSIFICATION	3.8411823629840794E-7	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999976852704028	WITHOUT_CLASSIFICATION	2.3147295971962734E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997086164788	WITHOUT_CLASSIFICATION	2.913835212499476E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991824509666	WITHOUT_CLASSIFICATION	8.175490334554573E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999990307872694	WITHOUT_CLASSIFICATION	9.692127307311116E-7	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999535416677	WITHOUT_CLASSIFICATION	4.645833236731573E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997153058605	WITHOUT_CLASSIFICATION	2.846941394205369E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999994496230047	WITHOUT_CLASSIFICATION	5.503769952730412E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999376285463553	WITHOUT_CLASSIFICATION	6.237145364469827E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999470446340772	WITHOUT_CLASSIFICATION	5.295536592279724E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999998313385059	WITHOUT_CLASSIFICATION	1.6866149403280876E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999994184771154	WITHOUT_CLASSIFICATION	5.815228846337504E-7	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999982760973215	WITHOUT_CLASSIFICATION	1.7239026785443045E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999378971745687	WITHOUT_CLASSIFICATION	6.210282543126588E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999776389571	WITHOUT_CLASSIFICATION	2.236104288424639E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9990111576182796	WITHOUT_CLASSIFICATION	9.888423817203294E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999999982715705	WITHOUT_CLASSIFICATION	1.7284294931578984E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999951328595601	WITHOUT_CLASSIFICATION	4.867140439796271E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999982850527324	WITHOUT_CLASSIFICATION	1.714947267620093E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999646266755	WITHOUT_CLASSIFICATION	3.5373324402459664E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999998989465728	WITHOUT_CLASSIFICATION	1.010534272444666E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999998507644032	WITHOUT_CLASSIFICATION	1.49235596659649E-7	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999992098599698	WITHOUT_CLASSIFICATION	7.901400303025733E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.998762487584572	WITHOUT_CLASSIFICATION	0.0012375124154280573	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998886053503244	WITHOUT_CLASSIFICATION	1.1139464967564321E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999994068146778	WITHOUT_CLASSIFICATION	5.931853221638408E-7	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999918001993	WITHOUT_CLASSIFICATION	8.199800753691926E-9	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999384817132527	WITHOUT_CLASSIFICATION	6.151828674726138E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999842493558982	WITHOUT_CLASSIFICATION	1.5750644101842656E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999997823900305	WITHOUT_CLASSIFICATION	2.1760996937097681E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999835311449163	WITHOUT_CLASSIFICATION	1.6468855083592565E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995073981598	WITHOUT_CLASSIFICATION	4.926018401565712E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9990040098498639	WITHOUT_CLASSIFICATION	9.95990150136065E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999810095152747	WITHOUT_CLASSIFICATION	1.8990484725310013E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999998805089	WITHOUT_CLASSIFICATION	1.19491042898533E-10	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998172849103	WITHOUT_CLASSIFICATION	1.8271508974089454E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999914769875	WITHOUT_CLASSIFICATION	8.523012554432703E-9	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999233685724	WITHOUT_CLASSIFICATION	7.663142765126286E-8	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9926752682441631	WITHOUT_CLASSIFICATION	0.007324731755836928	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999922167936826	WITHOUT_CLASSIFICATION	7.783206317457562E-6	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999986154916672	WITHOUT_CLASSIFICATION	1.3845083327311855E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999995550612137	WITHOUT_CLASSIFICATION	4.4493878628572264E-7	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999998408232116	WITHOUT_CLASSIFICATION	1.591767883117098E-7	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999924590615623	WITHOUT_CLASSIFICATION	7.540938437718078E-6	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999991931822663	WITHOUT_CLASSIFICATION	8.068177338359659E-7	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999997208023623	WITHOUT_CLASSIFICATION	2.7919763767341805E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9966919007992107	WITHOUT_CLASSIFICATION	0.003308099200789468	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999192618996338	WITHOUT_CLASSIFICATION	8.073810036618624E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999992037683908	WITHOUT_CLASSIFICATION	7.962316091806847E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999789621012122	WITHOUT_CLASSIFICATION	2.103789878786018E-5	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999996762850054	WITHOUT_CLASSIFICATION	3.237149946557946E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.999999621790531	WITHOUT_CLASSIFICATION	3.7820946896465647E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999994771888342	WITHOUT_CLASSIFICATION	5.22811165756371E-7	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999982966819363	WITHOUT_CLASSIFICATION	1.703318063695756E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999997714007	WITHOUT_CLASSIFICATION	2.285992510254657E-10	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999933936709113	WITHOUT_CLASSIFICATION	6.606329088677164E-6	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.99999999505439	WITHOUT_CLASSIFICATION	4.945609970166792E-9	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998972853685153	WITHOUT_CLASSIFICATION	1.0271463148471124E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999988917721807	WITHOUT_CLASSIFICATION	1.1082278193158339E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999982930582	WITHOUT_CLASSIFICATION	1.7069419261488905E-9	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999055255219	WITHOUT_CLASSIFICATION	9.447447807795943E-8	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999991254	WITHOUT_CLASSIFICATION	8.746084221375871E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999945511160317	WITHOUT_CLASSIFICATION	5.448883968319758E-6	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999857191990426	WITHOUT_CLASSIFICATION	1.4280800957409401E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999372630024	WITHOUT_CLASSIFICATION	6.273699759883677E-8	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999999043872647	WITHOUT_CLASSIFICATION	9.56127353291017E-8	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999634428054235	WITHOUT_CLASSIFICATION	3.6557194576513914E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999999109114704	WITHOUT_CLASSIFICATION	8.908852961292899E-8	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999972186789842	WITHOUT_CLASSIFICATION	2.7813210157991486E-5	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999950172700606	WITHOUT_CLASSIFICATION	4.982729939468223E-6	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999806439383055	WITHOUT_CLASSIFICATION	1.935606169438453E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999971143204529	WITHOUT_CLASSIFICATION	2.8856795470574472E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999334318583	WITHOUT_CLASSIFICATION	6.656814172227283E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999984049457328	WITHOUT_CLASSIFICATION	1.5950542671766947E-6	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999943580651408	WITHOUT_CLASSIFICATION	5.641934859188675E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999671733856	WITHOUT_CLASSIFICATION	3.28266144113612E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999984049457328	WITHOUT_CLASSIFICATION	1.5950542671766947E-6	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999953410867	WITHOUT_CLASSIFICATION	4.658913222565566E-9	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999998354422927	WITHOUT_CLASSIFICATION	1.6455770738611775E-7	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999899627637548	WITHOUT_CLASSIFICATION	1.0037236245085756E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9995055487884968	WITHOUT_CLASSIFICATION	4.944512115031091E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998035118409	WITHOUT_CLASSIFICATION	1.9648815905190872E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999206393024	WITHOUT_CLASSIFICATION	7.936069751498492E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999946855118153	WITHOUT_CLASSIFICATION	5.314488184706649E-6	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997548983984	WITHOUT_CLASSIFICATION	2.4510160157916E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999671495773754	WITHOUT_CLASSIFICATION	3.2850422624498466E-5	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999986782421026	WITHOUT_CLASSIFICATION	1.3217578973406265E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999994914428	WITHOUT_CLASSIFICATION	5.085570706908882E-10	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999991984389329	WITHOUT_CLASSIFICATION	8.015610670680536E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999993584491506	WITHOUT_CLASSIFICATION	6.415508494936866E-7	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999991351103	WITHOUT_CLASSIFICATION	8.64889711054759E-10	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999991484723307	WITHOUT_CLASSIFICATION	8.515276692502161E-7	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999992751086023	WITHOUT_CLASSIFICATION	7.248913977046351E-7	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993539654939528	WITHOUT_CLASSIFICATION	6.460345060471279E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993539654939528	WITHOUT_CLASSIFICATION	6.460345060471279E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999984882137449	WITHOUT_CLASSIFICATION	1.5117862551482853E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999757408881012	WITHOUT_CLASSIFICATION	2.4259111898853477E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999996555347654	WITHOUT_CLASSIFICATION	3.44465234655828E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999360109265353	WITHOUT_CLASSIFICATION	6.39890734647085E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999937226940029	WITHOUT_CLASSIFICATION	6.277305997141582E-6	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999920451230246	WITHOUT_CLASSIFICATION	7.954876975298367E-6	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999989133338886	WITHOUT_CLASSIFICATION	1.0866661115223262E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999880996934	WITHOUT_CLASSIFICATION	1.1900306687376277E-8	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999998943043338	WITHOUT_CLASSIFICATION	1.0569566623810836E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998950111931463	WITHOUT_CLASSIFICATION	1.0498880685365136E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999977779043607	WITHOUT_CLASSIFICATION	2.2220956392563717E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999983495365	WITHOUT_CLASSIFICATION	1.6504634927037962E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999988645843959	WITHOUT_CLASSIFICATION	1.1354156041388594E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999950978982635	WITHOUT_CLASSIFICATION	4.902101736527112E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999435404099	WITHOUT_CLASSIFICATION	5.64595901405034E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999846408560205	WITHOUT_CLASSIFICATION	1.535914397951178E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999956470756795	WITHOUT_CLASSIFICATION	4.352924320612749E-6	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999097839545	WITHOUT_CLASSIFICATION	9.021604557955644E-8	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9954440117447866	WITHOUT_CLASSIFICATION	0.004555988255213451	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999945658719657	WITHOUT_CLASSIFICATION	5.434128034348907E-6	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999985123088	WITHOUT_CLASSIFICATION	1.4876912463402445E-9	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999988366939275	WITHOUT_CLASSIFICATION	1.1633060724350598E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999998819135	WITHOUT_CLASSIFICATION	1.180865736969301E-10	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999961486763	WITHOUT_CLASSIFICATION	3.851323702662068E-9	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999956049054631	WITHOUT_CLASSIFICATION	4.395094536956142E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999981503904417	WITHOUT_CLASSIFICATION	1.8496095582343022E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999998671945	WITHOUT_CLASSIFICATION	1.3280566990709834E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999076208743157	WITHOUT_CLASSIFICATION	9.237912568430757E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999300656465914	WITHOUT_CLASSIFICATION	6.99343534086251E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.999998080267943	WITHOUT_CLASSIFICATION	1.9197320568862652E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999987266863227	WITHOUT_CLASSIFICATION	1.2733136772485408E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999992669950986	WITHOUT_CLASSIFICATION	7.33004901533522E-7	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999953710883781	WITHOUT_CLASSIFICATION	4.628911621888914E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999899590219364	WITHOUT_CLASSIFICATION	1.0040978063582104E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999991560874669	WITHOUT_CLASSIFICATION	8.439125331967049E-7	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999627895711019	WITHOUT_CLASSIFICATION	3.721042889818368E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999706106790571	WITHOUT_CLASSIFICATION	2.9389320942907652E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999991098800539	WITHOUT_CLASSIFICATION	8.901199460929352E-6	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997337562275	WITHOUT_CLASSIFICATION	2.662437724819168E-7	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999995869324034	WITHOUT_CLASSIFICATION	4.1306759648669115E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999892888403549	WITHOUT_CLASSIFICATION	1.071115964523734E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999982418073435	WITHOUT_CLASSIFICATION	1.7581926564329238E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999993218545741	WITHOUT_CLASSIFICATION	6.781454259536495E-7	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998275201877	WITHOUT_CLASSIFICATION	1.724798123350457E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999781879327	WITHOUT_CLASSIFICATION	2.1812067215171083E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999999501515649	WITHOUT_CLASSIFICATION	4.984843510514253E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979166464845	WITHOUT_CLASSIFICATION	2.083353515511124E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994445341175	WITHOUT_CLASSIFICATION	5.554658824512249E-7	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998834204593	WITHOUT_CLASSIFICATION	1.1657954069008043E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999993089530472	WITHOUT_CLASSIFICATION	6.910469528098844E-7	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999982823570239	WITHOUT_CLASSIFICATION	1.7176429760856938E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998817469086	WITHOUT_CLASSIFICATION	1.1825309141134311E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999998266339739	WITHOUT_CLASSIFICATION	1.73366025998961E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999984067805787	WITHOUT_CLASSIFICATION	1.593219421304869E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999625913287561	WITHOUT_CLASSIFICATION	3.740867124384437E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999984067805787	WITHOUT_CLASSIFICATION	1.593219421304869E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999529647394436	WITHOUT_CLASSIFICATION	4.703526055639366E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999999468329764	WITHOUT_CLASSIFICATION	5.316702354860346E-8	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999980220589134	WITHOUT_CLASSIFICATION	1.9779410866595934E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998851046104	WITHOUT_CLASSIFICATION	1.1489538959330317E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999605776068	WITHOUT_CLASSIFICATION	3.9422393219412255E-8	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999898928175	WITHOUT_CLASSIFICATION	1.010718253447647E-8	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998618724225	WITHOUT_CLASSIFICATION	1.3812757758145062E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999922399845	WITHOUT_CLASSIFICATION	7.76001553462245E-9	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999987578292826	WITHOUT_CLASSIFICATION	1.2421707173835127E-6	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999711756139278	WITHOUT_CLASSIFICATION	2.8824386072202386E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999927205951189	WITHOUT_CLASSIFICATION	7.279404881090059E-6	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999702759247	WITHOUT_CLASSIFICATION	2.9724075314542796E-8	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999999337424469	WITHOUT_CLASSIFICATION	6.625755318380782E-8	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999885880596	WITHOUT_CLASSIFICATION	1.1411940438986332E-8	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999990863306003	WITHOUT_CLASSIFICATION	9.136693997778652E-7	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999987829711	WITHOUT_CLASSIFICATION	1.2170288945871718E-9	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999989364428866	WITHOUT_CLASSIFICATION	1.0635571133846445E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999989364428866	WITHOUT_CLASSIFICATION	1.0635571133846445E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999984239625201	WITHOUT_CLASSIFICATION	1.576037479787116E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999837266308	WITHOUT_CLASSIFICATION	1.6273369238876335E-8	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.999999999577393	WITHOUT_CLASSIFICATION	4.226069815069918E-10	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998237332759004	WITHOUT_CLASSIFICATION	1.7626672409977315E-4	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999999568562	WITHOUT_CLASSIFICATION	4.314379980769807E-10	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999442009792	WITHOUT_CLASSIFICATION	5.579902080456391E-7	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9990218488159651	WITHOUT_CLASSIFICATION	9.781511840348726E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999488215038852	WITHOUT_CLASSIFICATION	5.1178496114711036E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999101483253	WITHOUT_CLASSIFICATION	8.985167458097166E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999998199403236	WITHOUT_CLASSIFICATION	1.8005967630875984E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999917298964	WITHOUT_CLASSIFICATION	8.270103656922423E-9	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999997123331605	WITHOUT_CLASSIFICATION	2.8766683946259244E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999935604688643	WITHOUT_CLASSIFICATION	6.439531135625806E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999724136757	WITHOUT_CLASSIFICATION	2.758632434428506E-8	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999983277028743	WITHOUT_CLASSIFICATION	1.672297125667688E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999999546071	WITHOUT_CLASSIFICATION	4.539292018557853E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999771219313872	WITHOUT_CLASSIFICATION	2.2878068612715614E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9986720957976597	WITHOUT_CLASSIFICATION	0.0013279042023402903	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.999991011473168	WITHOUT_CLASSIFICATION	8.988526832041489E-6	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999328904371	WITHOUT_CLASSIFICATION	6.710956287119157E-8	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997672188886	WITHOUT_CLASSIFICATION	2.3278111143704365E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999975095786403	WITHOUT_CLASSIFICATION	2.490421359698987E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999988175154904	WITHOUT_CLASSIFICATION	1.1824845096618084E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9946406660069292	WITHOUT_CLASSIFICATION	0.005359333993070783	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999994715897891	WITHOUT_CLASSIFICATION	5.284102108966908E-7	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999800158502	WITHOUT_CLASSIFICATION	1.998414975421382E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999905476378	WITHOUT_CLASSIFICATION	9.452362249723407E-9	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999813690551413	WITHOUT_CLASSIFICATION	1.8630944858663823E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999998519111014	WITHOUT_CLASSIFICATION	1.4808889859868717E-7	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999967688888	WITHOUT_CLASSIFICATION	3.2311110866379973E-9	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999898151619	WITHOUT_CLASSIFICATION	1.0184838144455455E-8	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999994932568481	WITHOUT_CLASSIFICATION	5.067431519608508E-7	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998921026971261	WITHOUT_CLASSIFICATION	1.0789730287379501E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999998645835644	WITHOUT_CLASSIFICATION	1.3541643564015075E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995726391154999	WITHOUT_CLASSIFICATION	4.2736088450015866E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999992672597949	WITHOUT_CLASSIFICATION	7.327402050046031E-7	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999522305236	WITHOUT_CLASSIFICATION	4.7769476329009344E-8	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999892487785176	WITHOUT_CLASSIFICATION	1.0751221482431393E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999998546282527	WITHOUT_CLASSIFICATION	1.4537174729032025E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999979392289362	WITHOUT_CLASSIFICATION	2.0607710638192193E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999999173644	WITHOUT_CLASSIFICATION	8.263552315967754E-11	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999172000563	WITHOUT_CLASSIFICATION	8.279994367964613E-8	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999781608712744	WITHOUT_CLASSIFICATION	2.1839128725444033E-5	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9356519346433506	WITHOUT_CLASSIFICATION	0.06434806535664943	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998310099444	WITHOUT_CLASSIFICATION	1.6899005565183745E-7	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9993935483525489	WITHOUT_CLASSIFICATION	6.064516474511422E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6560885702661092	WITHOUT_CLASSIFICATION	0.3439114297338907	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999980106099	WITHOUT_CLASSIFICATION	1.9893900729746916E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999996225662454	WITHOUT_CLASSIFICATION	3.7743375460385354E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999997781885257	WITHOUT_CLASSIFICATION	2.21811474415831E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998449674388	WITHOUT_CLASSIFICATION	1.5503256119127074E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999933430073	WITHOUT_CLASSIFICATION	6.656992717787499E-9	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999993420723	WITHOUT_CLASSIFICATION	6.579277545927672E-10	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999953714735917	WITHOUT_CLASSIFICATION	4.628526408263021E-6	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999895067243568	WITHOUT_CLASSIFICATION	1.0493275643210948E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999161685598	WITHOUT_CLASSIFICATION	8.383144032461806E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999161685598	WITHOUT_CLASSIFICATION	8.383144032461806E-8	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999914206018	WITHOUT_CLASSIFICATION	8.579398201124102E-9	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999969122913305	WITHOUT_CLASSIFICATION	3.087708669568465E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999979182452341	WITHOUT_CLASSIFICATION	2.081754765894784E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999992629327769	WITHOUT_CLASSIFICATION	7.370672231326968E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999978735616797	WITHOUT_CLASSIFICATION	2.12643832028991E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9991590071244003	WITHOUT_CLASSIFICATION	8.409928755997851E-4	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998038772932659	WITHOUT_CLASSIFICATION	1.9612270673403877E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999994281477523	WITHOUT_CLASSIFICATION	5.718522477144287E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999999998236851	WITHOUT_CLASSIFICATION	1.7631489724713839E-9	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999897790655	WITHOUT_CLASSIFICATION	1.022093459682279E-8	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999996282858273	WITHOUT_CLASSIFICATION	3.7171417268023033E-7	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999988764763857	WITHOUT_CLASSIFICATION	1.1235236143010872E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999990373928443	WITHOUT_CLASSIFICATION	9.626071556094041E-7	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999518132417	WITHOUT_CLASSIFICATION	4.8186758214881885E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999999953404049	WITHOUT_CLASSIFICATION	4.659595089645827E-8	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999987242024733	WITHOUT_CLASSIFICATION	1.2757975267199012E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998288395693	WITHOUT_CLASSIFICATION	1.7116043083537119E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999948748404037	WITHOUT_CLASSIFICATION	5.125159596238367E-6	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999999993079687	WITHOUT_CLASSIFICATION	6.920313078874057E-9	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999810138814823	WITHOUT_CLASSIFICATION	1.8986118517661655E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999991929941	WITHOUT_CLASSIFICATION	8.070057499370759E-10	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999990282165887	WITHOUT_CLASSIFICATION	9.717834112920091E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403791621	WITHOUT_CLASSIFICATION	8.359620837841622E-6	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999797768260326	WITHOUT_CLASSIFICATION	2.022317396743838E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999759205449911	WITHOUT_CLASSIFICATION	2.4079455008900962E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9926470150041764	WITHOUT_CLASSIFICATION	0.007352984995823564	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9939002346326029	WITHOUT_CLASSIFICATION	0.006099765367397097	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999124727196851	WITHOUT_CLASSIFICATION	8.752728031488325E-5	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999981236252642	WITHOUT_CLASSIFICATION	1.8763747358156246E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403791621	WITHOUT_CLASSIFICATION	8.359620837841622E-6	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999999461076012	WITHOUT_CLASSIFICATION	5.38923986683843E-8	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999999755196	WITHOUT_CLASSIFICATION	2.4480474513607575E-11	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999959435176946	WITHOUT_CLASSIFICATION	4.056482305393577E-6	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999909005532834	WITHOUT_CLASSIFICATION	9.099446716550038E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999908029824	WITHOUT_CLASSIFICATION	9.197017609658305E-9	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999997348404783	WITHOUT_CLASSIFICATION	2.651595216618346E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999673444571241	WITHOUT_CLASSIFICATION	3.265554287593365E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999752750806	WITHOUT_CLASSIFICATION	2.4724919491619404E-8	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.998957285027899	WITHOUT_CLASSIFICATION	0.0010427149721009435	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999909005532834	WITHOUT_CLASSIFICATION	9.099446716550038E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999996541182	WITHOUT_CLASSIFICATION	3.458817953360009E-10	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999672492278	WITHOUT_CLASSIFICATION	3.275077222032564E-8	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999963417370976	WITHOUT_CLASSIFICATION	3.6582629024247655E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999841964548137	WITHOUT_CLASSIFICATION	1.5803545186223367E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999977881706597	WITHOUT_CLASSIFICATION	2.2118293403333476E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999917298964	WITHOUT_CLASSIFICATION	8.270103656922423E-9	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999998509965	WITHOUT_CLASSIFICATION	1.490034921875674E-9	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998792533601	WITHOUT_CLASSIFICATION	1.2074663984866942E-7	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999893099484	WITHOUT_CLASSIFICATION	1.0690051502548418E-8	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9985932026001437	WITHOUT_CLASSIFICATION	0.0014067973998562959	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999995087596	WITHOUT_CLASSIFICATION	4.91240434514699E-10	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999999030051177	WITHOUT_CLASSIFICATION	9.699488244224551E-8	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999993377873885	WITHOUT_CLASSIFICATION	6.622126115723216E-7	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999882475953	WITHOUT_CLASSIFICATION	1.1752404695838547E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999997990063305	WITHOUT_CLASSIFICATION	2.0099366960465275E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999904656696618	WITHOUT_CLASSIFICATION	9.53433033824098E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999917356474656	WITHOUT_CLASSIFICATION	8.26435253444192E-6	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999557526592	WITHOUT_CLASSIFICATION	4.4247340804571955E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999984745850938	WITHOUT_CLASSIFICATION	1.5254149061150778E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999978727132551	WITHOUT_CLASSIFICATION	2.1272867449690694E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999985600620624	WITHOUT_CLASSIFICATION	1.4399379375684807E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999937888889977	WITHOUT_CLASSIFICATION	6.211111002389066E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999994680792726	WITHOUT_CLASSIFICATION	5.319207273504329E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998249230001	WITHOUT_CLASSIFICATION	1.7507699996373225E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999993497887217	WITHOUT_CLASSIFICATION	6.502112782414038E-7	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999968411600668	WITHOUT_CLASSIFICATION	3.158839933221611E-6	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999927353020845	WITHOUT_CLASSIFICATION	7.264697915486489E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999952712595095	WITHOUT_CLASSIFICATION	4.728740490578636E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998101256187	WITHOUT_CLASSIFICATION	1.8987438139365827E-7	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999835396	WITHOUT_CLASSIFICATION	1.6460419464657626E-11	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998380614578828	WITHOUT_CLASSIFICATION	1.6193854211725775E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998113260601028	WITHOUT_CLASSIFICATION	1.8867393989715055E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999998573005697	WITHOUT_CLASSIFICATION	1.4269943021226116E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247461311792	WITHOUT_CLASSIFICATION	7.525386882084093E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852902092284	WITHOUT_CLASSIFICATION	1.4709790771625255E-5	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999938319853087	WITHOUT_CLASSIFICATION	6.168014691317173E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998312590594294	WITHOUT_CLASSIFICATION	1.6874094057064414E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999975237934364	WITHOUT_CLASSIFICATION	2.476206563619531E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717781453	WITHOUT_CLASSIFICATION	1.22822185471003E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717781453	WITHOUT_CLASSIFICATION	1.22822185471003E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999999999143845	WITHOUT_CLASSIFICATION	8.56154988245697E-10	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999096749881954	WITHOUT_CLASSIFICATION	9.032501180471899E-5	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999628455893658	WITHOUT_CLASSIFICATION	3.7154410634325565E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999875388809636	WITHOUT_CLASSIFICATION	1.2461119036435978E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999972366600052	WITHOUT_CLASSIFICATION	2.763339994792515E-6	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999981568259667	WITHOUT_CLASSIFICATION	1.843174033245829E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999999031020046	WITHOUT_CLASSIFICATION	9.689799544425718E-8	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999997564006559	WITHOUT_CLASSIFICATION	2.4359934412810716E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999642847546	WITHOUT_CLASSIFICATION	3.57152454093163E-8	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999969155279	WITHOUT_CLASSIFICATION	3.0844721392171677E-9	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999584528587	WITHOUT_CLASSIFICATION	4.15471413353573E-8	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997108535743	WITHOUT_CLASSIFICATION	2.8914642566122507E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999892593349629	WITHOUT_CLASSIFICATION	1.0740665037251174E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717781453	WITHOUT_CLASSIFICATION	1.22822185471003E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999996354563592	WITHOUT_CLASSIFICATION	3.6454364087708385E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999978652462743	WITHOUT_CLASSIFICATION	2.1347537256549242E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9972873090474148	WITHOUT_CLASSIFICATION	0.0027126909525851603	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998103132269	WITHOUT_CLASSIFICATION	1.896867730709299E-7	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999997588329173	WITHOUT_CLASSIFICATION	2.411670827460833E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999993847209846	WITHOUT_CLASSIFICATION	6.152790153223598E-7	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994997009663454	WITHOUT_CLASSIFICATION	5.002990336546178E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999983579620468	WITHOUT_CLASSIFICATION	1.64203795320276E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999999010628581	WITHOUT_CLASSIFICATION	9.893714196643909E-8	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999983486157082	WITHOUT_CLASSIFICATION	1.6513842917938756E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999823152343714	WITHOUT_CLASSIFICATION	1.768476562850475E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999247461311792	WITHOUT_CLASSIFICATION	7.525386882084093E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717781453	WITHOUT_CLASSIFICATION	1.22822185471003E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999999410330023	WITHOUT_CLASSIFICATION	5.89669977004373E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999833462123	WITHOUT_CLASSIFICATION	1.6653787665457836E-8	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999999658481686	WITHOUT_CLASSIFICATION	3.4151831460806235E-8	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999916102843603	WITHOUT_CLASSIFICATION	8.389715639729363E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999717782423921	WITHOUT_CLASSIFICATION	2.8221757607855502E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999969283714378	WITHOUT_CLASSIFICATION	3.0716285621909297E-6	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999821971357	WITHOUT_CLASSIFICATION	1.7802864310114139E-7	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999764605357	WITHOUT_CLASSIFICATION	2.3539464205632358E-8	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999916812887	WITHOUT_CLASSIFICATION	8.318711271702385E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999994962585657	WITHOUT_CLASSIFICATION	5.037414344675646E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.99999974992835	WITHOUT_CLASSIFICATION	2.5007165006132E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923105039148	WITHOUT_CLASSIFICATION	7.689496085185818E-6	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999400619125	WITHOUT_CLASSIFICATION	5.993808747651476E-8	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999031613789	WITHOUT_CLASSIFICATION	9.68386211182847E-8	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999529647394436	WITHOUT_CLASSIFICATION	4.703526055639366E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999998174481	WITHOUT_CLASSIFICATION	1.8255187830489334E-10	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999968854871	WITHOUT_CLASSIFICATION	3.1145128868263037E-9	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999964414852	WITHOUT_CLASSIFICATION	3.5585148243992243E-9	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999999153151478	WITHOUT_CLASSIFICATION	8.468485226261689E-8	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999928403396	WITHOUT_CLASSIFICATION	7.1596603861350535E-9	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999916258588677	WITHOUT_CLASSIFICATION	8.374141132418625E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999916258588677	WITHOUT_CLASSIFICATION	8.374141132418625E-6	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.99999802561615	WITHOUT_CLASSIFICATION	1.974383850057808E-6	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999943149201	WITHOUT_CLASSIFICATION	5.685079861916901E-9	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9994064508377964	WITHOUT_CLASSIFICATION	5.935491622035434E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998450418477671	WITHOUT_CLASSIFICATION	1.5495815223282792E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999989530517369	WITHOUT_CLASSIFICATION	1.0469482630654589E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999998326949138	WITHOUT_CLASSIFICATION	1.6730508618975777E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999970194586099	WITHOUT_CLASSIFICATION	2.980541390111047E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999832869446	WITHOUT_CLASSIFICATION	1.6713055410688285E-8	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999832869446	WITHOUT_CLASSIFICATION	1.6713055410688285E-8	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999985265646101	WITHOUT_CLASSIFICATION	1.473435390005315E-6	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999885467015183	WITHOUT_CLASSIFICATION	1.1453298481762691E-5	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999385558699	WITHOUT_CLASSIFICATION	6.14441301151949E-8	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986583956841	WITHOUT_CLASSIFICATION	1.3416043159512465E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986583956841	WITHOUT_CLASSIFICATION	1.3416043159512465E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999986583956841	WITHOUT_CLASSIFICATION	1.3416043159512465E-6	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999562693019388	WITHOUT_CLASSIFICATION	4.373069806117608E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999281211305	WITHOUT_CLASSIFICATION	7.187886951495009E-8	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9631587526831359	WITHOUT_CLASSIFICATION	0.03684124731686414	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9946714390497211	WITHOUT_CLASSIFICATION	0.005328560950278946	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999993240934046	WITHOUT_CLASSIFICATION	6.759065952490389E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717781453	WITHOUT_CLASSIFICATION	1.22822185471003E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717781453	WITHOUT_CLASSIFICATION	1.22822185471003E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999996392839282	WITHOUT_CLASSIFICATION	3.6071607174529985E-7	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999975464097831	WITHOUT_CLASSIFICATION	2.4535902168804062E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9958111620128512	WITHOUT_CLASSIFICATION	0.0041888379871487915	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999875552835	WITHOUT_CLASSIFICATION	1.2444716458059619E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999920336371709	WITHOUT_CLASSIFICATION	7.966362828977478E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999998496644719	WITHOUT_CLASSIFICATION	1.5033552821033727E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999899816475248	WITHOUT_CLASSIFICATION	1.0018352475260772E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999995704932126	WITHOUT_CLASSIFICATION	4.295067873426117E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999857444234	WITHOUT_CLASSIFICATION	1.4255576616327926E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999856163628	WITHOUT_CLASSIFICATION	1.4383637110473885E-8	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999993318769965	WITHOUT_CLASSIFICATION	6.681230034343254E-7	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999999563498114	WITHOUT_CLASSIFICATION	4.3650188529103224E-8	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999999563498114	WITHOUT_CLASSIFICATION	4.3650188529103224E-8	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999672733182	WITHOUT_CLASSIFICATION	3.272668178997972E-8	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999672733182	WITHOUT_CLASSIFICATION	3.272668178997972E-8	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999999656827756	WITHOUT_CLASSIFICATION	3.4317224389378803E-8	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998814584387	WITHOUT_CLASSIFICATION	1.1854156131807086E-7	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998814584387	WITHOUT_CLASSIFICATION	1.1854156131807086E-7	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999999809003338	WITHOUT_CLASSIFICATION	1.909966620028111E-7	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998991059539	WITHOUT_CLASSIFICATION	1.0089404615825044E-7	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999828439352214	WITHOUT_CLASSIFICATION	1.715606477859244E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999916258588677	WITHOUT_CLASSIFICATION	8.374141132418625E-6	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999781055054278	WITHOUT_CLASSIFICATION	2.189449457227543E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998991059539	WITHOUT_CLASSIFICATION	1.0089404615825044E-7	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999780060434917	WITHOUT_CLASSIFICATION	2.199395650829613E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999023216311642	WITHOUT_CLASSIFICATION	9.767836883579472E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999999970171327	WITHOUT_CLASSIFICATION	2.9828673091765505E-8	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999357059446	WITHOUT_CLASSIFICATION	6.429405539780061E-8	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999987661042002	WITHOUT_CLASSIFICATION	1.2338957997297757E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999945321899714	WITHOUT_CLASSIFICATION	5.4678100286295165E-6	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998462782189	WITHOUT_CLASSIFICATION	1.5372178105240329E-7	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999999546715868	WITHOUT_CLASSIFICATION	4.5328413203873124E-8	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998739451634	WITHOUT_CLASSIFICATION	1.2605483652679498E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999842152798	WITHOUT_CLASSIFICATION	1.5784720286157067E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999996675794	WITHOUT_CLASSIFICATION	3.324206611399418E-10	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999996545316409	WITHOUT_CLASSIFICATION	3.454683591149E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591165183	WITHOUT_CLASSIFICATION	1.040883481705246E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999081890343	WITHOUT_CLASSIFICATION	9.181096578707153E-8	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998130999337538	WITHOUT_CLASSIFICATION	1.869000662461212E-4	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999989511812705	WITHOUT_CLASSIFICATION	1.048818729525666E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999997535082047	WITHOUT_CLASSIFICATION	2.464917953532599E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998447260242	WITHOUT_CLASSIFICATION	1.5527397573575265E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998447260242	WITHOUT_CLASSIFICATION	1.5527397573575265E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999999587304418	WITHOUT_CLASSIFICATION	4.1269558205928855E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999354543148	WITHOUT_CLASSIFICATION	6.454568523904332E-8	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999989273635049	WITHOUT_CLASSIFICATION	1.072636495040744E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999748823500939	WITHOUT_CLASSIFICATION	2.5117649906103408E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998657343403	WITHOUT_CLASSIFICATION	1.342656596738149E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998564230178144	WITHOUT_CLASSIFICATION	1.4357698218556752E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999849607866547	WITHOUT_CLASSIFICATION	1.5039213345475439E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999983386839527	WITHOUT_CLASSIFICATION	1.661316047327788E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999990524037322	WITHOUT_CLASSIFICATION	9.475962678756943E-7	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998986324129	WITHOUT_CLASSIFICATION	1.0136758706409526E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999993276810274	WITHOUT_CLASSIFICATION	6.723189727042221E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923105039148	WITHOUT_CLASSIFICATION	7.689496085185818E-6	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999226639273	WITHOUT_CLASSIFICATION	7.733607263482977E-8	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999959159111956	WITHOUT_CLASSIFICATION	4.084088804336807E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999471568525057	WITHOUT_CLASSIFICATION	5.284314749426908E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999918119585639	WITHOUT_CLASSIFICATION	8.188041436131124E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999922386393	WITHOUT_CLASSIFICATION	7.761360705711699E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999922386393	WITHOUT_CLASSIFICATION	7.761360705711699E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999290438998367	WITHOUT_CLASSIFICATION	7.095610016334197E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999979365765442	WITHOUT_CLASSIFICATION	2.0634234557768402E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999955741832965	WITHOUT_CLASSIFICATION	4.4258167035103775E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999920861414333	WITHOUT_CLASSIFICATION	7.913858566626277E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999981557431535	WITHOUT_CLASSIFICATION	1.844256846455064E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999988177694507	WITHOUT_CLASSIFICATION	1.182230549434311E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999891816374272	WITHOUT_CLASSIFICATION	1.0818362572793087E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999417809367	WITHOUT_CLASSIFICATION	5.821906330291611E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999971031307241	WITHOUT_CLASSIFICATION	2.896869275900991E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999968612768	WITHOUT_CLASSIFICATION	3.138723236854907E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999998246879948	WITHOUT_CLASSIFICATION	1.753120051814465E-7	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999417809367	WITHOUT_CLASSIFICATION	5.821906330291611E-8	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999995632077833	WITHOUT_CLASSIFICATION	4.3679221679468893E-7	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999974666435546	WITHOUT_CLASSIFICATION	2.5333564454401743E-6	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999785436641	WITHOUT_CLASSIFICATION	2.1456335979864513E-8	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.99999999120767	WITHOUT_CLASSIFICATION	8.79232996122947E-9	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999505228958	WITHOUT_CLASSIFICATION	4.947710409457846E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999887780433	WITHOUT_CLASSIFICATION	1.1221956763651319E-8	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999993768035436	WITHOUT_CLASSIFICATION	6.231964564389478E-7	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997757810778	WITHOUT_CLASSIFICATION	2.2421892228805768E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999986694325	WITHOUT_CLASSIFICATION	1.3305675009947646E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.99997316409083	WITHOUT_CLASSIFICATION	2.6835909169960047E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997314294797204	WITHOUT_CLASSIFICATION	2.6857052027965533E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999977401325	WITHOUT_CLASSIFICATION	2.259867556182512E-9	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999995606720913	WITHOUT_CLASSIFICATION	4.3932790881008027E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999933339584762	WITHOUT_CLASSIFICATION	6.666041523891918E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999265724996647	WITHOUT_CLASSIFICATION	7.342750033537186E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999505314257	WITHOUT_CLASSIFICATION	4.94685743668961E-8	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999998559792	WITHOUT_CLASSIFICATION	1.440207901640115E-9	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999384181099155	WITHOUT_CLASSIFICATION	6.158189008451937E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999882926500858	WITHOUT_CLASSIFICATION	1.1707349914171352E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999991555949875	WITHOUT_CLASSIFICATION	8.444050124918985E-7	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999993500875803	WITHOUT_CLASSIFICATION	6.49912419711793E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999959428601488	WITHOUT_CLASSIFICATION	4.05713985115516E-6	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999227347293512	WITHOUT_CLASSIFICATION	7.726527064883E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999999329576579	WITHOUT_CLASSIFICATION	6.704234207357206E-8	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999641321797	WITHOUT_CLASSIFICATION	3.586782025440108E-8	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999489191469509	WITHOUT_CLASSIFICATION	5.108085304893381E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999999602637617	WITHOUT_CLASSIFICATION	3.973623829778123E-7	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999949048538703	WITHOUT_CLASSIFICATION	5.095146129716968E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999996231234636	WITHOUT_CLASSIFICATION	3.768765364557652E-7	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999894544943106	WITHOUT_CLASSIFICATION	1.0545505689377637E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999989889679082	WITHOUT_CLASSIFICATION	1.0110320918530644E-6	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999983599861314	WITHOUT_CLASSIFICATION	1.6400138685687467E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999823576925096	WITHOUT_CLASSIFICATION	1.7642307490301343E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999967435658	WITHOUT_CLASSIFICATION	3.2564342033172203E-9	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999000325527	WITHOUT_CLASSIFICATION	9.996744731475509E-8	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998164017236	WITHOUT_CLASSIFICATION	1.8359827628621862E-7	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999136415492	WITHOUT_CLASSIFICATION	8.635845083065648E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999821734752	WITHOUT_CLASSIFICATION	1.7826524783351407E-8	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999378465023	WITHOUT_CLASSIFICATION	6.215349768556323E-8	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999936839781838	WITHOUT_CLASSIFICATION	6.31602181620541E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999965243620731	WITHOUT_CLASSIFICATION	3.4756379269839062E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999997780913744	WITHOUT_CLASSIFICATION	2.2190862556288822E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999998760574908	WITHOUT_CLASSIFICATION	1.2394250919876836E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998998432773	WITHOUT_CLASSIFICATION	1.0015672271894402E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999894336686	WITHOUT_CLASSIFICATION	1.0566331351382605E-8	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999999872839653	WITHOUT_CLASSIFICATION	1.2716034608610926E-8	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998357968475	WITHOUT_CLASSIFICATION	1.6420315261500868E-7	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999778180563047	WITHOUT_CLASSIFICATION	2.2181943695387693E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999998379721907	WITHOUT_CLASSIFICATION	1.620278092650636E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999999764664462	WITHOUT_CLASSIFICATION	2.3533553785758565E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914814646452	WITHOUT_CLASSIFICATION	8.518535354718644E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999998433410935	WITHOUT_CLASSIFICATION	1.5665890652736168E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999959072589	WITHOUT_CLASSIFICATION	4.092741183205254E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999996656361	WITHOUT_CLASSIFICATION	3.343639170542437E-10	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999997351087755	WITHOUT_CLASSIFICATION	2.6489122455598473E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999994199364616	WITHOUT_CLASSIFICATION	5.800635384855136E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999786729037179	WITHOUT_CLASSIFICATION	2.132709628207522E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999989302964813	WITHOUT_CLASSIFICATION	1.069703518696918E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999999376008573	WITHOUT_CLASSIFICATION	6.239914279610075E-8	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999952532066	WITHOUT_CLASSIFICATION	4.746793443224718E-9	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999998718614371	WITHOUT_CLASSIFICATION	1.2813856290151769E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999943985701035	WITHOUT_CLASSIFICATION	5.601429896531154E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.999963377497882	WITHOUT_CLASSIFICATION	3.662250211796145E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999913552	WITHOUT_CLASSIFICATION	8.644829009018446E-12	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999495791808	WITHOUT_CLASSIFICATION	5.042081926245418E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999982865060838	WITHOUT_CLASSIFICATION	1.7134939161974397E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914814646452	WITHOUT_CLASSIFICATION	8.518535354718644E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999977376341567	WITHOUT_CLASSIFICATION	2.262365843274685E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.99999648960449	WITHOUT_CLASSIFICATION	3.5103955100430232E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999868860628	WITHOUT_CLASSIFICATION	1.3113937178578671E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999998488363144	WITHOUT_CLASSIFICATION	1.5116368550708076E-7	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999117534303307	WITHOUT_CLASSIFICATION	8.824656966929048E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999999534433952	WITHOUT_CLASSIFICATION	4.655660490805996E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999971031307241	WITHOUT_CLASSIFICATION	2.896869275900991E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999174228257931	WITHOUT_CLASSIFICATION	8.257717420685922E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999000325527	WITHOUT_CLASSIFICATION	9.996744731475509E-8	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998377233386109	WITHOUT_CLASSIFICATION	1.6227666138903261E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999996254961031	WITHOUT_CLASSIFICATION	3.7450389687034575E-7	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999995533111	WITHOUT_CLASSIFICATION	4.466888966973972E-9	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999976727452	WITHOUT_CLASSIFICATION	2.3272547951367872E-8	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999994776334905	WITHOUT_CLASSIFICATION	5.22366509414783E-7	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999663564160508	WITHOUT_CLASSIFICATION	3.3643583949276754E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999910242751	WITHOUT_CLASSIFICATION	8.975724954147338E-9	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998395738938	WITHOUT_CLASSIFICATION	1.6042610625903022E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999906949333739	WITHOUT_CLASSIFICATION	9.305066626072179E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999999369362	WITHOUT_CLASSIFICATION	6.306373558424066E-11	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999975002376804	WITHOUT_CLASSIFICATION	2.4997623196649827E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999781285665122	WITHOUT_CLASSIFICATION	2.1871433487777955E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999984379842	WITHOUT_CLASSIFICATION	1.562015849086222E-9	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999984379842	WITHOUT_CLASSIFICATION	1.562015849086222E-9	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999992096087	WITHOUT_CLASSIFICATION	7.903913046960115E-9	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999992695683632	WITHOUT_CLASSIFICATION	7.304316367976508E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999997821555	WITHOUT_CLASSIFICATION	2.178444005453464E-10	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999872592076	WITHOUT_CLASSIFICATION	1.274079241721004E-8	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999777834069	WITHOUT_CLASSIFICATION	2.2216593135335542E-8	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999998578369161	WITHOUT_CLASSIFICATION	1.4216308386754076E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999993233591	WITHOUT_CLASSIFICATION	6.766408738464131E-10	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999998384064768	WITHOUT_CLASSIFICATION	1.6159352322868167E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999813805248	WITHOUT_CLASSIFICATION	1.8619475158722115E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999998757942339	WITHOUT_CLASSIFICATION	1.2420576611161564E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999886766548431	WITHOUT_CLASSIFICATION	1.1323345156866211E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999948654069303	WITHOUT_CLASSIFICATION	5.1345930697058445E-6	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999979026943753	WITHOUT_CLASSIFICATION	2.097305624679423E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999998552658	WITHOUT_CLASSIFICATION	1.4473420506790393E-9	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999627067322749	WITHOUT_CLASSIFICATION	3.729326772495413E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999399748547	WITHOUT_CLASSIFICATION	6.002514536755753E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999998606350826	WITHOUT_CLASSIFICATION	1.3936491737078486E-7	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999995964783	WITHOUT_CLASSIFICATION	4.035216972620188E-9	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999842123864	WITHOUT_CLASSIFICATION	1.578761361259651E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999999983646844	WITHOUT_CLASSIFICATION	1.635315609263244E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999993932167677	WITHOUT_CLASSIFICATION	6.067832322643543E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999951183045	WITHOUT_CLASSIFICATION	4.8816955138839545E-9	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999991001637717	WITHOUT_CLASSIFICATION	8.99836228230616E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.999226124660545	WITHOUT_CLASSIFICATION	7.738753394550397E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.995523171298465	WITHOUT_CLASSIFICATION	0.004476828701534973	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959642711796	WITHOUT_CLASSIFICATION	4.0357288203310485E-6	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998303164457	WITHOUT_CLASSIFICATION	1.6968355430529773E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999995489646508	WITHOUT_CLASSIFICATION	4.51035349227997E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999600728081	WITHOUT_CLASSIFICATION	3.992719192741627E-8	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998488481375	WITHOUT_CLASSIFICATION	1.5115186243632505E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9967641393082168	WITHOUT_CLASSIFICATION	0.003235860691783103	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999998753941217	WITHOUT_CLASSIFICATION	1.2460587829747196E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999976285039459	WITHOUT_CLASSIFICATION	2.3714960541302656E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9907405016924093	WITHOUT_CLASSIFICATION	0.00925949830759071	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999997192724797	WITHOUT_CLASSIFICATION	2.8072752030363946E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999641032441	WITHOUT_CLASSIFICATION	3.589675589767172E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999972560756627	WITHOUT_CLASSIFICATION	2.7439243372331193E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9994045393111075	WITHOUT_CLASSIFICATION	5.954606888924815E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999977629578631	WITHOUT_CLASSIFICATION	2.2370421369307476E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997314650535	WITHOUT_CLASSIFICATION	2.6853494643641083E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998175957309228	WITHOUT_CLASSIFICATION	1.824042690771905E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996608680245	WITHOUT_CLASSIFICATION	3.391319754827689E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999989067130187	WITHOUT_CLASSIFICATION	1.0932869812194166E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999992601284441	WITHOUT_CLASSIFICATION	7.39871555863638E-7	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999993157731542	WITHOUT_CLASSIFICATION	6.842268457793944E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997576502419165	WITHOUT_CLASSIFICATION	2.4234975808348297E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9990538990676663	WITHOUT_CLASSIFICATION	9.461009323335672E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998915303345	WITHOUT_CLASSIFICATION	1.0846966550555819E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999969911627216	WITHOUT_CLASSIFICATION	3.008837278430691E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999752752722292	WITHOUT_CLASSIFICATION	2.4724727770817754E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984748689346	WITHOUT_CLASSIFICATION	1.5251310654986307E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999778052265619	WITHOUT_CLASSIFICATION	2.2194773438100236E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999995898227	WITHOUT_CLASSIFICATION	4.101773004841186E-9	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999996572267211	WITHOUT_CLASSIFICATION	3.427732788435274E-7	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999949361367162	WITHOUT_CLASSIFICATION	5.063863283831142E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999970571061314	WITHOUT_CLASSIFICATION	2.942893868636531E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999999950705545	WITHOUT_CLASSIFICATION	4.929445490517993E-8	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999639033770509	WITHOUT_CLASSIFICATION	3.609662294914305E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999975607359058	WITHOUT_CLASSIFICATION	2.4392640941289973E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999998689822027	WITHOUT_CLASSIFICATION	1.3101779730227363E-7	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999995467308996	WITHOUT_CLASSIFICATION	4.5326910036138555E-7	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999810119546	WITHOUT_CLASSIFICATION	1.8988045378305507E-8	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999976171792151	WITHOUT_CLASSIFICATION	2.3828207848898475E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999993762972689	WITHOUT_CLASSIFICATION	6.237027310900388E-7	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999993130412124	WITHOUT_CLASSIFICATION	6.869587875234191E-7	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999999999443463	WITHOUT_CLASSIFICATION	5.565370737690635E-10	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999004059655	WITHOUT_CLASSIFICATION	9.959403444608089E-8	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999883342511051	WITHOUT_CLASSIFICATION	1.1665748894844181E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999778278065361	WITHOUT_CLASSIFICATION	2.2172193463990474E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999966147448499	WITHOUT_CLASSIFICATION	3.385255150147343E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999778278065361	WITHOUT_CLASSIFICATION	2.2172193463990474E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999947201613	WITHOUT_CLASSIFICATION	5.279838650544518E-9	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999963111607314	WITHOUT_CLASSIFICATION	3.688839268607415E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999820513743205	WITHOUT_CLASSIFICATION	1.794862567949513E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999924152432358	WITHOUT_CLASSIFICATION	7.5847567641978085E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999970259849378	WITHOUT_CLASSIFICATION	2.974015062144082E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999958111430118	WITHOUT_CLASSIFICATION	4.18885698819373E-5	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999785160203	WITHOUT_CLASSIFICATION	2.1483979765389886E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999824014477	WITHOUT_CLASSIFICATION	1.759855227655362E-8	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998518358103	WITHOUT_CLASSIFICATION	1.481641897050676E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999993054021445	WITHOUT_CLASSIFICATION	6.945978554785633E-7	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999999599155157	WITHOUT_CLASSIFICATION	4.0084484291787547E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997547509051	WITHOUT_CLASSIFICATION	2.4524909496311585E-7	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999832724047	WITHOUT_CLASSIFICATION	1.6727595315505664E-8	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999987470402565	WITHOUT_CLASSIFICATION	1.2529597434347165E-6	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999907152134214	WITHOUT_CLASSIFICATION	9.284786578607308E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999983966856199	WITHOUT_CLASSIFICATION	1.6033143801517983E-6	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999946057454209	WITHOUT_CLASSIFICATION	5.394254579154155E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999998996259	WITHOUT_CLASSIFICATION	1.0037409461029186E-9	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999164650555	WITHOUT_CLASSIFICATION	8.35349445273707E-8	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999201271159	WITHOUT_CLASSIFICATION	7.987288410343725E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999996916871512	WITHOUT_CLASSIFICATION	3.083128487992061E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999922369156689	WITHOUT_CLASSIFICATION	7.763084331103265E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9988607327896709	WITHOUT_CLASSIFICATION	0.001139267210329082	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998073433895277	WITHOUT_CLASSIFICATION	1.9265661047240714E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999920410668443	WITHOUT_CLASSIFICATION	7.95893315587193E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999823375196	WITHOUT_CLASSIFICATION	1.76624803786135E-8	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.999999214239116	WITHOUT_CLASSIFICATION	7.857608840172849E-7	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999963468084545	WITHOUT_CLASSIFICATION	3.653191545526452E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997640597403	WITHOUT_CLASSIFICATION	2.3594025957523344E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999996783994641	WITHOUT_CLASSIFICATION	3.216005359379225E-7	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999996208381225	WITHOUT_CLASSIFICATION	3.791618774488247E-7	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999968582695365	WITHOUT_CLASSIFICATION	3.1417304635123944E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999998892943	WITHOUT_CLASSIFICATION	1.1070556771015962E-10	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998863151128	WITHOUT_CLASSIFICATION	1.1368488722702716E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999910777935169	WITHOUT_CLASSIFICATION	8.922206482985507E-6	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999978471919597	WITHOUT_CLASSIFICATION	2.1528080403027833E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999988551660558	WITHOUT_CLASSIFICATION	1.1448339441815682E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998869568631	WITHOUT_CLASSIFICATION	1.1304313694605739E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999636554393854	WITHOUT_CLASSIFICATION	3.634456061464435E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999642300722	WITHOUT_CLASSIFICATION	3.576992784250776E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.999999994238793	WITHOUT_CLASSIFICATION	5.761207073650589E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999703920451549	WITHOUT_CLASSIFICATION	2.9607954845098855E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996792585217	WITHOUT_CLASSIFICATION	3.2074147832689867E-7	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999823375196	WITHOUT_CLASSIFICATION	1.76624803786135E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.999933760164046	WITHOUT_CLASSIFICATION	6.62398359540098E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999997158461259	WITHOUT_CLASSIFICATION	2.8415387401855906E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999863444884246	WITHOUT_CLASSIFICATION	1.3655511575334099E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999966099407	WITHOUT_CLASSIFICATION	3.390059404730692E-9	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999974786368213	WITHOUT_CLASSIFICATION	2.5213631788023805E-6	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999725205345	WITHOUT_CLASSIFICATION	2.7479465473153372E-8	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999943976247638	WITHOUT_CLASSIFICATION	5.602375236059513E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999714430050286	WITHOUT_CLASSIFICATION	2.855699497133802E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999940476411775	WITHOUT_CLASSIFICATION	5.952358822544239E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999205815793	WITHOUT_CLASSIFICATION	7.941842071967158E-8	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999158388559458	WITHOUT_CLASSIFICATION	8.416114405411409E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999871027941	WITHOUT_CLASSIFICATION	1.2897205929428787E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999968639018324	WITHOUT_CLASSIFICATION	3.1360981675275323E-6	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999996723847691	WITHOUT_CLASSIFICATION	3.2761523090440688E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999972495499	WITHOUT_CLASSIFICATION	2.7504501683264075E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999970443821	WITHOUT_CLASSIFICATION	2.955617851444514E-9	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999298593544	WITHOUT_CLASSIFICATION	7.014064557236219E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999445773714	WITHOUT_CLASSIFICATION	5.542262859426706E-8	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999984007232952	WITHOUT_CLASSIFICATION	1.5992767049265942E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.999933760164046	WITHOUT_CLASSIFICATION	6.62398359540098E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999857049878159	WITHOUT_CLASSIFICATION	1.429501218409786E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999252350362	WITHOUT_CLASSIFICATION	7.476496382967537E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999999204615956	WITHOUT_CLASSIFICATION	7.953840449429282E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998906263396	WITHOUT_CLASSIFICATION	1.0937366037002462E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999970262814	WITHOUT_CLASSIFICATION	2.9737184776349837E-9	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.990814313456871	WITHOUT_CLASSIFICATION	0.009185686543129033	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.990814313456871	WITHOUT_CLASSIFICATION	0.009185686543129033	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998068763667	WITHOUT_CLASSIFICATION	1.9312363327842857E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.990814313456871	WITHOUT_CLASSIFICATION	0.009185686543129033	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.990814313456871	WITHOUT_CLASSIFICATION	0.009185686543129033	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999232909821928	WITHOUT_CLASSIFICATION	7.670901780718455E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999874892509	WITHOUT_CLASSIFICATION	1.2510749134355939E-8	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999985275029669	WITHOUT_CLASSIFICATION	1.4724970331655378E-6	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999989188670684	WITHOUT_CLASSIFICATION	1.0811329315984793E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997186092462	WITHOUT_CLASSIFICATION	2.8139075374145266E-7	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999957564402745	WITHOUT_CLASSIFICATION	4.24355972558872E-6	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994758492888492	WITHOUT_CLASSIFICATION	5.241507111507764E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999951427809	WITHOUT_CLASSIFICATION	4.85721908329133E-9	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999748852513203	WITHOUT_CLASSIFICATION	2.511474867964003E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999718838439948	WITHOUT_CLASSIFICATION	2.8116156005072738E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999869685021155	WITHOUT_CLASSIFICATION	1.3031497884442476E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999971719852917	WITHOUT_CLASSIFICATION	2.8280147082889427E-6	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999998634853093	WITHOUT_CLASSIFICATION	1.3651469066140837E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999900514001319	WITHOUT_CLASSIFICATION	9.948599868143423E-6	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999599706215	WITHOUT_CLASSIFICATION	4.002937844421544E-8	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999929276115044	WITHOUT_CLASSIFICATION	7.072388495560951E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998817469086	WITHOUT_CLASSIFICATION	1.1825309141134311E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999990276250922	WITHOUT_CLASSIFICATION	9.723749078114266E-7	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999748181746771	WITHOUT_CLASSIFICATION	2.5181825322813026E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999931784285051	WITHOUT_CLASSIFICATION	6.821571494855613E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999504355781318	WITHOUT_CLASSIFICATION	4.956442186812046E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999978148715208	WITHOUT_CLASSIFICATION	2.18512847919199E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998817469086	WITHOUT_CLASSIFICATION	1.1825309141134311E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.999999214239116	WITHOUT_CLASSIFICATION	7.857608840172849E-7	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999345892713403	WITHOUT_CLASSIFICATION	6.541072865972952E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982950595281	WITHOUT_CLASSIFICATION	1.7049404718561347E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996158817637	WITHOUT_CLASSIFICATION	3.8411823629840794E-7	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999918299297362	WITHOUT_CLASSIFICATION	8.170070263832507E-6	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999972329442147	WITHOUT_CLASSIFICATION	2.7670557851858616E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999998320815128	WITHOUT_CLASSIFICATION	1.6791848727893616E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9918884943502478	WITHOUT_CLASSIFICATION	0.008111505649752247	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999937561787857	WITHOUT_CLASSIFICATION	6.243821214320659E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999861057866695	WITHOUT_CLASSIFICATION	1.389421333061482E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999515702005815	WITHOUT_CLASSIFICATION	4.8429799418605274E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999990425095	WITHOUT_CLASSIFICATION	9.574905468597758E-10	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999999681735974	WITHOUT_CLASSIFICATION	3.1826402589828884E-8	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997887535805	WITHOUT_CLASSIFICATION	2.1124641959101348E-7	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999422727884338	WITHOUT_CLASSIFICATION	5.772721156609095E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999936279106	WITHOUT_CLASSIFICATION	6.3720894823022254E-9	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999997889767901	WITHOUT_CLASSIFICATION	2.1102320986300207E-7	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998542616437122	WITHOUT_CLASSIFICATION	1.4573835628779348E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999949470086	WITHOUT_CLASSIFICATION	5.0529913500130185E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999995859795094	WITHOUT_CLASSIFICATION	4.1402049059009215E-7	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999807267038096	WITHOUT_CLASSIFICATION	1.9273296190470933E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999954108185984	WITHOUT_CLASSIFICATION	4.589181401573035E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999993292446804	WITHOUT_CLASSIFICATION	6.707553197264307E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999937561787857	WITHOUT_CLASSIFICATION	6.243821214320659E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.999995723171464	WITHOUT_CLASSIFICATION	4.276828535945845E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999934013690301	WITHOUT_CLASSIFICATION	6.598630969877585E-6	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998285463415968	WITHOUT_CLASSIFICATION	1.7145365840319184E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999997312380522	WITHOUT_CLASSIFICATION	2.687619477161869E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994767033328	WITHOUT_CLASSIFICATION	5.23296667099989E-7	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999996780926513	WITHOUT_CLASSIFICATION	3.219073486876843E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999995822263569	WITHOUT_CLASSIFICATION	4.177736431989471E-7	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999992155194302	WITHOUT_CLASSIFICATION	7.844805699570656E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999994648507982	WITHOUT_CLASSIFICATION	5.351492017647009E-7	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999292744546838	WITHOUT_CLASSIFICATION	7.072554531616956E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994889696276	WITHOUT_CLASSIFICATION	5.110303723722978E-7	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999711169498	WITHOUT_CLASSIFICATION	2.8883050245936086E-8	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9997873082385536	WITHOUT_CLASSIFICATION	2.126917614464066E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999977538317	WITHOUT_CLASSIFICATION	2.2461682522021816E-9	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997127538195	WITHOUT_CLASSIFICATION	2.8724618047194304E-7	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999348391257	WITHOUT_CLASSIFICATION	6.516087420325619E-8	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984363128247	WITHOUT_CLASSIFICATION	1.5636871753213812E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994889696276	WITHOUT_CLASSIFICATION	5.110303723722978E-7	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999998271197	WITHOUT_CLASSIFICATION	1.7288021826213753E-10	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999998867635134	WITHOUT_CLASSIFICATION	1.1323648661415282E-7	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995823869052	WITHOUT_CLASSIFICATION	4.176130946916566E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998328444874954	WITHOUT_CLASSIFICATION	1.6715551250465443E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999991708935059	WITHOUT_CLASSIFICATION	8.291064940654796E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999947578604583	WITHOUT_CLASSIFICATION	5.2421395417103925E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997127538195	WITHOUT_CLASSIFICATION	2.8724618047194304E-7	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999998404336857	WITHOUT_CLASSIFICATION	1.5956631430240831E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998858204965	WITHOUT_CLASSIFICATION	1.1417950345511459E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999074138688	WITHOUT_CLASSIFICATION	9.258613124943378E-8	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993559513191209	WITHOUT_CLASSIFICATION	6.440486808789856E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.973706935275422	WITHOUT_CLASSIFICATION	0.026293064724578045	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.989384364218755	WITHOUT_CLASSIFICATION	0.010615635781244918	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995711294344	WITHOUT_CLASSIFICATION	4.2887056561547684E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995711294344	WITHOUT_CLASSIFICATION	4.2887056561547684E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999685565162	WITHOUT_CLASSIFICATION	3.144348372469438E-8	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999996620955581	WITHOUT_CLASSIFICATION	3.3790444190532755E-7	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999996980806248	WITHOUT_CLASSIFICATION	3.0191937515974814E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997330288827	WITHOUT_CLASSIFICATION	2.669711173368118E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999913670457431	WITHOUT_CLASSIFICATION	8.632954256831648E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999812878173	WITHOUT_CLASSIFICATION	1.871218273799735E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994762461155	WITHOUT_CLASSIFICATION	5.23753884392173E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999479166933	WITHOUT_CLASSIFICATION	5.208330670004258E-7	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.999999924707094	WITHOUT_CLASSIFICATION	7.529290610470174E-8	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999613345429	WITHOUT_CLASSIFICATION	3.866545715952573E-8	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999812878173	WITHOUT_CLASSIFICATION	1.871218273799735E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994762461155	WITHOUT_CLASSIFICATION	5.23753884392173E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999479166933	WITHOUT_CLASSIFICATION	5.208330670004258E-7	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999972963355	WITHOUT_CLASSIFICATION	2.703664500129882E-9	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999487716090975	WITHOUT_CLASSIFICATION	5.122839090256624E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999954090417	WITHOUT_CLASSIFICATION	4.590958247295657E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999986583699026	WITHOUT_CLASSIFICATION	1.3416300972429003E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999907357718	WITHOUT_CLASSIFICATION	9.264228162383966E-9	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999999258563045	WITHOUT_CLASSIFICATION	7.414369552185075E-8	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999982358545022	WITHOUT_CLASSIFICATION	1.764145497830147E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999818103104796	WITHOUT_CLASSIFICATION	1.8189689520415995E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999961261273863	WITHOUT_CLASSIFICATION	3.873872613662504E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999967058280687	WITHOUT_CLASSIFICATION	3.294171931268139E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999983047989	WITHOUT_CLASSIFICATION	1.6952011658788697E-9	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999941935092977	WITHOUT_CLASSIFICATION	5.80649070226514E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999855073372459	WITHOUT_CLASSIFICATION	1.4492662754099337E-5	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999460285512	WITHOUT_CLASSIFICATION	5.3971448817911125E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999968365871306	WITHOUT_CLASSIFICATION	3.1634128693718653E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998486770995	WITHOUT_CLASSIFICATION	1.5132290049554817E-7	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999979920223067	WITHOUT_CLASSIFICATION	2.0079776933990338E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999843765545918	WITHOUT_CLASSIFICATION	1.5623445408132394E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999997853730543	WITHOUT_CLASSIFICATION	2.1462694565661763E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999965572530297	WITHOUT_CLASSIFICATION	3.4427469703025653E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999813173663	WITHOUT_CLASSIFICATION	1.8682633585043722E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9726878908587733	WITHOUT_CLASSIFICATION	0.027312109141226802	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999915222807415	WITHOUT_CLASSIFICATION	8.477719258477347E-6	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999942203455726	WITHOUT_CLASSIFICATION	5.779654427401555E-6	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999997597131	WITHOUT_CLASSIFICATION	2.402869123798404E-10	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998138803583689	WITHOUT_CLASSIFICATION	1.861196416311566E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999492024874	WITHOUT_CLASSIFICATION	5.079751254902456E-8	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998472410915	WITHOUT_CLASSIFICATION	1.5275890849712188E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999996214046	WITHOUT_CLASSIFICATION	3.785952949389509E-10	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998338833503	WITHOUT_CLASSIFICATION	1.661166497141994E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988911661691	WITHOUT_CLASSIFICATION	1.1088338307506814E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999372630024	WITHOUT_CLASSIFICATION	6.273699759883677E-8	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999372630024	WITHOUT_CLASSIFICATION	6.273699759883677E-8	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999995832791	WITHOUT_CLASSIFICATION	4.1672093506953923E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999991509103	WITHOUT_CLASSIFICATION	8.4908980833175E-10	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999856517510644	WITHOUT_CLASSIFICATION	1.4348248935751756E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923105039148	WITHOUT_CLASSIFICATION	7.689496085185818E-6	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999674416216856	WITHOUT_CLASSIFICATION	3.255837831441224E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999937265172	WITHOUT_CLASSIFICATION	6.273482861421226E-9	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999983610409421	WITHOUT_CLASSIFICATION	1.6389590578657385E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999951669135526	WITHOUT_CLASSIFICATION	4.833086447328964E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999971143204529	WITHOUT_CLASSIFICATION	2.8856795470574472E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999654209661	WITHOUT_CLASSIFICATION	3.457903382246699E-8	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998973250595	WITHOUT_CLASSIFICATION	1.0267494053775862E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999494130879	WITHOUT_CLASSIFICATION	5.0586912138818026E-8	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999532823911	WITHOUT_CLASSIFICATION	4.671760879716797E-8	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999925226039	WITHOUT_CLASSIFICATION	7.47739613329672E-9	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999414463687	WITHOUT_CLASSIFICATION	5.8553631404207644E-8	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999700543564	WITHOUT_CLASSIFICATION	2.994564366319489E-8	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996734127305	WITHOUT_CLASSIFICATION	3.2658726945751527E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998876405245	WITHOUT_CLASSIFICATION	1.1235947550254519E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996654195479	WITHOUT_CLASSIFICATION	3.345804520927123E-7	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999678911552	WITHOUT_CLASSIFICATION	3.210884478889855E-8	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999996782800293	WITHOUT_CLASSIFICATION	3.217199706993302E-7	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999976908303984	WITHOUT_CLASSIFICATION	2.3091696016660055E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729223060807	WITHOUT_CLASSIFICATION	2.7077693919337527E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999991722059374	WITHOUT_CLASSIFICATION	8.277940625915827E-7	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999523629861	WITHOUT_CLASSIFICATION	4.7637013913997307E-8	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999929009036559	WITHOUT_CLASSIFICATION	7.099096344173438E-6	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999993361983823	WITHOUT_CLASSIFICATION	6.638016177070699E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.963232251496191	WITHOUT_CLASSIFICATION	0.03676774850380911	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729223060807	WITHOUT_CLASSIFICATION	2.7077693919337527E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729223060807	WITHOUT_CLASSIFICATION	2.7077693919337527E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9994673173312291	WITHOUT_CLASSIFICATION	5.32682668770883E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999981589950439	WITHOUT_CLASSIFICATION	1.8410049560417126E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999997778964	WITHOUT_CLASSIFICATION	2.2210342616310147E-10	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999954153350853	WITHOUT_CLASSIFICATION	4.5846649146633936E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591165183	WITHOUT_CLASSIFICATION	1.040883481705246E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999965572530297	WITHOUT_CLASSIFICATION	3.4427469703025653E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999564652108	WITHOUT_CLASSIFICATION	4.35347892550779E-8	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999894873595323	WITHOUT_CLASSIFICATION	1.051264046769124E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999688250251	WITHOUT_CLASSIFICATION	3.117497484413778E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851989045021	WITHOUT_CLASSIFICATION	1.4801095497957106E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9990881811504493	WITHOUT_CLASSIFICATION	9.118188495506504E-4	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994830885392	WITHOUT_CLASSIFICATION	5.16911460804043E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991843898879	WITHOUT_CLASSIFICATION	8.156101121511311E-7	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999991843898879	WITHOUT_CLASSIFICATION	8.156101121511311E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999006869081	WITHOUT_CLASSIFICATION	9.931309194856187E-8	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999006869081	WITHOUT_CLASSIFICATION	9.931309194856187E-8	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991097579520526	WITHOUT_CLASSIFICATION	8.902420479474493E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999999896207	WITHOUT_CLASSIFICATION	1.0379300186018406E-9	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999995363609157	WITHOUT_CLASSIFICATION	4.63639084306508E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998771611542419	WITHOUT_CLASSIFICATION	1.2283884575806165E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999979530090498	WITHOUT_CLASSIFICATION	2.046990950249972E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999798934362508	WITHOUT_CLASSIFICATION	2.010656374915358E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978473836952	WITHOUT_CLASSIFICATION	2.152616304738893E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999468971151	WITHOUT_CLASSIFICATION	5.310288478298661E-8	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999566204777	WITHOUT_CLASSIFICATION	4.33795223132588E-8	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999912992618	WITHOUT_CLASSIFICATION	8.700738265344744E-9	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999993645811	WITHOUT_CLASSIFICATION	6.354189196384441E-10	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999760642199482	WITHOUT_CLASSIFICATION	2.3935780051742916E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999468754361259	WITHOUT_CLASSIFICATION	5.312456387407039E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997202678532	WITHOUT_CLASSIFICATION	2.7973214679358065E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999974677267066	WITHOUT_CLASSIFICATION	2.532273293414026E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999976619731087	WITHOUT_CLASSIFICATION	2.3380268913873153E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999976619731087	WITHOUT_CLASSIFICATION	2.3380268913873153E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999997898362338	WITHOUT_CLASSIFICATION	2.101637662112091E-7	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999998974190349	WITHOUT_CLASSIFICATION	1.0258096515772167E-7	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999804378	WITHOUT_CLASSIFICATION	1.956225450327467E-11	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999969123724061	WITHOUT_CLASSIFICATION	3.08762759391604E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983857687359	WITHOUT_CLASSIFICATION	1.6142312641546526E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998636138969	WITHOUT_CLASSIFICATION	1.363861031048971E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999998859946009	WITHOUT_CLASSIFICATION	1.140053990987652E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998617967357663	WITHOUT_CLASSIFICATION	0.0013820326423370514	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9936441504140361	WITHOUT_CLASSIFICATION	0.006355849585963912	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999965428981	WITHOUT_CLASSIFICATION	3.457101894090584E-9	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999521840415	WITHOUT_CLASSIFICATION	4.7815958494367996E-8	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9972113191771583	WITHOUT_CLASSIFICATION	0.002788680822841711	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999219096793	WITHOUT_CLASSIFICATION	7.809032069408142E-8	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999999936630374	WITHOUT_CLASSIFICATION	6.336962588750027E-8	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999977265446024	WITHOUT_CLASSIFICATION	2.2734553976046466E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999974111344379	WITHOUT_CLASSIFICATION	2.5888655620988755E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999925272893	WITHOUT_CLASSIFICATION	7.472710690930475E-8	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999997782348548	WITHOUT_CLASSIFICATION	2.217651452027134E-6	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999976323670173	WITHOUT_CLASSIFICATION	2.367632982651016E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999997639693805	WITHOUT_CLASSIFICATION	2.3603061938144797E-7	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999999996481	WITHOUT_CLASSIFICATION	3.5188913200141573E-12	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999973403316	WITHOUT_CLASSIFICATION	2.6596683763973096E-9	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999994488931131	WITHOUT_CLASSIFICATION	5.51106886992624E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999994004172414	WITHOUT_CLASSIFICATION	5.995827585824341E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999977820267076	WITHOUT_CLASSIFICATION	2.2179732924351232E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999952776898582	WITHOUT_CLASSIFICATION	4.7223101418847335E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999999211105985	WITHOUT_CLASSIFICATION	7.8889401482777E-8	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999999865836623	WITHOUT_CLASSIFICATION	1.3416337648429316E-8	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999897754	WITHOUT_CLASSIFICATION	1.022462215804656E-11	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999899590219364	WITHOUT_CLASSIFICATION	1.0040978063582104E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999757139	WITHOUT_CLASSIFICATION	2.4286199779805136E-11	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999997553106847	WITHOUT_CLASSIFICATION	2.4468931518905474E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999990864481453	WITHOUT_CLASSIFICATION	9.135518547738965E-7	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9994431895098677	WITHOUT_CLASSIFICATION	5.568104901323915E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999831788269	WITHOUT_CLASSIFICATION	1.682117317562676E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999997557947216	WITHOUT_CLASSIFICATION	2.442052784696616E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998288395693	WITHOUT_CLASSIFICATION	1.7116043083537119E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999455874413188	WITHOUT_CLASSIFICATION	5.4412558681107365E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999954832515	WITHOUT_CLASSIFICATION	4.5167485582142E-9	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9996207704724515	WITHOUT_CLASSIFICATION	3.7922952754851157E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999822983968	WITHOUT_CLASSIFICATION	1.770160309217568E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999984491645223	WITHOUT_CLASSIFICATION	1.5508354776549906E-6	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9984217762583796	WITHOUT_CLASSIFICATION	0.001578223741620488	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999919596236396	WITHOUT_CLASSIFICATION	8.040376360435158E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999999997635092	WITHOUT_CLASSIFICATION	2.364908097290332E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999996603321784	WITHOUT_CLASSIFICATION	3.396678215968105E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999998517323503	WITHOUT_CLASSIFICATION	1.4826764981355525E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999989364428866	WITHOUT_CLASSIFICATION	1.0635571133846445E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999979869330193	WITHOUT_CLASSIFICATION	2.013066980627313E-6	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999993832615488	WITHOUT_CLASSIFICATION	6.167384511447039E-7	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999976753167388	WITHOUT_CLASSIFICATION	2.3246832611940552E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999813819918048	WITHOUT_CLASSIFICATION	1.8618008195202723E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998462649352619	WITHOUT_CLASSIFICATION	1.5373506473820967E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999817986816087	WITHOUT_CLASSIFICATION	1.8201318391351472E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999712118622763	WITHOUT_CLASSIFICATION	2.8788137723621783E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999992416476172	WITHOUT_CLASSIFICATION	7.583523827408068E-7	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9931606243593956	WITHOUT_CLASSIFICATION	0.006839375640604437	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.999999451405311	WITHOUT_CLASSIFICATION	5.485946890376569E-7	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999843285552	WITHOUT_CLASSIFICATION	1.5671444832909316E-8	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998614773549147	WITHOUT_CLASSIFICATION	1.3852264508524913E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999854093967	WITHOUT_CLASSIFICATION	1.4590603307566438E-8	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999875110259	WITHOUT_CLASSIFICATION	1.24889740978775E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999998498977	WITHOUT_CLASSIFICATION	1.5010237241089096E-10	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999969725649	WITHOUT_CLASSIFICATION	3.0274350957701874E-8	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999990479208	WITHOUT_CLASSIFICATION	9.520791989580364E-10	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999998903199391	WITHOUT_CLASSIFICATION	1.0968006097868771E-7	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999980451371	WITHOUT_CLASSIFICATION	1.9548628967906834E-8	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999996926611734	WITHOUT_CLASSIFICATION	3.073388265758502E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403791621	WITHOUT_CLASSIFICATION	8.359620837841622E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403791621	WITHOUT_CLASSIFICATION	8.359620837841622E-6	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997277682761	WITHOUT_CLASSIFICATION	2.722317239641396E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999354194749	WITHOUT_CLASSIFICATION	6.458052511680546E-8	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999906474959	WITHOUT_CLASSIFICATION	9.352504097491342E-9	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999992597529148	WITHOUT_CLASSIFICATION	7.402470852524524E-7	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999654915277	WITHOUT_CLASSIFICATION	3.450847229760986E-8	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999623625187284	WITHOUT_CLASSIFICATION	3.763748127154557E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999987328895	WITHOUT_CLASSIFICATION	1.2671104826026306E-9	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999989514503	WITHOUT_CLASSIFICATION	1.0485497249703578E-9	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999823822952596	WITHOUT_CLASSIFICATION	1.7617704740329588E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999481224465	WITHOUT_CLASSIFICATION	5.1877553492926724E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999201673944	WITHOUT_CLASSIFICATION	7.983260559300547E-7	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996684432179	WITHOUT_CLASSIFICATION	3.3155678205460807E-7	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999997857157439	WITHOUT_CLASSIFICATION	2.1428425612710787E-7	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999992339087	WITHOUT_CLASSIFICATION	7.66091345877531E-10	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999981999495279	WITHOUT_CLASSIFICATION	1.8000504721570446E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9961589082126818	WITHOUT_CLASSIFICATION	0.0038410917873183065	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999778310231384	WITHOUT_CLASSIFICATION	2.2168976861597847E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9871490340414081	WITHOUT_CLASSIFICATION	0.012850965958591969	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999757720451989	WITHOUT_CLASSIFICATION	2.4227954801096368E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999998543587919	WITHOUT_CLASSIFICATION	1.4564120807025086E-7	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999998270467285	WITHOUT_CLASSIFICATION	1.7295327155621861E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999999084542765	WITHOUT_CLASSIFICATION	9.154572348715112E-7	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.999999167253024	WITHOUT_CLASSIFICATION	8.327469759630987E-7	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998940690718214	WITHOUT_CLASSIFICATION	1.0593092817859537E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999442147951	WITHOUT_CLASSIFICATION	5.578520502022628E-8	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999975800571752	WITHOUT_CLASSIFICATION	2.419942824802734E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999878927450515	WITHOUT_CLASSIFICATION	1.2107254948449577E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999728336026	WITHOUT_CLASSIFICATION	2.7166397422312132E-8	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999997741530399	WITHOUT_CLASSIFICATION	2.2584696018875524E-7	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999954200365172	WITHOUT_CLASSIFICATION	4.5799634828819295E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999996853016924	WITHOUT_CLASSIFICATION	3.14698307637835E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999976751835995	WITHOUT_CLASSIFICATION	2.324816400504748E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999997352214453	WITHOUT_CLASSIFICATION	2.6477855473970425E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999928878481702	WITHOUT_CLASSIFICATION	7.112151829747668E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999766937984521	WITHOUT_CLASSIFICATION	2.3306201547888774E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999766937984521	WITHOUT_CLASSIFICATION	2.3306201547888774E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991410934508	WITHOUT_CLASSIFICATION	8.589065491372931E-7	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999831601224565	WITHOUT_CLASSIFICATION	1.683987754356491E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999755908439	WITHOUT_CLASSIFICATION	2.4409156181563038E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999964148094735	WITHOUT_CLASSIFICATION	3.585190526460789E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999989031549	WITHOUT_CLASSIFICATION	1.096845022152235E-9	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999999459986285	WITHOUT_CLASSIFICATION	5.4001371552929976E-8	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999997648159032	WITHOUT_CLASSIFICATION	2.351840967973101E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999917239915	WITHOUT_CLASSIFICATION	8.276008613379673E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999999506562634	WITHOUT_CLASSIFICATION	4.934373659546337E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999380873058	WITHOUT_CLASSIFICATION	6.191269412339133E-8	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999806900221883	WITHOUT_CLASSIFICATION	1.9309977811714625E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999764023035432	WITHOUT_CLASSIFICATION	2.359769645682498E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999978324339	WITHOUT_CLASSIFICATION	2.1675662151087974E-9	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.99999011633825	WITHOUT_CLASSIFICATION	9.883661750044932E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999997967696644	WITHOUT_CLASSIFICATION	2.0323033558232464E-7	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999893151321624	WITHOUT_CLASSIFICATION	1.0684867837596317E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.999893151321624	WITHOUT_CLASSIFICATION	1.0684867837596317E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999991359808875	WITHOUT_CLASSIFICATION	8.640191123645441E-7	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999999393805541	WITHOUT_CLASSIFICATION	6.06194459370231E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999963768327821	WITHOUT_CLASSIFICATION	3.6231672178329877E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999903932465	WITHOUT_CLASSIFICATION	9.606753548359067E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999124727196851	WITHOUT_CLASSIFICATION	8.752728031488325E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999045130938	WITHOUT_CLASSIFICATION	9.548690626948831E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999656890137	WITHOUT_CLASSIFICATION	3.431098618314902E-8	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999999656890137	WITHOUT_CLASSIFICATION	3.431098618314902E-8	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999968126243373	WITHOUT_CLASSIFICATION	3.187375662778888E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999999889267133	WITHOUT_CLASSIFICATION	1.1073286701987679E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999987031282237	WITHOUT_CLASSIFICATION	1.2968717762312035E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999986677729	WITHOUT_CLASSIFICATION	1.3322270227530587E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999996560525672	WITHOUT_CLASSIFICATION	3.439474327589987E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999841964548137	WITHOUT_CLASSIFICATION	1.5803545186223367E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999667522919288	WITHOUT_CLASSIFICATION	3.324770807128938E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999828439352214	WITHOUT_CLASSIFICATION	1.715606477859244E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999987717781453	WITHOUT_CLASSIFICATION	1.22822185471003E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999578034261843	WITHOUT_CLASSIFICATION	4.219657381564892E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9972873090474148	WITHOUT_CLASSIFICATION	0.0027126909525851603	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999916102843603	WITHOUT_CLASSIFICATION	8.389715639729363E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999998043515225	WITHOUT_CLASSIFICATION	1.9564847756080483E-7	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999999656827756	WITHOUT_CLASSIFICATION	3.4317224389378803E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999600728081	WITHOUT_CLASSIFICATION	3.992719192741627E-8	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999913642439	WITHOUT_CLASSIFICATION	8.635755989392559E-9	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999997792044	WITHOUT_CLASSIFICATION	2.207956130558382E-9	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999988535463813	WITHOUT_CLASSIFICATION	1.1464536187741284E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999903259272135	WITHOUT_CLASSIFICATION	9.674072786590686E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999233926775439	WITHOUT_CLASSIFICATION	7.660732245599982E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999695256653	WITHOUT_CLASSIFICATION	3.047433474950265E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999999809003338	WITHOUT_CLASSIFICATION	1.909966620028111E-7	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999972793413568	WITHOUT_CLASSIFICATION	2.7206586431279054E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999986442927659	WITHOUT_CLASSIFICATION	1.3557072341477354E-6	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999999793152729	WITHOUT_CLASSIFICATION	2.068472710167372E-7	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999785131714811	WITHOUT_CLASSIFICATION	2.148682851888891E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999971512801417	WITHOUT_CLASSIFICATION	2.8487198583287265E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9998686447785925	WITHOUT_CLASSIFICATION	1.3135522140747484E-4	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999056699727379	WITHOUT_CLASSIFICATION	9.433002726207878E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999922386393	WITHOUT_CLASSIFICATION	7.761360705711699E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999077607686173	WITHOUT_CLASSIFICATION	9.223923138274891E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999999737730425	WITHOUT_CLASSIFICATION	2.6226957557010458E-8	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999990408645427	WITHOUT_CLASSIFICATION	9.591354573351617E-7	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999985755951797	WITHOUT_CLASSIFICATION	1.4244048201967414E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999910145599379	WITHOUT_CLASSIFICATION	8.985440062086868E-6	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999999687736089	WITHOUT_CLASSIFICATION	3.122639114780637E-8	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.999999883466537	WITHOUT_CLASSIFICATION	1.165334630321468E-7	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999999471133589	WITHOUT_CLASSIFICATION	5.2886641095313306E-8	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999954729364	WITHOUT_CLASSIFICATION	4.5270636765972045E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999612646464	WITHOUT_CLASSIFICATION	3.87353535885507E-8	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999821437376	WITHOUT_CLASSIFICATION	1.7856262368428632E-8	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.99999628936027	WITHOUT_CLASSIFICATION	3.710639730016511E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999867252475687	WITHOUT_CLASSIFICATION	1.327475243128501E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999741073207	WITHOUT_CLASSIFICATION	2.5892679339614974E-8	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999753728	WITHOUT_CLASSIFICATION	2.4627199511413644E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9996470428352068	WITHOUT_CLASSIFICATION	3.529571647932222E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999954729364	WITHOUT_CLASSIFICATION	4.5270636765972045E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999612646464	WITHOUT_CLASSIFICATION	3.87353535885507E-8	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999970336837432	WITHOUT_CLASSIFICATION	2.9663162567824628E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999658642408222	WITHOUT_CLASSIFICATION	3.4135759177826694E-5	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999985997193	WITHOUT_CLASSIFICATION	1.4002806213151677E-9	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9995429563687684	WITHOUT_CLASSIFICATION	4.570436312315071E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999992668285205	WITHOUT_CLASSIFICATION	7.331714795462754E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998998188164	WITHOUT_CLASSIFICATION	1.0018118346999402E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9913161125846216	WITHOUT_CLASSIFICATION	0.008683887415378386	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999998464335389	WITHOUT_CLASSIFICATION	1.5356646120206534E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999992127866355	WITHOUT_CLASSIFICATION	7.872133644946226E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5215955244705557	WITHOUT_CLASSIFICATION	0.4784044755294444	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999740519	WITHOUT_CLASSIFICATION	2.5948180930164787E-11	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5215955244705557	WITHOUT_CLASSIFICATION	0.4784044755294444	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999970894954445	WITHOUT_CLASSIFICATION	2.910504555457061E-6	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999997382137323	WITHOUT_CLASSIFICATION	2.6178626765753625E-7	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999993635607213	WITHOUT_CLASSIFICATION	6.364392787775688E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999215850155	WITHOUT_CLASSIFICATION	7.841498459184712E-8	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999982491728258	WITHOUT_CLASSIFICATION	1.750827174243662E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999954007241018	WITHOUT_CLASSIFICATION	4.599275898224131E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999954007241018	WITHOUT_CLASSIFICATION	4.599275898224131E-6	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999475777709	WITHOUT_CLASSIFICATION	5.242222902238699E-8	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999999046444332	WITHOUT_CLASSIFICATION	9.535556685753016E-8	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999997059442539	WITHOUT_CLASSIFICATION	2.9405574601147364E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999897824873194	WITHOUT_CLASSIFICATION	1.0217512680582323E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999999704490754	WITHOUT_CLASSIFICATION	2.955092459970022E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999858694219591	WITHOUT_CLASSIFICATION	1.4130578040893602E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999992609504729	WITHOUT_CLASSIFICATION	7.390495272171723E-7	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999665805855	WITHOUT_CLASSIFICATION	3.341941452220497E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999330180036	WITHOUT_CLASSIFICATION	6.698199641473231E-8	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999982728841287	WITHOUT_CLASSIFICATION	1.7271158712816808E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.999999869068384	WITHOUT_CLASSIFICATION	1.3093161595498958E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999608707803249	WITHOUT_CLASSIFICATION	3.912921967511392E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999871430525669	WITHOUT_CLASSIFICATION	1.2856947433252154E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999999290981628	WITHOUT_CLASSIFICATION	7.090183715004209E-8	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999995623835563	WITHOUT_CLASSIFICATION	4.376164436981744E-6	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999769363572	WITHOUT_CLASSIFICATION	2.3063642789355987E-7	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999999104947343	WITHOUT_CLASSIFICATION	8.950526568534417E-7	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999949399903088	WITHOUT_CLASSIFICATION	5.060009691246142E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999811495637	WITHOUT_CLASSIFICATION	1.8850436345436947E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999964470861754	WITHOUT_CLASSIFICATION	3.5529138245261473E-6	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999886161350573	WITHOUT_CLASSIFICATION	1.138386494284609E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999919054204129	WITHOUT_CLASSIFICATION	8.094579587085896E-6	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999291108288513	WITHOUT_CLASSIFICATION	7.088917114862593E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999806671224497	WITHOUT_CLASSIFICATION	1.9332877550353318E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999880418494905	WITHOUT_CLASSIFICATION	1.1958150509488429E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999997512640555	WITHOUT_CLASSIFICATION	2.4873594452663405E-7	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999946577563976	WITHOUT_CLASSIFICATION	5.3422436023846875E-6	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9998936916820642	WITHOUT_CLASSIFICATION	1.0630831793578561E-4	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9978109077464138	WITHOUT_CLASSIFICATION	0.002189092253586155	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9868113204121269	WITHOUT_CLASSIFICATION	0.013188679587873012	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9910320795356038	WITHOUT_CLASSIFICATION	0.008967920464396133	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998453033224473	WITHOUT_CLASSIFICATION	1.546966775527015E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999992609504729	WITHOUT_CLASSIFICATION	7.390495272171723E-7	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999994891153067	WITHOUT_CLASSIFICATION	5.108846933155136E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999529240001082	WITHOUT_CLASSIFICATION	4.707599989182107E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9869911531021242	WITHOUT_CLASSIFICATION	0.013008846897875863	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999997552277702	WITHOUT_CLASSIFICATION	2.447722297522735E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998528582295682	WITHOUT_CLASSIFICATION	1.4714177043188297E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999993057745802	WITHOUT_CLASSIFICATION	6.942254198832187E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999897824873194	WITHOUT_CLASSIFICATION	1.0217512680582323E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999897824873194	WITHOUT_CLASSIFICATION	1.0217512680582323E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999508037951992	WITHOUT_CLASSIFICATION	4.919620480085645E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999971692152066	WITHOUT_CLASSIFICATION	2.8307847933160096E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999993770968901	WITHOUT_CLASSIFICATION	6.229031098440808E-7	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999649223830621	WITHOUT_CLASSIFICATION	3.507761693784125E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9996052408292444	WITHOUT_CLASSIFICATION	3.947591707555614E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998170498275	WITHOUT_CLASSIFICATION	1.8295017233362722E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999999959706852	WITHOUT_CLASSIFICATION	4.029314787401819E-9	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998589326917	WITHOUT_CLASSIFICATION	1.4106730817638792E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999890360736453	WITHOUT_CLASSIFICATION	1.0963926354715819E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999919653881	WITHOUT_CLASSIFICATION	8.034611806755856E-9	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999974520421825	WITHOUT_CLASSIFICATION	2.5479578174469494E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999941329150599	WITHOUT_CLASSIFICATION	5.8670849400948705E-5	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999998675779812	WITHOUT_CLASSIFICATION	1.3242201873651784E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999919653881	WITHOUT_CLASSIFICATION	8.034611806755856E-9	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998866780427	WITHOUT_CLASSIFICATION	1.1332195733382107E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9978855570705274	WITHOUT_CLASSIFICATION	0.002114442929472555	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999997796492847	WITHOUT_CLASSIFICATION	2.2035071530615405E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.5322308309256347	WITHOUT_CLASSIFICATION	0.46776916907436533	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999941329150599	WITHOUT_CLASSIFICATION	5.8670849400948705E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999275196658	WITHOUT_CLASSIFICATION	7.2480334130093E-8	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999819690962	WITHOUT_CLASSIFICATION	1.8030903761361054E-8	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999233893517	WITHOUT_CLASSIFICATION	7.66106482477443E-8	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999999999999958	WITHOUT_CLASSIFICATION	4.190430082808514E-14	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999821598880079	WITHOUT_CLASSIFICATION	1.7840111992054928E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999899330697	WITHOUT_CLASSIFICATION	1.0066930169561033E-8	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999993050758	WITHOUT_CLASSIFICATION	6.949243335582882E-10	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997985302985	WITHOUT_CLASSIFICATION	2.014697014404023E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998408191452689	WITHOUT_CLASSIFICATION	1.5918085473108425E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999913758755505	WITHOUT_CLASSIFICATION	8.62412444938739E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999998983623294	WITHOUT_CLASSIFICATION	1.0163767060228274E-6	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999945569286239	WITHOUT_CLASSIFICATION	5.443071376098785E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999919653881	WITHOUT_CLASSIFICATION	8.034611806755856E-9	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999275196658	WITHOUT_CLASSIFICATION	7.2480334130093E-8	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999233893517	WITHOUT_CLASSIFICATION	7.66106482477443E-8	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999996756384816	WITHOUT_CLASSIFICATION	3.2436151836612515E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999999488365922	WITHOUT_CLASSIFICATION	5.1163407946749187E-8	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999976936895	WITHOUT_CLASSIFICATION	2.306310469168943E-9	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999941329150599	WITHOUT_CLASSIFICATION	5.8670849400948705E-5	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999987561475344	WITHOUT_CLASSIFICATION	1.2438524656077416E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999292179024	WITHOUT_CLASSIFICATION	7.078209755572953E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999790330603504	WITHOUT_CLASSIFICATION	2.0966939649612438E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999998936560815	WITHOUT_CLASSIFICATION	1.0634391850588898E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997985302985	WITHOUT_CLASSIFICATION	2.014697014404023E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998866780427	WITHOUT_CLASSIFICATION	1.1332195733382107E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999995798565743	WITHOUT_CLASSIFICATION	4.2014342576817676E-7	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993983428359	WITHOUT_CLASSIFICATION	6.01657163996964E-7	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999998923291181	WITHOUT_CLASSIFICATION	1.076708819230661E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999910590292983	WITHOUT_CLASSIFICATION	8.940970701802058E-6	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9639427063533283	WITHOUT_CLASSIFICATION	0.03605729364667167	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9956405661923358	WITHOUT_CLASSIFICATION	0.004359433807664238	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999933285203402	WITHOUT_CLASSIFICATION	6.671479659788749E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999215850155	WITHOUT_CLASSIFICATION	7.841498459184712E-8	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999585346991	WITHOUT_CLASSIFICATION	4.146530095742997E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999071958026	WITHOUT_CLASSIFICATION	9.28041974059212E-8	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999972611771482	WITHOUT_CLASSIFICATION	2.738822851847767E-6	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999651964478	WITHOUT_CLASSIFICATION	3.4803552229437324E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999419867469	WITHOUT_CLASSIFICATION	5.8013253114762E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999919423963	WITHOUT_CLASSIFICATION	8.057603751597045E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999693717676	WITHOUT_CLASSIFICATION	3.062823239922576E-8	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999991461898059	WITHOUT_CLASSIFICATION	8.538101940954048E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999998936560815	WITHOUT_CLASSIFICATION	1.0634391850588898E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999939137192407	WITHOUT_CLASSIFICATION	6.086280759177957E-6	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.999999847085736	WITHOUT_CLASSIFICATION	1.529142639867452E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999964039105139	WITHOUT_CLASSIFICATION	3.5960894862138055E-6	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999998178516915	WITHOUT_CLASSIFICATION	1.8214830866882182E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999610228528844	WITHOUT_CLASSIFICATION	3.897714711572463E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999985834018278	WITHOUT_CLASSIFICATION	1.4165981721430449E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999981955913961	WITHOUT_CLASSIFICATION	1.804408603945781E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.99964678266038	WITHOUT_CLASSIFICATION	3.532173396199371E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999757529112	WITHOUT_CLASSIFICATION	2.4247088709470307E-8	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999980095690032	WITHOUT_CLASSIFICATION	1.990430996758396E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999998063087815	WITHOUT_CLASSIFICATION	1.9369121852947387E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999919320485	WITHOUT_CLASSIFICATION	8.067951454026404E-9	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999064776221122	WITHOUT_CLASSIFICATION	9.352237788780701E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999994131264632	WITHOUT_CLASSIFICATION	5.868735367171843E-7	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998296656463	WITHOUT_CLASSIFICATION	1.7033435369420979E-7	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999671873833	WITHOUT_CLASSIFICATION	3.2812616679643124E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999997577572209	WITHOUT_CLASSIFICATION	2.422427790948737E-7	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998508132453	WITHOUT_CLASSIFICATION	1.4918675466495245E-7	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999999282668497	WITHOUT_CLASSIFICATION	7.173315029528707E-7	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999978515004344	WITHOUT_CLASSIFICATION	2.1484995656124157E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.999999859589866	WITHOUT_CLASSIFICATION	1.4041013396523216E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998967059562	WITHOUT_CLASSIFICATION	1.0329404376959442E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999424284236	WITHOUT_CLASSIFICATION	5.7571576411676334E-8	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999976127246	WITHOUT_CLASSIFICATION	2.3872753616807537E-9	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999902063242	WITHOUT_CLASSIFICATION	9.793675766904766E-9	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7042861213752027	IMPLEMENTATION	0.2957138786247972	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9950002488221604	WITHOUT_CLASSIFICATION	0.004999751177839535	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999998363676751	WITHOUT_CLASSIFICATION	1.6363232489595902E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999995518003243	WITHOUT_CLASSIFICATION	4.48199675818916E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5571701665052162	IMPLEMENTATION	0.44282983349478383	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999803578572	WITHOUT_CLASSIFICATION	1.9642142821055516E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.99997316409083	WITHOUT_CLASSIFICATION	2.6835909169960047E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999999411181027	WITHOUT_CLASSIFICATION	5.888189731127901E-7	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999174228257931	WITHOUT_CLASSIFICATION	8.257717420685922E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999982345834	WITHOUT_CLASSIFICATION	1.7654166314328615E-9	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999990235861717	WITHOUT_CLASSIFICATION	9.764138283067048E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999910876656	WITHOUT_CLASSIFICATION	8.912334438795922E-9	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999979908382131	WITHOUT_CLASSIFICATION	2.009161786885923E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999990235861717	WITHOUT_CLASSIFICATION	9.764138283067048E-7	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999982345834	WITHOUT_CLASSIFICATION	1.7654166314328615E-9	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999910876656	WITHOUT_CLASSIFICATION	8.912334438795922E-9	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.999999177663924	WITHOUT_CLASSIFICATION	8.22336075936738E-7	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996983613183	WITHOUT_CLASSIFICATION	3.0163868160421324E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999792725096	WITHOUT_CLASSIFICATION	2.0727490445641588E-8	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.99999983018636	WITHOUT_CLASSIFICATION	1.6981364004229008E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999999993063196	WITHOUT_CLASSIFICATION	6.93680392211161E-9	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8599441964508638	IMPLEMENTATION	0.14005580354913616	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999035240640999	WITHOUT_CLASSIFICATION	9.647593590001261E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9996829162999983	WITHOUT_CLASSIFICATION	3.170837000016987E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999993438725351	WITHOUT_CLASSIFICATION	6.561274649423895E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999999713767559	WITHOUT_CLASSIFICATION	2.8623244104404863E-7	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.999999720829131	WITHOUT_CLASSIFICATION	2.79170869046452E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999818099584932	WITHOUT_CLASSIFICATION	1.819004150673509E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999192991034906	WITHOUT_CLASSIFICATION	8.070089650937463E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999993431378899	WITHOUT_CLASSIFICATION	6.568621101136601E-7	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9994837598350574	WITHOUT_CLASSIFICATION	5.162401649425586E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999999988771449	WITHOUT_CLASSIFICATION	1.1228550929934869E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999918124909	WITHOUT_CLASSIFICATION	8.18750918261751E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999948014275	WITHOUT_CLASSIFICATION	5.198572508970226E-9	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999759444669	WITHOUT_CLASSIFICATION	2.4055533143444722E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998671174767	WITHOUT_CLASSIFICATION	1.3288252336020206E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9795287036763684	WITHOUT_CLASSIFICATION	0.020471296323631632	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999926797669	WITHOUT_CLASSIFICATION	7.320233134121475E-9	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999993881301954	WITHOUT_CLASSIFICATION	6.118698045275991E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998180047646	WITHOUT_CLASSIFICATION	1.8199523547584634E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999226193083	WITHOUT_CLASSIFICATION	7.738069183651554E-8	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999226193083	WITHOUT_CLASSIFICATION	7.738069183651554E-8	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999977378026	WITHOUT_CLASSIFICATION	2.2621974880129754E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999977378026	WITHOUT_CLASSIFICATION	2.2621974880129754E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9947674900853775	WITHOUT_CLASSIFICATION	0.005232509914622576	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999918124909	WITHOUT_CLASSIFICATION	8.18750918261751E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999991604869531	WITHOUT_CLASSIFICATION	8.395130468605591E-7	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999985384311152	WITHOUT_CLASSIFICATION	1.4615688847926384E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999984977668797	WITHOUT_CLASSIFICATION	1.5022331203492993E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999984977668797	WITHOUT_CLASSIFICATION	1.5022331203492993E-6	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999962767713712	WITHOUT_CLASSIFICATION	3.7232286287225893E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999970886816256	WITHOUT_CLASSIFICATION	2.91131837430902E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999985775969	WITHOUT_CLASSIFICATION	1.4224030503735853E-9	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999844766516011	WITHOUT_CLASSIFICATION	1.552334839891472E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999428254645965	WITHOUT_CLASSIFICATION	5.717453540361075E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999988476140224	WITHOUT_CLASSIFICATION	1.152385977673105E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999990140279486	WITHOUT_CLASSIFICATION	9.859720514075064E-7	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999956171680231	WITHOUT_CLASSIFICATION	4.3828319767970645E-6	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999745108396217	WITHOUT_CLASSIFICATION	2.5489160378273063E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999937249275284	WITHOUT_CLASSIFICATION	6.275072471664407E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999989947746823	WITHOUT_CLASSIFICATION	1.0052253176238973E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999505293910056	WITHOUT_CLASSIFICATION	4.9470608994368706E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999753569004	WITHOUT_CLASSIFICATION	2.464309950744428E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999997234196885	WITHOUT_CLASSIFICATION	2.765803115321996E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9996414220336037	WITHOUT_CLASSIFICATION	3.585779663962781E-4	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999995827157597	WITHOUT_CLASSIFICATION	4.172842402909747E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570055625	WITHOUT_CLASSIFICATION	5.429944375937973E-7	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999835983794833	WITHOUT_CLASSIFICATION	1.6401620516734595E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999241954003516	WITHOUT_CLASSIFICATION	7.58045996484114E-5	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999990663783066	WITHOUT_CLASSIFICATION	9.336216933431692E-7	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998214229862309	WITHOUT_CLASSIFICATION	1.7857701376914367E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999908492356	WITHOUT_CLASSIFICATION	9.150764296290353E-9	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999983762454561	WITHOUT_CLASSIFICATION	1.6237545439212879E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998016634017	WITHOUT_CLASSIFICATION	1.9833659825491717E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999923105039148	WITHOUT_CLASSIFICATION	7.689496085185818E-6	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998263496626	WITHOUT_CLASSIFICATION	1.736503374269881E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999919320485	WITHOUT_CLASSIFICATION	8.067951454026404E-9	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999978243531192	WITHOUT_CLASSIFICATION	2.1756468808525414E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999996231505233	WITHOUT_CLASSIFICATION	3.768494767081096E-7	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993602980082	WITHOUT_CLASSIFICATION	6.397019918089072E-7	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810265749625	WITHOUT_CLASSIFICATION	1.8973425037601838E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984782299264	WITHOUT_CLASSIFICATION	1.5217700736089948E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999984782299264	WITHOUT_CLASSIFICATION	1.5217700736089948E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999999861639921	WITHOUT_CLASSIFICATION	1.383600788730006E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999997272654744	WITHOUT_CLASSIFICATION	2.727345256417516E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999311771545	WITHOUT_CLASSIFICATION	6.882284554515819E-8	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999311771545	WITHOUT_CLASSIFICATION	6.882284554515819E-8	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999786729037179	WITHOUT_CLASSIFICATION	2.132709628207522E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999146238197701	WITHOUT_CLASSIFICATION	8.537618022983624E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999986816680448	WITHOUT_CLASSIFICATION	1.3183319551507157E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591165183	WITHOUT_CLASSIFICATION	1.040883481705246E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999969328937055	WITHOUT_CLASSIFICATION	3.06710629450758E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999821158353	WITHOUT_CLASSIFICATION	1.788416462139654E-8	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999662718065037	WITHOUT_CLASSIFICATION	3.372819349636694E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999891639162789	WITHOUT_CLASSIFICATION	1.0836083721027823E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999811944948	WITHOUT_CLASSIFICATION	1.880550515070957E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999811944948	WITHOUT_CLASSIFICATION	1.880550515070957E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999904582524438	WITHOUT_CLASSIFICATION	9.541747556140275E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999691804613	WITHOUT_CLASSIFICATION	3.081953862134469E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999691804613	WITHOUT_CLASSIFICATION	3.081953862134469E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999891055937	WITHOUT_CLASSIFICATION	1.0894406218262563E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999999571614	WITHOUT_CLASSIFICATION	4.283858543837389E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9987830839969225	WITHOUT_CLASSIFICATION	0.0012169160030774742	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.999999837514504	WITHOUT_CLASSIFICATION	1.624854958737949E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.999999875426106	WITHOUT_CLASSIFICATION	1.245738939687903E-7	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999978737437	WITHOUT_CLASSIFICATION	2.1262562061482185E-9	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9993445058382544	WITHOUT_CLASSIFICATION	6.554941617456126E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999377071420016	WITHOUT_CLASSIFICATION	6.229285799839762E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999997904631001	WITHOUT_CLASSIFICATION	2.0953689996339263E-7	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996672330542297	WITHOUT_CLASSIFICATION	3.3276694577032194E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999997803801816	WITHOUT_CLASSIFICATION	2.1961981852812727E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998557784630584	WITHOUT_CLASSIFICATION	1.4422153694165565E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963589772768	WITHOUT_CLASSIFICATION	3.6410227231386427E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963589772768	WITHOUT_CLASSIFICATION	3.6410227231386427E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963589772768	WITHOUT_CLASSIFICATION	3.6410227231386427E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999963589772768	WITHOUT_CLASSIFICATION	3.6410227231386427E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999999673967046	WITHOUT_CLASSIFICATION	3.260329539462099E-7	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999059282788738	WITHOUT_CLASSIFICATION	9.407172112626721E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999785781351559	WITHOUT_CLASSIFICATION	2.1421864844169444E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999981872139552	WITHOUT_CLASSIFICATION	1.8127860449408046E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999978863404292	WITHOUT_CLASSIFICATION	2.1136595708128377E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999786101261265	WITHOUT_CLASSIFICATION	2.1389873873458264E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999997804657452	WITHOUT_CLASSIFICATION	2.1953425486978675E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999944402459717	WITHOUT_CLASSIFICATION	5.559754028391152E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999017441893701	WITHOUT_CLASSIFICATION	9.82558106300116E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999632359873	WITHOUT_CLASSIFICATION	3.6764012609187976E-8	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999957297904382	WITHOUT_CLASSIFICATION	4.270209561840194E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999368263675363	WITHOUT_CLASSIFICATION	6.317363246362241E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999995093495561	WITHOUT_CLASSIFICATION	4.906504438916554E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999997596838998	WITHOUT_CLASSIFICATION	2.4031610021242095E-7	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999942324224599	WITHOUT_CLASSIFICATION	5.767577540072532E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999368263675363	WITHOUT_CLASSIFICATION	6.317363246362241E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999804497545417	WITHOUT_CLASSIFICATION	1.9550245458253455E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999971507089703	WITHOUT_CLASSIFICATION	2.849291029685768E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999994233959033	WITHOUT_CLASSIFICATION	5.766040967103725E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999597813044	WITHOUT_CLASSIFICATION	4.0218695615359354E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999998980992192	WITHOUT_CLASSIFICATION	1.0190078070708995E-7	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999997373758507	WITHOUT_CLASSIFICATION	2.6262414932793137E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999628714923	WITHOUT_CLASSIFICATION	3.7128507818782836E-8	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997397646596767	WITHOUT_CLASSIFICATION	2.602353403232044E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997096450428	WITHOUT_CLASSIFICATION	2.903549572305022E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999999224501162	WITHOUT_CLASSIFICATION	7.754988385266372E-8	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999931303923	WITHOUT_CLASSIFICATION	6.869607583139393E-9	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999999910524761	WITHOUT_CLASSIFICATION	8.947523898744896E-8	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999977405973145	WITHOUT_CLASSIFICATION	2.2594026855231583E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997258048158756	WITHOUT_CLASSIFICATION	2.741951841244381E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999887844595367	WITHOUT_CLASSIFICATION	1.1215540463293504E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999606233285	WITHOUT_CLASSIFICATION	3.937667150436814E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999982460989	WITHOUT_CLASSIFICATION	1.753901078786575E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998486345183	WITHOUT_CLASSIFICATION	1.5136548165416373E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999988078587251	WITHOUT_CLASSIFICATION	1.1921412748998628E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998486345183	WITHOUT_CLASSIFICATION	1.5136548165416373E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999297563714	WITHOUT_CLASSIFICATION	7.024362864567677E-8	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999999958665	WITHOUT_CLASSIFICATION	4.133499930680372E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999986155591346	WITHOUT_CLASSIFICATION	1.3844408653981937E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999930093514	WITHOUT_CLASSIFICATION	6.9906485303632244E-9	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999982460989	WITHOUT_CLASSIFICATION	1.753901078786575E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999988078587251	WITHOUT_CLASSIFICATION	1.1921412748998628E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999297563714	WITHOUT_CLASSIFICATION	7.024362864567677E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999950319249631	WITHOUT_CLASSIFICATION	4.968075036942979E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999897822916154	WITHOUT_CLASSIFICATION	1.0217708384505835E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999293064577663	WITHOUT_CLASSIFICATION	7.069354223368907E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9999212917809185	WITHOUT_CLASSIFICATION	7.870821908150656E-5	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999204550197343	WITHOUT_CLASSIFICATION	7.954498026576836E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999989332415761	WITHOUT_CLASSIFICATION	1.0667584239668084E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570055625	WITHOUT_CLASSIFICATION	5.429944375937973E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999999958665	WITHOUT_CLASSIFICATION	4.133499930680372E-11	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999999533965	WITHOUT_CLASSIFICATION	4.660348322683469E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999989390203778	WITHOUT_CLASSIFICATION	1.0609796221931081E-6	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999785667458	WITHOUT_CLASSIFICATION	2.1433254159307064E-8	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570055625	WITHOUT_CLASSIFICATION	5.429944375937973E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999925446970909	WITHOUT_CLASSIFICATION	7.455302909075789E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570055625	WITHOUT_CLASSIFICATION	5.429944375937973E-7	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999508589436	WITHOUT_CLASSIFICATION	4.914105641296165E-8	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997314650535	WITHOUT_CLASSIFICATION	2.6853494643641083E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999846099820241	WITHOUT_CLASSIFICATION	1.5390017975842525E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997470296959607	WITHOUT_CLASSIFICATION	2.529703040392441E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999998915303345	WITHOUT_CLASSIFICATION	1.0846966550555819E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999996416869475	WITHOUT_CLASSIFICATION	3.5831305246461794E-7	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999844498826475	WITHOUT_CLASSIFICATION	1.555011735257618E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999970368390113	WITHOUT_CLASSIFICATION	2.963160988655078E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999997382591251	WITHOUT_CLASSIFICATION	2.6174087489947327E-6	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999996694586335	WITHOUT_CLASSIFICATION	3.3054136655132906E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999916403791621	WITHOUT_CLASSIFICATION	8.359620837841622E-6	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999959594026	WITHOUT_CLASSIFICATION	4.0405974136111646E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9987830839969225	WITHOUT_CLASSIFICATION	0.0012169160030774742	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999997546694388	WITHOUT_CLASSIFICATION	2.45330561230501E-7	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999989127470992	WITHOUT_CLASSIFICATION	1.0872529007980394E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999998888382561	WITHOUT_CLASSIFICATION	1.1116174392767561E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999989067130187	WITHOUT_CLASSIFICATION	1.0932869812194166E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999999203659	WITHOUT_CLASSIFICATION	7.963408229489853E-11	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999992814976002	WITHOUT_CLASSIFICATION	7.185023998250611E-7	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999995570613421	WITHOUT_CLASSIFICATION	4.429386578960625E-6	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999836367139873	WITHOUT_CLASSIFICATION	1.6363286012728193E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999540784488	WITHOUT_CLASSIFICATION	4.592155119089439E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999154686898	WITHOUT_CLASSIFICATION	8.453131010799464E-8	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9988231606768515	WITHOUT_CLASSIFICATION	0.001176839323148545	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999992545501096	WITHOUT_CLASSIFICATION	7.454498904085054E-7	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999991156354449	WITHOUT_CLASSIFICATION	8.843645551419425E-7	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999997008866562	WITHOUT_CLASSIFICATION	2.9911334377894313E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999966640233887	WITHOUT_CLASSIFICATION	3.3359766112558546E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999909676709542	WITHOUT_CLASSIFICATION	9.032329045904984E-6	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997931501529	WITHOUT_CLASSIFICATION	2.0684984718203599E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995598605769042	WITHOUT_CLASSIFICATION	4.4013942309577416E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999998439600501	WITHOUT_CLASSIFICATION	1.5603994988978558E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999992256453383	WITHOUT_CLASSIFICATION	7.743546616990794E-7	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999171424883248	WITHOUT_CLASSIFICATION	8.285751167524866E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9998781339984091	WITHOUT_CLASSIFICATION	1.2186600159089708E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999004059655	WITHOUT_CLASSIFICATION	9.959403444608089E-8	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999998834586468	WITHOUT_CLASSIFICATION	1.1654135320377047E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999882651002437	WITHOUT_CLASSIFICATION	1.1734899756310136E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999953796066263	WITHOUT_CLASSIFICATION	4.620393373708861E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999922961852	WITHOUT_CLASSIFICATION	7.703814860841898E-9	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9956082653580454	WITHOUT_CLASSIFICATION	0.004391734641954683	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999738209165273	WITHOUT_CLASSIFICATION	2.6179083472561533E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999971977861599	WITHOUT_CLASSIFICATION	2.802213840145809E-6	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999813125229754	WITHOUT_CLASSIFICATION	1.8687477024700826E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999813125229754	WITHOUT_CLASSIFICATION	1.8687477024700826E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999955802310165	WITHOUT_CLASSIFICATION	4.41976898350503E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999970368390113	WITHOUT_CLASSIFICATION	2.963160988655078E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999902211111131	WITHOUT_CLASSIFICATION	9.778888886862186E-6	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999779980974	WITHOUT_CLASSIFICATION	2.2001902664258874E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999825645206	WITHOUT_CLASSIFICATION	1.7435479372610443E-8	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999616843502848	WITHOUT_CLASSIFICATION	3.831564971523794E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999913936855455	WITHOUT_CLASSIFICATION	8.606314454572846E-6	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999955322817361	WITHOUT_CLASSIFICATION	4.467718263920413E-6	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999990535774	WITHOUT_CLASSIFICATION	9.464226409125937E-10	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999994599911	WITHOUT_CLASSIFICATION	5.400089029079855E-10	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999758976271558	WITHOUT_CLASSIFICATION	2.410237284412214E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999999397109463	WITHOUT_CLASSIFICATION	6.028905380930481E-8	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9996163684900364	WITHOUT_CLASSIFICATION	3.836315099635893E-4	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999707433608	WITHOUT_CLASSIFICATION	2.9256639316158703E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999683082275	WITHOUT_CLASSIFICATION	3.169177249507373E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999967699127	WITHOUT_CLASSIFICATION	3.230087213912869E-9	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999868378324	WITHOUT_CLASSIFICATION	1.3162167571319899E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999988269043	WITHOUT_CLASSIFICATION	1.1730957937035848E-9	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999999999916395	WITHOUT_CLASSIFICATION	8.360506874776067E-11	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999870081830873	WITHOUT_CLASSIFICATION	1.2991816912691215E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999985141381711	WITHOUT_CLASSIFICATION	1.4858618288600851E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9961798869520065	WITHOUT_CLASSIFICATION	0.0038201130479933606	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.99998650422138	WITHOUT_CLASSIFICATION	1.3495778620064857E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999819280227	WITHOUT_CLASSIFICATION	1.807197728999166E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9956082653580454	WITHOUT_CLASSIFICATION	0.004391734641954683	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999815987353	WITHOUT_CLASSIFICATION	1.8401264734831008E-8	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999903687714906	WITHOUT_CLASSIFICATION	9.631228509312461E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999992898658	WITHOUT_CLASSIFICATION	7.101341854214966E-10	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999996230837658	WITHOUT_CLASSIFICATION	3.76916234276019E-7	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998824257789068	WITHOUT_CLASSIFICATION	1.1757422109313246E-4	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999207435152517	WITHOUT_CLASSIFICATION	7.925648474831784E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999996240028692	WITHOUT_CLASSIFICATION	3.7599713066165163E-7	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999562483877	WITHOUT_CLASSIFICATION	4.375161226777659E-8	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998354632659	WITHOUT_CLASSIFICATION	1.6453673406797387E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999998269570359	WITHOUT_CLASSIFICATION	1.7304296404375547E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999701805294	WITHOUT_CLASSIFICATION	2.9819470541550675E-8	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999820540153	WITHOUT_CLASSIFICATION	1.7945984593883528E-8	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999448419847	WITHOUT_CLASSIFICATION	5.515801527147684E-8	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999973093764335	WITHOUT_CLASSIFICATION	2.6906235665306723E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999949966329952	WITHOUT_CLASSIFICATION	5.003367004766174E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999949966329952	WITHOUT_CLASSIFICATION	5.003367004766174E-6	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999996550333962	WITHOUT_CLASSIFICATION	3.449666038096869E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999923775763397	WITHOUT_CLASSIFICATION	7.622423660242673E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999985866191	WITHOUT_CLASSIFICATION	1.4133808992728703E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999985866191	WITHOUT_CLASSIFICATION	1.4133808992728703E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999896401205	WITHOUT_CLASSIFICATION	1.0359879535519949E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999971719852917	WITHOUT_CLASSIFICATION	2.8280147082889427E-6	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9491841065456254	WITHOUT_CLASSIFICATION	0.05081589345437463	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999737675664	WITHOUT_CLASSIFICATION	2.62324336198845E-8	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999928506694	WITHOUT_CLASSIFICATION	7.149330513845921E-9	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999580827836	WITHOUT_CLASSIFICATION	4.1917216414524776E-8	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999998919717	WITHOUT_CLASSIFICATION	1.0802823840945376E-10	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999998919717	WITHOUT_CLASSIFICATION	1.0802823840945376E-10	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999132881358	WITHOUT_CLASSIFICATION	8.671186422746145E-8	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999994057496022	WITHOUT_CLASSIFICATION	5.942503976745147E-7	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999999052628005	WITHOUT_CLASSIFICATION	9.473719958475376E-8	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999762739256	WITHOUT_CLASSIFICATION	2.3726074456972032E-8	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999762739256	WITHOUT_CLASSIFICATION	2.3726074456972032E-8	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999470267523	WITHOUT_CLASSIFICATION	5.297324771466409E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999944272618297	WITHOUT_CLASSIFICATION	5.572738170254413E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999906645901	WITHOUT_CLASSIFICATION	9.335409782468316E-9	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999377398734	WITHOUT_CLASSIFICATION	6.226012657801521E-8	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999999306143224	WITHOUT_CLASSIFICATION	6.938567759504849E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999874925963	WITHOUT_CLASSIFICATION	1.2507403550362108E-8	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999998353549622	WITHOUT_CLASSIFICATION	1.6464503775977201E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999989019322043	WITHOUT_CLASSIFICATION	1.0980677956771519E-6	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999922576148	WITHOUT_CLASSIFICATION	7.742385179205997E-9	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999798335232	WITHOUT_CLASSIFICATION	2.0166476918307457E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999980945721271	WITHOUT_CLASSIFICATION	1.9054278730264234E-6	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9981054081406305	WITHOUT_CLASSIFICATION	0.0018945918593694744	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.991191821980144	WITHOUT_CLASSIFICATION	0.008808178019856021	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999737698001799	WITHOUT_CLASSIFICATION	2.623019982015244E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999953653504948	WITHOUT_CLASSIFICATION	4.634649505127513E-6	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999996908303818	WITHOUT_CLASSIFICATION	3.091696182180077E-7	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999975407161941	WITHOUT_CLASSIFICATION	2.4592838059659135E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999995981403809	WITHOUT_CLASSIFICATION	4.018596191164889E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999763716293337	WITHOUT_CLASSIFICATION	2.3628370666276726E-5	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999958815832097	WITHOUT_CLASSIFICATION	4.118416790266245E-6	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999982931547978	WITHOUT_CLASSIFICATION	1.706845202152455E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999998996985506	WITHOUT_CLASSIFICATION	1.0030144940361103E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999849019221232	WITHOUT_CLASSIFICATION	1.5098077876834188E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999994371234094	WITHOUT_CLASSIFICATION	5.628765905156463E-7	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999995630612083	WITHOUT_CLASSIFICATION	4.3693879174106643E-7	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999277072253	WITHOUT_CLASSIFICATION	7.229277469112858E-8	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999467558093	WITHOUT_CLASSIFICATION	5.324419078307529E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999937813281894	WITHOUT_CLASSIFICATION	6.218671810642826E-6	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999994865305	WITHOUT_CLASSIFICATION	5.134695070603346E-9	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999968365871306	WITHOUT_CLASSIFICATION	3.1634128693718653E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9726878908587733	WITHOUT_CLASSIFICATION	0.027312109141226802	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999796732139	WITHOUT_CLASSIFICATION	2.0326786166743152E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998371224569	WITHOUT_CLASSIFICATION	1.628775431420207E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999937433820635	WITHOUT_CLASSIFICATION	6.256617936529027E-6	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999974112571833	WITHOUT_CLASSIFICATION	2.588742816759942E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999702750215818	WITHOUT_CLASSIFICATION	2.972497841828757E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999892367202903	WITHOUT_CLASSIFICATION	1.0763279709632031E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999996517231	WITHOUT_CLASSIFICATION	3.4827689903242435E-10	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999158164827139	WITHOUT_CLASSIFICATION	8.418351728616706E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999960304112	WITHOUT_CLASSIFICATION	3.969588787093579E-9	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999995954439735	WITHOUT_CLASSIFICATION	4.0455602644239096E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999997007429013	WITHOUT_CLASSIFICATION	2.992570986963842E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.999999013858646	WITHOUT_CLASSIFICATION	9.861413540846127E-7	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.999963298923448	WITHOUT_CLASSIFICATION	3.6701076551988245E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999981544769295	WITHOUT_CLASSIFICATION	1.8455230705044267E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999999250443193	WITHOUT_CLASSIFICATION	7.495568066843707E-8	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999995963734151	WITHOUT_CLASSIFICATION	4.036265849043138E-7	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999999387293947	WITHOUT_CLASSIFICATION	6.12706053670282E-8	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999938832238503	WITHOUT_CLASSIFICATION	6.116776149633211E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999998320919404	WITHOUT_CLASSIFICATION	1.6790805963390085E-7	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999961031171263	WITHOUT_CLASSIFICATION	3.896882873685785E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998938339641827	WITHOUT_CLASSIFICATION	1.0616603581730936E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999740208885924	WITHOUT_CLASSIFICATION	2.5979111407510394E-5	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999979900003	WITHOUT_CLASSIFICATION	2.009999736488424E-9	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999997140263254	WITHOUT_CLASSIFICATION	2.859736746829343E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999971138263211	WITHOUT_CLASSIFICATION	2.886173678903493E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999996798406673	WITHOUT_CLASSIFICATION	3.201593326892226E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999999264375234	WITHOUT_CLASSIFICATION	7.356247653262584E-8	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999448160461687	WITHOUT_CLASSIFICATION	5.518395383126308E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999999909788994	WITHOUT_CLASSIFICATION	9.021100688320915E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999987500290082	WITHOUT_CLASSIFICATION	1.2499709918426517E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999987500290082	WITHOUT_CLASSIFICATION	1.2499709918426517E-6	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999796774	WITHOUT_CLASSIFICATION	2.0322577028086406E-11	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999528051878962	WITHOUT_CLASSIFICATION	4.7194812103896374E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999997196646355	WITHOUT_CLASSIFICATION	2.8033536449610106E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999997262207	WITHOUT_CLASSIFICATION	2.737792534637008E-10	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999852674183	WITHOUT_CLASSIFICATION	1.473258182491081E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999961515434136	WITHOUT_CLASSIFICATION	3.848456586450196E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999997021957	WITHOUT_CLASSIFICATION	2.9780433824681814E-10	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999996692812	WITHOUT_CLASSIFICATION	3.307188113569966E-10	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999973532013	WITHOUT_CLASSIFICATION	2.646798675877475E-9	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999827042992	WITHOUT_CLASSIFICATION	1.7295700690609105E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999996575724854	WITHOUT_CLASSIFICATION	3.424275145105897E-7	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.99999886020447	WITHOUT_CLASSIFICATION	1.1397955299260857E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999945798345	WITHOUT_CLASSIFICATION	5.420165449661357E-9	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999950762693868	WITHOUT_CLASSIFICATION	4.923730613194363E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984363128247	WITHOUT_CLASSIFICATION	1.5636871753213812E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999984363128247	WITHOUT_CLASSIFICATION	1.5636871753213812E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999999874438	WITHOUT_CLASSIFICATION	1.255622723506242E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999959670781288	WITHOUT_CLASSIFICATION	4.032921871203158E-6	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998716235781	WITHOUT_CLASSIFICATION	1.2837642195857398E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999924531664	WITHOUT_CLASSIFICATION	7.546833674788334E-9	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994889696276	WITHOUT_CLASSIFICATION	5.110303723722978E-7	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994092012187	WITHOUT_CLASSIFICATION	5.907987813707558E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999969792728314	WITHOUT_CLASSIFICATION	3.0207271686312352E-6	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999923941832236	WITHOUT_CLASSIFICATION	7.605816776403661E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999998889910342	WITHOUT_CLASSIFICATION	1.1100896580524195E-7	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999730373857127	WITHOUT_CLASSIFICATION	2.6962614287162546E-5	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999958514901145	WITHOUT_CLASSIFICATION	4.14850988558787E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999978521483	WITHOUT_CLASSIFICATION	2.147851739469677E-9	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999998489782	WITHOUT_CLASSIFICATION	1.5102174333029062E-10	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999999993049953	WITHOUT_CLASSIFICATION	6.950046996395722E-9	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999424299687	WITHOUT_CLASSIFICATION	5.7570031383275485E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999997835902182	WITHOUT_CLASSIFICATION	2.1640978187060446E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968745235974	WITHOUT_CLASSIFICATION	3.12547640261021E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999939471536	WITHOUT_CLASSIFICATION	6.052846552511221E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999982288733	WITHOUT_CLASSIFICATION	1.7711266671742085E-9	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999672466001	WITHOUT_CLASSIFICATION	3.275339990126486E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.999999983967492	WITHOUT_CLASSIFICATION	1.6032508015375095E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999999199784	WITHOUT_CLASSIFICATION	8.002160883036291E-10	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999902170481	WITHOUT_CLASSIFICATION	9.782951843848682E-9	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999995604501983	WITHOUT_CLASSIFICATION	4.3954980162107474E-7	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999941935092977	WITHOUT_CLASSIFICATION	5.80649070226514E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999969194865161	WITHOUT_CLASSIFICATION	3.0805134839451578E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999976464046769	WITHOUT_CLASSIFICATION	2.353595323019605E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999935139238723	WITHOUT_CLASSIFICATION	6.486076127691553E-5	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.99999910064452	WITHOUT_CLASSIFICATION	8.993554800130737E-7	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999968534331	WITHOUT_CLASSIFICATION	3.1465669599765456E-9	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999995795155745	WITHOUT_CLASSIFICATION	4.2048442541404816E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999757233294	WITHOUT_CLASSIFICATION	2.4276670565064497E-8	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999982803517	WITHOUT_CLASSIFICATION	1.719648414057507E-9	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992189602667	WITHOUT_CLASSIFICATION	7.81039733390463E-7	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9954331113999938	WITHOUT_CLASSIFICATION	0.004566888600006194	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999525627503	WITHOUT_CLASSIFICATION	4.743724965896613E-8	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999752984213	WITHOUT_CLASSIFICATION	2.470157877617981E-8	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999846806021	WITHOUT_CLASSIFICATION	1.531939784141023E-8	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999994097169773	WITHOUT_CLASSIFICATION	5.902830226539656E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999900331965	WITHOUT_CLASSIFICATION	9.966803504098267E-9	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998615862482976	WITHOUT_CLASSIFICATION	1.3841375170238352E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998615862482976	WITHOUT_CLASSIFICATION	1.3841375170238352E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999985687702	WITHOUT_CLASSIFICATION	1.4312297443619652E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999926661605	WITHOUT_CLASSIFICATION	7.333839500518108E-8	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9892901378565709	WITHOUT_CLASSIFICATION	0.010709862143429005	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999994428386115	WITHOUT_CLASSIFICATION	5.571613884605382E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999878806399234	WITHOUT_CLASSIFICATION	1.2119360076563288E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999823595955	WITHOUT_CLASSIFICATION	1.764040449619997E-8	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999993970880676	WITHOUT_CLASSIFICATION	6.029119323975768E-6	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999602154713	WITHOUT_CLASSIFICATION	3.978452870737036E-8	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999989898357567	WITHOUT_CLASSIFICATION	1.0101642431953593E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999468957249	WITHOUT_CLASSIFICATION	5.3104275017219527E-8	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999697472657	WITHOUT_CLASSIFICATION	3.0252734274734654E-8	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999729223060807	WITHOUT_CLASSIFICATION	2.7077693919337527E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999443540251	WITHOUT_CLASSIFICATION	5.5645975034060766E-8	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999967487687	WITHOUT_CLASSIFICATION	3.2512312634921816E-9	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999546423892467	WITHOUT_CLASSIFICATION	4.5357610753206594E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999960755001782	WITHOUT_CLASSIFICATION	3.92449982170691E-6	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999809531263	WITHOUT_CLASSIFICATION	1.9046873727777416E-8	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999737779631	WITHOUT_CLASSIFICATION	2.622203698051904E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999845924097029	WITHOUT_CLASSIFICATION	1.5407590297106904E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999693397039	WITHOUT_CLASSIFICATION	3.066029609632825E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999592128602	WITHOUT_CLASSIFICATION	4.078713965660972E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999996325678706	WITHOUT_CLASSIFICATION	3.674321293434124E-7	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999939961345219	WITHOUT_CLASSIFICATION	6.003865478096536E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999989775839855	WITHOUT_CLASSIFICATION	1.0224160144219937E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999996251335199	WITHOUT_CLASSIFICATION	3.7486648014293555E-7	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998326094400609	WITHOUT_CLASSIFICATION	1.6739055993919547E-4	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999967757941925	WITHOUT_CLASSIFICATION	3.224205807490863E-6	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999800528222	WITHOUT_CLASSIFICATION	1.9947177772188067E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999994080395811	WITHOUT_CLASSIFICATION	5.919604188950437E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999174979980057	WITHOUT_CLASSIFICATION	8.250200199432603E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999957905158084	WITHOUT_CLASSIFICATION	4.209484191564599E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999981280420716	WITHOUT_CLASSIFICATION	1.8719579283543112E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999940544964	WITHOUT_CLASSIFICATION	5.945503693371579E-9	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999999369362	WITHOUT_CLASSIFICATION	6.306373558424066E-11	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999996032773	WITHOUT_CLASSIFICATION	3.967226404524977E-10	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998073433895277	WITHOUT_CLASSIFICATION	1.9265661047240714E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999992436863	WITHOUT_CLASSIFICATION	7.563137967626666E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999633272255	WITHOUT_CLASSIFICATION	3.6672774451022275E-8	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999914068862692	WITHOUT_CLASSIFICATION	8.593113730780448E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999996724190586	WITHOUT_CLASSIFICATION	3.275809414239509E-7	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999709450877171	WITHOUT_CLASSIFICATION	2.905491228279782E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999706995456	WITHOUT_CLASSIFICATION	2.930045433355293E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999378683153	WITHOUT_CLASSIFICATION	6.213168458837739E-8	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999990068	WITHOUT_CLASSIFICATION	9.93192126717221E-13	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999931599687543	WITHOUT_CLASSIFICATION	6.8400312457140576E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999998604375262	WITHOUT_CLASSIFICATION	1.3956247374361955E-7	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999997411854277	WITHOUT_CLASSIFICATION	2.588145722510861E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999945798345	WITHOUT_CLASSIFICATION	5.420165449661357E-9	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999999970747	WITHOUT_CLASSIFICATION	2.9253000353937167E-12	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999999675221	WITHOUT_CLASSIFICATION	3.247784740744655E-11	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999633377079193	WITHOUT_CLASSIFICATION	3.666229208064851E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9996875855681222	WITHOUT_CLASSIFICATION	3.12414431877796E-4	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999891658505	WITHOUT_CLASSIFICATION	1.0834149429588013E-8	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999991752143451	WITHOUT_CLASSIFICATION	8.247856548561905E-7	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.963579399522801	WITHOUT_CLASSIFICATION	0.03642060047719897	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999962912335876	WITHOUT_CLASSIFICATION	3.7087664124902615E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999993645811	WITHOUT_CLASSIFICATION	6.354189196384441E-10	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999899653061034	WITHOUT_CLASSIFICATION	1.00346938965997E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999961578343	WITHOUT_CLASSIFICATION	3.842165722037935E-9	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999998906263396	WITHOUT_CLASSIFICATION	1.0937366037002462E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999994006001	WITHOUT_CLASSIFICATION	5.993998387042753E-10	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999992036794	WITHOUT_CLASSIFICATION	7.963205903108544E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997632826103	WITHOUT_CLASSIFICATION	2.3671738959824412E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999879392588407	WITHOUT_CLASSIFICATION	1.206074115930534E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998735409918	WITHOUT_CLASSIFICATION	1.2645900821259186E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998426092808	WITHOUT_CLASSIFICATION	1.5739071927959485E-7	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999996406186349	WITHOUT_CLASSIFICATION	3.593813650486524E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997632826103	WITHOUT_CLASSIFICATION	2.3671738959824412E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999932132484775	WITHOUT_CLASSIFICATION	6.786751522556778E-6	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999999999151837	WITHOUT_CLASSIFICATION	8.481629983360314E-10	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998129174485	WITHOUT_CLASSIFICATION	1.8708255142894944E-7	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999804226828	WITHOUT_CLASSIFICATION	1.9577317135938722E-8	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999984880344884	WITHOUT_CLASSIFICATION	1.5119655114897886E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999892792041	WITHOUT_CLASSIFICATION	1.0720795860954481E-8	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999505518	WITHOUT_CLASSIFICATION	4.944815388803922E-11	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998755554724464	WITHOUT_CLASSIFICATION	1.2444452755358272E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999991625333	WITHOUT_CLASSIFICATION	8.374666048351874E-10	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999856895290286	WITHOUT_CLASSIFICATION	1.4310470971463137E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998877751376604	WITHOUT_CLASSIFICATION	1.1222486233960416E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999529726239588	WITHOUT_CLASSIFICATION	4.702737604117422E-5	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999796946448	WITHOUT_CLASSIFICATION	2.0305355227493604E-8	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999599190716223	WITHOUT_CLASSIFICATION	4.008092837770182E-5	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999988562165953	WITHOUT_CLASSIFICATION	1.143783404694027E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999819280227	WITHOUT_CLASSIFICATION	1.807197728999166E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999702663813	WITHOUT_CLASSIFICATION	2.973361874904855E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998632095894	WITHOUT_CLASSIFICATION	1.3679041058284086E-7	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997341579529828	WITHOUT_CLASSIFICATION	2.6584204701725697E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999994199549949	WITHOUT_CLASSIFICATION	5.800450050846907E-7	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9998949279671722	WITHOUT_CLASSIFICATION	1.0507203282786572E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999991524464594	WITHOUT_CLASSIFICATION	8.475535406380607E-7	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999312326763	WITHOUT_CLASSIFICATION	6.876732366158923E-8	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999958258807	WITHOUT_CLASSIFICATION	4.1741192637268545E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999999646046	WITHOUT_CLASSIFICATION	3.539531831150096E-11	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999731102308	WITHOUT_CLASSIFICATION	2.6889769137361854E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999796686157458	WITHOUT_CLASSIFICATION	2.033138425412943E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999925272893	WITHOUT_CLASSIFICATION	7.472710690930475E-8	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999410280384711	WITHOUT_CLASSIFICATION	5.897196152889366E-4	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9849799104982297	WITHOUT_CLASSIFICATION	0.015020089501770221	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998873220615	WITHOUT_CLASSIFICATION	1.1267793855144247E-7	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999753450454317	WITHOUT_CLASSIFICATION	2.4654954568323083E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999998910831146	WITHOUT_CLASSIFICATION	1.089168853931085E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999999891298331	WITHOUT_CLASSIFICATION	1.0870166916296223E-8	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999964420847	WITHOUT_CLASSIFICATION	3.5579152401997235E-9	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999982350805	WITHOUT_CLASSIFICATION	1.7649194932435259E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999975227251	WITHOUT_CLASSIFICATION	2.477274933759937E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999987347283138	WITHOUT_CLASSIFICATION	1.265271686203815E-6	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999999270461	WITHOUT_CLASSIFICATION	7.29537875586055E-11	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999442147951	WITHOUT_CLASSIFICATION	5.578520502022628E-8	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9987670009044922	WITHOUT_CLASSIFICATION	0.0012329990955077033	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9987670009044922	WITHOUT_CLASSIFICATION	0.0012329990955077033	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999999459986285	WITHOUT_CLASSIFICATION	5.4001371552929976E-8	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999380873058	WITHOUT_CLASSIFICATION	6.191269412339133E-8	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999903932465	WITHOUT_CLASSIFICATION	9.606753548359067E-9	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.728966510454421	IMPLEMENTATION	0.27103348954557904	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591165183	WITHOUT_CLASSIFICATION	1.040883481705246E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999989591165183	WITHOUT_CLASSIFICATION	1.040883481705246E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999992393756055	WITHOUT_CLASSIFICATION	7.60624394535812E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999913642439	WITHOUT_CLASSIFICATION	8.635755989392559E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999966730990061	WITHOUT_CLASSIFICATION	3.3269009938535377E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999972793413568	WITHOUT_CLASSIFICATION	2.7206586431279054E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999021277662	WITHOUT_CLASSIFICATION	9.787223368365127E-8	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999957416683032	WITHOUT_CLASSIFICATION	4.258331696836552E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999998810878336	WITHOUT_CLASSIFICATION	1.1891216645082776E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999970225739	WITHOUT_CLASSIFICATION	2.9774260039460057E-9	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999498230698	WITHOUT_CLASSIFICATION	5.017693022429463E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999875433722	WITHOUT_CLASSIFICATION	1.245662784011615E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999875433722	WITHOUT_CLASSIFICATION	1.245662784011615E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999868717381647	WITHOUT_CLASSIFICATION	1.3128261835345908E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997985302985	WITHOUT_CLASSIFICATION	2.014697014404023E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999899330697	WITHOUT_CLASSIFICATION	1.0066930169561033E-8	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999949726312857	WITHOUT_CLASSIFICATION	5.027368714245055E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999994799116316	WITHOUT_CLASSIFICATION	5.200883684264934E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999585346991	WITHOUT_CLASSIFICATION	4.146530095742997E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992580889718	WITHOUT_CLASSIFICATION	7.419110281948336E-7	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991565616089	WITHOUT_CLASSIFICATION	8.434383910597147E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999997998545513	WITHOUT_CLASSIFICATION	2.0014544870357458E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999493391873806	WITHOUT_CLASSIFICATION	5.066081261928255E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999998888521053	WITHOUT_CLASSIFICATION	1.1114789469780248E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999856895290286	WITHOUT_CLASSIFICATION	1.4310470971463137E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999991868039143	WITHOUT_CLASSIFICATION	8.131960855968056E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999969684911143	WITHOUT_CLASSIFICATION	3.031508885689581E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999998848768828	WITHOUT_CLASSIFICATION	1.1512311718086418E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999921706878085	WITHOUT_CLASSIFICATION	7.82931219154226E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999990790554147	WITHOUT_CLASSIFICATION	9.209445852726234E-7	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999990974027074	WITHOUT_CLASSIFICATION	9.025972925491933E-7	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999998128954961	WITHOUT_CLASSIFICATION	1.8710450384672963E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999840540121	WITHOUT_CLASSIFICATION	1.594598776453943E-8	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999995948128096	WITHOUT_CLASSIFICATION	4.0518719042411947E-7	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999961209994126	WITHOUT_CLASSIFICATION	3.8790005874043933E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999961209994126	WITHOUT_CLASSIFICATION	3.8790005874043933E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999368263675363	WITHOUT_CLASSIFICATION	6.317363246362241E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999746893122	WITHOUT_CLASSIFICATION	2.5310687753903012E-8	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9999292963941943	WITHOUT_CLASSIFICATION	7.070360580578904E-5	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999291432037923	WITHOUT_CLASSIFICATION	7.085679620767126E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999985552998647	WITHOUT_CLASSIFICATION	1.4447001353060723E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999615339583	WITHOUT_CLASSIFICATION	3.846604164220813E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999887844595367	WITHOUT_CLASSIFICATION	1.1215540463293504E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999512048	WITHOUT_CLASSIFICATION	4.8795248690863916E-11	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999950319249631	WITHOUT_CLASSIFICATION	4.968075036942979E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9992882707840749	WITHOUT_CLASSIFICATION	7.117292159251146E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994570055625	WITHOUT_CLASSIFICATION	5.429944375937973E-7	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998464669176502	WITHOUT_CLASSIFICATION	1.5353308234977259E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9971138831777218	WITHOUT_CLASSIFICATION	0.0028861168222782422	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999956068875	WITHOUT_CLASSIFICATION	4.393112579444816E-9	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999990085968	WITHOUT_CLASSIFICATION	9.914031525882737E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999997081870967	WITHOUT_CLASSIFICATION	2.9181290326457446E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999812601785	WITHOUT_CLASSIFICATION	1.873982145679489E-8	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999997772049819	WITHOUT_CLASSIFICATION	2.2279501797615223E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998794054203735	WITHOUT_CLASSIFICATION	1.2059457962663921E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999999964	WITHOUT_CLASSIFICATION	3.4600881276608844E-15	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999867665	WITHOUT_CLASSIFICATION	1.3233440216450056E-11	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999995791414	WITHOUT_CLASSIFICATION	4.208586039469658E-9	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999906645901	WITHOUT_CLASSIFICATION	9.335409782468316E-9	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999996921	WITHOUT_CLASSIFICATION	3.077845927084838E-13	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850212	WITHOUT_CLASSIFICATION	6.4149787370627196E-9	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999935850212	WITHOUT_CLASSIFICATION	6.4149787370627196E-9	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996621651752	WITHOUT_CLASSIFICATION	3.378348247243808E-7	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998234706133052	WITHOUT_CLASSIFICATION	1.7652938669470252E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999491548912	WITHOUT_CLASSIFICATION	5.0845108669708424E-8	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999816632573	WITHOUT_CLASSIFICATION	1.833674272457473E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999997127538195	WITHOUT_CLASSIFICATION	2.8724618047194304E-7	IMPLEMENTATION
