// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9984145210347085	WITHOUT_CLASSIFICATION	0.0015854789652914433	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9984145210347085	WITHOUT_CLASSIFICATION	0.0015854789652914433	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9996192610991271	WITHOUT_CLASSIFICATION	3.80738900872858E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.999237376478521	WITHOUT_CLASSIFICATION	7.626235214789706E-4	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9998941521799674	WITHOUT_CLASSIFICATION	1.0584782003260812E-4	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9995877012494431	WITHOUT_CLASSIFICATION	4.122987505569811E-4	IMPLEMENTATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9995197469868106	WITHOUT_CLASSIFICATION	4.802530131894761E-4	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9999645551650123	WITHOUT_CLASSIFICATION	3.544483498774977E-5	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9997866790259289	WITHOUT_CLASSIFICATION	2.1332097407106106E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9995863789435584	WITHOUT_CLASSIFICATION	4.1362105644164934E-4	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9998997731865241	WITHOUT_CLASSIFICATION	1.0022681347592545E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9998838276385684	WITHOUT_CLASSIFICATION	1.1617236143166755E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998028553990352	WITHOUT_CLASSIFICATION	1.9714460096475496E-4	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9998028553990352	WITHOUT_CLASSIFICATION	1.9714460096475496E-4	IMPLEMENTATION
/**	IMPLEMENTATION	0.9878654753200157	WITHOUT_CLASSIFICATION	0.01213452467998424	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9937981177788845	WITHOUT_CLASSIFICATION	0.006201882221115595	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9858260259386127	WITHOUT_CLASSIFICATION	0.014173974061387281	IMPLEMENTATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9999494361701375	WITHOUT_CLASSIFICATION	5.056382986256882E-5	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.999996499560512	WITHOUT_CLASSIFICATION	3.5004394881447106E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9988819536563953	WITHOUT_CLASSIFICATION	0.001118046343604596	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9998241157052933	WITHOUT_CLASSIFICATION	1.7588429470672215E-4	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9997105178525068	WITHOUT_CLASSIFICATION	2.8948214749324817E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9996929674010103	WITHOUT_CLASSIFICATION	3.070325989896672E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9935949423368462	WITHOUT_CLASSIFICATION	0.006405057663153854	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9935949423368462	WITHOUT_CLASSIFICATION	0.006405057663153854	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.999768070044638	WITHOUT_CLASSIFICATION	2.319299553620643E-4	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9999459768780601	WITHOUT_CLASSIFICATION	5.402312193992598E-5	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.999875888927288	WITHOUT_CLASSIFICATION	1.2411107271203089E-4	IMPLEMENTATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9997501130699599	WITHOUT_CLASSIFICATION	2.498869300401286E-4	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9992841885626151	WITHOUT_CLASSIFICATION	7.158114373849826E-4	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9998291540286345	WITHOUT_CLASSIFICATION	1.7084597136547225E-4	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9972571837865603	WITHOUT_CLASSIFICATION	0.002742816213439825	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9996755212353644	WITHOUT_CLASSIFICATION	3.2447876463559644E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9986225155990688	WITHOUT_CLASSIFICATION	0.001377484400931289	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9983491144384314	WITHOUT_CLASSIFICATION	0.0016508855615686195	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9999326899163826	WITHOUT_CLASSIFICATION	6.731008361737059E-5	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9996437814069637	WITHOUT_CLASSIFICATION	3.5621859303619095E-4	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9999605385058028	WITHOUT_CLASSIFICATION	3.946149419714306E-5	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9999027745148951	WITHOUT_CLASSIFICATION	9.722548510489529E-5	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9999995213975954	WITHOUT_CLASSIFICATION	4.78602404594796E-7	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9999995213975954	WITHOUT_CLASSIFICATION	4.78602404594796E-7	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9999799084535247	WITHOUT_CLASSIFICATION	2.0091546475249914E-5	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999562258465335	WITHOUT_CLASSIFICATION	4.3774153466323516E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.999998579686973	WITHOUT_CLASSIFICATION	1.4203130269308202E-6	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9991701467471569	WITHOUT_CLASSIFICATION	8.298532528431571E-4	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9978198206187519	WITHOUT_CLASSIFICATION	0.0021801793812480947	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9959351305611475	WITHOUT_CLASSIFICATION	0.004064869438852534	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9998455640335502	WITHOUT_CLASSIFICATION	1.544359664498249E-4	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9997577119747558	WITHOUT_CLASSIFICATION	2.42288025244313E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9997338278915288	WITHOUT_CLASSIFICATION	2.6617210847120675E-4	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9989651469690496	WITHOUT_CLASSIFICATION	0.0010348530309504862	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9990126436297904	WITHOUT_CLASSIFICATION	9.873563702095538E-4	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9999878199895712	WITHOUT_CLASSIFICATION	1.2180010428801972E-5	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9999713844647025	WITHOUT_CLASSIFICATION	2.8615535297533604E-5	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9995951197124517	WITHOUT_CLASSIFICATION	4.0488028754834157E-4	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9943335792023663	WITHOUT_CLASSIFICATION	0.0056664207976336685	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9995951197124517	WITHOUT_CLASSIFICATION	4.0488028754834157E-4	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9997016776828568	WITHOUT_CLASSIFICATION	2.9832231714324315E-4	IMPLEMENTATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9956454856510687	WITHOUT_CLASSIFICATION	0.00435451434893134	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9995951197124517	WITHOUT_CLASSIFICATION	4.0488028754834157E-4	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999549441694688	WITHOUT_CLASSIFICATION	4.505583053104924E-5	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999373731579058	WITHOUT_CLASSIFICATION	6.26268420941594E-5	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9994075226882742	WITHOUT_CLASSIFICATION	5.924773117258112E-4	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9998210916084357	WITHOUT_CLASSIFICATION	1.7890839156427666E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999435763214156	WITHOUT_CLASSIFICATION	5.64236785844785E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999641796694466	WITHOUT_CLASSIFICATION	3.582033055337961E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999641796694466	WITHOUT_CLASSIFICATION	3.582033055337961E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999287080208439	WITHOUT_CLASSIFICATION	7.129197915615429E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999801931375804	WITHOUT_CLASSIFICATION	1.9806862419641224E-5	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999347116996942	WITHOUT_CLASSIFICATION	6.528830030573204E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999713116602793	WITHOUT_CLASSIFICATION	2.8688339720612963E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999713116602793	WITHOUT_CLASSIFICATION	2.8688339720612963E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999997704030699	WITHOUT_CLASSIFICATION	2.2959693009589977E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999962025702577	WITHOUT_CLASSIFICATION	3.7974297422230203E-6	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999878913767137	WITHOUT_CLASSIFICATION	1.2108623286321676E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999681758767852	WITHOUT_CLASSIFICATION	3.18241232147403E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999685749705962	WITHOUT_CLASSIFICATION	3.14250294037678E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999685749705962	WITHOUT_CLASSIFICATION	3.14250294037678E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9998827438296168	WITHOUT_CLASSIFICATION	1.1725617038314255E-4	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999933727480023	WITHOUT_CLASSIFICATION	6.627251997703287E-5	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999906183137511	WITHOUT_CLASSIFICATION	9.38168624898719E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999718770079609	WITHOUT_CLASSIFICATION	2.8122992039146234E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999932170439	WITHOUT_CLASSIFICATION	6.782956097108954E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9997392660139073	WITHOUT_CLASSIFICATION	2.6073398609278444E-4	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9997624348751968	WITHOUT_CLASSIFICATION	2.375651248033144E-4	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998558647696252	WITHOUT_CLASSIFICATION	1.4413523037483842E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996926366126974	WITHOUT_CLASSIFICATION	3.07363387302559E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9860485519725374	WITHOUT_CLASSIFICATION	0.013951448027462598	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9997620188085451	WITHOUT_CLASSIFICATION	2.37981191454776E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998314358907557	WITHOUT_CLASSIFICATION	1.6856410924429615E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999919109946896	WITHOUT_CLASSIFICATION	8.089005310421216E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998200735628145	WITHOUT_CLASSIFICATION	1.7992643718546563E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998200735628145	WITHOUT_CLASSIFICATION	1.7992643718546563E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999954505156748	WITHOUT_CLASSIFICATION	4.549484325173859E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9997381167382611	WITHOUT_CLASSIFICATION	2.618832617389492E-4	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999952575526984	WITHOUT_CLASSIFICATION	4.742447301640457E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999997380918114	WITHOUT_CLASSIFICATION	2.6190818861077386E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.999871501744062	WITHOUT_CLASSIFICATION	1.2849825593795E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9878654753200157	WITHOUT_CLASSIFICATION	0.01213452467998424	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9878654753200157	WITHOUT_CLASSIFICATION	0.01213452467998424	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999985320822613	WITHOUT_CLASSIFICATION	1.467917738700203E-6	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998986469316476	WITHOUT_CLASSIFICATION	1.01353068352436E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999752317664515	WITHOUT_CLASSIFICATION	2.4768233548511633E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999864546143447	WITHOUT_CLASSIFICATION	1.354538565521531E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999446578210862	WITHOUT_CLASSIFICATION	5.534217891377244E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999159241655167	WITHOUT_CLASSIFICATION	8.407583448330593E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998483621433573	WITHOUT_CLASSIFICATION	1.5163785664270337E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999943563477213	WITHOUT_CLASSIFICATION	5.643652278815735E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9996863372638541	WITHOUT_CLASSIFICATION	3.1366273614582326E-4	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999976535741976	WITHOUT_CLASSIFICATION	2.3464258024407476E-6	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9998993792797195	WITHOUT_CLASSIFICATION	1.0062072028046515E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9996863372638541	WITHOUT_CLASSIFICATION	3.1366273614582326E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9998993792797195	WITHOUT_CLASSIFICATION	1.0062072028046515E-4	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999900156068869	WITHOUT_CLASSIFICATION	9.984393113043587E-6	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999973592510273	WITHOUT_CLASSIFICATION	2.6407489726296167E-6	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999994419005639	WITHOUT_CLASSIFICATION	5.580994360958011E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998675110061972	WITHOUT_CLASSIFICATION	1.324889938027803E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9997861387462164	WITHOUT_CLASSIFICATION	2.138612537837271E-4	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9997786457830959	WITHOUT_CLASSIFICATION	2.2135421690402284E-4	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9974780432723169	WITHOUT_CLASSIFICATION	0.0025219567276830316	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998540367631704	WITHOUT_CLASSIFICATION	1.4596323682959615E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999975250630152	WITHOUT_CLASSIFICATION	2.474936984789559E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998590533843391	WITHOUT_CLASSIFICATION	1.4094661566085214E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999763953942115	WITHOUT_CLASSIFICATION	2.360460578849745E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999537089904014	WITHOUT_CLASSIFICATION	4.629100959874217E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999531411242	WITHOUT_CLASSIFICATION	4.6858875751972815E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999872222169754	WITHOUT_CLASSIFICATION	1.2777783024576547E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999981544677469	WITHOUT_CLASSIFICATION	1.8455322532011995E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999997768569616	WITHOUT_CLASSIFICATION	2.2314303834864618E-7	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999928484159476	WITHOUT_CLASSIFICATION	7.1515840523046214E-6	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.999986713531406	WITHOUT_CLASSIFICATION	1.3286468594029916E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999550925052302	WITHOUT_CLASSIFICATION	4.490749476976864E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999594119167241	WITHOUT_CLASSIFICATION	4.058808327589296E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999997224737737	WITHOUT_CLASSIFICATION	2.775262263034631E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998030948821932	WITHOUT_CLASSIFICATION	1.9690511780671484E-4	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999981751501239	WITHOUT_CLASSIFICATION	1.8248498760951626E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999964141104348	WITHOUT_CLASSIFICATION	3.585889565221436E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9992065529123196	WITHOUT_CLASSIFICATION	7.934470876803392E-4	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999976304665752	WITHOUT_CLASSIFICATION	2.3695334247986403E-6	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999975201370429	WITHOUT_CLASSIFICATION	2.4798629571035247E-6	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999670378622989	WITHOUT_CLASSIFICATION	3.2962137701091006E-4	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999883580989357	WITHOUT_CLASSIFICATION	1.1641901064322041E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999714640361229	WITHOUT_CLASSIFICATION	2.8535963877117533E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999281493810295	WITHOUT_CLASSIFICATION	7.185061897051379E-5	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999364535134239	WITHOUT_CLASSIFICATION	6.354648657610561E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999864452922593	WITHOUT_CLASSIFICATION	1.3554707740662257E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999438689078527	WITHOUT_CLASSIFICATION	5.6131092147303E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999916559453128	WITHOUT_CLASSIFICATION	8.344054687244047E-6	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999979739596824	WITHOUT_CLASSIFICATION	2.026040317622866E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999438689078527	WITHOUT_CLASSIFICATION	5.6131092147303E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999994069098559	WITHOUT_CLASSIFICATION	5.930901440639821E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999984351877298	WITHOUT_CLASSIFICATION	1.5648122702587701E-6	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.999909706300015	WITHOUT_CLASSIFICATION	9.029369998499096E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999662060737883	WITHOUT_CLASSIFICATION	3.37939262116968E-5	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999880431988386	WITHOUT_CLASSIFICATION	1.1956801161406194E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999953222072968	WITHOUT_CLASSIFICATION	4.6777927031987705E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999953222072968	WITHOUT_CLASSIFICATION	4.6777927031987705E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998858998332939	WITHOUT_CLASSIFICATION	1.1410016670605824E-4	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997502868068	WITHOUT_CLASSIFICATION	2.497131931956785E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999268884551603	WITHOUT_CLASSIFICATION	7.311154483964664E-5	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999989129146551	WITHOUT_CLASSIFICATION	1.087085344886374E-6	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999929257945371	WITHOUT_CLASSIFICATION	7.074205462901526E-6	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999902234514993	WITHOUT_CLASSIFICATION	9.776548500685192E-6	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999803974778367	WITHOUT_CLASSIFICATION	1.960252216320946E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999625620991783	WITHOUT_CLASSIFICATION	3.74379008215713E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999880496332864	WITHOUT_CLASSIFICATION	1.1950366713719398E-5	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999930515983656	WITHOUT_CLASSIFICATION	6.948401634323684E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999935970693351	WITHOUT_CLASSIFICATION	6.402930664892031E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999935970693351	WITHOUT_CLASSIFICATION	6.402930664892031E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.99999436176488	WITHOUT_CLASSIFICATION	5.638235119974731E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999941676961676	WITHOUT_CLASSIFICATION	5.832303832423538E-6	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999696280593707	WITHOUT_CLASSIFICATION	3.0371940629334166E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999935970693351	WITHOUT_CLASSIFICATION	6.402930664892031E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.99999436176488	WITHOUT_CLASSIFICATION	5.638235119974731E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.99999436176488	WITHOUT_CLASSIFICATION	5.638235119974731E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999938512929083	WITHOUT_CLASSIFICATION	6.148707091785359E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999966624915605	WITHOUT_CLASSIFICATION	3.337508439492881E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999992695129255	WITHOUT_CLASSIFICATION	7.304870744195446E-7	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999960785223794	WITHOUT_CLASSIFICATION	3.921477620685094E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999617440263857	WITHOUT_CLASSIFICATION	3.825597361423249E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999617440263857	WITHOUT_CLASSIFICATION	3.825597361423249E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998822037606913	WITHOUT_CLASSIFICATION	1.1779623930864245E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999969905047914	WITHOUT_CLASSIFICATION	3.009495208588398E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999943646742564	WITHOUT_CLASSIFICATION	5.635325743611505E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999828041357001	WITHOUT_CLASSIFICATION	1.7195864299869647E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999828041357001	WITHOUT_CLASSIFICATION	1.7195864299869647E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999312761234862	WITHOUT_CLASSIFICATION	6.872387651377003E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999560116247319	WITHOUT_CLASSIFICATION	4.398837526803186E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999459152952577	WITHOUT_CLASSIFICATION	5.4084704742444475E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999994755334784	WITHOUT_CLASSIFICATION	5.2446652160390135E-6	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999647569004698	WITHOUT_CLASSIFICATION	3.524309953019855E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999806774137046	WITHOUT_CLASSIFICATION	1.9322586295396007E-5	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9997032303030767	WITHOUT_CLASSIFICATION	2.967696969232895E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999305379869777	WITHOUT_CLASSIFICATION	6.946201302223778E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999893614945344	WITHOUT_CLASSIFICATION	1.0638505465567242E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999459152952577	WITHOUT_CLASSIFICATION	5.4084704742444475E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9997226936906	WITHOUT_CLASSIFICATION	2.7730630940010466E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998551537927634	WITHOUT_CLASSIFICATION	1.448462072367263E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998551537927634	WITHOUT_CLASSIFICATION	1.448462072367263E-4	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999988290252777	WITHOUT_CLASSIFICATION	1.1709747223804079E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999802798784353	WITHOUT_CLASSIFICATION	1.972012156470913E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998644651464879	WITHOUT_CLASSIFICATION	1.355348535120314E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9986088694751883	WITHOUT_CLASSIFICATION	0.0013911305248116652	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999662436047424	WITHOUT_CLASSIFICATION	3.375639525762288E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9998650830507234	WITHOUT_CLASSIFICATION	1.3491694927657852E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9995379246765439	WITHOUT_CLASSIFICATION	4.6207532345615216E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999943779063343	WITHOUT_CLASSIFICATION	5.6220936657464505E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999942735453766	WITHOUT_CLASSIFICATION	5.726454623404281E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999942735453766	WITHOUT_CLASSIFICATION	5.726454623404281E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99996060435606	WITHOUT_CLASSIFICATION	3.939564394001517E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999435763214156	WITHOUT_CLASSIFICATION	5.64236785844785E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999928977172713	WITHOUT_CLASSIFICATION	7.102282728658177E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999722251318461	WITHOUT_CLASSIFICATION	2.777486815383183E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999641796694466	WITHOUT_CLASSIFICATION	3.582033055337961E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999976993656628	WITHOUT_CLASSIFICATION	2.300634337194442E-5	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9998570243206033	WITHOUT_CLASSIFICATION	1.4297567939670956E-4	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999978614717235	WITHOUT_CLASSIFICATION	2.138528276494487E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999710089224049	WITHOUT_CLASSIFICATION	2.8991077595102663E-5	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999194460459473	WITHOUT_CLASSIFICATION	8.05539540527152E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9997694534909475	WITHOUT_CLASSIFICATION	2.3054650905242043E-4	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999910053886792	WITHOUT_CLASSIFICATION	8.99461132079577E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999759661351884	WITHOUT_CLASSIFICATION	2.4033864811655483E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999801931375804	WITHOUT_CLASSIFICATION	1.9806862419641224E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.999987088685889	WITHOUT_CLASSIFICATION	1.291131411103922E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.999987088685889	WITHOUT_CLASSIFICATION	1.291131411103922E-5	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999803115075083	WITHOUT_CLASSIFICATION	1.9688492491704897E-5	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999651481005205	WITHOUT_CLASSIFICATION	3.485189947950629E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999731769092057	WITHOUT_CLASSIFICATION	2.682309079433029E-5	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.999961407306707	WITHOUT_CLASSIFICATION	3.8592693293010714E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999802081720921	WITHOUT_CLASSIFICATION	1.9791827907866826E-5	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999207087210117	WITHOUT_CLASSIFICATION	7.929127898829573E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999713116602793	WITHOUT_CLASSIFICATION	2.8688339720612963E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999600315840983	WITHOUT_CLASSIFICATION	3.996841590183723E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9998505925435676	WITHOUT_CLASSIFICATION	1.4940745643244127E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999735498482178	WITHOUT_CLASSIFICATION	2.6450151782089758E-5	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999854339478662	WITHOUT_CLASSIFICATION	1.4566052133816254E-5	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999166162946849	WITHOUT_CLASSIFICATION	8.33837053151606E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999168069639597	WITHOUT_CLASSIFICATION	8.319303604031003E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997131592059921	WITHOUT_CLASSIFICATION	2.868407940078838E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999966165003754	WITHOUT_CLASSIFICATION	3.383499624637811E-6	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999376975948402	WITHOUT_CLASSIFICATION	6.230240515984574E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999668744082619	WITHOUT_CLASSIFICATION	3.312559173809105E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999542051340736	WITHOUT_CLASSIFICATION	4.579486592632367E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999934806386392	WITHOUT_CLASSIFICATION	6.519361360693542E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999161803463963	WITHOUT_CLASSIFICATION	8.381965360366341E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999641796694466	WITHOUT_CLASSIFICATION	3.582033055337961E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999641796694466	WITHOUT_CLASSIFICATION	3.582033055337961E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999910053886792	WITHOUT_CLASSIFICATION	8.99461132079577E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.999987088685889	WITHOUT_CLASSIFICATION	1.291131411103922E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997131592059921	WITHOUT_CLASSIFICATION	2.868407940078838E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999997704030699	WITHOUT_CLASSIFICATION	2.2959693009589977E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999918063327615	WITHOUT_CLASSIFICATION	8.19366723840596E-6	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999856420922706	WITHOUT_CLASSIFICATION	1.4357907729436564E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999945141632285	WITHOUT_CLASSIFICATION	5.4858367715256235E-6	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999273025949609	WITHOUT_CLASSIFICATION	7.269740503917594E-5	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999941573242108	WITHOUT_CLASSIFICATION	5.842675789127594E-6	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999561813688432	WITHOUT_CLASSIFICATION	4.3818631156727766E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999847131312792	WITHOUT_CLASSIFICATION	1.5286868720720267E-5	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9997239362117436	WITHOUT_CLASSIFICATION	2.7606378825637717E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999845945455621	WITHOUT_CLASSIFICATION	1.5405454437897688E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999431565432179	WITHOUT_CLASSIFICATION	5.684345678200145E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999431565432179	WITHOUT_CLASSIFICATION	5.684345678200145E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999805539240623	WITHOUT_CLASSIFICATION	1.9446075937796066E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999923879069843	WITHOUT_CLASSIFICATION	7.612093015672816E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999721903659176	WITHOUT_CLASSIFICATION	2.7809634082406262E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999664333680292	WITHOUT_CLASSIFICATION	3.356663197077321E-5	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999993232933027	WITHOUT_CLASSIFICATION	6.767066972986005E-6	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999913284962746	WITHOUT_CLASSIFICATION	8.671503725451737E-6	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999842401827485	WITHOUT_CLASSIFICATION	1.5759817251487325E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999962025702577	WITHOUT_CLASSIFICATION	3.7974297422230203E-6	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999306977042952	WITHOUT_CLASSIFICATION	6.930229570486779E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999916972182632	WITHOUT_CLASSIFICATION	8.30278173681279E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999916972182632	WITHOUT_CLASSIFICATION	8.30278173681279E-6	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999881400956672	WITHOUT_CLASSIFICATION	1.1859904332827797E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.999991215089888	WITHOUT_CLASSIFICATION	8.784910111938924E-6	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999990122411906	WITHOUT_CLASSIFICATION	9.877588094081707E-6	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999968415779258	WITHOUT_CLASSIFICATION	3.1584220740989728E-6	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9998814424294957	WITHOUT_CLASSIFICATION	1.1855757050417405E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999641796694466	WITHOUT_CLASSIFICATION	3.582033055337961E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999910053886792	WITHOUT_CLASSIFICATION	8.99461132079577E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999801931375804	WITHOUT_CLASSIFICATION	1.9806862419641224E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997131592059921	WITHOUT_CLASSIFICATION	2.868407940078838E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9997131592059921	WITHOUT_CLASSIFICATION	2.868407940078838E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999969331438274	WITHOUT_CLASSIFICATION	3.066856172549525E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999969331438274	WITHOUT_CLASSIFICATION	3.066856172549525E-6	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999752966666967	WITHOUT_CLASSIFICATION	2.4703333303239003E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999265465054828	WITHOUT_CLASSIFICATION	7.34534945171124E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999265465054828	WITHOUT_CLASSIFICATION	7.34534945171124E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999873851758442	WITHOUT_CLASSIFICATION	1.26148241558822E-5	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999658275469051	WITHOUT_CLASSIFICATION	3.417245309501406E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999844492557787	WITHOUT_CLASSIFICATION	1.555074422141129E-5	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999974405159772	WITHOUT_CLASSIFICATION	2.5594840227922543E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999956337444006	WITHOUT_CLASSIFICATION	4.366255599422159E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999681758767852	WITHOUT_CLASSIFICATION	3.18241232147403E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999681758767852	WITHOUT_CLASSIFICATION	3.18241232147403E-5	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.999941195529116	WITHOUT_CLASSIFICATION	5.8804470883977835E-5	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999854854975977	WITHOUT_CLASSIFICATION	1.4514502402277262E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999598320199834	WITHOUT_CLASSIFICATION	4.016798001659454E-5	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9998311648856273	WITHOUT_CLASSIFICATION	1.6883511437267194E-4	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9998009341743106	WITHOUT_CLASSIFICATION	1.99065825689294E-4	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9998979242822438	WITHOUT_CLASSIFICATION	1.0207571775622406E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999685749705962	WITHOUT_CLASSIFICATION	3.14250294037678E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999370052703422	WITHOUT_CLASSIFICATION	6.299472965767827E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999370052703422	WITHOUT_CLASSIFICATION	6.299472965767827E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9998827438296168	WITHOUT_CLASSIFICATION	1.1725617038314255E-4	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9998827438296168	WITHOUT_CLASSIFICATION	1.1725617038314255E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999382855363491	WITHOUT_CLASSIFICATION	6.17144636508696E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999382855363491	WITHOUT_CLASSIFICATION	6.17144636508696E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999632568553932	WITHOUT_CLASSIFICATION	3.674314460670334E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999632568553932	WITHOUT_CLASSIFICATION	3.674314460670334E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999681758767852	WITHOUT_CLASSIFICATION	3.18241232147403E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999685749705962	WITHOUT_CLASSIFICATION	3.14250294037678E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999370052703422	WITHOUT_CLASSIFICATION	6.299472965767827E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999370052703422	WITHOUT_CLASSIFICATION	6.299472965767827E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9998827438296168	WITHOUT_CLASSIFICATION	1.1725617038314255E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999382855363491	WITHOUT_CLASSIFICATION	6.17144636508696E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999382855363491	WITHOUT_CLASSIFICATION	6.17144636508696E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999632568553932	WITHOUT_CLASSIFICATION	3.674314460670334E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999919777757958	WITHOUT_CLASSIFICATION	8.022224204152465E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998948080930633	WITHOUT_CLASSIFICATION	1.0519190693663971E-4	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9995419840377087	WITHOUT_CLASSIFICATION	4.580159622913848E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999985113600135	WITHOUT_CLASSIFICATION	1.4886399864965935E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9996202412514569	WITHOUT_CLASSIFICATION	3.797587485430737E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9998076225771441	WITHOUT_CLASSIFICATION	1.9237742285584653E-4	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999974195638931	WITHOUT_CLASSIFICATION	2.5804361068596484E-6	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999999071624164	WITHOUT_CLASSIFICATION	9.283758361405046E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999958211841388	WITHOUT_CLASSIFICATION	4.178815861177857E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999725169283031	WITHOUT_CLASSIFICATION	2.7483071696782108E-5	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999988258829483	WITHOUT_CLASSIFICATION	1.1741170516481668E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999973762665283	WITHOUT_CLASSIFICATION	2.6237334718171208E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998858998332939	WITHOUT_CLASSIFICATION	1.1410016670605824E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9998076225771441	WITHOUT_CLASSIFICATION	1.9237742285584653E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9994167451327979	WITHOUT_CLASSIFICATION	5.832548672020904E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9994167451327979	WITHOUT_CLASSIFICATION	5.832548672020904E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999994355896573	WITHOUT_CLASSIFICATION	5.64410342703073E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999590749479794	WITHOUT_CLASSIFICATION	4.09250520206308E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999590749479794	WITHOUT_CLASSIFICATION	4.09250520206308E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999986745095569	WITHOUT_CLASSIFICATION	1.32549044306176E-6	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999629141173451	WITHOUT_CLASSIFICATION	3.7085882654989695E-5	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999940892368672	WITHOUT_CLASSIFICATION	5.910763132820164E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999881040340318	WITHOUT_CLASSIFICATION	1.1895965968232125E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999881040340318	WITHOUT_CLASSIFICATION	1.1895965968232125E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999999932170439	WITHOUT_CLASSIFICATION	6.782956097108954E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999744867228	WITHOUT_CLASSIFICATION	2.5513277191839265E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999744867228	WITHOUT_CLASSIFICATION	2.5513277191839265E-8	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999971616214901	WITHOUT_CLASSIFICATION	2.8383785098859703E-6	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999840913958499	WITHOUT_CLASSIFICATION	1.5908604150184606E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999845195017376	WITHOUT_CLASSIFICATION	1.5480498262404464E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997895557554444	WITHOUT_CLASSIFICATION	2.1044424455567097E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9998235288994877	WITHOUT_CLASSIFICATION	1.7647110051230834E-4	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9997593331201406	WITHOUT_CLASSIFICATION	2.406668798594018E-4	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9997392660139073	WITHOUT_CLASSIFICATION	2.6073398609278444E-4	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999796068612458	WITHOUT_CLASSIFICATION	2.039313875420632E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9971427625434924	WITHOUT_CLASSIFICATION	0.002857237456507472	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9996982976595538	WITHOUT_CLASSIFICATION	3.01702340446128E-4	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997421270635506	WITHOUT_CLASSIFICATION	2.578729364493814E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996926366126974	WITHOUT_CLASSIFICATION	3.07363387302559E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999858582226199	WITHOUT_CLASSIFICATION	1.4141777380089079E-5	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999785455639412	WITHOUT_CLASSIFICATION	2.1454436058826805E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999699056482978	WITHOUT_CLASSIFICATION	3.009435170220513E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996926366126974	WITHOUT_CLASSIFICATION	3.07363387302559E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999998453436322	WITHOUT_CLASSIFICATION	1.5465636780700493E-6	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999785700856255	WITHOUT_CLASSIFICATION	2.142991437440249E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997105099116478	WITHOUT_CLASSIFICATION	2.8949008835220494E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9997772052679006	WITHOUT_CLASSIFICATION	2.227947320993409E-4	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9997542573167201	WITHOUT_CLASSIFICATION	2.4574268327987226E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998527377814217	WITHOUT_CLASSIFICATION	1.4726221857836965E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9997635043755598	WITHOUT_CLASSIFICATION	2.364956244401437E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9998314358907557	WITHOUT_CLASSIFICATION	1.6856410924429615E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998445889724085	WITHOUT_CLASSIFICATION	1.554110275915434E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999919109946896	WITHOUT_CLASSIFICATION	8.089005310421216E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999907730912717	WITHOUT_CLASSIFICATION	9.226908728217538E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999841365881906	WITHOUT_CLASSIFICATION	1.5863411809391286E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9996915034087067	WITHOUT_CLASSIFICATION	3.0849659129327916E-4	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9997392660139073	WITHOUT_CLASSIFICATION	2.6073398609278444E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998445889724085	WITHOUT_CLASSIFICATION	1.554110275915434E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999907730912717	WITHOUT_CLASSIFICATION	9.226908728217538E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9996915034087067	WITHOUT_CLASSIFICATION	3.0849659129327916E-4	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999891221987163	WITHOUT_CLASSIFICATION	1.0877801283727559E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9996948277484331	WITHOUT_CLASSIFICATION	3.0517225156681966E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999932595599726	WITHOUT_CLASSIFICATION	6.740440027374469E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998200735628145	WITHOUT_CLASSIFICATION	1.7992643718546563E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9997939939508369	WITHOUT_CLASSIFICATION	2.060060491630719E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999921642572082	WITHOUT_CLASSIFICATION	7.835742791803241E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999502279932875	WITHOUT_CLASSIFICATION	4.977200671254429E-5	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999999065224206	WITHOUT_CLASSIFICATION	9.34775793892349E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9997671637621998	WITHOUT_CLASSIFICATION	2.3283623780016982E-4	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999992799104666	WITHOUT_CLASSIFICATION	7.200895335593945E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999994197885839	WITHOUT_CLASSIFICATION	5.802114161304617E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999772306496648	WITHOUT_CLASSIFICATION	2.276935033510837E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999994760059812	WITHOUT_CLASSIFICATION	5.239940188973146E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999988375034882	WITHOUT_CLASSIFICATION	1.16249651180376E-6	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9997655032435937	WITHOUT_CLASSIFICATION	2.344967564063601E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998093522362904	WITHOUT_CLASSIFICATION	1.9064776370964075E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9997381167382611	WITHOUT_CLASSIFICATION	2.618832617389492E-4	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999973398424212	WITHOUT_CLASSIFICATION	2.6601575788295002E-6	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9998090796976881	WITHOUT_CLASSIFICATION	1.90920302311838E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998445889724085	WITHOUT_CLASSIFICATION	1.554110275915434E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999949169962198	WITHOUT_CLASSIFICATION	5.083003780263177E-6	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999891076015736	WITHOUT_CLASSIFICATION	1.0892398426472131E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999933956190735	WITHOUT_CLASSIFICATION	6.604380926528601E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999915758822822	WITHOUT_CLASSIFICATION	8.424117717860725E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999818045105654	WITHOUT_CLASSIFICATION	1.8195489434684897E-5	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999792763078889	WITHOUT_CLASSIFICATION	2.0723692111072834E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999994568681787	WITHOUT_CLASSIFICATION	5.431318213424763E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999993674728088	WITHOUT_CLASSIFICATION	6.325271912123048E-7	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998920429221719	WITHOUT_CLASSIFICATION	1.0795707782811685E-4	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.999778911995059	WITHOUT_CLASSIFICATION	2.2108800494091382E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998104889786175	WITHOUT_CLASSIFICATION	1.895110213824797E-4	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997740502532165	WITHOUT_CLASSIFICATION	2.2594974678346452E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999984371965819	WITHOUT_CLASSIFICATION	1.5628034180684102E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999997380918114	WITHOUT_CLASSIFICATION	2.6190818861077386E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999526653795882	WITHOUT_CLASSIFICATION	4.7334620411823916E-5	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999639207079783	WITHOUT_CLASSIFICATION	3.6079292021619645E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.999846060936772	WITHOUT_CLASSIFICATION	1.5393906322796417E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999814609351145	WITHOUT_CLASSIFICATION	1.8539064885464097E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999869466149056	WITHOUT_CLASSIFICATION	1.3053385094257608E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999701595320806	WITHOUT_CLASSIFICATION	2.9840467919380308E-5	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999991334355156	WITHOUT_CLASSIFICATION	8.665644844160045E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999979456129028	WITHOUT_CLASSIFICATION	2.054387097174716E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999801351358263	WITHOUT_CLASSIFICATION	1.9864864173633933E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999777787336813	WITHOUT_CLASSIFICATION	2.222126631866964E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997283423417554	WITHOUT_CLASSIFICATION	2.716576582445241E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997283423417554	WITHOUT_CLASSIFICATION	2.716576582445241E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999579426787524	WITHOUT_CLASSIFICATION	4.205732124754603E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999838200226788	WITHOUT_CLASSIFICATION	1.6179977321109978E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999978980306546	WITHOUT_CLASSIFICATION	2.101969345380048E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999671417961891	WITHOUT_CLASSIFICATION	3.2858203811016556E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998896507895131	WITHOUT_CLASSIFICATION	1.1034921048691466E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999751912910875	WITHOUT_CLASSIFICATION	2.480870891251098E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999989693567709	WITHOUT_CLASSIFICATION	1.0306432291031096E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999988946395101	WITHOUT_CLASSIFICATION	1.1053604899200508E-6	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999720786005236	WITHOUT_CLASSIFICATION	2.792139947641192E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999326355645947	WITHOUT_CLASSIFICATION	6.736443540533638E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999297910800985	WITHOUT_CLASSIFICATION	7.020891990154279E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998761728330618	WITHOUT_CLASSIFICATION	1.2382716693806352E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999948088313688	WITHOUT_CLASSIFICATION	5.191168631121253E-6	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999953702074162	WITHOUT_CLASSIFICATION	4.629792583712378E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999539854784669	WITHOUT_CLASSIFICATION	4.601452153316097E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999861207680965	WITHOUT_CLASSIFICATION	1.3879231903556834E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999998063564839	WITHOUT_CLASSIFICATION	1.936435160969122E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999860178062995	WITHOUT_CLASSIFICATION	1.3982193700463056E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999826323366711	WITHOUT_CLASSIFICATION	1.7367663328956008E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999505628834725	WITHOUT_CLASSIFICATION	4.9437116527449014E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999231481447469	WITHOUT_CLASSIFICATION	7.685185525304818E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999231481447469	WITHOUT_CLASSIFICATION	7.685185525304818E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9998695146724829	WITHOUT_CLASSIFICATION	1.3048532751716517E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9998695146724829	WITHOUT_CLASSIFICATION	1.3048532751716517E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999801351358263	WITHOUT_CLASSIFICATION	1.9864864173633933E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999485973761107	WITHOUT_CLASSIFICATION	5.1402623889296426E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999656259902588	WITHOUT_CLASSIFICATION	3.437400974113654E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999981567425745	WITHOUT_CLASSIFICATION	1.8432574255059323E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99996060435606	WITHOUT_CLASSIFICATION	3.939564394001517E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999656259902588	WITHOUT_CLASSIFICATION	3.437400974113654E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999981567425745	WITHOUT_CLASSIFICATION	1.8432574255059323E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999395051484271	WITHOUT_CLASSIFICATION	6.049485157296345E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999930969530993	WITHOUT_CLASSIFICATION	6.903046900724284E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9998564108456707	WITHOUT_CLASSIFICATION	1.4358915432942336E-4	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9983814930465941	WITHOUT_CLASSIFICATION	0.0016185069534059263	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999973359606925	WITHOUT_CLASSIFICATION	2.664039307610292E-6	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9994270161129968	WITHOUT_CLASSIFICATION	5.729838870031194E-4	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999909983169907	WITHOUT_CLASSIFICATION	9.001683009387767E-6	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999798848235799	WITHOUT_CLASSIFICATION	2.011517642007463E-5	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998831157613336	WITHOUT_CLASSIFICATION	1.1688423866632827E-4	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999947450787882	WITHOUT_CLASSIFICATION	5.254921211892442E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999390013162939	WITHOUT_CLASSIFICATION	6.099868370616218E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999932710416434	WITHOUT_CLASSIFICATION	6.728958356566143E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999939457193852	WITHOUT_CLASSIFICATION	6.054280614929238E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999737870822124	WITHOUT_CLASSIFICATION	2.621291778759207E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99996060435606	WITHOUT_CLASSIFICATION	3.939564394001517E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999594749466176	WITHOUT_CLASSIFICATION	4.052505338237936E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999912507791291	WITHOUT_CLASSIFICATION	8.74922087084964E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999912507791291	WITHOUT_CLASSIFICATION	8.74922087084964E-6	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999986886101703	WITHOUT_CLASSIFICATION	1.311389829745061E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999395051484271	WITHOUT_CLASSIFICATION	6.049485157296345E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999944528926417	WITHOUT_CLASSIFICATION	5.5471073582973946E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999911275512261	WITHOUT_CLASSIFICATION	8.872448773845123E-6	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9987385599871679	WITHOUT_CLASSIFICATION	0.0012614400128321223	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999693901768414	WITHOUT_CLASSIFICATION	3.060982315859956E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998939695236527	WITHOUT_CLASSIFICATION	1.0603047634721199E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999395051484271	WITHOUT_CLASSIFICATION	6.049485157296345E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999693901768414	WITHOUT_CLASSIFICATION	3.060982315859956E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998939695236527	WITHOUT_CLASSIFICATION	1.0603047634721199E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998161398021046	WITHOUT_CLASSIFICATION	1.838601978954036E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999532574753303	WITHOUT_CLASSIFICATION	4.674252466978716E-5	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999959458990706	WITHOUT_CLASSIFICATION	4.054100929369307E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999395051484271	WITHOUT_CLASSIFICATION	6.049485157296345E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999395051484271	WITHOUT_CLASSIFICATION	6.049485157296345E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999592583049789	WITHOUT_CLASSIFICATION	4.074169502107416E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999906181167533	WITHOUT_CLASSIFICATION	9.381883246799972E-6	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999346458408199	WITHOUT_CLASSIFICATION	6.535415918005042E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999952691468031	WITHOUT_CLASSIFICATION	4.730853196841342E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999908202438984	WITHOUT_CLASSIFICATION	9.179756101629166E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999672088055758	WITHOUT_CLASSIFICATION	3.279119442424796E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999985198690878	WITHOUT_CLASSIFICATION	1.4801309121482154E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999933629018902	WITHOUT_CLASSIFICATION	6.637098109865915E-6	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999960443313105	WITHOUT_CLASSIFICATION	3.955668689420057E-6	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999239962459885	WITHOUT_CLASSIFICATION	7.600375401152409E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999984561760014	WITHOUT_CLASSIFICATION	1.5438239985961266E-5	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999553945829802	WITHOUT_CLASSIFICATION	4.460541701983793E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999985327919162	WITHOUT_CLASSIFICATION	1.4672080837659864E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999987938867787	WITHOUT_CLASSIFICATION	1.2061132213489075E-6	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999162764514491	WITHOUT_CLASSIFICATION	8.37235485510058E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999982746046407	WITHOUT_CLASSIFICATION	1.7253953592611642E-6	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999864546143447	WITHOUT_CLASSIFICATION	1.354538565521531E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999827764251353	WITHOUT_CLASSIFICATION	1.722357486463782E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998341062282531	WITHOUT_CLASSIFICATION	1.658937717470021E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999878080877257	WITHOUT_CLASSIFICATION	1.219191227436506E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998543232487491	WITHOUT_CLASSIFICATION	1.4567675125090067E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999600007963498	WITHOUT_CLASSIFICATION	3.9999203650060636E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999600007963498	WITHOUT_CLASSIFICATION	3.9999203650060636E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999864546143447	WITHOUT_CLASSIFICATION	1.354538565521531E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999449663629609	WITHOUT_CLASSIFICATION	5.503363703911285E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.999999376508953	WITHOUT_CLASSIFICATION	6.234910470727209E-7	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999086463375071	WITHOUT_CLASSIFICATION	9.135366249294382E-5	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999789810799896	WITHOUT_CLASSIFICATION	2.101892001034101E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989859045013176	WITHOUT_CLASSIFICATION	0.001014095498682317	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999866656369557	WITHOUT_CLASSIFICATION	1.3334363044187213E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999976704541407	WITHOUT_CLASSIFICATION	2.3295458593083565E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999757600282491	WITHOUT_CLASSIFICATION	2.4239971750910367E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994231945556	WITHOUT_CLASSIFICATION	5.768054444916154E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999092911539258	WITHOUT_CLASSIFICATION	9.070884607425081E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999025292404814	WITHOUT_CLASSIFICATION	9.747075951858993E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999885929679839	WITHOUT_CLASSIFICATION	1.1407032016003063E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9996680843868722	WITHOUT_CLASSIFICATION	3.3191561312784776E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999953383667374	WITHOUT_CLASSIFICATION	4.661633262610997E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953925855062	WITHOUT_CLASSIFICATION	4.607414493785348E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999796620344047	WITHOUT_CLASSIFICATION	2.0337965595305253E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999989566352901	WITHOUT_CLASSIFICATION	1.0433647098519528E-6	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999334597255115	WITHOUT_CLASSIFICATION	6.654027448849046E-5	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998451413958	WITHOUT_CLASSIFICATION	1.548586042001164E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999907235403078	WITHOUT_CLASSIFICATION	9.276459692180545E-6	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999996685256439	WITHOUT_CLASSIFICATION	3.3147435609217445E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999981468977054	WITHOUT_CLASSIFICATION	1.853102294509935E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922627204048	WITHOUT_CLASSIFICATION	7.737279595258269E-6	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965806170919	WITHOUT_CLASSIFICATION	3.419382908105474E-5	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999970610872816	WITHOUT_CLASSIFICATION	2.938912718395981E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997110767347251	WITHOUT_CLASSIFICATION	2.8892326527488616E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999072106471552	WITHOUT_CLASSIFICATION	9.278935284480533E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438310162918	WITHOUT_CLASSIFICATION	5.616898370820351E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999355942838956	WITHOUT_CLASSIFICATION	6.440571610441304E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938997636171	WITHOUT_CLASSIFICATION	6.100236382982222E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.999995874538755	WITHOUT_CLASSIFICATION	4.125461244990994E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999577718985556	WITHOUT_CLASSIFICATION	4.222810144426172E-5	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999793381939214	WITHOUT_CLASSIFICATION	2.0661806078678304E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888687534617	WITHOUT_CLASSIFICATION	1.1131246538304822E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830632240444	WITHOUT_CLASSIFICATION	1.693677595556708E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999705574796638	WITHOUT_CLASSIFICATION	2.9442520336202186E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779058432419	WITHOUT_CLASSIFICATION	2.2094156758144136E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932155973632	WITHOUT_CLASSIFICATION	6.784402636836384E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999488839627172	WITHOUT_CLASSIFICATION	5.111603728278166E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999464867517619	WITHOUT_CLASSIFICATION	5.351324823814723E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998654500329618	WITHOUT_CLASSIFICATION	1.3454996703811986E-4	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998754325932214	WITHOUT_CLASSIFICATION	1.2456740677862276E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999981115350513	WITHOUT_CLASSIFICATION	1.8884649487024818E-5	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999252909115174	WITHOUT_CLASSIFICATION	7.470908848259367E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998824356018	WITHOUT_CLASSIFICATION	1.1756439826844722E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999970373450416	WITHOUT_CLASSIFICATION	2.9626549584088458E-5	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9998453490836463	WITHOUT_CLASSIFICATION	1.5465091635372957E-4	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999188374308605	WITHOUT_CLASSIFICATION	8.116256913949036E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999971491243394	WITHOUT_CLASSIFICATION	2.8508756606062665E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997313689519441	WITHOUT_CLASSIFICATION	2.6863104805579846E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997316822807409	WITHOUT_CLASSIFICATION	2.683177192590164E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9996798035282736	WITHOUT_CLASSIFICATION	3.2019647172643685E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9993656465272202	WITHOUT_CLASSIFICATION	6.343534727798664E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9998185751103296	WITHOUT_CLASSIFICATION	1.8142488967044188E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999985773220421	WITHOUT_CLASSIFICATION	1.4226779579000559E-6	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999792333613067	WITHOUT_CLASSIFICATION	2.076663869327932E-5	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999713145024699	WITHOUT_CLASSIFICATION	2.8685497530066676E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9997327600939675	WITHOUT_CLASSIFICATION	2.6723990603257997E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999905170780954	WITHOUT_CLASSIFICATION	9.482921904537912E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999019922652314	WITHOUT_CLASSIFICATION	9.800773476872993E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999519353367463	WITHOUT_CLASSIFICATION	4.806466325370676E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759894499749	WITHOUT_CLASSIFICATION	2.4010550025164783E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797891398331	WITHOUT_CLASSIFICATION	2.0210860166896726E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999705213433872	WITHOUT_CLASSIFICATION	2.947865661286594E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999966287621614	WITHOUT_CLASSIFICATION	3.371237838488455E-6	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999739743119003	WITHOUT_CLASSIFICATION	2.6025688099664273E-5	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999959312865299	WITHOUT_CLASSIFICATION	4.068713470187948E-6	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960757348205	WITHOUT_CLASSIFICATION	3.924265179581004E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999957017205315	WITHOUT_CLASSIFICATION	4.298279468406444E-6	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999979907213035	WITHOUT_CLASSIFICATION	2.0092786966129636E-6	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999948689327588	WITHOUT_CLASSIFICATION	5.131067241141711E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999917637010646	WITHOUT_CLASSIFICATION	8.236298935428176E-6	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999984375677605	WITHOUT_CLASSIFICATION	1.5624322395969575E-6	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999951654386446	WITHOUT_CLASSIFICATION	4.834561355360043E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997746670189716	WITHOUT_CLASSIFICATION	2.2533298102844198E-4	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999987647097554	WITHOUT_CLASSIFICATION	1.2352902446086288E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999970373450416	WITHOUT_CLASSIFICATION	2.9626549584088458E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999865800891015	WITHOUT_CLASSIFICATION	1.341991089846426E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999975202604467	WITHOUT_CLASSIFICATION	2.479739553300073E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999886341810253	WITHOUT_CLASSIFICATION	1.1365818974631339E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999236638371857	WITHOUT_CLASSIFICATION	7.63361628143253E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999846484140841	WITHOUT_CLASSIFICATION	1.5351585915954158E-5	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999369232889632	WITHOUT_CLASSIFICATION	6.307671103676963E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999562334051615	WITHOUT_CLASSIFICATION	4.376659483841944E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999741138997481	WITHOUT_CLASSIFICATION	2.5886100251926334E-5	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999912436327245	WITHOUT_CLASSIFICATION	8.75636727551021E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999795208101291	WITHOUT_CLASSIFICATION	2.0479189870937967E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999777368688991	WITHOUT_CLASSIFICATION	2.226313110083537E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999843762817152	WITHOUT_CLASSIFICATION	1.5623718284755513E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999989676493924	WITHOUT_CLASSIFICATION	1.0323506076061185E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999923745050873	WITHOUT_CLASSIFICATION	7.625494912730931E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996512279680924	WITHOUT_CLASSIFICATION	3.4877203190761415E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999973206918917	WITHOUT_CLASSIFICATION	2.679308108302866E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999273435515059	WITHOUT_CLASSIFICATION	7.265644849408084E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999945621667696	WITHOUT_CLASSIFICATION	5.437833230407058E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999857430270778	WITHOUT_CLASSIFICATION	1.425697292225151E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9996628072890118	WITHOUT_CLASSIFICATION	3.3719271098816997E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999849788545048	WITHOUT_CLASSIFICATION	1.50211454952656E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999920090950829	WITHOUT_CLASSIFICATION	7.990904917023777E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996017375133484	WITHOUT_CLASSIFICATION	3.982624866516173E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999117720135824	WITHOUT_CLASSIFICATION	8.822798641766358E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999993653763175	WITHOUT_CLASSIFICATION	6.3462368249690185E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9997921284933109	WITHOUT_CLASSIFICATION	2.0787150668913508E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9860485519725374	WITHOUT_CLASSIFICATION	0.013951448027462598	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999782178766857	WITHOUT_CLASSIFICATION	2.178212331430429E-5	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999608570036753	WITHOUT_CLASSIFICATION	3.914299632474021E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999820969401472	WITHOUT_CLASSIFICATION	1.790305985284351E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999970373450416	WITHOUT_CLASSIFICATION	2.9626549584088458E-5	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999997756648776	WITHOUT_CLASSIFICATION	2.2433512249990354E-7	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999997381707425	WITHOUT_CLASSIFICATION	2.6182925754994844E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999954007776285	WITHOUT_CLASSIFICATION	4.599222371518648E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999970373450416	WITHOUT_CLASSIFICATION	2.9626549584088458E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999879713483092	WITHOUT_CLASSIFICATION	1.2028651690751933E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999849788545048	WITHOUT_CLASSIFICATION	1.50211454952656E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999972160912379	WITHOUT_CLASSIFICATION	2.783908762064195E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999747597784316	WITHOUT_CLASSIFICATION	2.5240221568362828E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999940301438918	WITHOUT_CLASSIFICATION	5.96985610823051E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999795208101291	WITHOUT_CLASSIFICATION	2.0479189870937967E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999777368688991	WITHOUT_CLASSIFICATION	2.226313110083537E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999843762817152	WITHOUT_CLASSIFICATION	1.5623718284755513E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999987156609362	WITHOUT_CLASSIFICATION	1.2843390637911279E-5	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9998722332860142	WITHOUT_CLASSIFICATION	1.2776671398585633E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9996512090819304	WITHOUT_CLASSIFICATION	3.4879091806954267E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999949305444397	WITHOUT_CLASSIFICATION	5.069455560261855E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999984818045465	WITHOUT_CLASSIFICATION	1.5181954534923328E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999970373450416	WITHOUT_CLASSIFICATION	2.9626549584088458E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999989676493924	WITHOUT_CLASSIFICATION	1.0323506076061185E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999923745050873	WITHOUT_CLASSIFICATION	7.625494912730931E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235374991698	WITHOUT_CLASSIFICATION	7.646250083006477E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935270614215	WITHOUT_CLASSIFICATION	6.472938578492102E-6	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999835978852928	WITHOUT_CLASSIFICATION	1.640211470719543E-5	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999839523505255	WITHOUT_CLASSIFICATION	1.6047649474453673E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999857262842564	WITHOUT_CLASSIFICATION	1.427371574359038E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999951516407413	WITHOUT_CLASSIFICATION	4.848359258769121E-6	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999464867517619	WITHOUT_CLASSIFICATION	5.351324823814723E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999919025085848	WITHOUT_CLASSIFICATION	8.097491415158817E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999686558317217	WITHOUT_CLASSIFICATION	3.134416827821666E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999932379173856	WITHOUT_CLASSIFICATION	6.762082614375743E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999608374262833	WITHOUT_CLASSIFICATION	3.9162573716697654E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999717536542353	WITHOUT_CLASSIFICATION	2.824634576468662E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999072106471552	WITHOUT_CLASSIFICATION	9.278935284480533E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438310162918	WITHOUT_CLASSIFICATION	5.616898370820351E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888687534617	WITHOUT_CLASSIFICATION	1.1131246538304822E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999717536542353	WITHOUT_CLASSIFICATION	2.824634576468662E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998216190071058	WITHOUT_CLASSIFICATION	1.7838099289419892E-4	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999952727143679	WITHOUT_CLASSIFICATION	4.727285632028525E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998987043936493	WITHOUT_CLASSIFICATION	1.0129560635068128E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999704482502555	WITHOUT_CLASSIFICATION	2.955174974452173E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999949760463114	WITHOUT_CLASSIFICATION	5.02395368862966E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9996798868594741	WITHOUT_CLASSIFICATION	3.201131405258735E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830632240444	WITHOUT_CLASSIFICATION	1.693677595556708E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932155973632	WITHOUT_CLASSIFICATION	6.784402636836384E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999917637010646	WITHOUT_CLASSIFICATION	8.236298935428176E-6	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999945265454406	WITHOUT_CLASSIFICATION	5.473454559332318E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999994745452632	WITHOUT_CLASSIFICATION	5.254547368929143E-7	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999881655130919	WITHOUT_CLASSIFICATION	1.1834486908207938E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999765394043576	WITHOUT_CLASSIFICATION	2.3460595642362716E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999945808756154	WITHOUT_CLASSIFICATION	5.419124384561182E-6	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999931159325693	WITHOUT_CLASSIFICATION	6.884067430675258E-6	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999629316075431	WITHOUT_CLASSIFICATION	3.706839245681719E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994231945556	WITHOUT_CLASSIFICATION	5.768054444916154E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9997780760084702	WITHOUT_CLASSIFICATION	2.2192399152981036E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999998508785326	WITHOUT_CLASSIFICATION	1.4912146739298573E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999926368702693	WITHOUT_CLASSIFICATION	7.363129730688058E-6	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999941778866441	WITHOUT_CLASSIFICATION	5.822113355818174E-6	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999947329318404	WITHOUT_CLASSIFICATION	5.267068159638315E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998958740456325	WITHOUT_CLASSIFICATION	1.0412595436738923E-4	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998421530154715	WITHOUT_CLASSIFICATION	1.5784698452859147E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990541515828016	WITHOUT_CLASSIFICATION	9.458484171984295E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999931758624149	WITHOUT_CLASSIFICATION	6.824137585166702E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999762287801881	WITHOUT_CLASSIFICATION	2.3771219811957275E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999935547316477	WITHOUT_CLASSIFICATION	6.445268352295496E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999751737354032	WITHOUT_CLASSIFICATION	2.4826264596805044E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999994530851339	WITHOUT_CLASSIFICATION	5.46914866096837E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999943925025047	WITHOUT_CLASSIFICATION	5.607497495348397E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999942191040406	WITHOUT_CLASSIFICATION	5.780895959288757E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999784206195425	WITHOUT_CLASSIFICATION	2.157938045759418E-5	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998034558191446	WITHOUT_CLASSIFICATION	1.965441808553589E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999972507699678	WITHOUT_CLASSIFICATION	2.749230032128891E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999903155150984	WITHOUT_CLASSIFICATION	9.684484901554742E-6	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999992743435847	WITHOUT_CLASSIFICATION	7.256564153088409E-6	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999115799050726	WITHOUT_CLASSIFICATION	8.84200949273543E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999946077924853	WITHOUT_CLASSIFICATION	5.392207514721316E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999848214407184	WITHOUT_CLASSIFICATION	1.5178559281641264E-5	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999840767975152	WITHOUT_CLASSIFICATION	1.5923202484770548E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999907229683492	WITHOUT_CLASSIFICATION	9.277031650752966E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999539841767603	WITHOUT_CLASSIFICATION	4.601582323956381E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999577016061144	WITHOUT_CLASSIFICATION	4.2298393885598034E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999855156132992	WITHOUT_CLASSIFICATION	1.4484386700843363E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999891923699809	WITHOUT_CLASSIFICATION	1.0807630019072634E-5	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999630995747285	WITHOUT_CLASSIFICATION	3.690042527144045E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999985960451951	WITHOUT_CLASSIFICATION	1.4039548049039377E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.999978527745274	WITHOUT_CLASSIFICATION	2.1472254726107317E-5	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999675175336676	WITHOUT_CLASSIFICATION	3.248246633226711E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999949701517577	WITHOUT_CLASSIFICATION	5.02984824230175E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999948127606515	WITHOUT_CLASSIFICATION	5.187239348470263E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999617571601381	WITHOUT_CLASSIFICATION	3.824283986186731E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999988788878394	WITHOUT_CLASSIFICATION	1.1211121605035363E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999943382096403	WITHOUT_CLASSIFICATION	5.661790359748584E-6	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999930308880146	WITHOUT_CLASSIFICATION	6.969111985381129E-6	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999948394259536	WITHOUT_CLASSIFICATION	5.160574046458895E-6	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999085983830815	WITHOUT_CLASSIFICATION	9.140161691849117E-5	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997058597974519	WITHOUT_CLASSIFICATION	2.941402025481283E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999577960813993	WITHOUT_CLASSIFICATION	4.220391860065374E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999626117860858	WITHOUT_CLASSIFICATION	3.7388213914289435E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999717648265902	WITHOUT_CLASSIFICATION	2.8235173409802448E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999817006629454	WITHOUT_CLASSIFICATION	1.8299337054563437E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999892009487332	WITHOUT_CLASSIFICATION	1.0799051266889098E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999960358744973	WITHOUT_CLASSIFICATION	3.9641255027752844E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999842581887618	WITHOUT_CLASSIFICATION	1.574181123825506E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999760977991786	WITHOUT_CLASSIFICATION	2.3902200821324928E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999904347859587	WITHOUT_CLASSIFICATION	9.565214041315302E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999912032445814	WITHOUT_CLASSIFICATION	8.79675541877719E-6	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999955435443473	WITHOUT_CLASSIFICATION	4.456455652665871E-6	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999988613257882	WITHOUT_CLASSIFICATION	1.1386742118246422E-6	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999992907994276	WITHOUT_CLASSIFICATION	7.092005724583479E-7	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999845609010772	WITHOUT_CLASSIFICATION	1.5439098922785947E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999656401747289	WITHOUT_CLASSIFICATION	3.435982527110679E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999922900892968	WITHOUT_CLASSIFICATION	7.709910703284825E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999819436970182	WITHOUT_CLASSIFICATION	1.8056302981806197E-5	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999911771182167	WITHOUT_CLASSIFICATION	8.822881783224395E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999859110559653	WITHOUT_CLASSIFICATION	1.4088944034631593E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999912399326905	WITHOUT_CLASSIFICATION	8.760067309577451E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999755320200832	WITHOUT_CLASSIFICATION	2.446797991683572E-5	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999951867297844	WITHOUT_CLASSIFICATION	4.8132702155948545E-6	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999836363941497	WITHOUT_CLASSIFICATION	1.6363605850365718E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999905171955804	WITHOUT_CLASSIFICATION	9.482804419634646E-6	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9990400254292289	WITHOUT_CLASSIFICATION	9.599745707711289E-4	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999947602907688	WITHOUT_CLASSIFICATION	5.239709231111598E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998085865482106	WITHOUT_CLASSIFICATION	1.9141345178939242E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998460977212379	WITHOUT_CLASSIFICATION	1.5390227876211978E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999996911411701	WITHOUT_CLASSIFICATION	3.088588298943811E-6	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999956335255582	WITHOUT_CLASSIFICATION	4.366474441718734E-6	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998840165273378	WITHOUT_CLASSIFICATION	1.159834726621882E-4	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999954802527564	WITHOUT_CLASSIFICATION	4.519747243582274E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998830622101692	WITHOUT_CLASSIFICATION	1.169377898307608E-4	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9998543351281952	WITHOUT_CLASSIFICATION	1.456648718048917E-4	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999975003021389	WITHOUT_CLASSIFICATION	2.4996978610520495E-6	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9998992715654794	WITHOUT_CLASSIFICATION	1.0072843452052366E-4	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999889617863685	WITHOUT_CLASSIFICATION	1.1038213631566933E-5	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999992887090453	WITHOUT_CLASSIFICATION	7.112909547066131E-6	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999353399267725	WITHOUT_CLASSIFICATION	6.466007322751255E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999871642957421	WITHOUT_CLASSIFICATION	1.2835704257891574E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999912375963373	WITHOUT_CLASSIFICATION	8.76240366272748E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9996322466719969	WITHOUT_CLASSIFICATION	3.677533280031005E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9995738608522486	WITHOUT_CLASSIFICATION	4.261391477513601E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998305993259665	WITHOUT_CLASSIFICATION	1.6940067403344814E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999126285646598	WITHOUT_CLASSIFICATION	8.737143534022329E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.999960276865039	WITHOUT_CLASSIFICATION	3.9723134960967876E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9996655206535885	WITHOUT_CLASSIFICATION	3.344793464115213E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999986882394599	WITHOUT_CLASSIFICATION	1.3117605401375472E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999760726000438	WITHOUT_CLASSIFICATION	2.3927399956208824E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.997361421825281	WITHOUT_CLASSIFICATION	0.002638578174719138	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999390785582338	WITHOUT_CLASSIFICATION	6.0921441766065544E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999760726000438	WITHOUT_CLASSIFICATION	2.3927399956208824E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999512014164594	WITHOUT_CLASSIFICATION	4.879858354062748E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9998363077190315	WITHOUT_CLASSIFICATION	1.636922809685046E-4	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.999925714752528	WITHOUT_CLASSIFICATION	7.428524747200861E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999943634584846	WITHOUT_CLASSIFICATION	5.6365415154011E-5	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999908275290709	WITHOUT_CLASSIFICATION	9.172470929170464E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9998026161814941	WITHOUT_CLASSIFICATION	1.9738381850579857E-4	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9992698214093068	WITHOUT_CLASSIFICATION	7.301785906932404E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999828932171763	WITHOUT_CLASSIFICATION	1.7106782823747565E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999956343335104	WITHOUT_CLASSIFICATION	4.365666489607631E-6	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9995978521176947	WITHOUT_CLASSIFICATION	4.021478823053454E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999935351109762	WITHOUT_CLASSIFICATION	6.464889023744332E-6	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999993601037433	WITHOUT_CLASSIFICATION	6.3989625670330244E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999996151589721	WITHOUT_CLASSIFICATION	3.8484102793384474E-7	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999957825760685	WITHOUT_CLASSIFICATION	4.217423931614615E-6	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999934015856762	WITHOUT_CLASSIFICATION	6.5984143238924405E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999990182220285	WITHOUT_CLASSIFICATION	9.817779715014159E-6	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999434096468844	WITHOUT_CLASSIFICATION	5.6590353115556766E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999434096468844	WITHOUT_CLASSIFICATION	5.6590353115556766E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999867646103079	WITHOUT_CLASSIFICATION	1.3235389692236765E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9997778509394938	WITHOUT_CLASSIFICATION	2.2214906050615073E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9997936211155416	WITHOUT_CLASSIFICATION	2.0637888445840607E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.999895974026485	WITHOUT_CLASSIFICATION	1.0402597351501698E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996813266398238	WITHOUT_CLASSIFICATION	3.1867336017616125E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999818458208541	WITHOUT_CLASSIFICATION	1.815417914584071E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999593047873548	WITHOUT_CLASSIFICATION	4.069521264522809E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999985993325116	WITHOUT_CLASSIFICATION	1.4006674884700044E-6	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.999978253213026	WITHOUT_CLASSIFICATION	2.1746786973983052E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999960730291019	WITHOUT_CLASSIFICATION	3.9269708980978905E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999978139567575	WITHOUT_CLASSIFICATION	2.186043242496497E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999537819946268	WITHOUT_CLASSIFICATION	4.621800537317916E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998507471710824	WITHOUT_CLASSIFICATION	1.4925282891757255E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999859760282102	WITHOUT_CLASSIFICATION	1.402397178977602E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9981156061885168	WITHOUT_CLASSIFICATION	0.0018843938114831652	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998958740456325	WITHOUT_CLASSIFICATION	1.0412595436738923E-4	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998113651633639	WITHOUT_CLASSIFICATION	1.8863483663616329E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998775163630679	WITHOUT_CLASSIFICATION	1.2248363693221755E-4	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.99967178389803	WITHOUT_CLASSIFICATION	3.2821610196998697E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.999897877092656	WITHOUT_CLASSIFICATION	1.0212290734397481E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999998232127117	WITHOUT_CLASSIFICATION	1.7678728829933326E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.999965245453161	WITHOUT_CLASSIFICATION	3.475454683893745E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999951355387006	WITHOUT_CLASSIFICATION	4.864461299381332E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999993378988926	WITHOUT_CLASSIFICATION	6.621011074039855E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999997226590075	WITHOUT_CLASSIFICATION	2.773409925037989E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999979915131361	WITHOUT_CLASSIFICATION	2.0084868639540147E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999814132540918	WITHOUT_CLASSIFICATION	1.8586745908168613E-5	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9990488318127966	WITHOUT_CLASSIFICATION	9.511681872034559E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999813951902378	WITHOUT_CLASSIFICATION	1.860480976225016E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9998950934569556	WITHOUT_CLASSIFICATION	1.049065430444358E-4	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999924771466627	WITHOUT_CLASSIFICATION	7.522853337307949E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998619680186377	WITHOUT_CLASSIFICATION	1.3803198136229535E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9997195533272292	WITHOUT_CLASSIFICATION	2.8044667277089797E-4	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.99998997703223	WITHOUT_CLASSIFICATION	1.0022967769953732E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999778198927199	WITHOUT_CLASSIFICATION	2.218010728000122E-5	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999932191626877	WITHOUT_CLASSIFICATION	6.780837312344831E-6	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999334622903194	WITHOUT_CLASSIFICATION	6.653770968053538E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999879302908158	WITHOUT_CLASSIFICATION	1.2069709184143926E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999879517372282	WITHOUT_CLASSIFICATION	1.2048262771790315E-5	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999894771775281	WITHOUT_CLASSIFICATION	1.0522822471856531E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999534383436839	WITHOUT_CLASSIFICATION	4.6561656316031934E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999783647893653	WITHOUT_CLASSIFICATION	2.1635210634766687E-5	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999859839207896	WITHOUT_CLASSIFICATION	1.4016079210325337E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999325900519321	WITHOUT_CLASSIFICATION	6.740994806792762E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999465562023614	WITHOUT_CLASSIFICATION	5.3443797638642435E-5	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999945440974002	WITHOUT_CLASSIFICATION	5.455902599807513E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815258228539	WITHOUT_CLASSIFICATION	1.8474177146025912E-5	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99994630899346	WITHOUT_CLASSIFICATION	5.369100653986012E-5	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999582479295271	WITHOUT_CLASSIFICATION	4.1752070472867365E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999241835913351	WITHOUT_CLASSIFICATION	7.581640866497703E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999408947502966	WITHOUT_CLASSIFICATION	5.910524970351335E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999996482463684	WITHOUT_CLASSIFICATION	3.5175363159422724E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999994335281769	WITHOUT_CLASSIFICATION	5.664718231353035E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999936873709707	WITHOUT_CLASSIFICATION	6.312629029308373E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999882925383246	WITHOUT_CLASSIFICATION	1.1707461675404828E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.999936873709707	WITHOUT_CLASSIFICATION	6.312629029308373E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999862746560588	WITHOUT_CLASSIFICATION	1.3725343941117696E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999980055912461	WITHOUT_CLASSIFICATION	1.994408753896958E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999780824997894	WITHOUT_CLASSIFICATION	2.1917500210621388E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999963533373962	WITHOUT_CLASSIFICATION	3.646662603689578E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999498733874035	WITHOUT_CLASSIFICATION	5.0126612596514776E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999388435513975	WITHOUT_CLASSIFICATION	6.11564486025257E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999858796545095	WITHOUT_CLASSIFICATION	1.4120345490578904E-5	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999872214703711	WITHOUT_CLASSIFICATION	1.2778529628847157E-5	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999505739564626	WITHOUT_CLASSIFICATION	4.942604353741589E-5	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998379816379007	WITHOUT_CLASSIFICATION	1.6201836209918662E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999939065882671	WITHOUT_CLASSIFICATION	6.09341173294073E-6	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9997618345153382	WITHOUT_CLASSIFICATION	2.3816548466188173E-4	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999768775062017	WITHOUT_CLASSIFICATION	2.312249379834366E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999997323059506	WITHOUT_CLASSIFICATION	2.6769404939058633E-7	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999994129898572	WITHOUT_CLASSIFICATION	5.870101428610303E-7	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999509766660027	WITHOUT_CLASSIFICATION	4.902333399730229E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998548547736427	WITHOUT_CLASSIFICATION	1.4514522635738822E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998548547736427	WITHOUT_CLASSIFICATION	1.4514522635738822E-4	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999984244827126	WITHOUT_CLASSIFICATION	1.5755172874043914E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999790800323176	WITHOUT_CLASSIFICATION	2.0919967682393574E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999966934505886	WITHOUT_CLASSIFICATION	3.3065494113707063E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999445301294738	WITHOUT_CLASSIFICATION	5.5469870526133546E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999983606933809	WITHOUT_CLASSIFICATION	1.639306619170159E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999685572717125	WITHOUT_CLASSIFICATION	3.144272828748199E-5	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9980417191397224	WITHOUT_CLASSIFICATION	0.0019582808602775755	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999681144547663	WITHOUT_CLASSIFICATION	3.18855452336443E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999658536437969	WITHOUT_CLASSIFICATION	3.414635620318238E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999973552830264	WITHOUT_CLASSIFICATION	2.644716973730853E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999937423788422	WITHOUT_CLASSIFICATION	6.257621157818544E-6	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999930279941579	WITHOUT_CLASSIFICATION	6.972005842215777E-6	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999908793045766	WITHOUT_CLASSIFICATION	9.120695423407916E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999955855587346	WITHOUT_CLASSIFICATION	4.4144412654021455E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997997125649773	WITHOUT_CLASSIFICATION	2.0028743502275442E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999877962493303	WITHOUT_CLASSIFICATION	1.220375066962556E-5	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999989065560662	WITHOUT_CLASSIFICATION	1.0934439337980088E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997445658488956	WITHOUT_CLASSIFICATION	2.5543415110438526E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9998638381816883	WITHOUT_CLASSIFICATION	1.3616181831168646E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999920940318744	WITHOUT_CLASSIFICATION	7.905968125656539E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999859272087521	WITHOUT_CLASSIFICATION	1.4072791247920019E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999706821032412	WITHOUT_CLASSIFICATION	2.9317896758660267E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999924787768073	WITHOUT_CLASSIFICATION	7.521223192623884E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9989766146388991	WITHOUT_CLASSIFICATION	0.001023385361100922	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999847468667941	WITHOUT_CLASSIFICATION	1.5253133205926427E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999781815599494	WITHOUT_CLASSIFICATION	2.1818440050459847E-5	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999903534609721	WITHOUT_CLASSIFICATION	9.646539027890303E-6	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999379037766521	WITHOUT_CLASSIFICATION	6.209622334779978E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9995981629816566	WITHOUT_CLASSIFICATION	4.018370183434196E-4	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999932755040861	WITHOUT_CLASSIFICATION	6.724495913787727E-6	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999769179825595	WITHOUT_CLASSIFICATION	2.3082017440504675E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999925320146746	WITHOUT_CLASSIFICATION	7.467985325445963E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999763997576085	WITHOUT_CLASSIFICATION	2.3600242391389405E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999976298876846	WITHOUT_CLASSIFICATION	2.3701123154615943E-6	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999905891607562	WITHOUT_CLASSIFICATION	9.4108392438809E-6	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999992039513632	WITHOUT_CLASSIFICATION	7.960486367863112E-7	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999963790047057	WITHOUT_CLASSIFICATION	3.620995294285635E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999670724608537	WITHOUT_CLASSIFICATION	3.292753914632133E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999806833516037	WITHOUT_CLASSIFICATION	1.931664839628267E-5	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999958280841091	WITHOUT_CLASSIFICATION	4.171915890899991E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999875475111584	WITHOUT_CLASSIFICATION	1.2452488841732032E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999491784522306	WITHOUT_CLASSIFICATION	5.082154776933332E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9997525924670114	WITHOUT_CLASSIFICATION	2.47407532988591E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999527913157045	WITHOUT_CLASSIFICATION	4.720868429559237E-5	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999987432339481	WITHOUT_CLASSIFICATION	1.2567660519022684E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999980448317329	WITHOUT_CLASSIFICATION	1.9551682670790368E-6	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.99987858518202	WITHOUT_CLASSIFICATION	1.2141481798008926E-4	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999972381343143	WITHOUT_CLASSIFICATION	2.7618656856516603E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999661001905367	WITHOUT_CLASSIFICATION	3.3899809463255175E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9997786039456856	WITHOUT_CLASSIFICATION	2.2139605431435844E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999419861306789	WITHOUT_CLASSIFICATION	5.8013869321049826E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9988485827981021	WITHOUT_CLASSIFICATION	0.0011514172018979641	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999992680066921	WITHOUT_CLASSIFICATION	7.319933078500885E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998877201763222	WITHOUT_CLASSIFICATION	1.1227982367773638E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999487757565109	WITHOUT_CLASSIFICATION	5.1224243489104275E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999879713483092	WITHOUT_CLASSIFICATION	1.2028651690751933E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999879713483092	WITHOUT_CLASSIFICATION	1.2028651690751933E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999977670714689	WITHOUT_CLASSIFICATION	2.232928531099784E-6	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997531714386745	WITHOUT_CLASSIFICATION	2.4682856132560377E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999584678919266	WITHOUT_CLASSIFICATION	4.1532108073398803E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999740924680031	WITHOUT_CLASSIFICATION	2.5907531996897914E-5	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999786316169036	WITHOUT_CLASSIFICATION	2.1368383096358174E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999910934043755	WITHOUT_CLASSIFICATION	8.906595624482908E-6	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999931601892043	WITHOUT_CLASSIFICATION	6.8398107956806685E-6	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999993750747568	WITHOUT_CLASSIFICATION	6.249252432350052E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999621590859604	WITHOUT_CLASSIFICATION	3.784091403958439E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999989351146134	WITHOUT_CLASSIFICATION	1.0648853865883346E-6	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999892321753723	WITHOUT_CLASSIFICATION	1.0767824627753574E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999638716165149	WITHOUT_CLASSIFICATION	3.612838348507928E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9995170990581922	WITHOUT_CLASSIFICATION	4.829009418077803E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999687524596826	WITHOUT_CLASSIFICATION	3.12475403173857E-5	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999992747427777	WITHOUT_CLASSIFICATION	7.252572222911255E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999930087773798	WITHOUT_CLASSIFICATION	6.991222620202608E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999890574990213	WITHOUT_CLASSIFICATION	1.0942500978581254E-5	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9997976016714285	WITHOUT_CLASSIFICATION	2.0239832857158897E-4	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.999998992077282	WITHOUT_CLASSIFICATION	1.0079227179017058E-6	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999399165149412	WITHOUT_CLASSIFICATION	6.008348505893513E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999791004530832	WITHOUT_CLASSIFICATION	2.0899546916661527E-5	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999967936897125	WITHOUT_CLASSIFICATION	3.206310287484407E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994345537256891	WITHOUT_CLASSIFICATION	5.654462743108317E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999996541743838	WITHOUT_CLASSIFICATION	3.45825616204081E-6	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999837972576033	WITHOUT_CLASSIFICATION	1.6202742396709983E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.999997610964814	WITHOUT_CLASSIFICATION	2.3890351859962903E-6	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9994585585403357	WITHOUT_CLASSIFICATION	5.414414596643176E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989680911610199	WITHOUT_CLASSIFICATION	0.0010319088389800076	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999940018656619	WITHOUT_CLASSIFICATION	5.99813433808359E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994345537256891	WITHOUT_CLASSIFICATION	5.654462743108317E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9998210858466201	WITHOUT_CLASSIFICATION	1.789141533798506E-4	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999928025223	WITHOUT_CLASSIFICATION	7.197477818828368E-9	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9988648144237056	WITHOUT_CLASSIFICATION	0.0011351855762944043	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.999882323108717	WITHOUT_CLASSIFICATION	1.1767689128291744E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999996215539728	WITHOUT_CLASSIFICATION	3.784460272216111E-7	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998226589357	WITHOUT_CLASSIFICATION	1.7734106427445294E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999955847488555	WITHOUT_CLASSIFICATION	4.415251144446697E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999987456927901	WITHOUT_CLASSIFICATION	1.2543072099012587E-6	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999598821455702	WITHOUT_CLASSIFICATION	4.0117854429811355E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.999882323108717	WITHOUT_CLASSIFICATION	1.1767689128291744E-4	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999998223950242	WITHOUT_CLASSIFICATION	1.776049758053247E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999987960458488	WITHOUT_CLASSIFICATION	1.203954151150947E-6	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999965164681831	WITHOUT_CLASSIFICATION	3.483531816894369E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994131946403483	WITHOUT_CLASSIFICATION	5.868053596517409E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999883558335044	WITHOUT_CLASSIFICATION	1.1644166495513054E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999937423788422	WITHOUT_CLASSIFICATION	6.257621157818544E-6	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999986265917612	WITHOUT_CLASSIFICATION	1.3734082388345526E-6	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999965822099948	WITHOUT_CLASSIFICATION	3.417790005186343E-6	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999763239451246	WITHOUT_CLASSIFICATION	2.367605487544989E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999895510243956	WITHOUT_CLASSIFICATION	1.0448975604537936E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999953047415022	WITHOUT_CLASSIFICATION	4.695258497804391E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999869080317874	WITHOUT_CLASSIFICATION	1.3091968212629481E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999325096403691	WITHOUT_CLASSIFICATION	6.749035963089087E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999823250601997	WITHOUT_CLASSIFICATION	1.767493980033454E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998745588025255	WITHOUT_CLASSIFICATION	1.254411974744683E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999812788868394	WITHOUT_CLASSIFICATION	1.8721113160641284E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992923458430022	WITHOUT_CLASSIFICATION	7.076541569977132E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999595952546086	WITHOUT_CLASSIFICATION	4.040474539131333E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999963617447307	WITHOUT_CLASSIFICATION	3.6382552693214687E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999906445442452	WITHOUT_CLASSIFICATION	9.35545575467573E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999935004278824	WITHOUT_CLASSIFICATION	6.499572117572109E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998344582342654	WITHOUT_CLASSIFICATION	1.6554176573448302E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999992453219182	WITHOUT_CLASSIFICATION	7.546780817505334E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999952299719949	WITHOUT_CLASSIFICATION	4.770028005090554E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999959988374633	WITHOUT_CLASSIFICATION	4.001162536756048E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9995903327042422	WITHOUT_CLASSIFICATION	4.096672957577721E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9997342593325078	WITHOUT_CLASSIFICATION	2.6574066749214157E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999579912034968	WITHOUT_CLASSIFICATION	4.200879650318234E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999969676853009	WITHOUT_CLASSIFICATION	3.032314699078028E-6	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999932316601304	WITHOUT_CLASSIFICATION	6.768339869610528E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999106237280384	WITHOUT_CLASSIFICATION	8.937627196163334E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9997236650046538	WITHOUT_CLASSIFICATION	2.7633499534614875E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.999983127922322	WITHOUT_CLASSIFICATION	1.6872077677968974E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761846669354	WITHOUT_CLASSIFICATION	2.3815333064538523E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996581916187626	WITHOUT_CLASSIFICATION	3.418083812374384E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999970373091609	WITHOUT_CLASSIFICATION	2.962690839060827E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999758294017567	WITHOUT_CLASSIFICATION	2.4170598243397692E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999131414884564	WITHOUT_CLASSIFICATION	8.685851154349748E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999707669936262	WITHOUT_CLASSIFICATION	2.923300637383348E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999707669936262	WITHOUT_CLASSIFICATION	2.923300637383348E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999893343112596	WITHOUT_CLASSIFICATION	1.0665688740325187E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999922737547671	WITHOUT_CLASSIFICATION	7.726245232914511E-6	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999935635194886	WITHOUT_CLASSIFICATION	6.436480511372744E-6	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999771014576696	WITHOUT_CLASSIFICATION	2.2898542330358336E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9996447307829924	WITHOUT_CLASSIFICATION	3.552692170075037E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999978111325667	WITHOUT_CLASSIFICATION	2.188867433325858E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999967188230096	WITHOUT_CLASSIFICATION	3.281176990513277E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999668820995021	WITHOUT_CLASSIFICATION	3.311790049783499E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999696015573432	WITHOUT_CLASSIFICATION	3.0398442656790067E-5	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999995795270856	WITHOUT_CLASSIFICATION	4.20472914291142E-7	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999980767941705	WITHOUT_CLASSIFICATION	1.9232058295018365E-6	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999891881293516	WITHOUT_CLASSIFICATION	1.0811870648561612E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.99999593317413	WITHOUT_CLASSIFICATION	4.066825869908431E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999707669936262	WITHOUT_CLASSIFICATION	2.923300637383348E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998490066926203	WITHOUT_CLASSIFICATION	1.509933073797049E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999636761756604	WITHOUT_CLASSIFICATION	3.6323824339624716E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999940338562286	WITHOUT_CLASSIFICATION	5.966143771370543E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999963438880882	WITHOUT_CLASSIFICATION	3.656111911836797E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999402214767085	WITHOUT_CLASSIFICATION	5.9778523291416305E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999966212891159	WITHOUT_CLASSIFICATION	3.378710884130824E-6	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999998867824059	WITHOUT_CLASSIFICATION	1.1321759399452217E-7	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999825720416542	WITHOUT_CLASSIFICATION	1.7427958345765664E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999832609988424	WITHOUT_CLASSIFICATION	1.6739001157631672E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9981155463472121	WITHOUT_CLASSIFICATION	0.0018844536527879254	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999827421833879	WITHOUT_CLASSIFICATION	1.7257816612013485E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761846669354	WITHOUT_CLASSIFICATION	2.3815333064538523E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999707669936262	WITHOUT_CLASSIFICATION	2.923300637383348E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999636485906973	WITHOUT_CLASSIFICATION	3.635140930275987E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999936978872591	WITHOUT_CLASSIFICATION	6.302112740967238E-6	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.999915453208922	WITHOUT_CLASSIFICATION	8.454679107806705E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.99993257591324	WITHOUT_CLASSIFICATION	6.742408676000888E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999874678110368	WITHOUT_CLASSIFICATION	1.2532188963244372E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999392431069523	WITHOUT_CLASSIFICATION	6.075689304775592E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999859570128195	WITHOUT_CLASSIFICATION	1.4042987180494596E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999612469157138	WITHOUT_CLASSIFICATION	3.875308428616473E-5	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9998600919848047	WITHOUT_CLASSIFICATION	1.3990801519527863E-4	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9997904150741185	WITHOUT_CLASSIFICATION	2.0958492588155772E-4	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999419284758998	WITHOUT_CLASSIFICATION	5.807152410030142E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9985073617674912	WITHOUT_CLASSIFICATION	0.0014926382325088489	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999353266798235	WITHOUT_CLASSIFICATION	6.467332017636698E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999745670059572	WITHOUT_CLASSIFICATION	2.5432994042808976E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999862746560588	WITHOUT_CLASSIFICATION	1.3725343941117696E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999952882891829	WITHOUT_CLASSIFICATION	4.711710817103504E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999979158067809	WITHOUT_CLASSIFICATION	2.0841932191264916E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999843945583436	WITHOUT_CLASSIFICATION	1.56054416563333E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999778526282184	WITHOUT_CLASSIFICATION	2.2147371781625905E-5	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999974445239337	WITHOUT_CLASSIFICATION	2.555476066357285E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999424737851973	WITHOUT_CLASSIFICATION	5.752621480261026E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999424737851973	WITHOUT_CLASSIFICATION	5.752621480261026E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999986580328748	WITHOUT_CLASSIFICATION	1.3419671252150203E-6	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999900422771009	WITHOUT_CLASSIFICATION	9.957722899049206E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999650032944706	WITHOUT_CLASSIFICATION	3.499670552945578E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999789566136356	WITHOUT_CLASSIFICATION	2.104338636445861E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998920039684793	WITHOUT_CLASSIFICATION	1.0799603152065784E-4	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999942989759105	WITHOUT_CLASSIFICATION	5.70102408940919E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999245693375918	WITHOUT_CLASSIFICATION	7.543066240822143E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998185844212	WITHOUT_CLASSIFICATION	1.8141557879414955E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998185844212	WITHOUT_CLASSIFICATION	1.8141557879414955E-6	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9989477925721764	WITHOUT_CLASSIFICATION	0.0010522074278236208	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9998325250023845	WITHOUT_CLASSIFICATION	1.6747499761545013E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999272293115453	WITHOUT_CLASSIFICATION	7.277068845476232E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998824920679659	WITHOUT_CLASSIFICATION	1.1750793203406802E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998824920679659	WITHOUT_CLASSIFICATION	1.1750793203406802E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998824920679659	WITHOUT_CLASSIFICATION	1.1750793203406802E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999904899965628	WITHOUT_CLASSIFICATION	9.51000343712768E-6	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999915351273915	WITHOUT_CLASSIFICATION	8.464872608490357E-6	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9991597277958031	WITHOUT_CLASSIFICATION	8.402722041967842E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9995615463407684	WITHOUT_CLASSIFICATION	4.3845365923158203E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999631702290115	WITHOUT_CLASSIFICATION	3.6829770988508736E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999707669936262	WITHOUT_CLASSIFICATION	2.923300637383348E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999707669936262	WITHOUT_CLASSIFICATION	2.923300637383348E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999319258685326	WITHOUT_CLASSIFICATION	6.807413146735047E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999990130523574	WITHOUT_CLASSIFICATION	9.869476425842908E-7	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999680600669998	WITHOUT_CLASSIFICATION	3.193993300019866E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999979769055403	WITHOUT_CLASSIFICATION	2.023094459732525E-6	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999490012918106	WITHOUT_CLASSIFICATION	5.0998708189252455E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999877904409954	WITHOUT_CLASSIFICATION	1.2209559004592884E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9994779996477011	WITHOUT_CLASSIFICATION	5.220003522988931E-4	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999770592448152	WITHOUT_CLASSIFICATION	2.2940755184853922E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999760364781395	WITHOUT_CLASSIFICATION	2.3963521860587395E-5	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999541998402262	WITHOUT_CLASSIFICATION	4.580015977376314E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998419219405617	WITHOUT_CLASSIFICATION	1.580780594383182E-4	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997914816643201	WITHOUT_CLASSIFICATION	2.0851833567993457E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997914816643201	WITHOUT_CLASSIFICATION	2.0851833567993457E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998053060623969	WITHOUT_CLASSIFICATION	1.9469393760314604E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998053060623969	WITHOUT_CLASSIFICATION	1.9469393760314604E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998043327369419	WITHOUT_CLASSIFICATION	1.956672630581724E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9996200955358344	WITHOUT_CLASSIFICATION	3.79904464165618E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9996200955358344	WITHOUT_CLASSIFICATION	3.79904464165618E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997123795549109	WITHOUT_CLASSIFICATION	2.8762044508912304E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996942830871242	WITHOUT_CLASSIFICATION	3.057169128757467E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999817063540031	WITHOUT_CLASSIFICATION	1.8293645996970264E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999424737851973	WITHOUT_CLASSIFICATION	5.752621480261026E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999785350861973	WITHOUT_CLASSIFICATION	2.1464913802689916E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996942830871242	WITHOUT_CLASSIFICATION	3.057169128757467E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999559263519278	WITHOUT_CLASSIFICATION	4.407364807221249E-5	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999439740891003	WITHOUT_CLASSIFICATION	5.6025910899676535E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9996649211207657	WITHOUT_CLASSIFICATION	3.3507887923431566E-4	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9997775025121223	WITHOUT_CLASSIFICATION	2.224974878776537E-4	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999944355154049	WITHOUT_CLASSIFICATION	5.564484595137886E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999590539198442	WITHOUT_CLASSIFICATION	4.094608015584915E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999962976287017	WITHOUT_CLASSIFICATION	3.7023712984229203E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999773417015003	WITHOUT_CLASSIFICATION	2.2658298499683507E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999842518384674	WITHOUT_CLASSIFICATION	1.5748161532529064E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999956534080218	WITHOUT_CLASSIFICATION	4.346591978171583E-6	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999592461819756	WITHOUT_CLASSIFICATION	4.075381802430363E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999971276573483	WITHOUT_CLASSIFICATION	2.872342651701899E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998606086753132	WITHOUT_CLASSIFICATION	1.3939132468680725E-4	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9998723379714072	WITHOUT_CLASSIFICATION	1.2766202859281598E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999737777210124	WITHOUT_CLASSIFICATION	2.6222278987647055E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999846235317346	WITHOUT_CLASSIFICATION	1.5376468265388396E-5	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999965387694115	WITHOUT_CLASSIFICATION	3.4612305884268788E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999851033941678	WITHOUT_CLASSIFICATION	1.489660583220241E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999851033941678	WITHOUT_CLASSIFICATION	1.489660583220241E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999857584577022	WITHOUT_CLASSIFICATION	1.4241542297692778E-5	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999946084639052	WITHOUT_CLASSIFICATION	5.391536094854935E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999916464899704	WITHOUT_CLASSIFICATION	8.353510029650432E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999799194547049	WITHOUT_CLASSIFICATION	2.008054529518236E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999862021638738	WITHOUT_CLASSIFICATION	1.379783612614163E-5	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999913171590705	WITHOUT_CLASSIFICATION	8.682840929520286E-6	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998950406757904	WITHOUT_CLASSIFICATION	1.0495932420964685E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999958333465427	WITHOUT_CLASSIFICATION	4.1666534573161145E-5	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999708752409928	WITHOUT_CLASSIFICATION	2.912475900717596E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.99986677227051	WITHOUT_CLASSIFICATION	1.332277294900393E-4	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9996157509778459	WITHOUT_CLASSIFICATION	3.8424902215411803E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9985073617674912	WITHOUT_CLASSIFICATION	0.0014926382325088489	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999911592578453	WITHOUT_CLASSIFICATION	8.840742154713078E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999979619303935	WITHOUT_CLASSIFICATION	2.038069606471357E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999983222614894	WITHOUT_CLASSIFICATION	1.677738510545331E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999990615344426	WITHOUT_CLASSIFICATION	9.384655573886764E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999688492190482	WITHOUT_CLASSIFICATION	3.1150780951742075E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999688492190482	WITHOUT_CLASSIFICATION	3.1150780951742075E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.99989781044414	WITHOUT_CLASSIFICATION	1.0218955586013442E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999950826610912	WITHOUT_CLASSIFICATION	4.917338908787748E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999944672737796	WITHOUT_CLASSIFICATION	5.5327262204777836E-6	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999898038446035	WITHOUT_CLASSIFICATION	1.0196155396511867E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999908159752107	WITHOUT_CLASSIFICATION	9.184024789406197E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999872973333235	WITHOUT_CLASSIFICATION	1.2702666676485423E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9997158226424088	WITHOUT_CLASSIFICATION	2.841773575912308E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998095212530929	WITHOUT_CLASSIFICATION	1.90478746907241E-4	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999725931715202	WITHOUT_CLASSIFICATION	2.7406828479810937E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999966575515202	WITHOUT_CLASSIFICATION	3.342448479710116E-6	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999613213450387	WITHOUT_CLASSIFICATION	3.867865496130391E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9998095212530929	WITHOUT_CLASSIFICATION	1.90478746907241E-4	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999857683305984	WITHOUT_CLASSIFICATION	1.4231669401560693E-5	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9988453561428235	WITHOUT_CLASSIFICATION	0.001154643857176441	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999994794777999	WITHOUT_CLASSIFICATION	5.20522200152185E-7	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9994994887647812	WITHOUT_CLASSIFICATION	5.005112352188461E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.999995772170968	WITHOUT_CLASSIFICATION	4.227829032074666E-6	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999991212663694	WITHOUT_CLASSIFICATION	8.78733630609893E-7	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999977455888754	WITHOUT_CLASSIFICATION	2.2544111245458506E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999812171098537	WITHOUT_CLASSIFICATION	1.8782890146283154E-5	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999967921336254	WITHOUT_CLASSIFICATION	3.2078663746797626E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999890231657458	WITHOUT_CLASSIFICATION	1.0976834254181202E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999996824287254	WITHOUT_CLASSIFICATION	3.175712746014326E-6	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999993495261061	WITHOUT_CLASSIFICATION	6.504738938112096E-7	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999484535108929	WITHOUT_CLASSIFICATION	5.154648910716885E-5	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999944966663291	WITHOUT_CLASSIFICATION	5.50333367089205E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999858211302339	WITHOUT_CLASSIFICATION	1.4178869766117908E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999966723595425	WITHOUT_CLASSIFICATION	3.327640457410538E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999910462185714	WITHOUT_CLASSIFICATION	8.953781428707812E-6	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999535872908166	WITHOUT_CLASSIFICATION	4.641270918334802E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999457773806402	WITHOUT_CLASSIFICATION	5.422261935982166E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999973277261766	WITHOUT_CLASSIFICATION	2.672273823451866E-6	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999767179701492	WITHOUT_CLASSIFICATION	2.328202985076877E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9998539437715699	WITHOUT_CLASSIFICATION	1.4605622843021229E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999764289117999	WITHOUT_CLASSIFICATION	2.3571088199995005E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.999674412500353	WITHOUT_CLASSIFICATION	3.2558749964695533E-4	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9995858625344125	WITHOUT_CLASSIFICATION	4.141374655875829E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998551537927634	WITHOUT_CLASSIFICATION	1.448462072367263E-4	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.99998878583165	WITHOUT_CLASSIFICATION	1.1214168350010083E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999606729442861	WITHOUT_CLASSIFICATION	3.9327055713879045E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999577526558885	WITHOUT_CLASSIFICATION	4.2247344111506584E-4	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9995941787423465	WITHOUT_CLASSIFICATION	4.0582125765357513E-4	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999895214222463	WITHOUT_CLASSIFICATION	1.0478577753698392E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999936922888459	WITHOUT_CLASSIFICATION	6.307711154121195E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999762238429385	WITHOUT_CLASSIFICATION	2.3776157061515243E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999830499786094	WITHOUT_CLASSIFICATION	1.6950021390501866E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999855389586265	WITHOUT_CLASSIFICATION	1.4461041373402528E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999877518627144	WITHOUT_CLASSIFICATION	1.2248137285619061E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999749680304817	WITHOUT_CLASSIFICATION	2.5031969518328526E-5	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999849770697412	WITHOUT_CLASSIFICATION	1.5022930258844116E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999563258924312	WITHOUT_CLASSIFICATION	4.367410756883248E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998353350636634	WITHOUT_CLASSIFICATION	1.646649363365193E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999862482526082	WITHOUT_CLASSIFICATION	1.3751747391769812E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999989850822234	WITHOUT_CLASSIFICATION	1.0149177765499134E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999939121821798	WITHOUT_CLASSIFICATION	6.087817820139025E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999998653242196	WITHOUT_CLASSIFICATION	1.346757804032485E-6	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999867575795993	WITHOUT_CLASSIFICATION	1.3242420400663555E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999830153789747	WITHOUT_CLASSIFICATION	1.698462102529492E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999977367350146	WITHOUT_CLASSIFICATION	2.2632649853187003E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998350788358602	WITHOUT_CLASSIFICATION	1.6492116413984343E-4	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999581653990554	WITHOUT_CLASSIFICATION	4.183460094473753E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999733708228851	WITHOUT_CLASSIFICATION	2.662917711493116E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754955563579	WITHOUT_CLASSIFICATION	2.4504443642129287E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999803848396642	WITHOUT_CLASSIFICATION	1.9615160335703303E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999895535975052	WITHOUT_CLASSIFICATION	1.044640249493717E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999987630315704	WITHOUT_CLASSIFICATION	1.2369684295649031E-6	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999936079327608	WITHOUT_CLASSIFICATION	6.3920672390728885E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999928237348241	WITHOUT_CLASSIFICATION	7.176265175864609E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999410725611663	WITHOUT_CLASSIFICATION	5.8927438833712885E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999992498276232	WITHOUT_CLASSIFICATION	7.501723768612469E-7	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999713027259545	WITHOUT_CLASSIFICATION	2.8697274045563724E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999415959097143	WITHOUT_CLASSIFICATION	5.8404090285806106E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999976443467079	WITHOUT_CLASSIFICATION	2.3556532920961566E-6	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999988755581822	WITHOUT_CLASSIFICATION	1.1244418177939574E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999871930805307	WITHOUT_CLASSIFICATION	1.2806919469340595E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999874307080363	WITHOUT_CLASSIFICATION	1.2569291963629511E-5	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999719708804039	WITHOUT_CLASSIFICATION	2.802911959603297E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999959160730506	WITHOUT_CLASSIFICATION	4.083926949399481E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999754955563579	WITHOUT_CLASSIFICATION	2.4504443642129287E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999980315761269	WITHOUT_CLASSIFICATION	1.968423873048696E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999742862886745	WITHOUT_CLASSIFICATION	2.5713711325521464E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999911780228296	WITHOUT_CLASSIFICATION	8.82197717053937E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999933289574245	WITHOUT_CLASSIFICATION	6.671042575484593E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999329391465264	WITHOUT_CLASSIFICATION	6.706085347363401E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999989106827727	WITHOUT_CLASSIFICATION	1.089317227380204E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999725931715202	WITHOUT_CLASSIFICATION	2.7406828479810937E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999864039556657	WITHOUT_CLASSIFICATION	1.3596044334348858E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999855389586265	WITHOUT_CLASSIFICATION	1.4461041373402528E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997274865678574	WITHOUT_CLASSIFICATION	2.725134321426889E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999935468534515	WITHOUT_CLASSIFICATION	6.453146548389789E-6	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999850849605982	WITHOUT_CLASSIFICATION	1.491503940168477E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999837415216146	WITHOUT_CLASSIFICATION	1.6258478385380767E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999857431908723	WITHOUT_CLASSIFICATION	1.4256809127795178E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.999978724185206	WITHOUT_CLASSIFICATION	2.1275814794136497E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999951716880469	WITHOUT_CLASSIFICATION	4.828311953190148E-6	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9998346969687602	WITHOUT_CLASSIFICATION	1.653030312398567E-4	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999960971020246	WITHOUT_CLASSIFICATION	3.902897975352446E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999949187695227	WITHOUT_CLASSIFICATION	5.0812304773288225E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999719311925482	WITHOUT_CLASSIFICATION	2.806880745183015E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999842042970943	WITHOUT_CLASSIFICATION	1.5795702905680306E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999979207632794	WITHOUT_CLASSIFICATION	2.0792367205376213E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999979207632794	WITHOUT_CLASSIFICATION	2.0792367205376213E-6	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999997806321868	WITHOUT_CLASSIFICATION	2.193678131984732E-6	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999597430167084	WITHOUT_CLASSIFICATION	4.0256983291563056E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999965729463954	WITHOUT_CLASSIFICATION	3.4270536045434166E-6	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999348331079818	WITHOUT_CLASSIFICATION	6.516689201818746E-5	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999955332040048	WITHOUT_CLASSIFICATION	4.466795995147754E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999732259023804	WITHOUT_CLASSIFICATION	2.677409761969472E-5	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999971752708186	WITHOUT_CLASSIFICATION	2.8247291814460655E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999983567023492	WITHOUT_CLASSIFICATION	1.643297650878913E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999978942601582	WITHOUT_CLASSIFICATION	2.1057398417966248E-6	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999683377532682	WITHOUT_CLASSIFICATION	3.1662246731703986E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9998723836492326	WITHOUT_CLASSIFICATION	1.276163507674272E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998341512694287	WITHOUT_CLASSIFICATION	1.6584873057138972E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997993945633772	WITHOUT_CLASSIFICATION	2.0060543662274243E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999948593492	WITHOUT_CLASSIFICATION	5.14065081114433E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999763664860868	WITHOUT_CLASSIFICATION	2.363351391316617E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999966967073193	WITHOUT_CLASSIFICATION	3.3032926806288427E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997342282571104	WITHOUT_CLASSIFICATION	2.6577174288959276E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999218775871949	WITHOUT_CLASSIFICATION	7.812241280511661E-5	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999944495487699	WITHOUT_CLASSIFICATION	5.550451230137237E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999949668618768	WITHOUT_CLASSIFICATION	5.0331381231953195E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999963393491831	WITHOUT_CLASSIFICATION	3.6606508169519027E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999856792600992	WITHOUT_CLASSIFICATION	1.4320739900733879E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999912838209666	WITHOUT_CLASSIFICATION	8.716179033370473E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9995215182057161	WITHOUT_CLASSIFICATION	4.784817942839647E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998597465438175	WITHOUT_CLASSIFICATION	1.40253456182546E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259061002966	WITHOUT_CLASSIFICATION	7.40938997033131E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999025292404814	WITHOUT_CLASSIFICATION	9.747075951858993E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999892246262384	WITHOUT_CLASSIFICATION	1.0775373761595378E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999964125820211	WITHOUT_CLASSIFICATION	3.5874179788957115E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999814467292952	WITHOUT_CLASSIFICATION	1.855327070487001E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9860485519725374	WITHOUT_CLASSIFICATION	0.013951448027462598	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9995843002315377	WITHOUT_CLASSIFICATION	4.156997684622755E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999980861909059	WITHOUT_CLASSIFICATION	1.913809094036879E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999945025082444	WITHOUT_CLASSIFICATION	5.497491755534469E-6	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999874189717602	WITHOUT_CLASSIFICATION	1.2581028239650957E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999948083268976	WITHOUT_CLASSIFICATION	5.191673102527024E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999641842279292	WITHOUT_CLASSIFICATION	3.5815772070724094E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999375570169585	WITHOUT_CLASSIFICATION	6.244298304148275E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9996913948505802	WITHOUT_CLASSIFICATION	3.086051494197777E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998764052332919	WITHOUT_CLASSIFICATION	1.235947667080899E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99991351863339	WITHOUT_CLASSIFICATION	8.648136661009952E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999989323658328	WITHOUT_CLASSIFICATION	1.0676341671979821E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999431929842588	WITHOUT_CLASSIFICATION	5.680701574128192E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999736001618172	WITHOUT_CLASSIFICATION	2.6399838182767983E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999932194550064	WITHOUT_CLASSIFICATION	6.78054499357553E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998987043936493	WITHOUT_CLASSIFICATION	1.0129560635068128E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9926068398320746	WITHOUT_CLASSIFICATION	0.007393160167925338	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999828087681224	WITHOUT_CLASSIFICATION	1.7191231877558697E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997315936681	WITHOUT_CLASSIFICATION	2.684063319331654E-7	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999856905435951	WITHOUT_CLASSIFICATION	1.4309456404806812E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765999474202	WITHOUT_CLASSIFICATION	2.3400052579798635E-5	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999640216313033	WITHOUT_CLASSIFICATION	3.59783686967226E-5	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999649931904775	WITHOUT_CLASSIFICATION	3.500680952259118E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999913997533079	WITHOUT_CLASSIFICATION	8.600246692052417E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999493484247164	WITHOUT_CLASSIFICATION	5.065157528367625E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999944354782226	WITHOUT_CLASSIFICATION	5.564521777382809E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999338195705597	WITHOUT_CLASSIFICATION	6.618042944032315E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9998483530581742	WITHOUT_CLASSIFICATION	1.5164694182585292E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999831421655498	WITHOUT_CLASSIFICATION	1.6857834450141758E-5	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999802629580231	WITHOUT_CLASSIFICATION	1.973704197689876E-5	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999976761419896	WITHOUT_CLASSIFICATION	2.323858010403782E-5	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999888787990698	WITHOUT_CLASSIFICATION	1.1121200930118968E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999199689811055	WITHOUT_CLASSIFICATION	8.003101889444697E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999945742809744	WITHOUT_CLASSIFICATION	5.425719025612922E-6	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999976527211934	WITHOUT_CLASSIFICATION	2.3472788066044284E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999909673039157	WITHOUT_CLASSIFICATION	9.032696084309316E-6	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999219178412821	WITHOUT_CLASSIFICATION	7.808215871780747E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999797513639409	WITHOUT_CLASSIFICATION	2.024863605907186E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999856976182019	WITHOUT_CLASSIFICATION	1.4302381798163498E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999547479684002	WITHOUT_CLASSIFICATION	4.5252031599755805E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999856976182019	WITHOUT_CLASSIFICATION	1.4302381798163498E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999996979967804	WITHOUT_CLASSIFICATION	3.020032195974461E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999640900079424	WITHOUT_CLASSIFICATION	3.590999205756819E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997679578335631	WITHOUT_CLASSIFICATION	2.3204216643693564E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999992460213927	WITHOUT_CLASSIFICATION	7.539786073561034E-7	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999973313458318	WITHOUT_CLASSIFICATION	2.6686541682058683E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9995775731322667	WITHOUT_CLASSIFICATION	4.224268677333722E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999953616193623	WITHOUT_CLASSIFICATION	4.6383806376789E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999821331336579	WITHOUT_CLASSIFICATION	1.7866866342057752E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999955310728433	WITHOUT_CLASSIFICATION	4.46892715663876E-6	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.99999560124341	WITHOUT_CLASSIFICATION	4.398756589952995E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9998333085758209	WITHOUT_CLASSIFICATION	1.6669142417905829E-4	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999900047988998	WITHOUT_CLASSIFICATION	9.995201100345022E-6	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999942134898143	WITHOUT_CLASSIFICATION	5.786510185703838E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999772966321928	WITHOUT_CLASSIFICATION	2.2703367807247176E-5	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999850683556673	WITHOUT_CLASSIFICATION	1.4931644332820783E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999664261633023	WITHOUT_CLASSIFICATION	3.357383669758632E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999897891366608	WITHOUT_CLASSIFICATION	1.0210863339210459E-4	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999979231892826	WITHOUT_CLASSIFICATION	2.0768107174458137E-6	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999994054594617	WITHOUT_CLASSIFICATION	5.945405382974181E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999869902350585	WITHOUT_CLASSIFICATION	1.3009764941474619E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999714154836287	WITHOUT_CLASSIFICATION	2.8584516371332882E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999974232331231	WITHOUT_CLASSIFICATION	2.5767668769025688E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999979481273706	WITHOUT_CLASSIFICATION	2.0518726293964126E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999885699608513	WITHOUT_CLASSIFICATION	1.1430039148719874E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999786894794432	WITHOUT_CLASSIFICATION	2.1310520556817308E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.99998410331144	WITHOUT_CLASSIFICATION	1.5896688559937747E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999804623926224	WITHOUT_CLASSIFICATION	1.9537607377537306E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999591780969438	WITHOUT_CLASSIFICATION	4.0821903056237334E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999808307569763	WITHOUT_CLASSIFICATION	1.9169243023714527E-5	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999895855659652	WITHOUT_CLASSIFICATION	1.0414434034874917E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999205939028009	WITHOUT_CLASSIFICATION	7.94060971991405E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999508843058946	WITHOUT_CLASSIFICATION	4.9115694105409827E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999947234762121	WITHOUT_CLASSIFICATION	5.276523787864094E-6	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999599509077459	WITHOUT_CLASSIFICATION	4.004909225400995E-5	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999839181713276	WITHOUT_CLASSIFICATION	1.6081828672433347E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.99990417684603	WITHOUT_CLASSIFICATION	9.582315397005985E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999911851523029	WITHOUT_CLASSIFICATION	8.814847697135213E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999818202507742	WITHOUT_CLASSIFICATION	1.8179749225709343E-5	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9998168700231922	WITHOUT_CLASSIFICATION	1.831299768078197E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999861720982242	WITHOUT_CLASSIFICATION	1.3827901775786924E-5	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999091501311342	WITHOUT_CLASSIFICATION	9.084986886578322E-5	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999927940503752	WITHOUT_CLASSIFICATION	7.2059496248154195E-6	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999954007776285	WITHOUT_CLASSIFICATION	4.599222371518648E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.99998410331144	WITHOUT_CLASSIFICATION	1.5896688559937747E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9996066396924975	WITHOUT_CLASSIFICATION	3.933603075024552E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999954349808132	WITHOUT_CLASSIFICATION	4.565019186789284E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998114176637461	WITHOUT_CLASSIFICATION	1.8858233625376693E-4	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999985429791474	WITHOUT_CLASSIFICATION	1.4570208526318832E-6	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999478428641523	WITHOUT_CLASSIFICATION	5.2157135847654464E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999742457580214	WITHOUT_CLASSIFICATION	2.5754241978590937E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999459123975039	WITHOUT_CLASSIFICATION	5.408760249610979E-5	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999986725884659	WITHOUT_CLASSIFICATION	1.3274115340923998E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999779692303974	WITHOUT_CLASSIFICATION	2.2030769602688104E-5	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999972841584446	WITHOUT_CLASSIFICATION	2.71584155538673E-6	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999164666978095	WITHOUT_CLASSIFICATION	8.353330219042541E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999714888004041	WITHOUT_CLASSIFICATION	2.8511199595884835E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998976885129734	WITHOUT_CLASSIFICATION	1.0231148702654011E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999458290609646	WITHOUT_CLASSIFICATION	5.4170939035451385E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999993478464746	WITHOUT_CLASSIFICATION	6.521535254129798E-6	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999971640459582	WITHOUT_CLASSIFICATION	2.835954041823174E-6	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999969412439078	WITHOUT_CLASSIFICATION	3.058756092200366E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999499554795472	WITHOUT_CLASSIFICATION	5.0044520452726025E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999992575876704	WITHOUT_CLASSIFICATION	7.42412329724448E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9996066396924975	WITHOUT_CLASSIFICATION	3.933603075024552E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999333666492232	WITHOUT_CLASSIFICATION	6.663335077684557E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999518049847188	WITHOUT_CLASSIFICATION	4.819501528119434E-5	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999763209629673	WITHOUT_CLASSIFICATION	2.3679037032738924E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999998486985551	WITHOUT_CLASSIFICATION	1.5130144488776558E-6	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999384244102685	WITHOUT_CLASSIFICATION	6.157558973157443E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.999872138172009	WITHOUT_CLASSIFICATION	1.2786182799098754E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.999872138172009	WITHOUT_CLASSIFICATION	1.2786182799098754E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999840001458505	WITHOUT_CLASSIFICATION	1.5999854149389212E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.999872138172009	WITHOUT_CLASSIFICATION	1.2786182799098754E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.999872138172009	WITHOUT_CLASSIFICATION	1.2786182799098754E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9996995573683106	WITHOUT_CLASSIFICATION	3.0044263168937826E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999980056903001	WITHOUT_CLASSIFICATION	1.9943096999129624E-6	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999959940321794	WITHOUT_CLASSIFICATION	4.005967820547629E-6	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.99999583161384	WITHOUT_CLASSIFICATION	4.168386159991842E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999847309603243	WITHOUT_CLASSIFICATION	1.5269039675771304E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999989530159319	WITHOUT_CLASSIFICATION	1.0469840680965696E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998872864359521	WITHOUT_CLASSIFICATION	1.1271356404779441E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999857698782946	WITHOUT_CLASSIFICATION	1.4230121705357454E-5	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998695352428446	WITHOUT_CLASSIFICATION	1.3046475715528682E-4	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999622750684436	WITHOUT_CLASSIFICATION	3.7724931556441354E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999611430581146	WITHOUT_CLASSIFICATION	3.885694188540302E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999600300103855	WITHOUT_CLASSIFICATION	3.9969989614565793E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999959291758131	WITHOUT_CLASSIFICATION	4.070824186856695E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999871410677134	WITHOUT_CLASSIFICATION	1.2858932286578797E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999960603150192	WITHOUT_CLASSIFICATION	3.939684980817432E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999812469049213	WITHOUT_CLASSIFICATION	1.8753095078715305E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999996482463684	WITHOUT_CLASSIFICATION	3.5175363159422724E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.99997741922785	WITHOUT_CLASSIFICATION	2.2580772149934036E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999832134772834	WITHOUT_CLASSIFICATION	1.678652271656074E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999894509864504	WITHOUT_CLASSIFICATION	1.0549013549636961E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999536128176941	WITHOUT_CLASSIFICATION	4.6387182305841716E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999391245745299	WITHOUT_CLASSIFICATION	6.0875425470071395E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999996482463684	WITHOUT_CLASSIFICATION	3.5175363159422724E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999804623926224	WITHOUT_CLASSIFICATION	1.9537607377537306E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999693746226337	WITHOUT_CLASSIFICATION	3.0625377366272344E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999942191040406	WITHOUT_CLASSIFICATION	5.780895959288757E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999972507699678	WITHOUT_CLASSIFICATION	2.749230032128891E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999206629475005	WITHOUT_CLASSIFICATION	7.933705249949706E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999474558789825	WITHOUT_CLASSIFICATION	5.254412101748133E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999799661324029	WITHOUT_CLASSIFICATION	2.0033867597126313E-5	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999321591993047	WITHOUT_CLASSIFICATION	6.784080069533026E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999742945946517	WITHOUT_CLASSIFICATION	2.5705405348290173E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999643055619514	WITHOUT_CLASSIFICATION	3.569443804868929E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999970875454191	WITHOUT_CLASSIFICATION	2.9124545809031748E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998114661504653	WITHOUT_CLASSIFICATION	1.885338495346523E-4	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999270819661712	WITHOUT_CLASSIFICATION	7.291803382876899E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999939421854878	WITHOUT_CLASSIFICATION	6.057814512247392E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999752705515856	WITHOUT_CLASSIFICATION	2.472944841444672E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999965458267418	WITHOUT_CLASSIFICATION	3.454173258189381E-6	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999907190431325	WITHOUT_CLASSIFICATION	9.280956867475328E-6	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999899134342795	WITHOUT_CLASSIFICATION	1.008656572056385E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999983396692564	WITHOUT_CLASSIFICATION	1.6603307435325496E-6	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999925119245392	WITHOUT_CLASSIFICATION	7.488075460901433E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999773375710282	WITHOUT_CLASSIFICATION	2.2662428971751164E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999964977633224	WITHOUT_CLASSIFICATION	3.502236677599322E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999988404068111	WITHOUT_CLASSIFICATION	1.159593188921573E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999742945946517	WITHOUT_CLASSIFICATION	2.5705405348290173E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999853236103299	WITHOUT_CLASSIFICATION	1.4676389670240807E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999579868914245	WITHOUT_CLASSIFICATION	4.201310857550307E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999244133528393	WITHOUT_CLASSIFICATION	7.558664716075625E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999923668708556	WITHOUT_CLASSIFICATION	7.633129144404807E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854329526107	WITHOUT_CLASSIFICATION	1.4567047389460687E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.999944633159809	WITHOUT_CLASSIFICATION	5.536684019112402E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999363319861865	WITHOUT_CLASSIFICATION	6.366801381355368E-5	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999695672570242	WITHOUT_CLASSIFICATION	3.043274297578353E-5	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999692966956989	WITHOUT_CLASSIFICATION	3.070330430104578E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9996858020943171	WITHOUT_CLASSIFICATION	3.141979056829533E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999408776099311	WITHOUT_CLASSIFICATION	5.9122390068851243E-5	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999985216121469	WITHOUT_CLASSIFICATION	1.4783878531696465E-6	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999797082861482	WITHOUT_CLASSIFICATION	2.0291713851763104E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999950087150361	WITHOUT_CLASSIFICATION	4.991284963856159E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99996060435606	WITHOUT_CLASSIFICATION	3.939564394001517E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999732009876656	WITHOUT_CLASSIFICATION	2.6799012334445855E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999911426360468	WITHOUT_CLASSIFICATION	8.857363953197918E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999408776099311	WITHOUT_CLASSIFICATION	5.9122390068851243E-5	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999809137531632	WITHOUT_CLASSIFICATION	1.9086246836863462E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999990112131622	WITHOUT_CLASSIFICATION	9.887868377935001E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999818967840901	WITHOUT_CLASSIFICATION	1.810321590990288E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999083985123216	WITHOUT_CLASSIFICATION	9.160148767834597E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999007348284471	WITHOUT_CLASSIFICATION	9.926517155285877E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999963499058828	WITHOUT_CLASSIFICATION	3.6500941172223743E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99996060435606	WITHOUT_CLASSIFICATION	3.939564394001517E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999974103974697	WITHOUT_CLASSIFICATION	2.589602530317381E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999462163554	WITHOUT_CLASSIFICATION	5.378364460002918E-6	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999820392795726	WITHOUT_CLASSIFICATION	1.796072042746754E-5	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997631090632764	WITHOUT_CLASSIFICATION	2.368909367236385E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992103869508085	WITHOUT_CLASSIFICATION	7.896130491913702E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994914531963568	WITHOUT_CLASSIFICATION	5.085468036432086E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999940484975294	WITHOUT_CLASSIFICATION	5.95150247057733E-6	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999940484975294	WITHOUT_CLASSIFICATION	5.95150247057733E-6	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999790396050781	WITHOUT_CLASSIFICATION	2.0960394921922156E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999736996535523	WITHOUT_CLASSIFICATION	2.630034644764916E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999704212757113	WITHOUT_CLASSIFICATION	2.9578724288624367E-5	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999886374674756	WITHOUT_CLASSIFICATION	1.1362532524508328E-5	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999799437656078	WITHOUT_CLASSIFICATION	2.0056234392137382E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803268562383	WITHOUT_CLASSIFICATION	1.967314376176843E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998771262094209	WITHOUT_CLASSIFICATION	1.2287379057906455E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562663382242	WITHOUT_CLASSIFICATION	4.373366177590826E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999974920036462	WITHOUT_CLASSIFICATION	2.507996353858911E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999529662434026	WITHOUT_CLASSIFICATION	4.703375659743071E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803268562383	WITHOUT_CLASSIFICATION	1.967314376176843E-5	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998771262094209	WITHOUT_CLASSIFICATION	1.2287379057906455E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562663382242	WITHOUT_CLASSIFICATION	4.373366177590826E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.999920512884523	WITHOUT_CLASSIFICATION	7.948711547695159E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9998184488894426	WITHOUT_CLASSIFICATION	1.8155111055725935E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999670108337867	WITHOUT_CLASSIFICATION	3.298916621336119E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999393464765692	WITHOUT_CLASSIFICATION	6.065352343085514E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999997536024479	WITHOUT_CLASSIFICATION	2.463975520868217E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999921580094238	WITHOUT_CLASSIFICATION	7.841990576293897E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999159129394264	WITHOUT_CLASSIFICATION	8.408706057354355E-5	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9982909940015129	WITHOUT_CLASSIFICATION	0.0017090059984870489	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9993540536414056	WITHOUT_CLASSIFICATION	6.459463585943288E-4	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999876395533259	WITHOUT_CLASSIFICATION	1.23604466741392E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999640701305477	WITHOUT_CLASSIFICATION	3.5929869452370534E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998817888464214	WITHOUT_CLASSIFICATION	1.182111535786751E-4	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9973328398555712	WITHOUT_CLASSIFICATION	0.002667160144428747	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999823769529051	WITHOUT_CLASSIFICATION	1.7623047094793357E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999908016032714	WITHOUT_CLASSIFICATION	9.198396728605395E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999621313703893	WITHOUT_CLASSIFICATION	3.78686296108108E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999502141163717	WITHOUT_CLASSIFICATION	4.978588362824879E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992656189649158	WITHOUT_CLASSIFICATION	7.343810350841551E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999826652880808	WITHOUT_CLASSIFICATION	1.7334711919225154E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997269784322461	WITHOUT_CLASSIFICATION	2.730215677539665E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999855221521052	WITHOUT_CLASSIFICATION	1.4477847894684223E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999940522645168	WITHOUT_CLASSIFICATION	5.947735483225897E-6	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998732295688825	WITHOUT_CLASSIFICATION	1.2677043111762154E-4	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999767175276447	WITHOUT_CLASSIFICATION	2.3282472355276473E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999978642845947	WITHOUT_CLASSIFICATION	2.1357154052883512E-6	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9993273457940506	WITHOUT_CLASSIFICATION	6.72654205949349E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579838680617	WITHOUT_CLASSIFICATION	4.201613193835066E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999947989717084	WITHOUT_CLASSIFICATION	5.201028291607667E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999969237237827	WITHOUT_CLASSIFICATION	3.0762762173294277E-6	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999483429918756	WITHOUT_CLASSIFICATION	5.165700812430671E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99985300842105	WITHOUT_CLASSIFICATION	1.4699157894997332E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999871642957421	WITHOUT_CLASSIFICATION	1.2835704257891574E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999871642957421	WITHOUT_CLASSIFICATION	1.2835704257891574E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999871134187457	WITHOUT_CLASSIFICATION	1.2886581254230933E-5	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999952065213172	WITHOUT_CLASSIFICATION	4.793478682743214E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999884274319265	WITHOUT_CLASSIFICATION	1.1572568073561704E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9985073617674912	WITHOUT_CLASSIFICATION	0.0014926382325088489	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999788401854006	WITHOUT_CLASSIFICATION	2.115981459941899E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999815555781656	WITHOUT_CLASSIFICATION	1.8444421834339552E-5	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9995479316977539	WITHOUT_CLASSIFICATION	4.5206830224611417E-4	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999449216771903	WITHOUT_CLASSIFICATION	5.50783228097088E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9996655206535885	WITHOUT_CLASSIFICATION	3.344793464115213E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850454712359	WITHOUT_CLASSIFICATION	1.4954528764085368E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910811602387	WITHOUT_CLASSIFICATION	8.918839761362881E-6	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733700306825	WITHOUT_CLASSIFICATION	2.6629969317427107E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834028610189	WITHOUT_CLASSIFICATION	1.6597138981041198E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925589550488	WITHOUT_CLASSIFICATION	7.441044951232729E-6	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999712358610139	WITHOUT_CLASSIFICATION	2.876413898618858E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857424631243	WITHOUT_CLASSIFICATION	1.4257536875564473E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945041498658	WITHOUT_CLASSIFICATION	5.495850134123167E-6	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888064386696	WITHOUT_CLASSIFICATION	1.1193561330386604E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779769725348	WITHOUT_CLASSIFICATION	2.202302746525841E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848513833723	WITHOUT_CLASSIFICATION	1.5148616627658583E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999998915219132	WITHOUT_CLASSIFICATION	1.0847808680608725E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999519306786959	WITHOUT_CLASSIFICATION	4.8069321304088326E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999338902991137	WITHOUT_CLASSIFICATION	6.610970088629171E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999939479195348	WITHOUT_CLASSIFICATION	6.0520804652544E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999957791405559	WITHOUT_CLASSIFICATION	4.220859444003042E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999850587874581	WITHOUT_CLASSIFICATION	1.4941212541764943E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9998962614691865	WITHOUT_CLASSIFICATION	1.0373853081335834E-4	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9977087130961474	WITHOUT_CLASSIFICATION	0.00229128690385259	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999338902991137	WITHOUT_CLASSIFICATION	6.610970088629171E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999338902991137	WITHOUT_CLASSIFICATION	6.610970088629171E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999809224517459	WITHOUT_CLASSIFICATION	1.907754825423082E-5	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999861772148767	WITHOUT_CLASSIFICATION	1.3822785123409104E-5	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999993825843005	WITHOUT_CLASSIFICATION	6.174156993883591E-7	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999498594117265	WITHOUT_CLASSIFICATION	5.014058827353282E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998606086753132	WITHOUT_CLASSIFICATION	1.3939132468680725E-4	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9997269784322461	WITHOUT_CLASSIFICATION	2.730215677539665E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999949923162395	WITHOUT_CLASSIFICATION	5.0076837605438035E-6	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999149518201856	WITHOUT_CLASSIFICATION	8.504817981444272E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999875663893071	WITHOUT_CLASSIFICATION	1.2433610692910721E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781071657916	WITHOUT_CLASSIFICATION	2.1892834208422328E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999975143691281	WITHOUT_CLASSIFICATION	2.4856308718795385E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999169916371224	WITHOUT_CLASSIFICATION	8.300836287763174E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999621440922796	WITHOUT_CLASSIFICATION	3.7855907720379326E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999621440922796	WITHOUT_CLASSIFICATION	3.7855907720379326E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999783706097425	WITHOUT_CLASSIFICATION	2.1629390257478405E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999783706097425	WITHOUT_CLASSIFICATION	2.1629390257478405E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999717351390386	WITHOUT_CLASSIFICATION	2.8264860961392968E-5	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999710158689615	WITHOUT_CLASSIFICATION	2.8984131038495534E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999367881005591	WITHOUT_CLASSIFICATION	6.321189944097644E-5	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999522772620343	WITHOUT_CLASSIFICATION	4.772273796577044E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999838502752726	WITHOUT_CLASSIFICATION	1.61497247273846E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999752946819884	WITHOUT_CLASSIFICATION	2.4705318011618312E-5	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999906239728968	WITHOUT_CLASSIFICATION	9.376027103199444E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876726627126	WITHOUT_CLASSIFICATION	1.2327337287389769E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9981884416669344	WITHOUT_CLASSIFICATION	0.0018115583330655092	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.999988699021138	WITHOUT_CLASSIFICATION	1.1300978862058672E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999992915046374	WITHOUT_CLASSIFICATION	7.084953626061854E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999081010655947	WITHOUT_CLASSIFICATION	9.189893440519639E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999950915010388	WITHOUT_CLASSIFICATION	4.908498961180093E-6	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999788678504921	WITHOUT_CLASSIFICATION	2.113214950800613E-5	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999467060099951	WITHOUT_CLASSIFICATION	5.329399000492267E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999646521038688	WITHOUT_CLASSIFICATION	3.5347896131299936E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999646521038688	WITHOUT_CLASSIFICATION	3.5347896131299936E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.99999821832831	WITHOUT_CLASSIFICATION	1.7816716899338214E-6	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998552221386099	WITHOUT_CLASSIFICATION	1.4477786139022153E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999931831673826	WITHOUT_CLASSIFICATION	6.816832617352538E-6	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997531741515407	WITHOUT_CLASSIFICATION	2.468258484592273E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884323265843	WITHOUT_CLASSIFICATION	1.1567673415751295E-5	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999813885109969	WITHOUT_CLASSIFICATION	1.8611489003054607E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999714752835622	WITHOUT_CLASSIFICATION	2.8524716437719975E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996274747002026	WITHOUT_CLASSIFICATION	3.725252997973149E-4	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999999105906841	WITHOUT_CLASSIFICATION	8.940931590186734E-7	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999994987461631	WITHOUT_CLASSIFICATION	5.012538368936515E-7	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999993537630918	WITHOUT_CLASSIFICATION	6.462369081916873E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999861585391308	WITHOUT_CLASSIFICATION	1.3841460869164255E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999162764514491	WITHOUT_CLASSIFICATION	8.37235485510058E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999969812767263	WITHOUT_CLASSIFICATION	3.0187232737673373E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999954640667079	WITHOUT_CLASSIFICATION	4.535933292137644E-6	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.999806097454674	WITHOUT_CLASSIFICATION	1.9390254532606003E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999780012728716	WITHOUT_CLASSIFICATION	2.1998727128444216E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999496178045746	WITHOUT_CLASSIFICATION	5.038219542553731E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999501817518601	WITHOUT_CLASSIFICATION	4.981824813990748E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999534375395731	WITHOUT_CLASSIFICATION	4.656246042682972E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999899260588322	WITHOUT_CLASSIFICATION	1.0073941167822298E-5	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996200445359	WITHOUT_CLASSIFICATION	3.7995546406151363E-7	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999979868645067	WITHOUT_CLASSIFICATION	2.0131354934270564E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9998147278562137	WITHOUT_CLASSIFICATION	1.8527214378637354E-4	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999791724033124	WITHOUT_CLASSIFICATION	2.0827596687552855E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998098766321963	WITHOUT_CLASSIFICATION	1.9012336780368675E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999922627039517	WITHOUT_CLASSIFICATION	7.737296048325193E-6	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999983854091493	WITHOUT_CLASSIFICATION	1.6145908506892857E-5	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999988592297224	WITHOUT_CLASSIFICATION	1.1407702775689681E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.99998997703223	WITHOUT_CLASSIFICATION	1.0022967769953732E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999853016537185	WITHOUT_CLASSIFICATION	1.469834628162998E-5	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999808951494711	WITHOUT_CLASSIFICATION	1.91048505289391E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999607199542926	WITHOUT_CLASSIFICATION	3.928004570737483E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999738964315917	WITHOUT_CLASSIFICATION	2.6103568408315425E-5	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999271387853834	WITHOUT_CLASSIFICATION	7.286121461665548E-5	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999964554985642	WITHOUT_CLASSIFICATION	3.544501435825837E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999890574990213	WITHOUT_CLASSIFICATION	1.0942500978581254E-5	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999877444765916	WITHOUT_CLASSIFICATION	1.2255523408428373E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999570195793578	WITHOUT_CLASSIFICATION	4.298042064225213E-5	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.999985313860747	WITHOUT_CLASSIFICATION	1.468613925304859E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999947349491034	WITHOUT_CLASSIFICATION	5.2650508966651576E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999893333168752	WITHOUT_CLASSIFICATION	1.0666683124776507E-5	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999865845440286	WITHOUT_CLASSIFICATION	1.341545597144363E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999878220914986	WITHOUT_CLASSIFICATION	1.2177908501416311E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999979288396066	WITHOUT_CLASSIFICATION	2.071160393403406E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9995343911120838	WITHOUT_CLASSIFICATION	4.656088879163119E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.999961798666092	WITHOUT_CLASSIFICATION	3.820133390802338E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998548547736427	WITHOUT_CLASSIFICATION	1.4514522635738822E-4	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999434597762142	WITHOUT_CLASSIFICATION	5.654022378567734E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999756088920952	WITHOUT_CLASSIFICATION	2.4391107904719815E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999908983759628	WITHOUT_CLASSIFICATION	9.101624037237642E-6	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9993388039642321	WITHOUT_CLASSIFICATION	6.611960357679452E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999917792108856	WITHOUT_CLASSIFICATION	8.22078911439917E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999862009561882	WITHOUT_CLASSIFICATION	1.379904381193584E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9992505394379678	WITHOUT_CLASSIFICATION	7.494605620321511E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999506644145953	WITHOUT_CLASSIFICATION	4.93355854047147E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9991189593306055	WITHOUT_CLASSIFICATION	8.810406693944703E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999509504601186	WITHOUT_CLASSIFICATION	4.90495398814087E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999808370462464	WITHOUT_CLASSIFICATION	1.9162953753642893E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999324892185626	WITHOUT_CLASSIFICATION	6.751078143740597E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999911527046265	WITHOUT_CLASSIFICATION	8.847295373574822E-6	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999996019327377	WITHOUT_CLASSIFICATION	3.9806726229590216E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999979184620281	WITHOUT_CLASSIFICATION	2.081537971865462E-6	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999872633837958	WITHOUT_CLASSIFICATION	1.2736616204228425E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999820449818989	WITHOUT_CLASSIFICATION	1.7955018101029553E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.99999101194287	WITHOUT_CLASSIFICATION	8.988057129978885E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999999767477065	WITHOUT_CLASSIFICATION	2.325229350835631E-7	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999985264129543	WITHOUT_CLASSIFICATION	1.4735870456917917E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994345537256891	WITHOUT_CLASSIFICATION	5.654462743108317E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994345537256891	WITHOUT_CLASSIFICATION	5.654462743108317E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999870811947517	WITHOUT_CLASSIFICATION	1.2918805248400331E-5	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999754919916223	WITHOUT_CLASSIFICATION	2.450800837770868E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999940973993034	WITHOUT_CLASSIFICATION	5.902600696487069E-6	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999939260971128	WITHOUT_CLASSIFICATION	6.073902887186669E-6	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999834219526812	WITHOUT_CLASSIFICATION	1.6578047318769525E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999653639588345	WITHOUT_CLASSIFICATION	3.463604116550684E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999934978699835	WITHOUT_CLASSIFICATION	6.502130016558763E-6	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999870936755851	WITHOUT_CLASSIFICATION	1.290632441473044E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9996914562720327	WITHOUT_CLASSIFICATION	3.0854372796723E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999839673589535	WITHOUT_CLASSIFICATION	1.6032641046625076E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999061569562447	WITHOUT_CLASSIFICATION	9.38430437552108E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999988407189287	WITHOUT_CLASSIFICATION	1.1592810712431132E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999655793779859	WITHOUT_CLASSIFICATION	3.442062201418233E-5	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999993385115806	WITHOUT_CLASSIFICATION	6.61488419405131E-6	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999306721942796	WITHOUT_CLASSIFICATION	6.932780572044817E-5	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9996385896574058	WITHOUT_CLASSIFICATION	3.614103425942029E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999712554409204	WITHOUT_CLASSIFICATION	2.8744559079637154E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9995382455936953	WITHOUT_CLASSIFICATION	4.6175440630463976E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999930703824151	WITHOUT_CLASSIFICATION	6.929617584781119E-6	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999677217335597	WITHOUT_CLASSIFICATION	3.227826644030793E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999892638191888	WITHOUT_CLASSIFICATION	1.0736180811161045E-5	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999928425596994	WITHOUT_CLASSIFICATION	7.157440300592516E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999196864689043	WITHOUT_CLASSIFICATION	8.031353109575277E-5	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999833579811178	WITHOUT_CLASSIFICATION	1.6642018882193573E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999984622609825	WITHOUT_CLASSIFICATION	1.5377390175629625E-6	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999577825899304	WITHOUT_CLASSIFICATION	4.2217410069590154E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999690681692066	WITHOUT_CLASSIFICATION	3.0931830793395205E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996842318188273	WITHOUT_CLASSIFICATION	3.15768181172798E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999963357071948	WITHOUT_CLASSIFICATION	3.6642928050580843E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999962663729887	WITHOUT_CLASSIFICATION	3.733627011287532E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999995233546733	WITHOUT_CLASSIFICATION	4.766453267014171E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998921898284184	WITHOUT_CLASSIFICATION	1.0781017158148626E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999878543018315	WITHOUT_CLASSIFICATION	1.2145698168559757E-5	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9998949626527063	WITHOUT_CLASSIFICATION	1.0503734729378636E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999841611827045	WITHOUT_CLASSIFICATION	1.5838817295473513E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999841611827045	WITHOUT_CLASSIFICATION	1.5838817295473513E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999772260744213	WITHOUT_CLASSIFICATION	2.2773925578624006E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999606310953314	WITHOUT_CLASSIFICATION	3.936890466870476E-5	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999890097572631	WITHOUT_CLASSIFICATION	1.0990242736868073E-5	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999846677895073	WITHOUT_CLASSIFICATION	1.5332210492601744E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999604754188818	WITHOUT_CLASSIFICATION	3.952458111824916E-5	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999889263867706	WITHOUT_CLASSIFICATION	1.1073613229315999E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999866806368521	WITHOUT_CLASSIFICATION	1.33193631479366E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999997253746132	WITHOUT_CLASSIFICATION	2.7462538684036845E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998529572484794	WITHOUT_CLASSIFICATION	1.4704275152065173E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999284752840178	WITHOUT_CLASSIFICATION	7.15247159821848E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999994512921899	WITHOUT_CLASSIFICATION	5.487078100857211E-7	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999981010922884	WITHOUT_CLASSIFICATION	1.8989077116298046E-6	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999921710178177	WITHOUT_CLASSIFICATION	7.828982182304424E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.99999494593778	WITHOUT_CLASSIFICATION	5.0540622198911785E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999916507963957	WITHOUT_CLASSIFICATION	8.349203604237896E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999991994248272	WITHOUT_CLASSIFICATION	8.005751728060061E-7	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999991994248272	WITHOUT_CLASSIFICATION	8.005751728060061E-7	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999770119409074	WITHOUT_CLASSIFICATION	2.298805909252167E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999990284152191	WITHOUT_CLASSIFICATION	9.71584780800913E-7	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999983344486029	WITHOUT_CLASSIFICATION	1.665551397101173E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999987325126254	WITHOUT_CLASSIFICATION	1.267487374536934E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9989680911610199	WITHOUT_CLASSIFICATION	0.0010319088389800076	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999852373044872	WITHOUT_CLASSIFICATION	1.4762695512784949E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999392149735421	WITHOUT_CLASSIFICATION	6.078502645789043E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999392149735421	WITHOUT_CLASSIFICATION	6.078502645789043E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999745822575148	WITHOUT_CLASSIFICATION	2.5417742485145975E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999972578224233	WITHOUT_CLASSIFICATION	2.742177576774469E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999881228596367	WITHOUT_CLASSIFICATION	1.1877140363286552E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997405527974	WITHOUT_CLASSIFICATION	2.594472026158132E-7	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999305616556581	WITHOUT_CLASSIFICATION	6.943834434192929E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994131946403483	WITHOUT_CLASSIFICATION	5.868053596517409E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999885132260253	WITHOUT_CLASSIFICATION	1.148677397470111E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999817063540031	WITHOUT_CLASSIFICATION	1.8293645996970264E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999707669936262	WITHOUT_CLASSIFICATION	2.923300637383348E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999717487820671	WITHOUT_CLASSIFICATION	2.8251217932833127E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999940338562286	WITHOUT_CLASSIFICATION	5.966143771370543E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.99993257591324	WITHOUT_CLASSIFICATION	6.742408676000888E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998332552108602	WITHOUT_CLASSIFICATION	1.6674478913980434E-4	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998043327369419	WITHOUT_CLASSIFICATION	1.956672630581724E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999964125820211	WITHOUT_CLASSIFICATION	3.5874179788957115E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999972415319468	WITHOUT_CLASSIFICATION	2.7584680531499557E-6	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999410032908803	WITHOUT_CLASSIFICATION	5.8996709119830735E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999653228874619	WITHOUT_CLASSIFICATION	3.4677112538176356E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999922261385109	WITHOUT_CLASSIFICATION	7.773861488996461E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9994645352552985	WITHOUT_CLASSIFICATION	5.354647447014355E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999762697363404	WITHOUT_CLASSIFICATION	2.3730263659639868E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997123795549109	WITHOUT_CLASSIFICATION	2.8762044508912304E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999785618354567	WITHOUT_CLASSIFICATION	2.143816454328689E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998888686104906	WITHOUT_CLASSIFICATION	1.1113138950933732E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999954113982064	WITHOUT_CLASSIFICATION	4.5886017935787205E-6	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998906684306156	WITHOUT_CLASSIFICATION	1.0933156938441805E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.999991628890729	WITHOUT_CLASSIFICATION	8.371109271005469E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999978148221395	WITHOUT_CLASSIFICATION	2.185177860580817E-6	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999904590536538	WITHOUT_CLASSIFICATION	9.54094634625744E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999688492190482	WITHOUT_CLASSIFICATION	3.1150780951742075E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999563854099119	WITHOUT_CLASSIFICATION	4.3614590088108623E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999694755501091	WITHOUT_CLASSIFICATION	3.0524449890913126E-5	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9996680378027495	WITHOUT_CLASSIFICATION	3.3196219725054667E-4	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999871209927014	WITHOUT_CLASSIFICATION	1.2879007298543272E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999675682130578	WITHOUT_CLASSIFICATION	3.2431786942293036E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9996717706767774	WITHOUT_CLASSIFICATION	3.282293232226679E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9997610628654952	WITHOUT_CLASSIFICATION	2.3893713450497857E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9997435079378785	WITHOUT_CLASSIFICATION	2.564920621215593E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999518373495608	WITHOUT_CLASSIFICATION	4.816265043921737E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999659454674142	WITHOUT_CLASSIFICATION	3.405453258582829E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999928231590741	WITHOUT_CLASSIFICATION	7.176840925840185E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999210340227757	WITHOUT_CLASSIFICATION	7.896597722426998E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9998220180525667	WITHOUT_CLASSIFICATION	1.7798194743339786E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999758161902903	WITHOUT_CLASSIFICATION	2.4183809709605496E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999987337599144	WITHOUT_CLASSIFICATION	1.2662400856002553E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999925124229686	WITHOUT_CLASSIFICATION	7.4875770313986555E-6	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999518373495608	WITHOUT_CLASSIFICATION	4.816265043921737E-5	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999659454674142	WITHOUT_CLASSIFICATION	3.405453258582829E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999896393012547	WITHOUT_CLASSIFICATION	1.0360698745265217E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997334181468691	WITHOUT_CLASSIFICATION	2.6658185313079295E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999868252177145	WITHOUT_CLASSIFICATION	1.3174782285540502E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999864801957914	WITHOUT_CLASSIFICATION	1.3519804208590157E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999855463155336	WITHOUT_CLASSIFICATION	1.4453684466461893E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999992953399807	WITHOUT_CLASSIFICATION	7.046600192720416E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999050512519317	WITHOUT_CLASSIFICATION	9.494874806819575E-5	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9998573478834364	WITHOUT_CLASSIFICATION	1.4265211656365334E-4	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999799648026476	WITHOUT_CLASSIFICATION	2.0035197352398032E-4	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9989575278719285	WITHOUT_CLASSIFICATION	0.0010424721280715514	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999957184555446	WITHOUT_CLASSIFICATION	4.281544455427628E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9989575278719285	WITHOUT_CLASSIFICATION	0.0010424721280715514	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999967015346435	WITHOUT_CLASSIFICATION	3.298465356514379E-6	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999721659018402	WITHOUT_CLASSIFICATION	2.7834098159740327E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999969231769675	WITHOUT_CLASSIFICATION	3.0768230325360614E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893378865802	WITHOUT_CLASSIFICATION	1.0662113419789523E-5	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9994305813357592	WITHOUT_CLASSIFICATION	5.69418664240697E-4	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9998005587487263	WITHOUT_CLASSIFICATION	1.9944125127363638E-4	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9998005587487263	WITHOUT_CLASSIFICATION	1.9944125127363638E-4	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999925912592608	WITHOUT_CLASSIFICATION	7.408740739112116E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999980494296028	WITHOUT_CLASSIFICATION	1.950570397225211E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999754001693366	WITHOUT_CLASSIFICATION	2.4599830663359192E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.99996716479253	WITHOUT_CLASSIFICATION	3.2835207469954146E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999972450726267	WITHOUT_CLASSIFICATION	2.754927373307871E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999004166768773	WITHOUT_CLASSIFICATION	9.958332312260624E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999526624028225	WITHOUT_CLASSIFICATION	4.733759717742111E-5	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999861563371297	WITHOUT_CLASSIFICATION	1.3843662870212677E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9996915034087067	WITHOUT_CLASSIFICATION	3.0849659129327916E-4	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9997924357442924	WITHOUT_CLASSIFICATION	2.0756425570754878E-4	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9997268247623337	WITHOUT_CLASSIFICATION	2.73175237666306E-4	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9993560803186889	WITHOUT_CLASSIFICATION	6.439196813109645E-4	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9998248973507128	WITHOUT_CLASSIFICATION	1.751026492871631E-4	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999532195391836	WITHOUT_CLASSIFICATION	4.678046081641467E-5	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999973226052385	WITHOUT_CLASSIFICATION	2.6773947615044585E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999942312844342	WITHOUT_CLASSIFICATION	5.768715565803712E-6	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999793645429015	WITHOUT_CLASSIFICATION	2.0635457098569178E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999822066729274	WITHOUT_CLASSIFICATION	1.779332707256573E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999921928739789	WITHOUT_CLASSIFICATION	7.807126021173357E-6	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9986521805915664	WITHOUT_CLASSIFICATION	0.0013478194084335783	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999510263960977	WITHOUT_CLASSIFICATION	4.8973603902273735E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999224746088364	WITHOUT_CLASSIFICATION	7.752539116359935E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999942214011034	WITHOUT_CLASSIFICATION	5.778598896634123E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999674585092414	WITHOUT_CLASSIFICATION	3.254149075857599E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999634642862275	WITHOUT_CLASSIFICATION	3.653571377241501E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9995342254987009	WITHOUT_CLASSIFICATION	4.6577450129918604E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9998120957415008	WITHOUT_CLASSIFICATION	1.8790425849916448E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999533717662845	WITHOUT_CLASSIFICATION	4.662823371552128E-5	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999427531779763	WITHOUT_CLASSIFICATION	5.724682202363073E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9991908873689306	WITHOUT_CLASSIFICATION	8.091126310693054E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9999367129393426	WITHOUT_CLASSIFICATION	6.328706065740589E-5	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999891962864293	WITHOUT_CLASSIFICATION	1.0803713570685057E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999526624028225	WITHOUT_CLASSIFICATION	4.733759717742111E-5	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999901653158991	WITHOUT_CLASSIFICATION	9.834684100926763E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9997963777546067	WITHOUT_CLASSIFICATION	2.036222453933057E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9932744743585115	WITHOUT_CLASSIFICATION	0.006725525641488568	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999418291016012	WITHOUT_CLASSIFICATION	5.8170898398739225E-5	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999958220737319	WITHOUT_CLASSIFICATION	4.177926268062284E-6	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999835192731313	WITHOUT_CLASSIFICATION	1.648072686868323E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.99996716479253	WITHOUT_CLASSIFICATION	3.2835207469954146E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.99996716479253	WITHOUT_CLASSIFICATION	3.2835207469954146E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999747538392941	WITHOUT_CLASSIFICATION	2.5246160705787326E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999927270458404	WITHOUT_CLASSIFICATION	7.272954159589666E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9997893324585543	WITHOUT_CLASSIFICATION	2.1066754144576257E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999875280511858	WITHOUT_CLASSIFICATION	1.2471948814177533E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999582130242614	WITHOUT_CLASSIFICATION	4.178697573866953E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999787006367554	WITHOUT_CLASSIFICATION	2.1299363244597416E-5	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999865301836797	WITHOUT_CLASSIFICATION	1.3469816320468178E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9997688723590572	WITHOUT_CLASSIFICATION	2.3112764094268488E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999243461492373	WITHOUT_CLASSIFICATION	7.565385076269754E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999277198717935	WITHOUT_CLASSIFICATION	7.228012820649737E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999820538718484	WITHOUT_CLASSIFICATION	1.7946128151650235E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9981954805166399	WITHOUT_CLASSIFICATION	0.0018045194833601667	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998536388569972	WITHOUT_CLASSIFICATION	1.4636114300281862E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999277198717935	WITHOUT_CLASSIFICATION	7.228012820649737E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999904424102316	WITHOUT_CLASSIFICATION	9.557589768400466E-5	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9996274732793953	WITHOUT_CLASSIFICATION	3.7252672060472246E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999217577900053	WITHOUT_CLASSIFICATION	7.824220999479922E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8475483818322652	WITHOUT_CLASSIFICATION	0.15245161816773486	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9981954805166399	WITHOUT_CLASSIFICATION	0.0018045194833601667	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.99999441423623	WITHOUT_CLASSIFICATION	5.5857637699555075E-6	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999974048454994	WITHOUT_CLASSIFICATION	2.595154500669469E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999947874781414	WITHOUT_CLASSIFICATION	5.2125218586151974E-6	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999993983511435	WITHOUT_CLASSIFICATION	6.016488563996129E-7	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9991176841004703	WITHOUT_CLASSIFICATION	8.823158995296883E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999509025810535	WITHOUT_CLASSIFICATION	4.909741894659729E-5	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999975604085755	WITHOUT_CLASSIFICATION	2.4395914246028356E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998431182574906	WITHOUT_CLASSIFICATION	1.5688174250932276E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999930532497334	WITHOUT_CLASSIFICATION	6.946750266575114E-6	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999898454753304	WITHOUT_CLASSIFICATION	1.0154524669557874E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999941514982963	WITHOUT_CLASSIFICATION	5.848501703683281E-6	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999668296963625	WITHOUT_CLASSIFICATION	3.317030363748461E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999277198717935	WITHOUT_CLASSIFICATION	7.228012820649737E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.99999441423623	WITHOUT_CLASSIFICATION	5.5857637699555075E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999947874781414	WITHOUT_CLASSIFICATION	5.2125218586151974E-6	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.999959005376317	WITHOUT_CLASSIFICATION	4.0994623682967495E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999986736736334	WITHOUT_CLASSIFICATION	1.326326366577393E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999948976041528	WITHOUT_CLASSIFICATION	5.1023958471209795E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9981954805166399	WITHOUT_CLASSIFICATION	0.0018045194833601667	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999991149226702	WITHOUT_CLASSIFICATION	8.850773297730838E-7	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998640026736945	WITHOUT_CLASSIFICATION	1.359973263055157E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9996926366126974	WITHOUT_CLASSIFICATION	3.07363387302559E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998200735628145	WITHOUT_CLASSIFICATION	1.7992643718546563E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998431182574906	WITHOUT_CLASSIFICATION	1.5688174250932276E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999904424102316	WITHOUT_CLASSIFICATION	9.557589768400466E-5	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9996677559389994	WITHOUT_CLASSIFICATION	3.322440610005507E-4	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999964224710836	WITHOUT_CLASSIFICATION	3.577528916587056E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999864173935703	WITHOUT_CLASSIFICATION	1.3582606429696773E-4	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997603201455462	WITHOUT_CLASSIFICATION	2.3967985445383437E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999705878667153	WITHOUT_CLASSIFICATION	2.941213328465406E-5	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998454200692448	WITHOUT_CLASSIFICATION	1.5457993075530344E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999087585647837	WITHOUT_CLASSIFICATION	9.124143521632366E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893378865802	WITHOUT_CLASSIFICATION	1.0662113419789523E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959173496425	WITHOUT_CLASSIFICATION	4.082650357443718E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999856088173151	WITHOUT_CLASSIFICATION	1.4391182684897922E-5	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998981607463215	WITHOUT_CLASSIFICATION	1.0183925367840754E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999678780420197	WITHOUT_CLASSIFICATION	3.212195798022279E-5	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999082076707507	WITHOUT_CLASSIFICATION	9.179232924925199E-5	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999816167176458	WITHOUT_CLASSIFICATION	1.838328235420106E-5	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999589731330906	WITHOUT_CLASSIFICATION	4.102686690944667E-5	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999875475711094	WITHOUT_CLASSIFICATION	1.245242889045652E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998200735628145	WITHOUT_CLASSIFICATION	1.7992643718546563E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9996832248162375	WITHOUT_CLASSIFICATION	3.167751837624761E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9997211192937397	WITHOUT_CLASSIFICATION	2.7888070626023407E-4	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9992918591244874	WITHOUT_CLASSIFICATION	7.081408755126907E-4	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998897009720389	WITHOUT_CLASSIFICATION	1.1029902796107914E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9992401522597884	WITHOUT_CLASSIFICATION	7.598477402117733E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999908420588514	WITHOUT_CLASSIFICATION	9.157941148676547E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999946907264803	WITHOUT_CLASSIFICATION	5.309273519753262E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998381228208604	WITHOUT_CLASSIFICATION	1.6187717913958736E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999982392815782	WITHOUT_CLASSIFICATION	1.7607184217203545E-6	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999257028372421	WITHOUT_CLASSIFICATION	7.429716275793691E-5	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999680757793468	WITHOUT_CLASSIFICATION	3.19242206531161E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999531915105921	WITHOUT_CLASSIFICATION	4.680848940795828E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999336012683163	WITHOUT_CLASSIFICATION	6.639873168374973E-5	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999470643221071	WITHOUT_CLASSIFICATION	5.293567789289649E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999973061553588	WITHOUT_CLASSIFICATION	2.6938446411962143E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999073581505116	WITHOUT_CLASSIFICATION	9.26418494883296E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9998120231437305	WITHOUT_CLASSIFICATION	1.8797685626953668E-4	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9998817486067135	WITHOUT_CLASSIFICATION	1.182513932864877E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999950161516149	WITHOUT_CLASSIFICATION	4.983848385096665E-6	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999808628127105	WITHOUT_CLASSIFICATION	1.913718728951546E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9997842997133636	WITHOUT_CLASSIFICATION	2.157002866364712E-4	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999971107119296	WITHOUT_CLASSIFICATION	2.8892880703923256E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999890290273835	WITHOUT_CLASSIFICATION	1.0970972616456483E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999985357385803	WITHOUT_CLASSIFICATION	1.4642614196639892E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999921180235359	WITHOUT_CLASSIFICATION	7.881976464051924E-6	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9911579050907421	WITHOUT_CLASSIFICATION	0.008842094909257943	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9987043579007712	WITHOUT_CLASSIFICATION	0.0012956420992288268	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999962499712609	WITHOUT_CLASSIFICATION	3.750028739094922E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999844650859122	WITHOUT_CLASSIFICATION	1.5534914087811785E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9996716721325156	WITHOUT_CLASSIFICATION	3.2832786748435594E-4	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999990470644046	WITHOUT_CLASSIFICATION	9.529355954203235E-7	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999890231657458	WITHOUT_CLASSIFICATION	1.0976834254181202E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999918436915974	WITHOUT_CLASSIFICATION	8.15630840266952E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999864039556657	WITHOUT_CLASSIFICATION	1.3596044334348858E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999960346931184	WITHOUT_CLASSIFICATION	3.965306881605074E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999718336611806	WITHOUT_CLASSIFICATION	2.8166338819398147E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999625292452947	WITHOUT_CLASSIFICATION	3.747075470528659E-5	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999919924193434	WITHOUT_CLASSIFICATION	8.007580656516086E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999718336611806	WITHOUT_CLASSIFICATION	2.8166338819398147E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999960346931184	WITHOUT_CLASSIFICATION	3.965306881605074E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999625292452947	WITHOUT_CLASSIFICATION	3.747075470528659E-5	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9998958667139694	WITHOUT_CLASSIFICATION	1.0413328603070467E-4	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999881908089973	WITHOUT_CLASSIFICATION	1.1809191002867792E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999993555609235	WITHOUT_CLASSIFICATION	6.444390765627092E-7	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999828756923614	WITHOUT_CLASSIFICATION	1.712430763855181E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999982891781107	WITHOUT_CLASSIFICATION	1.7108218892501827E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.99993326087578	WITHOUT_CLASSIFICATION	6.6739124219912E-5	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999892688614436	WITHOUT_CLASSIFICATION	1.07311385564652E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999890684530559	WITHOUT_CLASSIFICATION	1.0931546944097032E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999230987963	WITHOUT_CLASSIFICATION	7.690120369983489E-7	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998835659511431	WITHOUT_CLASSIFICATION	1.1643404885684393E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999860726733477	WITHOUT_CLASSIFICATION	1.3927326652236546E-5	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999529284969925	WITHOUT_CLASSIFICATION	4.707150300746536E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999936386680526	WITHOUT_CLASSIFICATION	6.361331947415473E-6	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999556321130544	WITHOUT_CLASSIFICATION	4.436788694563373E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999995365835196	WITHOUT_CLASSIFICATION	4.634164804068957E-7	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999559056947812	WITHOUT_CLASSIFICATION	4.4094305218873506E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999973856675093	WITHOUT_CLASSIFICATION	2.614332490655367E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999026266433	WITHOUT_CLASSIFICATION	9.737335670655822E-7	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999817751363145	WITHOUT_CLASSIFICATION	1.8224863685526686E-5	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999877776527879	WITHOUT_CLASSIFICATION	1.2222347212057546E-5	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9941398565601036	WITHOUT_CLASSIFICATION	0.005860143439896464	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999956617879325	WITHOUT_CLASSIFICATION	4.338212067420153E-6	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999965644761839	WITHOUT_CLASSIFICATION	3.435523816091633E-5	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999972396579495	WITHOUT_CLASSIFICATION	2.7603420503857455E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999874184055018	WITHOUT_CLASSIFICATION	1.2581594498250414E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999874184055018	WITHOUT_CLASSIFICATION	1.2581594498250414E-5	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999965428136122	WITHOUT_CLASSIFICATION	3.4571863878416543E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999965428136122	WITHOUT_CLASSIFICATION	3.4571863878416543E-6	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9999870944684291	WITHOUT_CLASSIFICATION	1.2905531570954139E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999973856675093	WITHOUT_CLASSIFICATION	2.614332490655367E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998096767493481	WITHOUT_CLASSIFICATION	1.9032325065204323E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999967055859654	WITHOUT_CLASSIFICATION	3.294414034608624E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999500638090445	WITHOUT_CLASSIFICATION	4.993619095542523E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999500638090445	WITHOUT_CLASSIFICATION	4.993619095542523E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999874971143372	WITHOUT_CLASSIFICATION	1.2502885662813967E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999885944858518	WITHOUT_CLASSIFICATION	1.1405514148285583E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999996502592528	WITHOUT_CLASSIFICATION	3.497407472066879E-6	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999280263601532	WITHOUT_CLASSIFICATION	7.197363984670506E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999615892449342	WITHOUT_CLASSIFICATION	3.841075506574251E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999994126857741	WITHOUT_CLASSIFICATION	5.873142259076018E-7	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999959049480124	WITHOUT_CLASSIFICATION	4.0950519875893825E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999898388641819	WITHOUT_CLASSIFICATION	1.0161135818009085E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999616068472019	WITHOUT_CLASSIFICATION	3.83931527981049E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9998872399471939	WITHOUT_CLASSIFICATION	1.127600528061278E-4	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999879494134511	WITHOUT_CLASSIFICATION	1.2050586548902706E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999796254478632	WITHOUT_CLASSIFICATION	2.0374552136798235E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999937695135283	WITHOUT_CLASSIFICATION	6.230486471762609E-6	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999480904366017	WITHOUT_CLASSIFICATION	5.190956339833328E-5	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9749371877586186	WITHOUT_CLASSIFICATION	0.025062812241381474	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999825442392136	WITHOUT_CLASSIFICATION	1.7455760786407415E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123257989805	WITHOUT_CLASSIFICATION	8.767420101952122E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998425490953078	WITHOUT_CLASSIFICATION	1.5745090469226417E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999955795396621	WITHOUT_CLASSIFICATION	4.420460337893473E-6	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999943482194997	WITHOUT_CLASSIFICATION	5.651780500247734E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999362744086739	WITHOUT_CLASSIFICATION	6.372559132603228E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999962032075476	WITHOUT_CLASSIFICATION	3.796792452301355E-6	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999089184311867	WITHOUT_CLASSIFICATION	9.108156881332013E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999845820545783	WITHOUT_CLASSIFICATION	1.5417945421687465E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9985073617674912	WITHOUT_CLASSIFICATION	0.0014926382325088489	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999975681755757	WITHOUT_CLASSIFICATION	2.4318244242171164E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999531915105921	WITHOUT_CLASSIFICATION	4.680848940795828E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999532723779383	WITHOUT_CLASSIFICATION	4.672762206161965E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999984917336026	WITHOUT_CLASSIFICATION	1.5082663974541661E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999872701370151	WITHOUT_CLASSIFICATION	1.2729862984897555E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969318606403	WITHOUT_CLASSIFICATION	3.06813935969577E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999223666295362	WITHOUT_CLASSIFICATION	7.763337046385642E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999223666295362	WITHOUT_CLASSIFICATION	7.763337046385642E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999984229579183	WITHOUT_CLASSIFICATION	1.5770420817141415E-6	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9998739360604045	WITHOUT_CLASSIFICATION	1.2606393959549458E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9998888357740344	WITHOUT_CLASSIFICATION	1.1116422596555727E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9998888357740344	WITHOUT_CLASSIFICATION	1.1116422596555727E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999410725611663	WITHOUT_CLASSIFICATION	5.8927438833712885E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998315248707522	WITHOUT_CLASSIFICATION	1.6847512924774878E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999596163900616	WITHOUT_CLASSIFICATION	4.038360993839663E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998606086753132	WITHOUT_CLASSIFICATION	1.3939132468680725E-4	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999517477352188	WITHOUT_CLASSIFICATION	4.8252264781207103E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999956092437058	WITHOUT_CLASSIFICATION	4.390756294172934E-6	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999636816785459	WITHOUT_CLASSIFICATION	3.631832145424265E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999919777757958	WITHOUT_CLASSIFICATION	8.022224204152465E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999970989831143	WITHOUT_CLASSIFICATION	2.901016885692031E-5	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999970989831143	WITHOUT_CLASSIFICATION	2.901016885692031E-5	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999827473463114	WITHOUT_CLASSIFICATION	1.7252653688574143E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999960712293197	WITHOUT_CLASSIFICATION	3.928770680360138E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999960712293197	WITHOUT_CLASSIFICATION	3.928770680360138E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999770577521807	WITHOUT_CLASSIFICATION	2.294224781934452E-5	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999990414284343	WITHOUT_CLASSIFICATION	9.585715657073137E-6	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9963422192866366	WITHOUT_CLASSIFICATION	0.0036577807133633617	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999734841492278	WITHOUT_CLASSIFICATION	2.651585077219265E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999936714831024	WITHOUT_CLASSIFICATION	6.328516897624146E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999863388408702	WITHOUT_CLASSIFICATION	1.3661159129835714E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999964893046364	WITHOUT_CLASSIFICATION	3.5106953635918624E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999559970135505	WITHOUT_CLASSIFICATION	4.400298644947463E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999822593961136	WITHOUT_CLASSIFICATION	1.774060388641082E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999905044379266	WITHOUT_CLASSIFICATION	9.495562073338954E-6	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999878674092301	WITHOUT_CLASSIFICATION	1.2132590770027226E-5	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999874596927326	WITHOUT_CLASSIFICATION	1.2540307267424473E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989859045013176	WITHOUT_CLASSIFICATION	0.001014095498682317	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989859045013176	WITHOUT_CLASSIFICATION	0.001014095498682317	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989859045013176	WITHOUT_CLASSIFICATION	0.001014095498682317	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9989859045013176	WITHOUT_CLASSIFICATION	0.001014095498682317	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999978713894199	WITHOUT_CLASSIFICATION	2.12861058009756E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999352276270111	WITHOUT_CLASSIFICATION	6.477237298888926E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998931426106853	WITHOUT_CLASSIFICATION	1.0685738931465478E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9996655912756325	WITHOUT_CLASSIFICATION	3.344087243675083E-4	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999833327430622	WITHOUT_CLASSIFICATION	1.6667256937875298E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999578675442414	WITHOUT_CLASSIFICATION	4.213245575860156E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999956884768038	WITHOUT_CLASSIFICATION	4.31152319619814E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999542833739106	WITHOUT_CLASSIFICATION	4.571662608944933E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999939057453693	WITHOUT_CLASSIFICATION	6.094254630713439E-6	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999895067477379	WITHOUT_CLASSIFICATION	1.0493252262206708E-5	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999504655262313	WITHOUT_CLASSIFICATION	4.9534473768741696E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999895492325529	WITHOUT_CLASSIFICATION	1.0450767447154146E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999965796305217	WITHOUT_CLASSIFICATION	3.420369478361048E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999838713694841	WITHOUT_CLASSIFICATION	1.6128630516014544E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999870170928739	WITHOUT_CLASSIFICATION	1.2982907126214853E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999895492325529	WITHOUT_CLASSIFICATION	1.0450767447154146E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999773870895251	WITHOUT_CLASSIFICATION	2.2612910474799954E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999977746326255	WITHOUT_CLASSIFICATION	2.2253673744920367E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999827615894118	WITHOUT_CLASSIFICATION	1.7238410588215716E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999623065352697	WITHOUT_CLASSIFICATION	3.769346473029972E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9995976286776384	WITHOUT_CLASSIFICATION	4.0237132236164606E-4	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999816446071149	WITHOUT_CLASSIFICATION	1.8355392885002143E-5	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999718037223094	WITHOUT_CLASSIFICATION	2.819627769062284E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999893915739765	WITHOUT_CLASSIFICATION	1.0608426023547729E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865306912815	WITHOUT_CLASSIFICATION	1.3469308718359275E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999544129778306	WITHOUT_CLASSIFICATION	4.5587022169296064E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921182490784	WITHOUT_CLASSIFICATION	7.881750921589842E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999903138620259	WITHOUT_CLASSIFICATION	9.686137974175196E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999716758652923	WITHOUT_CLASSIFICATION	2.8324134707675738E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996636661013406	WITHOUT_CLASSIFICATION	3.3633389865945514E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999860314258573	WITHOUT_CLASSIFICATION	1.3968574142810107E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999730603887568	WITHOUT_CLASSIFICATION	2.69396112431946E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999993456290648	WITHOUT_CLASSIFICATION	6.5437093520896895E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999663435263677	WITHOUT_CLASSIFICATION	3.3656473632385974E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999786516871121	WITHOUT_CLASSIFICATION	2.134831288787223E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999663435263677	WITHOUT_CLASSIFICATION	3.3656473632385974E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999939883928279	WITHOUT_CLASSIFICATION	6.011607172033467E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999782403497	WITHOUT_CLASSIFICATION	2.1759650304574987E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998555257310545	WITHOUT_CLASSIFICATION	1.444742689454034E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999711785321959	WITHOUT_CLASSIFICATION	2.8821467804179885E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999993456290648	WITHOUT_CLASSIFICATION	6.5437093520896895E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999786516871121	WITHOUT_CLASSIFICATION	2.134831288787223E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999939883928279	WITHOUT_CLASSIFICATION	6.011607172033467E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999315759896448	WITHOUT_CLASSIFICATION	6.842401035524269E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.999948716060937	WITHOUT_CLASSIFICATION	5.1283939062996624E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999411325727323	WITHOUT_CLASSIFICATION	5.8867427267799656E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9998673931738674	WITHOUT_CLASSIFICATION	1.3260682613247868E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999528847344951	WITHOUT_CLASSIFICATION	4.711526550489792E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999888332976541	WITHOUT_CLASSIFICATION	1.1166702345837044E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123257989805	WITHOUT_CLASSIFICATION	8.767420101952122E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999782403497	WITHOUT_CLASSIFICATION	2.1759650304574987E-7	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999986622866626	WITHOUT_CLASSIFICATION	1.3377133374747026E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999927087730723	WITHOUT_CLASSIFICATION	7.291226927558107E-6	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999932886027337	WITHOUT_CLASSIFICATION	6.711397266164375E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123257989805	WITHOUT_CLASSIFICATION	8.767420101952122E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999994146224291	WITHOUT_CLASSIFICATION	5.853775709069054E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123257989805	WITHOUT_CLASSIFICATION	8.767420101952122E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999974195960903	WITHOUT_CLASSIFICATION	2.5804039096896678E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998764052332919	WITHOUT_CLASSIFICATION	1.235947667080899E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998964068613905	WITHOUT_CLASSIFICATION	1.0359313860959512E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9986498235672655	WITHOUT_CLASSIFICATION	0.0013501764327345472	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999828087681224	WITHOUT_CLASSIFICATION	1.7191231877558697E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.999976608467681	WITHOUT_CLASSIFICATION	2.3391532318955568E-5	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999806603334315	WITHOUT_CLASSIFICATION	1.9339666568577924E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999987083803447	WITHOUT_CLASSIFICATION	1.2916196552861031E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999594025191446	WITHOUT_CLASSIFICATION	4.059748085550425E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999780525041625	WITHOUT_CLASSIFICATION	2.1947495837466878E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994345537256891	WITHOUT_CLASSIFICATION	5.654462743108317E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999892879861021	WITHOUT_CLASSIFICATION	1.0712013897924736E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9963422192866366	WITHOUT_CLASSIFICATION	0.0036577807133633617	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999635575096326	WITHOUT_CLASSIFICATION	3.644249036730248E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999901569022536	WITHOUT_CLASSIFICATION	9.843097746456678E-6	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999766353168223	WITHOUT_CLASSIFICATION	2.336468317772415E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999431929842588	WITHOUT_CLASSIFICATION	5.680701574128192E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999870101575316	WITHOUT_CLASSIFICATION	1.2989842468558879E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999984118577581	WITHOUT_CLASSIFICATION	1.5881422418678641E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999218853407427	WITHOUT_CLASSIFICATION	7.811465925728971E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999836538002351	WITHOUT_CLASSIFICATION	1.6346199764806743E-5	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999944673639001	WITHOUT_CLASSIFICATION	5.532636099931478E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999906811196514	WITHOUT_CLASSIFICATION	9.318880348665861E-6	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9963135391654813	WITHOUT_CLASSIFICATION	0.003686460834518631	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999988604827973	WITHOUT_CLASSIFICATION	1.1395172028200327E-6	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999986420445602	WITHOUT_CLASSIFICATION	1.3579554397444625E-6	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999852641531182	WITHOUT_CLASSIFICATION	1.4735846881929064E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999967842452403	WITHOUT_CLASSIFICATION	3.2157547596973627E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9994167451327979	WITHOUT_CLASSIFICATION	5.832548672020904E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999923730753849	WITHOUT_CLASSIFICATION	7.626924615152229E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999959194623285	WITHOUT_CLASSIFICATION	4.080537671445477E-6	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999960072537104	WITHOUT_CLASSIFICATION	3.9927462895641015E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998066174943926	WITHOUT_CLASSIFICATION	1.933825056074633E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999871902270794	WITHOUT_CLASSIFICATION	1.2809772920576638E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.996189075772578	WITHOUT_CLASSIFICATION	0.003810924227422136	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999219178412821	WITHOUT_CLASSIFICATION	7.808215871780747E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999969162577315	WITHOUT_CLASSIFICATION	3.083742268493492E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9997823563553773	WITHOUT_CLASSIFICATION	2.1764364462277817E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998993175093066	WITHOUT_CLASSIFICATION	1.0068249069347642E-4	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999754127033746	WITHOUT_CLASSIFICATION	2.4587296625295673E-5	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9963409091228442	WITHOUT_CLASSIFICATION	0.003659090877155809	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995982511801	WITHOUT_CLASSIFICATION	4.017488198467322E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999802861890542	WITHOUT_CLASSIFICATION	1.971381094578876E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.999792111100326	WITHOUT_CLASSIFICATION	2.078888996739695E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.999792111100326	WITHOUT_CLASSIFICATION	2.078888996739695E-4	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999972352571902	WITHOUT_CLASSIFICATION	2.7647428097609834E-6	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999987083803447	WITHOUT_CLASSIFICATION	1.2916196552861031E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999939502431834	WITHOUT_CLASSIFICATION	6.049756816592584E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999776278494039	WITHOUT_CLASSIFICATION	2.2372150596069535E-5	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999987570734559	WITHOUT_CLASSIFICATION	1.242926544135488E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999958952997441	WITHOUT_CLASSIFICATION	4.10470025592715E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998836106674291	WITHOUT_CLASSIFICATION	1.163893325708415E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9984758625955855	WITHOUT_CLASSIFICATION	0.0015241374044144477	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999886099936727	WITHOUT_CLASSIFICATION	1.1390006327388135E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999985713878887	WITHOUT_CLASSIFICATION	1.4286121112819995E-6	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999923832517874	WITHOUT_CLASSIFICATION	7.616748212623901E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.999985448368131	WITHOUT_CLASSIFICATION	1.45516318690564E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999991973468052	WITHOUT_CLASSIFICATION	8.026531948163553E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999714191914195	WITHOUT_CLASSIFICATION	2.85808085805161E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999572468402685	WITHOUT_CLASSIFICATION	4.275315973138318E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999931773344972	WITHOUT_CLASSIFICATION	6.822665502827293E-6	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999932589989551	WITHOUT_CLASSIFICATION	6.741001044953996E-6	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999904668793863	WITHOUT_CLASSIFICATION	9.533120613709506E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999777432713172	WITHOUT_CLASSIFICATION	2.2256728682857257E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999867984066952	WITHOUT_CLASSIFICATION	1.3201593304798194E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999055423200895	WITHOUT_CLASSIFICATION	9.445767991039268E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9997967308520952	WITHOUT_CLASSIFICATION	2.0326914790486805E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999979946351897	WITHOUT_CLASSIFICATION	2.005364810301792E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997635222662	WITHOUT_CLASSIFICATION	2.364777337668373E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9963409091228442	WITHOUT_CLASSIFICATION	0.003659090877155809	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999959531181931	WITHOUT_CLASSIFICATION	4.046881806837394E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999669819897559	WITHOUT_CLASSIFICATION	3.301801024403194E-5	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999988317008179	WITHOUT_CLASSIFICATION	1.1682991821184922E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999899792309914	WITHOUT_CLASSIFICATION	1.0020769008545882E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999881076574804	WITHOUT_CLASSIFICATION	1.1892342519667904E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999993430069227	WITHOUT_CLASSIFICATION	6.5699307729284665E-6	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999933616375471	WITHOUT_CLASSIFICATION	6.638362452893598E-5	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999836141897502	WITHOUT_CLASSIFICATION	1.6385810249692295E-5	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999956171098131	WITHOUT_CLASSIFICATION	4.382890186986275E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999854745782573	WITHOUT_CLASSIFICATION	1.4525421742843357E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999615596986428	WITHOUT_CLASSIFICATION	3.844030135728774E-5	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999762538558753	WITHOUT_CLASSIFICATION	2.3746144124777033E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999991214086575	WITHOUT_CLASSIFICATION	8.785913424987869E-6	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999967898716127	WITHOUT_CLASSIFICATION	3.2101283873492183E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999493276596	WITHOUT_CLASSIFICATION	5.067234040876464E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999999493276596	WITHOUT_CLASSIFICATION	5.067234040876464E-7	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999979854026737	WITHOUT_CLASSIFICATION	2.014597326304693E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999901534761897	WITHOUT_CLASSIFICATION	9.846523810281869E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999883299705289	WITHOUT_CLASSIFICATION	1.167002947119947E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999883299705289	WITHOUT_CLASSIFICATION	1.167002947119947E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999957755175897	WITHOUT_CLASSIFICATION	4.2244824103954055E-6	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999600300103855	WITHOUT_CLASSIFICATION	3.9969989614565793E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999983968762554	WITHOUT_CLASSIFICATION	1.6031237446184354E-6	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999997151311909	WITHOUT_CLASSIFICATION	2.848688090913652E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999361104088497	WITHOUT_CLASSIFICATION	6.388959115027569E-5	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999692009802572	WITHOUT_CLASSIFICATION	3.0799019742777076E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999922057014676	WITHOUT_CLASSIFICATION	7.794298532329313E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999922057014676	WITHOUT_CLASSIFICATION	7.794298532329313E-6	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999748558152587	WITHOUT_CLASSIFICATION	2.5144184741341205E-5	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999947851439485	WITHOUT_CLASSIFICATION	5.2148560516205556E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999241904688974	WITHOUT_CLASSIFICATION	7.580953110260942E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999810118710752	WITHOUT_CLASSIFICATION	1.8988128924666883E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999810118710752	WITHOUT_CLASSIFICATION	1.8988128924666883E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999915776985576	WITHOUT_CLASSIFICATION	8.42230144235168E-6	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999322127755393	WITHOUT_CLASSIFICATION	6.77872244606547E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999756846308061	WITHOUT_CLASSIFICATION	2.4315369193872546E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999892486028396	WITHOUT_CLASSIFICATION	1.0751397160536918E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999474475606002	WITHOUT_CLASSIFICATION	5.2552439399719654E-5	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999935726860933	WITHOUT_CLASSIFICATION	6.427313906556387E-6	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999974408432102	WITHOUT_CLASSIFICATION	2.5591567898700475E-6	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999610587193009	WITHOUT_CLASSIFICATION	3.894128069906501E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999869331030603	WITHOUT_CLASSIFICATION	1.3066896939782412E-5	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999942054408797	WITHOUT_CLASSIFICATION	5.7945591202764964E-6	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9988190008801068	WITHOUT_CLASSIFICATION	0.0011809991198931948	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999941330216294	WITHOUT_CLASSIFICATION	5.866978370640487E-6	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9999503922563445	WITHOUT_CLASSIFICATION	4.960774365555418E-5	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999479980716057	WITHOUT_CLASSIFICATION	5.2001928394220285E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9997926503052058	WITHOUT_CLASSIFICATION	2.0734969479414036E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999978877977853	WITHOUT_CLASSIFICATION	2.112202214708454E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999957635030983	WITHOUT_CLASSIFICATION	4.2364969016875295E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999789837393889	WITHOUT_CLASSIFICATION	2.1016260611149977E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999944454561652	WITHOUT_CLASSIFICATION	5.5545438347657435E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999905047880797	WITHOUT_CLASSIFICATION	9.495211920287554E-5	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999527010538108	WITHOUT_CLASSIFICATION	4.7298946189097715E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998892085249016	WITHOUT_CLASSIFICATION	1.1079147509845814E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9993447013030743	WITHOUT_CLASSIFICATION	6.552986969256282E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999953562255676	WITHOUT_CLASSIFICATION	4.64377443238964E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9998337641551333	WITHOUT_CLASSIFICATION	1.6623584486678337E-4	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999878251124373	WITHOUT_CLASSIFICATION	1.2174887562712183E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999940990595535	WITHOUT_CLASSIFICATION	5.900940446501575E-6	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998262566113908	WITHOUT_CLASSIFICATION	1.737433886092098E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999913470630184	WITHOUT_CLASSIFICATION	8.652936981580519E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999908016032714	WITHOUT_CLASSIFICATION	9.198396728605395E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999940522645168	WITHOUT_CLASSIFICATION	5.947735483225897E-6	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999933336782585	WITHOUT_CLASSIFICATION	6.666321741529925E-6	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999996036907853	WITHOUT_CLASSIFICATION	3.963092147157799E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999357852517972	WITHOUT_CLASSIFICATION	6.421474820279484E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999950205547743	WITHOUT_CLASSIFICATION	4.9794452256129725E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999721056895204	WITHOUT_CLASSIFICATION	2.789431047950479E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999349674372104	WITHOUT_CLASSIFICATION	6.503256278952845E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999970273999793	WITHOUT_CLASSIFICATION	2.9726000206595433E-6	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999645827129109	WITHOUT_CLASSIFICATION	3.541728708907206E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999817612990142	WITHOUT_CLASSIFICATION	1.8238700985880718E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999999329488695	WITHOUT_CLASSIFICATION	6.705113051544199E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999933152733882	WITHOUT_CLASSIFICATION	6.684726611806032E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.999863824387209	WITHOUT_CLASSIFICATION	1.3617561279091883E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999938686692719	WITHOUT_CLASSIFICATION	6.131330728128642E-6	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999821505295509	WITHOUT_CLASSIFICATION	1.7849470449201803E-5	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999782428008681	WITHOUT_CLASSIFICATION	2.175719913190012E-5	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999936032946437	WITHOUT_CLASSIFICATION	6.396705356287662E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998804597499833	WITHOUT_CLASSIFICATION	1.1954025001666293E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998831758841684	WITHOUT_CLASSIFICATION	1.1682411583155354E-4	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999507739992672	WITHOUT_CLASSIFICATION	4.9226000732737756E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999000947587199	WITHOUT_CLASSIFICATION	9.990524128016379E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999974241475486	WITHOUT_CLASSIFICATION	2.5758524514172266E-6	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999878241080412	WITHOUT_CLASSIFICATION	1.2175891958921161E-5	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999998530918386	WITHOUT_CLASSIFICATION	1.469081614211762E-7	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999995120383012	WITHOUT_CLASSIFICATION	4.879616988022733E-6	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999908961883872	WITHOUT_CLASSIFICATION	9.10381161270712E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999968206831704	WITHOUT_CLASSIFICATION	3.1793168296834846E-6	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999790583808568	WITHOUT_CLASSIFICATION	2.0941619143231708E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999944515378213	WITHOUT_CLASSIFICATION	5.548462178673448E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999705681727984	WITHOUT_CLASSIFICATION	2.9431827201725672E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999844666005949	WITHOUT_CLASSIFICATION	1.5533399405070136E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999844666005949	WITHOUT_CLASSIFICATION	1.5533399405070136E-5	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999991870419339	WITHOUT_CLASSIFICATION	8.129580660899347E-7	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999982939109586	WITHOUT_CLASSIFICATION	1.706089041467614E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999946659013135	WITHOUT_CLASSIFICATION	5.334098686636746E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999977777980111	WITHOUT_CLASSIFICATION	2.2222019889488943E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999958119466835	WITHOUT_CLASSIFICATION	4.188053316415738E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999992941147021	WITHOUT_CLASSIFICATION	7.058852979105465E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999965778714942	WITHOUT_CLASSIFICATION	3.422128505858147E-6	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999998039392995	WITHOUT_CLASSIFICATION	1.9606070037985727E-7	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999977687694638	WITHOUT_CLASSIFICATION	2.231230536340238E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999973258957631	WITHOUT_CLASSIFICATION	2.674104236988013E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.99999912430529	WITHOUT_CLASSIFICATION	8.756947099399886E-7	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999891979462575	WITHOUT_CLASSIFICATION	1.0802053742487473E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999860164873926	WITHOUT_CLASSIFICATION	1.3983512607407537E-5	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999948889204335	WITHOUT_CLASSIFICATION	5.111079566533227E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999911426360468	WITHOUT_CLASSIFICATION	8.857363953197918E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999911426360468	WITHOUT_CLASSIFICATION	8.857363953197918E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999963273785089	WITHOUT_CLASSIFICATION	3.6726214911067904E-6	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999965901892383	WITHOUT_CLASSIFICATION	3.4098107616661126E-6	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999941458367199	WITHOUT_CLASSIFICATION	5.854163280074693E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999984161311539	WITHOUT_CLASSIFICATION	1.5838688461045354E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999408776099311	WITHOUT_CLASSIFICATION	5.9122390068851243E-5	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997468612600686	WITHOUT_CLASSIFICATION	2.53138739931325E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999201280461941	WITHOUT_CLASSIFICATION	7.987195380584088E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999997445057327	WITHOUT_CLASSIFICATION	2.554942672993808E-6	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999896445389189	WITHOUT_CLASSIFICATION	1.0355461081118322E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999988254700674	WITHOUT_CLASSIFICATION	1.174529932689306E-6	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999987149100452	WITHOUT_CLASSIFICATION	1.2850899547606627E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999874918235138	WITHOUT_CLASSIFICATION	1.2508176486230748E-5	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9997378079493653	WITHOUT_CLASSIFICATION	2.621920506346639E-4	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999983420511527	WITHOUT_CLASSIFICATION	1.6579488472173502E-6	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.999985269483953	WITHOUT_CLASSIFICATION	1.473051604680528E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999865800891015	WITHOUT_CLASSIFICATION	1.341991089846426E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999940301438918	WITHOUT_CLASSIFICATION	5.96985610823051E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999810293128168	WITHOUT_CLASSIFICATION	1.8970687183159784E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999936115787027	WITHOUT_CLASSIFICATION	6.38842129738804E-6	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999977293290756	WITHOUT_CLASSIFICATION	2.2706709244629527E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999525451091349	WITHOUT_CLASSIFICATION	4.7454890865133836E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999292278092	WITHOUT_CLASSIFICATION	7.077219073338494E-8	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999993923467652	WITHOUT_CLASSIFICATION	6.076532348787736E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998957065331184	WITHOUT_CLASSIFICATION	1.0429346688161757E-4	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9998817888464214	WITHOUT_CLASSIFICATION	1.182111535786751E-4	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999990990648305	WITHOUT_CLASSIFICATION	9.009351694359853E-7	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999996116712846	WITHOUT_CLASSIFICATION	3.88328715405264E-7	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999977436909054	WITHOUT_CLASSIFICATION	2.256309094527438E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999995956938514	WITHOUT_CLASSIFICATION	4.043061485942601E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999988081117717	WITHOUT_CLASSIFICATION	1.1918882283766368E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9998407398585578	WITHOUT_CLASSIFICATION	1.592601414421808E-4	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999960562920619	WITHOUT_CLASSIFICATION	3.943707938144982E-6	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999989910284842	WITHOUT_CLASSIFICATION	1.0089715157790133E-6	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999881115734408	WITHOUT_CLASSIFICATION	1.1888426559212574E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9997907817706012	WITHOUT_CLASSIFICATION	2.092182293989327E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999969100061895	WITHOUT_CLASSIFICATION	3.0899938104754674E-6	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999979549243355	WITHOUT_CLASSIFICATION	2.045075664453704E-6	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999929301126961	WITHOUT_CLASSIFICATION	7.069887303902789E-5	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999846109718769	WITHOUT_CLASSIFICATION	1.5389028123134048E-5	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999981918447202	WITHOUT_CLASSIFICATION	1.8081552797833689E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998609168498258	WITHOUT_CLASSIFICATION	1.3908315017415813E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998609168498258	WITHOUT_CLASSIFICATION	1.3908315017415813E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999985475304639	WITHOUT_CLASSIFICATION	1.452469536066795E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993266189637	WITHOUT_CLASSIFICATION	6.733810362520483E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9990255983899038	WITHOUT_CLASSIFICATION	9.744016100961277E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999912501305595	WITHOUT_CLASSIFICATION	8.749869440528159E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999864570873266	WITHOUT_CLASSIFICATION	1.3542912673369399E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999989337032906	WITHOUT_CLASSIFICATION	1.0662967093485995E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999939688162314	WITHOUT_CLASSIFICATION	6.03118376860326E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999985095548529	WITHOUT_CLASSIFICATION	1.4904451470262692E-6	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999997274880572	WITHOUT_CLASSIFICATION	2.725119427349102E-7	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812108091275	WITHOUT_CLASSIFICATION	1.8789190872448173E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880637567553	WITHOUT_CLASSIFICATION	1.1936243244661493E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999338902991137	WITHOUT_CLASSIFICATION	6.610970088629171E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999996277047933	WITHOUT_CLASSIFICATION	3.7229520669898757E-7	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999963651150565	WITHOUT_CLASSIFICATION	3.634884943403953E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999892148487393	WITHOUT_CLASSIFICATION	1.078515126079824E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.999967763892898	WITHOUT_CLASSIFICATION	3.223610710211571E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999864926712073	WITHOUT_CLASSIFICATION	1.3507328792700945E-4	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999946093085164	WITHOUT_CLASSIFICATION	5.390691483570419E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999787909386486	WITHOUT_CLASSIFICATION	2.1209061351383615E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999973124759418	WITHOUT_CLASSIFICATION	2.68752405823591E-6	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999967469561708	WITHOUT_CLASSIFICATION	3.253043829136591E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999961117655994	WITHOUT_CLASSIFICATION	3.888234400554779E-6	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999923542775435	WITHOUT_CLASSIFICATION	7.645722456486935E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9998333837762093	WITHOUT_CLASSIFICATION	1.6661622379063584E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999596308496006	WITHOUT_CLASSIFICATION	4.036915039943006E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999929002888361	WITHOUT_CLASSIFICATION	7.099711163830687E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998940786071303	WITHOUT_CLASSIFICATION	1.0592139286964487E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999947604371959	WITHOUT_CLASSIFICATION	5.239562804118125E-6	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999998738346324	WITHOUT_CLASSIFICATION	1.261653675263241E-7	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999907894136078	WITHOUT_CLASSIFICATION	9.210586392327207E-6	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.997309232827752	WITHOUT_CLASSIFICATION	0.002690767172248083	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999975253065159	WITHOUT_CLASSIFICATION	2.4746934841673448E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999996169822316	WITHOUT_CLASSIFICATION	3.830177682823735E-7	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999949187695227	WITHOUT_CLASSIFICATION	5.0812304773288225E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999870466405034	WITHOUT_CLASSIFICATION	1.2953359496613475E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999885699608513	WITHOUT_CLASSIFICATION	1.1430039148719874E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999998534330214	WITHOUT_CLASSIFICATION	1.4656697859697123E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999657700630161	WITHOUT_CLASSIFICATION	3.422993698380481E-5	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999980598120769	WITHOUT_CLASSIFICATION	1.940187923138653E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.999976879315404	WITHOUT_CLASSIFICATION	2.3120684596035326E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999963616142119	WITHOUT_CLASSIFICATION	3.6383857881433937E-6	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999993696465275	WITHOUT_CLASSIFICATION	6.303534724792479E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999072526490794	WITHOUT_CLASSIFICATION	9.274735092049791E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999974786077757	WITHOUT_CLASSIFICATION	2.521392224300138E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999936066906016	WITHOUT_CLASSIFICATION	6.3933093984552165E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999992058677796	WITHOUT_CLASSIFICATION	7.941322203887838E-7	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999942643132941	WITHOUT_CLASSIFICATION	5.735686706003792E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999860164873926	WITHOUT_CLASSIFICATION	1.3983512607407537E-5	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999858592902651	WITHOUT_CLASSIFICATION	1.4140709734882312E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999994454567814	WITHOUT_CLASSIFICATION	5.545432186020475E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999986003185101	WITHOUT_CLASSIFICATION	1.3996814899511507E-6	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999976557793163	WITHOUT_CLASSIFICATION	2.344220683710706E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999621252039311	WITHOUT_CLASSIFICATION	3.787479606886395E-5	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999991096369935	WITHOUT_CLASSIFICATION	8.903630065235876E-7	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9996944054291796	WITHOUT_CLASSIFICATION	3.0559457082046345E-4	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999975744819868	WITHOUT_CLASSIFICATION	2.4255180132084175E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999992915046374	WITHOUT_CLASSIFICATION	7.084953626061854E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999801471647365	WITHOUT_CLASSIFICATION	1.9852835263447717E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999969192417268	WITHOUT_CLASSIFICATION	3.0807582732061123E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999998486985551	WITHOUT_CLASSIFICATION	1.5130144488776558E-6	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999966853957085	WITHOUT_CLASSIFICATION	3.3146042913660364E-6	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999195044962	WITHOUT_CLASSIFICATION	8.04955038087699E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936916371296	WITHOUT_CLASSIFICATION	6.308362870526732E-6	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999817483615656	WITHOUT_CLASSIFICATION	1.825163843439043E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999773939058283	WITHOUT_CLASSIFICATION	2.2606094171687514E-5	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999999825960019	WITHOUT_CLASSIFICATION	1.7403998111607083E-7	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999494179568958	WITHOUT_CLASSIFICATION	5.058204310420701E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936916371296	WITHOUT_CLASSIFICATION	6.308362870526732E-6	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9998872033493285	WITHOUT_CLASSIFICATION	1.1279665067152394E-4	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999977759546911	WITHOUT_CLASSIFICATION	2.224045308918599E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999995870758784	WITHOUT_CLASSIFICATION	4.1292412158451365E-7	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999675788002292	WITHOUT_CLASSIFICATION	3.24211997707503E-5	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999976338320736	WITHOUT_CLASSIFICATION	2.366167926388879E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999979398543063	WITHOUT_CLASSIFICATION	2.0601456936991076E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999973487036306	WITHOUT_CLASSIFICATION	2.6512963694393634E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9994884793437976	WITHOUT_CLASSIFICATION	5.115206562024208E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999997704444968	WITHOUT_CLASSIFICATION	2.2955550322412787E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999602492135609	WITHOUT_CLASSIFICATION	3.975078643920566E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999909361608545	WITHOUT_CLASSIFICATION	9.063839145499628E-6	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999985813296505	WITHOUT_CLASSIFICATION	1.4186703494729993E-6	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999984929306028	WITHOUT_CLASSIFICATION	1.5070693971904639E-5	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9995691890941146	WITHOUT_CLASSIFICATION	4.308109058853636E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999985399783587	WITHOUT_CLASSIFICATION	1.460021641261518E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997635222662	WITHOUT_CLASSIFICATION	2.364777337668373E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999996155176181	WITHOUT_CLASSIFICATION	3.844823818964163E-7	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999988970326193	WITHOUT_CLASSIFICATION	1.102967380617381E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998821785641141	WITHOUT_CLASSIFICATION	1.1782143588596932E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999980326933484	WITHOUT_CLASSIFICATION	1.9673066516267293E-6	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9964719816475109	WITHOUT_CLASSIFICATION	0.0035280183524889334	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999942054697944	WITHOUT_CLASSIFICATION	5.794530205608663E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999916546292268	WITHOUT_CLASSIFICATION	8.345370773080858E-6	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999894166784163	WITHOUT_CLASSIFICATION	1.0583321583747494E-5	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999995891441055	WITHOUT_CLASSIFICATION	4.1085589449072906E-7	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999961812759544	WITHOUT_CLASSIFICATION	3.818724045692416E-6	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999989299525651	WITHOUT_CLASSIFICATION	1.0700474349343254E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999780012728716	WITHOUT_CLASSIFICATION	2.1998727128444216E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999999453654648	WITHOUT_CLASSIFICATION	5.463453519777435E-7	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999788897367006	WITHOUT_CLASSIFICATION	2.1110263299481582E-5	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999773123691856	WITHOUT_CLASSIFICATION	2.268763081433431E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998843025390961	WITHOUT_CLASSIFICATION	1.156974609038381E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999969983349576	WITHOUT_CLASSIFICATION	3.0016650423874134E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999715986566752	WITHOUT_CLASSIFICATION	2.84013433247899E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999992340450522	WITHOUT_CLASSIFICATION	7.65954947834734E-7	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999989600418316	WITHOUT_CLASSIFICATION	1.0399581684452622E-6	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998993765322	WITHOUT_CLASSIFICATION	1.0062346773635044E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999234416653775	WITHOUT_CLASSIFICATION	7.655833462252616E-5	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999950712441594	WITHOUT_CLASSIFICATION	4.928755840582915E-6	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999984622609825	WITHOUT_CLASSIFICATION	1.5377390175629625E-6	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998478824919599	WITHOUT_CLASSIFICATION	1.521175080402195E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998478824919599	WITHOUT_CLASSIFICATION	1.521175080402195E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999889263867706	WITHOUT_CLASSIFICATION	1.1073613229315999E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999284752840178	WITHOUT_CLASSIFICATION	7.15247159821848E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999987325126254	WITHOUT_CLASSIFICATION	1.267487374536934E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9878654753200157	WITHOUT_CLASSIFICATION	0.01213452467998424	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998606086753132	WITHOUT_CLASSIFICATION	1.3939132468680725E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9998606086753132	WITHOUT_CLASSIFICATION	1.3939132468680725E-4	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9998850620380602	WITHOUT_CLASSIFICATION	1.1493796193991104E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999972415319468	WITHOUT_CLASSIFICATION	2.7584680531499557E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9992487916209546	WITHOUT_CLASSIFICATION	7.512083790453524E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999785618354567	WITHOUT_CLASSIFICATION	2.143816454328689E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999211286741	WITHOUT_CLASSIFICATION	7.887132590452445E-7	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999868576746964	WITHOUT_CLASSIFICATION	1.3142325303678516E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999922170715567	WITHOUT_CLASSIFICATION	7.782928443325306E-6	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999830855829311	WITHOUT_CLASSIFICATION	1.691441706883509E-5	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999888697895433	WITHOUT_CLASSIFICATION	1.1130210456720275E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957067427716	WITHOUT_CLASSIFICATION	4.2932572283817555E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957067427716	WITHOUT_CLASSIFICATION	4.2932572283817555E-6	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998797108785692	WITHOUT_CLASSIFICATION	1.2028912143085182E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998431182574906	WITHOUT_CLASSIFICATION	1.5688174250932276E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999509025810535	WITHOUT_CLASSIFICATION	4.909741894659729E-5	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999439734119342	WITHOUT_CLASSIFICATION	5.602658806577551E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999881031311867	WITHOUT_CLASSIFICATION	1.1896868813272225E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959173496425	WITHOUT_CLASSIFICATION	4.082650357443718E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993588181647209	WITHOUT_CLASSIFICATION	6.411818352790779E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999915825495003	WITHOUT_CLASSIFICATION	8.417450499801486E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999819740391503	WITHOUT_CLASSIFICATION	1.8025960849567375E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999973784003264	WITHOUT_CLASSIFICATION	2.621599673616685E-6	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999962911267826	WITHOUT_CLASSIFICATION	3.70887321735225E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999602492135609	WITHOUT_CLASSIFICATION	3.975078643920566E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999275097400533	WITHOUT_CLASSIFICATION	7.249025994667084E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999660887316438	WITHOUT_CLASSIFICATION	3.391126835607588E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999691915678792	WITHOUT_CLASSIFICATION	3.080843212085677E-5	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999680647058445	WITHOUT_CLASSIFICATION	3.19352941554239E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999901012000398	WITHOUT_CLASSIFICATION	9.89879996022724E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999811045265168	WITHOUT_CLASSIFICATION	1.8895473483317408E-5	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9996213940556873	WITHOUT_CLASSIFICATION	3.786059443128303E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998867837205	WITHOUT_CLASSIFICATION	1.1321627945778318E-7	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999910182907934	WITHOUT_CLASSIFICATION	8.981709206652189E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999600092272245	WITHOUT_CLASSIFICATION	3.9990772775529116E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999600092272245	WITHOUT_CLASSIFICATION	3.9990772775529116E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999895492325529	WITHOUT_CLASSIFICATION	1.0450767447154146E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999996322364898	WITHOUT_CLASSIFICATION	3.677635102150785E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9996882158680558	WITHOUT_CLASSIFICATION	3.1178413194423127E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999907237256584	WITHOUT_CLASSIFICATION	9.276274341430967E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999662060737883	WITHOUT_CLASSIFICATION	3.37939262116968E-5	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999289674598922	WITHOUT_CLASSIFICATION	7.103254010777503E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999860314258573	WITHOUT_CLASSIFICATION	1.3968574142810107E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999984399657109	WITHOUT_CLASSIFICATION	1.5600342890491657E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999315759896448	WITHOUT_CLASSIFICATION	6.842401035524269E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998675110061972	WITHOUT_CLASSIFICATION	1.324889938027803E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999123257989805	WITHOUT_CLASSIFICATION	8.767420101952122E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998910346742229	WITHOUT_CLASSIFICATION	1.0896532577709437E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9806415341483612	WITHOUT_CLASSIFICATION	0.01935846585163873	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999531411242	WITHOUT_CLASSIFICATION	4.6858875751972815E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999886899314847	WITHOUT_CLASSIFICATION	1.1310068515285646E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999981751501239	WITHOUT_CLASSIFICATION	1.8248498760951626E-5	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999964063021667	WITHOUT_CLASSIFICATION	3.5936978333469816E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999964141104348	WITHOUT_CLASSIFICATION	3.585889565221436E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999753662878854	WITHOUT_CLASSIFICATION	2.4633712114579184E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999993585493576	WITHOUT_CLASSIFICATION	6.414506423849156E-7	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999992680710514	WITHOUT_CLASSIFICATION	7.319289486717281E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999811394889432	WITHOUT_CLASSIFICATION	1.8860511056822053E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999756846308061	WITHOUT_CLASSIFICATION	2.4315369193872546E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999282876727	WITHOUT_CLASSIFICATION	7.171232730622209E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999953222072968	WITHOUT_CLASSIFICATION	4.6777927031987705E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999953222072968	WITHOUT_CLASSIFICATION	4.6777927031987705E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999560116247319	WITHOUT_CLASSIFICATION	4.398837526803186E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998644651464879	WITHOUT_CLASSIFICATION	1.355348535120314E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999483143160643	WITHOUT_CLASSIFICATION	5.1685683935725556E-5	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999982846458393	WITHOUT_CLASSIFICATION	1.7153541607222805E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.99996060435606	WITHOUT_CLASSIFICATION	3.939564394001517E-5	IMPLEMENTATION
