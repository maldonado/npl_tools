// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.998435251859879	WITHOUT_CLASSIFICATION	0.0015647481401210056	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.998435251859879	WITHOUT_CLASSIFICATION	0.0015647481401210056	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9882686009187887	WITHOUT_CLASSIFICATION	0.011731399081211385	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9955784739404007	WITHOUT_CLASSIFICATION	0.004421526059599336	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9900382547384391	WITHOUT_CLASSIFICATION	0.009961745261560852	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9729255371029407	WITHOUT_CLASSIFICATION	0.02707446289705926	IMPLEMENTATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.8036210855117537	WITHOUT_CLASSIFICATION	0.19637891448824635	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9932148854852284	WITHOUT_CLASSIFICATION	0.006785114514771699	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.998926810863962	WITHOUT_CLASSIFICATION	0.0010731891360380968	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.992174750027256	WITHOUT_CLASSIFICATION	0.007825249972744084	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.998014626391569	WITHOUT_CLASSIFICATION	0.0019853736084309765	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.994613908234428	WITHOUT_CLASSIFICATION	0.005386091765571974	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9960726066000539	WITHOUT_CLASSIFICATION	0.003927393399946106	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9960726066000539	WITHOUT_CLASSIFICATION	0.003927393399946106	IMPLEMENTATION
/**	IMPLEMENTATION	0.9907915510208393	WITHOUT_CLASSIFICATION	0.009208448979160835	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9180046514781964	WITHOUT_CLASSIFICATION	0.08199534852180357	IMPLEMENTATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.6376879667512819	WITHOUT_CLASSIFICATION	0.3623120332487181	IMPLEMENTATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9983661030350072	WITHOUT_CLASSIFICATION	0.001633896964992763	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999944588188983	WITHOUT_CLASSIFICATION	5.541181101723001E-6	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9245365011164436	WITHOUT_CLASSIFICATION	0.07546349888355643	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9955434427385923	WITHOUT_CLASSIFICATION	0.004456557261407731	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9995839693745707	WITHOUT_CLASSIFICATION	4.160306254292401E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9912323842154984	WITHOUT_CLASSIFICATION	0.008767615784501647	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9462028944884201	WITHOUT_CLASSIFICATION	0.053797105511579874	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9462028944884201	WITHOUT_CLASSIFICATION	0.053797105511579874	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.8607167442043149	WITHOUT_CLASSIFICATION	0.1392832557956851	IMPLEMENTATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.975865480604191	WITHOUT_CLASSIFICATION	0.024134519395808966	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.6117900579934602	IMPLEMENTATION	0.3882099420065397	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9953784621957718	WITHOUT_CLASSIFICATION	0.004621537804228248	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.5838219780758348	WITHOUT_CLASSIFICATION	0.41617802192416525	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9862739841200014	WITHOUT_CLASSIFICATION	0.013726015879998466	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.983495995911908	WITHOUT_CLASSIFICATION	0.016504004088091988	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998530548327055	WITHOUT_CLASSIFICATION	1.4694516729445736E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9874131180592587	WITHOUT_CLASSIFICATION	0.01258688194074124	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9281493038531089	WITHOUT_CLASSIFICATION	0.07185069614689106	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9936278293282685	WITHOUT_CLASSIFICATION	0.0063721706717314855	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9870149646692173	WITHOUT_CLASSIFICATION	0.012985035330782702	IMPLEMENTATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9996711181915575	WITHOUT_CLASSIFICATION	3.2888180844238416E-4	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9991286668545172	WITHOUT_CLASSIFICATION	8.713331454829441E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9998605898040784	WITHOUT_CLASSIFICATION	1.394101959214813E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9998605898040784	WITHOUT_CLASSIFICATION	1.394101959214813E-4	IMPLEMENTATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9922123412463106	WITHOUT_CLASSIFICATION	0.0077876587536893005	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999360680659257	WITHOUT_CLASSIFICATION	6.393193407433385E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9992094577475059	WITHOUT_CLASSIFICATION	7.905422524941622E-4	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.8351663113532797	WITHOUT_CLASSIFICATION	0.16483368864672043	IMPLEMENTATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9638741641759967	WITHOUT_CLASSIFICATION	0.036125835824003284	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9465259575791132	WITHOUT_CLASSIFICATION	0.0534740424208868	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9958651699271642	WITHOUT_CLASSIFICATION	0.004134830072835733	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9998907271117827	WITHOUT_CLASSIFICATION	1.0927288821726636E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9834047771401767	WITHOUT_CLASSIFICATION	0.016595222859823282	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9792892428186498	WITHOUT_CLASSIFICATION	0.02071075718135018	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.5982145867884693	IMPLEMENTATION	0.4017854132115306	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9987624430890101	WITHOUT_CLASSIFICATION	0.0012375569109898867	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9988523605065238	WITHOUT_CLASSIFICATION	0.0011476394934761967	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9934510321115283	WITHOUT_CLASSIFICATION	0.006548967888471784	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.926583126864904	WITHOUT_CLASSIFICATION	0.07341687313509601	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9934510321115283	WITHOUT_CLASSIFICATION	0.006548967888471784	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.921347435960073	WITHOUT_CLASSIFICATION	0.07865256403992707	IMPLEMENTATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.8891447016935942	WITHOUT_CLASSIFICATION	0.11085529830640586	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9934510321115283	WITHOUT_CLASSIFICATION	0.006548967888471784	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9894476981219776	WITHOUT_CLASSIFICATION	0.010552301878022424	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.984894541510666	WITHOUT_CLASSIFICATION	0.015105458489333923	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.5317083785273276	WITHOUT_CLASSIFICATION	0.4682916214726724	IMPLEMENTATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.997994727584732	WITHOUT_CLASSIFICATION	0.0020052724152681326	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999510548536508	WITHOUT_CLASSIFICATION	4.89451463491558E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999775806123272	WITHOUT_CLASSIFICATION	2.2419387672747806E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999775806123272	WITHOUT_CLASSIFICATION	2.2419387672747806E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9998709911555776	WITHOUT_CLASSIFICATION	1.2900884442236117E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999950356093582	WITHOUT_CLASSIFICATION	4.9643906418440595E-6	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999726435909487	WITHOUT_CLASSIFICATION	2.7356409051262193E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999703246767166	WITHOUT_CLASSIFICATION	2.9675323283317474E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999703246767166	WITHOUT_CLASSIFICATION	2.9675323283317474E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999113007522	WITHOUT_CLASSIFICATION	8.86992477939076E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995194231974	WITHOUT_CLASSIFICATION	4.805768026291272E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999948386773027	WITHOUT_CLASSIFICATION	5.161322697373284E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999922227787708	WITHOUT_CLASSIFICATION	7.777221229296714E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999927662627026	WITHOUT_CLASSIFICATION	7.233737297345066E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999927662627026	WITHOUT_CLASSIFICATION	7.233737297345066E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999783677008128	WITHOUT_CLASSIFICATION	2.1632299187112895E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9994293417757125	WITHOUT_CLASSIFICATION	5.706582242875273E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.999987088739752	WITHOUT_CLASSIFICATION	1.2911260247978645E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998906770159802	WITHOUT_CLASSIFICATION	1.0932298401983246E-4	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999419516691	WITHOUT_CLASSIFICATION	5.804833087069305E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999972911814693	WITHOUT_CLASSIFICATION	2.7088185307023993E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999243407362344	WITHOUT_CLASSIFICATION	7.565926376568054E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999648387139461	WITHOUT_CLASSIFICATION	3.516128605390689E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998732886354563	WITHOUT_CLASSIFICATION	1.26711364543666E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9861997660108849	WITHOUT_CLASSIFICATION	0.013800233989115056	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999491884845831	WITHOUT_CLASSIFICATION	5.081151541692798E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999608175909738	WITHOUT_CLASSIFICATION	3.918240902631215E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999993890212844	WITHOUT_CLASSIFICATION	6.109787155979121E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999482605161478	WITHOUT_CLASSIFICATION	5.1739483852224394E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999482605161478	WITHOUT_CLASSIFICATION	5.1739483852224394E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999890682329133	WITHOUT_CLASSIFICATION	1.0931767086747206E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999809680976945	WITHOUT_CLASSIFICATION	1.9031902305500711E-4	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999901516664724	WITHOUT_CLASSIFICATION	9.848333527510026E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999989163334404	WITHOUT_CLASSIFICATION	1.0836665596074677E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9995168052482302	WITHOUT_CLASSIFICATION	4.8319475176984814E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9907915510208393	WITHOUT_CLASSIFICATION	0.009208448979160835	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9907915510208393	WITHOUT_CLASSIFICATION	0.009208448979160835	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995385912208	WITHOUT_CLASSIFICATION	4.614087792904944E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998724007991864	WITHOUT_CLASSIFICATION	1.2759920081367607E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999120539708257	WITHOUT_CLASSIFICATION	8.794602917432364E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999615265526721	WITHOUT_CLASSIFICATION	3.847344732776832E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999530790905741	WITHOUT_CLASSIFICATION	4.692090942602805E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999986004837066	WITHOUT_CLASSIFICATION	1.3995162934039957E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889203296454	WITHOUT_CLASSIFICATION	1.1079670354668563E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999907763892938	WITHOUT_CLASSIFICATION	9.223610706314935E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9998197487116164	WITHOUT_CLASSIFICATION	1.802512883836125E-4	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999996611472437	WITHOUT_CLASSIFICATION	3.388527563171554E-7	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999946808020628	WITHOUT_CLASSIFICATION	5.3191979372007334E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9998197487116164	WITHOUT_CLASSIFICATION	1.802512883836125E-4	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999946808020628	WITHOUT_CLASSIFICATION	5.3191979372007334E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999714577022374	WITHOUT_CLASSIFICATION	2.8542297762632702E-5	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999595480596589	WITHOUT_CLASSIFICATION	4.04519403410957E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999979017938654	WITHOUT_CLASSIFICATION	2.098206134490596E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999338532946282	WITHOUT_CLASSIFICATION	6.614670537176664E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998725147217195	WITHOUT_CLASSIFICATION	1.274852782805753E-4	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9991215852084072	WITHOUT_CLASSIFICATION	8.784147915928378E-4	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9967658711523703	WITHOUT_CLASSIFICATION	0.0032341288476296667	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9980896400322233	WITHOUT_CLASSIFICATION	0.0019103599677766916	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999599966282097	WITHOUT_CLASSIFICATION	4.0003371790397436E-5	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999334958452417	WITHOUT_CLASSIFICATION	6.650415475825104E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999861069509945	WITHOUT_CLASSIFICATION	1.3893049005447848E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999860135498848	WITHOUT_CLASSIFICATION	1.398645011512201E-5	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998476684382	WITHOUT_CLASSIFICATION	1.5233156171651019E-7	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999762244638086	WITHOUT_CLASSIFICATION	2.3775536191259567E-5	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999879555798198	WITHOUT_CLASSIFICATION	1.2044420180217597E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999492415392	WITHOUT_CLASSIFICATION	5.075846067796011E-8	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999989476252171	WITHOUT_CLASSIFICATION	1.0523747828116057E-6	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999971392465272	WITHOUT_CLASSIFICATION	2.860753472831176E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999980161708415	WITHOUT_CLASSIFICATION	1.9838291584972688E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999832991720835	WITHOUT_CLASSIFICATION	1.6700827916513174E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999899557620878	WITHOUT_CLASSIFICATION	1.0044237912234463E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999880887622588	WITHOUT_CLASSIFICATION	1.1911237741192712E-4	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999955171852888	WITHOUT_CLASSIFICATION	4.4828147112472966E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999974016887883	WITHOUT_CLASSIFICATION	2.598311211793792E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9731903315348599	WITHOUT_CLASSIFICATION	0.026809668465140147	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999985595441706	WITHOUT_CLASSIFICATION	1.440455829348024E-6	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999409370493312	WITHOUT_CLASSIFICATION	5.906295066892309E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.999669548532273	WITHOUT_CLASSIFICATION	3.3045146772704015E-4	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999262143915835	WITHOUT_CLASSIFICATION	7.37856084164807E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999830304416679	WITHOUT_CLASSIFICATION	1.696955833215169E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9990712987143601	WITHOUT_CLASSIFICATION	9.287012856398428E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.999990775047791	WITHOUT_CLASSIFICATION	9.224952208983944E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999242245253083	WITHOUT_CLASSIFICATION	7.577547469180795E-5	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999831846421539	WITHOUT_CLASSIFICATION	1.6815357846087165E-5	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999943379934069	WITHOUT_CLASSIFICATION	5.662006593130597E-6	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999996739678111	WITHOUT_CLASSIFICATION	3.260321888884139E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999831846421539	WITHOUT_CLASSIFICATION	1.6815357846087165E-5	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999998042408262	WITHOUT_CLASSIFICATION	1.957591737389061E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999911411769825	WITHOUT_CLASSIFICATION	8.85882301746962E-6	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.999968359657315	WITHOUT_CLASSIFICATION	3.164034268507462E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999834310812358	WITHOUT_CLASSIFICATION	1.6568918764271234E-5	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999948855767093	WITHOUT_CLASSIFICATION	5.114423290601618E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999955552355158	WITHOUT_CLASSIFICATION	4.444764484246892E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999955552355158	WITHOUT_CLASSIFICATION	4.444764484246892E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999957300571481	WITHOUT_CLASSIFICATION	4.269942851900702E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998357856895	WITHOUT_CLASSIFICATION	1.6421431040755546E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998642836996822	WITHOUT_CLASSIFICATION	1.3571630031778063E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999991161639478	WITHOUT_CLASSIFICATION	8.83836052197254E-7	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999967049180862	WITHOUT_CLASSIFICATION	3.2950819136840858E-6	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999458951217123	WITHOUT_CLASSIFICATION	5.410487828763887E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999706575205735	WITHOUT_CLASSIFICATION	2.9342479426589413E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999723649778993	WITHOUT_CLASSIFICATION	2.763502210064555E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999996366585319	WITHOUT_CLASSIFICATION	3.633414680959061E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999984631678539	WITHOUT_CLASSIFICATION	1.536832146188253E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999922752856578	WITHOUT_CLASSIFICATION	7.724714342252665E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999922752856578	WITHOUT_CLASSIFICATION	7.724714342252665E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973606486784	WITHOUT_CLASSIFICATION	2.6393513216527215E-6	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999980933828295	WITHOUT_CLASSIFICATION	1.9066171705711214E-6	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999948221161846	WITHOUT_CLASSIFICATION	5.177883815377332E-6	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999922752856578	WITHOUT_CLASSIFICATION	7.724714342252665E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973606486784	WITHOUT_CLASSIFICATION	2.6393513216527215E-6	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999973606486784	WITHOUT_CLASSIFICATION	2.6393513216527215E-6	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999986160691647	WITHOUT_CLASSIFICATION	1.3839308352317763E-6	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999952404342367	WITHOUT_CLASSIFICATION	4.7595657633022726E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997273142882	WITHOUT_CLASSIFICATION	2.726857118032802E-7	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999988803091509	WITHOUT_CLASSIFICATION	1.1196908491211903E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999649253117566	WITHOUT_CLASSIFICATION	3.5074688243433656E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999649253117566	WITHOUT_CLASSIFICATION	3.5074688243433656E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998664420658995	WITHOUT_CLASSIFICATION	1.3355793410058738E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999335979033094	WITHOUT_CLASSIFICATION	6.64020966905218E-5	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999975885646596	WITHOUT_CLASSIFICATION	2.4114353404419998E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999823927605881	WITHOUT_CLASSIFICATION	1.7607239411912366E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999823927605881	WITHOUT_CLASSIFICATION	1.7607239411912366E-5	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999727588181546	WITHOUT_CLASSIFICATION	2.7241181845287443E-5	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999896033205514	WITHOUT_CLASSIFICATION	1.0396679448513396E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999604744664219	WITHOUT_CLASSIFICATION	3.952553357807891E-5	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999842336306937	WITHOUT_CLASSIFICATION	1.5766369306357835E-5	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9995458079754124	WITHOUT_CLASSIFICATION	4.541920245875144E-4	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998247785873967	WITHOUT_CLASSIFICATION	1.7522141260332285E-4	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998574197041419	WITHOUT_CLASSIFICATION	1.425802958580185E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999821333515907	WITHOUT_CLASSIFICATION	1.78666484092708E-5	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999754974634221	WITHOUT_CLASSIFICATION	2.4502536577943495E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999604744664219	WITHOUT_CLASSIFICATION	3.952553357807891E-5	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9998989151519327	WITHOUT_CLASSIFICATION	1.0108484806717487E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999255343092168	WITHOUT_CLASSIFICATION	7.446569078318677E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999255343092168	WITHOUT_CLASSIFICATION	7.446569078318677E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999996012906939	WITHOUT_CLASSIFICATION	3.9870930610354975E-7	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999964189073176	WITHOUT_CLASSIFICATION	3.581092682235244E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998286196863858	WITHOUT_CLASSIFICATION	1.7138031361428873E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998141404496452	WITHOUT_CLASSIFICATION	1.858595503547916E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999600946457403	WITHOUT_CLASSIFICATION	3.990535425971683E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9999603233572293	WITHOUT_CLASSIFICATION	3.967664277070555E-5	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9996137705816949	WITHOUT_CLASSIFICATION	3.8622941830501387E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9998873066832925	WITHOUT_CLASSIFICATION	1.1269331670756434E-4	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999866063203456	WITHOUT_CLASSIFICATION	1.339367965434799E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999866063203456	WITHOUT_CLASSIFICATION	1.339367965434799E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999929320019658	WITHOUT_CLASSIFICATION	7.06799803413094E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999510548536508	WITHOUT_CLASSIFICATION	4.89451463491558E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999993759112824	WITHOUT_CLASSIFICATION	6.240887176020729E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999904084370649	WITHOUT_CLASSIFICATION	9.59156293502326E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999775806123272	WITHOUT_CLASSIFICATION	2.2419387672747806E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999937091924701	WITHOUT_CLASSIFICATION	6.290807529958098E-6	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999633617205498	WITHOUT_CLASSIFICATION	3.663827945019479E-5	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999899922548049	WITHOUT_CLASSIFICATION	1.0007745195164572E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999930081548469	WITHOUT_CLASSIFICATION	6.991845153106149E-6	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999966385637139	WITHOUT_CLASSIFICATION	3.361436286096327E-5	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999485107892306	WITHOUT_CLASSIFICATION	5.148921076926615E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999813118312731	WITHOUT_CLASSIFICATION	1.8688168726865275E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999913776196153	WITHOUT_CLASSIFICATION	8.622380384757126E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999950356093582	WITHOUT_CLASSIFICATION	4.9643906418440595E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999928812775035	WITHOUT_CLASSIFICATION	7.118722496430195E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999928812775035	WITHOUT_CLASSIFICATION	7.118722496430195E-6	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999930611418374	WITHOUT_CLASSIFICATION	6.938858162550624E-6	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999501910063077	WITHOUT_CLASSIFICATION	4.980899369236965E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999934869636538	WITHOUT_CLASSIFICATION	6.513036346310968E-6	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999863960652977	WITHOUT_CLASSIFICATION	1.360393470221163E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999957718299236	WITHOUT_CLASSIFICATION	4.228170076417398E-6	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999662417584192	WITHOUT_CLASSIFICATION	3.375824158077133E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999703246767166	WITHOUT_CLASSIFICATION	2.9675323283317474E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999581042931599	WITHOUT_CLASSIFICATION	4.189570684014145E-5	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999731833269908	WITHOUT_CLASSIFICATION	2.6816673009177138E-5	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999908744583286	WITHOUT_CLASSIFICATION	9.125541671427549E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999963957268636	WITHOUT_CLASSIFICATION	3.6042731363268534E-6	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999603777228099	WITHOUT_CLASSIFICATION	3.962227719011356E-5	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999821667072731	WITHOUT_CLASSIFICATION	1.783329272685561E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999411430437979	WITHOUT_CLASSIFICATION	5.8856956202193685E-5	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999957903916721	WITHOUT_CLASSIFICATION	4.209608327899222E-6	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999582624702915	WITHOUT_CLASSIFICATION	4.173752970847345E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999655881377875	WITHOUT_CLASSIFICATION	3.4411862212566677E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999569974076611	WITHOUT_CLASSIFICATION	4.300259233893828E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999966080039764	WITHOUT_CLASSIFICATION	3.3919960235786166E-6	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999849587429278	WITHOUT_CLASSIFICATION	1.504125707223776E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999775806123272	WITHOUT_CLASSIFICATION	2.2419387672747806E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999775806123272	WITHOUT_CLASSIFICATION	2.2419387672747806E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999813118312731	WITHOUT_CLASSIFICATION	1.8688168726865275E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999928812775035	WITHOUT_CLASSIFICATION	7.118722496430195E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999411430437979	WITHOUT_CLASSIFICATION	5.8856956202193685E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999113007522	WITHOUT_CLASSIFICATION	8.86992477939076E-7	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999945789103858	WITHOUT_CLASSIFICATION	5.421089614166629E-6	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999843676451685	WITHOUT_CLASSIFICATION	1.5632354831461433E-5	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999998023089328	WITHOUT_CLASSIFICATION	1.9769106720899048E-6	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999838245086923	WITHOUT_CLASSIFICATION	1.6175491307811604E-5	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999976128823049	WITHOUT_CLASSIFICATION	2.387117695103565E-6	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.999979312471005	WITHOUT_CLASSIFICATION	2.0687528994978827E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999940397839302	WITHOUT_CLASSIFICATION	5.960216069780082E-6	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.999863285798721	WITHOUT_CLASSIFICATION	1.3671420127902821E-4	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.99998772095004	WITHOUT_CLASSIFICATION	1.2279049960113024E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999693510399426	WITHOUT_CLASSIFICATION	3.064896005748898E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999693510399426	WITHOUT_CLASSIFICATION	3.064896005748898E-5	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999929819929059	WITHOUT_CLASSIFICATION	7.018007094146229E-6	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999924226252017	WITHOUT_CLASSIFICATION	7.577374798229014E-6	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999847669849533	WITHOUT_CLASSIFICATION	1.5233015046597668E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999956460676904	WITHOUT_CLASSIFICATION	4.353932309595157E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999954512979957	WITHOUT_CLASSIFICATION	4.548702004244413E-6	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.999994101196579	WITHOUT_CLASSIFICATION	5.8988034209110274E-6	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999964280749146	WITHOUT_CLASSIFICATION	3.571925085425025E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995194231974	WITHOUT_CLASSIFICATION	4.805768026291272E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999736004820231	WITHOUT_CLASSIFICATION	2.639951797682857E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999976746230432	WITHOUT_CLASSIFICATION	2.325376956813162E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999976746230432	WITHOUT_CLASSIFICATION	2.325376956813162E-6	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999985778220863	WITHOUT_CLASSIFICATION	1.4221779137048285E-6	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999966330521263	WITHOUT_CLASSIFICATION	3.3669478736887397E-6	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999990012279469	WITHOUT_CLASSIFICATION	9.987720530622824E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999994631756092	WITHOUT_CLASSIFICATION	5.368243907874489E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999684813618677	WITHOUT_CLASSIFICATION	3.1518638132420487E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999775806123272	WITHOUT_CLASSIFICATION	2.2419387672747806E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999813118312731	WITHOUT_CLASSIFICATION	1.8688168726865275E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999950356093582	WITHOUT_CLASSIFICATION	4.9643906418440595E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999411430437979	WITHOUT_CLASSIFICATION	5.8856956202193685E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999411430437979	WITHOUT_CLASSIFICATION	5.8856956202193685E-5	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996232528783	WITHOUT_CLASSIFICATION	3.767471218077666E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996232528783	WITHOUT_CLASSIFICATION	3.767471218077666E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999875199980014	WITHOUT_CLASSIFICATION	1.2480001998685274E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999863537065412	WITHOUT_CLASSIFICATION	1.3646293458771507E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999863537065412	WITHOUT_CLASSIFICATION	1.3646293458771507E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999946788268075	WITHOUT_CLASSIFICATION	5.321173192544064E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999788749801495	WITHOUT_CLASSIFICATION	2.112501985049214E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999953236999808	WITHOUT_CLASSIFICATION	4.6763000192027574E-6	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999923436578301	WITHOUT_CLASSIFICATION	7.656342169860741E-6	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999991480784001	WITHOUT_CLASSIFICATION	8.51921599942842E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999922227787708	WITHOUT_CLASSIFICATION	7.777221229296714E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999922227787708	WITHOUT_CLASSIFICATION	7.777221229296714E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9999623422876819	WITHOUT_CLASSIFICATION	3.765771231811349E-5	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999915986684553	WITHOUT_CLASSIFICATION	8.401331544623464E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999847359402968	WITHOUT_CLASSIFICATION	1.526405970322434E-5	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.999973212674377	WITHOUT_CLASSIFICATION	2.678732562296015E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999641851397527	WITHOUT_CLASSIFICATION	3.5814860247203624E-5	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999614513621766	WITHOUT_CLASSIFICATION	3.8548637823300934E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999927662627026	WITHOUT_CLASSIFICATION	7.233737297345066E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999803314782827	WITHOUT_CLASSIFICATION	1.9668521717272525E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999803314782827	WITHOUT_CLASSIFICATION	1.9668521717272525E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999783677008128	WITHOUT_CLASSIFICATION	2.1632299187112895E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999783677008128	WITHOUT_CLASSIFICATION	2.1632299187112895E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999966456485845	WITHOUT_CLASSIFICATION	3.35435141549721E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999966456485845	WITHOUT_CLASSIFICATION	3.35435141549721E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999867506195192	WITHOUT_CLASSIFICATION	1.3249380480731875E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999867506195192	WITHOUT_CLASSIFICATION	1.3249380480731875E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999922227787708	WITHOUT_CLASSIFICATION	7.777221229296714E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999927662627026	WITHOUT_CLASSIFICATION	7.233737297345066E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999803314782827	WITHOUT_CLASSIFICATION	1.9668521717272525E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999803314782827	WITHOUT_CLASSIFICATION	1.9668521717272525E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999783677008128	WITHOUT_CLASSIFICATION	2.1632299187112895E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999966456485845	WITHOUT_CLASSIFICATION	3.35435141549721E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.999966456485845	WITHOUT_CLASSIFICATION	3.35435141549721E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999867506195192	WITHOUT_CLASSIFICATION	1.3249380480731875E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999926862976044	WITHOUT_CLASSIFICATION	7.3137023955248685E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999765860847907	WITHOUT_CLASSIFICATION	2.341391520924782E-5	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997341968036229	WITHOUT_CLASSIFICATION	2.6580319637712545E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999799417236819	WITHOUT_CLASSIFICATION	2.0058276318078654E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9997591765185118	WITHOUT_CLASSIFICATION	2.408234814882946E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999478890181046	WITHOUT_CLASSIFICATION	5.2110981895435857E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999976551920984	WITHOUT_CLASSIFICATION	2.344807901644859E-6	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999960420971635	WITHOUT_CLASSIFICATION	3.957902836462668E-6	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999921544214074	WITHOUT_CLASSIFICATION	7.845578592562428E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999918517770797	WITHOUT_CLASSIFICATION	8.148222920198567E-6	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999993607039742	WITHOUT_CLASSIFICATION	6.392960258600323E-7	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999983148421837	WITHOUT_CLASSIFICATION	1.6851578163022504E-6	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999957300571481	WITHOUT_CLASSIFICATION	4.269942851900702E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999478890181046	WITHOUT_CLASSIFICATION	5.2110981895435857E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9997220746226699	WITHOUT_CLASSIFICATION	2.7792537733002963E-4	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9997220746226699	WITHOUT_CLASSIFICATION	2.7792537733002963E-4	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999984874777649	WITHOUT_CLASSIFICATION	1.5125222350416808E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999470226246643	WITHOUT_CLASSIFICATION	5.2977375335815235E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999470226246643	WITHOUT_CLASSIFICATION	5.2977375335815235E-5	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999975812709161	WITHOUT_CLASSIFICATION	2.418729083800599E-6	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995945275816633	WITHOUT_CLASSIFICATION	4.0547241833666255E-4	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999996386870549	WITHOUT_CLASSIFICATION	3.613129450815294E-7	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999951651492563	WITHOUT_CLASSIFICATION	4.8348507437667145E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999951651492563	WITHOUT_CLASSIFICATION	4.8348507437667145E-6	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999419516691	WITHOUT_CLASSIFICATION	5.804833087069305E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999428791174	WITHOUT_CLASSIFICATION	5.712088245539872E-8	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999428791174	WITHOUT_CLASSIFICATION	5.712088245539872E-8	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999976622374668	WITHOUT_CLASSIFICATION	2.3377625332292577E-6	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999913480839064	WITHOUT_CLASSIFICATION	8.651916093583625E-6	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999886045163708	WITHOUT_CLASSIFICATION	1.1395483629273704E-5	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999281002042987	WITHOUT_CLASSIFICATION	7.189979570129273E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999611988685111	WITHOUT_CLASSIFICATION	3.8801131488910604E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999694293944188	WITHOUT_CLASSIFICATION	3.057060558117245E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999972911814693	WITHOUT_CLASSIFICATION	2.7088185307023993E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999665755083843	WITHOUT_CLASSIFICATION	3.3424491615648585E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.929810663864008	WITHOUT_CLASSIFICATION	0.07018933613599193	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.999921948072086	WITHOUT_CLASSIFICATION	7.805192791396569E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998978901184845	WITHOUT_CLASSIFICATION	1.0210988151547576E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998732886354563	WITHOUT_CLASSIFICATION	1.26711364543666E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999939259829072	WITHOUT_CLASSIFICATION	6.074017092876722E-6	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999958748433384	WITHOUT_CLASSIFICATION	4.125156661672151E-6	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9995418621283488	WITHOUT_CLASSIFICATION	4.581378716511811E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998732886354563	WITHOUT_CLASSIFICATION	1.26711364543666E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999994885031824	WITHOUT_CLASSIFICATION	5.114968176502266E-7	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999774307218326	WITHOUT_CLASSIFICATION	2.256927816729476E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999401223480995	WITHOUT_CLASSIFICATION	5.987765190037161E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999451742112164	WITHOUT_CLASSIFICATION	5.482578878359186E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999423485560763	WITHOUT_CLASSIFICATION	5.765144392368029E-5	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999571098085916	WITHOUT_CLASSIFICATION	4.289019140835402E-5	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998911572762204	WITHOUT_CLASSIFICATION	1.0884272377970898E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999608175909738	WITHOUT_CLASSIFICATION	3.918240902631215E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999543509201773	WITHOUT_CLASSIFICATION	4.5649079822733705E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999993890212844	WITHOUT_CLASSIFICATION	6.109787155979121E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999990947038057	WITHOUT_CLASSIFICATION	9.052961942920092E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.999987888272563	WITHOUT_CLASSIFICATION	1.211172743697111E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999545773847518	WITHOUT_CLASSIFICATION	4.5422615248149126E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.999972911814693	WITHOUT_CLASSIFICATION	2.7088185307023993E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999543509201773	WITHOUT_CLASSIFICATION	4.5649079822733705E-5	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999990947038057	WITHOUT_CLASSIFICATION	9.052961942920092E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999545773847518	WITHOUT_CLASSIFICATION	4.5422615248149126E-5	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.99999560934143	WITHOUT_CLASSIFICATION	4.3906585700632865E-6	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997988925513572	WITHOUT_CLASSIFICATION	2.0110744864285747E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999972280811147	WITHOUT_CLASSIFICATION	2.771918885428288E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999482605161478	WITHOUT_CLASSIFICATION	5.1739483852224394E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999699392868477	WITHOUT_CLASSIFICATION	3.0060713152252465E-5	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999976261423691	WITHOUT_CLASSIFICATION	2.3738576309755135E-6	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999840953687582	WITHOUT_CLASSIFICATION	1.5904631241819594E-5	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999997750061295	WITHOUT_CLASSIFICATION	2.249938705796913E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999320839338729	WITHOUT_CLASSIFICATION	6.791606612706637E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999414413514	WITHOUT_CLASSIFICATION	5.855864860325172E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997929099378	WITHOUT_CLASSIFICATION	2.0709006211538867E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999300670239261	WITHOUT_CLASSIFICATION	6.993297607400972E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999994108010125	WITHOUT_CLASSIFICATION	5.891989876031643E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993099572078	WITHOUT_CLASSIFICATION	6.900427921095893E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999653588247364	WITHOUT_CLASSIFICATION	3.464117526363797E-5	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999723146010446	WITHOUT_CLASSIFICATION	2.76853989553531E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.999809680976945	WITHOUT_CLASSIFICATION	1.9031902305500711E-4	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999954778740435	WITHOUT_CLASSIFICATION	4.522125956536316E-6	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999528471052263	WITHOUT_CLASSIFICATION	4.715289477375758E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999543509201773	WITHOUT_CLASSIFICATION	4.5649079822733705E-5	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999965211307521	WITHOUT_CLASSIFICATION	3.47886924783111E-6	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999733151174203	WITHOUT_CLASSIFICATION	2.6684882579708587E-5	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999936504195179	WITHOUT_CLASSIFICATION	6.349580481963767E-6	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999632461841862	WITHOUT_CLASSIFICATION	3.6753815813750036E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999930837089933	WITHOUT_CLASSIFICATION	6.916291006688536E-6	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999827282831699	WITHOUT_CLASSIFICATION	1.7271716830068876E-5	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999996200902711	WITHOUT_CLASSIFICATION	3.799097288846682E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999994835469639	WITHOUT_CLASSIFICATION	5.164530362005658E-7	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999651121888957	WITHOUT_CLASSIFICATION	3.4887811104284235E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999117086428958	WITHOUT_CLASSIFICATION	8.829135710424277E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999597211060866	WITHOUT_CLASSIFICATION	4.0278893913555214E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999502430735467	WITHOUT_CLASSIFICATION	4.975692645324113E-5	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.999998661715211	WITHOUT_CLASSIFICATION	1.3382847889400575E-6	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999989163334404	WITHOUT_CLASSIFICATION	1.0836665596074677E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.999993152621296	WITHOUT_CLASSIFICATION	6.847378704050133E-6	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999892201866419	WITHOUT_CLASSIFICATION	1.0779813358142086E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999208848820189	WITHOUT_CLASSIFICATION	7.911511798113113E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999929017204806	WITHOUT_CLASSIFICATION	7.0982795193355E-6	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999768844789202	WITHOUT_CLASSIFICATION	2.311552107980531E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999941592254744	WITHOUT_CLASSIFICATION	5.840774525596656E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999988566869223	WITHOUT_CLASSIFICATION	1.1433130776321716E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999980921242305	WITHOUT_CLASSIFICATION	1.9078757694720134E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998694962913973	WITHOUT_CLASSIFICATION	1.3050370860270269E-4	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999876436832127	WITHOUT_CLASSIFICATION	1.2356316787301188E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99981570242385	WITHOUT_CLASSIFICATION	1.842975761500253E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.99981570242385	WITHOUT_CLASSIFICATION	1.842975761500253E-4	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999884351725098	WITHOUT_CLASSIFICATION	1.1564827490192688E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999848744492742	WITHOUT_CLASSIFICATION	1.512555072576867E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999953209639575	WITHOUT_CLASSIFICATION	4.67903604250487E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999295309634747	WITHOUT_CLASSIFICATION	7.046903652524989E-5	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999286562610947	WITHOUT_CLASSIFICATION	7.134373890521413E-5	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999841190128723	WITHOUT_CLASSIFICATION	1.5880987127676048E-5	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999989302334626	WITHOUT_CLASSIFICATION	1.0697665372973176E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999989182764989	WITHOUT_CLASSIFICATION	1.0817235011241286E-6	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999494963858874	WITHOUT_CLASSIFICATION	5.0503614112627396E-5	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999253912252994	WITHOUT_CLASSIFICATION	7.460877470054352E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999897365434101	WITHOUT_CLASSIFICATION	1.0263456589968157E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999964682711563	WITHOUT_CLASSIFICATION	3.531728843704752E-5	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999998406461012	WITHOUT_CLASSIFICATION	1.5935389880973296E-6	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999922042037571	WITHOUT_CLASSIFICATION	7.795796242867158E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884006311816	WITHOUT_CLASSIFICATION	1.159936881851964E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825566000379	WITHOUT_CLASSIFICATION	1.7443399962119077E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999995295345634	WITHOUT_CLASSIFICATION	4.7046543659596806E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.99998760053307	WITHOUT_CLASSIFICATION	1.2399466930063647E-5	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999937098999149	WITHOUT_CLASSIFICATION	6.290100085042458E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999983042079491	WITHOUT_CLASSIFICATION	1.6957920509063092E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999764214263303	WITHOUT_CLASSIFICATION	2.3578573669765168E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999764214263303	WITHOUT_CLASSIFICATION	2.3578573669765168E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999664474184238	WITHOUT_CLASSIFICATION	3.355258157617638E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999664474184238	WITHOUT_CLASSIFICATION	3.355258157617638E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998694962913973	WITHOUT_CLASSIFICATION	1.3050370860270269E-4	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999733707983253	WITHOUT_CLASSIFICATION	2.6629201674737445E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996128967133207	WITHOUT_CLASSIFICATION	3.871032866793325E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999798182916061	WITHOUT_CLASSIFICATION	2.0181708393937984E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999929320019658	WITHOUT_CLASSIFICATION	7.06799803413094E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996128967133207	WITHOUT_CLASSIFICATION	3.871032866793325E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999798182916061	WITHOUT_CLASSIFICATION	2.0181708393937984E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999633367935028	WITHOUT_CLASSIFICATION	3.6663206497138424E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999926532414347	WITHOUT_CLASSIFICATION	7.346758565226591E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999121815801293	WITHOUT_CLASSIFICATION	8.781841987067068E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9997963575871369	WITHOUT_CLASSIFICATION	2.0364241286305443E-4	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999994416577678	WITHOUT_CLASSIFICATION	5.583422321715862E-7	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9987398133731079	WITHOUT_CLASSIFICATION	0.0012601866268920918	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999964860259013	WITHOUT_CLASSIFICATION	3.5139740986963543E-5	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9998741796877942	WITHOUT_CLASSIFICATION	1.2582031220578898E-4	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997764090358363	WITHOUT_CLASSIFICATION	2.235909641637399E-4	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999977753218393	WITHOUT_CLASSIFICATION	2.2246781607728083E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999973604937713	WITHOUT_CLASSIFICATION	2.639506228697713E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999972332788819	WITHOUT_CLASSIFICATION	2.7667211181864166E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999935837414894	WITHOUT_CLASSIFICATION	6.4162585106361865E-6	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999733649266205	WITHOUT_CLASSIFICATION	2.6635073379465358E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999929320019658	WITHOUT_CLASSIFICATION	7.06799803413094E-6	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999568598885176	WITHOUT_CLASSIFICATION	4.3140111482450675E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999945742514258	WITHOUT_CLASSIFICATION	5.425748574100955E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999945742514258	WITHOUT_CLASSIFICATION	5.425748574100955E-6	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999990862587546	WITHOUT_CLASSIFICATION	9.137412454120591E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999633367935028	WITHOUT_CLASSIFICATION	3.6663206497138424E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999944692892491	WITHOUT_CLASSIFICATION	5.530710750903411E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998665393321544	WITHOUT_CLASSIFICATION	1.334606678456769E-4	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996700912424561	WITHOUT_CLASSIFICATION	3.2990875754392273E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9993989894935948	WITHOUT_CLASSIFICATION	6.010105064051984E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999503947111545	WITHOUT_CLASSIFICATION	4.960528884549113E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999633367935028	WITHOUT_CLASSIFICATION	3.6663206497138424E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9993989894935948	WITHOUT_CLASSIFICATION	6.010105064051984E-4	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999503947111545	WITHOUT_CLASSIFICATION	4.960528884549113E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9997516149761987	WITHOUT_CLASSIFICATION	2.483850238014008E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999841873894552	WITHOUT_CLASSIFICATION	1.5812610544784425E-5	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999967254262194	WITHOUT_CLASSIFICATION	3.274573780609917E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999633367935028	WITHOUT_CLASSIFICATION	3.6663206497138424E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999633367935028	WITHOUT_CLASSIFICATION	3.6663206497138424E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999810368578256	WITHOUT_CLASSIFICATION	1.8963142174320874E-5	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999969365136915	WITHOUT_CLASSIFICATION	3.0634863085469146E-6	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999874657600994	WITHOUT_CLASSIFICATION	1.2534239900547409E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999939194471688	WITHOUT_CLASSIFICATION	6.080552831262131E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999941631218102	WITHOUT_CLASSIFICATION	5.836878189819682E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999372337115044	WITHOUT_CLASSIFICATION	6.276628849553663E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999986906488724	WITHOUT_CLASSIFICATION	1.3093511276533614E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999957221872162	WITHOUT_CLASSIFICATION	4.27781278385621E-6	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999843213062197	WITHOUT_CLASSIFICATION	1.567869378027664E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999815411362338	WITHOUT_CLASSIFICATION	1.845886376613808E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9998660033146378	WITHOUT_CLASSIFICATION	1.33996685362189E-4	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999971919776889	WITHOUT_CLASSIFICATION	2.8080223111061268E-5	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999989845521875	WITHOUT_CLASSIFICATION	1.015447812557536E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999992878991939	WITHOUT_CLASSIFICATION	7.121008061201519E-7	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999367669013068	WITHOUT_CLASSIFICATION	6.323309869312302E-5	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999829935230075	WITHOUT_CLASSIFICATION	1.7006476992515872E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999615265526721	WITHOUT_CLASSIFICATION	3.847344732776832E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999804169593081	WITHOUT_CLASSIFICATION	1.9583040692006194E-5	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997983439175704	WITHOUT_CLASSIFICATION	2.0165608242954714E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999975909718329	WITHOUT_CLASSIFICATION	2.409028167044599E-6	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999201689482956	WITHOUT_CLASSIFICATION	7.983105170437584E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999667920587967	WITHOUT_CLASSIFICATION	3.3207941203282944E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9999667920587967	WITHOUT_CLASSIFICATION	3.3207941203282944E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999615265526721	WITHOUT_CLASSIFICATION	3.847344732776832E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999789180962945	WITHOUT_CLASSIFICATION	2.108190370560184E-5	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999993048525203	WITHOUT_CLASSIFICATION	6.951474796920506E-7	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9998902805815627	WITHOUT_CLASSIFICATION	1.0971941843734848E-4	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999900169996152	WITHOUT_CLASSIFICATION	9.98300038481479E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999436250072814	WITHOUT_CLASSIFICATION	5.637499271865817E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999782241747179	WITHOUT_CLASSIFICATION	2.177582528205643E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999988568784626	WITHOUT_CLASSIFICATION	1.1431215373910674E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999955741765012	WITHOUT_CLASSIFICATION	4.4258234988964365E-6	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999190881421	WITHOUT_CLASSIFICATION	8.091185781984046E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999067373849292	WITHOUT_CLASSIFICATION	9.326261507080413E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999626923275874	WITHOUT_CLASSIFICATION	3.730767241267345E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999927866539664	WITHOUT_CLASSIFICATION	7.213346033523869E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998620554636101	WITHOUT_CLASSIFICATION	1.3794453639001092E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999918718063863	WITHOUT_CLASSIFICATION	8.128193613719764E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999921957428372	WITHOUT_CLASSIFICATION	7.80425716280136E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999770946359854	WITHOUT_CLASSIFICATION	2.290536401457642E-5	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999989537136332	WITHOUT_CLASSIFICATION	1.0462863668289161E-6	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999126033718655	WITHOUT_CLASSIFICATION	8.739662813447316E-5	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987237719551	WITHOUT_CLASSIFICATION	1.2762280449472507E-6	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999713270705511	WITHOUT_CLASSIFICATION	2.867292944889687E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999858937688743	WITHOUT_CLASSIFICATION	1.4106231125673837E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999916224242333	WITHOUT_CLASSIFICATION	8.377575766633675E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926258253186	WITHOUT_CLASSIFICATION	7.37417468147833E-6	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999305892089272	WITHOUT_CLASSIFICATION	6.941079107280049E-5	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999978125855984	WITHOUT_CLASSIFICATION	2.1874144016080864E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996430851622605	WITHOUT_CLASSIFICATION	3.5691483773945295E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999138112858658	WITHOUT_CLASSIFICATION	8.618871413416535E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804974478151	WITHOUT_CLASSIFICATION	1.9502552184829647E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999404379172752	WITHOUT_CLASSIFICATION	5.956208272489977E-5	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964389585874	WITHOUT_CLASSIFICATION	3.561041412567484E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.999992700205492	WITHOUT_CLASSIFICATION	7.2997945080712354E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9997962401057168	WITHOUT_CLASSIFICATION	2.0375989428322904E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999803477676225	WITHOUT_CLASSIFICATION	1.9652232377479087E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924547503604	WITHOUT_CLASSIFICATION	7.545249639609203E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869186322055	WITHOUT_CLASSIFICATION	1.3081367794557125E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762403366239	WITHOUT_CLASSIFICATION	2.3759663376124642E-5	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891834447766	WITHOUT_CLASSIFICATION	1.0816555223368224E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932463601331	WITHOUT_CLASSIFICATION	6.75363986689544E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999675654314685	WITHOUT_CLASSIFICATION	3.243456853160047E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644720336399	WITHOUT_CLASSIFICATION	3.552796636011446E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999477461766549	WITHOUT_CLASSIFICATION	5.2253823345099424E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671168689294	WITHOUT_CLASSIFICATION	3.2883131070697376E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998943978328497	WITHOUT_CLASSIFICATION	1.0560216715025574E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999248078898765	WITHOUT_CLASSIFICATION	7.519211012351443E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999995675702329	WITHOUT_CLASSIFICATION	4.324297670747488E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999972077452928	WITHOUT_CLASSIFICATION	2.792254707242398E-6	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999614258331816	WITHOUT_CLASSIFICATION	3.8574166818391735E-5	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999739024141288	WITHOUT_CLASSIFICATION	2.609758587125833E-5	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999464767475209	WITHOUT_CLASSIFICATION	5.352325247905299E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999568649155282	WITHOUT_CLASSIFICATION	4.3135084471871534E-5	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999380295716181	WITHOUT_CLASSIFICATION	6.197042838185189E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999478526731375	WITHOUT_CLASSIFICATION	5.2147326862570316E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998376506656033	WITHOUT_CLASSIFICATION	1.6234933439665324E-4	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999543789995726	WITHOUT_CLASSIFICATION	4.5621000427431815E-5	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999992523529968	WITHOUT_CLASSIFICATION	7.476470032764072E-7	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999998181924237	WITHOUT_CLASSIFICATION	1.8180757630889176E-6	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999868748141295	WITHOUT_CLASSIFICATION	1.3125185870511852E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999720892676048	WITHOUT_CLASSIFICATION	2.7910732395211436E-5	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999904832113192	WITHOUT_CLASSIFICATION	9.516788680790816E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999629077942044	WITHOUT_CLASSIFICATION	3.7092205795613254E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859461416113	WITHOUT_CLASSIFICATION	1.405385838872476E-5	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997023760909466	WITHOUT_CLASSIFICATION	2.9762390905342645E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995602403101	WITHOUT_CLASSIFICATION	4.397596898963081E-6	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999919804112729	WITHOUT_CLASSIFICATION	8.01958872703149E-6	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999946474123399	WITHOUT_CLASSIFICATION	5.352587660055889E-6	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999930465658234	WITHOUT_CLASSIFICATION	6.953434176557481E-6	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999961256218316	WITHOUT_CLASSIFICATION	3.874378168364931E-6	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978627304537	WITHOUT_CLASSIFICATION	2.1372695463823097E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999909547751041	WITHOUT_CLASSIFICATION	9.04522489589811E-6	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999993655542573	WITHOUT_CLASSIFICATION	6.344457427132335E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999993983191146	WITHOUT_CLASSIFICATION	6.01680885406252E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999878299927906	WITHOUT_CLASSIFICATION	1.217000720942341E-5	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999998659752192	WITHOUT_CLASSIFICATION	1.340247808818271E-7	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999970866753792	WITHOUT_CLASSIFICATION	2.9133246206902756E-6	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9979680178739171	WITHOUT_CLASSIFICATION	0.0020319821260828454	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999998547517029	WITHOUT_CLASSIFICATION	1.4524829702835387E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999972077452928	WITHOUT_CLASSIFICATION	2.792254707242398E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999909230110228	WITHOUT_CLASSIFICATION	9.076988977197237E-5	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999948537268205	WITHOUT_CLASSIFICATION	5.146273179455579E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999911901789161	WITHOUT_CLASSIFICATION	8.809821083939138E-6	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999139526964109	WITHOUT_CLASSIFICATION	8.604730358909374E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999922669042661	WITHOUT_CLASSIFICATION	7.733095733984427E-6	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999620013212526	WITHOUT_CLASSIFICATION	3.799867874733391E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999803254852365	WITHOUT_CLASSIFICATION	1.9674514763433046E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998776228034623	WITHOUT_CLASSIFICATION	1.2237719653782235E-4	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9997412766932989	WITHOUT_CLASSIFICATION	2.587233067010369E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999914276438674	WITHOUT_CLASSIFICATION	8.572356132654168E-6	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999987007553186	WITHOUT_CLASSIFICATION	1.2992446813892553E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999859757749848	WITHOUT_CLASSIFICATION	1.4024225015110114E-5	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999990287334368	WITHOUT_CLASSIFICATION	9.712665632069206E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999950142072613	WITHOUT_CLASSIFICATION	4.985792738625887E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999668544984864	WITHOUT_CLASSIFICATION	3.314550151359597E-4	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999994757251998	WITHOUT_CLASSIFICATION	5.242748002982013E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9997032749928337	WITHOUT_CLASSIFICATION	2.96725007166294E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998298872055044	WITHOUT_CLASSIFICATION	1.701127944956414E-4	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999678140991555	WITHOUT_CLASSIFICATION	3.218590084445304E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999944035772775	WITHOUT_CLASSIFICATION	5.596422722499136E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999869664757038	WITHOUT_CLASSIFICATION	1.3033524296123156E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999906196917123	WITHOUT_CLASSIFICATION	9.380308287649086E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9988360259996951	WITHOUT_CLASSIFICATION	0.0011639740003049253	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997573496685866	WITHOUT_CLASSIFICATION	2.426503314133861E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998882848657291	WITHOUT_CLASSIFICATION	1.1171513427088625E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999217690958206	WITHOUT_CLASSIFICATION	7.823090417932003E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9861997660108849	WITHOUT_CLASSIFICATION	0.013800233989115056	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999775199961636	WITHOUT_CLASSIFICATION	2.248000383646265E-5	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999586760861876	WITHOUT_CLASSIFICATION	4.132391381242298E-5	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99997992669171	WITHOUT_CLASSIFICATION	2.00733082900295E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999972077452928	WITHOUT_CLASSIFICATION	2.792254707242398E-6	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.99999825161701	WITHOUT_CLASSIFICATION	1.7483829899484574E-6	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999998333454729	WITHOUT_CLASSIFICATION	1.6665452705582605E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993166155731491	WITHOUT_CLASSIFICATION	6.833844268508902E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999972077452928	WITHOUT_CLASSIFICATION	2.792254707242398E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999798152619285	WITHOUT_CLASSIFICATION	2.0184738071578947E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999869664757038	WITHOUT_CLASSIFICATION	1.3033524296123156E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999827830190205	WITHOUT_CLASSIFICATION	1.7216980979499274E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999963912625907	WITHOUT_CLASSIFICATION	3.608737409244334E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999000292408464	WITHOUT_CLASSIFICATION	9.997075915357776E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999914276438674	WITHOUT_CLASSIFICATION	8.572356132654168E-6	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999987007553186	WITHOUT_CLASSIFICATION	1.2992446813892553E-5	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999859757749848	WITHOUT_CLASSIFICATION	1.4024225015110114E-5	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999951812444631	WITHOUT_CLASSIFICATION	4.818755536913995E-6	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999831064248124	WITHOUT_CLASSIFICATION	1.6893575187591877E-5	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9997696371299256	WITHOUT_CLASSIFICATION	2.3036287007439186E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999562820738318	WITHOUT_CLASSIFICATION	4.371792616824134E-5	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9998944652096583	WITHOUT_CLASSIFICATION	1.0553479034172891E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999972077452928	WITHOUT_CLASSIFICATION	2.792254707242398E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.999990287334368	WITHOUT_CLASSIFICATION	9.712665632069206E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999950142072613	WITHOUT_CLASSIFICATION	4.985792738625887E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851669847689	WITHOUT_CLASSIFICATION	1.48330152311236E-5	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974279363766	WITHOUT_CLASSIFICATION	2.572063623409313E-6	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999967096770641	WITHOUT_CLASSIFICATION	3.2903229358782444E-6	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999879138404363	WITHOUT_CLASSIFICATION	1.208615956382666E-5	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999935781430954	WITHOUT_CLASSIFICATION	6.421856904638573E-6	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999305686452629	WITHOUT_CLASSIFICATION	6.943135473705177E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644720336399	WITHOUT_CLASSIFICATION	3.552796636011446E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999896141172254	WITHOUT_CLASSIFICATION	1.0385882774480197E-5	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999638283741692	WITHOUT_CLASSIFICATION	3.617162583074599E-5	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999912931218752	WITHOUT_CLASSIFICATION	8.706878124819647E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9993855015847508	WITHOUT_CLASSIFICATION	6.144984152491286E-4	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999836681870665	WITHOUT_CLASSIFICATION	1.6331812933554203E-5	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999138112858658	WITHOUT_CLASSIFICATION	8.618871413416535E-5	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804974478151	WITHOUT_CLASSIFICATION	1.9502552184829647E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924547503604	WITHOUT_CLASSIFICATION	7.545249639609203E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999836681870665	WITHOUT_CLASSIFICATION	1.6331812933554203E-5	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999111766905784	WITHOUT_CLASSIFICATION	8.882330942161292E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999998631774901	WITHOUT_CLASSIFICATION	1.368225098926388E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998650736154804	WITHOUT_CLASSIFICATION	1.3492638451949247E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998814689265959	WITHOUT_CLASSIFICATION	1.185310734040969E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999978904530712	WITHOUT_CLASSIFICATION	2.1095469286990502E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998393212732875	WITHOUT_CLASSIFICATION	1.6067872671250968E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869186322055	WITHOUT_CLASSIFICATION	1.3081367794557125E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932463601331	WITHOUT_CLASSIFICATION	6.75363986689544E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999878299927906	WITHOUT_CLASSIFICATION	1.217000720942341E-5	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999909791877338	WITHOUT_CLASSIFICATION	9.020812266139303E-6	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999957743722163	WITHOUT_CLASSIFICATION	4.2256277836563255E-6	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999104278086155	WITHOUT_CLASSIFICATION	8.957219138450262E-5	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999791986777697	WITHOUT_CLASSIFICATION	2.0801322230276265E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.99998493926756	WITHOUT_CLASSIFICATION	1.5060732439977655E-5	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999958493564292	WITHOUT_CLASSIFICATION	4.15064357084589E-6	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999727020287799	WITHOUT_CLASSIFICATION	2.7297971220133054E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999190881421	WITHOUT_CLASSIFICATION	8.091185781984046E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999519992354653	WITHOUT_CLASSIFICATION	4.8000764534808916E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999997209825816	WITHOUT_CLASSIFICATION	2.7901741841352647E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999981329577685	WITHOUT_CLASSIFICATION	1.8670422314494537E-6	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999943998995456	WITHOUT_CLASSIFICATION	5.6001004542998185E-6	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999909309790561	WITHOUT_CLASSIFICATION	9.069020943843969E-6	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999662060111926	WITHOUT_CLASSIFICATION	3.379398880738559E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999801592380275	WITHOUT_CLASSIFICATION	1.984076197252913E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999348045311275	WITHOUT_CLASSIFICATION	6.51954688724557E-5	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974200095106	WITHOUT_CLASSIFICATION	2.5799904893527176E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999908590592933	WITHOUT_CLASSIFICATION	9.14094070669371E-5	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999425514418355	WITHOUT_CLASSIFICATION	5.7448558164414566E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999864447767233	WITHOUT_CLASSIFICATION	1.355522327671724E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999977195085771	WITHOUT_CLASSIFICATION	2.280491422820599E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999967583068168	WITHOUT_CLASSIFICATION	3.2416931833176617E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999953683358167	WITHOUT_CLASSIFICATION	4.631664183316811E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998835968986703	WITHOUT_CLASSIFICATION	1.1640310132963587E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999903813290084	WITHOUT_CLASSIFICATION	9.618670991589734E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999997643978037	WITHOUT_CLASSIFICATION	2.356021963030558E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998724457855627	WITHOUT_CLASSIFICATION	1.275542144373089E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974809066106	WITHOUT_CLASSIFICATION	2.519093389416284E-6	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999629331634466	WITHOUT_CLASSIFICATION	3.706683655329121E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999901290701563	WITHOUT_CLASSIFICATION	9.87092984365353E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999991087365942	WITHOUT_CLASSIFICATION	8.912634057929154E-6	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999982728648472	WITHOUT_CLASSIFICATION	1.7271351527174674E-6	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999979222314377	WITHOUT_CLASSIFICATION	2.0777685622900325E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999712769614812	WITHOUT_CLASSIFICATION	2.8723038518805413E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999744254288956	WITHOUT_CLASSIFICATION	2.55745711044277E-5	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999921512677232	WITHOUT_CLASSIFICATION	7.848732276814573E-6	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999953665721967	WITHOUT_CLASSIFICATION	4.633427803359862E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999913802144068	WITHOUT_CLASSIFICATION	8.619785593192969E-5	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999981365402736	WITHOUT_CLASSIFICATION	1.8634597263929376E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999333689112098	WITHOUT_CLASSIFICATION	6.663108879027111E-5	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999891990090385	WITHOUT_CLASSIFICATION	1.0800990961542222E-5	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999794008680886	WITHOUT_CLASSIFICATION	2.0599131911421707E-5	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999325389256414	WITHOUT_CLASSIFICATION	6.746107435866516E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999336869566393	WITHOUT_CLASSIFICATION	6.631304336059388E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999780022702575	WITHOUT_CLASSIFICATION	2.1997729742597858E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999924286128246	WITHOUT_CLASSIFICATION	7.5713871753856065E-6	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999796135832293	WITHOUT_CLASSIFICATION	2.0386416770690436E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999729894631124	WITHOUT_CLASSIFICATION	2.7010536887516467E-5	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9974767230749668	WITHOUT_CLASSIFICATION	0.0025232769250331326	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996422561996702	WITHOUT_CLASSIFICATION	3.5774380032985983E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999771482587136	WITHOUT_CLASSIFICATION	2.28517412862724E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999852768929526	WITHOUT_CLASSIFICATION	1.472310704735871E-5	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999600919521764	WITHOUT_CLASSIFICATION	3.990804782359355E-5	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999850269327702	WITHOUT_CLASSIFICATION	1.4973067229657668E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999951676101795	WITHOUT_CLASSIFICATION	4.832389820435869E-6	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999997532634149	WITHOUT_CLASSIFICATION	2.4673658508763452E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999991705533416	WITHOUT_CLASSIFICATION	8.294466584061376E-6	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999454850354789	WITHOUT_CLASSIFICATION	5.451496452113617E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999985482001528	WITHOUT_CLASSIFICATION	1.4517998471927442E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999984450780985	WITHOUT_CLASSIFICATION	1.5549219014526295E-6	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999987941134907	WITHOUT_CLASSIFICATION	1.2058865092958324E-6	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999973056240904	WITHOUT_CLASSIFICATION	2.694375909617061E-6	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999978932765295	WITHOUT_CLASSIFICATION	2.1067234704539752E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999501089011587	WITHOUT_CLASSIFICATION	4.9891098841372845E-5	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999730138593701	WITHOUT_CLASSIFICATION	2.6986140629944212E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999941259562495	WITHOUT_CLASSIFICATION	5.874043750561493E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999961720500863	WITHOUT_CLASSIFICATION	3.8279499136739845E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999986573210577	WITHOUT_CLASSIFICATION	1.3426789422337385E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999888034456469	WITHOUT_CLASSIFICATION	1.1196554353135523E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999803190987057	WITHOUT_CLASSIFICATION	1.9680901294293164E-5	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999960330116391	WITHOUT_CLASSIFICATION	3.966988360904517E-6	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999892110821818	WITHOUT_CLASSIFICATION	1.0788917818121115E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999741220246553	WITHOUT_CLASSIFICATION	2.5877975344769122E-5	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999920870595962	WITHOUT_CLASSIFICATION	7.912940403801022E-6	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9995214417717398	WITHOUT_CLASSIFICATION	4.7855822826020747E-4	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999486412603248	WITHOUT_CLASSIFICATION	5.1358739675175424E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9997442026041955	WITHOUT_CLASSIFICATION	2.557973958045591E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999792648567779	WITHOUT_CLASSIFICATION	2.0735143222090212E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999992790288182	WITHOUT_CLASSIFICATION	7.209711817078443E-7	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999958143338622	WITHOUT_CLASSIFICATION	4.1856661378448475E-6	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999524763547954	WITHOUT_CLASSIFICATION	4.752364520456464E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999923938842094	WITHOUT_CLASSIFICATION	7.606115790686657E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999149936802928	WITHOUT_CLASSIFICATION	8.500631970722566E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999449091157357	WITHOUT_CLASSIFICATION	5.509088426424378E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999997002141771	WITHOUT_CLASSIFICATION	2.997858229078896E-6	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9984077621186908	WITHOUT_CLASSIFICATION	0.0015922378813092476	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999888702079166	WITHOUT_CLASSIFICATION	1.1129792083364025E-5	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999727317887164	WITHOUT_CLASSIFICATION	2.7268211283702882E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999151115638203	WITHOUT_CLASSIFICATION	8.488843617967707E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999377106338734	WITHOUT_CLASSIFICATION	6.228936612662691E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999914483531431	WITHOUT_CLASSIFICATION	8.551646856939084E-6	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998035157150106	WITHOUT_CLASSIFICATION	1.9648428498944645E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999925980717083	WITHOUT_CLASSIFICATION	7.401928291692734E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995830412021657	WITHOUT_CLASSIFICATION	4.169587978343181E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999003147965414	WITHOUT_CLASSIFICATION	9.968520345862718E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999344189108035	WITHOUT_CLASSIFICATION	6.558108919646492E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999892134812798	WITHOUT_CLASSIFICATION	1.0786518720197644E-4	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999994936381487	WITHOUT_CLASSIFICATION	5.063618513251019E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999943828321606	WITHOUT_CLASSIFICATION	5.6171678394980114E-6	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9997510567646641	WITHOUT_CLASSIFICATION	2.4894323533587585E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999974758516704	WITHOUT_CLASSIFICATION	2.524148329600165E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999943828321606	WITHOUT_CLASSIFICATION	5.6171678394980114E-6	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999961971006574	WITHOUT_CLASSIFICATION	3.802899342599044E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999504499821107	WITHOUT_CLASSIFICATION	4.955001788926738E-5	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999791075003296	WITHOUT_CLASSIFICATION	2.089249967035302E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999495356289795	WITHOUT_CLASSIFICATION	5.046437102062142E-5	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999964219459292	WITHOUT_CLASSIFICATION	3.578054070792718E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999653090737588	WITHOUT_CLASSIFICATION	3.469092624123772E-5	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997285656236603	WITHOUT_CLASSIFICATION	2.7143437633969354E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999791535421819	WITHOUT_CLASSIFICATION	2.0846457818142344E-5	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999957754507868	WITHOUT_CLASSIFICATION	4.224549213166467E-6	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999928019439418	WITHOUT_CLASSIFICATION	7.198056058203992E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999942148088005	WITHOUT_CLASSIFICATION	5.785191199520749E-6	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999986758088872	WITHOUT_CLASSIFICATION	1.3241911128157051E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999994104585702	WITHOUT_CLASSIFICATION	5.895414298034318E-7	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9997930785384938	WITHOUT_CLASSIFICATION	2.0692146150626386E-4	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999578211008996	WITHOUT_CLASSIFICATION	4.217889910033291E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999721820542159	WITHOUT_CLASSIFICATION	2.781794578416061E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999942759180307	WITHOUT_CLASSIFICATION	5.724081969295592E-5	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999942759180307	WITHOUT_CLASSIFICATION	5.724081969295592E-5	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999963418034308	WITHOUT_CLASSIFICATION	3.658196569203173E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9994460458878162	WITHOUT_CLASSIFICATION	5.539541121837493E-4	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9997385732824564	WITHOUT_CLASSIFICATION	2.614267175435259E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998926028727938	WITHOUT_CLASSIFICATION	1.0739712720630551E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996924436435857	WITHOUT_CLASSIFICATION	3.07556356414349E-4	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9996914081184375	WITHOUT_CLASSIFICATION	3.085918815625295E-4	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999140923200615	WITHOUT_CLASSIFICATION	8.590767993850895E-5	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999478082945	WITHOUT_CLASSIFICATION	5.219170551027957E-7	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999851080033102	WITHOUT_CLASSIFICATION	1.4891996689864847E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9988993684459129	WITHOUT_CLASSIFICATION	0.0011006315540871142	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9990763144114863	WITHOUT_CLASSIFICATION	9.236855885137122E-4	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999363743625468	WITHOUT_CLASSIFICATION	6.362563745327131E-5	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998113485074714	WITHOUT_CLASSIFICATION	1.886514925284684E-4	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999686851058285	WITHOUT_CLASSIFICATION	3.131489417149767E-5	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9971466823572259	WITHOUT_CLASSIFICATION	0.0028533176427740295	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999662060111926	WITHOUT_CLASSIFICATION	3.379398880738559E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997486273450976	WITHOUT_CLASSIFICATION	2.513726549024602E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9995872310401989	WITHOUT_CLASSIFICATION	4.1276895980110284E-4	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9984552718499833	WITHOUT_CLASSIFICATION	0.0015447281500167174	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999747306041783	WITHOUT_CLASSIFICATION	2.5269395821729006E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.99999316277896	WITHOUT_CLASSIFICATION	6.837221039942658E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999744699908584	WITHOUT_CLASSIFICATION	2.5530009141680212E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999908435424476	WITHOUT_CLASSIFICATION	9.156457552434228E-6	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999985233470704	WITHOUT_CLASSIFICATION	1.4766529296440595E-6	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999998904941706	WITHOUT_CLASSIFICATION	1.095058294100579E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999998236250014	WITHOUT_CLASSIFICATION	1.7637499859548233E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999965299281787	WITHOUT_CLASSIFICATION	3.47007182133199E-6	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9991574426060266	WITHOUT_CLASSIFICATION	8.425573939734934E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999879376538627	WITHOUT_CLASSIFICATION	1.206234613719596E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999477202354878	WITHOUT_CLASSIFICATION	5.2279764512132405E-5	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9998908722653976	WITHOUT_CLASSIFICATION	1.0912773460244386E-4	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999169710922087	WITHOUT_CLASSIFICATION	8.302890779132457E-5	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9998458425991779	WITHOUT_CLASSIFICATION	1.541574008221003E-4	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999782536078897	WITHOUT_CLASSIFICATION	2.1746392110203917E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998802683940134	WITHOUT_CLASSIFICATION	1.1973160598649233E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999845338420306	WITHOUT_CLASSIFICATION	1.5466157969374202E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999082166213378	WITHOUT_CLASSIFICATION	9.178337866230487E-5	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999449946259802	WITHOUT_CLASSIFICATION	5.500537401986132E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999987521865142	WITHOUT_CLASSIFICATION	1.2478134857007047E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999859312911759	WITHOUT_CLASSIFICATION	1.4068708824269933E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999323521587095	WITHOUT_CLASSIFICATION	6.764784129052685E-5	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.999994335251198	WITHOUT_CLASSIFICATION	5.664748801974813E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.99997350206018	WITHOUT_CLASSIFICATION	2.6497939819995956E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999929621121604	WITHOUT_CLASSIFICATION	7.037887839599716E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998332271240696	WITHOUT_CLASSIFICATION	1.6677287593034687E-4	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999857883544605	WITHOUT_CLASSIFICATION	1.4211645539571566E-5	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919039564011	WITHOUT_CLASSIFICATION	8.096043598785162E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927055027237	WITHOUT_CLASSIFICATION	7.294497276227356E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956859755889	WITHOUT_CLASSIFICATION	4.314024411210173E-6	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999246130643743	WITHOUT_CLASSIFICATION	7.538693562570416E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999837085058879	WITHOUT_CLASSIFICATION	1.629149411211223E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999995492013742	WITHOUT_CLASSIFICATION	4.507986257942633E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999972163233602	WITHOUT_CLASSIFICATION	2.7836766397473535E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999629150998979	WITHOUT_CLASSIFICATION	3.7084900102197616E-5	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999662422160647	WITHOUT_CLASSIFICATION	3.375778393535887E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999629150998979	WITHOUT_CLASSIFICATION	3.7084900102197616E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999990221985346	WITHOUT_CLASSIFICATION	9.778014654050629E-6	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999905092532351	WITHOUT_CLASSIFICATION	9.490746764901134E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999929306887256	WITHOUT_CLASSIFICATION	7.069311274382863E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999966238420498	WITHOUT_CLASSIFICATION	3.3761579501931613E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998955127038172	WITHOUT_CLASSIFICATION	1.0448729618292369E-4	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.999931966597447	WITHOUT_CLASSIFICATION	6.803340255299997E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999964738641445	WITHOUT_CLASSIFICATION	3.526135855564346E-6	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999973007385271	WITHOUT_CLASSIFICATION	2.6992614728349756E-6	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9998027248330137	WITHOUT_CLASSIFICATION	1.9727516698629584E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9996201802566665	WITHOUT_CLASSIFICATION	3.7981974333338187E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999940653312877	WITHOUT_CLASSIFICATION	5.9346687123856915E-6	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999620345489774	WITHOUT_CLASSIFICATION	3.796545102260668E-5	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999804965378541	WITHOUT_CLASSIFICATION	1.950346214587764E-5	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999988841646218	WITHOUT_CLASSIFICATION	1.1158353782625726E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999995403393202	WITHOUT_CLASSIFICATION	4.596606797935818E-6	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999932377893249	WITHOUT_CLASSIFICATION	6.7622106750336654E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999391092323319	WITHOUT_CLASSIFICATION	6.089076766802216E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999391092323319	WITHOUT_CLASSIFICATION	6.089076766802216E-5	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999645038790812	WITHOUT_CLASSIFICATION	3.549612091885774E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999840590582386	WITHOUT_CLASSIFICATION	1.5940941761389806E-5	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999978512974935	WITHOUT_CLASSIFICATION	2.1487025064929264E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9995857098934553	WITHOUT_CLASSIFICATION	4.1429010654461877E-4	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999955821066735	WITHOUT_CLASSIFICATION	4.417893326560289E-6	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9983916234553069	WITHOUT_CLASSIFICATION	0.0016083765446930785	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996812875061357	WITHOUT_CLASSIFICATION	3.187124938642739E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997277799064914	WITHOUT_CLASSIFICATION	2.7222009350859897E-4	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999699881764803	WITHOUT_CLASSIFICATION	3.0011823519785437E-5	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999969400267024	WITHOUT_CLASSIFICATION	3.0599732976706285E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999983378055276	WITHOUT_CLASSIFICATION	1.6621944724770543E-6	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999772612022744	WITHOUT_CLASSIFICATION	2.2738797725633676E-5	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998413210921024	WITHOUT_CLASSIFICATION	1.5867890789755302E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999991288638912	WITHOUT_CLASSIFICATION	8.711361087345881E-7	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999093849441736	WITHOUT_CLASSIFICATION	9.061505582642535E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999660287582286	WITHOUT_CLASSIFICATION	3.3971241771489694E-5	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999612947440154	WITHOUT_CLASSIFICATION	3.870525598462093E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9968175778699742	WITHOUT_CLASSIFICATION	0.003182422130025936	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9997977043112255	WITHOUT_CLASSIFICATION	2.0229568877439086E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999978788801865	WITHOUT_CLASSIFICATION	2.1211198134867544E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999975887381518	WITHOUT_CLASSIFICATION	2.411261848137345E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999830870450185	WITHOUT_CLASSIFICATION	1.6912954981488206E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999971662540477	WITHOUT_CLASSIFICATION	2.8337459523687925E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9998681263600654	WITHOUT_CLASSIFICATION	1.3187363993463953E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999132842679427	WITHOUT_CLASSIFICATION	8.671573205740069E-5	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999963573437496	WITHOUT_CLASSIFICATION	3.642656250542504E-6	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998317495878735	WITHOUT_CLASSIFICATION	1.6825041212645514E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999440119531189	WITHOUT_CLASSIFICATION	5.598804688096461E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999405782697067	WITHOUT_CLASSIFICATION	5.942173029332596E-5	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999881621669994	WITHOUT_CLASSIFICATION	1.1837833000668335E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999621427027434	WITHOUT_CLASSIFICATION	3.785729725663911E-5	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999944148926201	WITHOUT_CLASSIFICATION	5.585107379862069E-6	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999761115012107	WITHOUT_CLASSIFICATION	2.388849878927455E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999702066273927	WITHOUT_CLASSIFICATION	2.979337260733441E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998434642653599	WITHOUT_CLASSIFICATION	1.5653573464014184E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999991631552579	WITHOUT_CLASSIFICATION	8.368447420202825E-7	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999973311669118	WITHOUT_CLASSIFICATION	2.6688330880807306E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999954134399298	WITHOUT_CLASSIFICATION	4.586560070144163E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999917268150812	WITHOUT_CLASSIFICATION	8.273184918917401E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999851733494345	WITHOUT_CLASSIFICATION	1.4826650565519116E-5	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999968614684452	WITHOUT_CLASSIFICATION	3.1385315546387992E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880200697834	WITHOUT_CLASSIFICATION	1.1979930216518857E-5	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9997087438941316	WITHOUT_CLASSIFICATION	2.912561058684744E-4	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998864512147494	WITHOUT_CLASSIFICATION	1.1354878525055591E-4	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999986232857938	WITHOUT_CLASSIFICATION	1.3767142062685285E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999976043461821	WITHOUT_CLASSIFICATION	2.395653817894478E-5	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9992329663750291	WITHOUT_CLASSIFICATION	7.67033624970901E-4	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999970254560835	WITHOUT_CLASSIFICATION	2.9745439165399133E-6	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999827973660573	WITHOUT_CLASSIFICATION	1.7202633942577214E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999221354194187	WITHOUT_CLASSIFICATION	7.78645805813203E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881732804717	WITHOUT_CLASSIFICATION	1.1826719528233776E-5	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998130803578034	WITHOUT_CLASSIFICATION	1.8691964219653907E-4	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999996084830798	WITHOUT_CLASSIFICATION	3.9151692027732864E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998003061088995	WITHOUT_CLASSIFICATION	1.9969389110063198E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999205122229978	WITHOUT_CLASSIFICATION	7.948777700216964E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999798152619285	WITHOUT_CLASSIFICATION	2.0184738071578947E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999798152619285	WITHOUT_CLASSIFICATION	2.0184738071578947E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999991703270023	WITHOUT_CLASSIFICATION	8.296729976628678E-7	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999558290561127	WITHOUT_CLASSIFICATION	4.417094388741466E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999488486858511	WITHOUT_CLASSIFICATION	5.115131414895874E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999829250362206	WITHOUT_CLASSIFICATION	1.707496377939816E-4	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999746694790196	WITHOUT_CLASSIFICATION	2.533052098049837E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999951907645438	WITHOUT_CLASSIFICATION	4.809235456255383E-6	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999979124148003	WITHOUT_CLASSIFICATION	2.087585199783213E-6	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999986423817211	WITHOUT_CLASSIFICATION	1.3576182789679356E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999985564005231	WITHOUT_CLASSIFICATION	1.4435994769026772E-5	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999987032578478	WITHOUT_CLASSIFICATION	1.2967421522538384E-6	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999801184109055	WITHOUT_CLASSIFICATION	1.9881589094492488E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999660293481041	WITHOUT_CLASSIFICATION	3.397065189591249E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9997158727041768	WITHOUT_CLASSIFICATION	2.8412729582309666E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999908057503197	WITHOUT_CLASSIFICATION	9.194249680320066E-6	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9994479342238617	WITHOUT_CLASSIFICATION	5.520657761383099E-4	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999775526582065	WITHOUT_CLASSIFICATION	2.2447341793459485E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999887982691587	WITHOUT_CLASSIFICATION	1.1201730841416507E-5	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999404208794521	WITHOUT_CLASSIFICATION	5.957912054788472E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999873331158425	WITHOUT_CLASSIFICATION	1.2666884157574657E-5	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999746869049502	WITHOUT_CLASSIFICATION	2.5313095049817063E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999931392809006	WITHOUT_CLASSIFICATION	6.860719099445462E-6	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999990231352234	WITHOUT_CLASSIFICATION	9.768647765953244E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998402983421075	WITHOUT_CLASSIFICATION	1.5970165789253965E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999980721139468	WITHOUT_CLASSIFICATION	1.927886053220756E-6	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9989358354055714	WITHOUT_CLASSIFICATION	0.0010641645944285245	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999687123800929	WITHOUT_CLASSIFICATION	3.128761990716752E-5	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9996332107606972	WITHOUT_CLASSIFICATION	3.667892393027791E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997057109064722	WITHOUT_CLASSIFICATION	2.9428909352782615E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999370979120588	WITHOUT_CLASSIFICATION	6.290208794126736E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998402983421075	WITHOUT_CLASSIFICATION	1.5970165789253965E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999762171212312	WITHOUT_CLASSIFICATION	2.37828787687883E-4	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999959215327	WITHOUT_CLASSIFICATION	4.078467392052565E-9	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9993865082093537	WITHOUT_CLASSIFICATION	6.134917906463498E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999637109938091	WITHOUT_CLASSIFICATION	3.6289006190817144E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999112257822	WITHOUT_CLASSIFICATION	8.877421765054271E-8	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999998268072661	WITHOUT_CLASSIFICATION	1.7319273387353284E-7	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999942724451952	WITHOUT_CLASSIFICATION	5.727554804863643E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998385732468	WITHOUT_CLASSIFICATION	1.614267531390218E-7	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999794831476299	WITHOUT_CLASSIFICATION	2.0516852370109224E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999637109938091	WITHOUT_CLASSIFICATION	3.6289006190817144E-5	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999980400465545	WITHOUT_CLASSIFICATION	1.959953445517762E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998650201721	WITHOUT_CLASSIFICATION	1.3497982789314705E-7	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999932004302108	WITHOUT_CLASSIFICATION	6.79956978918576E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998288313588719	WITHOUT_CLASSIFICATION	1.71168641128099E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999934584770154	WITHOUT_CLASSIFICATION	6.541522984552172E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999983378055276	WITHOUT_CLASSIFICATION	1.6621944724770543E-6	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999993666560028	WITHOUT_CLASSIFICATION	6.333439973082541E-7	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999992195527785	WITHOUT_CLASSIFICATION	7.804472214901186E-7	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999888890185394	WITHOUT_CLASSIFICATION	1.111098146051779E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999977223609436	WITHOUT_CLASSIFICATION	2.2776390563623537E-6	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999427432844662	WITHOUT_CLASSIFICATION	5.7256715533691775E-5	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999978334295596	WITHOUT_CLASSIFICATION	2.1665704403362544E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9995937797906954	WITHOUT_CLASSIFICATION	4.062202093046304E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999764876282433	WITHOUT_CLASSIFICATION	2.3512371756637424E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999310345670822	WITHOUT_CLASSIFICATION	6.896543291777594E-5	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999988253108096	WITHOUT_CLASSIFICATION	1.1746891904013058E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997575249690817	WITHOUT_CLASSIFICATION	2.4247503091835352E-4	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999164236223749	WITHOUT_CLASSIFICATION	8.357637762518889E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999939527380721	WITHOUT_CLASSIFICATION	6.047261927823314E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.999993667748506	WITHOUT_CLASSIFICATION	6.332251493958575E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999971034830583	WITHOUT_CLASSIFICATION	2.896516941821972E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9997692214989596	WITHOUT_CLASSIFICATION	2.307785010403206E-4	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.99999890364728	WITHOUT_CLASSIFICATION	1.0963527200634811E-6	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999978159794062	WITHOUT_CLASSIFICATION	2.1840205938009614E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999995664602855	WITHOUT_CLASSIFICATION	4.3353971449462915E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9992538937436187	WITHOUT_CLASSIFICATION	7.461062563812577E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9996071625230979	WITHOUT_CLASSIFICATION	3.9283747690209734E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999932825710726	WITHOUT_CLASSIFICATION	6.717428927485969E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999914325535304	WITHOUT_CLASSIFICATION	8.567446469648596E-6	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999931067935522	WITHOUT_CLASSIFICATION	6.8932064477082065E-6	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999922256940686	WITHOUT_CLASSIFICATION	7.774305931399387E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998207732458096	WITHOUT_CLASSIFICATION	1.7922675419039283E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999842510894537	WITHOUT_CLASSIFICATION	1.5748910546245417E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969291515567	WITHOUT_CLASSIFICATION	3.070848443302681E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998453332099393	WITHOUT_CLASSIFICATION	1.5466679006065465E-4	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999976237746373	WITHOUT_CLASSIFICATION	2.3762253627068372E-6	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999901783419834	WITHOUT_CLASSIFICATION	9.82165801650123E-6	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999691602344415	WITHOUT_CLASSIFICATION	3.0839765558442513E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999613033272834	WITHOUT_CLASSIFICATION	3.869667271657973E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999613033272834	WITHOUT_CLASSIFICATION	3.869667271657973E-5	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999848348628958	WITHOUT_CLASSIFICATION	1.516513710410441E-5	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997667411245894	WITHOUT_CLASSIFICATION	2.3325887541067244E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999854403981002	WITHOUT_CLASSIFICATION	1.4559601899632683E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999681893803797	WITHOUT_CLASSIFICATION	3.1810619620414536E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9995556078402887	WITHOUT_CLASSIFICATION	4.4439215971124775E-4	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999976135075896	WITHOUT_CLASSIFICATION	2.3864924102572606E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999993298537061	WITHOUT_CLASSIFICATION	6.7014629390495095E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999859925138822	WITHOUT_CLASSIFICATION	1.4007486117805853E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999917854618432	WITHOUT_CLASSIFICATION	8.21453815680167E-6	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999744557267	WITHOUT_CLASSIFICATION	2.554427329253788E-7	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999421756919208	WITHOUT_CLASSIFICATION	5.782430807918473E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999962289069034	WITHOUT_CLASSIFICATION	3.7710930966857716E-6	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999870129967308	WITHOUT_CLASSIFICATION	1.2987003269297938E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999613033272834	WITHOUT_CLASSIFICATION	3.869667271657973E-5	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998895584059869	WITHOUT_CLASSIFICATION	1.1044159401313667E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999882137067083	WITHOUT_CLASSIFICATION	1.1786293291611746E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999936343342553	WITHOUT_CLASSIFICATION	6.365665744750137E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999981198565919	WITHOUT_CLASSIFICATION	1.8801434080336038E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999920826444807	WITHOUT_CLASSIFICATION	7.917355519326124E-6	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999613706453306	WITHOUT_CLASSIFICATION	3.862935466944327E-5	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999991875366476	WITHOUT_CLASSIFICATION	8.124633523582259E-7	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999980718427744	WITHOUT_CLASSIFICATION	1.9281572255958983E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999048770029174	WITHOUT_CLASSIFICATION	9.512299708266441E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9994290105101269	WITHOUT_CLASSIFICATION	5.70989489873129E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999851255116158	WITHOUT_CLASSIFICATION	1.4874488384230225E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999969291515567	WITHOUT_CLASSIFICATION	3.070848443302681E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999613033272834	WITHOUT_CLASSIFICATION	3.869667271657973E-5	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999937681162079	WITHOUT_CLASSIFICATION	6.23188379213348E-6	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999903242456056	WITHOUT_CLASSIFICATION	9.675754394365244E-6	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999833642566479	WITHOUT_CLASSIFICATION	1.66357433520991E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999760518898037	WITHOUT_CLASSIFICATION	2.3948110196385574E-5	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999471751401436	WITHOUT_CLASSIFICATION	5.282485985643067E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999846450903125	WITHOUT_CLASSIFICATION	1.5354909687551597E-5	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997344331190579	WITHOUT_CLASSIFICATION	2.6556688094215913E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999729597182276	WITHOUT_CLASSIFICATION	2.7040281772398715E-4	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9995665443833368	WITHOUT_CLASSIFICATION	4.334556166632929E-4	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999276086244707	WITHOUT_CLASSIFICATION	7.239137552930584E-4	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999556691234093	WITHOUT_CLASSIFICATION	4.4330876590757634E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995734307371185	WITHOUT_CLASSIFICATION	4.2656926288150277E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999741197030081	WITHOUT_CLASSIFICATION	2.5880296991960887E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999275888446572	WITHOUT_CLASSIFICATION	7.241115534291786E-5	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999990221985346	WITHOUT_CLASSIFICATION	9.778014654050629E-6	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999742368573159	WITHOUT_CLASSIFICATION	2.5763142684073216E-5	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999933992055874	WITHOUT_CLASSIFICATION	6.6007944126195614E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998761979420291	WITHOUT_CLASSIFICATION	1.2380205797092171E-4	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.999995966316811	WITHOUT_CLASSIFICATION	4.033683188965884E-6	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999923895483885	WITHOUT_CLASSIFICATION	7.610451611477409E-6	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999745030737592	WITHOUT_CLASSIFICATION	2.5496926240697488E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999745030737592	WITHOUT_CLASSIFICATION	2.5496926240697488E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999998936164309	WITHOUT_CLASSIFICATION	1.0638356910272567E-6	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999973341497196	WITHOUT_CLASSIFICATION	2.6658502803789217E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999430720515492	WITHOUT_CLASSIFICATION	5.6927948450857585E-5	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999682893839877	WITHOUT_CLASSIFICATION	3.1710616012187264E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999088232524562	WITHOUT_CLASSIFICATION	9.11767475437424E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999958543334492	WITHOUT_CLASSIFICATION	4.14566655075206E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999745881584243	WITHOUT_CLASSIFICATION	2.5411841575627672E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.99998785994394	WITHOUT_CLASSIFICATION	1.2140056059914044E-5	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.99998785994394	WITHOUT_CLASSIFICATION	1.2140056059914044E-5	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9985449362701423	WITHOUT_CLASSIFICATION	0.0014550637298576716	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9996126115144175	WITHOUT_CLASSIFICATION	3.873884855825691E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999330394296109	WITHOUT_CLASSIFICATION	6.696057038910523E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999063043760095	WITHOUT_CLASSIFICATION	9.369562399060385E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999063043760095	WITHOUT_CLASSIFICATION	9.369562399060385E-5	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999063043760095	WITHOUT_CLASSIFICATION	9.369562399060385E-5	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999788259861706	WITHOUT_CLASSIFICATION	2.1174013829324385E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999937150088903	WITHOUT_CLASSIFICATION	6.284991109633034E-6	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9996333982233516	WITHOUT_CLASSIFICATION	3.666017766483917E-4	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9985296067367463	WITHOUT_CLASSIFICATION	0.0014703932632536794	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9984977081979247	WITHOUT_CLASSIFICATION	0.0015022918020752586	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999613033272834	WITHOUT_CLASSIFICATION	3.869667271657973E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999613033272834	WITHOUT_CLASSIFICATION	3.869667271657973E-5	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999801017489941	WITHOUT_CLASSIFICATION	1.9898251005916456E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999994147871102	WITHOUT_CLASSIFICATION	5.852128899104319E-7	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9997084633380675	WITHOUT_CLASSIFICATION	2.9153666193250095E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999859921408619	WITHOUT_CLASSIFICATION	1.4007859138082565E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.999973133676985	WITHOUT_CLASSIFICATION	2.6866323014997176E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999518792689784	WITHOUT_CLASSIFICATION	4.812073102167076E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998256965795975	WITHOUT_CLASSIFICATION	1.743034204024767E-4	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999752368542714	WITHOUT_CLASSIFICATION	2.476314572864248E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999975198807266	WITHOUT_CLASSIFICATION	2.4801192734691264E-6	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999984076977902	WITHOUT_CLASSIFICATION	1.5923022098016464E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999324763184017	WITHOUT_CLASSIFICATION	6.752368159833314E-5	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998612655023341	WITHOUT_CLASSIFICATION	1.387344976659182E-4	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998612655023341	WITHOUT_CLASSIFICATION	1.387344976659182E-4	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998995070174143	WITHOUT_CLASSIFICATION	1.0049298258569983E-4	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998995070174143	WITHOUT_CLASSIFICATION	1.0049298258569983E-4	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998990922865062	WITHOUT_CLASSIFICATION	1.00907713493787E-4	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999805622345992	WITHOUT_CLASSIFICATION	1.943776540078667E-4	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999805622345992	WITHOUT_CLASSIFICATION	1.943776540078667E-4	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997974912074575	WITHOUT_CLASSIFICATION	2.0250879254247358E-4	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997891754772531	WITHOUT_CLASSIFICATION	2.1082452274695727E-4	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999470614547158	WITHOUT_CLASSIFICATION	5.293854528416516E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999745030737592	WITHOUT_CLASSIFICATION	2.5496926240697488E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.99998356975911	WITHOUT_CLASSIFICATION	1.6430240890049438E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997891754772531	WITHOUT_CLASSIFICATION	2.1082452274695727E-4	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9995437489753148	WITHOUT_CLASSIFICATION	4.562510246851399E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999678578823066	WITHOUT_CLASSIFICATION	3.214211769338454E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999245774776767	WITHOUT_CLASSIFICATION	7.542252232327698E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999279765046937	WITHOUT_CLASSIFICATION	7.202349530623633E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999973757327895	WITHOUT_CLASSIFICATION	2.6242672106183873E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999765679929302	WITHOUT_CLASSIFICATION	2.343200706977371E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999937386436658	WITHOUT_CLASSIFICATION	6.261356334206577E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999099351938184	WITHOUT_CLASSIFICATION	9.006480618166251E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.99998338622447	WITHOUT_CLASSIFICATION	1.6613775530026826E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999169170471454	WITHOUT_CLASSIFICATION	8.30829528545529E-5	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999982861834413	WITHOUT_CLASSIFICATION	1.71381655869801E-5	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999994227369958	WITHOUT_CLASSIFICATION	5.772630041994299E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999548737339716	WITHOUT_CLASSIFICATION	4.512626602848942E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999760083903783	WITHOUT_CLASSIFICATION	2.39916096218652E-5	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999391391716114	WITHOUT_CLASSIFICATION	6.0860828388664193E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999963292821109	WITHOUT_CLASSIFICATION	3.6707178890968115E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999970506296417	WITHOUT_CLASSIFICATION	2.9493703582439945E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999963893557852	WITHOUT_CLASSIFICATION	3.6106442147920104E-6	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999963893557852	WITHOUT_CLASSIFICATION	3.6106442147920104E-6	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999940224565568	WITHOUT_CLASSIFICATION	5.9775434432652205E-6	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999934746623601	WITHOUT_CLASSIFICATION	6.5253376398772185E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999972356620235	WITHOUT_CLASSIFICATION	2.764337976455892E-6	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999896755140599	WITHOUT_CLASSIFICATION	1.0324485940044681E-5	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999958295972139	WITHOUT_CLASSIFICATION	4.170402786127416E-6	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999995058214826	WITHOUT_CLASSIFICATION	4.941785173938424E-6	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999644912311478	WITHOUT_CLASSIFICATION	3.550876885209973E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999937536462414	WITHOUT_CLASSIFICATION	6.246353758587082E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999994148703102	WITHOUT_CLASSIFICATION	5.851296898105617E-6	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9995261581004528	WITHOUT_CLASSIFICATION	4.738418995473481E-4	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9996322803839454	WITHOUT_CLASSIFICATION	3.677196160545598E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995734307371185	WITHOUT_CLASSIFICATION	4.2656926288150277E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999254836671421	WITHOUT_CLASSIFICATION	7.451633285797311E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999989651006878	WITHOUT_CLASSIFICATION	1.0348993122818937E-6	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999989109140629	WITHOUT_CLASSIFICATION	1.089085937169101E-6	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999977679118714	WITHOUT_CLASSIFICATION	2.23208812860142E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999449363147641	WITHOUT_CLASSIFICATION	5.506368523581076E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999449363147641	WITHOUT_CLASSIFICATION	5.506368523581076E-5	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998802708761938	WITHOUT_CLASSIFICATION	1.197291238062089E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999894059140931	WITHOUT_CLASSIFICATION	1.0594085906957833E-5	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999843948760384	WITHOUT_CLASSIFICATION	1.5605123961539266E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999689490710734	WITHOUT_CLASSIFICATION	3.105092892659143E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9998832847520394	WITHOUT_CLASSIFICATION	1.1671524796054344E-4	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999877025020314	WITHOUT_CLASSIFICATION	1.2297497968689447E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993164429992373	WITHOUT_CLASSIFICATION	6.835570007626599E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9996846918266344	WITHOUT_CLASSIFICATION	3.1530817336563E-4	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999943368227138	WITHOUT_CLASSIFICATION	5.6631772861353536E-6	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999907547457915	WITHOUT_CLASSIFICATION	9.245254208550466E-6	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9966490049490224	WITHOUT_CLASSIFICATION	0.0033509950509775753	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9996846918266344	WITHOUT_CLASSIFICATION	3.1530817336563E-4	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998443916311052	WITHOUT_CLASSIFICATION	1.5560836889478267E-4	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9994532471798397	WITHOUT_CLASSIFICATION	5.467528201602448E-4	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999928439765908	WITHOUT_CLASSIFICATION	7.156023409200213E-6	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9998873469229367	WITHOUT_CLASSIFICATION	1.1265307706327305E-4	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999951926218934	WITHOUT_CLASSIFICATION	4.8073781065269145E-6	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999775809425807	WITHOUT_CLASSIFICATION	2.241905741933539E-5	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999967821686716	WITHOUT_CLASSIFICATION	3.217831328423459E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999976062338789	WITHOUT_CLASSIFICATION	2.393766121022206E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999970172991683	WITHOUT_CLASSIFICATION	2.9827008316271474E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999542589533434	WITHOUT_CLASSIFICATION	4.5741046656531694E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999965634623267	WITHOUT_CLASSIFICATION	3.4365376733752413E-6	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999039310393	WITHOUT_CLASSIFICATION	9.606896067290386E-8	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9994147806312248	WITHOUT_CLASSIFICATION	5.85219368775269E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999948012259524	WITHOUT_CLASSIFICATION	5.198774047695434E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999915640424506	WITHOUT_CLASSIFICATION	8.43595754942789E-6	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999856577125419	WITHOUT_CLASSIFICATION	1.434228745818587E-5	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999995987773164	WITHOUT_CLASSIFICATION	4.012226836068109E-6	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999536077462006	WITHOUT_CLASSIFICATION	4.639225379946031E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999650519055275	WITHOUT_CLASSIFICATION	3.4948094472537416E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999947701379013	WITHOUT_CLASSIFICATION	5.229862098641425E-6	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999874034368835	WITHOUT_CLASSIFICATION	1.259656311644676E-5	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9990115067296016	WITHOUT_CLASSIFICATION	9.884932703984016E-4	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999699087180218	WITHOUT_CLASSIFICATION	3.0091281978110983E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999464844469073	WITHOUT_CLASSIFICATION	5.3515553092735726E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9997282527153563	WITHOUT_CLASSIFICATION	2.7174728464376323E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999255343092168	WITHOUT_CLASSIFICATION	7.446569078318677E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999619983110859	WITHOUT_CLASSIFICATION	3.8001688914101124E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999994210822567	WITHOUT_CLASSIFICATION	5.7891774330318274E-6	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999628828016436	WITHOUT_CLASSIFICATION	3.711719835644398E-5	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9981837464399214	WITHOUT_CLASSIFICATION	0.0018162535600786242	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999873157397167	WITHOUT_CLASSIFICATION	1.2684260283210073E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999962034138404	WITHOUT_CLASSIFICATION	3.796586159661437E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999727047676369	WITHOUT_CLASSIFICATION	2.729523236316979E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999846807150631	WITHOUT_CLASSIFICATION	1.5319284936866914E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999785622598358	WITHOUT_CLASSIFICATION	2.1437740164184353E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999882939705808	WITHOUT_CLASSIFICATION	1.1706029419243208E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998915573593351	WITHOUT_CLASSIFICATION	1.0844264066494483E-4	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999781559323536	WITHOUT_CLASSIFICATION	2.184406764639291E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999876791149845	WITHOUT_CLASSIFICATION	1.2320885015443228E-5	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9998369793005556	WITHOUT_CLASSIFICATION	1.6302069944433445E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999926263146494	WITHOUT_CLASSIFICATION	7.373685350640523E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999905889108274	WITHOUT_CLASSIFICATION	9.411089172629228E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999934188578574	WITHOUT_CLASSIFICATION	6.58114214261806E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999892107272098	WITHOUT_CLASSIFICATION	1.0789272790137863E-5	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999832106029409	WITHOUT_CLASSIFICATION	1.6789397059027003E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999779794076217	WITHOUT_CLASSIFICATION	2.2020592378367536E-5	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999842317442016	WITHOUT_CLASSIFICATION	1.5768255798378355E-5	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999687508851333	WITHOUT_CLASSIFICATION	3.1249114866685064E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999868249680233	WITHOUT_CLASSIFICATION	1.317503197666171E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999946560480719	WITHOUT_CLASSIFICATION	5.343951928114704E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972333853738	WITHOUT_CLASSIFICATION	2.7666146261656833E-6	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999787635109604	WITHOUT_CLASSIFICATION	2.1236489039620446E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999973158722639	WITHOUT_CLASSIFICATION	2.6841277360478054E-6	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999919793004826	WITHOUT_CLASSIFICATION	8.020699517486175E-6	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999980783736544	WITHOUT_CLASSIFICATION	1.921626345610524E-6	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999966607079586	WITHOUT_CLASSIFICATION	3.339292041409983E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999104955688152	WITHOUT_CLASSIFICATION	8.950443118483293E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999996033841229	WITHOUT_CLASSIFICATION	3.9661587713891757E-7	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999827686550244	WITHOUT_CLASSIFICATION	1.723134497546833E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999693923882741	WITHOUT_CLASSIFICATION	3.060761172581925E-5	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999918438778252	WITHOUT_CLASSIFICATION	8.156122174854568E-6	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999969446617719	WITHOUT_CLASSIFICATION	3.0553382280589577E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999961732315964	WITHOUT_CLASSIFICATION	3.826768403609751E-6	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999955057851331	WITHOUT_CLASSIFICATION	4.494214866888333E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999526804613539	WITHOUT_CLASSIFICATION	4.7319538646140446E-5	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999826551593003	WITHOUT_CLASSIFICATION	1.734484069970258E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972333853738	WITHOUT_CLASSIFICATION	2.7666146261656833E-6	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999987666534234	WITHOUT_CLASSIFICATION	1.2333465766200947E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999964840927915	WITHOUT_CLASSIFICATION	3.5159072085676298E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999973564136859	WITHOUT_CLASSIFICATION	2.6435863139798094E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999902228479108	WITHOUT_CLASSIFICATION	9.777152089191931E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.99992474851331	WITHOUT_CLASSIFICATION	7.525148668998577E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999975921693088	WITHOUT_CLASSIFICATION	2.40783069105692E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999943368227138	WITHOUT_CLASSIFICATION	5.6631772861353536E-6	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997853482851428	WITHOUT_CLASSIFICATION	2.1465171485729288E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999785622598358	WITHOUT_CLASSIFICATION	2.1437740164184353E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997767327023832	WITHOUT_CLASSIFICATION	2.2326729761673288E-4	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999839846274637	WITHOUT_CLASSIFICATION	1.6015372536219126E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999061688346298	WITHOUT_CLASSIFICATION	9.383116537021693E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9998957649289505	WITHOUT_CLASSIFICATION	1.0423507104948218E-4	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999326944490905	WITHOUT_CLASSIFICATION	6.730555090950121E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999834697476839	WITHOUT_CLASSIFICATION	1.653025231611126E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999898167008839	WITHOUT_CLASSIFICATION	1.0183299116011598E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9997412595653167	WITHOUT_CLASSIFICATION	2.5874043468330116E-4	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999970775174343	WITHOUT_CLASSIFICATION	2.9224825656656207E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999957682873383	WITHOUT_CLASSIFICATION	4.23171266174642E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999637593665548	WITHOUT_CLASSIFICATION	3.62406334451831E-5	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999949642890814	WITHOUT_CLASSIFICATION	5.0357109185265054E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999950137791058	WITHOUT_CLASSIFICATION	4.986220894127059E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999950137791058	WITHOUT_CLASSIFICATION	4.986220894127059E-6	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999989768179155	WITHOUT_CLASSIFICATION	1.023182084517448E-6	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999281610619538	WITHOUT_CLASSIFICATION	7.183893804616845E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998592164233	WITHOUT_CLASSIFICATION	1.4078357673764256E-7	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.99998172069299	WITHOUT_CLASSIFICATION	1.8279307010022628E-5	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999726497737771	WITHOUT_CLASSIFICATION	2.7350226222898244E-5	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999957808593087	WITHOUT_CLASSIFICATION	4.219140691317657E-6	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999958937889079	WITHOUT_CLASSIFICATION	4.10621109218368E-6	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999964936282104	WITHOUT_CLASSIFICATION	3.5063717896381585E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999989634071684	WITHOUT_CLASSIFICATION	1.036592831628562E-6	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999486160727314	WITHOUT_CLASSIFICATION	5.138392726853707E-5	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999613548439612	WITHOUT_CLASSIFICATION	3.8645156038800655E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.999896288107144	WITHOUT_CLASSIFICATION	1.037118928559788E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999140244718296	WITHOUT_CLASSIFICATION	8.597552817030312E-5	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999733560193	WITHOUT_CLASSIFICATION	2.664398062503352E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999607168391482	WITHOUT_CLASSIFICATION	3.9283160851769434E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999723964368505	WITHOUT_CLASSIFICATION	2.7603563149510277E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9996147884796233	WITHOUT_CLASSIFICATION	3.8521152037679184E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999634320845708	WITHOUT_CLASSIFICATION	3.65679154292185E-5	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999950463623569	WITHOUT_CLASSIFICATION	4.953637643158816E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999963384014632	WITHOUT_CLASSIFICATION	3.6615985369105625E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999740879574782	WITHOUT_CLASSIFICATION	2.591204252174218E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999917610105906	WITHOUT_CLASSIFICATION	8.238989409443418E-6	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999945134241283	WITHOUT_CLASSIFICATION	5.486575871782042E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9998384621392102	WITHOUT_CLASSIFICATION	1.615378607897073E-4	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999899494152623	WITHOUT_CLASSIFICATION	1.0050584737708934E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660326351405	WITHOUT_CLASSIFICATION	3.396736485959058E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999626923275874	WITHOUT_CLASSIFICATION	3.730767241267345E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9998727728127557	WITHOUT_CLASSIFICATION	1.272271872443698E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999348391221541	WITHOUT_CLASSIFICATION	6.516087784586743E-5	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999715625014508	WITHOUT_CLASSIFICATION	2.8437498549158505E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9861997660108849	WITHOUT_CLASSIFICATION	0.013800233989115056	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9994287143110829	WITHOUT_CLASSIFICATION	5.712856889169858E-4	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999973050856615	WITHOUT_CLASSIFICATION	2.6949143384792766E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999987606227934	WITHOUT_CLASSIFICATION	1.2393772066048756E-6	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999801365283504	WITHOUT_CLASSIFICATION	1.9863471649623636E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999910085549146	WITHOUT_CLASSIFICATION	8.991445085370736E-6	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999733635181555	WITHOUT_CLASSIFICATION	2.663648184454483E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999358761257817	WITHOUT_CLASSIFICATION	6.412387421829207E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999224622852786	WITHOUT_CLASSIFICATION	7.75377147213746E-5	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999765162381412	WITHOUT_CLASSIFICATION	2.3483761858768667E-5	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999301444786364	WITHOUT_CLASSIFICATION	6.985552136360012E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999945356133435	WITHOUT_CLASSIFICATION	5.464386656439431E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999579481160338	WITHOUT_CLASSIFICATION	4.205188396626384E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999655833566435	WITHOUT_CLASSIFICATION	3.4416643356447344E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999939726076714	WITHOUT_CLASSIFICATION	6.027392328569513E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998650736154804	WITHOUT_CLASSIFICATION	1.3492638451949247E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9507141525022453	WITHOUT_CLASSIFICATION	0.049285847497754776	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999738412448539	WITHOUT_CLASSIFICATION	2.615875514604883E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999981035675616	WITHOUT_CLASSIFICATION	1.8964324383977488E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999884001907303	WITHOUT_CLASSIFICATION	1.1599809269710457E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999795500631975	WITHOUT_CLASSIFICATION	2.0449936802417324E-5	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9996960328959564	WITHOUT_CLASSIFICATION	3.0396710404359E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999889509402866	WITHOUT_CLASSIFICATION	1.1049059713444581E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999792755116506	WITHOUT_CLASSIFICATION	2.072448834936643E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999979617605437	WITHOUT_CLASSIFICATION	2.0382394562972717E-5	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999914798206964	WITHOUT_CLASSIFICATION	8.520179303590494E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999726144874795	WITHOUT_CLASSIFICATION	2.7385512520564308E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999483028075715	WITHOUT_CLASSIFICATION	5.169719242844195E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999829166225652	WITHOUT_CLASSIFICATION	1.7083377434789906E-5	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999945698172035	WITHOUT_CLASSIFICATION	5.430182796437043E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999690053353958	WITHOUT_CLASSIFICATION	3.099466460425977E-5	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999889421821061	WITHOUT_CLASSIFICATION	1.1057817893963092E-5	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999950963206154	WITHOUT_CLASSIFICATION	4.903679384603713E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999978454983308	WITHOUT_CLASSIFICATION	2.1545016691045657E-6	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999811613879777	WITHOUT_CLASSIFICATION	1.8838612022426707E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999932636804775	WITHOUT_CLASSIFICATION	6.7363195225419246E-6	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999792524434645	WITHOUT_CLASSIFICATION	2.0747556535391773E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999971317687626	WITHOUT_CLASSIFICATION	2.8682312373547277E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999935171906026	WITHOUT_CLASSIFICATION	6.482809397437193E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999885804735177	WITHOUT_CLASSIFICATION	1.141952648236294E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999935171906026	WITHOUT_CLASSIFICATION	6.482809397437193E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999865690997517	WITHOUT_CLASSIFICATION	1.343090024830996E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999835002955832	WITHOUT_CLASSIFICATION	1.6499704416704406E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999650180358031	WITHOUT_CLASSIFICATION	3.4981964196919134E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999998287539259	WITHOUT_CLASSIFICATION	1.7124607410191882E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999281715776651	WITHOUT_CLASSIFICATION	7.1828422334842E-5	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999861470358145	WITHOUT_CLASSIFICATION	1.3852964185512428E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999986577237074	WITHOUT_CLASSIFICATION	1.3422762925802093E-6	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999797807221028	WITHOUT_CLASSIFICATION	2.021927789711631E-5	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999988832542931	WITHOUT_CLASSIFICATION	1.1167457069851298E-6	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999985920868882	WITHOUT_CLASSIFICATION	1.4079131117456593E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999174778213882	WITHOUT_CLASSIFICATION	8.252217861175236E-5	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999888993785387	WITHOUT_CLASSIFICATION	1.1100621461263807E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999958184714148	WITHOUT_CLASSIFICATION	4.181528585178349E-6	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998583479604208	WITHOUT_CLASSIFICATION	1.416520395791222E-4	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999954702444482	WITHOUT_CLASSIFICATION	4.529755551834444E-6	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999598146011678	WITHOUT_CLASSIFICATION	4.018539883213378E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9998200724858677	WITHOUT_CLASSIFICATION	1.7992751413241652E-4	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999926271259995	WITHOUT_CLASSIFICATION	7.3728740006037175E-6	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999924058761873	WITHOUT_CLASSIFICATION	7.5941238127228726E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999746313919046	WITHOUT_CLASSIFICATION	2.5368608095455912E-5	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999878608409828	WITHOUT_CLASSIFICATION	1.2139159017269723E-5	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999874711568432	WITHOUT_CLASSIFICATION	1.2528843156885268E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999963873532057	WITHOUT_CLASSIFICATION	3.612646794362771E-6	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998813917298406	WITHOUT_CLASSIFICATION	1.1860827015942487E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999947133461328	WITHOUT_CLASSIFICATION	5.286653867221795E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999505484864962	WITHOUT_CLASSIFICATION	4.945151350386703E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999920743180993	WITHOUT_CLASSIFICATION	7.925681900672075E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999807406164568	WITHOUT_CLASSIFICATION	1.925938354319976E-5	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999959093448647	WITHOUT_CLASSIFICATION	4.0906551352479385E-6	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.999989439724385	WITHOUT_CLASSIFICATION	1.056027561500331E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999578270052201	WITHOUT_CLASSIFICATION	4.2172994779898974E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999965800488297	WITHOUT_CLASSIFICATION	3.419951170311755E-5	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999978765861003	WITHOUT_CLASSIFICATION	2.123413899684857E-6	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999887551001885	WITHOUT_CLASSIFICATION	1.1244899811539052E-5	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999983551990522	WITHOUT_CLASSIFICATION	1.6448009477797737E-6	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999587091809718	WITHOUT_CLASSIFICATION	4.1290819028127314E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.999987309834099	WITHOUT_CLASSIFICATION	1.2690165900973039E-5	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999971365063808	WITHOUT_CLASSIFICATION	2.8634936191128955E-6	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999298552281022	WITHOUT_CLASSIFICATION	7.014477189773785E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999979273639665	WITHOUT_CLASSIFICATION	2.0726360334158716E-6	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9998077340185352	WITHOUT_CLASSIFICATION	1.9226598146478957E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999919645987767	WITHOUT_CLASSIFICATION	8.03540122332737E-6	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9993166155731491	WITHOUT_CLASSIFICATION	6.833844268508902E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999505484864962	WITHOUT_CLASSIFICATION	4.945151350386703E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998441059841537	WITHOUT_CLASSIFICATION	1.5589401584611566E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999935825293358	WITHOUT_CLASSIFICATION	6.417470664100758E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999476654356296	WITHOUT_CLASSIFICATION	5.233456437029098E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999991923635251	WITHOUT_CLASSIFICATION	8.076364749016954E-6	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999896682255087	WITHOUT_CLASSIFICATION	1.0331774491145484E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999761174485621	WITHOUT_CLASSIFICATION	2.3882551437948668E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9988711869268743	WITHOUT_CLASSIFICATION	0.0011288130731257754	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999983076579511	WITHOUT_CLASSIFICATION	1.6923420488834619E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999967356391256	WITHOUT_CLASSIFICATION	3.2643608743180636E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9996526059179197	WITHOUT_CLASSIFICATION	3.473940820802758E-4	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9999373526485844	WITHOUT_CLASSIFICATION	6.264735141561656E-5	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999249327464363	WITHOUT_CLASSIFICATION	7.506725356368386E-5	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999679962496126	WITHOUT_CLASSIFICATION	3.2003750387284616E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999505260980829	WITHOUT_CLASSIFICATION	4.9473901917223996E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999869208444285	WITHOUT_CLASSIFICATION	1.3079155571574755E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999994302961707	WITHOUT_CLASSIFICATION	5.697038292393652E-7	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999711155693223	WITHOUT_CLASSIFICATION	2.8884430677781954E-5	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999464452747848	WITHOUT_CLASSIFICATION	5.355472521526454E-5	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999997910004326	WITHOUT_CLASSIFICATION	2.0899956740371075E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998441059841537	WITHOUT_CLASSIFICATION	1.5589401584611566E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999855007152125	WITHOUT_CLASSIFICATION	1.4499284787590059E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9996038609112471	WITHOUT_CLASSIFICATION	3.9613908875279233E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999415671543401	WITHOUT_CLASSIFICATION	5.843284565990115E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998820449600156	WITHOUT_CLASSIFICATION	1.1795503998437987E-4	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999588259321198	WITHOUT_CLASSIFICATION	4.117406788018762E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9998354803738811	WITHOUT_CLASSIFICATION	1.645196261188758E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9998354803738811	WITHOUT_CLASSIFICATION	1.645196261188758E-4	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999801405248518	WITHOUT_CLASSIFICATION	1.9859475148175638E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9998354803738811	WITHOUT_CLASSIFICATION	1.645196261188758E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9998354803738811	WITHOUT_CLASSIFICATION	1.645196261188758E-4	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9986373383558378	WITHOUT_CLASSIFICATION	0.0013626616441622338	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999984106036791	WITHOUT_CLASSIFICATION	1.589396320906278E-5	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999974528230018	WITHOUT_CLASSIFICATION	2.547176998233555E-6	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999980173438062	WITHOUT_CLASSIFICATION	1.9826561937889997E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999941399231767	WITHOUT_CLASSIFICATION	5.860076823315669E-6	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9990617493570999	WITHOUT_CLASSIFICATION	9.382506429000383E-4	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996258636379454	WITHOUT_CLASSIFICATION	3.74136362054718E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9994333934376666	WITHOUT_CLASSIFICATION	5.666065623334499E-4	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999601653329532	WITHOUT_CLASSIFICATION	3.983466704684409E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999910961969259	WITHOUT_CLASSIFICATION	8.903803074026545E-6	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999873606876125	WITHOUT_CLASSIFICATION	1.2639312387493921E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999549144573195	WITHOUT_CLASSIFICATION	4.508554268051733E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999981802941846	WITHOUT_CLASSIFICATION	1.819705815434121E-6	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999896494026193	WITHOUT_CLASSIFICATION	1.0350597380728976E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999955642604247	WITHOUT_CLASSIFICATION	4.43573957531188E-6	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998796247582084	WITHOUT_CLASSIFICATION	1.2037524179160244E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999995492013742	WITHOUT_CLASSIFICATION	4.507986257942633E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997941339775843	WITHOUT_CLASSIFICATION	2.058660224156453E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999503097214769	WITHOUT_CLASSIFICATION	4.969027852316286E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999926792425937	WITHOUT_CLASSIFICATION	7.320757406258693E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999827679705456	WITHOUT_CLASSIFICATION	1.723202945430171E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999857582121778	WITHOUT_CLASSIFICATION	1.4241787822243099E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999995492013742	WITHOUT_CLASSIFICATION	4.507986257942633E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999920743180993	WITHOUT_CLASSIFICATION	7.925681900672075E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9999632999281071	WITHOUT_CLASSIFICATION	3.670007189287142E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999953683358167	WITHOUT_CLASSIFICATION	4.631664183316811E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999997643978037	WITHOUT_CLASSIFICATION	2.356021963030558E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999668209155645	WITHOUT_CLASSIFICATION	3.317908443549604E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999827416817325	WITHOUT_CLASSIFICATION	1.725831826744304E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999947580553935	WITHOUT_CLASSIFICATION	5.2419446065286315E-6	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999785294161386	WITHOUT_CLASSIFICATION	2.147058386133631E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999929732849108	WITHOUT_CLASSIFICATION	7.0267150891964015E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999210901532909	WITHOUT_CLASSIFICATION	7.890984670905115E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999942945775255	WITHOUT_CLASSIFICATION	5.7054224745139145E-5	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999464546703664	WITHOUT_CLASSIFICATION	5.354532963356461E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999519808784659	WITHOUT_CLASSIFICATION	4.8019121534127375E-5	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999889898041256	WITHOUT_CLASSIFICATION	1.1010195874362462E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999525421013664	WITHOUT_CLASSIFICATION	4.745789863350063E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999800676665864	WITHOUT_CLASSIFICATION	1.993233341355927E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999904104849994	WITHOUT_CLASSIFICATION	9.589515000567771E-6	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999902802009466	WITHOUT_CLASSIFICATION	9.719799053423358E-6	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999988800387505	WITHOUT_CLASSIFICATION	1.119961249502191E-6	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999975484663606	WITHOUT_CLASSIFICATION	2.451533639409638E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999702044234484	WITHOUT_CLASSIFICATION	2.9795576551603757E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999606500931459	WITHOUT_CLASSIFICATION	3.93499068540777E-5	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999881637401334	WITHOUT_CLASSIFICATION	1.1836259866504991E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999929732849108	WITHOUT_CLASSIFICATION	7.0267150891964015E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999895989240972	WITHOUT_CLASSIFICATION	1.0401075902648237E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999665820184004	WITHOUT_CLASSIFICATION	3.341798159961589E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999419006738948	WITHOUT_CLASSIFICATION	5.8099326105321045E-5	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999975101850025	WITHOUT_CLASSIFICATION	2.489814997484454E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850504489539	WITHOUT_CLASSIFICATION	1.4949551046070889E-5	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999669746702388	WITHOUT_CLASSIFICATION	3.302532976125253E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999796860161129	WITHOUT_CLASSIFICATION	2.0313983887207648E-5	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999872091503257	WITHOUT_CLASSIFICATION	1.279084967430024E-5	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999785653614427	WITHOUT_CLASSIFICATION	2.1434638557255302E-5	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999062274025674	WITHOUT_CLASSIFICATION	9.377259743267359E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996258712077329	WITHOUT_CLASSIFICATION	3.7412879226701246E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999971953182428	WITHOUT_CLASSIFICATION	2.8046817571422188E-6	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999968907758066	WITHOUT_CLASSIFICATION	3.109224193414328E-6	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999934250569454	WITHOUT_CLASSIFICATION	6.574943054550553E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999929320019658	WITHOUT_CLASSIFICATION	7.06799803413094E-6	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9998200039772766	WITHOUT_CLASSIFICATION	1.7999602272356338E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999549753414738	WITHOUT_CLASSIFICATION	4.502465852623589E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996258712077329	WITHOUT_CLASSIFICATION	3.7412879226701246E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999716283091195	WITHOUT_CLASSIFICATION	2.837169088052352E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9995806163306574	WITHOUT_CLASSIFICATION	4.1938366934258543E-4	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999925324695682	WITHOUT_CLASSIFICATION	7.467530431751675E-6	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999714148252165	WITHOUT_CLASSIFICATION	2.8585174783598136E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999760608432795	WITHOUT_CLASSIFICATION	2.393915672056973E-5	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999909499336667	WITHOUT_CLASSIFICATION	9.050066333395553E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999929320019658	WITHOUT_CLASSIFICATION	7.06799803413094E-6	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999982762871699	WITHOUT_CLASSIFICATION	1.723712830067746E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970724766868	WITHOUT_CLASSIFICATION	2.9275233133251045E-6	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971423963793	WITHOUT_CLASSIFICATION	2.8576036207517472E-6	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999472303605494	WITHOUT_CLASSIFICATION	5.2769639450498346E-5	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997944866022273	WITHOUT_CLASSIFICATION	2.055133977727553E-4	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998843782016401	WITHOUT_CLASSIFICATION	1.1562179835987345E-4	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999938045120363	WITHOUT_CLASSIFICATION	6.1954879636450155E-6	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999938045120363	WITHOUT_CLASSIFICATION	6.1954879636450155E-6	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999811250548024	WITHOUT_CLASSIFICATION	1.887494519759085E-5	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999761281279554	WITHOUT_CLASSIFICATION	2.387187204453528E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999911865031337	WITHOUT_CLASSIFICATION	8.813496866242555E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999942934054431	WITHOUT_CLASSIFICATION	5.706594556802233E-6	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999820523417526	WITHOUT_CLASSIFICATION	1.794765824732288E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900294301098	WITHOUT_CLASSIFICATION	9.970569890091582E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999958132409562	WITHOUT_CLASSIFICATION	4.1867590438009354E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949638889664	WITHOUT_CLASSIFICATION	5.0361110336235234E-6	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999914797246336	WITHOUT_CLASSIFICATION	8.520275366333871E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651555462946	WITHOUT_CLASSIFICATION	3.48444537053309E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900294301098	WITHOUT_CLASSIFICATION	9.970569890091582E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999958132409562	WITHOUT_CLASSIFICATION	4.1867590438009354E-5	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949638889664	WITHOUT_CLASSIFICATION	5.0361110336235234E-6	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999887664515642	WITHOUT_CLASSIFICATION	1.1233548435851474E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9998693394935025	WITHOUT_CLASSIFICATION	1.3066050649756316E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999846833846577	WITHOUT_CLASSIFICATION	1.5316615342327213E-5	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999855348573677	WITHOUT_CLASSIFICATION	1.4465142632329875E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999967018762014	WITHOUT_CLASSIFICATION	3.2981237985215313E-6	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999901818459817	WITHOUT_CLASSIFICATION	9.818154018480547E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998557445706372	WITHOUT_CLASSIFICATION	1.4425542936273802E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9982394724563053	WITHOUT_CLASSIFICATION	0.001760527543694755	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9996516926415325	WITHOUT_CLASSIFICATION	3.483073584674565E-4	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999790666922183	WITHOUT_CLASSIFICATION	2.093330778174057E-5	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999915841017952	WITHOUT_CLASSIFICATION	8.41589820476659E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999062773007826	WITHOUT_CLASSIFICATION	9.372269921745667E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9900930370692118	WITHOUT_CLASSIFICATION	0.009906962930788151	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999977102651346	WITHOUT_CLASSIFICATION	2.289734865352857E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999964350627331	WITHOUT_CLASSIFICATION	3.5649372668899507E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999405975977917	WITHOUT_CLASSIFICATION	5.94024022082812E-5	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997716203544037	WITHOUT_CLASSIFICATION	2.283796455962804E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997401161929905	WITHOUT_CLASSIFICATION	2.598838070095192E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999786763110633	WITHOUT_CLASSIFICATION	2.1323688936624653E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9988243894816625	WITHOUT_CLASSIFICATION	0.0011756105183374453	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999910357586087	WITHOUT_CLASSIFICATION	8.964241391270527E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999910632583949	WITHOUT_CLASSIFICATION	8.93674160508189E-6	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9991102502366571	WITHOUT_CLASSIFICATION	8.897497633429019E-4	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999242659855643	WITHOUT_CLASSIFICATION	7.573401443576564E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999998198956782	WITHOUT_CLASSIFICATION	1.8010432183379092E-7	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997994999743877	WITHOUT_CLASSIFICATION	2.0050002561230893E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999788239831517	WITHOUT_CLASSIFICATION	2.117601684826894E-5	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818703722745	WITHOUT_CLASSIFICATION	1.8129627725427077E-5	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9998578728212013	WITHOUT_CLASSIFICATION	1.4212717879869365E-4	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778438432374	WITHOUT_CLASSIFICATION	2.2156156762622935E-5	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736282358443	WITHOUT_CLASSIFICATION	2.6371764155657783E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999377106338734	WITHOUT_CLASSIFICATION	6.228936612662691E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999377106338734	WITHOUT_CLASSIFICATION	6.228936612662691E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999993264204658	WITHOUT_CLASSIFICATION	6.7357953420247005E-6	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999980734994716	WITHOUT_CLASSIFICATION	1.92650052836209E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999955861707195	WITHOUT_CLASSIFICATION	4.413829280544286E-6	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995734307371185	WITHOUT_CLASSIFICATION	4.2656926288150277E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998920207264452	WITHOUT_CLASSIFICATION	1.0797927355479919E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999964186873278	WITHOUT_CLASSIFICATION	3.5813126722482676E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9998347871190787	WITHOUT_CLASSIFICATION	1.652128809212918E-4	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999801264935274	WITHOUT_CLASSIFICATION	1.9873506472623427E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999892134812798	WITHOUT_CLASSIFICATION	1.0786518720197644E-4	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999744331510557	WITHOUT_CLASSIFICATION	2.5566848944285643E-5	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791880545006	WITHOUT_CLASSIFICATION	2.0811945499455582E-5	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999551895369112	WITHOUT_CLASSIFICATION	4.4810463088726606E-5	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975281883861	WITHOUT_CLASSIFICATION	2.4718116139022488E-5	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827843677774	WITHOUT_CLASSIFICATION	1.7215632222634498E-5	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579667895732	WITHOUT_CLASSIFICATION	4.2033210426802064E-5	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806448482261	WITHOUT_CLASSIFICATION	1.9355151773919618E-5	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873897279816	WITHOUT_CLASSIFICATION	1.2610272018476975E-5	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878012034691	WITHOUT_CLASSIFICATION	1.2198796530781317E-5	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999703055222718	WITHOUT_CLASSIFICATION	2.969447772813181E-5	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851770800373	WITHOUT_CLASSIFICATION	1.4822919962760603E-5	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999752827607874	WITHOUT_CLASSIFICATION	2.4717239212566226E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999336364885951	WITHOUT_CLASSIFICATION	6.636351140480051E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999411558641798	WITHOUT_CLASSIFICATION	5.884413582023355E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999973699550262	WITHOUT_CLASSIFICATION	2.6300449737837988E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999990669676811	WITHOUT_CLASSIFICATION	9.330323188811652E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999905784377223	WITHOUT_CLASSIFICATION	9.42156227765008E-6	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999852431807805	WITHOUT_CLASSIFICATION	1.4756819219565134E-5	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9921631622012416	WITHOUT_CLASSIFICATION	0.007836837798758472	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999411558641798	WITHOUT_CLASSIFICATION	5.884413582023355E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999411558641798	WITHOUT_CLASSIFICATION	5.884413582023355E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999936998132346	WITHOUT_CLASSIFICATION	6.300186765422287E-6	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999980352453776	WITHOUT_CLASSIFICATION	1.9647546224068275E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999989573041765	WITHOUT_CLASSIFICATION	1.0426958234644658E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999860386040583	WITHOUT_CLASSIFICATION	1.3961395941697267E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999548737339716	WITHOUT_CLASSIFICATION	4.512626602848942E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9988243894816625	WITHOUT_CLASSIFICATION	0.0011756105183374453	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999970188629264	WITHOUT_CLASSIFICATION	2.981137073685952E-6	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999576825531266	WITHOUT_CLASSIFICATION	4.2317446873389694E-5	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999992249074429	WITHOUT_CLASSIFICATION	7.750925571012298E-6	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999107837404	WITHOUT_CLASSIFICATION	8.921625960041364E-6	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999988023234353	WITHOUT_CLASSIFICATION	1.197676564610229E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999854561221073	WITHOUT_CLASSIFICATION	1.4543877892593167E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999733829477184	WITHOUT_CLASSIFICATION	2.6617052281548004E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999733829477184	WITHOUT_CLASSIFICATION	2.6617052281548004E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999799410267965	WITHOUT_CLASSIFICATION	2.0058973203434165E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999799410267965	WITHOUT_CLASSIFICATION	2.0058973203434165E-5	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963771759198	WITHOUT_CLASSIFICATION	3.622824080285453E-6	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834452701977	WITHOUT_CLASSIFICATION	1.655472980238335E-5	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998163436271793	WITHOUT_CLASSIFICATION	1.8365637282064608E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865040446889	WITHOUT_CLASSIFICATION	1.3495955310999156E-5	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999388468588393	WITHOUT_CLASSIFICATION	6.115314116067824E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9997859865308176	WITHOUT_CLASSIFICATION	2.140134691823704E-4	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784235818767	WITHOUT_CLASSIFICATION	2.1576418123200663E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999882949038867	WITHOUT_CLASSIFICATION	1.1705096113227297E-5	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998880660591771	WITHOUT_CLASSIFICATION	1.1193394082283956E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999938122732961	WITHOUT_CLASSIFICATION	6.187726703883975E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999587150837913	WITHOUT_CLASSIFICATION	4.1284916208775975E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999762639710447	WITHOUT_CLASSIFICATION	2.3736028955343936E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999603505382697	WITHOUT_CLASSIFICATION	3.964946173016028E-5	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999961884281225	WITHOUT_CLASSIFICATION	3.8115718774928787E-6	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.999973572441055	WITHOUT_CLASSIFICATION	2.6427558945040324E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999889911929917	WITHOUT_CLASSIFICATION	1.1008807008195072E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999889911929917	WITHOUT_CLASSIFICATION	1.1008807008195072E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999997747443671	WITHOUT_CLASSIFICATION	2.2525563291046614E-7	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9998156499948929	WITHOUT_CLASSIFICATION	1.8435000510710564E-4	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999920643417181	WITHOUT_CLASSIFICATION	7.935658281899802E-5	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999558293281782	WITHOUT_CLASSIFICATION	4.4170671821769886E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952220693007	WITHOUT_CLASSIFICATION	4.777930699284913E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999851075466017	WITHOUT_CLASSIFICATION	1.489245339815585E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999822993048899	WITHOUT_CLASSIFICATION	1.7700695110077262E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677416516979	WITHOUT_CLASSIFICATION	3.225834830212762E-5	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9998021690987988	WITHOUT_CLASSIFICATION	1.9783090120119504E-4	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999975716128762	WITHOUT_CLASSIFICATION	2.4283871239332536E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999978105431813	WITHOUT_CLASSIFICATION	2.18945681862364E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999431811848923	WITHOUT_CLASSIFICATION	5.6818815107740226E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999367669013068	WITHOUT_CLASSIFICATION	6.323309869312302E-5	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999948429327502	WITHOUT_CLASSIFICATION	5.157067249895377E-6	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999962231252821	WITHOUT_CLASSIFICATION	3.7768747177405663E-6	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999808105668928	WITHOUT_CLASSIFICATION	1.918943310724638E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999582855017476	WITHOUT_CLASSIFICATION	4.171449825245786E-5	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999148107849419	WITHOUT_CLASSIFICATION	8.518921505806496E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999213086822628	WITHOUT_CLASSIFICATION	7.869131773709894E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999846833562913	WITHOUT_CLASSIFICATION	1.5316643708693303E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999765735390157	WITHOUT_CLASSIFICATION	2.3426460984223452E-5	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999215330158	WITHOUT_CLASSIFICATION	7.846698417818532E-8	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992074319645	WITHOUT_CLASSIFICATION	7.925680355757312E-7	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999800022369125	WITHOUT_CLASSIFICATION	1.999776308749667E-4	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999900694401213	WITHOUT_CLASSIFICATION	9.930559878766978E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999822040375729	WITHOUT_CLASSIFICATION	1.77959624271058E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999920560285538	WITHOUT_CLASSIFICATION	7.943971446207256E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999945561022148	WITHOUT_CLASSIFICATION	5.443897785227791E-6	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999998091576197	WITHOUT_CLASSIFICATION	1.9084238030007063E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999782536078897	WITHOUT_CLASSIFICATION	2.1746392110203917E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999867228537744	WITHOUT_CLASSIFICATION	1.3277146225487167E-5	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999751558655581	WITHOUT_CLASSIFICATION	2.484413444195805E-5	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999038869297303	WITHOUT_CLASSIFICATION	9.611307026970819E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9997420698471509	WITHOUT_CLASSIFICATION	2.579301528491362E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999614689766939	WITHOUT_CLASSIFICATION	3.8531023306094075E-5	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999968949586774	WITHOUT_CLASSIFICATION	3.105041322565531E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999887982691587	WITHOUT_CLASSIFICATION	1.1201730841416507E-5	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999906682563731	WITHOUT_CLASSIFICATION	9.33174362690989E-6	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999923963817545	WITHOUT_CLASSIFICATION	7.603618245580743E-6	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999832388788376	WITHOUT_CLASSIFICATION	1.676112116240245E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999950020233161	WITHOUT_CLASSIFICATION	4.9979766837978555E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999922780000895	WITHOUT_CLASSIFICATION	7.721999910510664E-6	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999809123642656	WITHOUT_CLASSIFICATION	1.9087635734412825E-5	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999925742994059	WITHOUT_CLASSIFICATION	7.425700594082059E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999397360808805	WITHOUT_CLASSIFICATION	6.026391911954474E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996102438784468	WITHOUT_CLASSIFICATION	3.8975612155332383E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999613630412748	WITHOUT_CLASSIFICATION	3.8636958725173856E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999391092323319	WITHOUT_CLASSIFICATION	6.089076766802216E-5	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999303163251221	WITHOUT_CLASSIFICATION	6.968367487794002E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999750521580439	WITHOUT_CLASSIFICATION	2.4947841956049527E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999970943053081	WITHOUT_CLASSIFICATION	2.905694691863188E-6	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9993876541949738	WITHOUT_CLASSIFICATION	6.123458050262934E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999444673755133	WITHOUT_CLASSIFICATION	5.553262448672951E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999922655820418	WITHOUT_CLASSIFICATION	7.73441795826486E-6	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996099000575114	WITHOUT_CLASSIFICATION	3.900999424886558E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999659172442499	WITHOUT_CLASSIFICATION	3.408275575005904E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9994091407535833	WITHOUT_CLASSIFICATION	5.908592464167679E-4	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999836583822032	WITHOUT_CLASSIFICATION	1.6341617796837974E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999530052803546	WITHOUT_CLASSIFICATION	4.6994719645408305E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9993298818714259	WITHOUT_CLASSIFICATION	6.701181285740604E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999981152762759	WITHOUT_CLASSIFICATION	1.8847237241532082E-6	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999980604245612	WITHOUT_CLASSIFICATION	1.939575438852902E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999340026142	WITHOUT_CLASSIFICATION	6.599738579519115E-7	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999780873582762	WITHOUT_CLASSIFICATION	2.191264172373256E-5	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999936517177842	WITHOUT_CLASSIFICATION	6.348282215788718E-6	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999788441415915	WITHOUT_CLASSIFICATION	2.1155858408373002E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999978480378019	WITHOUT_CLASSIFICATION	2.151962198065777E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999947980545357	WITHOUT_CLASSIFICATION	5.201945464252417E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998402983421075	WITHOUT_CLASSIFICATION	1.5970165789253965E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998402983421075	WITHOUT_CLASSIFICATION	1.5970165789253965E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999846493708575	WITHOUT_CLASSIFICATION	1.535062914249296E-5	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999876271053355	WITHOUT_CLASSIFICATION	1.2372894664439801E-5	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999815933986768	WITHOUT_CLASSIFICATION	1.840660132329706E-5	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999937120066669	WITHOUT_CLASSIFICATION	6.287993333102262E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999664842138349	WITHOUT_CLASSIFICATION	3.351578616506206E-5	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999245590517453	WITHOUT_CLASSIFICATION	7.544094825474406E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999962948291489	WITHOUT_CLASSIFICATION	3.7051708511962083E-6	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999715539282833	WITHOUT_CLASSIFICATION	2.8446071716709836E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998759849163621	WITHOUT_CLASSIFICATION	1.240150836378391E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999986585777061	WITHOUT_CLASSIFICATION	1.3414222938646248E-6	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999971507464866	WITHOUT_CLASSIFICATION	2.8492535133939458E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999983218180958	WITHOUT_CLASSIFICATION	1.6781819041876194E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999765389715822	WITHOUT_CLASSIFICATION	2.3461028417761106E-5	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999929637703479	WITHOUT_CLASSIFICATION	7.036229652135762E-6	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998602907060149	WITHOUT_CLASSIFICATION	1.3970929398499004E-4	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9991560192256439	WITHOUT_CLASSIFICATION	8.439807743560432E-4	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999983821682356	WITHOUT_CLASSIFICATION	1.6178317644034417E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998427207357303	WITHOUT_CLASSIFICATION	1.5727926426975232E-4	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999281018878242	WITHOUT_CLASSIFICATION	7.189811217574419E-5	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999763969385377	WITHOUT_CLASSIFICATION	2.3603061462395328E-5	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999875036044068	WITHOUT_CLASSIFICATION	1.2496395593340807E-5	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999824022625918	WITHOUT_CLASSIFICATION	1.7597737408227682E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9993966017401176	WITHOUT_CLASSIFICATION	6.033982598823643E-4	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.99998455444452	WITHOUT_CLASSIFICATION	1.5445555480023326E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999949599880577	WITHOUT_CLASSIFICATION	5.04001194235478E-6	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999189593515471	WITHOUT_CLASSIFICATION	8.104064845302853E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999093900966038	WITHOUT_CLASSIFICATION	9.060990339615287E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998952370963086	WITHOUT_CLASSIFICATION	1.0476290369144764E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999957478545197	WITHOUT_CLASSIFICATION	4.2521454803346425E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999961602167045	WITHOUT_CLASSIFICATION	3.839783295604277E-6	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999947948941242	WITHOUT_CLASSIFICATION	5.205105875788779E-6	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999355028412266	WITHOUT_CLASSIFICATION	6.449715877351607E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999916882008161	WITHOUT_CLASSIFICATION	8.311799183968449E-6	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999753380975074	WITHOUT_CLASSIFICATION	2.466190249254072E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999987790581577	WITHOUT_CLASSIFICATION	1.2209418423023036E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999987790581577	WITHOUT_CLASSIFICATION	1.2209418423023036E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998612084575594	WITHOUT_CLASSIFICATION	1.3879154244051973E-4	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9997994980003426	WITHOUT_CLASSIFICATION	2.0050199965737623E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999923733210012	WITHOUT_CLASSIFICATION	7.626678998739171E-6	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999893818401083	WITHOUT_CLASSIFICATION	1.0618159891691046E-5	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998721272756652	WITHOUT_CLASSIFICATION	1.2787272433478208E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999754358851491	WITHOUT_CLASSIFICATION	2.4564114850811218E-5	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999808475041583	WITHOUT_CLASSIFICATION	1.9152495841718805E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999603882764	WITHOUT_CLASSIFICATION	3.961172353506445E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9992067863867052	WITHOUT_CLASSIFICATION	7.932136132946316E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999780542144285	WITHOUT_CLASSIFICATION	2.1945785571373076E-5	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999984286797402	WITHOUT_CLASSIFICATION	1.5713202597179619E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999999633836781	WITHOUT_CLASSIFICATION	3.661632190063914E-7	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999934196364718	WITHOUT_CLASSIFICATION	6.5803635281035536E-6	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999985004669834	WITHOUT_CLASSIFICATION	1.4995330167411673E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999996437760694	WITHOUT_CLASSIFICATION	3.5622393058653692E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999969332320692	WITHOUT_CLASSIFICATION	3.066767930848451E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999969332320692	WITHOUT_CLASSIFICATION	3.066767930848451E-6	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999858272163058	WITHOUT_CLASSIFICATION	1.4172783694287004E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999998947241207	WITHOUT_CLASSIFICATION	1.052758793059573E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999940662384679	WITHOUT_CLASSIFICATION	5.933761532172413E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999941700527757	WITHOUT_CLASSIFICATION	5.8299472243453E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997057109064722	WITHOUT_CLASSIFICATION	2.9428909352782615E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999392795613302	WITHOUT_CLASSIFICATION	6.072043866981356E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999947511898282	WITHOUT_CLASSIFICATION	5.248810171798816E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999947511898282	WITHOUT_CLASSIFICATION	5.248810171798816E-5	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999751417792857	WITHOUT_CLASSIFICATION	2.4858220714249216E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999973533825662	WITHOUT_CLASSIFICATION	2.646617433720869E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999268566254529	WITHOUT_CLASSIFICATION	7.314337454710076E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999964492881906	WITHOUT_CLASSIFICATION	3.550711809317778E-6	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9993405682992369	WITHOUT_CLASSIFICATION	6.594317007630363E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998288313588719	WITHOUT_CLASSIFICATION	1.71168641128099E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999982755580031	WITHOUT_CLASSIFICATION	1.7244419968969556E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999470614547158	WITHOUT_CLASSIFICATION	5.293854528416516E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999613033272834	WITHOUT_CLASSIFICATION	3.869667271657973E-5	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999911249966255	WITHOUT_CLASSIFICATION	8.87500337464988E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999936343342553	WITHOUT_CLASSIFICATION	6.365665744750137E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999760518898037	WITHOUT_CLASSIFICATION	2.3948110196385574E-5	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999373122367446	WITHOUT_CLASSIFICATION	6.268776325541284E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998990922865062	WITHOUT_CLASSIFICATION	1.00907713493787E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999348391221541	WITHOUT_CLASSIFICATION	6.516087784586743E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999830964150794	WITHOUT_CLASSIFICATION	1.690358492055544E-5	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999769292411014	WITHOUT_CLASSIFICATION	2.3070758898648605E-5	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999849830347819	WITHOUT_CLASSIFICATION	1.5016965218101563E-5	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999260908546894	WITHOUT_CLASSIFICATION	7.390914531059239E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9998844636647859	WITHOUT_CLASSIFICATION	1.1553633521409944E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999886654930874	WITHOUT_CLASSIFICATION	1.1334506912639153E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997974912074575	WITHOUT_CLASSIFICATION	2.0250879254247358E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999769800992594	WITHOUT_CLASSIFICATION	2.3019900740583352E-5	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9996068398778485	WITHOUT_CLASSIFICATION	3.9316012215154066E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999959913146657	WITHOUT_CLASSIFICATION	4.008685334303673E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999701001646069	WITHOUT_CLASSIFICATION	2.9899835393090556E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999979580192117	WITHOUT_CLASSIFICATION	2.041980788315516E-6	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999977374728837	WITHOUT_CLASSIFICATION	2.2625271163011032E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999927884132684	WITHOUT_CLASSIFICATION	7.211586731591456E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999449363147641	WITHOUT_CLASSIFICATION	5.506368523581076E-5	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9990120792540741	WITHOUT_CLASSIFICATION	9.8792074592594E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999898283708004	WITHOUT_CLASSIFICATION	1.0171629199548433E-5	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9998523072030981	WITHOUT_CLASSIFICATION	1.476927969018412E-4	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999358841270832	WITHOUT_CLASSIFICATION	6.41158729166805E-5	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999751677335489	WITHOUT_CLASSIFICATION	2.4832266451101987E-4	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998330812283597	WITHOUT_CLASSIFICATION	1.6691877164027005E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9997927067799205	WITHOUT_CLASSIFICATION	2.072932200794595E-4	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9998699988927259	WITHOUT_CLASSIFICATION	1.3000110727410792E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999903426749873	WITHOUT_CLASSIFICATION	9.65732501272463E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999745263565567	WITHOUT_CLASSIFICATION	2.5473643443249648E-5	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.99999353194972	WITHOUT_CLASSIFICATION	6.46805028015103E-6	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999534059958174	WITHOUT_CLASSIFICATION	4.6594004182597826E-5	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9996523312230113	WITHOUT_CLASSIFICATION	3.4766877698871217E-4	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999721367915587	WITHOUT_CLASSIFICATION	2.786320844125263E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999972591445058	WITHOUT_CLASSIFICATION	2.7408554943029905E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999948109222114	WITHOUT_CLASSIFICATION	5.189077788654205E-6	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999903426749873	WITHOUT_CLASSIFICATION	9.65732501272463E-6	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999745263565567	WITHOUT_CLASSIFICATION	2.5473643443249648E-5	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999901224622055	WITHOUT_CLASSIFICATION	9.87753779451624E-6	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996330425260976	WITHOUT_CLASSIFICATION	3.669574739024369E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999973970903496	WITHOUT_CLASSIFICATION	2.602909650420821E-6	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999941742143136	WITHOUT_CLASSIFICATION	5.825785686402547E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999780290649479	WITHOUT_CLASSIFICATION	2.1970935052065068E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999992612903572	WITHOUT_CLASSIFICATION	7.387096428895228E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998846287304495	WITHOUT_CLASSIFICATION	1.1537126955058684E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999721949388666	WITHOUT_CLASSIFICATION	2.7805061133471876E-5	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999020845642695	WITHOUT_CLASSIFICATION	9.791543573039431E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9336267159825304	WITHOUT_CLASSIFICATION	0.06637328401746957	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999994906440201	WITHOUT_CLASSIFICATION	5.093559799122338E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9336267159825304	WITHOUT_CLASSIFICATION	0.06637328401746957	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999996676669574	WITHOUT_CLASSIFICATION	3.32333042593892E-6	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999837313077456	WITHOUT_CLASSIFICATION	1.6268692254329154E-5	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999997335834389	WITHOUT_CLASSIFICATION	2.6641656109464795E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930120441787	WITHOUT_CLASSIFICATION	6.987955821384385E-6	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998906464904213	WITHOUT_CLASSIFICATION	1.093535095787382E-4	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999050988742728	WITHOUT_CLASSIFICATION	9.490112572714283E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999050988742728	WITHOUT_CLASSIFICATION	9.490112572714283E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999925372970394	WITHOUT_CLASSIFICATION	7.462702960682417E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999971319955344	WITHOUT_CLASSIFICATION	2.868004465526807E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999853987951801	WITHOUT_CLASSIFICATION	1.460120481994491E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999708479202196	WITHOUT_CLASSIFICATION	2.915207978041779E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999335927623345	WITHOUT_CLASSIFICATION	6.640723766545123E-5	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999048980435781	WITHOUT_CLASSIFICATION	9.510195642183558E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999835565775864	WITHOUT_CLASSIFICATION	1.6443422413516524E-5	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999946948862396	WITHOUT_CLASSIFICATION	5.30511376042898E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999545773847518	WITHOUT_CLASSIFICATION	4.5422615248149126E-5	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9998258097372288	WITHOUT_CLASSIFICATION	1.74190262771147E-4	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9998418745323229	WITHOUT_CLASSIFICATION	1.5812546767707137E-4	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9990732831030128	WITHOUT_CLASSIFICATION	9.267168969871987E-4	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999154261010488	WITHOUT_CLASSIFICATION	8.45738989511411E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.99998602501057	WITHOUT_CLASSIFICATION	1.3974989429931782E-5	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999752679948349	WITHOUT_CLASSIFICATION	2.4732005165065973E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999946483236483	WITHOUT_CLASSIFICATION	5.351676351781255E-6	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999795445876876	WITHOUT_CLASSIFICATION	2.0455412312372534E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999896711105155	WITHOUT_CLASSIFICATION	1.0328889484395212E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999982848903991	WITHOUT_CLASSIFICATION	1.7151096009161216E-6	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9996068956044607	WITHOUT_CLASSIFICATION	3.9310439553932246E-4	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999711608538373	WITHOUT_CLASSIFICATION	2.8839146162679886E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998283912838073	WITHOUT_CLASSIFICATION	1.7160871619266145E-4	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999967130240413	WITHOUT_CLASSIFICATION	3.2869759586952873E-6	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999757761492291	WITHOUT_CLASSIFICATION	2.4223850770976426E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999737357649516	WITHOUT_CLASSIFICATION	2.626423504830427E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998496683022515	WITHOUT_CLASSIFICATION	1.5033169774854297E-4	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9995143848905167	WITHOUT_CLASSIFICATION	4.856151094832159E-4	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999842222183798	WITHOUT_CLASSIFICATION	1.577778162020214E-5	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9997191899316008	WITHOUT_CLASSIFICATION	2.808100683992638E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9988935833651073	WITHOUT_CLASSIFICATION	0.0011064166348927651	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9970769589542193	WITHOUT_CLASSIFICATION	0.0029230410457807892	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999784536639807	WITHOUT_CLASSIFICATION	2.154633601915441E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999835565775864	WITHOUT_CLASSIFICATION	1.6443422413516524E-5	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999966274466763	WITHOUT_CLASSIFICATION	3.3725533235954352E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999194237586198	WITHOUT_CLASSIFICATION	8.05762413802078E-5	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9244411923402177	WITHOUT_CLASSIFICATION	0.07555880765978225	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9998587020824311	WITHOUT_CLASSIFICATION	1.4129791756895625E-4	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999979442486798	WITHOUT_CLASSIFICATION	2.0557513202387717E-6	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999925451008749	WITHOUT_CLASSIFICATION	7.454899125173217E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999708479202196	WITHOUT_CLASSIFICATION	2.915207978041779E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999708479202196	WITHOUT_CLASSIFICATION	2.915207978041779E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999841933502928	WITHOUT_CLASSIFICATION	1.580664970717737E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999951966216946	WITHOUT_CLASSIFICATION	4.803378305508065E-6	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998828906973233	WITHOUT_CLASSIFICATION	1.1710930267676933E-4	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999877484718211	WITHOUT_CLASSIFICATION	1.2251528178822271E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999500463265321	WITHOUT_CLASSIFICATION	4.9953673467842584E-5	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998621840737929	WITHOUT_CLASSIFICATION	1.3781592620703425E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999860303775326	WITHOUT_CLASSIFICATION	1.3969622467332462E-5	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9993211334513948	WITHOUT_CLASSIFICATION	6.788665486051733E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999329183426183	WITHOUT_CLASSIFICATION	6.708165738163648E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999755431631097	WITHOUT_CLASSIFICATION	2.445683689033495E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999680744170298	WITHOUT_CLASSIFICATION	3.192558297026245E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9992240130082348	WITHOUT_CLASSIFICATION	7.759869917651272E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999461937968442	WITHOUT_CLASSIFICATION	5.380620315578567E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999755431631097	WITHOUT_CLASSIFICATION	2.445683689033495E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999891789485259	WITHOUT_CLASSIFICATION	1.0821051474033347E-5	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9996473099977933	WITHOUT_CLASSIFICATION	3.5269000220666916E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999495879601713	WITHOUT_CLASSIFICATION	5.041203982875206E-5	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.7443594478350336	IMPLEMENTATION	0.25564055216496623	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9992240130082348	WITHOUT_CLASSIFICATION	7.759869917651272E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999688360171405	WITHOUT_CLASSIFICATION	3.116398285947029E-5	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999571994656759	WITHOUT_CLASSIFICATION	4.2800534324122406E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999976951853679	WITHOUT_CLASSIFICATION	2.304814632111298E-5	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999986375106327	WITHOUT_CLASSIFICATION	1.362489367375746E-6	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9995991302075732	WITHOUT_CLASSIFICATION	4.0086979242689167E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999867297408447	WITHOUT_CLASSIFICATION	1.3270259155324977E-5	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999953351330964	WITHOUT_CLASSIFICATION	4.664866903576802E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999754380883653	WITHOUT_CLASSIFICATION	2.4561911634644287E-5	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999967834858926	WITHOUT_CLASSIFICATION	3.21651410735279E-6	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999948990776487	WITHOUT_CLASSIFICATION	5.100922351324434E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999504680460518	WITHOUT_CLASSIFICATION	4.953195394825848E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999964924921698	WITHOUT_CLASSIFICATION	3.507507830199444E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999755431631097	WITHOUT_CLASSIFICATION	2.445683689033495E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999688360171405	WITHOUT_CLASSIFICATION	3.116398285947029E-5	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999976951853679	WITHOUT_CLASSIFICATION	2.304814632111298E-5	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999714982803026	WITHOUT_CLASSIFICATION	2.8501719697368667E-5	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999957279101102	WITHOUT_CLASSIFICATION	4.2720898898079316E-6	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999958929190685	WITHOUT_CLASSIFICATION	4.107080931434548E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9992240130082348	WITHOUT_CLASSIFICATION	7.759869917651272E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999956899621838	WITHOUT_CLASSIFICATION	4.310037816143313E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999632057279522	WITHOUT_CLASSIFICATION	3.679427204790454E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998732886354563	WITHOUT_CLASSIFICATION	1.26711364543666E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999482605161478	WITHOUT_CLASSIFICATION	5.1739483852224394E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999754380883653	WITHOUT_CLASSIFICATION	2.4561911634644287E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999891789485259	WITHOUT_CLASSIFICATION	1.0821051474033347E-5	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999316018278817	WITHOUT_CLASSIFICATION	6.839817211839086E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999954152915502	WITHOUT_CLASSIFICATION	4.5847084497639695E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999663768837167	WITHOUT_CLASSIFICATION	3.362311628333159E-5	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999706179482767	WITHOUT_CLASSIFICATION	2.9382051723301383E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999450609984191	WITHOUT_CLASSIFICATION	5.493900158093134E-5	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997626960256348	WITHOUT_CLASSIFICATION	2.3730397436518225E-4	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999757850225285	WITHOUT_CLASSIFICATION	2.4214977471525256E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930120441787	WITHOUT_CLASSIFICATION	6.987955821384385E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999488947101	WITHOUT_CLASSIFICATION	5.110528990024482E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999808798708505	WITHOUT_CLASSIFICATION	1.912012914945319E-5	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9991860356612152	WITHOUT_CLASSIFICATION	8.139643387847823E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998745677811418	WITHOUT_CLASSIFICATION	1.2543221885819882E-4	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998222006667997	WITHOUT_CLASSIFICATION	1.7779933320030678E-4	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999916192652395	WITHOUT_CLASSIFICATION	8.380734760481937E-6	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999917123574544	WITHOUT_CLASSIFICATION	8.287642545539327E-6	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999884507589046	WITHOUT_CLASSIFICATION	1.1549241095324297E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999482605161478	WITHOUT_CLASSIFICATION	5.1739483852224394E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999199304916547	WITHOUT_CLASSIFICATION	8.006950834522238E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999516666469224	WITHOUT_CLASSIFICATION	4.8333353077510886E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998192406799387	WITHOUT_CLASSIFICATION	1.807593200612749E-4	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999748903418118	WITHOUT_CLASSIFICATION	2.5109658188200705E-5	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9997814328465751	WITHOUT_CLASSIFICATION	2.1856715342491703E-4	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999913408825356	WITHOUT_CLASSIFICATION	8.659117464422017E-6	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999990933217539	WITHOUT_CLASSIFICATION	9.06678246153875E-7	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999154797901972	WITHOUT_CLASSIFICATION	8.452020980279465E-5	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999999852222518	WITHOUT_CLASSIFICATION	1.477774819187463E-7	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999322860018519	WITHOUT_CLASSIFICATION	6.771399814805415E-5	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999886906775199	WITHOUT_CLASSIFICATION	1.1309322480128526E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999216398372175	WITHOUT_CLASSIFICATION	7.836016278249457E-5	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9989023475454658	WITHOUT_CLASSIFICATION	0.001097652454534213	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999164277769298	WITHOUT_CLASSIFICATION	8.357222307022816E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999829262722596	WITHOUT_CLASSIFICATION	1.707372774033015E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999659673862716	WITHOUT_CLASSIFICATION	3.403261372836848E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999306516096815	WITHOUT_CLASSIFICATION	6.934839031847752E-5	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999643971649702	WITHOUT_CLASSIFICATION	3.560283502978283E-5	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999824405563971	WITHOUT_CLASSIFICATION	1.7559443602898334E-5	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999734974632267	WITHOUT_CLASSIFICATION	2.650253677334334E-5	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999664354980748	WITHOUT_CLASSIFICATION	3.356450192523943E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999975154424501	WITHOUT_CLASSIFICATION	2.484557549898165E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999964059726305	WITHOUT_CLASSIFICATION	3.594027369552931E-6	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999989174275543	WITHOUT_CLASSIFICATION	1.0825724456663008E-6	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999983656625292	WITHOUT_CLASSIFICATION	1.634337470822693E-6	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6097406406752026	IMPLEMENTATION	0.39025935932479744	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9982781251000071	WITHOUT_CLASSIFICATION	0.0017218748999929384	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999304529545276	WITHOUT_CLASSIFICATION	6.954704547230872E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999946408478184	WITHOUT_CLASSIFICATION	5.359152181567213E-6	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9956967826061329	WITHOUT_CLASSIFICATION	0.004303217393867048	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999982426612141	WITHOUT_CLASSIFICATION	1.7573387859509445E-6	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999542589533434	WITHOUT_CLASSIFICATION	4.5741046656531694E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999866710726989	WITHOUT_CLASSIFICATION	1.3328927301107222E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9997853482851428	WITHOUT_CLASSIFICATION	2.1465171485729288E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999830372989271	WITHOUT_CLASSIFICATION	1.696270107286599E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999804695080525	WITHOUT_CLASSIFICATION	1.95304919474346E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999907392314842	WITHOUT_CLASSIFICATION	9.260768515813441E-6	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999989601635649	WITHOUT_CLASSIFICATION	1.039836435064968E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999804695080525	WITHOUT_CLASSIFICATION	1.95304919474346E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999830372989271	WITHOUT_CLASSIFICATION	1.696270107286599E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999907392314842	WITHOUT_CLASSIFICATION	9.260768515813441E-6	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.999971833593093	WITHOUT_CLASSIFICATION	2.8166406907022634E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999682087122705	WITHOUT_CLASSIFICATION	3.17912877294118E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999997629668068	WITHOUT_CLASSIFICATION	2.37033193151553E-7	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999978398691903	WITHOUT_CLASSIFICATION	2.1601308096900317E-6	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999972662532974	WITHOUT_CLASSIFICATION	2.7337467026167204E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6544129418874294	WITHOUT_CLASSIFICATION	0.3455870581125707	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998533103135928	WITHOUT_CLASSIFICATION	1.466896864071985E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998785392423933	WITHOUT_CLASSIFICATION	1.2146075760658015E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999928329616063	WITHOUT_CLASSIFICATION	7.16703839368269E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999214018016246	WITHOUT_CLASSIFICATION	7.85981983753368E-5	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999945408581313	WITHOUT_CLASSIFICATION	5.459141868723769E-6	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9997907575789455	WITHOUT_CLASSIFICATION	2.0924242105448292E-4	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999696104157616	WITHOUT_CLASSIFICATION	3.038958423833347E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999989373624787	WITHOUT_CLASSIFICATION	1.0626375213073515E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998918774592	WITHOUT_CLASSIFICATION	1.0812254080762239E-7	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999475146653724	WITHOUT_CLASSIFICATION	5.248533462770237E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999952982595567	WITHOUT_CLASSIFICATION	4.701740443282213E-6	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999989483336613	WITHOUT_CLASSIFICATION	1.0516663387200029E-6	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999964654090475	WITHOUT_CLASSIFICATION	3.5345909525157654E-6	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999881360306571	WITHOUT_CLASSIFICATION	1.1863969342898756E-5	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9982073796976888	WITHOUT_CLASSIFICATION	0.0017926203023110893	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999980302061239	WITHOUT_CLASSIFICATION	1.969793876115993E-6	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999859599527927	WITHOUT_CLASSIFICATION	1.4040047207396073E-5	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999972002399233	WITHOUT_CLASSIFICATION	2.7997600766774174E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999937667536846	WITHOUT_CLASSIFICATION	6.233246315442816E-6	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999937667536846	WITHOUT_CLASSIFICATION	6.233246315442816E-6	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999995561103018	WITHOUT_CLASSIFICATION	4.438896983161145E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999995561103018	WITHOUT_CLASSIFICATION	4.438896983161145E-7	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9999889970033267	WITHOUT_CLASSIFICATION	1.1002996673421512E-5	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999952982595567	WITHOUT_CLASSIFICATION	4.701740443282213E-6	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9996890441621943	WITHOUT_CLASSIFICATION	3.10955837805727E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999425494526892	WITHOUT_CLASSIFICATION	5.7450547310678014E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999343546242734	WITHOUT_CLASSIFICATION	6.564537572670792E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999343546242734	WITHOUT_CLASSIFICATION	6.564537572670792E-5	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999960617442334	WITHOUT_CLASSIFICATION	3.9382557666174725E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999444561238596	WITHOUT_CLASSIFICATION	5.554387614049547E-5	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999804230915608	WITHOUT_CLASSIFICATION	1.9576908439275987E-5	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999706150507647	WITHOUT_CLASSIFICATION	2.938494923534509E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999762481298485	WITHOUT_CLASSIFICATION	2.375187015145173E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999885606647754	WITHOUT_CLASSIFICATION	1.1439335224632912E-5	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999251421243752	WITHOUT_CLASSIFICATION	7.485787562476923E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999485844974467	WITHOUT_CLASSIFICATION	5.141550255313923E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999582019318993	WITHOUT_CLASSIFICATION	4.1798068100627244E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9998786120433644	WITHOUT_CLASSIFICATION	1.2138795663566833E-4	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999701580615145	WITHOUT_CLASSIFICATION	2.9841938485572357E-5	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.999962957432353	WITHOUT_CLASSIFICATION	3.7042567647013245E-5	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999878185533558	WITHOUT_CLASSIFICATION	1.2181446644240177E-5	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999825802211851	WITHOUT_CLASSIFICATION	1.7419778814835475E-5	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9919771968053505	WITHOUT_CLASSIFICATION	0.008022803194649496	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999986600851801	WITHOUT_CLASSIFICATION	1.339914819793252E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825805416402	WITHOUT_CLASSIFICATION	1.7419458359767043E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999968682750627	WITHOUT_CLASSIFICATION	3.131724937309166E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998388384319085	WITHOUT_CLASSIFICATION	1.6116156809162338E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999965448049087	WITHOUT_CLASSIFICATION	3.4551950912511966E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998313206089026	WITHOUT_CLASSIFICATION	1.6867939109734684E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999943306577578	WITHOUT_CLASSIFICATION	5.669342242175965E-6	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999770160138515	WITHOUT_CLASSIFICATION	2.2983986148535796E-5	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999949758982999	WITHOUT_CLASSIFICATION	5.0241017001183836E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995734307371185	WITHOUT_CLASSIFICATION	4.2656926288150277E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999980275272731	WITHOUT_CLASSIFICATION	1.972472727021553E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999216398372175	WITHOUT_CLASSIFICATION	7.836016278249457E-5	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999401715479289	WITHOUT_CLASSIFICATION	5.982845207097485E-5	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999828122794594	WITHOUT_CLASSIFICATION	1.718772054062366E-5	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999656711919541	WITHOUT_CLASSIFICATION	3.432880804579711E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870720604668	WITHOUT_CLASSIFICATION	1.292793953329741E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999371263083079	WITHOUT_CLASSIFICATION	6.287369169213841E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999371263083079	WITHOUT_CLASSIFICATION	6.287369169213841E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998864591382	WITHOUT_CLASSIFICATION	1.1354086181822875E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999705975118143	WITHOUT_CLASSIFICATION	2.9402488185757726E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999702650119239	WITHOUT_CLASSIFICATION	2.973498807610766E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999702650119239	WITHOUT_CLASSIFICATION	2.973498807610766E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999104955688152	WITHOUT_CLASSIFICATION	8.950443118483293E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996489537150377	WITHOUT_CLASSIFICATION	3.5104628496230526E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.999985476522152	WITHOUT_CLASSIFICATION	1.4523477848155821E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999548737339716	WITHOUT_CLASSIFICATION	4.512626602848942E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999058204911464	WITHOUT_CLASSIFICATION	9.41795088536163E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999966983399464	WITHOUT_CLASSIFICATION	3.3016600534699135E-6	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9999862482559551	WITHOUT_CLASSIFICATION	1.3751744044951255E-5	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999926862976044	WITHOUT_CLASSIFICATION	7.3137023955248685E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999947813921599	WITHOUT_CLASSIFICATION	5.218607840132241E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999947813921599	WITHOUT_CLASSIFICATION	5.218607840132241E-6	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999690139125569	WITHOUT_CLASSIFICATION	3.098608744310852E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999947052546747	WITHOUT_CLASSIFICATION	5.294745325250939E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999947052546747	WITHOUT_CLASSIFICATION	5.294745325250939E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999955884021272	WITHOUT_CLASSIFICATION	4.411597872814808E-6	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999955584564084	WITHOUT_CLASSIFICATION	4.441543591587633E-6	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9690039469147544	WITHOUT_CLASSIFICATION	0.03099605308524555	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999980316224653	WITHOUT_CLASSIFICATION	1.968377534769578E-6	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999989660532769	WITHOUT_CLASSIFICATION	1.0339467230998602E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999630691644579	WITHOUT_CLASSIFICATION	3.693083554212492E-5	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9996756359489918	WITHOUT_CLASSIFICATION	3.243640510082587E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999638628884506	WITHOUT_CLASSIFICATION	3.613711154947859E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999714933216759	WITHOUT_CLASSIFICATION	2.8506678324032297E-5	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999817364597899	WITHOUT_CLASSIFICATION	1.8263540210100653E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999995375363377	WITHOUT_CLASSIFICATION	4.6246366230852987E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999192510266238	WITHOUT_CLASSIFICATION	8.074897337617115E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999436250072814	WITHOUT_CLASSIFICATION	5.637499271865817E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999436250072814	WITHOUT_CLASSIFICATION	5.637499271865817E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999436250072814	WITHOUT_CLASSIFICATION	5.637499271865817E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999436250072814	WITHOUT_CLASSIFICATION	5.637499271865817E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999923137262966	WITHOUT_CLASSIFICATION	7.686273703454775E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998930368347876	WITHOUT_CLASSIFICATION	1.069631652124239E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999516538507232	WITHOUT_CLASSIFICATION	4.834614927684538E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999120765000746	WITHOUT_CLASSIFICATION	8.792349992529686E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999906281936293	WITHOUT_CLASSIFICATION	9.371806370849083E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9998984942029037	WITHOUT_CLASSIFICATION	1.0150579709632369E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998634890610775	WITHOUT_CLASSIFICATION	1.365109389226362E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999953373487509	WITHOUT_CLASSIFICATION	4.662651249091316E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999734673673873	WITHOUT_CLASSIFICATION	2.6532632612586243E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.999995481952196	WITHOUT_CLASSIFICATION	4.518047804028595E-6	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999554830884704	WITHOUT_CLASSIFICATION	4.4516911529672244E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999858482547908	WITHOUT_CLASSIFICATION	1.415174520925827E-5	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999964926313905	WITHOUT_CLASSIFICATION	3.507368609476284E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999475549576918	WITHOUT_CLASSIFICATION	5.2445042308214295E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999719054165535	WITHOUT_CLASSIFICATION	2.8094583446463383E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999858482547908	WITHOUT_CLASSIFICATION	1.415174520925827E-5	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999584816450976	WITHOUT_CLASSIFICATION	4.151835490240534E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999557232548826	WITHOUT_CLASSIFICATION	4.4276745117313866E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999815383604592	WITHOUT_CLASSIFICATION	1.8461639540735682E-5	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999713343579713	WITHOUT_CLASSIFICATION	2.8665642028696724E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9975213589122035	WITHOUT_CLASSIFICATION	0.0024786410877964816	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999993743640317	WITHOUT_CLASSIFICATION	6.256359683043968E-6	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999971100359755	WITHOUT_CLASSIFICATION	2.889964024490674E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999733872394106	WITHOUT_CLASSIFICATION	2.6612760589379905E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877220570315	WITHOUT_CLASSIFICATION	1.2277942968653792E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999796503315903	WITHOUT_CLASSIFICATION	2.034966840973981E-5	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920957995604	WITHOUT_CLASSIFICATION	7.904200439554729E-6	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999940424683925	WITHOUT_CLASSIFICATION	5.95753160746534E-6	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999599508228032	WITHOUT_CLASSIFICATION	4.004917719674769E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995749571568262	WITHOUT_CLASSIFICATION	4.250428431737418E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999969826030293	WITHOUT_CLASSIFICATION	3.0173969708089706E-6	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999882818854265	WITHOUT_CLASSIFICATION	1.1718114573578342E-5	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999972599696577	WITHOUT_CLASSIFICATION	2.7400303422542405E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999910386063322	WITHOUT_CLASSIFICATION	8.961393667744198E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999894982422645	WITHOUT_CLASSIFICATION	1.0501757735418405E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999910386063322	WITHOUT_CLASSIFICATION	8.961393667744198E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999913587155989	WITHOUT_CLASSIFICATION	8.64128440110455E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995593413362	WITHOUT_CLASSIFICATION	4.406586638566858E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999810667667878	WITHOUT_CLASSIFICATION	1.893323321231143E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999924948529446	WITHOUT_CLASSIFICATION	7.505147055389043E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999972599696577	WITHOUT_CLASSIFICATION	2.7400303422542405E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999894982422645	WITHOUT_CLASSIFICATION	1.0501757735418405E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999913587155989	WITHOUT_CLASSIFICATION	8.64128440110455E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999624539373442	WITHOUT_CLASSIFICATION	3.7546062655861195E-5	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.999956627054861	WITHOUT_CLASSIFICATION	4.337294513907959E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9999790783623574	WITHOUT_CLASSIFICATION	2.0921637642590938E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9998932669060642	WITHOUT_CLASSIFICATION	1.0673309393591553E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999194919245352	WITHOUT_CLASSIFICATION	8.050807546484803E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999911914654898	WITHOUT_CLASSIFICATION	8.808534510240804E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825805416402	WITHOUT_CLASSIFICATION	1.7419458359767043E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999995593413362	WITHOUT_CLASSIFICATION	4.406586638566858E-7	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999992604298079	WITHOUT_CLASSIFICATION	7.395701921455978E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999782541699559	WITHOUT_CLASSIFICATION	2.174583004415454E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999895459992828	WITHOUT_CLASSIFICATION	1.0454000717207745E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825805416402	WITHOUT_CLASSIFICATION	1.7419458359767043E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999909365638358	WITHOUT_CLASSIFICATION	9.063436164298163E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825805416402	WITHOUT_CLASSIFICATION	1.7419458359767043E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999987038121622	WITHOUT_CLASSIFICATION	1.296187837908021E-6	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999765162381412	WITHOUT_CLASSIFICATION	2.3483761858768667E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998563746979298	WITHOUT_CLASSIFICATION	1.436253020702342E-4	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997833765607227	WITHOUT_CLASSIFICATION	2.1662343927733916E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999738412448539	WITHOUT_CLASSIFICATION	2.615875514604883E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999936140498116	WITHOUT_CLASSIFICATION	6.385950188349407E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998886079313902	WITHOUT_CLASSIFICATION	1.1139206860983234E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999844889283382	WITHOUT_CLASSIFICATION	1.55110716617777E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999205332409945	WITHOUT_CLASSIFICATION	7.946675900548807E-5	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999877889822485	WITHOUT_CLASSIFICATION	1.2211017751536781E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998402983421075	WITHOUT_CLASSIFICATION	1.5970165789253965E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999703919422727	WITHOUT_CLASSIFICATION	2.9608057727423907E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.9690039469147544	WITHOUT_CLASSIFICATION	0.03099605308524555	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999821256073531	WITHOUT_CLASSIFICATION	1.7874392646893354E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999979867407578	WITHOUT_CLASSIFICATION	2.013259242228316E-6	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999672272419042	WITHOUT_CLASSIFICATION	3.277275809568122E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999579481160338	WITHOUT_CLASSIFICATION	4.205188396626384E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999881081601285	WITHOUT_CLASSIFICATION	1.1891839871386293E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999967174297721	WITHOUT_CLASSIFICATION	3.282570227754321E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9994764703973164	WITHOUT_CLASSIFICATION	5.235296026837385E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998193513156031	WITHOUT_CLASSIFICATION	1.8064868439688047E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999957031670246	WITHOUT_CLASSIFICATION	4.296832975379169E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999395678962663	WITHOUT_CLASSIFICATION	6.0432103733730746E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9688075134023391	WITHOUT_CLASSIFICATION	0.031192486597661034	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999997372892602	WITHOUT_CLASSIFICATION	2.6271073979940405E-7	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999999673307029	WITHOUT_CLASSIFICATION	3.2669297100159306E-7	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999872539329021	WITHOUT_CLASSIFICATION	1.2746067097921923E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999950788980655	WITHOUT_CLASSIFICATION	4.921101934442426E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9997220746226699	WITHOUT_CLASSIFICATION	2.7792537733002963E-4	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999984896413925	WITHOUT_CLASSIFICATION	1.5103586075761415E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999986588446382	WITHOUT_CLASSIFICATION	1.3411553617144189E-6	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999971394477184	WITHOUT_CLASSIFICATION	2.8605522817229725E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998775752474404	WITHOUT_CLASSIFICATION	1.2242475255968454E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999731557880378	WITHOUT_CLASSIFICATION	2.6844211962173578E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9926655588795166	WITHOUT_CLASSIFICATION	0.007334441120483407	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999792524434645	WITHOUT_CLASSIFICATION	2.0747556535391773E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999096233084761	WITHOUT_CLASSIFICATION	9.037669152387135E-5	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9998101555024896	WITHOUT_CLASSIFICATION	1.898444975103587E-4	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999779245650365	WITHOUT_CLASSIFICATION	2.207543496355487E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999929999110451	WITHOUT_CLASSIFICATION	7.000088954813733E-6	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9664940396847364	WITHOUT_CLASSIFICATION	0.033505960315263615	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995737269952	WITHOUT_CLASSIFICATION	4.262730048520561E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999490257024912	WITHOUT_CLASSIFICATION	5.09742975088706E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9998283596521236	WITHOUT_CLASSIFICATION	1.7164034787638897E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9998283596521236	WITHOUT_CLASSIFICATION	1.7164034787638897E-4	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999838807011832	WITHOUT_CLASSIFICATION	1.611929881683324E-5	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999844889283382	WITHOUT_CLASSIFICATION	1.55110716617777E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999505712202144	WITHOUT_CLASSIFICATION	4.942877978558782E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9998837330148793	WITHOUT_CLASSIFICATION	1.1626698512077476E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999989311322268	WITHOUT_CLASSIFICATION	1.0688677731312227E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999954883963915	WITHOUT_CLASSIFICATION	4.511603608590047E-6	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999618472459216	WITHOUT_CLASSIFICATION	3.8152754078370476E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9994334611206531	WITHOUT_CLASSIFICATION	5.66538879346789E-4	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999888720776002	WITHOUT_CLASSIFICATION	1.1127922399757382E-5	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999975909763039	WITHOUT_CLASSIFICATION	2.4090236960614486E-6	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999952496889444	WITHOUT_CLASSIFICATION	4.75031105563088E-6	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999878996824187	WITHOUT_CLASSIFICATION	1.2100317581179597E-5	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999875541333789	WITHOUT_CLASSIFICATION	1.2445866620994063E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999768736541312	WITHOUT_CLASSIFICATION	2.3126345868767696E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999950672611069	WITHOUT_CLASSIFICATION	4.9327388931039193E-5	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999944846773753	WITHOUT_CLASSIFICATION	5.515322624701992E-5	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999871045624115	WITHOUT_CLASSIFICATION	1.2895437588503589E-5	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999927694268953	WITHOUT_CLASSIFICATION	7.230573104763135E-6	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999670561091213	WITHOUT_CLASSIFICATION	3.294389087863496E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999699192679995	WITHOUT_CLASSIFICATION	3.008073200042478E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999930040657113	WITHOUT_CLASSIFICATION	6.99593428869682E-5	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999726373703405	WITHOUT_CLASSIFICATION	2.7362629659525034E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999970695036421	WITHOUT_CLASSIFICATION	2.9304963579014666E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999948646768	WITHOUT_CLASSIFICATION	5.135323200868022E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9664940396847364	WITHOUT_CLASSIFICATION	0.033505960315263615	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999963938957821	WITHOUT_CLASSIFICATION	3.6061042178466044E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998970914791974	WITHOUT_CLASSIFICATION	1.0290852080256772E-4	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999980197485384	WITHOUT_CLASSIFICATION	1.9802514615575475E-6	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999640049394914	WITHOUT_CLASSIFICATION	3.59950605086002E-5	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999595754587645	WITHOUT_CLASSIFICATION	4.042454123557932E-5	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999971171672049	WITHOUT_CLASSIFICATION	2.8828327951736665E-6	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9998747549888467	WITHOUT_CLASSIFICATION	1.2524501115325064E-4	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999911458546715	WITHOUT_CLASSIFICATION	8.854145328381389E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999967696980111	WITHOUT_CLASSIFICATION	3.230301988865488E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999976670294609	WITHOUT_CLASSIFICATION	2.3329705391124037E-6	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999907490510888	WITHOUT_CLASSIFICATION	9.250948911293494E-6	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999594264169616	WITHOUT_CLASSIFICATION	4.0573583038331955E-5	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999824278523084	WITHOUT_CLASSIFICATION	1.757214769157252E-5	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999993290589256	WITHOUT_CLASSIFICATION	6.709410743049182E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998998951338	WITHOUT_CLASSIFICATION	1.001048660656338E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999998998951338	WITHOUT_CLASSIFICATION	1.001048660656338E-7	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999925689387029	WITHOUT_CLASSIFICATION	7.431061297163445E-6	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999976887567626	WITHOUT_CLASSIFICATION	2.311243237353658E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999951549302357	WITHOUT_CLASSIFICATION	4.845069764264121E-6	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999951549302357	WITHOUT_CLASSIFICATION	4.845069764264121E-6	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999978827738405	WITHOUT_CLASSIFICATION	2.1172261594960775E-6	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999549144573195	WITHOUT_CLASSIFICATION	4.508554268051733E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.999999625048752	WITHOUT_CLASSIFICATION	3.7495124808640327E-7	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999252631756724	WITHOUT_CLASSIFICATION	7.473682432757512E-5	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999929968605427	WITHOUT_CLASSIFICATION	7.003139457385664E-6	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999965149307894	WITHOUT_CLASSIFICATION	3.4850692104981462E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999974003685381	WITHOUT_CLASSIFICATION	2.599631461887094E-6	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999974003685381	WITHOUT_CLASSIFICATION	2.599631461887094E-6	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999995095496022	WITHOUT_CLASSIFICATION	4.904503978139868E-6	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999942273932635	WITHOUT_CLASSIFICATION	5.772606736595852E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999774583326486	WITHOUT_CLASSIFICATION	2.254166735130607E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999856088420064	WITHOUT_CLASSIFICATION	1.4391157993621341E-5	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999856088420064	WITHOUT_CLASSIFICATION	1.4391157993621341E-5	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999949472972177	WITHOUT_CLASSIFICATION	5.05270278229608E-6	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999769527590713	WITHOUT_CLASSIFICATION	2.3047240928662117E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999926273386135	WITHOUT_CLASSIFICATION	7.372661386584674E-6	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999722744197591	WITHOUT_CLASSIFICATION	2.7725580240863932E-5	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9988214038336406	WITHOUT_CLASSIFICATION	0.0011785961663594365	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999957020495126	WITHOUT_CLASSIFICATION	4.29795048738284E-6	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999954180799606	WITHOUT_CLASSIFICATION	4.5819200393616395E-6	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999864275434536	WITHOUT_CLASSIFICATION	1.3572456546447269E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999959622448433	WITHOUT_CLASSIFICATION	4.037755156588433E-6	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999890042100703	WITHOUT_CLASSIFICATION	1.0995789929729356E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9981294269679687	WITHOUT_CLASSIFICATION	0.0018705730320312183	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999980632302099	WITHOUT_CLASSIFICATION	1.9367697901565826E-6	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9999825725955362	WITHOUT_CLASSIFICATION	1.7427404463746777E-5	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999864048603766	WITHOUT_CLASSIFICATION	1.3595139623493617E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999491282146662	WITHOUT_CLASSIFICATION	5.0871785333810476E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999971214113897	WITHOUT_CLASSIFICATION	2.8785886101180877E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999945299694263	WITHOUT_CLASSIFICATION	5.4700305736336755E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999875440582843	WITHOUT_CLASSIFICATION	1.2455941715703078E-5	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999912045418003	WITHOUT_CLASSIFICATION	8.795458199744163E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998846366815323	WITHOUT_CLASSIFICATION	1.1536331846772929E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999552901172386	WITHOUT_CLASSIFICATION	4.4709882761324076E-5	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9995719611859629	WITHOUT_CLASSIFICATION	4.2803881403710535E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9991147715897456	WITHOUT_CLASSIFICATION	8.852284102543693E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999994176622265	WITHOUT_CLASSIFICATION	5.823377735059208E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999031892889877	WITHOUT_CLASSIFICATION	9.681071101228799E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999886212115088	WITHOUT_CLASSIFICATION	1.1378788491344308E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999950207113647	WITHOUT_CLASSIFICATION	4.97928863527051E-6	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999561433364138	WITHOUT_CLASSIFICATION	4.3856663586277766E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999937365264144	WITHOUT_CLASSIFICATION	6.263473585599705E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999964350627331	WITHOUT_CLASSIFICATION	3.5649372668899507E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999910632583949	WITHOUT_CLASSIFICATION	8.93674160508189E-6	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999858833177484	WITHOUT_CLASSIFICATION	1.4116682251536668E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999942892784928	WITHOUT_CLASSIFICATION	5.710721507199161E-6	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999507042854484	WITHOUT_CLASSIFICATION	4.929571455145739E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999948875695808	WITHOUT_CLASSIFICATION	5.112430419217565E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999899123854635	WITHOUT_CLASSIFICATION	1.0087614536458835E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999789309639449	WITHOUT_CLASSIFICATION	2.1069036055095373E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999959990742748	WITHOUT_CLASSIFICATION	4.000925725122638E-6	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999908940945329	WITHOUT_CLASSIFICATION	9.105905467160486E-6	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999955493575033	WITHOUT_CLASSIFICATION	4.450642496666353E-6	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999995555731618	WITHOUT_CLASSIFICATION	4.444268381938226E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999952696430664	WITHOUT_CLASSIFICATION	4.730356933571943E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999654544029892	WITHOUT_CLASSIFICATION	3.454559701070047E-5	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999923865637588	WITHOUT_CLASSIFICATION	7.613436241193019E-6	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999948130093211	WITHOUT_CLASSIFICATION	5.1869906788373945E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999916252486415	WITHOUT_CLASSIFICATION	8.374751358454712E-6	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999953875712764	WITHOUT_CLASSIFICATION	4.6124287236021254E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998616841098041	WITHOUT_CLASSIFICATION	1.3831589019583056E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999671050988298	WITHOUT_CLASSIFICATION	3.289490117023639E-5	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999257375298691	WITHOUT_CLASSIFICATION	7.426247013080705E-5	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998366578698242	WITHOUT_CLASSIFICATION	1.6334213017566148E-4	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999993374222745	WITHOUT_CLASSIFICATION	6.625777255144064E-7	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999967231009833	WITHOUT_CLASSIFICATION	3.276899016750955E-6	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999807954708	WITHOUT_CLASSIFICATION	1.9204529229989805E-8	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999899625903547	WITHOUT_CLASSIFICATION	1.0037409645260398E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999992522411177	WITHOUT_CLASSIFICATION	7.477588822449331E-7	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999955733103019	WITHOUT_CLASSIFICATION	4.426689698136139E-6	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999923424471061	WITHOUT_CLASSIFICATION	7.657552893901406E-6	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999588874664163	WITHOUT_CLASSIFICATION	4.1112533583692484E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999463204572824	WITHOUT_CLASSIFICATION	5.3679542717524816E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9990142963045668	WITHOUT_CLASSIFICATION	9.857036954331868E-4	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9990142963045668	WITHOUT_CLASSIFICATION	9.857036954331868E-4	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999761515718	WITHOUT_CLASSIFICATION	2.3848428197195773E-7	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999982467493781	WITHOUT_CLASSIFICATION	1.7532506218541105E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999956059827204	WITHOUT_CLASSIFICATION	4.394017279589521E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999983979845027	WITHOUT_CLASSIFICATION	1.602015497251523E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999985668819982	WITHOUT_CLASSIFICATION	1.4331180017862235E-6	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999960084904703	WITHOUT_CLASSIFICATION	3.991509529646492E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999853415648627	WITHOUT_CLASSIFICATION	1.465843513728966E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999127468919	WITHOUT_CLASSIFICATION	8.725310812315565E-8	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999984893990579	WITHOUT_CLASSIFICATION	1.510600942080106E-6	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999983898982777	WITHOUT_CLASSIFICATION	1.610101722336939E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999951102821792	WITHOUT_CLASSIFICATION	4.889717820737024E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999842624156484	WITHOUT_CLASSIFICATION	1.5737584351615197E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9994268549363198	WITHOUT_CLASSIFICATION	5.731450636802736E-4	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999925930125352	WITHOUT_CLASSIFICATION	7.4069874648665E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999549753414738	WITHOUT_CLASSIFICATION	4.502465852623589E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999549753414738	WITHOUT_CLASSIFICATION	4.502465852623589E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999985098954889	WITHOUT_CLASSIFICATION	1.4901045110352233E-6	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999761177215098	WITHOUT_CLASSIFICATION	2.388227849017273E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999992338480128	WITHOUT_CLASSIFICATION	7.661519871927462E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.999995375246528	WITHOUT_CLASSIFICATION	4.6247534718912655E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996258712077329	WITHOUT_CLASSIFICATION	3.7412879226701246E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998689500195553	WITHOUT_CLASSIFICATION	1.310499804445943E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999753481542222	WITHOUT_CLASSIFICATION	2.465184577777847E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999884952307135	WITHOUT_CLASSIFICATION	1.1504769286421901E-5	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999782643284661	WITHOUT_CLASSIFICATION	2.1735671533870213E-5	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999989966540076	WITHOUT_CLASSIFICATION	1.0033459924200195E-6	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999538192760362	WITHOUT_CLASSIFICATION	4.618072396384477E-5	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999977359092072	WITHOUT_CLASSIFICATION	2.264090792911924E-6	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999447185797932	WITHOUT_CLASSIFICATION	5.528142020685666E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999996682622836	WITHOUT_CLASSIFICATION	3.3173771637604086E-7	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999223568240104	WITHOUT_CLASSIFICATION	7.764317598957795E-5	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999909230110228	WITHOUT_CLASSIFICATION	9.076988977197237E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999000292408464	WITHOUT_CLASSIFICATION	9.997075915357776E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999834840846776	WITHOUT_CLASSIFICATION	1.651591532241273E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999997729406445	WITHOUT_CLASSIFICATION	2.270593554798983E-7	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999981951593895	WITHOUT_CLASSIFICATION	1.804840610526058E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999649306970784	WITHOUT_CLASSIFICATION	3.5069302921657375E-5	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998341415196	WITHOUT_CLASSIFICATION	1.658584804325702E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999986104594145	WITHOUT_CLASSIFICATION	1.3895405855179807E-6	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.999962752601462	WITHOUT_CLASSIFICATION	3.724739853795554E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999062773007826	WITHOUT_CLASSIFICATION	9.372269921745667E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999964168540583	WITHOUT_CLASSIFICATION	3.583145941645825E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999995530543975	WITHOUT_CLASSIFICATION	4.469456024958285E-7	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999971956974941	WITHOUT_CLASSIFICATION	2.8043025058202723E-6	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999980645812457	WITHOUT_CLASSIFICATION	1.9354187542067664E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999989307419649	WITHOUT_CLASSIFICATION	1.069258035131286E-6	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9997742562166834	WITHOUT_CLASSIFICATION	2.2574378331662184E-4	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999974803963958	WITHOUT_CLASSIFICATION	2.5196036042577927E-6	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999994338536017	WITHOUT_CLASSIFICATION	5.661463983546514E-7	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999625363949771	WITHOUT_CLASSIFICATION	3.746360502283272E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9974495126536388	WITHOUT_CLASSIFICATION	0.002550487346361187	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999991949634393	WITHOUT_CLASSIFICATION	8.050365607591681E-7	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999975285642932	WITHOUT_CLASSIFICATION	2.4714357067518954E-6	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9993554050007726	WITHOUT_CLASSIFICATION	6.445949992274424E-4	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999983002038109	WITHOUT_CLASSIFICATION	1.699796189111691E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9996951799311355	WITHOUT_CLASSIFICATION	3.0482006886438406E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991514405108135	WITHOUT_CLASSIFICATION	8.485594891864344E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991514405108135	WITHOUT_CLASSIFICATION	8.485594891864344E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999999632917176	WITHOUT_CLASSIFICATION	3.670828240803822E-7	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999945028775963	WITHOUT_CLASSIFICATION	5.497122403734903E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.993550246550004	WITHOUT_CLASSIFICATION	0.006449753449996055	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999976728419783	WITHOUT_CLASSIFICATION	2.327158021715315E-6	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999367587001532	WITHOUT_CLASSIFICATION	6.324129984679919E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999922557199594	WITHOUT_CLASSIFICATION	7.744280040538116E-6	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998909792227849	WITHOUT_CLASSIFICATION	1.0902077721499092E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999981170346144	WITHOUT_CLASSIFICATION	1.882965385633454E-6	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999935825566454	WITHOUT_CLASSIFICATION	6.417443354679301E-6	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767245681844	WITHOUT_CLASSIFICATION	2.3275431815524184E-5	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999883016356955	WITHOUT_CLASSIFICATION	1.1698364304406766E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999411558641798	WITHOUT_CLASSIFICATION	5.884413582023355E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999997611293507	WITHOUT_CLASSIFICATION	2.388706491836787E-7	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999988542333383	WITHOUT_CLASSIFICATION	1.145766661590369E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999971028108539	WITHOUT_CLASSIFICATION	2.8971891461603736E-6	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999965926676999	WITHOUT_CLASSIFICATION	3.407332300068502E-6	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9996216083204239	WITHOUT_CLASSIFICATION	3.7839167957601233E-4	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999956946524355	WITHOUT_CLASSIFICATION	4.3053475645556725E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999718319691131	WITHOUT_CLASSIFICATION	2.8168030886931666E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999962974016637	WITHOUT_CLASSIFICATION	3.7025983362524885E-6	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999958440923962	WITHOUT_CLASSIFICATION	4.15590760381871E-6	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999970967760043	WITHOUT_CLASSIFICATION	2.903223995655443E-6	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998881806963397	WITHOUT_CLASSIFICATION	1.118193036603261E-4	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9991911705685612	WITHOUT_CLASSIFICATION	8.088294314388791E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999774682581072	WITHOUT_CLASSIFICATION	2.2531741892819407E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999930853573551	WITHOUT_CLASSIFICATION	6.914642644881657E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9994958499924202	WITHOUT_CLASSIFICATION	5.041500075798396E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999755841236255	WITHOUT_CLASSIFICATION	2.4415876374420115E-5	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999985841921819	WITHOUT_CLASSIFICATION	1.4158078181074748E-6	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999910681925896	WITHOUT_CLASSIFICATION	8.93180741026625E-6	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9997485840660694	WITHOUT_CLASSIFICATION	2.5141593393067434E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999946368462378	WITHOUT_CLASSIFICATION	5.363153762192832E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999949538592829	WITHOUT_CLASSIFICATION	5.046140717063216E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999957682873383	WITHOUT_CLASSIFICATION	4.23171266174642E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999539051529225	WITHOUT_CLASSIFICATION	4.609484707737501E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998813917298406	WITHOUT_CLASSIFICATION	1.1860827015942487E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999996117113766	WITHOUT_CLASSIFICATION	3.8828862345054056E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999771364432924	WITHOUT_CLASSIFICATION	2.286355670746979E-5	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999991889471634	WITHOUT_CLASSIFICATION	8.110528366211754E-7	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.999988206249815	WITHOUT_CLASSIFICATION	1.179375018497166E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999967406701445	WITHOUT_CLASSIFICATION	3.2593298553185965E-6	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.99999864896567	WITHOUT_CLASSIFICATION	1.3510343300561247E-6	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9995400594357878	WITHOUT_CLASSIFICATION	4.599405642121494E-4	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999782555994868	WITHOUT_CLASSIFICATION	2.1744400513269414E-5	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999816451987071	WITHOUT_CLASSIFICATION	1.8354801292857507E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999672952400428	WITHOUT_CLASSIFICATION	3.270475995731967E-5	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999431072076208	WITHOUT_CLASSIFICATION	5.689279237922048E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9994268549363198	WITHOUT_CLASSIFICATION	5.731450636802736E-4	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999975576935063	WITHOUT_CLASSIFICATION	2.4423064936884357E-5	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999963634047183	WITHOUT_CLASSIFICATION	3.6365952816938227E-6	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999797003431703	WITHOUT_CLASSIFICATION	2.029965682974999E-5	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999974666044514	WITHOUT_CLASSIFICATION	2.5333955484940854E-6	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9998885849824931	WITHOUT_CLASSIFICATION	1.1141501750688946E-4	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999967427015196	WITHOUT_CLASSIFICATION	3.257298480360929E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9989771305765792	WITHOUT_CLASSIFICATION	0.0010228694234208529	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999985100788712	WITHOUT_CLASSIFICATION	1.4899211288340694E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999587150837913	WITHOUT_CLASSIFICATION	4.1284916208775975E-5	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999864677344701	WITHOUT_CLASSIFICATION	1.353226552993835E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999831984992913	WITHOUT_CLASSIFICATION	1.6801500708689253E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998820449600156	WITHOUT_CLASSIFICATION	1.1795503998437987E-4	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999883877460364	WITHOUT_CLASSIFICATION	1.1612253963545528E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999986955613881	WITHOUT_CLASSIFICATION	1.3044386118506101E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945164650331	WITHOUT_CLASSIFICATION	5.483534966912394E-6	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999956107237948	WITHOUT_CLASSIFICATION	4.38927620518617E-6	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999897483854775	WITHOUT_CLASSIFICATION	1.0251614522472023E-5	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999996786952661	WITHOUT_CLASSIFICATION	3.213047339314031E-7	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9988456001717269	WITHOUT_CLASSIFICATION	0.0011543998282731436	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945164650331	WITHOUT_CLASSIFICATION	5.483534966912394E-6	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9989631837954432	WITHOUT_CLASSIFICATION	0.001036816204556683	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999965556859578	WITHOUT_CLASSIFICATION	3.4443140422116753E-6	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999989382911331	WITHOUT_CLASSIFICATION	1.0617088669056272E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9997608565556709	WITHOUT_CLASSIFICATION	2.3914344432897182E-4	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999749640947326	WITHOUT_CLASSIFICATION	2.503590526732521E-5	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999997754326387	WITHOUT_CLASSIFICATION	2.245673613033515E-6	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999926144135454	WITHOUT_CLASSIFICATION	7.38558645457491E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9988524972936194	WITHOUT_CLASSIFICATION	0.001147502706380689	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999992434739048	WITHOUT_CLASSIFICATION	7.565260953314049E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999947987591937	WITHOUT_CLASSIFICATION	5.2012408063192055E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999974359891222	WITHOUT_CLASSIFICATION	2.56401087784687E-6	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999921248054247	WITHOUT_CLASSIFICATION	7.875194575277562E-6	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999934973878648	WITHOUT_CLASSIFICATION	6.502612135230468E-6	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9996275747334384	WITHOUT_CLASSIFICATION	3.7242526656158727E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999975156526073	WITHOUT_CLASSIFICATION	2.484347392624659E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999999948646768	WITHOUT_CLASSIFICATION	5.135323200868022E-8	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999996382800767	WITHOUT_CLASSIFICATION	3.617199233175711E-7	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999991046120764	WITHOUT_CLASSIFICATION	8.953879235884357E-7	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999072823902291	WITHOUT_CLASSIFICATION	9.271760977094312E-5	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999606458730042	WITHOUT_CLASSIFICATION	3.93541269959466E-5	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9978600069693976	WITHOUT_CLASSIFICATION	0.0021399930306024093	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9994426606805057	WITHOUT_CLASSIFICATION	5.573393194942873E-4	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999894282053412	WITHOUT_CLASSIFICATION	1.057179465868821E-5	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999966645403667	WITHOUT_CLASSIFICATION	3.3354596332880874E-6	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999972620565746	WITHOUT_CLASSIFICATION	2.737943425492556E-6	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999995410163199	WITHOUT_CLASSIFICATION	4.589836800248364E-7	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999972610663647	WITHOUT_CLASSIFICATION	2.738933635358262E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999582855017476	WITHOUT_CLASSIFICATION	4.171449825245786E-5	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.999999921524787	WITHOUT_CLASSIFICATION	7.847521290736153E-8	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9924222569610004	WITHOUT_CLASSIFICATION	0.007577743038999621	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999908217490067	WITHOUT_CLASSIFICATION	9.178250993302E-6	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998318404550992	WITHOUT_CLASSIFICATION	1.681595449007355E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999887869418856	WITHOUT_CLASSIFICATION	1.1213058114428033E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999363031538872	WITHOUT_CLASSIFICATION	6.369684611288998E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999998623111396	WITHOUT_CLASSIFICATION	1.3768886043480886E-7	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999932011958338	WITHOUT_CLASSIFICATION	6.798804166170401E-6	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999995452009033	WITHOUT_CLASSIFICATION	4.547990967633603E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999933368310782	WITHOUT_CLASSIFICATION	6.663168921832429E-6	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999914923009077	WITHOUT_CLASSIFICATION	8.507699092452695E-6	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999949599880577	WITHOUT_CLASSIFICATION	5.04001194235478E-6	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996361211014664	WITHOUT_CLASSIFICATION	3.638788985335804E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996361211014664	WITHOUT_CLASSIFICATION	3.638788985335804E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999754358851491	WITHOUT_CLASSIFICATION	2.4564114850811218E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999780542144285	WITHOUT_CLASSIFICATION	2.1945785571373076E-5	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999941700527757	WITHOUT_CLASSIFICATION	5.8299472243453E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.9907915510208393	WITHOUT_CLASSIFICATION	0.009208448979160835	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999548737339716	WITHOUT_CLASSIFICATION	4.512626602848942E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999548737339716	WITHOUT_CLASSIFICATION	4.512626602848942E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999761661959883	WITHOUT_CLASSIFICATION	2.3833804011702878E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999830964150794	WITHOUT_CLASSIFICATION	1.690358492055544E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9997828089959812	WITHOUT_CLASSIFICATION	2.171910040187639E-4	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999769800992594	WITHOUT_CLASSIFICATION	2.3019900740583352E-5	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999976996837694	WITHOUT_CLASSIFICATION	2.300316230502956E-6	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999994975203547	WITHOUT_CLASSIFICATION	5.0247964529985485E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999520602220576	WITHOUT_CLASSIFICATION	4.7939777942456164E-5	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999903436381856	WITHOUT_CLASSIFICATION	9.656361814458455E-6	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999967747961229	WITHOUT_CLASSIFICATION	3.225203877096794E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961791755094	WITHOUT_CLASSIFICATION	3.82082449054803E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961791755094	WITHOUT_CLASSIFICATION	3.82082449054803E-6	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997829876485892	WITHOUT_CLASSIFICATION	2.1701235141069036E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999754380883653	WITHOUT_CLASSIFICATION	2.4561911634644287E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999867297408447	WITHOUT_CLASSIFICATION	1.3270259155324977E-5	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999388226565761	WITHOUT_CLASSIFICATION	6.117734342391086E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999577700163026	WITHOUT_CLASSIFICATION	4.2229983697392665E-5	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999488947101	WITHOUT_CLASSIFICATION	5.110528990024482E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999878691490407	WITHOUT_CLASSIFICATION	1.2130850959302091E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999817552465632	WITHOUT_CLASSIFICATION	1.8244753436771035E-5	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999760531494238	WITHOUT_CLASSIFICATION	2.3946850576214656E-5	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999980907907176	WITHOUT_CLASSIFICATION	1.9092092824214403E-6	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999754538604818	WITHOUT_CLASSIFICATION	2.454613951822731E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999947987591937	WITHOUT_CLASSIFICATION	5.2012408063192055E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9998223517759443	WITHOUT_CLASSIFICATION	1.776482240558438E-4	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999549674559186	WITHOUT_CLASSIFICATION	4.503254408139556E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999961751695035	WITHOUT_CLASSIFICATION	3.824830496503022E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999815522783502	WITHOUT_CLASSIFICATION	1.844772164987637E-5	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999885346304763	WITHOUT_CLASSIFICATION	1.1465369523757777E-5	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999912779537125	WITHOUT_CLASSIFICATION	8.722046287545629E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9995490491459861	WITHOUT_CLASSIFICATION	4.509508540139114E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998628646196	WITHOUT_CLASSIFICATION	1.371353803682698E-7	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999831639193699	WITHOUT_CLASSIFICATION	1.6836080630076244E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999635824516327	WITHOUT_CLASSIFICATION	3.641754836719027E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999635824516327	WITHOUT_CLASSIFICATION	3.641754836719027E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999858482547908	WITHOUT_CLASSIFICATION	1.415174520925827E-5	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999990616400278	WITHOUT_CLASSIFICATION	9.383599721141612E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997108847700058	WITHOUT_CLASSIFICATION	2.891152299941297E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999925994024348	WITHOUT_CLASSIFICATION	7.400597565189263E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999834310812358	WITHOUT_CLASSIFICATION	1.6568918764271234E-5	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999336974971376	WITHOUT_CLASSIFICATION	6.630250286240405E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999969826030293	WITHOUT_CLASSIFICATION	3.0173969708089706E-6	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999992931621794	WITHOUT_CLASSIFICATION	7.068378206166138E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999624539373442	WITHOUT_CLASSIFICATION	3.7546062655861195E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999338532946282	WITHOUT_CLASSIFICATION	6.614670537176664E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825805416402	WITHOUT_CLASSIFICATION	1.7419458359767043E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9976398713966677	WITHOUT_CLASSIFICATION	0.002360128603332264	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.983175311140431	WITHOUT_CLASSIFICATION	0.016824688859568934	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998476684382	WITHOUT_CLASSIFICATION	1.5233156171651019E-7	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999945198587527	WITHOUT_CLASSIFICATION	5.480141247340246E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999955171852888	WITHOUT_CLASSIFICATION	4.4828147112472966E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999863513830012	WITHOUT_CLASSIFICATION	1.3648616998906452E-5	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999974016887883	WITHOUT_CLASSIFICATION	2.598311211793792E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999558373711067	WITHOUT_CLASSIFICATION	4.4162628893221586E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999987343385427	WITHOUT_CLASSIFICATION	1.2656614572999859E-6	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999996762667733	WITHOUT_CLASSIFICATION	3.237332267180352E-7	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999114549016863	WITHOUT_CLASSIFICATION	8.854509831368425E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999926273386135	WITHOUT_CLASSIFICATION	7.372661386584674E-6	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9998977321272996	WITHOUT_CLASSIFICATION	1.0226787270041949E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999955552355158	WITHOUT_CLASSIFICATION	4.444764484246892E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999955552355158	WITHOUT_CLASSIFICATION	4.444764484246892E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999896033205514	WITHOUT_CLASSIFICATION	1.0396679448513396E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998286196863858	WITHOUT_CLASSIFICATION	1.7138031361428873E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999270309243542	WITHOUT_CLASSIFICATION	7.296907564584277E-5	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999794771464905	WITHOUT_CLASSIFICATION	2.0522853509493504E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999929320019658	WITHOUT_CLASSIFICATION	7.06799803413094E-6	IMPLEMENTATION
