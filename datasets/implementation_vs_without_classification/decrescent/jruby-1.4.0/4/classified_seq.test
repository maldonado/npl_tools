IMPLEMENTATION	// TODO: warn "tried to create Proc object without a block"
IMPLEMENTATION	// TODO: CLONE_SETUP here
IMPLEMENTATION	// TODO: Someday, enable.
IMPLEMENTATION	// Bunch of methods still not implemented
IMPLEMENTATION	// TODO: non-strict option
IMPLEMENTATION	// TODO: opt for 2 and 3 ?
IMPLEMENTATION	// FIXME: Should we make this work with platform's locale, // or continue hardcoding US?
IMPLEMENTATION	// TODO: rescan code range ?
IMPLEMENTATION	// TODO: rescan code range ?
IMPLEMENTATION	// TODO: pass this in?
IMPLEMENTATION	// FIXME: Pass block down?
IMPLEMENTATION	// TODO: do something here?
IMPLEMENTATION	// TODO: port exact behavior from MRI, and move most locking logic into ChannelDescriptor // TODO: for all LOCK_NB cases, return false if they would block
IMPLEMENTATION	// TODO: check if too many open files, GC and try again
IMPLEMENTATION	//TODO deal with UNC names
IMPLEMENTATION	// FIXME: When we get JNA3 we need to properly write this to errno.
IMPLEMENTATION	//FIXME: When we get JNA3 we need to properly write this to errno.
IMPLEMENTATION	// TODO: SafeStringValue here
IMPLEMENTATION	// TODO: turn off readable? am I reading this right? // This only seems to be used while duping below, since modes gets // reset to actual modes afterward //fptr->mode &= (m & FMODE_READABLE) ? ~FMODE_READABLE : ~FMODE_WRITABLE;
IMPLEMENTATION	// TODO: check safe, taint on incoming string
IMPLEMENTATION	// TODO: pipe handler to be reopened with path and "w" mode
IMPLEMENTATION	// FIXME: add text mode to mode flags
IMPLEMENTATION	// TODO: Something about pipe buffer length here
IMPLEMENTATION	// TODO: handle errors in buffered write by retrying until finished or file is closed
IMPLEMENTATION	// TODO: notify threads waiting on descriptors/IO? probably not...
IMPLEMENTATION	// TODO: Ruby re-checks that the buffer string hasn't been modified
IMPLEMENTATION	// TODO: Ruby unlocks the string here
IMPLEMENTATION	// TODO: Ruby truncates string to specific size here, but our bytelist should handle this already?
IMPLEMENTATION	// TODO: Ruby unlocks the string here
IMPLEMENTATION	// TODO: Ruby truncates string to specific size here, but our bytelist should handle this already?
IMPLEMENTATION	// TODO: ruby locks the string here
IMPLEMENTATION	// TODO same zero-length checks as file above
IMPLEMENTATION	// TODO: MRI also can hadle Bignum here
IMPLEMENTATION	// TODO: make threadsafe
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// FIXME: create AttrReaderMethod, AttrWriterMethod, for faster attr access
IMPLEMENTATION	// Do not clone cached methods // FIXME: MRI copies all methods here
IMPLEMENTATION	// TODO: don't calculate the same value 3 times
IMPLEMENTATION	// TODO: 3 times calculate the same value below
IMPLEMENTATION	// TODO: no need to calculate every time.
IMPLEMENTATION	// TODO: Store BEGIN and END information into this node
IMPLEMENTATION	// TODO: put these nil guards into tree (bigger than I want to do right now)
IMPLEMENTATION	// FIXME: Make bodyNode non-null in parser
IMPLEMENTATION	// TODO: call config with scope but no frame
IMPLEMENTATION	// TODO: add trace call?
IMPLEMENTATION	// FIXME: missing arity check
IMPLEMENTATION	// FIXME: optimize for cases where we have no false branch
IMPLEMENTATION	// FIXME: after jump is not in here.  Will if ever be? //Label afterJmp = new Label();
IMPLEMENTATION	// TODO: build arg list based on number of args, optionals, etc
IMPLEMENTATION	// FIXME: missing arity check
IMPLEMENTATION	// SSS FIXME: Traverse up the scope hierarchy to find the constant as long as the parent is a static scope
IMPLEMENTATION	// SSS FIXME: Should I be returning the operand constructed here?
IMPLEMENTATION	// TODO: Add IR instructions for checking method arity! // s.getVariableCompiler().checkMethodArity(required, opt, rest);
IMPLEMENTATION	// FIXME: Ruby 1.9 post args code needs to come here
IMPLEMENTATION	// SSS: FIXME: Somewhere here, we need to record information the type of this operand as String
IMPLEMENTATION	// FIXME: Translate this call below! // s.unwrapPassedBlock();
IMPLEMENTATION	// SSS FIXME: We need to build debug information tracking into the IR in some fashion // So, these methods below would have to have equivalents in IR_Scope implementations.
IMPLEMENTATION	// SSS FIXME: Incomplete!
IMPLEMENTATION	// SSS FIXME: Pick one of bytelist or string, or add internal conversion methods to convert to the default representation
IMPLEMENTATION	// SSS FIXME: To be done
IMPLEMENTATION	//TODO: implement, won't do this now
IMPLEMENTATION	//TODO: implement, won't do this now
IMPLEMENTATION	// TODO: validate port as numeric
IMPLEMENTATION	// TODO: this code should really check if a Ruby equals method is implemented or not.
IMPLEMENTATION	// if not already defined, we add a 'new' that guesses at which signature to use // TODO: just adding first one right now...add in signature-guessing logic
IMPLEMENTATION	// TODO: deal with varargs
IMPLEMENTATION	// TODO: deal with varargs
IMPLEMENTATION	// TODO: other reserved names?
IMPLEMENTATION	// TODO: we can probably release our references to the constantFields // array and static/instance callback hashes at this point. 
IMPLEMENTATION	// TODO: Formalize conversion mechanisms between Java and Ruby
IMPLEMENTATION	// XXX: Check if it's appropriate type?
IMPLEMENTATION	// TODO: call ruby method
IMPLEMENTATION	// TODO: call ruby method
IMPLEMENTATION	// TODO: Add safety check for taintedness
IMPLEMENTATION	// FIXME: Need to detect magic_comment in 1.9 here for encoding
IMPLEMENTATION	/* xxx shouldn't check if valid option variable */
IMPLEMENTATION	// TODO: this isn't handling multibyte yet
IMPLEMENTATION	// TODO: This should be something else like a tCHAR
IMPLEMENTATION	// FIXME: \r logic needed
IMPLEMENTATION	// TODO: note lack of command.com support for Win 9x...
IMPLEMENTATION	// FIXME: Make thread pool threads daemons if necessary
IMPLEMENTATION	/* FIXME: We may be intern'ing more than once.*/
IMPLEMENTATION	/* FIXME: We may be intern'ing more than once.*/
IMPLEMENTATION	/* FIXME: arg_concat missing for opt_call_args*/
IMPLEMENTATION	/* FIXME: arg_concat logic missing for opt_call_args*/
IMPLEMENTATION	// FIXME: This needs to happen for lambdas //            args.checkArgCount(runtime, parameters.length);
IMPLEMENTATION	// FIXME: This needs to happen for lambdas //            args.checkArgCount(runtime, parameters.length);
IMPLEMENTATION	// TODO: make it cross runtime safe by COW or eager copy
IMPLEMENTATION	// FIXME: don't use RubyIO for this
IMPLEMENTATION	// FIXME: don't use RubyIO for this
IMPLEMENTATION	// FIXME: don't use RubyIO for this
IMPLEMENTATION	// TODO: check the return value here
IMPLEMENTATION	// TODO: check the return value here
IMPLEMENTATION	// TODO: Make sure all appropriate open flags are added to this check.
IMPLEMENTATION	//subList.clear(); // Sublist is supposed to share same backing store as list...TODO in RubyArray. //assertTrue(list.size() == 1);
IMPLEMENTATION	// SSS FIXME: Cannot optimize this without assuming that Range.to_ary method has not redefined. // So for now, return null!
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO: no need to calculate every time.
IMPLEMENTATION	// TODO: no need to calculate every time.
IMPLEMENTATION	// TODO: check for ascii string
IMPLEMENTATION	// filter out any Java primitive names // TODO: should check against all Java reserved names here, not just primitives
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// TODO: missing additional logic for dealing with conflicting protected fields.
IMPLEMENTATION	// TODO: better detection when path is absolute or not. // If the path isn't absolute, then prepend the current working // directory to the path.
IMPLEMENTATION	// FIXME: When we get JNA3 we need to properly write this to errno.
IMPLEMENTATION	// FIX replace type() == ... with isInstanceOf(...)
IMPLEMENTATION	/* TODO: MRI is just a when node.  We need this extra logic for IDE consumers (null in casenode statement should be implicit nil)*/
IMPLEMENTATION	// TODO: This and recacheRespondsTo needed to be synchronized for JRUBY-3466, // but this degraded performance nearly 2x. It's still faster than MRI, but // a reanalysis of this code may show a faster way to ensure we're caching // safely.
IMPLEMENTATION	// TODO: adjust length so it won't fall in the middle  // of a multi-byte character. MRI's sprintf.c uses tables // in a modified version of regex.c, which assume some // particular  encoding for a given installation/application. // (See regex.c#re_mbcinit in ruby-1.8.5-p12)  // // This is only an issue if the user specifies a precision // that causes the string to be truncated. The same issue // would arise taking a substring of a ByteList-backed RubyString.
WITHOUT_CLASSIFICATION	// set constants now that they're initialized
WITHOUT_CLASSIFICATION	// line 335
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?
WITHOUT_CLASSIFICATION	// line 362
WITHOUT_CLASSIFICATION	// line 372
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	// line 391
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	/* ^D */
WITHOUT_CLASSIFICATION	/* ^Z */
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//Do nothing
WITHOUT_CLASSIFICATION	//Do nothing
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// return result
WITHOUT_CLASSIFICATION	// name
WITHOUT_CLASSIFICATION	// Define System.getProperties() in ENV_JAVA
WITHOUT_CLASSIFICATION	// Accessor methods.
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// call getpwent to fail early if unsupported
WITHOUT_CLASSIFICATION	// fall back on env entry for USER
WITHOUT_CLASSIFICATION	// try to read grent to fail fast
WITHOUT_CLASSIFICATION	// define ARGV and $* for this runtime
WITHOUT_CLASSIFICATION	// Version information:
WITHOUT_CLASSIFICATION	// after defn of $stderr as the call may produce warnings
WITHOUT_CLASSIFICATION	// ARGF, $< object
WITHOUT_CLASSIFICATION	// if the environment variables can't be obtained, define an empty ENV
WITHOUT_CLASSIFICATION	// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.
WITHOUT_CLASSIFICATION	//$@ returns nil if $!.backtrace is not an array
WITHOUT_CLASSIFICATION	// include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.
WITHOUT_CLASSIFICATION	// this _is_ legal (when removing an undef)
WITHOUT_CLASSIFICATION	// What we passed to the constructor for method 'path'
WITHOUT_CLASSIFICATION	// ----- Ruby Class Methods ----------------------------------------------------
WITHOUT_CLASSIFICATION	// // CONSTANT TABLE METHODS - pass to delegate //
WITHOUT_CLASSIFICATION	// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// ----- Ruby Instance Methods -------------------------------------------------
WITHOUT_CLASSIFICATION	// Make sure any read()s after close fail.
WITHOUT_CLASSIFICATION	// ----- Helper Methods --------------------------------------------------------
WITHOUT_CLASSIFICATION	// try to use POSIX for this first
WITHOUT_CLASSIFICATION	// otherwise fall back on the old way
WITHOUT_CLASSIFICATION	// Proc class
WITHOUT_CLASSIFICATION	// No passed in block, lets check next outer frame for one ('Proc.new')
WITHOUT_CLASSIFICATION	// modify the block with a new backref/lastline-grabbing scope
WITHOUT_CLASSIFICATION	// for future compatibility as constructors move toward not accepting metaclass?
WITHOUT_CLASSIFICATION	//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;
WITHOUT_CLASSIFICATION	// This looks wrong, but it's the way MRI does it.
WITHOUT_CLASSIFICATION	// rb_exc_new3
WITHOUT_CLASSIFICATION	// NOTE: The indicies here match exactly the signal values; do not reorder
WITHOUT_CLASSIFICATION	//registerThreadDumpSignalHandler(runtime);
WITHOUT_CLASSIFICATION	// IOT is also 6
WITHOUT_CLASSIFICATION	// CLD is also 20
WITHOUT_CLASSIFICATION	// RubySignal
WITHOUT_CLASSIFICATION	// ZStream actually *isn't* allocatable
WITHOUT_CLASSIFICATION	// MRI behavior, enforced by tests
WITHOUT_CLASSIFICATION	// it's safe since adler.update doesn't modify the array
WITHOUT_CLASSIFICATION	// MRI behavior: in finished mode, we work as pass-through
WITHOUT_CLASSIFICATION	// SYNC_FLUSH
WITHOUT_CLASSIFICATION	// By default, NO_FLUSH
WITHOUT_CLASSIFICATION	//io.finish();
WITHOUT_CLASSIFICATION	// should invoke seek on realIo
WITHOUT_CLASSIFICATION	// hmm...
WITHOUT_CLASSIFICATION	// Called before any write to make sure the // header is always written before the first bytes
WITHOUT_CLASSIFICATION	// For JDK 1.4 we can use "cal.getTimeInMillis()"
WITHOUT_CLASSIFICATION	// We can just use dt, since it is immutable
WITHOUT_CLASSIFICATION	// float number of seconds
WITHOUT_CLASSIFICATION	// modified to match how hash is calculated in 1.8.2
WITHOUT_CLASSIFICATION	// dump usec, not msec
WITHOUT_CLASSIFICATION	/* Time class methods */
WITHOUT_CLASSIFICATION	// marsaling dumps usec, not msec
WITHOUT_CLASSIFICATION	// MRI accepts additional wday argument which appears to be ignored.
WITHOUT_CLASSIFICATION	// set up with min values and then add to allow rolling over
WITHOUT_CLASSIFICATION	// the instant at which we will ask dtz what the difference between DST and // standard time is
WITHOUT_CLASSIFICATION	// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST
WITHOUT_CLASSIFICATION	// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	/* If the value will fit in a Fixnum, return one of those. */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)
WITHOUT_CLASSIFICATION	// num2int is also implemented
WITHOUT_CLASSIFICATION	// num2int is also implemented
WITHOUT_CLASSIFICATION	// no bignorm here needed
WITHOUT_CLASSIFICATION	// wow, the only time we can use the java protocol ;)
WITHOUT_CLASSIFICATION	// Pad with a 0
WITHOUT_CLASSIFICATION	// BigInteger required a sign byte in incoming array
WITHOUT_CLASSIFICATION	// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.
WITHOUT_CLASSIFICATION	// We do this b/c make_tmpname might be overridden
WITHOUT_CLASSIFICATION	// ???
WITHOUT_CLASSIFICATION	// PID
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// elements and trailing nils
WITHOUT_CLASSIFICATION	// Dir::tmpdir
WITHOUT_CLASSIFICATION	// volatile to ensure that initial nil-fill is visible to other threads
WITHOUT_CLASSIFICATION	/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */
WITHOUT_CLASSIFICATION	/* rb_ary_new2     * just allocates the internal array     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */
WITHOUT_CLASSIFICATION	/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */
WITHOUT_CLASSIFICATION	// Create global constants and variables
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.
WITHOUT_CLASSIFICATION	// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// 1.9 seems to just do inspect for to_s now
WITHOUT_CLASSIFICATION	// possibly should not in object space
WITHOUT_CLASSIFICATION	// only fill if there actually will remain trailing storage
WITHOUT_CLASSIFICATION	// rb_ary_new4
WITHOUT_CLASSIFICATION	// rb_ary_new4
WITHOUT_CLASSIFICATION	// from DUP_SETUP
WITHOUT_CLASSIFICATION	// If already inspecting, there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	// See [ruby-core:17483]
WITHOUT_CLASSIFICATION	// See [ruby-core:17483]
WITHOUT_CLASSIFICATION	// Satisfy java.util.List interface (for Java integration)
WITHOUT_CLASSIFICATION	// pre-set for the sake of terminating recursive calls
WITHOUT_CLASSIFICATION	/* root fiber */
WITHOUT_CLASSIFICATION	// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.
WITHOUT_CLASSIFICATION	//  See http://www.gzip.org/zlib/rfc-gzip.html
WITHOUT_CLASSIFICATION	// extras flag
WITHOUT_CLASSIFICATION	// Zlib::NO_FLUSH
WITHOUT_CLASSIFICATION	// ...nothing
WITHOUT_CLASSIFICATION	// utility method
WITHOUT_CLASSIFICATION	// Prepare LoadService and load path
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// flags // 4 bytes of modified time
WITHOUT_CLASSIFICATION	// range_each_func(range, step_i, b, e, args);
WITHOUT_CLASSIFICATION	// 1.8 "include?"
WITHOUT_CLASSIFICATION	// any BigInteger is bigger than Fixnum and we don't have FIXABLE
WITHOUT_CLASSIFICATION	// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal
WITHOUT_CLASSIFICATION	// MRI does it!
WITHOUT_CLASSIFICATION	// won't hurt fixnums
WITHOUT_CLASSIFICATION	// it won't hurt fixnums
WITHOUT_CLASSIFICATION	// RubyClassPathVariable
WITHOUT_CLASSIFICATION	// not to be confused with RubyObject's flags
WITHOUT_CLASSIFICATION	// second argument is allowed, but ignored (MRI)
WITHOUT_CLASSIFICATION	// we are presumably running a precompiled class; load directly
WITHOUT_CLASSIFICATION	// terminate; tryCompile will have printed out an error and we're done
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// do nothing, this iteration restarts
WITHOUT_CLASSIFICATION	// recheck condition
WITHOUT_CLASSIFICATION	// Get the main threadcontext (gets constructed for us)
WITHOUT_CLASSIFICATION	// Construct key services
WITHOUT_CLASSIFICATION	// initialize the root of the class hierarchy completely
WITHOUT_CLASSIFICATION	// Construct the top-level execution frame and scope for the main thread
WITHOUT_CLASSIFICATION	// Initialize all the core classes
WITHOUT_CLASSIFICATION	// Initialize the "dummy" class used as a marker
WITHOUT_CLASSIFICATION	// Initialize Kernel and include into Object
WITHOUT_CLASSIFICATION	// Object is ready, create top self
WITHOUT_CLASSIFICATION	// Pre-create all the core classes potentially referenced during startup
WITHOUT_CLASSIFICATION	// Math depends on all numeric types
WITHOUT_CLASSIFICATION	// depends on IO, FileTest
WITHOUT_CLASSIFICATION	// initialize builtin libraries
WITHOUT_CLASSIFICATION	// Require in all libraries specified on command line
WITHOUT_CLASSIFICATION	// Bootstrap the top of the hierarchy
WITHOUT_CLASSIFICATION	// we try to get the classloader that loaded JRuby, falling back on System
WITHOUT_CLASSIFICATION	// determine spacing
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	// For JSR 223 support: see http://scripting.java.net/
WITHOUT_CLASSIFICATION	// use this for JRuby-internal finalizers
WITHOUT_CLASSIFICATION	// this method is for finalizers registered via ObjectSpace
WITHOUT_CLASSIFICATION	// new factory methods ------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	//        assert internedName == internedName.intern() : internedName + " is not interned";
WITHOUT_CLASSIFICATION	// Equivalent of Data_Wrap_Struct
WITHOUT_CLASSIFICATION	// default: don't retain
WITHOUT_CLASSIFICATION	// ChannelDescriptors opened by sysopen are cached to avoid collection
WITHOUT_CLASSIFICATION	// Default objects
WITHOUT_CLASSIFICATION	// record separator var, to speed up io ops that use it
WITHOUT_CLASSIFICATION	// former java.lang.System concepts now internalized for MVM
WITHOUT_CLASSIFICATION	// Java support
WITHOUT_CLASSIFICATION	// Parser stats
WITHOUT_CLASSIFICATION	// Compilation
WITHOUT_CLASSIFICATION	// can't read non-standard properties
WITHOUT_CLASSIFICATION	// can't create custom classloaders
WITHOUT_CLASSIFICATION	// mutex that controls modifications of user-defined finalizers
WITHOUT_CLASSIFICATION	// mutex that controls modifications of internal finalizers
WITHOUT_CLASSIFICATION	// A thread pool to use for executing this runtime's Ruby threads
WITHOUT_CLASSIFICATION	// A global object lock for class hierarchy mutations
WITHOUT_CLASSIFICATION	// initial spaces // spaces before "at"
WITHOUT_CLASSIFICATION	// event name // filename // line numbers should be 1-based
WITHOUT_CLASSIFICATION	// The method is intentionally not public, since it typically should // not be used outside of the core.
WITHOUT_CLASSIFICATION	// Note: this field and the following static initializer // must be located be in this order!
WITHOUT_CLASSIFICATION	// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.
WITHOUT_CLASSIFICATION	// quoted-printable
WITHOUT_CLASSIFICATION	// default options
WITHOUT_CLASSIFICATION	// iso-2022-jp
WITHOUT_CLASSIFICATION	// iso-2022-jp
WITHOUT_CLASSIFICATION	// Shift_JIS
WITHOUT_CLASSIFICATION	// Shift_JIS
WITHOUT_CLASSIFICATION	// EUC-JP
WITHOUT_CLASSIFICATION	// EUC-JP
WITHOUT_CLASSIFICATION	// UTF-8
WITHOUT_CLASSIFICATION	// UTF-8
WITHOUT_CLASSIFICATION	// long name option
WITHOUT_CLASSIFICATION	// conversion
WITHOUT_CLASSIFICATION	/*  ================     *  Singleton Methods     *  ================      */
WITHOUT_CLASSIFICATION	// string doesn't share any resources
WITHOUT_CLASSIFICATION	// string has it's own ByteList, but it's pointing to a shared buffer (byte[])
WITHOUT_CLASSIFICATION	// string doesn't have it's own ByteList (values)
WITHOUT_CLASSIFICATION	// ENC_CODERANGE_ASCIIONLY
WITHOUT_CLASSIFICATION	// rb_enc_str_asciionly_p
WITHOUT_CLASSIFICATION	// rb_enc_str_coderange
WITHOUT_CLASSIFICATION	// rb_str_hash_cmp
WITHOUT_CLASSIFICATION	// Deprecated String construction routines
WITHOUT_CLASSIFICATION	// String construction routines by NOT byte[] buffer and NOT making the target String shared 
WITHOUT_CLASSIFICATION	/* rb_str_subseq */
WITHOUT_CLASSIFICATION	// no need to assign encoding, same bytelist shared
WITHOUT_CLASSIFICATION	// if len == 0 then shared empty
WITHOUT_CLASSIFICATION	/* rb_str_cmp_m */
WITHOUT_CLASSIFICATION	// we limit to int because ByteBuffer can only allocate int sizes
WITHOUT_CLASSIFICATION	// // rb_str_buf_append
WITHOUT_CLASSIFICATION	// encoding doesn't have to be copied.
WITHOUT_CLASSIFICATION	// this really needs to be inlined here
WITHOUT_CLASSIFICATION	// must not reallocate
WITHOUT_CLASSIFICATION	// Illegal combination
WITHOUT_CLASSIFICATION	// use 1.8 impl
WITHOUT_CLASSIFICATION	/* RubyString aka rb_string_value */
WITHOUT_CLASSIFICATION	/* bang: true, no match, no substitution */
WITHOUT_CLASSIFICATION	// out of byte range // there will be no match for sure
WITHOUT_CLASSIFICATION	/* len + margin */
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	/* copy pre-match substr */
WITHOUT_CLASSIFICATION	// string given
WITHOUT_CLASSIFICATION	// hash given
WITHOUT_CLASSIFICATION	// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"
WITHOUT_CLASSIFICATION	/* substring longer than string */
WITHOUT_CLASSIFICATION	/* rb_str_substr */
WITHOUT_CLASSIFICATION	// nothing
WITHOUT_CLASSIFICATION	// nothing
WITHOUT_CLASSIFICATION	/* rb_str_splice */
WITHOUT_CLASSIFICATION	// TODO: keep cr // TODO: rb_str_splice_0
WITHOUT_CLASSIFICATION	// keep cr ?
WITHOUT_CLASSIFICATION	// keep cr ?
WITHOUT_CLASSIFICATION	/* wrapped to \0...\0.  search next valid char. */
WITHOUT_CLASSIFICATION	// only this case affects backrefs 
WITHOUT_CLASSIFICATION	// only this case affects backrefs 
WITHOUT_CLASSIFICATION	// modified
WITHOUT_CLASSIFICATION	// modified
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	// QTRUE
WITHOUT_CLASSIFICATION	/* retrieve last replacer */
WITHOUT_CLASSIFICATION	// Check the length every iteration, since // the block can modify this string.
WITHOUT_CLASSIFICATION	// long size * bits in byte
WITHOUT_CLASSIFICATION	// from encoding, special-casing ASCII* to ASCII
WITHOUT_CLASSIFICATION	// to encoding, same special-casing
WITHOUT_CLASSIFICATION	// create a lightweight thunk
WITHOUT_CLASSIFICATION	// decode from "from" and encode to "to"
WITHOUT_CLASSIFICATION	// create a lightweight thunk
WITHOUT_CLASSIFICATION	//Kernel is the only Module that doesn't need an implementor
WITHOUT_CLASSIFICATION	// no binding given, use (eval)
WITHOUT_CLASSIFICATION	// interned, OK for "fast" methods
WITHOUT_CLASSIFICATION	// File to be loaded by autoload has already been or is being loaded.
WITHOUT_CLASSIFICATION	// rb_cstr_to_dbl case
WITHOUT_CLASSIFICATION	// We break if we know this sleep was explicitly woken up/interrupted
WITHOUT_CLASSIFICATION	// exec process, create IO with process
WITHOUT_CLASSIFICATION	// Zero sleeps forever
WITHOUT_CLASSIFICATION	// file given, use it and force it into binding
WITHOUT_CLASSIFICATION	// Explicit zero in MRI returns immediately
WITHOUT_CLASSIFICATION	// Spurious wakeup-loop
WITHOUT_CLASSIFICATION	// adjusts paths started with '/' or '\\', on windows.
WITHOUT_CLASSIFICATION	// file not given
WITHOUT_CLASSIFICATION	// string to eval
WITHOUT_CLASSIFICATION	// binding given, use binding's file
WITHOUT_CLASSIFICATION	// ?g  | boolean | True if file1 has the \CF{setgid} bit
WITHOUT_CLASSIFICATION	// bomb out, it's not a binding or a proc
WITHOUT_CLASSIFICATION	// Ordering of array traversal not important, just intuitive
WITHOUT_CLASSIFICATION	//Catch active, throw for catch to handle
WITHOUT_CLASSIFICATION	// No catch active for this throw
WITHOUT_CLASSIFICATION	// without full tracing, many events will not fire
WITHOUT_CLASSIFICATION	// ignore if it's not a global var
WITHOUT_CLASSIFICATION	// MRI behavior: use first byte of string value if len > 0
WITHOUT_CLASSIFICATION	// MRI behavior: now check arg count
WITHOUT_CLASSIFICATION	// ?A  | Time    | Last access time for file1
WITHOUT_CLASSIFICATION	// ?b  | boolean | True if file1 is a block device
WITHOUT_CLASSIFICATION	// ?c  | boolean | True if file1 is a character device
WITHOUT_CLASSIFICATION	// ?C  | Time    | Last change time for file1
WITHOUT_CLASSIFICATION	// ?d  | boolean | True if file1 exists and is a directory
WITHOUT_CLASSIFICATION	// ?e  | boolean | True if file1 exists
WITHOUT_CLASSIFICATION	// ?f  | boolean | True if file1 exists and is a regular file
WITHOUT_CLASSIFICATION	// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group
WITHOUT_CLASSIFICATION	// ?k  | boolean | True if file1 exists and has the sticky bit set
WITHOUT_CLASSIFICATION	// ?M  | Time    | Last modification time for file1
WITHOUT_CLASSIFICATION	// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid
WITHOUT_CLASSIFICATION	// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 
WITHOUT_CLASSIFICATION	// ?p  | boolean | True if file1 exists and is a fifo
WITHOUT_CLASSIFICATION	// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller
WITHOUT_CLASSIFICATION	// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil
WITHOUT_CLASSIFICATION	// ?S  | boolean | True if file1 exists and is a socket
WITHOUT_CLASSIFICATION	// ?u  | boolean | True if file1 has the setuid bit set
WITHOUT_CLASSIFICATION	// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid
WITHOUT_CLASSIFICATION	// ?X  | boolean | True if file1 exists and is executable by the real uid/gid
WITHOUT_CLASSIFICATION	// ?z  | boolean | True if file1 exists and has a zero length
WITHOUT_CLASSIFICATION	// ?=  | boolean | True if the modification times of file1 and file2 are equal
WITHOUT_CLASSIFICATION	// ?<  | boolean | True if the modification time of file1 is prior to that of file2
WITHOUT_CLASSIFICATION	// ?>  | boolean | True if the modification time of file1 is after that of file2
WITHOUT_CLASSIFICATION	// ?-  | boolean | True if file1 and file2 are identical
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// Error info is per-thread
WITHOUT_CLASSIFICATION	// init errorInfo to nil
WITHOUT_CLASSIFICATION	// if we're already aborting, we can receive no further mail
WITHOUT_CLASSIFICATION	// If this thread is sleeping or stopped, wake it
WITHOUT_CLASSIFICATION	// new interrupt, to hopefully wake it out of any blocking IO
WITHOUT_CLASSIFICATION	// set to default thread group
WITHOUT_CLASSIFICATION	// set to default thread group
WITHOUT_CLASSIFICATION	// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately
WITHOUT_CLASSIFICATION	// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately
WITHOUT_CLASSIFICATION	// for Thread::start, which does not call the subclass's initialize
WITHOUT_CLASSIFICATION	// JRUBY-3568, inherit threadgroup or use default
WITHOUT_CLASSIFICATION	// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil
WITHOUT_CLASSIFICATION	// If the target thread is sleeping or stopped, wake it
WITHOUT_CLASSIFICATION	// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.
WITHOUT_CLASSIFICATION	// attempt to decriticalize all if we're the critical thread
WITHOUT_CLASSIFICATION	// not valid for "dead" state
WITHOUT_CLASSIFICATION	// If the killee thread is the same as the killer thread, just die
WITHOUT_CLASSIFICATION	// check for thread events, in case we've been woken up to die
WITHOUT_CLASSIFICATION	// check for thread events, in case we've been woken up to die
WITHOUT_CLASSIFICATION	// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...
WITHOUT_CLASSIFICATION	// can't select, just have to do a blocking call
WITHOUT_CLASSIFICATION	// compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	// Create Constants class
WITHOUT_CLASSIFICATION	// Create constants for open flags
WITHOUT_CLASSIFICATION	// Strip off the O_ prefix, so they become File::RDONLY, and so on
WITHOUT_CLASSIFICATION	// Create constants for flock
WITHOUT_CLASSIFICATION	// File::Constants module is included in IO.
WITHOUT_CLASSIFICATION	// Make sure any existing lock is released before we try and close the file
WITHOUT_CLASSIFICATION	// null channel always succeeds for all locking operations
WITHOUT_CLASSIFICATION	// Paths which end in "/" or "\\" must be stripped off.
WITHOUT_CLASSIFICATION	// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.
WITHOUT_CLASSIFICATION	// Return false here
WITHOUT_CLASSIFICATION	// Return false here
WITHOUT_CLASSIFICATION	// We're not actually a real file, so we can't flock
WITHOUT_CLASSIFICATION	// Should we do anything?
WITHOUT_CLASSIFICATION	/* File class methods */
WITHOUT_CLASSIFICATION	// MRI-compatible basename handling for windows drive letter paths
WITHOUT_CLASSIFICATION	// strip c: away from relative-pathed name
WITHOUT_CLASSIFICATION	// C:\ is returned unchanged
WITHOUT_CLASSIFICATION	// -1 no match; 0 it is dot file not extension
WITHOUT_CLASSIFICATION	// trim trailing slashes
WITHOUT_CLASSIFICATION	// Dot is not at beginning and not at end of filename. 
WITHOUT_CLASSIFICATION	// Handle ~user paths 
WITHOUT_CLASSIFICATION	// compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")
WITHOUT_CLASSIFICATION	// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.
WITHOUT_CLASSIFICATION	// No directory delimeter.  Rest of string is username
WITHOUT_CLASSIFICATION	// If there's a second argument, it's the path to which the first  // argument is relative.
WITHOUT_CLASSIFICATION	// Handle ~user paths.
WITHOUT_CLASSIFICATION	// If there's no second argument, simply use the working directory  // of the runtime.
WITHOUT_CLASSIFICATION	// Find out which string to check.
WITHOUT_CLASSIFICATION	// Single '~' as whole path to expand
WITHOUT_CLASSIFICATION	// Count number of extra slashes in the beginning of the string.
WITHOUT_CLASSIFICATION	// '~user/...' as path to expand
WITHOUT_CLASSIFICATION	// '~/...' as path to expand
WITHOUT_CLASSIFICATION	// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.
WITHOUT_CLASSIFICATION	// If there are N slashes, then we want N-1.
WITHOUT_CLASSIFICATION	// no canonical path yet or length is zero, and we have a / followed by a dot...
WITHOUT_CLASSIFICATION	// we don't have another slash after this, so replace /. with /
WITHOUT_CLASSIFICATION	// we do have another slash; omit both / and . (JRUBY-1606)
WITHOUT_CLASSIFICATION	// do nothing, we should not delete the drive letter
WITHOUT_CLASSIFICATION	/* rb: check_modifiable */
WITHOUT_CLASSIFICATION	/* rb: readable */
WITHOUT_CLASSIFICATION	// rename is successful
WITHOUT_CLASSIFICATION	// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 
WITHOUT_CLASSIFICATION	// try to rename one more time
WITHOUT_CLASSIFICATION	// Can we produce IOError which bypasses a close?
WITHOUT_CLASSIFICATION	// Fast path since JNA stat is about 10x slower than this
WITHOUT_CLASSIFICATION	// RubyContinuation
WITHOUT_CLASSIFICATION	/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */
WITHOUT_CLASSIFICATION	// 16 ?
WITHOUT_CLASSIFICATION	// generation count for O(1) clears
WITHOUT_CLASSIFICATION	// size + 1;
WITHOUT_CLASSIFICATION	// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen
WITHOUT_CLASSIFICATION	// ------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------
WITHOUT_CLASSIFICATION	// put implementation
WITHOUT_CLASSIFICATION	// get implementation
WITHOUT_CLASSIFICATION	// specialized for value
WITHOUT_CLASSIFICATION	// delete implementation
WITHOUT_CLASSIFICATION	// n.b. we need to recompute the hash in case the key object was modified
WITHOUT_CLASSIFICATION	/* ============================     * End of hash internals     * ============================     */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================     */
WITHOUT_CLASSIFICATION	// update the hash value
WITHOUT_CLASSIFICATION	// other hash does not contain key
WITHOUT_CLASSIFICATION	// rb_yield_values(2,...) equivalent
WITHOUT_CLASSIFICATION	// Satisfy java.util.Set interface (for Java integration)
WITHOUT_CLASSIFICATION	// remain where we are
WITHOUT_CLASSIFICATION	// We use file test since it is faster than a stat; also euid == uid in Java always
WITHOUT_CLASSIFICATION	// default: don't retain
WITHOUT_CLASSIFICATION	// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted
WITHOUT_CLASSIFICATION	// Not exposed by filetest, but so similiar in nature that it is stored here
WITHOUT_CLASSIFICATION	// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.
WITHOUT_CLASSIFICATION	// first try as directory
WITHOUT_CLASSIFICATION	// next as regular file
WITHOUT_CLASSIFICATION	// We only want IO objects with valid streams (better to error now). 
WITHOUT_CLASSIFICATION	// NIO-based
WITHOUT_CLASSIFICATION	// NIO-based
WITHOUT_CLASSIFICATION	// Stream-based
WITHOUT_CLASSIFICATION	// special constructor that accepts stream, not channel
WITHOUT_CLASSIFICATION	/*     * We use FILE versus IO to match T_FILE in MRI.     */
WITHOUT_CLASSIFICATION	// Constants for seek
WITHOUT_CLASSIFICATION	// confirm we're not reopening self's channel
WITHOUT_CLASSIFICATION	// check if we're a stdio IO, and ensure we're not badly mutilated
WITHOUT_CLASSIFICATION	// dup2 new fd into self to preserve fileno and references to it
WITHOUT_CLASSIFICATION	// re-register, since fileno points at something new now
WITHOUT_CLASSIFICATION	// re-register the descriptor
WITHOUT_CLASSIFICATION	// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler
WITHOUT_CLASSIFICATION	// re-register
WITHOUT_CLASSIFICATION	// A potentially previously close IO is being 'reopened'.
WITHOUT_CLASSIFICATION	/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */
WITHOUT_CLASSIFICATION	// loop until we see the nth separator char
WITHOUT_CLASSIFICATION	// if we hit EOF or reached limit then we're done
WITHOUT_CLASSIFICATION	// this is for a range check, near as I can tell
WITHOUT_CLASSIFICATION	// IO class methods.
WITHOUT_CLASSIFICATION	// use original modes
WITHOUT_CLASSIFICATION	// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).
WITHOUT_CLASSIFICATION	// redundant, done above as well
WITHOUT_CLASSIFICATION	// MRI behavior: swallow StandardErorrs
WITHOUT_CLASSIFICATION	// -1 == don't set permissions
WITHOUT_CLASSIFICATION	// isRetained=true
WITHOUT_CLASSIFICATION	// This appears to be some windows-only mode.  On a java platform this is a no-op
WITHOUT_CLASSIFICATION	// if not sync, we switch to write buffered mode
WITHOUT_CLASSIFICATION	/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */
WITHOUT_CLASSIFICATION	//Everything written
WITHOUT_CLASSIFICATION	//            return len - n;
WITHOUT_CLASSIFICATION	// Claims conversion is done via 'to_s' in docs.
WITHOUT_CLASSIFICATION	// Of course this isn't particularly useful.
WITHOUT_CLASSIFICATION	// Must be back on first line on rewind.
WITHOUT_CLASSIFICATION	// Register the new descriptor
WITHOUT_CLASSIFICATION	// cleanup, raising errors if any
WITHOUT_CLASSIFICATION	// hmmmm
WITHOUT_CLASSIFICATION	// I believe Ruby bails out with a "bug" if closing fails
WITHOUT_CLASSIFICATION	// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!
WITHOUT_CLASSIFICATION	// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.
WITHOUT_CLASSIFICATION	// Length to read
WITHOUT_CLASSIFICATION	// String/Buffer to read it into
WITHOUT_CLASSIFICATION	// cryptic for the uninitiated...
WITHOUT_CLASSIFICATION	// select until read is ready
WITHOUT_CLASSIFICATION	//        ByteList buffer = null;
WITHOUT_CLASSIFICATION	//            buffer = str.getByteList();
WITHOUT_CLASSIFICATION	// READ_CHECK from MRI io.c
WITHOUT_CLASSIFICATION	/* rb: writable */
WITHOUT_CLASSIFICATION	// READ_CHECK from MRI io.c
WITHOUT_CLASSIFICATION	// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...
WITHOUT_CLASSIFICATION	// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);
WITHOUT_CLASSIFICATION	// truncate buffer string to zero, if provided
WITHOUT_CLASSIFICATION	// TODO: READ_CHECK from MRI
WITHOUT_CLASSIFICATION	/* class methods for IO */
WITHOUT_CLASSIFICATION	// save blocking state
WITHOUT_CLASSIFICATION	// write
WITHOUT_CLASSIFICATION	// Java's select doesn't do anything about this, so we leave it be.
WITHOUT_CLASSIFICATION	// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes
WITHOUT_CLASSIFICATION	// FIXME: process options
WITHOUT_CLASSIFICATION	// Enebo: annotation processing forced me to do pangea method here...
WITHOUT_CLASSIFICATION	// NIO based pipe
WITHOUT_CLASSIFICATION	// not using remove(Object) here to avoid the equals() call
WITHOUT_CLASSIFICATION	// raise will also wake the thread from selection
WITHOUT_CLASSIFICATION	/* may need to handle ENC_CODERANGE_BROKEN */
WITHOUT_CLASSIFICATION	// TODO: rb_usascii_str_new2
WITHOUT_CLASSIFICATION	// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.
WITHOUT_CLASSIFICATION	// The class of this object
WITHOUT_CLASSIFICATION	// zeroed by jvm
WITHOUT_CLASSIFICATION	//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);
WITHOUT_CLASSIFICATION	// JRUBY-4113: callers should not call setTaint on immediate objects
WITHOUT_CLASSIFICATION	// rb_class_boot
WITHOUT_CLASSIFICATION	/* 6:tags 16:addr 1:eos */
WITHOUT_CLASSIFICATION	// 1.9 rb_check_to_integer
WITHOUT_CLASSIFICATION	// for interface impls
WITHOUT_CLASSIFICATION	// We're cloning ourselves, so we know the result should be a RubyObject
WITHOUT_CLASSIFICATION	// Methods of the Object class (rb_obj_*):
WITHOUT_CLASSIFICATION	// can't use -v and stdin
WITHOUT_CLASSIFICATION	// include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.
WITHOUT_CLASSIFICATION	// // COMMON VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// // INTERNAL VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE API METHODS //
WITHOUT_CLASSIFICATION	// Struct methods
WITHOUT_CLASSIFICATION	//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);
WITHOUT_CLASSIFICATION	// define access methods.
WITHOUT_CLASSIFICATION	// if we are storing a name as well, index is one too high for values
WITHOUT_CLASSIFICATION	// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.
WITHOUT_CLASSIFICATION	// For binding purposes on the newly created struct types
WITHOUT_CLASSIFICATION	// OBJ_INFECT        
WITHOUT_CLASSIFICATION	// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()
WITHOUT_CLASSIFICATION	// Execute iterateMethod again.
WITHOUT_CLASSIFICATION	/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */
WITHOUT_CLASSIFICATION	// Atomic ?
WITHOUT_CLASSIFICATION	// Atomic ?
WITHOUT_CLASSIFICATION	// MUST NOT be used across threads
WITHOUT_CLASSIFICATION	// superClass may be null.
WITHOUT_CLASSIFICATION	// Containing class...The parent of Object is null. Object should always be last in chain.
WITHOUT_CLASSIFICATION	// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.
WITHOUT_CLASSIFICATION	// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 
WITHOUT_CLASSIFICATION	// update superclass reference
WITHOUT_CLASSIFICATION	// Make sure the module we include does not already exist
WITHOUT_CLASSIFICATION	// MRI checks all types first:
WITHOUT_CLASSIFICATION	// we need full traces, use default (slow) populator
WITHOUT_CLASSIFICATION	// module/singleton methods are all defined public
WITHOUT_CLASSIFICATION	// See if module is in chain...Cannot match against itself so start at superClass.
WITHOUT_CLASSIFICATION	// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.
WITHOUT_CLASSIFICATION	// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway
WITHOUT_CLASSIFICATION	// update all hierarchies into which this module has been included
WITHOUT_CLASSIFICATION	// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.
WITHOUT_CLASSIFICATION	// need to skip IncludedModuleWrappers
WITHOUT_CLASSIFICATION	// superClazz = null;
WITHOUT_CLASSIFICATION	// reopen a java class
WITHOUT_CLASSIFICATION	// This method is intended only for defining new modules in Ruby code
WITHOUT_CLASSIFICATION	// reopen a java module
WITHOUT_CLASSIFICATION	//FIXME warning
WITHOUT_CLASSIFICATION	// FIXME warning
WITHOUT_CLASSIFICATION	// a normal block passed to define_method changes to do arity checking; make it a lambda
WITHOUT_CLASSIFICATION	// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope
WITHOUT_CLASSIFICATION	// just using required is broken...but no more broken than before zsuper refactoring
WITHOUT_CLASSIFICATION	// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// MRI error message says Class, even though Module is ok 
WITHOUT_CLASSIFICATION	// scan class hierarchy for module
WITHOUT_CLASSIFICATION	/* Module class methods */
WITHOUT_CLASSIFICATION	// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).
WITHOUT_CLASSIFICATION	// next in hierarchy is an included version of the module we're attempting, // so we skip including it
WITHOUT_CLASSIFICATION	// if we haven't encountered a real superclass, use the found module as the new inclusion point
WITHOUT_CLASSIFICATION	// build a list of all modules to consider for inclusion
WITHOUT_CLASSIFICATION	// if the insertion point is a class, update subclass lists
WITHOUT_CLASSIFICATION	// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships
WITHOUT_CLASSIFICATION	// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// CONSTANT RUBY METHODS //////////////// //
WITHOUT_CLASSIFICATION	// Note: includes part of fix for JRUBY-1339
WITHOUT_CLASSIFICATION	// ////////////////// CLASS VARIABLE API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// Wrong Parameter ?
WITHOUT_CLASSIFICATION	// not actually called anywhere (all known uses call the fast version)
WITHOUT_CLASSIFICATION	// Not that is loaded loop around to resolve it next pass
WITHOUT_CLASSIFICATION	// if adding a module under a constant name, set that module's basename to the constant name
WITHOUT_CLASSIFICATION	// Fix for JRUBY-1339 - search hierarchy for constant
WITHOUT_CLASSIFICATION	// returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	// removes and returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	// we can't rename a file while it's open in windows
WITHOUT_CLASSIFICATION	//reopen
WITHOUT_CLASSIFICATION	// ARGF methods
WITHOUT_CLASSIFICATION	//         data.currentFile.callMethod(context, "lineno=", line);
WITHOUT_CLASSIFICATION	// one optional, one required args
WITHOUT_CLASSIFICATION	// one optional and no required args
WITHOUT_CLASSIFICATION	// try to get errno value out of the class
WITHOUT_CLASSIFICATION	// we got a valid errno value
WITHOUT_CLASSIFICATION	// Ensure we're not running on GCJ, since it's not supported and leads to weird errors
WITHOUT_CLASSIFICATION	// print out as a nice Ruby backtrace
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// set thread context JRuby classloader here, for the main thread
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// no script to run, return success below
WITHOUT_CLASSIFICATION	// Skip /usr/bin/env if it's first
WITHOUT_CLASSIFICATION	// Skip any assignments if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	// Skip any commandline args if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	// ignore error
WITHOUT_CLASSIFICATION	// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //
WITHOUT_CLASSIFICATION	// odd
WITHOUT_CLASSIFICATION	// JRubyClient
WITHOUT_CLASSIFICATION	/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */
WITHOUT_CLASSIFICATION	// Make mantissa same sign so we only have one code path.
WITHOUT_CLASSIFICATION	// Increase value to hit lower range.
WITHOUT_CLASSIFICATION	/*     * r = x * 2 ** y     */
WITHOUT_CLASSIFICATION	/*  0! */
WITHOUT_CLASSIFICATION	/*  1! */
WITHOUT_CLASSIFICATION	/*  2! */
WITHOUT_CLASSIFICATION	/*  3! */
WITHOUT_CLASSIFICATION	/*  4! */
WITHOUT_CLASSIFICATION	/*  5! */
WITHOUT_CLASSIFICATION	/*  6! */
WITHOUT_CLASSIFICATION	/*  7! */
WITHOUT_CLASSIFICATION	/*  8! */
WITHOUT_CLASSIFICATION	/*  9! */
WITHOUT_CLASSIFICATION	/* 11! */
WITHOUT_CLASSIFICATION	/* 12! */
WITHOUT_CLASSIFICATION	/* 13! */
WITHOUT_CLASSIFICATION	/* 15! */
WITHOUT_CLASSIFICATION	/* 16! */
WITHOUT_CLASSIFICATION	/* 17! */
WITHOUT_CLASSIFICATION	/* 19! */
WITHOUT_CLASSIFICATION	/* 20! */
WITHOUT_CLASSIFICATION	/* 21! */
WITHOUT_CLASSIFICATION	// Static constants
WITHOUT_CLASSIFICATION	// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators
WITHOUT_CLASSIFICATION	// 2. MRI allows underscores anywhere
WITHOUT_CLASSIFICATION	// 3. MRI ignores the trailing junk
WITHOUT_CLASSIFICATION	// MRI behavior: -0 and +0 are two different things
WITHOUT_CLASSIFICATION	// Java and MRI definitions of modulo are different.
WITHOUT_CLASSIFICATION	// Java and MRI definitions of remainder are the same.
WITHOUT_CLASSIFICATION	// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:
WITHOUT_CLASSIFICATION	// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)
WITHOUT_CLASSIFICATION	// it doesn't handle special cases
WITHOUT_CLASSIFICATION	// TODO: why this: .setResult();
WITHOUT_CLASSIFICATION	// integer division
WITHOUT_CLASSIFICATION	// MRI behavior: "If digits is 0, the result is the same as the / operator."
WITHOUT_CLASSIFICATION	// rounding neccessary
WITHOUT_CLASSIFICATION	// rounding neccessary
WITHOUT_CLASSIFICATION	// Java and MRI definitions of divmod are different.        
WITHOUT_CLASSIFICATION	// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it
WITHOUT_CLASSIFICATION	// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.
WITHOUT_CLASSIFICATION	// ...round to that digit
WITHOUT_CLASSIFICATION	// ...and shift the result back to the left (multiply by 10**(abs(scale)))
WITHOUT_CLASSIFICATION	//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are
WITHOUT_CLASSIFICATION	// sign
WITHOUT_CLASSIFICATION	// significant digits and exponent
WITHOUT_CLASSIFICATION	// normalize the value
WITHOUT_CLASSIFICATION	// base
WITHOUT_CLASSIFICATION	// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.
WITHOUT_CLASSIFICATION	// just in case, add a bit of extra precision
WITHOUT_CLASSIFICATION	// eh?!
WITHOUT_CLASSIFICATION	// Note: #fix has only no-arg form, but truncate allows optional parameter.
WITHOUT_CLASSIFICATION	// General number and precision checking
WITHOUT_CLASSIFICATION	// the requested precision
WITHOUT_CLASSIFICATION	// Proc class
WITHOUT_CLASSIFICATION	//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")
WITHOUT_CLASSIFICATION	// even shift.. // ..floors to 62 or 63 bit BigInteger
WITHOUT_CLASSIFICATION	// 5 -> 2, -5 -> -3 need half a scale more..
WITHOUT_CLASSIFICATION	// ..where 100 -> 10 shifts the scale
WITHOUT_CLASSIFICATION	// Initial x - use double root - multiply by halfBack to unshift - set new scale
WITHOUT_CLASSIFICATION	// x0 ~ sqrt()
WITHOUT_CLASSIFICATION	// for prec 15 root x0 must surely be OK // return small prec roots without iterations
WITHOUT_CLASSIFICATION	// Initial v - the reciprocal // v0 = 1/(2*x)
WITHOUT_CLASSIFICATION	// Collect iteration precisions beforehand
WITHOUT_CLASSIFICATION	// assume nInit = 16 <= prec
WITHOUT_CLASSIFICATION	// The loop of "Square Root by Coupled Newton Iteration"
WITHOUT_CLASSIFICATION	// Increase precision - next iteration supplies n exact digits
WITHOUT_CLASSIFICATION	// Next x                                        // e = d - x^2
WITHOUT_CLASSIFICATION	// x += e*v     ~ sqrt()
WITHOUT_CLASSIFICATION	// root x is ready!
WITHOUT_CLASSIFICATION	// Next v                                        // g = 1 - 2*x*v
WITHOUT_CLASSIFICATION	// v += g*v     ~ 1/2/sqrt()
WITHOUT_CLASSIFICATION	// RubyBigdecimal
WITHOUT_CLASSIFICATION	// c: bind_eval
WITHOUT_CLASSIFICATION	/*  ================     *  Module Methods     *  ================      */
WITHOUT_CLASSIFICATION	// from CommandlineParser
WITHOUT_CLASSIFICATION	// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true
WITHOUT_CLASSIFICATION	// default ClassCache using jitMax as a soft upper bound
WITHOUT_CLASSIFICATION	// Until we get a little more solid on 1.9 support we will only run interpreted mode
WITHOUT_CLASSIFICATION	// Setting the loader needs to reset the class cache
WITHOUT_CLASSIFICATION	// try the normal property first
WITHOUT_CLASSIFICATION	// verify it if it's there
WITHOUT_CLASSIFICATION	// verify it if it's there
WITHOUT_CLASSIFICATION	// try loading from classloader resources
WITHOUT_CLASSIFICATION	// otherwise fall back on system temp location
WITHOUT_CLASSIFICATION	// We require the home directory to be absolute
WITHOUT_CLASSIFICATION	//consume the file name
WITHOUT_CLASSIFICATION	// Specify something that can't separate
WITHOUT_CLASSIFICATION	// try cwd first
WITHOUT_CLASSIFICATION	// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])
WITHOUT_CLASSIFICATION	// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "complex?")
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "exact?")
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "inexact?")
WITHOUT_CLASSIFICATION	// symbol string *must* be interned
WITHOUT_CLASSIFICATION	//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";
WITHOUT_CLASSIFICATION	/* Symbol class methods.     *      */
WITHOUT_CLASSIFICATION	// TODO: 1.9 rb_enc_symname_p
WITHOUT_CLASSIFICATION	// This is needed to unpack stuff
WITHOUT_CLASSIFICATION	// we already confirmed above that length > 0
WITHOUT_CLASSIFICATION	// *must* be power of 2!
WITHOUT_CLASSIFICATION	// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.
WITHOUT_CLASSIFICATION	//            assert internedName == internedName.intern() : internedName + " is not interned";
WITHOUT_CLASSIFICATION	// try lookup again under lock
WITHOUT_CLASSIFICATION	// try lookup again under lock
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// backwards-compatibility, but threadsafe now
WITHOUT_CLASSIFICATION	//  Single node on list
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// Check the length every iteration, since // the block can modify this string.
WITHOUT_CLASSIFICATION	// we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	// not so backwards-compatible here, but no one should have been // calling this anyway.
WITHOUT_CLASSIFICATION	// Profile
WITHOUT_CLASSIFICATION	//static private final String TRANSLIT = "//translit";
WITHOUT_CLASSIFICATION	// treat start and end as start...end for end >= 0, start..end for end < 0
WITHOUT_CLASSIFICATION	// invalid ranges result in an empty string
WITHOUT_CLASSIFICATION	// Methods of the Nil Class (nil_*):
WITHOUT_CLASSIFICATION	// Has read/write been closed or is it still open for business
WITHOUT_CLASSIFICATION	// Support IO modes that this object was opened with
WITHOUT_CLASSIFICATION	// must let original string know we're modifying, so shared buffers aren't damaged
WITHOUT_CLASSIFICATION	// reset the state
WITHOUT_CLASSIFICATION	// Tainting here if we ever want it. (secure 4)
WITHOUT_CLASSIFICATION	// rb_match_busy
WITHOUT_CLASSIFICATION	//str is frozen
WITHOUT_CLASSIFICATION	// MRI also does a pointer comparison here
WITHOUT_CLASSIFICATION	// JRubyServer
WITHOUT_CLASSIFICATION	// Class.allocate object is not allocatable before it is initialized
WITHOUT_CLASSIFICATION	// boot the Object class 
WITHOUT_CLASSIFICATION	// Methods of the Object class (rb_obj_*):
WITHOUT_CLASSIFICATION	// update superclass reference
WITHOUT_CLASSIFICATION	// undo check
WITHOUT_CLASSIFICATION	// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));
WITHOUT_CLASSIFICATION	// boot the Module and Class classes
WITHOUT_CLASSIFICATION	// this is the only case it might be null here (in MetaClass construction)
WITHOUT_CLASSIFICATION	// use parent's marshal
WITHOUT_CLASSIFICATION	// use parent's marshal
WITHOUT_CLASSIFICATION	// could be pulled down to RubyClass in future // rb_class_boot
WITHOUT_CLASSIFICATION	// remove us from old superclass's child classes
WITHOUT_CLASSIFICATION	// add us to new superclass's child classes
WITHOUT_CLASSIFICATION	// update all subclasses
WITHOUT_CLASSIFICATION	// fields to hold Ruby and RubyClass references
WITHOUT_CLASSIFICATION	// static initializing method
WITHOUT_CLASSIFICATION	// standard constructor that accepts Ruby, RubyClass
WITHOUT_CLASSIFICATION	// no-arg constructor using static references to Ruby and RubyClass
WITHOUT_CLASSIFICATION	// non-signature signature with just IRubyObject
WITHOUT_CLASSIFICATION	// indices for temp values
WITHOUT_CLASSIFICATION	// self // method name
WITHOUT_CLASSIFICATION	// the default allocator
WITHOUT_CLASSIFICATION	// Equivalent of T_DATA
WITHOUT_CLASSIFICATION	// do nothing, leave empty
WITHOUT_CLASSIFICATION	// Double.MAX_EXPONENT since Java 1.6
WITHOUT_CLASSIFICATION	/*  ================     *  Singleton Methods     *  ================      */
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// Make sure all arguments are modules before calling the callbacks
WITHOUT_CLASSIFICATION	// MRI extends in order from last to first
WITHOUT_CLASSIFICATION	// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.
WITHOUT_CLASSIFICATION	// write out ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	// rest in ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	// 0x3fff_ffff // -0x4000_0000
WITHOUT_CLASSIFICATION	// a gotcha
WITHOUT_CLASSIFICATION	// Java / and % are not the same as ruby
WITHOUT_CLASSIFICATION	// A gotcha for Long.MIN_VALUE: value = -value
WITHOUT_CLASSIFICATION	// Piece of mri rb_to_id
WITHOUT_CLASSIFICATION	// Java Doubles are 64 bit long:            
WITHOUT_CLASSIFICATION	// Double.MAX_EXPONENT since Java 1.6            
WITHOUT_CLASSIFICATION	// don't override Numeric#div !
WITHOUT_CLASSIFICATION	// Modelled after c ruby implementation (java /,% not same as ruby)
WITHOUT_CLASSIFICATION	// MRI behavior:
WITHOUT_CLASSIFICATION	// Numeric.equal            
WITHOUT_CLASSIFICATION	// provider is not available
WITHOUT_CLASSIFICATION	// bouncy castle doesn't support algorithm
WITHOUT_CLASSIFICATION	// fall back to system JCA providers
WITHOUT_CLASSIFICATION	// RubyDigest
WITHOUT_CLASSIFICATION	// ENEBO: Can these be fast?
WITHOUT_CLASSIFICATION	// synchronize on the RubyThread for threadgroup updates
WITHOUT_CLASSIFICATION	// we only add live threads
WITHOUT_CLASSIFICATION	// use same ClassIndex as metaclass, since we're technically still of that type
WITHOUT_CLASSIFICATION	// handle everything after -- as arguments to the jruby process
WITHOUT_CLASSIFICATION	// JRubyService
WITHOUT_CLASSIFICATION	// while
WITHOUT_CLASSIFICATION	/* \OOO */
WITHOUT_CLASSIFICATION	// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.
WITHOUT_CLASSIFICATION	// mask off "once" flag
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// internal usage (Complex/Rational)
WITHOUT_CLASSIFICATION	// silent ?
WITHOUT_CLASSIFICATION	/* \xHH */
WITHOUT_CLASSIFICATION	/* \M-X, \M-\C-X, \M-\cX */
WITHOUT_CLASSIFICATION	/* \C-X, \C-\M-X */
WITHOUT_CLASSIFICATION	/* \cX, \c\M-X */
WITHOUT_CLASSIFICATION	/* \O, \OO, \OOO or backref */
WITHOUT_CLASSIFICATION	// MBCLEN_NEEDMORE_P
WITHOUT_CLASSIFICATION	// MBCLEN_INVALID_P
WITHOUT_CLASSIFICATION	// Unicode is can be only 21 bits long, int is enough
WITHOUT_CLASSIFICATION	/* Surrogates */
WITHOUT_CLASSIFICATION	// do not load the class if not used
WITHOUT_CLASSIFICATION	/* \0, \0O, \0OO */
WITHOUT_CLASSIFICATION	/* \xHH */
WITHOUT_CLASSIFICATION	/* \C-X, \C-\M-X */
WITHOUT_CLASSIFICATION	/* \M-X, \M-\C-X, \M-\cX */
WITHOUT_CLASSIFICATION	/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */
WITHOUT_CLASSIFICATION	/* \\uHHHH */
WITHOUT_CLASSIFICATION	/* \p{Hiragana} */
WITHOUT_CLASSIFICATION	// inner switch
WITHOUT_CLASSIFICATION	// newInstance here
WITHOUT_CLASSIFICATION	// rb_reg_raise
WITHOUT_CLASSIFICATION	// rb_reg_desc
WITHOUT_CLASSIFICATION	// rb_enc_reg_raise
WITHOUT_CLASSIFICATION	// rb_enc_reg_error_desc
WITHOUT_CLASSIFICATION	// rb_reg_initialize_str
WITHOUT_CLASSIFICATION	// rb_reg_initialize
WITHOUT_CLASSIFICATION	// JRUBY-3625: delay setting backref until the MatchData is completely initialized
WITHOUT_CLASSIFICATION	// rb_reg_expr_str
WITHOUT_CLASSIFICATION	// option_to_str
WITHOUT_CLASSIFICATION	// Don't initialize with class // Don't put in object space and don't taint
WITHOUT_CLASSIFICATION	// args should be before block
WITHOUT_CLASSIFICATION	// args should be at end
WITHOUT_CLASSIFICATION	// minus one more for IRubyObject[]
WITHOUT_CLASSIFICATION	// minus one more for IRubyObject[]
WITHOUT_CLASSIFICATION	// skip anything not related to jruby
WITHOUT_CLASSIFICATION	// start a new populator
WITHOUT_CLASSIFICATION	// check for frame field reads or writes
WITHOUT_CLASSIFICATION	// add all names for this annotation
WITHOUT_CLASSIFICATION	// no annotated methods found, skip
WITHOUT_CLASSIFICATION	// write out a static initializer for frame names, so it only fires once
WITHOUT_CLASSIFICATION	// single method, use normal logic
WITHOUT_CLASSIFICATION	// multimethod, new logic
WITHOUT_CLASSIFICATION	// declared type returns the qualified name without $ for inner classes!!!
WITHOUT_CLASSIFICATION	// inner class, use $ to delimit
WITHOUT_CLASSIFICATION	//                        RubyModule singletonClass = module.getSingletonClass();
WITHOUT_CLASSIFICATION	//                }
WITHOUT_CLASSIFICATION	// fallback on non-pregenerated logic
WITHOUT_CLASSIFICATION	// refresh call adapter, since it matters if this is iter-based or not
WITHOUT_CLASSIFICATION	// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// colon3
WITHOUT_CLASSIFICATION	// Colon3
WITHOUT_CLASSIFICATION	// array created for rescue args doesn't need to be in ObjectSpace.
WITHOUT_CLASSIFICATION	// For b.foo
WITHOUT_CLASSIFICATION	// instance config for the script run
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	//RubyModule module = context.getRubyClass();
WITHOUT_CLASSIFICATION	// For 'b.foo'
WITHOUT_CLASSIFICATION	// We define an actual list to get around bug in java integration (1387115)
WITHOUT_CLASSIFICATION	// something in here is used to build up ruby stack trace...
WITHOUT_CLASSIFICATION	// Ruby Grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	// Ruby Grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	// do nothing, allow loop to retry
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// never visited, should be fine
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// If we have more than one argument, then make sure the array is not ObjectSpaced.
WITHOUT_CLASSIFICATION	// Only in ruby 1.9 methods
WITHOUT_CLASSIFICATION	// Bind 'normal' parameter values to the local scope for this method.
WITHOUT_CLASSIFICATION	// no arg grouping, just use bulk assignment methods
WITHOUT_CLASSIFICATION	// optArgs and restArgs require more work, so isolate them and ArrayList creation here
WITHOUT_CLASSIFICATION	//        arity.checkArity(runtime, argsLength);
WITHOUT_CLASSIFICATION	// no more values to stick in rest arg
WITHOUT_CLASSIFICATION	// set argv from main's args
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";
WITHOUT_CLASSIFICATION	// assign given optional arguments to their variables
WITHOUT_CLASSIFICATION	// in-frame EvalState should already have receiver set as self, continue to use it
WITHOUT_CLASSIFICATION	// assign the default values, adding to the end of allArgs
WITHOUT_CLASSIFICATION	// Make sure the appropriate scope has proper size. See JRUBY-2046.
WITHOUT_CLASSIFICATION	// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening
WITHOUT_CLASSIFICATION	// This should never happen past parse, but just bulletproof this just in case
WITHOUT_CLASSIFICATION	// Make a nil node if no body.  Notice this is not part of AST.
WITHOUT_CLASSIFICATION	// 'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	// now used as an interpreter event
WITHOUT_CLASSIFICATION	// never visited, should be ok
WITHOUT_CLASSIFICATION	// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil
WITHOUT_CLASSIFICATION	// JRUBY-530 until case
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode
WITHOUT_CLASSIFICATION	//assert !(value instanceof RubyArray)  : "Not an array";
WITHOUT_CLASSIFICATION	// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// We could probably also detect if LHS value came out of cache and avoid some of this
WITHOUT_CLASSIFICATION	//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";
WITHOUT_CLASSIFICATION	// add in reverse order
WITHOUT_CLASSIFICATION	// in order to make pragma's noops we set location to a special value
WITHOUT_CLASSIFICATION	// ignore compiler pragmas
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// Make a nil node if no body.  Notice this is not part of AST.
WITHOUT_CLASSIFICATION	// now used as an interpreter event
WITHOUT_CLASSIFICATION	// No actual test, so do 'when' if when expression is not nil
WITHOUT_CLASSIFICATION	// save entering the try if there's nothing to ensure
WITHOUT_CLASSIFICATION	// For 'foo'
WITHOUT_CLASSIFICATION	// For 'foo'
WITHOUT_CLASSIFICATION	// admittedly inefficient
WITHOUT_CLASSIFICATION	// JRUBY-530, while case
WITHOUT_CLASSIFICATION	// What static scoping relationship exists when it comes into being.
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// just rethrow
WITHOUT_CLASSIFICATION	// just rethrow
WITHOUT_CLASSIFICATION	// clear exception when handled or retried
WITHOUT_CLASSIFICATION	// clear exception when handled or retried
WITHOUT_CLASSIFICATION	// no takers; bubble up
WITHOUT_CLASSIFICATION	// no takers; bubble up
WITHOUT_CLASSIFICATION	// Execute rescue block
WITHOUT_CLASSIFICATION	// If no exception is thrown execute else block
WITHOUT_CLASSIFICATION	// index of variable for this arg
WITHOUT_CLASSIFICATION	// only a marker interface
WITHOUT_CLASSIFICATION	// don't attempt to coerce to array, just wrap and return
WITHOUT_CLASSIFICATION	// pragmas
WITHOUT_CLASSIFICATION	// The method also needs a scope, do both
WITHOUT_CLASSIFICATION	// We're doing normal framed compilation or the method needs a frame
WITHOUT_CLASSIFICATION	// The method doesn't need a scope or static scope; frame only
WITHOUT_CLASSIFICATION	// The method doesn't need a scope, but has static scope needs; use a dummy scope
WITHOUT_CLASSIFICATION	// Proc.new needs the caller's block to instantiate a proc
WITHOUT_CLASSIFICATION	// check for Proc.new, an especially magic method
WITHOUT_CLASSIFICATION	// long, slow way causes disabling
WITHOUT_CLASSIFICATION	// ok, we have fast paths
WITHOUT_CLASSIFICATION	// ok, we have fast paths
WITHOUT_CLASSIFICATION	// long, slow way causes disabling for defined
WITHOUT_CLASSIFICATION	// we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	// Because Regexp#=== sets backref, we have to make this backref-aware
WITHOUT_CLASSIFICATION	// encountered a node we don't recognize, set everything to true to disable optz
WITHOUT_CLASSIFICATION	// only arrays that are "lightweight" are being used as args arrays
WITHOUT_CLASSIFICATION	// otherwise, it's a literal array
WITHOUT_CLASSIFICATION	// use array as-is, it's a literal array
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// compile first node as non-expr and then second node
WITHOUT_CLASSIFICATION	// last node, either !instanceof WhenNode or null, is the else
WITHOUT_CLASSIFICATION	// compile first node only
WITHOUT_CLASSIFICATION	// splatted when, can't do it yet
WITHOUT_CLASSIFICATION	// if __send__ with a literal symbol, compile it as a direct fcall
WITHOUT_CLASSIFICATION	// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.
WITHOUT_CLASSIFICATION	// aggregate when nodes into a list, unfortunately, this is no
WITHOUT_CLASSIFICATION	// one arg but it's an array, treat it as a proper array
WITHOUT_CLASSIFICATION	// can't do it
WITHOUT_CLASSIFICATION	// otherwise, use normal args compiler
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// these are all simple cases that don't require the heavier defined logic
WITHOUT_CLASSIFICATION	//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]
WITHOUT_CLASSIFICATION	//[]
WITHOUT_CLASSIFICATION	//[]
WITHOUT_CLASSIFICATION	//          context.swapValues(); //context.consumeCurrentValue();
WITHOUT_CLASSIFICATION	//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]
WITHOUT_CLASSIFICATION	//[RubyClass]
WITHOUT_CLASSIFICATION	//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]
WITHOUT_CLASSIFICATION	// if root of method is rescue, compile as a light rescue
WITHOUT_CLASSIFICATION	// inspect body and args
WITHOUT_CLASSIFICATION	// inspect body and args
WITHOUT_CLASSIFICATION	// check args first, since body inspection can depend on args
WITHOUT_CLASSIFICATION	// if root of method is rescue, compile as light rescue
WITHOUT_CLASSIFICATION	// invoke run with threadcontext and topself
WITHOUT_CLASSIFICATION	//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]
WITHOUT_CLASSIFICATION	//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]
WITHOUT_CLASSIFICATION	//[RubyClass] //[]
WITHOUT_CLASSIFICATION	//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]
WITHOUT_CLASSIFICATION	//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// force heap-scope behavior, since it uses parent's scope
WITHOUT_CLASSIFICATION	// always false or nil
WITHOUT_CLASSIFICATION	// optimizations if we know ahead of time it will always be true or false
WITHOUT_CLASSIFICATION	// normal
WITHOUT_CLASSIFICATION	// compile condition as non-expr and just compile "then" body
WITHOUT_CLASSIFICATION	// need the array, use unoptz version
WITHOUT_CLASSIFICATION	// just push nil for pragmas
WITHOUT_CLASSIFICATION	// "assignment" means the value is already on the stack
WITHOUT_CLASSIFICATION	// compile first node only
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// eval new value, call operator on old value, and assign
WITHOUT_CLASSIFICATION	// try optz version
WITHOUT_CLASSIFICATION	// sizes must match
WITHOUT_CLASSIFICATION	// expect value to be an array of nodes
WITHOUT_CLASSIFICATION	// normal items at the "head" of the masgn
WITHOUT_CLASSIFICATION	// head must not be null and there must be no "args" (like *arg)
WITHOUT_CLASSIFICATION	// "head" must have no non-trivial assigns (array groupings, basically)
WITHOUT_CLASSIFICATION	// only supports simple parallel assignment of up to 10 values to the same number of assignees
WITHOUT_CLASSIFICATION	// perform assignment for the next node
WITHOUT_CLASSIFICATION	// if we get here, no optz cases work; fall back on unoptz.
WITHOUT_CLASSIFICATION	//RedoNode redoNode = (RedoNode)node;
WITHOUT_CLASSIFICATION	// done processing args
WITHOUT_CLASSIFICATION	// all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	// assign to appropriate variable
WITHOUT_CLASSIFICATION	// if arity 1, just compile the one element to save us the array cost
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// compile into array
WITHOUT_CLASSIFICATION	// compile first node as non-expr and compile second node
WITHOUT_CLASSIFICATION	// check if it's an immediate, and don't outline
WITHOUT_CLASSIFICATION	// condition is always true, just compile it and not body
WITHOUT_CLASSIFICATION	// force static scope to claim restarg at 0, so it only implements the [] version of __file__
WITHOUT_CLASSIFICATION	// create method for toplevel of script
WITHOUT_CLASSIFICATION	// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long
WITHOUT_CLASSIFICATION	// send it along as arity-specific, we don't need the array
WITHOUT_CLASSIFICATION	// single-statement body, just compile it
WITHOUT_CLASSIFICATION	// leave as a normal array
WITHOUT_CLASSIFICATION	// This method has JITed already or has been abandoned. Bail out.
WITHOUT_CLASSIFICATION	// The cache is full. Abandon JIT for this method and bail out.
WITHOUT_CLASSIFICATION	// check args first, since body inspection can depend on args
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// need the array, use unoptz version
WITHOUT_CLASSIFICATION	// try optz version
WITHOUT_CLASSIFICATION	// expect value to be an array of nodes
WITHOUT_CLASSIFICATION	// head must not be null and there must be no "args" (like *arg)
WITHOUT_CLASSIFICATION	// sizes must match
WITHOUT_CLASSIFICATION	// "head" must have no non-trivial assigns (array groupings, basically)
WITHOUT_CLASSIFICATION	// if we get here, no optz cases work; fall back on unoptz.
WITHOUT_CLASSIFICATION	// perform assignment for the next node
WITHOUT_CLASSIFICATION	// done processing args
WITHOUT_CLASSIFICATION	// Check if the method has been explicitly excluded
WITHOUT_CLASSIFICATION	// class could not be found nor generated; give up on JIT and bail out
WITHOUT_CLASSIFICATION	// successfully got back a jitted method
WITHOUT_CLASSIFICATION	// finally, grab the script
WITHOUT_CLASSIFICATION	// logEvery n methods based on configuration
WITHOUT_CLASSIFICATION	// Time the compilation
WITHOUT_CLASSIFICATION	// we have a body, do a full-on method
WITHOUT_CLASSIFICATION	// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop
WITHOUT_CLASSIFICATION	// if we haven't already decided on a do-nothing call
WITHOUT_CLASSIFICATION	// only supports simple parallel assignment of up to 4 values to the same number of assignees
WITHOUT_CLASSIFICATION	// normal items at the front or back of the masgn
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// end of variable scope
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// Define the annotation for the method
WITHOUT_CLASSIFICATION	// check arity in the variable-arity version
WITHOUT_CLASSIFICATION	// load block from [] version of method
WITHOUT_CLASSIFICATION	// normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// value is already on stack, save it for later
WITHOUT_CLASSIFICATION	// receiver first, so we know which call site to use
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*arg2*/
WITHOUT_CLASSIFICATION	/*args*/
WITHOUT_CLASSIFICATION	// receiver first, so we know which call site to use
WITHOUT_CLASSIFICATION	// select appropriate call site // dup receiver // load self
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*args*/
WITHOUT_CLASSIFICATION	// get call site and thread context
WITHOUT_CLASSIFICATION	// get call site and thread context
WITHOUT_CLASSIFICATION	// evaluate and save receiver and args
WITHOUT_CLASSIFICATION	// evaluate and save receiver and args
WITHOUT_CLASSIFICATION	// invoke
WITHOUT_CLASSIFICATION	// invoke
WITHOUT_CLASSIFICATION	// check if it's true, ending if so
WITHOUT_CLASSIFICATION	// not true, eval value and assign
WITHOUT_CLASSIFICATION	// not true, eval value and assign
WITHOUT_CLASSIFICATION	// thread context, receiver and original args
WITHOUT_CLASSIFICATION	// thread context, receiver and original args
WITHOUT_CLASSIFICATION	// eval value for assignment
WITHOUT_CLASSIFICATION	// call site
WITHOUT_CLASSIFICATION	// call site
WITHOUT_CLASSIFICATION	// depending on size of original args, call appropriate utility method
WITHOUT_CLASSIFICATION	// check if it's true, ending if not
WITHOUT_CLASSIFICATION	// eval value and save it
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// depending on size of original args, call appropriate utility method
WITHOUT_CLASSIFICATION	// receiver, args, result, value
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// super uses current block if none given
WITHOUT_CLASSIFICATION	// args
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// no args, no block
WITHOUT_CLASSIFICATION	// no args, with block
WITHOUT_CLASSIFICATION	// with args, no block
WITHOUT_CLASSIFICATION	// with args, with block
WITHOUT_CLASSIFICATION	// adapter, tc, recv, args{0,1}, block{0,1}]
WITHOUT_CLASSIFICATION	// pop extra attr value
WITHOUT_CLASSIFICATION	// pop extra attr value
WITHOUT_CLASSIFICATION	// arg and receiver already present on the stack
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// args
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// no args, no block
WITHOUT_CLASSIFICATION	// no args, with block
WITHOUT_CLASSIFICATION	// with args, no block
WITHOUT_CLASSIFICATION	// with args, with block
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	// retrieve scope from scopes array
WITHOUT_CLASSIFICATION	// use numbered access method
WITHOUT_CLASSIFICATION	// retrieve call site from sites array
WITHOUT_CLASSIFICATION	// add name to call site list
WITHOUT_CLASSIFICATION	// module is on top of stack
WITHOUT_CLASSIFICATION	// build scope names string
WITHOUT_CLASSIFICATION	// build descriptor string
WITHOUT_CLASSIFICATION	// build descriptor string
WITHOUT_CLASSIFICATION	// generate call sites initialization code
WITHOUT_CLASSIFICATION	// generate symbols initialization code
WITHOUT_CLASSIFICATION	// generate fixnums initialization code
WITHOUT_CLASSIFICATION	// generate constants initialization code
WITHOUT_CLASSIFICATION	// generate regexps initialization code
WITHOUT_CLASSIFICATION	// generate regexps initialization code
WITHOUT_CLASSIFICATION	// generate variable readers initialization code
WITHOUT_CLASSIFICATION	// generate variable writers initialization code
WITHOUT_CLASSIFICATION	// generate block bodies initialization code
WITHOUT_CLASSIFICATION	// generate block bodies initialization code
WITHOUT_CLASSIFICATION	// generate bytelists initialization code
WITHOUT_CLASSIFICATION	// generate method cache initialization code
WITHOUT_CLASSIFICATION	// adapter, tc, recv, args{0,1}, block{0,1}]
WITHOUT_CLASSIFICATION	// use IRubyObject[]
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// No point in updating number if last number was same value.
WITHOUT_CLASSIFICATION	// load Object under value
WITHOUT_CLASSIFICATION	// put under object array already present
WITHOUT_CLASSIFICATION	// if element count is less than 6, use helper methods
WITHOUT_CLASSIFICATION	// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements
WITHOUT_CLASSIFICATION	// if we have a specific-arity helper to construct an array for us, use that
WITHOUT_CLASSIFICATION	// if we have a specific-arity helper to construct an array for us, use that
WITHOUT_CLASSIFICATION	// brute force construction inline
WITHOUT_CLASSIFICATION	// brute force construction inline
WITHOUT_CLASSIFICATION	// use specific-arity for as much as possible
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	// dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	// clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	// check the condition
WITHOUT_CLASSIFICATION	// NE == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	// skip catch block
WITHOUT_CLASSIFICATION	// catch logic for flow-control: next, break
WITHOUT_CLASSIFICATION	// next jump
WITHOUT_CLASSIFICATION	// exceptionNext target is for a next that doesn't push a new value, like this one
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND
WITHOUT_CLASSIFICATION	// check the condition
WITHOUT_CLASSIFICATION	// NE == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	// synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	// break jump
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	//[reg]
WITHOUT_CLASSIFICATION	// for regular expressions with the /o flag
WITHOUT_CLASSIFICATION	// inside a loop, jump to body
WITHOUT_CLASSIFICATION	// inside a loop, jump to conditional
WITHOUT_CLASSIFICATION	// synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	// store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	// store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	// if more than 4 vars, get values array too
WITHOUT_CLASSIFICATION	// retry handling in the rescue block
WITHOUT_CLASSIFICATION	// any exceptions raised must continue to be raised, skipping $! restoration
WITHOUT_CLASSIFICATION	// and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	// restore the original exception
WITHOUT_CLASSIFICATION	// Handle Flow exceptions, just propagating them
WITHOUT_CLASSIFICATION	// rethrow to outer flow catcher
WITHOUT_CLASSIFICATION	// Handle Ruby exceptions (RaiseException)
WITHOUT_CLASSIFICATION	// inside a loop, break out of it // go to end of loop, leaving break value on stack
WITHOUT_CLASSIFICATION	// false // zero
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	// restore the original exception
WITHOUT_CLASSIFICATION	// retry handling in the rescue blocks
WITHOUT_CLASSIFICATION	// push false
WITHOUT_CLASSIFICATION	//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));
WITHOUT_CLASSIFICATION	//method.ifnonnull(trueLabel);
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)   //[C]
WITHOUT_CLASSIFICATION	//[C, C] //[C, C, String] //[C, null|C]
WITHOUT_CLASSIFICATION	//[C]
WITHOUT_CLASSIFICATION	// push true
WITHOUT_CLASSIFICATION	// EQ != 0 (i.e. true)
WITHOUT_CLASSIFICATION	//[?, ?] //[?, boolean]
WITHOUT_CLASSIFICATION	//[RubyModule] //[RubyModule, String]
WITHOUT_CLASSIFICATION	//[boolean]
WITHOUT_CLASSIFICATION	// no receiver for singleton class
WITHOUT_CLASSIFICATION	// but there's a superclass passed in, use it
WITHOUT_CLASSIFICATION	// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived
WITHOUT_CLASSIFICATION	// set self to the class
WITHOUT_CLASSIFICATION	// CLASS BODY
WITHOUT_CLASSIFICATION	// static scope
WITHOUT_CLASSIFICATION	// Here starts the logic for the class definition
WITHOUT_CLASSIFICATION	// new instance to invoke run against
WITHOUT_CLASSIFICATION	// CLASS BODY
WITHOUT_CLASSIFICATION	// static scope
WITHOUT_CLASSIFICATION	// Here starts the logic for the class definition
WITHOUT_CLASSIFICATION	// finally with exception
WITHOUT_CLASSIFICATION	// prepare to call class definition method
WITHOUT_CLASSIFICATION	// otherwise, there's a receiver, so we pass that in directly for the sclass logic
WITHOUT_CLASSIFICATION	// original exception is on stack
WITHOUT_CLASSIFICATION	// RaiseException is on stack, get RubyException out
WITHOUT_CLASSIFICATION	// updating position for same line; skip
WITHOUT_CLASSIFICATION	// callbacks to fill in method body
WITHOUT_CLASSIFICATION	// prepare to call "def" utility method to handle def logic
WITHOUT_CLASSIFICATION	// script object
WITHOUT_CLASSIFICATION	// arities
WITHOUT_CLASSIFICATION	// TODO assuming case is a fixnum
WITHOUT_CLASSIFICATION	// we have an input case, prepare branching logic
WITHOUT_CLASSIFICATION	// we have optimized switch cases, build a lookupswitch
WITHOUT_CLASSIFICATION	// checkcast the value; if match, fast path; otherwise proceed to slow logic
WITHOUT_CLASSIFICATION	// expression-based tests + bodies
WITHOUT_CLASSIFICATION	// normal case, create a new label
WITHOUT_CLASSIFICATION	// last conditional case, use defaultCase
WITHOUT_CLASSIFICATION	// do nothing; arity check is done before call
WITHOUT_CLASSIFICATION	// just confirm minimum args provided
WITHOUT_CLASSIFICATION	// just confirm args length == required
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// prepare labels for opt logic
WITHOUT_CLASSIFICATION	// prepare labels for opt logic
WITHOUT_CLASSIFICATION	// next, iterate over all optional args, until no more arguments
WITHOUT_CLASSIFICATION	// next, iterate over all optional args, until no more arguments
WITHOUT_CLASSIFICATION	// now logic for each optional value
WITHOUT_CLASSIFICATION	// otherwise no items left available, use the code for default
WITHOUT_CLASSIFICATION	// pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	// if there's args left and we want them, assign to rest arg
WITHOUT_CLASSIFICATION	// assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	// block argument assignment, if there's a block arg
WITHOUT_CLASSIFICATION	// first, iterate over all pre args
WITHOUT_CLASSIFICATION	// then optional args
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// now logic for each optional value
WITHOUT_CLASSIFICATION	// otherwise no items left available, use the code for default
WITHOUT_CLASSIFICATION	// pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	// assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	// block argument assignment, if there's a block arg
WITHOUT_CLASSIFICATION	// if rest args, excluding post args
WITHOUT_CLASSIFICATION	// finally, post args
WITHOUT_CLASSIFICATION	// not an expression, don't want result; pop it
WITHOUT_CLASSIFICATION	// not an expression, don't want result; pop it
WITHOUT_CLASSIFICATION	// unwrap scopes to appropriate depth
WITHOUT_CLASSIFICATION	// fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// declare locals for Java debugging purposes
WITHOUT_CLASSIFICATION	// class bodies prepare their own dynamic scope, so let it do that
WITHOUT_CLASSIFICATION	// store the local vars in a local variable
WITHOUT_CLASSIFICATION	// load args[0] which will be the IRubyObject representing block args
WITHOUT_CLASSIFICATION	// return in a class body raises error
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// end of variable scope
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// load block from [] version of method
WITHOUT_CLASSIFICATION	// normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	// declare locals for Java debugging purposes
WITHOUT_CLASSIFICATION	// class bodies prepare their own dynamic scope, so let it do that
WITHOUT_CLASSIFICATION	// load args[0] which will be the IRubyObject representing block args
WITHOUT_CLASSIFICATION	// we force argParamCount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// store the local vars in a local variable if there are any
WITHOUT_CLASSIFICATION	// if more than 4 locals, get and populate the locals array too
WITHOUT_CLASSIFICATION	// fill local vars with nil, to avoid checking every access.
WITHOUT_CLASSIFICATION	// default for starting tempVariableIndex is ok
WITHOUT_CLASSIFICATION	// store the local vars in a local variable for preparing the class (using previous scope)
WITHOUT_CLASSIFICATION	// store the new local vars in a local variable
WITHOUT_CLASSIFICATION	// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]
WITHOUT_CLASSIFICATION	// no variable initialization, because we're reusing parent's scope (flat)
WITHOUT_CLASSIFICATION	// for specific-index cases, clean up non-expression values
WITHOUT_CLASSIFICATION	// set up a local Ruby variable
WITHOUT_CLASSIFICATION	// if that succeeds, the others should as well
WITHOUT_CLASSIFICATION	// verify the class
WITHOUT_CLASSIFICATION	// create dir if necessary
WITHOUT_CLASSIFICATION	// Create the class with the appropriate class name and source file
WITHOUT_CLASSIFICATION	// add setPosition impl, which stores filename as constant to speed updates
WITHOUT_CLASSIFICATION	// thread context
WITHOUT_CLASSIFICATION	// line number
WITHOUT_CLASSIFICATION	// invoke __file__ with threadcontext, self, args (null), and block (null)
WITHOUT_CLASSIFICATION	// load always uses IRubyObject[], so simple closure offset calculation here
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// we force argParamCount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method
WITHOUT_CLASSIFICATION	// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0
WITHOUT_CLASSIFICATION	// construct static scope list of names
WITHOUT_CLASSIFICATION	// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// lazily create class init only if necessary
WITHOUT_CLASSIFICATION	// boxed arg list __file__
WITHOUT_CLASSIFICATION	// invoke static __file__
WITHOUT_CLASSIFICATION	// exact arg list __file__
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// not using a new scope, use saved one for a flat closure
WITHOUT_CLASSIFICATION	// normal closure
WITHOUT_CLASSIFICATION	// end of scoping for closure's vars
WITHOUT_CLASSIFICATION	// we only need full-on redo exception handling if there's logic that might produce it
WITHOUT_CLASSIFICATION	// handle redos by restarting the block
WITHOUT_CLASSIFICATION	// jump back to the top of the main body of this closure
WITHOUT_CLASSIFICATION	// Ruby name 
WITHOUT_CLASSIFICATION	// Accumulate call arguments
WITHOUT_CLASSIFICATION	// Fix FileNameCompletor to work mid-line
WITHOUT_CLASSIFICATION	// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!
WITHOUT_CLASSIFICATION	// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.
WITHOUT_CLASSIFICATION	// Map of constants defined in this scope (not valid for methods!)
WITHOUT_CLASSIFICATION	// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases
WITHOUT_CLASSIFICATION	// Map keep track of the next available variable index for a particular prefix
WITHOUT_CLASSIFICATION	// Control flow graph for this scope
WITHOUT_CLASSIFICATION	//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;
WITHOUT_CLASSIFICATION	// List of modules, classes, and methods defined in this scope!
WITHOUT_CLASSIFICATION	// Returns the containing parent scope!
WITHOUT_CLASSIFICATION	// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);
WITHOUT_CLASSIFICATION	// get "self"
WITHOUT_CLASSIFICATION	// variable is never read, variable is never live
WITHOUT_CLASSIFICATION	// inline script
WITHOUT_CLASSIFICATION	// inline script
WITHOUT_CLASSIFICATION	// This method is called to build assignments for a multiple-assignment instruction
WITHOUT_CLASSIFICATION	// Build the class body!
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// SSS FIXME: Can this ever be null?
WITHOUT_CLASSIFICATION	// Run the pass on the passed in scope!
WITHOUT_CLASSIFICATION	// done // done // done // done
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	// This method is called to build arguments for a block!
WITHOUT_CLASSIFICATION	// build first node (and ignore its result) and then second node
WITHOUT_CLASSIFICATION	// build first node only and return false
WITHOUT_CLASSIFICATION	// Value of the last expression in the block 
WITHOUT_CLASSIFICATION	// If this is not a closure, the break is equivalent to jumping to the loop end label
WITHOUT_CLASSIFICATION	// get the incoming case value
WITHOUT_CLASSIFICATION	// the CASE instruction
WITHOUT_CLASSIFICATION	// lists to aggregate variables and bodies for whens
WITHOUT_CLASSIFICATION	// build each "when"
WITHOUT_CLASSIFICATION	// multiple conditions for when
WITHOUT_CLASSIFICATION	// build "else" if it exists
WITHOUT_CLASSIFICATION	// now emit bodies
WITHOUT_CLASSIFICATION	// close it out
WITHOUT_CLASSIFICATION	// By default, the container for this class is 's'
WITHOUT_CLASSIFICATION	// Do we have a dynamic container?
WITHOUT_CLASSIFICATION	// Return a meta object corresponding to the class
WITHOUT_CLASSIFICATION	// 1. Load the module first (lhs of node) // 2. Then load the constant from the module
WITHOUT_CLASSIFICATION	// Build IR for args
WITHOUT_CLASSIFICATION	// Build IR for body
WITHOUT_CLASSIFICATION	// if root of method is rescue, build as a light rescue
WITHOUT_CLASSIFICATION	// Instance method
WITHOUT_CLASSIFICATION	// Class method
WITHOUT_CLASSIFICATION	// Other args begin at index 1
WITHOUT_CLASSIFICATION	// Both for fixed arity and variable arity methods
WITHOUT_CLASSIFICATION	// Now for the rest
WITHOUT_CLASSIFICATION	// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!
WITHOUT_CLASSIFICATION	// This is not an expression that computes anything
WITHOUT_CLASSIFICATION	// Create a new closure context
WITHOUT_CLASSIFICATION	// Build args
WITHOUT_CLASSIFICATION	// Build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	// Assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	// By default, the container for this class is 's'
WITHOUT_CLASSIFICATION	// Create a new closure context
WITHOUT_CLASSIFICATION	// Build args
WITHOUT_CLASSIFICATION	// Assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	// Get the container for this new module
WITHOUT_CLASSIFICATION	// Build the new module
WITHOUT_CLASSIFICATION	// Build the module body
WITHOUT_CLASSIFICATION	// First, build an assignment for a splat, if any, with the rest of the args!
WITHOUT_CLASSIFICATION	// rest of the argument array!
WITHOUT_CLASSIFICATION	// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration
WITHOUT_CLASSIFICATION	// get attr
WITHOUT_CLASSIFICATION	// call operator
WITHOUT_CLASSIFICATION	// set attr
WITHOUT_CLASSIFICATION	// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //
WITHOUT_CLASSIFICATION	// This does the assignment!
WITHOUT_CLASSIFICATION	// This does the assignment!
WITHOUT_CLASSIFICATION	// if v1 is defined and true, we are done! 
WITHOUT_CLASSIFICATION	// build first node only and return true
WITHOUT_CLASSIFICATION	// build first node as non-expr and build second node
WITHOUT_CLASSIFICATION	// Top-level script!
WITHOUT_CLASSIFICATION	// we won't enter the loop -- just build the condition node
WITHOUT_CLASSIFICATION	/* ----------- Private Interface ------------ */
WITHOUT_CLASSIFICATION	// What handles warnings
WITHOUT_CLASSIFICATION	// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop
WITHOUT_CLASSIFICATION	// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit
WITHOUT_CLASSIFICATION	// Dummy top-level method for the class
WITHOUT_CLASSIFICATION	// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit
WITHOUT_CLASSIFICATION	// ------ Define the operations below ----
WITHOUT_CLASSIFICATION	// value copy and type conversion operations
WITHOUT_CLASSIFICATION	// alu operations
WITHOUT_CLASSIFICATION	// method handle, arg receive, return value, and  call instructions
WITHOUT_CLASSIFICATION	// closure instructions
WITHOUT_CLASSIFICATION	// eval instructions
WITHOUT_CLASSIFICATION	// def instructions
WITHOUT_CLASSIFICATION	// exception instructions
WITHOUT_CLASSIFICATION	// Loads
WITHOUT_CLASSIFICATION	// Stores
WITHOUT_CLASSIFICATION	// jump and branch operations
WITHOUT_CLASSIFICATION	// others
WITHOUT_CLASSIFICATION	// a case/when branch
WITHOUT_CLASSIFICATION	// optimization guards
WITHOUT_CLASSIFICATION	// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.
WITHOUT_CLASSIFICATION	// Returns the containing parent scope -- can be a dynamic value (hence Operand)!
WITHOUT_CLASSIFICATION	// scripts
WITHOUT_CLASSIFICATION	// scripts and modules
WITHOUT_CLASSIFICATION	// scripts, classes, and modules
WITHOUT_CLASSIFICATION	// methods and closures
WITHOUT_CLASSIFICATION	// create a new variable using the prefix
WITHOUT_CLASSIFICATION	// create a new temporary variable
WITHOUT_CLASSIFICATION	// Get a new label using a generic prefix
WITHOUT_CLASSIFICATION	// Build the CFG for this scope -- supported only by methods & closures
WITHOUT_CLASSIFICATION	// Get the control flow graph for this scope -- only valid for methods & closures
WITHOUT_CLASSIFICATION	// While processing loops, this returns the loop that we are processing.
WITHOUT_CLASSIFICATION	// Record the loop we are beginning to process
WITHOUT_CLASSIFICATION	// Indicate that we are done processing the loop
WITHOUT_CLASSIFICATION	// Run the passed in compiler pass on this scope!
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	// Readline
WITHOUT_CLASSIFICATION	// If the cfg of the method is around, print the CFG!
WITHOUT_CLASSIFICATION	// Optimize some core class method calls for constant values
WITHOUT_CLASSIFICATION	// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.
WITHOUT_CLASSIFICATION	// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!
WITHOUT_CLASSIFICATION	// If we got a simplified value, mark the call dead and insert a copy in its place!
WITHOUT_CLASSIFICATION	// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!
WITHOUT_CLASSIFICATION	/* ----------- Public abstract methods ---------- */
WITHOUT_CLASSIFICATION	/* ----------- Public methods with a default implementation ---------- */
WITHOUT_CLASSIFICATION	// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem
WITHOUT_CLASSIFICATION	// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.
WITHOUT_CLASSIFICATION	/* --------- Protected fields/methods below --------- */
WITHOUT_CLASSIFICATION	// Dataflow problem with which this node is associated // CFG node for which this node contains info.
WITHOUT_CLASSIFICATION	/* -------------- Public fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// ------- Abstract methods without a default implementation -------
WITHOUT_CLASSIFICATION	// ------- Default implementation methods below -------
WITHOUT_CLASSIFICATION	/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */
WITHOUT_CLASSIFICATION	/* Individual analyses should override this */
WITHOUT_CLASSIFICATION	/* Individual analyses should override this */
WITHOUT_CLASSIFICATION	/* -------------- Packaged/protected fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// We want unique ids for dataflow variables
WITHOUT_CLASSIFICATION	/* -------------- Protected fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	/* -------------- Private fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// Initialize all flow graph nodes 
WITHOUT_CLASSIFICATION	/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */
WITHOUT_CLASSIFICATION	/* ******************** PUBLIC INTERFACE ******************* */
WITHOUT_CLASSIFICATION	// Unique ID assigned to this variable
WITHOUT_CLASSIFICATION	// start out with a default RubyObject allocator
WITHOUT_CLASSIFICATION	// switch to an allocator based on a default constructor
WITHOUT_CLASSIFICATION	/* ----------- Public Interface ------------ */
WITHOUT_CLASSIFICATION	// class or module
WITHOUT_CLASSIFICATION	// OUT = UNION(IN(succs))
WITHOUT_CLASSIFICATION	// Traverse the instructions in this basic block in reverse order!
WITHOUT_CLASSIFICATION	// v is defined => It is no longer live before 'i'
WITHOUT_CLASSIFICATION	// IN is the same!
WITHOUT_CLASSIFICATION	// IN changed!
WITHOUT_CLASSIFICATION	/* ---------- Protected / package fields, methods --------- */
WITHOUT_CLASSIFICATION	// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!
WITHOUT_CLASSIFICATION	// Do not mark this instruction's operands live if the instruction itself is dead!
WITHOUT_CLASSIFICATION	/* ---------- Private fields, methods --------- */
WITHOUT_CLASSIFICATION	// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 
WITHOUT_CLASSIFICATION	// Used during optimization passes to propagate type and other information
WITHOUT_CLASSIFICATION	// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes
WITHOUT_CLASSIFICATION	/* --------- "Abstract"/"please-override" methods --------- */
WITHOUT_CLASSIFICATION	/* Array of all operands for this instruction */
WITHOUT_CLASSIFICATION	/* List of all variables used by all operands of this instruction */
WITHOUT_CLASSIFICATION	/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */
WITHOUT_CLASSIFICATION	// By default, no simplifications!
WITHOUT_CLASSIFICATION	// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code
WITHOUT_CLASSIFICATION	// By default, return instructions cannot be deleted
WITHOUT_CLASSIFICATION	// If true, returns the rest of the array starting at the index
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// Map of label & basic blocks with that label
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// You can only value-replace atomic values
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// For simplification, get the target value, even if compound
WITHOUT_CLASSIFICATION	// For simplification, get the target value, even if compound
WITHOUT_CLASSIFICATION	// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value
WITHOUT_CLASSIFICATION	// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values
WITHOUT_CLASSIFICATION	// Get the target class of this operand, if we know it!
WITHOUT_CLASSIFICATION	// The following constants capture pre-known static call sites -- used to implement ruby internals
WITHOUT_CLASSIFICATION	/* Nothing to do by default */
WITHOUT_CLASSIFICATION	// Map of label & basic blocks which are waiting for a bb with that label
WITHOUT_CLASSIFICATION	// Init before building basic blocks below!
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id
WITHOUT_CLASSIFICATION	// Jump instruction bbs dont add an edge to the succeeding bb by default
WITHOUT_CLASSIFICATION	// Add forward ref. edges
WITHOUT_CLASSIFICATION	// currBB cannot be null!
WITHOUT_CLASSIFICATION	// Add a forward reference from tgt -> currBB
WITHOUT_CLASSIFICATION	// root-level logic
WITHOUT_CLASSIFICATION	// root-level methods
WITHOUT_CLASSIFICATION	// root-level classes
WITHOUT_CLASSIFICATION	//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;
WITHOUT_CLASSIFICATION	// load receiver
WITHOUT_CLASSIFICATION	// load receiver
WITHOUT_CLASSIFICATION	// receiver
WITHOUT_CLASSIFICATION	// load arguments
WITHOUT_CLASSIFICATION	// load arguments
WITHOUT_CLASSIFICATION	//        case 4: //        case 5:
WITHOUT_CLASSIFICATION	// Object[] args
WITHOUT_CLASSIFICATION	// load handle
WITHOUT_CLASSIFICATION	// args array
WITHOUT_CLASSIFICATION	// i'th argument
WITHOUT_CLASSIFICATION	// invoke specific arity version
WITHOUT_CLASSIFICATION	// Object arg0
WITHOUT_CLASSIFICATION	// useful for code completion inside the IRB
WITHOUT_CLASSIFICATION	// No editing before startPos
WITHOUT_CLASSIFICATION	// no silly ticks!
WITHOUT_CLASSIFICATION	// no candidates? Fail.
WITHOUT_CLASSIFICATION	// at end
WITHOUT_CLASSIFICATION	// undo check
WITHOUT_CLASSIFICATION	// Explicit reference to these vars as symbols...
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//\t\n\"\\'`@$><=;|&{(
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// no check for '*'
WITHOUT_CLASSIFICATION	// no check for '*'
WITHOUT_CLASSIFICATION	// Binding provided for scope, use it
WITHOUT_CLASSIFICATION	// this is ensured by the callers
WITHOUT_CLASSIFICATION	// no binding, just eval in "current" frame (caller's frame)
WITHOUT_CLASSIFICATION	// restore position
WITHOUT_CLASSIFICATION	/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */
WITHOUT_CLASSIFICATION	// Used by the compiler to simplify arg processing
WITHOUT_CLASSIFICATION	// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace
WITHOUT_CLASSIFICATION	// MRI does similar thing on MacOS X with 'EditLine wrapper'.
WITHOUT_CLASSIFICATION	// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)
WITHOUT_CLASSIFICATION	// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)
WITHOUT_CLASSIFICATION	// not overridden, let's go
WITHOUT_CLASSIFICATION	/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */
WITHOUT_CLASSIFICATION	// FIXME: JRUBY-3604
WITHOUT_CLASSIFICATION	// Complete using a Proc object
WITHOUT_CLASSIFICATION	// clear basename so it's anonymous when raising
WITHOUT_CLASSIFICATION	// These are not really used by timeout, but exposed for compatibility
WITHOUT_CLASSIFICATION	// Timeout module methods
WITHOUT_CLASSIFICATION	// Toplevel defines
WITHOUT_CLASSIFICATION	// No seconds, just yield
WITHOUT_CLASSIFICATION	// No timeout in critical section
WITHOUT_CLASSIFICATION	// if it's the exception we're expecting
WITHOUT_CLASSIFICATION	// and we were given a specific exception
WITHOUT_CLASSIFICATION	// otherwise, rethrow
WITHOUT_CLASSIFICATION	// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //
WITHOUT_CLASSIFICATION	// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //
WITHOUT_CLASSIFICATION	// NetProtocolBufferedIO
WITHOUT_CLASSIFICATION	/* When a length is given, read_string acts like get_bytes */
WITHOUT_CLASSIFICATION	// Replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	// ARRAY and STRUCT are only used internally
WITHOUT_CLASSIFICATION	// If no release method is defined, then memory leaks will result.
WITHOUT_CLASSIFICATION	/*     * This variant of newStruct is called from StructLayoutBuilder     */
WITHOUT_CLASSIFICATION	// This also handles unsigned int -> negative signed int conversion
WITHOUT_CLASSIFICATION	// Windows is LLP64
WITHOUT_CLASSIFICATION	// Older JDK on linux map 'c' to 'libc.so' which doesn't work
WITHOUT_CLASSIFICATION	// Ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	// $blah
WITHOUT_CLASSIFICATION	// Replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	// // A specific version was requested - use as is for search //
WITHOUT_CLASSIFICATION	// Ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //
WITHOUT_CLASSIFICATION	// Add Pointer::NULL as a constant
WITHOUT_CLASSIFICATION	// Create the ordered list of field names from the map
WITHOUT_CLASSIFICATION	// Assemble a [ :name, offset ] array
WITHOUT_CLASSIFICATION	//                case FLOAT:
WITHOUT_CLASSIFICATION	// keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	// keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	// No auto cleanup needed
WITHOUT_CLASSIFICATION	// Wire up Function#call(*args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	// Get the convention from the options hash
WITHOUT_CLASSIFICATION	// Get the convention from the options hash
WITHOUT_CLASSIFICATION	/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */
WITHOUT_CLASSIFICATION	/*------------------------------------------------------------------------*/
WITHOUT_CLASSIFICATION	//AF_INET
WITHOUT_CLASSIFICATION	//AF_INET
WITHOUT_CLASSIFICATION	// RubyUNIXServer
WITHOUT_CLASSIFICATION	// line 321
WITHOUT_CLASSIFICATION	// // Set up for potentially fast-int operations //
WITHOUT_CLASSIFICATION	// // Hook up the MemoryPointer class if its not already there //
WITHOUT_CLASSIFICATION	// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases
WITHOUT_CLASSIFICATION	// no UNIXSockets on Windows
WITHOUT_CLASSIFICATION	// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.
WITHOUT_CLASSIFICATION	// There is something valid in the sun_path component
WITHOUT_CLASSIFICATION	// RubyIPSocket
WITHOUT_CLASSIFICATION	// host is nil or the empty string, bind to INADDR_ANY
WITHOUT_CLASSIFICATION	// host and port given
WITHOUT_CLASSIFICATION	// RubyUDPSocket
WITHOUT_CLASSIFICATION	// By default we always reverse lookup unless do_not_reverse_lookup set.
WITHOUT_CLASSIFICATION	// make sure descriptor is registered
WITHOUT_CLASSIFICATION	// continue with normal initialization
WITHOUT_CLASSIFICATION	// recv returns nil on EOF
WITHOUT_CLASSIFICATION	// Can't support the rest with Java
WITHOUT_CLASSIFICATION	// RubyBasicSocket
WITHOUT_CLASSIFICATION	// we don't have to define any that we don't support; see socket.c
WITHOUT_CLASSIFICATION	// mandatory constants we haven't implemented
WITHOUT_CLASSIFICATION	// constants webrick crashes without
WITHOUT_CLASSIFICATION	// More constants needed by specs
WITHOUT_CLASSIFICATION	// normal file descriptor..try to work with it
WITHOUT_CLASSIFICATION	// AF_INET
WITHOUT_CLASSIFICATION	// 255.255.255.255
WITHOUT_CLASSIFICATION	// 0.0.0.0
WITHOUT_CLASSIFICATION	//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)
WITHOUT_CLASSIFICATION	// line 323
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...
WITHOUT_CLASSIFICATION	// datagram, set accordingly // again, AF_INET
WITHOUT_CLASSIFICATION	//IRubyObject family = args[2];
WITHOUT_CLASSIFICATION	// When Socket::AI_PASSIVE and host is nil, return 'any' address. 
WITHOUT_CLASSIFICATION	// The value of 1 is for Socket::AI_PASSIVE.
WITHOUT_CLASSIFICATION	// RubySocket
WITHOUT_CLASSIFICATION	// numeric host, use it for port
WITHOUT_CLASSIFICATION	//            e.printStackTrace();
WITHOUT_CLASSIFICATION	// we were woken up without being selected...poll for thread events and go back to sleep
WITHOUT_CLASSIFICATION	// otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	// no connection immediately accepted, let them try again
WITHOUT_CLASSIFICATION	// do nothing, just exit
WITHOUT_CLASSIFICATION	//nativeThread.setPriority(priority);
WITHOUT_CLASSIFICATION	// set thread context JRuby classloader here, for Ruby-owned thread
WITHOUT_CLASSIFICATION	// uber-ThreadKill catcher, since it should always just mean "be dead"
WITHOUT_CLASSIFICATION	// Call the thread's code
WITHOUT_CLASSIFICATION	// Someone called exit!, so we need to kill the main thread
WITHOUT_CLASSIFICATION	// restore context classloader, in case we're using a thread pool
WITHOUT_CLASSIFICATION	// be dead
WITHOUT_CLASSIFICATION	// loop until a context is available, to clean up softrefs that might have been collected
WITHOUT_CLASSIFICATION	// all threads in ruby thread group plus main thread
WITHOUT_CLASSIFICATION	// thread is not alive, skip it
WITHOUT_CLASSIFICATION	// future is done or cancelled, skip it
WITHOUT_CLASSIFICATION	// first, check if the sender has unreceived mail
WITHOUT_CLASSIFICATION	// then deliver mail to the target
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// Define a second version that doesn't take a block, so we have unique code paths for both cases.
WITHOUT_CLASSIFICATION	// invoke pre method stuff
WITHOUT_CLASSIFICATION	// main body
WITHOUT_CLASSIFICATION	// return jump handling
WITHOUT_CLASSIFICATION	// finally
WITHOUT_CLASSIFICATION	// return result if we're still good
WITHOUT_CLASSIFICATION	// redo jump handling
WITHOUT_CLASSIFICATION	// clear the redo
WITHOUT_CLASSIFICATION	// get runtime, create jump error, and throw it
WITHOUT_CLASSIFICATION	// throw redo error if we're still good
WITHOUT_CLASSIFICATION	// finally handling for abnormal exit
WITHOUT_CLASSIFICATION	//call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	// No required specified, check actual number of required args
WITHOUT_CLASSIFICATION	// actual required is less than 3, so we use specific arity
WITHOUT_CLASSIFICATION	// actual required is greater than 3, raise error (we don't support actual required > 3)
WITHOUT_CLASSIFICATION	// simple path, no multimethod
WITHOUT_CLASSIFICATION	// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	// normal all-rest method
WITHOUT_CLASSIFICATION	// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check
WITHOUT_CLASSIFICATION	// promise to implement zero to N
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// just confirm minimum args provided
WITHOUT_CLASSIFICATION	// just confirm args length == required
WITHOUT_CLASSIFICATION	// confirm minimum args provided
WITHOUT_CLASSIFICATION	// confirm maximum not greater than optional
WITHOUT_CLASSIFICATION	// Raise an error if arity does not match requirements
WITHOUT_CLASSIFICATION	// tc
WITHOUT_CLASSIFICATION	// self // name
WITHOUT_CLASSIFICATION	// no args
WITHOUT_CLASSIFICATION	// variable args with block
WITHOUT_CLASSIFICATION	// variable args no block, load null block
WITHOUT_CLASSIFICATION	// zero args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// one arg with block
WITHOUT_CLASSIFICATION	// one arg, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// two args with block
WITHOUT_CLASSIFICATION	// two args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// three args with block
WITHOUT_CLASSIFICATION	// three args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// load block if it accepts block
WITHOUT_CLASSIFICATION	// all other arg cases with block
WITHOUT_CLASSIFICATION	// all other arg cases without block
WITHOUT_CLASSIFICATION	// one arg, no block; do nothing
WITHOUT_CLASSIFICATION	// two args, no block; do nothing
WITHOUT_CLASSIFICATION	// three args, no block; do nothing
WITHOUT_CLASSIFICATION	// load target for invocations
WITHOUT_CLASSIFICATION	// load receiver as original type for virtual invocation
WITHOUT_CLASSIFICATION	// static invocation
WITHOUT_CLASSIFICATION	// virtual invocation
WITHOUT_CLASSIFICATION	// void return type, so we need to load a nil for returning below
WITHOUT_CLASSIFICATION	// normal finally and exit
WITHOUT_CLASSIFICATION	// promise to implement one to N
WITHOUT_CLASSIFICATION	//call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	// these are only needed if we have a non-noop call config
WITHOUT_CLASSIFICATION	// method itself // ThreadContext // invoked name
WITHOUT_CLASSIFICATION	// method itself // ThreadContext // invoked name
WITHOUT_CLASSIFICATION	// singleton classes don't get their own visibility domain
WITHOUT_CLASSIFICATION	// For visibility we need real meta class and not anonymous one from class << self
WITHOUT_CLASSIFICATION	// SimpleInvocationMethod
WITHOUT_CLASSIFICATION	// never reached
WITHOUT_CLASSIFICATION	// promise to implement N with block
WITHOUT_CLASSIFICATION	// promise to implement zero to N with block
WITHOUT_CLASSIFICATION	// promise to implement one to N with block
WITHOUT_CLASSIFICATION	// promise to implement two to N with block
WITHOUT_CLASSIFICATION	// promise to implement zero to three with block
WITHOUT_CLASSIFICATION	// promise to implement one to three with block
WITHOUT_CLASSIFICATION	// promise to implement two to three with block
WITHOUT_CLASSIFICATION	// promise to implement three with block
WITHOUT_CLASSIFICATION	// promise to implement N
WITHOUT_CLASSIFICATION	// DumpingInvocationMethodFactory
WITHOUT_CLASSIFICATION	// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.
WITHOUT_CLASSIFICATION	// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.
WITHOUT_CLASSIFICATION	// promise to implement two to N
WITHOUT_CLASSIFICATION	// promise to implement three to N
WITHOUT_CLASSIFICATION	// promise to implement zero to three
WITHOUT_CLASSIFICATION	// promise to implement one to three
WITHOUT_CLASSIFICATION	// promise to implement two to three
WITHOUT_CLASSIFICATION	// promise to implement three
WITHOUT_CLASSIFICATION	// all other arities use "n" dispatch path
WITHOUT_CLASSIFICATION	// load up object and add a few useful methods
WITHOUT_CLASSIFICATION	// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel
WITHOUT_CLASSIFICATION	// construct the class, implementing all supertypes
WITHOUT_CLASSIFICATION	// fields needed for dispatch and such
WITHOUT_CLASSIFICATION	// create constructor
WITHOUT_CLASSIFICATION	// wrap self and store the wrapper
WITHOUT_CLASSIFICATION	// end constructor
WITHOUT_CLASSIFICATION	// start setup method
WITHOUT_CLASSIFICATION	// set RubyClass
WITHOUT_CLASSIFICATION	// set Ruby
WITHOUT_CLASSIFICATION	// all methods dispatch to the simple version by default, which is method_missing normally
WITHOUT_CLASSIFICATION	// try specific name first, falling back on simple name
WITHOUT_CLASSIFICATION	// get current context
WITHOUT_CLASSIFICATION	// load self, class, and name
WITHOUT_CLASSIFICATION	// construct the class, implementing all supertypes
WITHOUT_CLASSIFICATION	// fields needed for dispatch and such
WITHOUT_CLASSIFICATION	// create constructor
WITHOUT_CLASSIFICATION	// end constructor
WITHOUT_CLASSIFICATION	// for each simple method name, implement the complex methods, calling the simple version
WITHOUT_CLASSIFICATION	// load arguments into IRubyObject[] for dispatch
WITHOUT_CLASSIFICATION	// convert to IRubyObject
WITHOUT_CLASSIFICATION	// load null block
WITHOUT_CLASSIFICATION	// invoke method
WITHOUT_CLASSIFICATION	// if we expect a return value, unwrap it
WITHOUT_CLASSIFICATION	// end setup method
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// create static init, for a monitor object
WITHOUT_CLASSIFICATION	// store the wrapper
WITHOUT_CLASSIFICATION	// prepare temp locals
WITHOUT_CLASSIFICATION	// Try to look up field for simple name // get field; if nonnull, go straight to dispatch
WITHOUT_CLASSIFICATION	// field is null, lock class and try to populate
WITHOUT_CLASSIFICATION	// try/finally block to ensure unlock
WITHOUT_CLASSIFICATION	// store it
WITHOUT_CLASSIFICATION	// end of try block
WITHOUT_CLASSIFICATION	// finally block to release monitor
WITHOUT_CLASSIFICATION	// exception handling for monitor release
WITHOUT_CLASSIFICATION	// re-get, re-check method; if not null now, go to dispatch
WITHOUT_CLASSIFICATION	// load self, class, and name
WITHOUT_CLASSIFICATION	// load arguments into IRubyObject[] for dispatch
WITHOUT_CLASSIFICATION	// convert to IRubyObject
WITHOUT_CLASSIFICATION	// invoke method
WITHOUT_CLASSIFICATION	// if we expect a return value, unwrap it
WITHOUT_CLASSIFICATION	// end setup method
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// create the class
WITHOUT_CLASSIFICATION	// method still not available, call method_missing
WITHOUT_CLASSIFICATION	// perform the dispatch
WITHOUT_CLASSIFICATION	// try to load the specified name; only if that fails, try to define the class
WITHOUT_CLASSIFICATION	// up two slots, for long's two halves
WITHOUT_CLASSIFICATION	// up two slots, for long's two halves
WITHOUT_CLASSIFICATION	// setup the class
WITHOUT_CLASSIFICATION	// now, create a method_added that can replace the DynamicMethod fields as they're redefined
WITHOUT_CLASSIFICATION	// do nothing, it's a non-impl method
WITHOUT_CLASSIFICATION	// probably a primitive
WITHOUT_CLASSIFICATION	// interfaces are handled as modules
WITHOUT_CLASSIFICATION	// construct the mirror class and parent classes
WITHOUT_CLASSIFICATION	// set the full name
WITHOUT_CLASSIFICATION	// include all interfaces
WITHOUT_CLASSIFICATION	// if it's an array, only add methods for aref, aset, and length
WITHOUT_CLASSIFICATION	// add array construction methods
WITHOUT_CLASSIFICATION	// add all public constructors (note: getConstructors only returns public ones)
WITHOUT_CLASSIFICATION	// add all instance and static methods
WITHOUT_CLASSIFICATION	// proxy is complete, return it
WITHOUT_CLASSIFICATION	// too much array creation!
WITHOUT_CLASSIFICATION	// only include static methods if specified
WITHOUT_CLASSIFICATION	// add a few type-specific special methods
WITHOUT_CLASSIFICATION	// add all static variables
WITHOUT_CLASSIFICATION	// only public static fields that are valid constants
WITHOUT_CLASSIFICATION	// looks like someone's trying to raise a Java exception. Let them.
WITHOUT_CLASSIFICATION	// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.
WITHOUT_CLASSIFICATION	// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive
WITHOUT_CLASSIFICATION	// long first because it's what Fixnum claims to be
WITHOUT_CLASSIFICATION	// double first because it's what float claims to be
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	// we set all Java methods to optional, since many/most have overloads
WITHOUT_CLASSIFICATION	// If we hold a Java object, we need a java_class accessor
WITHOUT_CLASSIFICATION	// line 326
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	// too much array creation!
WITHOUT_CLASSIFICATION	// construct new array proxy (ArrayJavaProxy)
WITHOUT_CLASSIFICATION	// Get map of all fields we want to define.  
WITHOUT_CLASSIFICATION	// Look through all mappings to find a match entry for this field
WITHOUT_CLASSIFICATION	// Hit a non-java proxy class (included Modules can be a cause of this...skip)
WITHOUT_CLASSIFICATION	// We could not find all of them print out first one (we could print them all?)
WITHOUT_CLASSIFICATION	// dummy bodies for default impls
WITHOUT_CLASSIFICATION	// initialize this if it hasn't been
WITHOUT_CLASSIFICATION	// initialize these if they haven't been
WITHOUT_CLASSIFICATION	// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes
WITHOUT_CLASSIFICATION	// setup new, etc unless this is a ConcreteJavaProxy subclass
WITHOUT_CLASSIFICATION	// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type
WITHOUT_CLASSIFICATION	// list of interfaces we implement
WITHOUT_CLASSIFICATION	// We capture the original "new" and make it private
WITHOUT_CLASSIFICATION	// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!
WITHOUT_CLASSIFICATION	// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object
WITHOUT_CLASSIFICATION	// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object
WITHOUT_CLASSIFICATION	// Now we add an "implement" and "implement_all" methods to the class
WITHOUT_CLASSIFICATION	// implement all forces implementation of all interfaces we intend // for this class to implement
WITHOUT_CLASSIFICATION	// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface
WITHOUT_CLASSIFICATION	// walk all superclasses aggregating interfaces
WITHOUT_CLASSIFICATION	// construct the new interface impl and set it into the object
WITHOUT_CLASSIFICATION	// assuming the user wants a collection of interfaces that can be // included together. make it so.
WITHOUT_CLASSIFICATION	// not allowed for existing Java interface modules
WITHOUT_CLASSIFICATION	// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well
WITHOUT_CLASSIFICATION	// already set up append_features, just add the interface if we haven't already
WITHOUT_CLASSIFICATION	// array-of-interface-type creation/identity
WITHOUT_CLASSIFICATION	// keep this variant for kind_of? testing
WITHOUT_CLASSIFICATION	// array creation should use this variant
WITHOUT_CLASSIFICATION	// parent.setConstant(name, proxyClass); // where the name should come from ?
WITHOUT_CLASSIFICATION	// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.
WITHOUT_CLASSIFICATION	// add reference to interface module
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// proxy is complete, return it
WITHOUT_CLASSIFICATION	// same as argument_types, but matches name in java.lang.reflect.Constructor/Method
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// weakly reserved names
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// modified only by addMethod; no synchronization required
WITHOUT_CLASSIFICATION	// if there's no constructor, we must prevent construction
WITHOUT_CLASSIFICATION	// caching constructors, as they're accessed for each new instance
WITHOUT_CLASSIFICATION	// proxy module for interfaces
WITHOUT_CLASSIFICATION	// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields
WITHOUT_CLASSIFICATION	// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).
WITHOUT_CLASSIFICATION	// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.
WITHOUT_CLASSIFICATION	// Now add all aliases for the static methods (fields) as appropriate
WITHOUT_CLASSIFICATION	// proxy is under construction, building thread can // safely read non-volatile value
WITHOUT_CLASSIFICATION	// Add property name aliases
WITHOUT_CLASSIFICATION	// getFoo      => foo // getFoo(int) => foo(int)
WITHOUT_CLASSIFICATION	// setFoo(Foo) => foo=(Foo)
WITHOUT_CLASSIFICATION	// isFoo() => foo, isFoo(*) => foo(*)
WITHOUT_CLASSIFICATION	// Additionally add ?-postfixed aliases to any boolean methods and properties.
WITHOUT_CLASSIFICATION	// is_something?, contains_thing?
WITHOUT_CLASSIFICATION	// something?
WITHOUT_CLASSIFICATION	// setup constants for public inner classes
WITHOUT_CLASSIFICATION	// setup constants for public inner classes
WITHOUT_CLASSIFICATION	// Ignore bad constant named inner classes pending JRUBY-697
WITHOUT_CLASSIFICATION	// Ignore bad constant named inner classes pending JRUBY-697
WITHOUT_CLASSIFICATION	// create constructorInstaller; if there are no constructors, it will disable construction
WITHOUT_CLASSIFICATION	// we need to collect all methods, though we'll only // install the ones that are named in this class
WITHOUT_CLASSIFICATION	// Install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	// now iterate over all installers and make sure they also have appropriate aliases
WITHOUT_CLASSIFICATION	// old (quasi-deprecated) interface class
WITHOUT_CLASSIFICATION	// 1.9 support for encodings
WITHOUT_CLASSIFICATION	// double-check the cache now that we're synchronized
WITHOUT_CLASSIFICATION	// setFoo(Foo) => foo=(Foo)
WITHOUT_CLASSIFICATION	// isFoo() => foo, isFoo(*) => foo(*)
WITHOUT_CLASSIFICATION	// is_something?, contains_thing?
WITHOUT_CLASSIFICATION	// one word type name that starts lower-case...it may be a primitive type
WITHOUT_CLASSIFICATION	// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here
WITHOUT_CLASSIFICATION	// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.
WITHOUT_CLASSIFICATION	// see note above re: return type
WITHOUT_CLASSIFICATION	// restrictive security policy; no matter, we only want public // classes anyway
WITHOUT_CLASSIFICATION	// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case
WITHOUT_CLASSIFICATION	// one-dimensional array
WITHOUT_CLASSIFICATION	// n-dimensional array
WITHOUT_CLASSIFICATION	// if it's an array of arrays, recurse with the component type
WITHOUT_CLASSIFICATION	// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130
WITHOUT_CLASSIFICATION	// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface
WITHOUT_CLASSIFICATION	// can't be converted any more, return it
WITHOUT_CLASSIFICATION	// getFooBar() => fooBar?, foo_bar?(*)
WITHOUT_CLASSIFICATION	// If not a property, but is boolean add ?-postfixed aliases.
WITHOUT_CLASSIFICATION	// many cases are ok to convert to float; if not one of these, error
WITHOUT_CLASSIFICATION	// for Object, default to natural wrapper type
WITHOUT_CLASSIFICATION	// rubyObject is already of the required jruby class (or subclass)
WITHOUT_CLASSIFICATION	// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()
WITHOUT_CLASSIFICATION	// it's not one of the types we convert, so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	// we've found a Java type to which we've coerced the Ruby value, wrap it
WITHOUT_CLASSIFICATION	// set of utility methods for Java-based proxy objects
WITHOUT_CLASSIFICATION	// the proxy (wrapper) type hierarchy
WITHOUT_CLASSIFICATION	//InterfaceJavaProxy.createInterfaceJavaProxy(context);
WITHOUT_CLASSIFICATION	// also create the JavaProxy* classes
WITHOUT_CLASSIFICATION	// The template for interface modules
WITHOUT_CLASSIFICATION	// Now attach Java-related extras to core classes
WITHOUT_CLASSIFICATION	// add all name-to-class mappings
WITHOUT_CLASSIFICATION	// add some base Java classes everyone will need
WITHOUT_CLASSIFICATION	// finally, set JavaSupport.isEnabled to true
WITHOUT_CLASSIFICATION	// shouldn't happen, but if a superclass is specified, it's not ours
WITHOUT_CLASSIFICATION	// include any interfaces we extend
WITHOUT_CLASSIFICATION	// java.lang.Object is added at root of java proxy classes
WITHOUT_CLASSIFICATION	// other java proxy classes added under their superclass' java proxy
WITHOUT_CLASSIFICATION	// include interface modules into the proxy class
WITHOUT_CLASSIFICATION	// JRUBY-2938 the proxy class might already exist
WITHOUT_CLASSIFICATION	// add java_method for unbound use
WITHOUT_CLASSIFICATION	// add alias to meta
WITHOUT_CLASSIFICATION	// we'll only map conventional class names to modules 
WITHOUT_CLASSIFICATION	/* expected */
WITHOUT_CLASSIFICATION	// Haven't found a class, continue on as though it were a package
WITHOUT_CLASSIFICATION	// upper case name, so most likely a class
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// add alias to meta
WITHOUT_CLASSIFICATION	// this is where we'll get connected when classes are opened using // package module syntax.
WITHOUT_CLASSIFICATION	// save package module as ivar in parent, and add method to parent so // we don't have to come back here.
WITHOUT_CLASSIFICATION	// this covers primitives and (unlikely) lower-case class names
WITHOUT_CLASSIFICATION	/* not primitive or lc class */
WITHOUT_CLASSIFICATION	/* not primitive or lc class */
WITHOUT_CLASSIFICATION	// Is there a supplied proc argument or do we assume a block was supplied
WITHOUT_CLASSIFICATION	// Create list of interfaces to proxy (and make sure they really are interfaces)
WITHOUT_CLASSIFICATION	// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them
WITHOUT_CLASSIFICATION	// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode
WITHOUT_CLASSIFICATION	// normal new class implementing interfaces
WITHOUT_CLASSIFICATION	/*         * Initialize some components.         */
WITHOUT_CLASSIFICATION	// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)
WITHOUT_CLASSIFICATION	// Java reflection does not allow retrieving constructors like methods
WITHOUT_CLASSIFICATION	// for zero args case we can stop searching
WITHOUT_CLASSIFICATION	// for zero args case we can stop searching
WITHOUT_CLASSIFICATION	// no matching ctor found
WITHOUT_CLASSIFICATION	// Create Ruby proxies for any input arguments that are not primitives.
WITHOUT_CLASSIFICATION	// prepare a faster handle if handles are enabled and the method and class are public
WITHOUT_CLASSIFICATION	// must be a public method
WITHOUT_CLASSIFICATION	// must be a public class
WITHOUT_CLASSIFICATION	// must have been loaded from our known classloader hierarchy
WITHOUT_CLASSIFICATION	// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 
WITHOUT_CLASSIFICATION	// search through all declared methods to find a closest match
WITHOUT_CLASSIFICATION	// no matching method found
WITHOUT_CLASSIFICATION	// this test really means, that this is a ruby-defined subclass of a java class
WITHOUT_CLASSIFICATION	/*         * First we need to register the JRuby engine.         */
WITHOUT_CLASSIFICATION	/*         * Now we create a new BSFManager.         */
WITHOUT_CLASSIFICATION	/*         * Initialize a simple Frame.          */
WITHOUT_CLASSIFICATION	//e.printStackTrace();
WITHOUT_CLASSIFICATION	//e.printStackTrace();
WITHOUT_CLASSIFICATION	// JRUBY-530, while case
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// // this test really means, that this is a ruby-defined subclass of a java class //
WITHOUT_CLASSIFICATION	// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.
WITHOUT_CLASSIFICATION	/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */
WITHOUT_CLASSIFICATION	/*              * Execute a Ruby script (add the menubar to the frame).             */
WITHOUT_CLASSIFICATION	/*                     * Execute Ruby statements.                     */
WITHOUT_CLASSIFICATION	/*                     * Evaluates a Ruby expression and display the result.                     */
WITHOUT_CLASSIFICATION	// Populate values for the parameter names
WITHOUT_CLASSIFICATION	/* package scope */
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler // installed.
WITHOUT_CLASSIFICATION	// // Ruby-level methods //
WITHOUT_CLASSIFICATION	// need names ordered for key generation later
WITHOUT_CLASSIFICATION	// we only collect methods and interfaces for  // user-defined proxy classes.
WITHOUT_CLASSIFICATION	// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.
WITHOUT_CLASSIFICATION	// get any included interfaces
WITHOUT_CLASSIFICATION	// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.
WITHOUT_CLASSIFICATION	// statically initialized below
WITHOUT_CLASSIFICATION	// finish class initializer
WITHOUT_CLASSIFICATION	// trigger class initialization for the class
WITHOUT_CLASSIFICATION	// should not happen!
WITHOUT_CLASSIFICATION	// start class
WITHOUT_CLASSIFICATION	// make getter for handler
WITHOUT_CLASSIFICATION	// make getter for proxy class
WITHOUT_CLASSIFICATION	// add (potentially) overridden names to the key. // TODO: see note above re: optimizations
WITHOUT_CLASSIFICATION	// We generate all constructors and let some fail during invocation later
WITHOUT_CLASSIFICATION	// create static private method field
WITHOUT_CLASSIFICATION	// load static empty array
WITHOUT_CLASSIFICATION	// box arguments
WITHOUT_CLASSIFICATION	// this is a simple rethrow handler
WITHOUT_CLASSIFICATION	// // construct the super-proxy method //
WITHOUT_CLASSIFICATION	// do a void return
WITHOUT_CLASSIFICATION	// // utility methods //
WITHOUT_CLASSIFICATION	// Is there a supplied proc argument or do we assume a block was // supplied
WITHOUT_CLASSIFICATION	// store call information so method_missing impl can use it
WITHOUT_CLASSIFICATION	// use the same logic as in EvaluationState
WITHOUT_CLASSIFICATION	// no opt, no rest, exact match
WITHOUT_CLASSIFICATION	// only rest, must be at least required
WITHOUT_CLASSIFICATION	// opt but no rest, must be at least required and no more than required + opt
WITHOUT_CLASSIFICATION	// opt and rest, must be at least required
WITHOUT_CLASSIFICATION	// No block from a nil proc
WITHOUT_CLASSIFICATION	// If not already a proc then we should try and make it one.
WITHOUT_CLASSIFICATION	// The current block is already associated with proc.  No need to create a new one
WITHOUT_CLASSIFICATION	// Has the method that is calling super received a block argument
WITHOUT_CLASSIFICATION	/* NUL */
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// 'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// classes are directly in the hierarchy, so no special logic is necessary for implementer
WITHOUT_CLASSIFICATION	// must be power of 2 // must be power of 2
WITHOUT_CLASSIFICATION	// Find power-of-two sizes best matching arguments
WITHOUT_CLASSIFICATION	// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)
WITHOUT_CLASSIFICATION	//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());
WITHOUT_CLASSIFICATION	//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }
WITHOUT_CLASSIFICATION	// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue
WITHOUT_CLASSIFICATION	// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.
WITHOUT_CLASSIFICATION	// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.
WITHOUT_CLASSIFICATION	// ctor used by remove/rehash
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.
WITHOUT_CLASSIFICATION	// temp method to verify tableSize value // must be called under lock
WITHOUT_CLASSIFICATION	// Single node in list
WITHOUT_CLASSIFICATION	// indirect read-/write- volatile
WITHOUT_CLASSIFICATION	// indirect read-/write- volatile
WITHOUT_CLASSIFICATION	// entry exists, proxy has been gc'ed. replace entry.
WITHOUT_CLASSIFICATION	// Where we get new positions from.
WITHOUT_CLASSIFICATION	// Start of string ([, (, {, <, ', ", \n) 
WITHOUT_CLASSIFICATION	// Number of newlines read from the reader
WITHOUT_CLASSIFICATION	// How many bytes into the source are we?
WITHOUT_CLASSIFICATION	// For 'list' and only populated if list is not null.
WITHOUT_CLASSIFICATION	// Last full line read.
WITHOUT_CLASSIFICATION	// Save sourceLine for error reporting to display line where error occurred
WITHOUT_CLASSIFICATION	// Get rest of line. lineBuffer filled as side-effect...
WITHOUT_CLASSIFICATION	// Expand variables, Indentation of final marker
WITHOUT_CLASSIFICATION	// Expand variables, Indentation of final marker
WITHOUT_CLASSIFICATION	// End of string (], ), }, >, ', ", \0)
WITHOUT_CLASSIFICATION	// How many strings are nested in the current string term
WITHOUT_CLASSIFICATION	// Single-quote fast path
WITHOUT_CLASSIFICATION	// Regexp engine 'java'
WITHOUT_CLASSIFICATION	// Was a goto in original ruby lexer
WITHOUT_CLASSIFICATION	/* just ignore */
WITHOUT_CLASSIFICATION	/* octal constant */
WITHOUT_CLASSIFICATION	/* hex constant */
WITHOUT_CLASSIFICATION	// PUSH(1)
WITHOUT_CLASSIFICATION	// POP
WITHOUT_CLASSIFICATION	// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.
WITHOUT_CLASSIFICATION	// LEXPOP
WITHOUT_CLASSIFICATION	// SET_P
WITHOUT_CLASSIFICATION	// Marker delimiting heredoc boundary
WITHOUT_CLASSIFICATION	// Found end marker for this heredoc
WITHOUT_CLASSIFICATION	// Put back lastLine for any elements past start of heredoc marker
WITHOUT_CLASSIFICATION	// Last token read via yylex().
WITHOUT_CLASSIFICATION	// Value of last token which had a value associated with it.
WITHOUT_CLASSIFICATION	// Stream of data that yylex() examines.
WITHOUT_CLASSIFICATION	// Used for tiny smidgen of grammar in lexer (see setParserSupport())
WITHOUT_CLASSIFICATION	// Give a name to a value.  Enebo: This should be used more.
WITHOUT_CLASSIFICATION	// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').
WITHOUT_CLASSIFICATION	// Are we lexing Ruby 1.8 or 1.9+ syntax
WITHOUT_CLASSIFICATION	// Count of nested parentheses (1.9 only)
WITHOUT_CLASSIFICATION	// 1.9 only
WITHOUT_CLASSIFICATION	// Short-hand (e.g. %{,%.,%!,... versus %Q{).
WITHOUT_CLASSIFICATION	// Long-hand (e.g. %Q{}).
WITHOUT_CLASSIFICATION	/* no mb || ismbchar(term)*/
WITHOUT_CLASSIFICATION	/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */
WITHOUT_CLASSIFICATION	// DEBUGGING HELP 
WITHOUT_CLASSIFICATION	/* '\v' */
WITHOUT_CLASSIFICATION	/* end of script. */
WITHOUT_CLASSIFICATION	/* white spaces */
WITHOUT_CLASSIFICATION	/* '\v' */
WITHOUT_CLASSIFICATION	/* it's a comment */
WITHOUT_CLASSIFICATION	// Replace a string of newlines with a single one
WITHOUT_CLASSIFICATION	/* $\: output record separator */
WITHOUT_CLASSIFICATION	// EOF (ENEBO: After default?
WITHOUT_CLASSIFICATION	// documentation nodes
WITHOUT_CLASSIFICATION	// In case last next was the newline.
WITHOUT_CLASSIFICATION	// Just a plain bang
WITHOUT_CLASSIFICATION	/* $_: last read line string */
WITHOUT_CLASSIFICATION	/* $~: match-data */
WITHOUT_CLASSIFICATION	/* $*: argv */
WITHOUT_CLASSIFICATION	/* $$: pid */
WITHOUT_CLASSIFICATION	/* $?: last status */
WITHOUT_CLASSIFICATION	/* $!: error string */
WITHOUT_CLASSIFICATION	/* $@: error position */
WITHOUT_CLASSIFICATION	/* $/: input record separator */
WITHOUT_CLASSIFICATION	/* $;: field separator */
WITHOUT_CLASSIFICATION	/* $,: output field separator */
WITHOUT_CLASSIFICATION	/* $.: last read line number */
WITHOUT_CLASSIFICATION	/* $=: ignorecase */
WITHOUT_CLASSIFICATION	/* $:: load path */
WITHOUT_CLASSIFICATION	/* $<: reading filename */
WITHOUT_CLASSIFICATION	/* $": already loaded files */
WITHOUT_CLASSIFICATION	/* $&: last match */
WITHOUT_CLASSIFICATION	/* $`: string before last match */
WITHOUT_CLASSIFICATION	/* $': string after last match */
WITHOUT_CLASSIFICATION	// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop
WITHOUT_CLASSIFICATION	/* See if it is a reserved word.  */
WITHOUT_CLASSIFICATION	// enum lex_state
WITHOUT_CLASSIFICATION	// block (primary)
WITHOUT_CLASSIFICATION	// block (expr)
WITHOUT_CLASSIFICATION	// hash
WITHOUT_CLASSIFICATION	// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.
WITHOUT_CLASSIFICATION	// FIXME: peek('u') utf8 stuff for 1.9
WITHOUT_CLASSIFICATION	// We don't append '+' since Java number parser gets confused
WITHOUT_CLASSIFICATION	//  hexadecimal
WITHOUT_CLASSIFICATION	// binary
WITHOUT_CLASSIFICATION	// decimal
WITHOUT_CLASSIFICATION	//Octal
WITHOUT_CLASSIFICATION	//  '_' in number just ignored
WITHOUT_CLASSIFICATION	// backslash
WITHOUT_CLASSIFICATION	// newline
WITHOUT_CLASSIFICATION	// horizontal tab
WITHOUT_CLASSIFICATION	// form feed
WITHOUT_CLASSIFICATION	// vertical tab
WITHOUT_CLASSIFICATION	// alarm(bell)
WITHOUT_CLASSIFICATION	// escape
WITHOUT_CLASSIFICATION	// hex constant
WITHOUT_CLASSIFICATION	//char hexValue = scanHex(2);
WITHOUT_CLASSIFICATION	// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).
WITHOUT_CLASSIFICATION	// space
WITHOUT_CLASSIFICATION	// Where we started this marker match
WITHOUT_CLASSIFICATION	// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.
WITHOUT_CLASSIFICATION	// We use offset here to keep track of extra newlines for windows
WITHOUT_CLASSIFICATION	// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).
WITHOUT_CLASSIFICATION	// FIXME: Old Mac format strings?
WITHOUT_CLASSIFICATION	// FIXME: Old Mac format strings?
WITHOUT_CLASSIFICATION	// Where we get our newest char's
WITHOUT_CLASSIFICATION	// Our readback/pushback buffer.
WITHOUT_CLASSIFICATION	// index of last character in pushback buffer
WITHOUT_CLASSIFICATION	// Character read before previous read
WITHOUT_CLASSIFICATION	// keep value of twoAgo around so we can restore after we unread
WITHOUT_CLASSIFICATION	// NetProtocolBufferedIOLibrary
WITHOUT_CLASSIFICATION	// BigDecimalLibrary
WITHOUT_CLASSIFICATION	// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now
WITHOUT_CLASSIFICATION	// Ruby's designation for some platforms, minus version numbers in some cases
WITHOUT_CLASSIFICATION	// that's what JDK5 produces on Windows Vista
WITHOUT_CLASSIFICATION	// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));
WITHOUT_CLASSIFICATION	// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).
WITHOUT_CLASSIFICATION	// this set is only for darwin
WITHOUT_CLASSIFICATION	// DigestLibrary
WITHOUT_CLASSIFICATION	// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error
WITHOUT_CLASSIFICATION	// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error
WITHOUT_CLASSIFICATION	// do nothing, return dummy version below
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	// line 329
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// dynamically increase
WITHOUT_CLASSIFICATION	// discarding a token does not change stack
WITHOUT_CLASSIFICATION	// else [default] reduce (yyN)
WITHOUT_CLASSIFICATION	// shift to yyN
WITHOUT_CLASSIFICATION	// reduce (yyN)
WITHOUT_CLASSIFICATION	// leave stack alone
WITHOUT_CLASSIFICATION	// line 271
WITHOUT_CLASSIFICATION	// line 274
WITHOUT_CLASSIFICATION	// line 303
WITHOUT_CLASSIFICATION	// line 311
WITHOUT_CLASSIFICATION	// line 314
WITHOUT_CLASSIFICATION	// line 317
WITHOUT_CLASSIFICATION	// line 332
WITHOUT_CLASSIFICATION	// line 338
WITHOUT_CLASSIFICATION	// line 341
WITHOUT_CLASSIFICATION	// line 344
WITHOUT_CLASSIFICATION	// line 351
WITHOUT_CLASSIFICATION	// line 358
WITHOUT_CLASSIFICATION	// line 367
WITHOUT_CLASSIFICATION	// line 372
WITHOUT_CLASSIFICATION	// line 378
WITHOUT_CLASSIFICATION	// line 382
WITHOUT_CLASSIFICATION	// line 407
WITHOUT_CLASSIFICATION	// line 411
WITHOUT_CLASSIFICATION	// line 414
WITHOUT_CLASSIFICATION	// line 417
WITHOUT_CLASSIFICATION	// line 420
WITHOUT_CLASSIFICATION	// line 426
WITHOUT_CLASSIFICATION	// line 434
WITHOUT_CLASSIFICATION	// line 443
WITHOUT_CLASSIFICATION	// line 446
WITHOUT_CLASSIFICATION	// line 452
WITHOUT_CLASSIFICATION	// line 457
WITHOUT_CLASSIFICATION	// line 464
WITHOUT_CLASSIFICATION	// line 467
WITHOUT_CLASSIFICATION	// line 470
WITHOUT_CLASSIFICATION	// line 479
WITHOUT_CLASSIFICATION	// line 484
WITHOUT_CLASSIFICATION	// line 486
WITHOUT_CLASSIFICATION	// line 492
WITHOUT_CLASSIFICATION	// line 498
WITHOUT_CLASSIFICATION	// line 501
WITHOUT_CLASSIFICATION	// line 504
WITHOUT_CLASSIFICATION	// line 507
WITHOUT_CLASSIFICATION	// line 510
WITHOUT_CLASSIFICATION	// line 519
WITHOUT_CLASSIFICATION	// line 525
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// line 537
WITHOUT_CLASSIFICATION	// line 540
WITHOUT_CLASSIFICATION	// line 543
WITHOUT_CLASSIFICATION	// line 546
WITHOUT_CLASSIFICATION	// line 556
WITHOUT_CLASSIFICATION	// line 559
WITHOUT_CLASSIFICATION	// line 563
WITHOUT_CLASSIFICATION	// line 566
WITHOUT_CLASSIFICATION	// line 569
WITHOUT_CLASSIFICATION	// line 575
WITHOUT_CLASSIFICATION	// line 578
WITHOUT_CLASSIFICATION	// line 587
WITHOUT_CLASSIFICATION	// line 596
WITHOUT_CLASSIFICATION	// line 604
WITHOUT_CLASSIFICATION	// line 607
WITHOUT_CLASSIFICATION	// line 610
WITHOUT_CLASSIFICATION	// line 613
WITHOUT_CLASSIFICATION	// line 616
WITHOUT_CLASSIFICATION	// line 634
WITHOUT_CLASSIFICATION	// line 638
WITHOUT_CLASSIFICATION	// line 643
WITHOUT_CLASSIFICATION	// line 646
WITHOUT_CLASSIFICATION	// line 655
WITHOUT_CLASSIFICATION	// line 660
WITHOUT_CLASSIFICATION	// line 667
WITHOUT_CLASSIFICATION	// line 670
WITHOUT_CLASSIFICATION	// line 672
WITHOUT_CLASSIFICATION	// line 696
WITHOUT_CLASSIFICATION	// line 701
WITHOUT_CLASSIFICATION	// line 717
WITHOUT_CLASSIFICATION	// line 720
WITHOUT_CLASSIFICATION	// line 726
WITHOUT_CLASSIFICATION	// line 729
WITHOUT_CLASSIFICATION	// line 732
WITHOUT_CLASSIFICATION	// line 735
WITHOUT_CLASSIFICATION	// line 738
WITHOUT_CLASSIFICATION	// line 751
WITHOUT_CLASSIFICATION	// line 754
WITHOUT_CLASSIFICATION	// line 757
WITHOUT_CLASSIFICATION	// line 760
WITHOUT_CLASSIFICATION	// line 763
WITHOUT_CLASSIFICATION	// line 769
WITHOUT_CLASSIFICATION	// line 772
WITHOUT_CLASSIFICATION	// line 775
WITHOUT_CLASSIFICATION	// line 782
WITHOUT_CLASSIFICATION	// line 788
WITHOUT_CLASSIFICATION	// line 791
WITHOUT_CLASSIFICATION	// line 794
WITHOUT_CLASSIFICATION	// line 797
WITHOUT_CLASSIFICATION	// line 803
WITHOUT_CLASSIFICATION	// line 806
WITHOUT_CLASSIFICATION	// line 809
WITHOUT_CLASSIFICATION	// line 815
WITHOUT_CLASSIFICATION	// line 818
WITHOUT_CLASSIFICATION	// line 821
WITHOUT_CLASSIFICATION	// line 824
WITHOUT_CLASSIFICATION	// line 830
WITHOUT_CLASSIFICATION	// line 833
WITHOUT_CLASSIFICATION	// line 836
WITHOUT_CLASSIFICATION	// line 839
WITHOUT_CLASSIFICATION	// line 842
WITHOUT_CLASSIFICATION	// line 848
WITHOUT_CLASSIFICATION	// line 852
WITHOUT_CLASSIFICATION	// line 858
WITHOUT_CLASSIFICATION	// line 861
WITHOUT_CLASSIFICATION	// line 868
WITHOUT_CLASSIFICATION	// line 871
WITHOUT_CLASSIFICATION	// line 876
WITHOUT_CLASSIFICATION	// line 879
WITHOUT_CLASSIFICATION	// line 883
WITHOUT_CLASSIFICATION	// line 893
WITHOUT_CLASSIFICATION	// line 896
WITHOUT_CLASSIFICATION	// line 899
WITHOUT_CLASSIFICATION	// line 903
WITHOUT_CLASSIFICATION	// line 907
WITHOUT_CLASSIFICATION	// line 915
WITHOUT_CLASSIFICATION	// line 920
WITHOUT_CLASSIFICATION	// line 923
WITHOUT_CLASSIFICATION	// line 926
WITHOUT_CLASSIFICATION	// line 932
WITHOUT_CLASSIFICATION	// line 936
WITHOUT_CLASSIFICATION	// line 940
WITHOUT_CLASSIFICATION	// line 944
WITHOUT_CLASSIFICATION	// line 948
WITHOUT_CLASSIFICATION	// line 956
WITHOUT_CLASSIFICATION	// line 960
WITHOUT_CLASSIFICATION	// line 964
WITHOUT_CLASSIFICATION	// line 967
WITHOUT_CLASSIFICATION	// line 972
WITHOUT_CLASSIFICATION	// line 978
WITHOUT_CLASSIFICATION	// line 980
WITHOUT_CLASSIFICATION	// line 984
WITHOUT_CLASSIFICATION	// line 986
WITHOUT_CLASSIFICATION	// line 996
WITHOUT_CLASSIFICATION	// line 1001
WITHOUT_CLASSIFICATION	// line 1004
WITHOUT_CLASSIFICATION	// line 1008
WITHOUT_CLASSIFICATION	// line 1014
WITHOUT_CLASSIFICATION	// line 1029
WITHOUT_CLASSIFICATION	// line 1032
WITHOUT_CLASSIFICATION	// line 1034
WITHOUT_CLASSIFICATION	// line 1045
WITHOUT_CLASSIFICATION	// line 1048
WITHOUT_CLASSIFICATION	// line 1051
WITHOUT_CLASSIFICATION	// line 1058
WITHOUT_CLASSIFICATION	// line 1070
WITHOUT_CLASSIFICATION	// line 1073
WITHOUT_CLASSIFICATION	// line 1076
WITHOUT_CLASSIFICATION	// line 1079
WITHOUT_CLASSIFICATION	// line 1082
WITHOUT_CLASSIFICATION	// line 1089
WITHOUT_CLASSIFICATION	// line 1097
WITHOUT_CLASSIFICATION	// line 1100
WITHOUT_CLASSIFICATION	// line 1103
WITHOUT_CLASSIFICATION	// line 1107
WITHOUT_CLASSIFICATION	// line 1111
WITHOUT_CLASSIFICATION	// line 1113
WITHOUT_CLASSIFICATION	// line 1115
WITHOUT_CLASSIFICATION	// line 1119
WITHOUT_CLASSIFICATION	// line 1130
WITHOUT_CLASSIFICATION	// line 1133
WITHOUT_CLASSIFICATION	// line 1135
WITHOUT_CLASSIFICATION	// line 1137
WITHOUT_CLASSIFICATION	// line 1140
WITHOUT_CLASSIFICATION	// line 1151
WITHOUT_CLASSIFICATION	// line 1154
WITHOUT_CLASSIFICATION	// line 1158
WITHOUT_CLASSIFICATION	// line 1164
WITHOUT_CLASSIFICATION	// line 1175
WITHOUT_CLASSIFICATION	// line 1178
WITHOUT_CLASSIFICATION	// line 1187
WITHOUT_CLASSIFICATION	// line 1189
WITHOUT_CLASSIFICATION	// line 1193
WITHOUT_CLASSIFICATION	// line 1204
WITHOUT_CLASSIFICATION	// line 1207
WITHOUT_CLASSIFICATION	// line 1210
WITHOUT_CLASSIFICATION	// line 1214
WITHOUT_CLASSIFICATION	// line 1234
WITHOUT_CLASSIFICATION	// line 1239
WITHOUT_CLASSIFICATION	// line 1243
WITHOUT_CLASSIFICATION	// line 1247
WITHOUT_CLASSIFICATION	// line 1251
WITHOUT_CLASSIFICATION	// line 1263
WITHOUT_CLASSIFICATION	// line 1269
WITHOUT_CLASSIFICATION	// line 1280
WITHOUT_CLASSIFICATION	// line 1283
WITHOUT_CLASSIFICATION	// line 1290
WITHOUT_CLASSIFICATION	// line 1296
WITHOUT_CLASSIFICATION	// line 1299
WITHOUT_CLASSIFICATION	// line 1302
WITHOUT_CLASSIFICATION	// line 1309
WITHOUT_CLASSIFICATION	// line 1313
WITHOUT_CLASSIFICATION	// line 1315
WITHOUT_CLASSIFICATION	// line 1320
WITHOUT_CLASSIFICATION	// line 1328
WITHOUT_CLASSIFICATION	// line 1335
WITHOUT_CLASSIFICATION	// line 1348
WITHOUT_CLASSIFICATION	// line 1352
WITHOUT_CLASSIFICATION	// line 1358
WITHOUT_CLASSIFICATION	// line 1374
WITHOUT_CLASSIFICATION	// line 1381
WITHOUT_CLASSIFICATION	// line 1387
WITHOUT_CLASSIFICATION	// line 1392
WITHOUT_CLASSIFICATION	// line 1415
WITHOUT_CLASSIFICATION	// line 1431
WITHOUT_CLASSIFICATION	// line 1434
WITHOUT_CLASSIFICATION	// line 1440
WITHOUT_CLASSIFICATION	// line 1443
WITHOUT_CLASSIFICATION	// line 1453
WITHOUT_CLASSIFICATION	// line 1456
WITHOUT_CLASSIFICATION	// line 1462
WITHOUT_CLASSIFICATION	// line 1465
WITHOUT_CLASSIFICATION	// line 1470
WITHOUT_CLASSIFICATION	// line 1477
WITHOUT_CLASSIFICATION	// line 1480
WITHOUT_CLASSIFICATION	// line 1485
WITHOUT_CLASSIFICATION	// line 1488
WITHOUT_CLASSIFICATION	// line 1496
WITHOUT_CLASSIFICATION	// line 1502
WITHOUT_CLASSIFICATION	// line 1510
WITHOUT_CLASSIFICATION	// line 1513
WITHOUT_CLASSIFICATION	// line 1516
WITHOUT_CLASSIFICATION	// line 1533
WITHOUT_CLASSIFICATION	// line 1550
WITHOUT_CLASSIFICATION	// line 1553
WITHOUT_CLASSIFICATION	// line 1556
WITHOUT_CLASSIFICATION	// line 1565
WITHOUT_CLASSIFICATION	// line 1568
WITHOUT_CLASSIFICATION	// line 1571
WITHOUT_CLASSIFICATION	// line 1574
WITHOUT_CLASSIFICATION	// line 1577
WITHOUT_CLASSIFICATION	// line 1587
WITHOUT_CLASSIFICATION	// line 1595
WITHOUT_CLASSIFICATION	// line 1598
WITHOUT_CLASSIFICATION	// line 1600
WITHOUT_CLASSIFICATION	// line 1609
WITHOUT_CLASSIFICATION	// line 1623
WITHOUT_CLASSIFICATION	// line 1626
WITHOUT_CLASSIFICATION	// line 1629
WITHOUT_CLASSIFICATION	// line 1632
WITHOUT_CLASSIFICATION	// line 1638
WITHOUT_CLASSIFICATION	// line 1641
WITHOUT_CLASSIFICATION	// line 1644
WITHOUT_CLASSIFICATION	// line 1649
WITHOUT_CLASSIFICATION	// line 1655
WITHOUT_CLASSIFICATION	// line 1658
WITHOUT_CLASSIFICATION	// line 1661
WITHOUT_CLASSIFICATION	// line 1672
WITHOUT_CLASSIFICATION	// line 1677
WITHOUT_CLASSIFICATION	// line 1687
WITHOUT_CLASSIFICATION	// line 1694
WITHOUT_CLASSIFICATION	// line 1705
WITHOUT_CLASSIFICATION	// line 1708
WITHOUT_CLASSIFICATION	// line 1725
WITHOUT_CLASSIFICATION	// line 1733
WITHOUT_CLASSIFICATION	// line 1742
WITHOUT_CLASSIFICATION	// line 1745
WITHOUT_CLASSIFICATION	// line 1749
WITHOUT_CLASSIFICATION	// line 1757
WITHOUT_CLASSIFICATION	// line 1769
WITHOUT_CLASSIFICATION	// line 1772
WITHOUT_CLASSIFICATION	// line 1775
WITHOUT_CLASSIFICATION	// line 1784
WITHOUT_CLASSIFICATION	// line 1808
WITHOUT_CLASSIFICATION	// line 1814
WITHOUT_CLASSIFICATION	// line 1818
WITHOUT_CLASSIFICATION	// line 1822
WITHOUT_CLASSIFICATION	/* force for args */
WITHOUT_CLASSIFICATION	/*XXX 0;*/
WITHOUT_CLASSIFICATION	/*                      $$ = $3;*/
WITHOUT_CLASSIFICATION	/*                  }*/
WITHOUT_CLASSIFICATION	/* last expression should not be void */
WITHOUT_CLASSIFICATION	/* compstmt position includes both parens around it*/
WITHOUT_CLASSIFICATION	/*$8 == null ? NilImplicitNode.NIL : $8;*/
WITHOUT_CLASSIFICATION	/*$5 == null ? NilImplicitNode.NIL : $5;*/
WITHOUT_CLASSIFICATION	/* NOEX_PRIVATE for toplevel */
WITHOUT_CLASSIFICATION	/*mirko: check*/
WITHOUT_CLASSIFICATION	/* Include pipes on multiple arg type*/
WITHOUT_CLASSIFICATION	// line 529
WITHOUT_CLASSIFICATION	/* .setPosFrom($2);*/
WITHOUT_CLASSIFICATION	/* XXX*/
WITHOUT_CLASSIFICATION	/* zero length array */
WITHOUT_CLASSIFICATION	/* DStrNode: :"some text #{some expression}"*/
WITHOUT_CLASSIFICATION	/* StrNode: :"some text"*/
WITHOUT_CLASSIFICATION	/* EvStrNode :"#{some expression}"*/
WITHOUT_CLASSIFICATION	// line 1827 "DefaultRubyParser.y"
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));
WITHOUT_CLASSIFICATION	// line 7713 "-"
WITHOUT_CLASSIFICATION	// local scopes are argument scopes by default
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.
WITHOUT_CLASSIFICATION	// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic
WITHOUT_CLASSIFICATION	// odd...but it is odd in ruby too.
WITHOUT_CLASSIFICATION	// What linenumber will the source think it starts from?
WITHOUT_CLASSIFICATION	// Is this inline source (aka -e "...source...")
WITHOUT_CLASSIFICATION	// We parse evals more often in source so assume an eval parse.
WITHOUT_CLASSIFICATION	// Should positions added extra IDE-friendly information and leave in all newline nodes
WITHOUT_CLASSIFICATION	// Will parser parse Duby grammar Extensions
WITHOUT_CLASSIFICATION	// Should we display extra debug information while parsing?
WITHOUT_CLASSIFICATION	// __END__ marker offset (-1 means none present)
WITHOUT_CLASSIFICATION	// Parser states:
WITHOUT_CLASSIFICATION	// Is the parser current within a singleton (value is number of nested singletons)
WITHOUT_CLASSIFICATION	// Is the parser currently within a method definition
WITHOUT_CLASSIFICATION	// LOCALVAR
WITHOUT_CLASSIFICATION	// CONSTANT
WITHOUT_CLASSIFICATION	// INSTANCE VARIABLE
WITHOUT_CLASSIFICATION	// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])
WITHOUT_CLASSIFICATION	/* MRI: block_append */
WITHOUT_CLASSIFICATION	// Reduces overhead in interp by not set position every single line we encounter. 
WITHOUT_CLASSIFICATION	// Assumption: tail is never a list node
WITHOUT_CLASSIFICATION	//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));
WITHOUT_CLASSIFICATION	// Node
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/
WITHOUT_CLASSIFICATION	/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/
WITHOUT_CLASSIFICATION	// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"
WITHOUT_CLASSIFICATION	/* MRI: range_op */
WITHOUT_CLASSIFICATION	// Block and block pass passed in at same time....uh oh
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// tail must be EvStrNode at this point 
WITHOUT_CLASSIFICATION	//Do not add an empty string node
WITHOUT_CLASSIFICATION	// Zero-Argument declaration
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// dynamically increase
WITHOUT_CLASSIFICATION	// else [default] reduce (yyN)
WITHOUT_CLASSIFICATION	// shift to yyN
WITHOUT_CLASSIFICATION	// reduce (yyN)
WITHOUT_CLASSIFICATION	// leave stack alone
WITHOUT_CLASSIFICATION	// line 321
WITHOUT_CLASSIFICATION	// line 351
WITHOUT_CLASSIFICATION	// line 382
WITHOUT_CLASSIFICATION	// line 417
WITHOUT_CLASSIFICATION	// line 420
WITHOUT_CLASSIFICATION	// line 423
WITHOUT_CLASSIFICATION	// line 426
WITHOUT_CLASSIFICATION	// line 280
WITHOUT_CLASSIFICATION	// line 283
WITHOUT_CLASSIFICATION	// line 296
WITHOUT_CLASSIFICATION	// line 324
WITHOUT_CLASSIFICATION	// line 327
WITHOUT_CLASSIFICATION	// line 331
WITHOUT_CLASSIFICATION	// line 333
WITHOUT_CLASSIFICATION	// line 336
WITHOUT_CLASSIFICATION	// line 342
WITHOUT_CLASSIFICATION	// line 345
WITHOUT_CLASSIFICATION	// line 348
WITHOUT_CLASSIFICATION	// line 354
WITHOUT_CLASSIFICATION	// line 368
WITHOUT_CLASSIFICATION	// line 377
WITHOUT_CLASSIFICATION	// line 388
WITHOUT_CLASSIFICATION	// line 392
WITHOUT_CLASSIFICATION	// line 397
WITHOUT_CLASSIFICATION	// line 429
WITHOUT_CLASSIFICATION	// line 432
WITHOUT_CLASSIFICATION	// line 436
WITHOUT_CLASSIFICATION	// line 445
WITHOUT_CLASSIFICATION	// line 448
WITHOUT_CLASSIFICATION	// line 454
WITHOUT_CLASSIFICATION	// line 459
WITHOUT_CLASSIFICATION	// line 466
WITHOUT_CLASSIFICATION	// line 469
WITHOUT_CLASSIFICATION	// line 478
WITHOUT_CLASSIFICATION	// line 481
WITHOUT_CLASSIFICATION	// line 488
WITHOUT_CLASSIFICATION	// line 494
WITHOUT_CLASSIFICATION	// line 497
WITHOUT_CLASSIFICATION	// line 503
WITHOUT_CLASSIFICATION	// line 506
WITHOUT_CLASSIFICATION	// line 509
WITHOUT_CLASSIFICATION	// line 512
WITHOUT_CLASSIFICATION	// line 521
WITHOUT_CLASSIFICATION	// line 526
WITHOUT_CLASSIFICATION	// line 540
WITHOUT_CLASSIFICATION	// line 543
WITHOUT_CLASSIFICATION	// line 546
WITHOUT_CLASSIFICATION	// line 566
WITHOUT_CLASSIFICATION	// line 610
WITHOUT_CLASSIFICATION	// line 672
WITHOUT_CLASSIFICATION	// line 691
WITHOUT_CLASSIFICATION	// line 696
WITHOUT_CLASSIFICATION	// line 772
WITHOUT_CLASSIFICATION	// line 782
WITHOUT_CLASSIFICATION	// line 785
WITHOUT_CLASSIFICATION	// line 788
WITHOUT_CLASSIFICATION	// line 791
WITHOUT_CLASSIFICATION	// line 534
WITHOUT_CLASSIFICATION	// line 549
WITHOUT_CLASSIFICATION	// line 552
WITHOUT_CLASSIFICATION	// line 558
WITHOUT_CLASSIFICATION	// line 561
WITHOUT_CLASSIFICATION	// line 571
WITHOUT_CLASSIFICATION	// line 574
WITHOUT_CLASSIFICATION	// line 579
WITHOUT_CLASSIFICATION	// line 586
WITHOUT_CLASSIFICATION	// line 589
WITHOUT_CLASSIFICATION	// line 592
WITHOUT_CLASSIFICATION	// line 595
WITHOUT_CLASSIFICATION	// line 598
WITHOUT_CLASSIFICATION	// line 623
WITHOUT_CLASSIFICATION	// line 627
WITHOUT_CLASSIFICATION	// line 630
WITHOUT_CLASSIFICATION	// line 633
WITHOUT_CLASSIFICATION	// line 639
WITHOUT_CLASSIFICATION	// line 648
WITHOUT_CLASSIFICATION	// line 657
WITHOUT_CLASSIFICATION	// line 661
WITHOUT_CLASSIFICATION	// line 666
WITHOUT_CLASSIFICATION	// line 678
WITHOUT_CLASSIFICATION	// line 682
WITHOUT_CLASSIFICATION	// line 688
WITHOUT_CLASSIFICATION	// line 699
WITHOUT_CLASSIFICATION	// line 706
WITHOUT_CLASSIFICATION	// line 708
WITHOUT_CLASSIFICATION	// line 727
WITHOUT_CLASSIFICATION	// line 737
WITHOUT_CLASSIFICATION	// line 753
WITHOUT_CLASSIFICATION	// line 779
WITHOUT_CLASSIFICATION	// line 801
WITHOUT_CLASSIFICATION	// line 808
WITHOUT_CLASSIFICATION	// line 811
WITHOUT_CLASSIFICATION	// line 817
WITHOUT_CLASSIFICATION	// line 842
WITHOUT_CLASSIFICATION	// line 845
WITHOUT_CLASSIFICATION	// line 848
WITHOUT_CLASSIFICATION	// line 893
WITHOUT_CLASSIFICATION	// line 899
WITHOUT_CLASSIFICATION	// line 932
WITHOUT_CLASSIFICATION	// line 944
WITHOUT_CLASSIFICATION	// line 960
WITHOUT_CLASSIFICATION	// line 980
WITHOUT_CLASSIFICATION	// line 1004
WITHOUT_CLASSIFICATION	// line 1038
WITHOUT_CLASSIFICATION	// line 820
WITHOUT_CLASSIFICATION	// line 826
WITHOUT_CLASSIFICATION	// line 829
WITHOUT_CLASSIFICATION	// line 832
WITHOUT_CLASSIFICATION	// line 851
WITHOUT_CLASSIFICATION	// line 857
WITHOUT_CLASSIFICATION	// line 860
WITHOUT_CLASSIFICATION	// line 863
WITHOUT_CLASSIFICATION	// line 866
WITHOUT_CLASSIFICATION	// line 869
WITHOUT_CLASSIFICATION	// line 875
WITHOUT_CLASSIFICATION	// line 884
WITHOUT_CLASSIFICATION	// line 887
WITHOUT_CLASSIFICATION	// line 890
WITHOUT_CLASSIFICATION	// line 902
WITHOUT_CLASSIFICATION	// line 909
WITHOUT_CLASSIFICATION	// line 912
WITHOUT_CLASSIFICATION	// line 916
WITHOUT_CLASSIFICATION	// line 922
WITHOUT_CLASSIFICATION	// line 928
WITHOUT_CLASSIFICATION	// line 941
WITHOUT_CLASSIFICATION	// line 947
WITHOUT_CLASSIFICATION	// line 951
WITHOUT_CLASSIFICATION	// line 955
WITHOUT_CLASSIFICATION	// line 965
WITHOUT_CLASSIFICATION	// line 969
WITHOUT_CLASSIFICATION	// line 977
WITHOUT_CLASSIFICATION	// line 983
WITHOUT_CLASSIFICATION	// line 1013
WITHOUT_CLASSIFICATION	// line 1023
WITHOUT_CLASSIFICATION	// line 1035
WITHOUT_CLASSIFICATION	// line 1041
WITHOUT_CLASSIFICATION	// line 1043
WITHOUT_CLASSIFICATION	// line 1054
WITHOUT_CLASSIFICATION	// line 1057
WITHOUT_CLASSIFICATION	// line 1060
WITHOUT_CLASSIFICATION	// line 1069
WITHOUT_CLASSIFICATION	// line 1075
WITHOUT_CLASSIFICATION	// line 1105
WITHOUT_CLASSIFICATION	// line 1111
WITHOUT_CLASSIFICATION	// line 1122
WITHOUT_CLASSIFICATION	// line 1130
WITHOUT_CLASSIFICATION	// line 1140
WITHOUT_CLASSIFICATION	// line 1158
WITHOUT_CLASSIFICATION	// line 1204
WITHOUT_CLASSIFICATION	// line 1207
WITHOUT_CLASSIFICATION	// line 1247
WITHOUT_CLASSIFICATION	// line 1251
WITHOUT_CLASSIFICATION	// line 1261
WITHOUT_CLASSIFICATION	// line 1078
WITHOUT_CLASSIFICATION	// line 1084
WITHOUT_CLASSIFICATION	// line 1087
WITHOUT_CLASSIFICATION	// line 1090
WITHOUT_CLASSIFICATION	// line 1093
WITHOUT_CLASSIFICATION	// line 1114
WITHOUT_CLASSIFICATION	// line 1116
WITHOUT_CLASSIFICATION	// line 1118
WITHOUT_CLASSIFICATION	// line 1124
WITHOUT_CLASSIFICATION	// line 1126
WITHOUT_CLASSIFICATION	// line 1138
WITHOUT_CLASSIFICATION	// line 1144
WITHOUT_CLASSIFICATION	// line 1149
WITHOUT_CLASSIFICATION	// line 1155
WITHOUT_CLASSIFICATION	// line 1162
WITHOUT_CLASSIFICATION	// line 1173
WITHOUT_CLASSIFICATION	// line 1179
WITHOUT_CLASSIFICATION	// line 1182
WITHOUT_CLASSIFICATION	// line 1190
WITHOUT_CLASSIFICATION	// line 1196
WITHOUT_CLASSIFICATION	// line 1213
WITHOUT_CLASSIFICATION	// line 1217
WITHOUT_CLASSIFICATION	// line 1231
WITHOUT_CLASSIFICATION	// line 1236
WITHOUT_CLASSIFICATION	// line 1244
WITHOUT_CLASSIFICATION	// line 1254
WITHOUT_CLASSIFICATION	// line 1258
WITHOUT_CLASSIFICATION	// line 1264
WITHOUT_CLASSIFICATION	// line 1270
WITHOUT_CLASSIFICATION	// line 1273
WITHOUT_CLASSIFICATION	// line 1276
WITHOUT_CLASSIFICATION	// line 1279
WITHOUT_CLASSIFICATION	// line 1282
WITHOUT_CLASSIFICATION	// line 1289
WITHOUT_CLASSIFICATION	// line 1292
WITHOUT_CLASSIFICATION	// line 1295
WITHOUT_CLASSIFICATION	// line 1298
WITHOUT_CLASSIFICATION	// line 1305
WITHOUT_CLASSIFICATION	// line 1348
WITHOUT_CLASSIFICATION	// line 1387
WITHOUT_CLASSIFICATION	// line 1392
WITHOUT_CLASSIFICATION	// line 1448
WITHOUT_CLASSIFICATION	// line 1462
WITHOUT_CLASSIFICATION	// line 1470
WITHOUT_CLASSIFICATION	// line 1496
WITHOUT_CLASSIFICATION	// line 1502
WITHOUT_CLASSIFICATION	// line 1595
WITHOUT_CLASSIFICATION	// line 1598
WITHOUT_CLASSIFICATION	// line 1308
WITHOUT_CLASSIFICATION	// line 1311
WITHOUT_CLASSIFICATION	// line 1317
WITHOUT_CLASSIFICATION	// line 1323
WITHOUT_CLASSIFICATION	// line 1326
WITHOUT_CLASSIFICATION	// line 1329
WITHOUT_CLASSIFICATION	// line 1337
WITHOUT_CLASSIFICATION	// line 1342
WITHOUT_CLASSIFICATION	// line 1345
WITHOUT_CLASSIFICATION	// line 1354
WITHOUT_CLASSIFICATION	// line 1359
WITHOUT_CLASSIFICATION	// line 1366
WITHOUT_CLASSIFICATION	// line 1369
WITHOUT_CLASSIFICATION	// line 1373
WITHOUT_CLASSIFICATION	// line 1377
WITHOUT_CLASSIFICATION	// line 1383
WITHOUT_CLASSIFICATION	// line 1399
WITHOUT_CLASSIFICATION	// line 1401
WITHOUT_CLASSIFICATION	// line 1406
WITHOUT_CLASSIFICATION	// line 1417
WITHOUT_CLASSIFICATION	// line 1424
WITHOUT_CLASSIFICATION	// line 1427
WITHOUT_CLASSIFICATION	// line 1430
WITHOUT_CLASSIFICATION	// line 1433
WITHOUT_CLASSIFICATION	// line 1436
WITHOUT_CLASSIFICATION	// line 1442
WITHOUT_CLASSIFICATION	// line 1445
WITHOUT_CLASSIFICATION	// line 1458
WITHOUT_CLASSIFICATION	// line 1464
WITHOUT_CLASSIFICATION	// line 1489
WITHOUT_CLASSIFICATION	// line 1493
WITHOUT_CLASSIFICATION	// line 1507
WITHOUT_CLASSIFICATION	// line 1519
WITHOUT_CLASSIFICATION	// line 1532
WITHOUT_CLASSIFICATION	// line 1538
WITHOUT_CLASSIFICATION	// line 1542
WITHOUT_CLASSIFICATION	// line 1557
WITHOUT_CLASSIFICATION	// line 1573
WITHOUT_CLASSIFICATION	// line 1591
WITHOUT_CLASSIFICATION	// line 1615
WITHOUT_CLASSIFICATION	// line 1629
WITHOUT_CLASSIFICATION	// line 1632
WITHOUT_CLASSIFICATION	// line 1705
WITHOUT_CLASSIFICATION	// line 1716
WITHOUT_CLASSIFICATION	// line 1725
WITHOUT_CLASSIFICATION	// line 1742
WITHOUT_CLASSIFICATION	// line 1749
WITHOUT_CLASSIFICATION	// line 1818
WITHOUT_CLASSIFICATION	// line 1822
WITHOUT_CLASSIFICATION	// line 1607
WITHOUT_CLASSIFICATION	// line 1610
WITHOUT_CLASSIFICATION	// line 1622
WITHOUT_CLASSIFICATION	// line 1625
WITHOUT_CLASSIFICATION	// line 1636
WITHOUT_CLASSIFICATION	// line 1639
WITHOUT_CLASSIFICATION	// line 1647
WITHOUT_CLASSIFICATION	// line 1651
WITHOUT_CLASSIFICATION	// line 1657
WITHOUT_CLASSIFICATION	// line 1660
WITHOUT_CLASSIFICATION	// line 1663
WITHOUT_CLASSIFICATION	// line 1678
WITHOUT_CLASSIFICATION	// line 1702
WITHOUT_CLASSIFICATION	// line 1711
WITHOUT_CLASSIFICATION	// line 1719
WITHOUT_CLASSIFICATION	// line 1722
WITHOUT_CLASSIFICATION	// line 1731
WITHOUT_CLASSIFICATION	// line 1734
WITHOUT_CLASSIFICATION	// line 1738
WITHOUT_CLASSIFICATION	// line 1746
WITHOUT_CLASSIFICATION	// line 1756
WITHOUT_CLASSIFICATION	// line 1758
WITHOUT_CLASSIFICATION	// line 1761
WITHOUT_CLASSIFICATION	// line 1767
WITHOUT_CLASSIFICATION	// line 1776
WITHOUT_CLASSIFICATION	// line 1782
WITHOUT_CLASSIFICATION	// line 1785
WITHOUT_CLASSIFICATION	// line 1788
WITHOUT_CLASSIFICATION	// line 1791
WITHOUT_CLASSIFICATION	// line 1797
WITHOUT_CLASSIFICATION	// line 1800
WITHOUT_CLASSIFICATION	// line 1803
WITHOUT_CLASSIFICATION	// line 1806
WITHOUT_CLASSIFICATION	// line 1809
WITHOUT_CLASSIFICATION	// line 1815
WITHOUT_CLASSIFICATION	// line 1825
WITHOUT_CLASSIFICATION	// line 1828
WITHOUT_CLASSIFICATION	// line 1831
WITHOUT_CLASSIFICATION	// line 1847
WITHOUT_CLASSIFICATION	/*$8 == null ? NilImplicitNode.NIL : $8;*/
WITHOUT_CLASSIFICATION	/*$5 == null ? NilImplicitNode.NIL : $5;*/
WITHOUT_CLASSIFICATION	/* .setPosFrom($2);*/
WITHOUT_CLASSIFICATION	/* zero length array */
WITHOUT_CLASSIFICATION	/* DStrNode: :"some text #{some expression}"*/
WITHOUT_CLASSIFICATION	/* StrNode: :"some text"*/
WITHOUT_CLASSIFICATION	/* EvStrNode :"#{some expression}"*/
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// line 1854
WITHOUT_CLASSIFICATION	// line 1869
WITHOUT_CLASSIFICATION	// line 1872
WITHOUT_CLASSIFICATION	// line 1877
WITHOUT_CLASSIFICATION	// line 1886
WITHOUT_CLASSIFICATION	// line 1898
WITHOUT_CLASSIFICATION	// line 1902
WITHOUT_CLASSIFICATION	// line 1905
WITHOUT_CLASSIFICATION	// line 1911
WITHOUT_CLASSIFICATION	// line 1918
WITHOUT_CLASSIFICATION	// line 1935
WITHOUT_CLASSIFICATION	// line 1938
WITHOUT_CLASSIFICATION	// line 1942
WITHOUT_CLASSIFICATION	// line 1948
WITHOUT_CLASSIFICATION	// line 1960
WITHOUT_CLASSIFICATION	// line 1963
WITHOUT_CLASSIFICATION	// line 1968
WITHOUT_CLASSIFICATION	// line 1972
WITHOUT_CLASSIFICATION	// line 1982
WITHOUT_CLASSIFICATION	// line 1995
WITHOUT_CLASSIFICATION	// line 2000
WITHOUT_CLASSIFICATION	// line 2006
WITHOUT_CLASSIFICATION	// line 2010
WITHOUT_CLASSIFICATION	/* We may need to subtract addition offset off of first */
WITHOUT_CLASSIFICATION	/* string fragment (we optimistically take one off in*/
WITHOUT_CLASSIFICATION	/* ParserSupport.literal_concat).  Check token length*/
WITHOUT_CLASSIFICATION	/* and subtract as neeeded.*/
WITHOUT_CLASSIFICATION	/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */
WITHOUT_CLASSIFICATION	/* ENEBO: arg surrounded by in_defined set/unset*/
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/
WITHOUT_CLASSIFICATION	/* was $$ = null;*/
WITHOUT_CLASSIFICATION	// line 2019 "Ruby19Parser.y"
WITHOUT_CLASSIFICATION	// line 8143 "-"
WITHOUT_CLASSIFICATION	// we know variables cannot be null since localstaticscope will create a 0 length one.
WITHOUT_CLASSIFICATION	// No bit math to store level since we know level is zero for this case
WITHOUT_CLASSIFICATION	// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.
WITHOUT_CLASSIFICATION	// Live reference to module
WITHOUT_CLASSIFICATION	// Next CRef down the lexical structure
WITHOUT_CLASSIFICATION	// Our name holder (offsets are assigned as variables are added
WITHOUT_CLASSIFICATION	// number of variables in this scope representing required arguments
WITHOUT_CLASSIFICATION	// number of variables in this scope representing optional arguments
WITHOUT_CLASSIFICATION	// index of variable that represents a "rest" arg
WITHOUT_CLASSIFICATION	// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.
WITHOUT_CLASSIFICATION	// Returns slot of variable
WITHOUT_CLASSIFICATION	// Returns slot of variable
WITHOUT_CLASSIFICATION	/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */
WITHOUT_CLASSIFICATION	// If we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	/* Try and unload the autoload specified from internedName */
WITHOUT_CLASSIFICATION	// We override that the logic which uses this
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// source extensions
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// Is this thread currently with in a function trace?
WITHOUT_CLASSIFICATION	// Is this thread currently doing an defined? defined should set things like $!
WITHOUT_CLASSIFICATION	//private UnsynchronizedStack parentStack;
WITHOUT_CLASSIFICATION	//private UnsynchronizedStack frameStack;
WITHOUT_CLASSIFICATION	// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.
WITHOUT_CLASSIFICATION	// File where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	// Line where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.
WITHOUT_CLASSIFICATION	// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.
WITHOUT_CLASSIFICATION	//////////////////// CATCH MANAGEMENT ////////////////////////
WITHOUT_CLASSIFICATION	//////////////////// FRAME MANAGEMENT ////////////////////////
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// assert level == 0;
WITHOUT_CLASSIFICATION	// assert level == 0;
WITHOUT_CLASSIFICATION	// look for mangling markers for compiled Ruby in method name
WITHOUT_CLASSIFICATION	// if it's not a rescue or ensure, there's a frame associated, so decrement
WITHOUT_CLASSIFICATION	// look for __file__ method name for compiled roots
WITHOUT_CLASSIFICATION	// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.
WITHOUT_CLASSIFICATION	// required and optional only
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// look for mangling markers for bound, unframed methods in class name
WITHOUT_CLASSIFICATION	// set the binding's frame's "previous" file and line to current, so // trace will show who called the block
WITHOUT_CLASSIFICATION	// framed invokers will have Ruby frames associated with them
WITHOUT_CLASSIFICATION	// look for mangling markers for bound, framed methods in class name
WITHOUT_CLASSIFICATION	// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line
WITHOUT_CLASSIFICATION	// try to mine out a Ruby frame using our list of interpreter entry-point markers
WITHOUT_CLASSIFICATION	// Frame matches one of our markers for "interpreted" calls
WITHOUT_CLASSIFICATION	// Frame is extraneous runtime information, skip it unless debug
WITHOUT_CLASSIFICATION	/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */
WITHOUT_CLASSIFICATION	// new scope for this invocation of the block, based on parent scope
WITHOUT_CLASSIFICATION	// No argument blocks
WITHOUT_CLASSIFICATION	// just push the same empty scope, since we won't use one
WITHOUT_CLASSIFICATION	// Not sure if this is actually possible, but better safe than sorry
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).
WITHOUT_CLASSIFICATION	// Highest reserved id
WITHOUT_CLASSIFICATION	// binary typed calls
WITHOUT_CLASSIFICATION	// id must always be even
WITHOUT_CLASSIFICATION	// with block pass
WITHOUT_CLASSIFICATION	// no block
WITHOUT_CLASSIFICATION	// with block literal (iter)
WITHOUT_CLASSIFICATION	//            assert false : "can this happen?";
WITHOUT_CLASSIFICATION	// if we have multiple asgn with just *args, need a special type for that
WITHOUT_CLASSIFICATION	// && args.getMaxArgumentsCount() != 1) {
WITHOUT_CLASSIFICATION	//            return warnMultiReturnNil(ruby);
WITHOUT_CLASSIFICATION	// ensure zero is devoted to no method name
WITHOUT_CLASSIFICATION	// predefine a few other methods we invoke directly elsewhere
WITHOUT_CLASSIFICATION	// fast and safe respond_to? call site logic
WITHOUT_CLASSIFICATION	// Static scoping information for this scope
WITHOUT_CLASSIFICATION	// Captured dynamic scopes
WITHOUT_CLASSIFICATION	// Backref for $~, $1, etc
WITHOUT_CLASSIFICATION	// Lastline
WITHOUT_CLASSIFICATION	// No binding scope so we should create one
WITHOUT_CLASSIFICATION	// bindings scopes must always be ManyVars scopes since evals can grow them
WITHOUT_CLASSIFICATION	// Helper function to give a good view of current dynamic scope with captured scopes
WITHOUT_CLASSIFICATION	// try count specific args to determine required
WITHOUT_CLASSIFICATION	// Some helper functions:
WITHOUT_CLASSIFICATION	// silently ignore
WITHOUT_CLASSIFICATION	// used by compiler
WITHOUT_CLASSIFICATION	// initialize the static settings to determine which factory to use
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	//  Single node on list
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.
WITHOUT_CLASSIFICATION	// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.
WITHOUT_CLASSIFICATION	// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// no extra args for rest
WITHOUT_CLASSIFICATION	// no extra args for rest
WITHOUT_CLASSIFICATION	// extra args for rest
WITHOUT_CLASSIFICATION	// extra args for rest
WITHOUT_CLASSIFICATION	/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */
WITHOUT_CLASSIFICATION	/*     * This is the proper behavior for all non-expanded assigners.     */
WITHOUT_CLASSIFICATION	// prefill ?
WITHOUT_CLASSIFICATION	// prefill ?
WITHOUT_CLASSIFICATION	// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore
WITHOUT_CLASSIFICATION	// retrieve method // module // name
WITHOUT_CLASSIFICATION	// call is ok, punch it!
WITHOUT_CLASSIFICATION	// if undefined, branch to method_missing
WITHOUT_CLASSIFICATION	// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing
WITHOUT_CLASSIFICATION	// method object already present, push various args // tc // self // klazz // name
WITHOUT_CLASSIFICATION	// if it's method_missing, just invoke it
WITHOUT_CLASSIFICATION	// invoke callMethodMissing
WITHOUT_CLASSIFICATION	// caller
WITHOUT_CLASSIFICATION	// calltype // block
WITHOUT_CLASSIFICATION	// if no exception raised, jump to end to leave result on stack for return
WITHOUT_CLASSIFICATION	// load arity for check
WITHOUT_CLASSIFICATION	// throw
WITHOUT_CLASSIFICATION	// load arity for error
WITHOUT_CLASSIFICATION	// arity ok, continue
WITHOUT_CLASSIFICATION	//InvocationCallbackFactory
WITHOUT_CLASSIFICATION	// ENEBO: Perhaps slow but simple for now
WITHOUT_CLASSIFICATION	// FastInvocationCallback
WITHOUT_CLASSIFICATION	// InvocationCallback
WITHOUT_CLASSIFICATION	//DumpingInvocationCallbackFactory
WITHOUT_CLASSIFICATION	// for fast lookup: encoding entry => org.jruby.RubyEncoding
WITHOUT_CLASSIFICATION	// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding
WITHOUT_CLASSIFICATION	// load the encoding
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs
WITHOUT_CLASSIFICATION	// BreakJump, ThreadContext
WITHOUT_CLASSIFICATION	// ThreadContext
WITHOUT_CLASSIFICATION	// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
WITHOUT_CLASSIFICATION	// Make Java class files in the jar reachable from Ruby
WITHOUT_CLASSIFICATION	// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
WITHOUT_CLASSIFICATION	// add all startup load paths to the list first
WITHOUT_CLASSIFICATION	// if it's a compiled JRuby script, instantiate and run it
WITHOUT_CLASSIFICATION	// wrap in try/catch for security exceptions in an applet
WITHOUT_CLASSIFICATION	// add $RUBYLIB paths
WITHOUT_CLASSIFICATION	// Empty paths do not need to be added
WITHOUT_CLASSIFICATION	// "." dir is used for relative path loads from a given file, as in require '../foo/bar'
WITHOUT_CLASSIFICATION	// Add 1.8 libs
WITHOUT_CLASSIFICATION	// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.
WITHOUT_CLASSIFICATION	// Library has already been loaded in some form, bail out
WITHOUT_CLASSIFICATION	// We don't want a package name beginning with dots, so we remove them
WITHOUT_CLASSIFICATION	// If there is a jar-file with the required name, we add this to the class path.
WITHOUT_CLASSIFICATION	// quietly try to load the class
WITHOUT_CLASSIFICATION	// If there was a good library before, we go back to that
WITHOUT_CLASSIFICATION	// no library or extension found, try to load directly as a class
WITHOUT_CLASSIFICATION	// if an extension is specified, try more targetted searches
WITHOUT_CLASSIFICATION	// signed short, big-endian
WITHOUT_CLASSIFICATION	// source extensions
WITHOUT_CLASSIFICATION	// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support
WITHOUT_CLASSIFICATION	// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed
WITHOUT_CLASSIFICATION	// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.
WITHOUT_CLASSIFICATION	// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// extension extensions
WITHOUT_CLASSIFICATION	// unknown extension, fall back to search with extensions
WITHOUT_CLASSIFICATION	// try all extensions
WITHOUT_CLASSIFICATION	// if a source extension is specified, try all source extensions
WITHOUT_CLASSIFICATION	// unknown extension, fall back to exact search
WITHOUT_CLASSIFICATION	// try only literal search
WITHOUT_CLASSIFICATION	// attempt to load the found library
WITHOUT_CLASSIFICATION	// otherwise load the library we've found
WITHOUT_CLASSIFICATION	// allow MainExitException to propagate out for exec and friends
WITHOUT_CLASSIFICATION	// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".
WITHOUT_CLASSIFICATION	// check current directory; if file exists, retrieve URL and return resource
WITHOUT_CLASSIFICATION	// if a jar or file URL, return load service resource directly without further searching
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// if it's a ./ baseName, use CWD logic
WITHOUT_CLASSIFICATION	// if given path is absolute, just try it as-is (with extensions) and no load path
WITHOUT_CLASSIFICATION	// we check length == 0 for 'load', which does not use load path
WITHOUT_CLASSIFICATION	// we check length == 0 for 'load', which does not use load path
WITHOUT_CLASSIFICATION	// it's an absolute path, use it as-is
WITHOUT_CLASSIFICATION	// it's an absolute path, use it as-is
WITHOUT_CLASSIFICATION	// prepend ./ if . is not already there, since we're loading based on CWD
WITHOUT_CLASSIFICATION	// prepend ./ if . is not already there, since we're loading based on CWD
WITHOUT_CLASSIFICATION	//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));
WITHOUT_CLASSIFICATION	// handle security-sensitive case
WITHOUT_CLASSIFICATION	// if entry is an empty string, skip it
WITHOUT_CLASSIFICATION	// if entry starts with a slash, skip it since classloader resources never start with a /
WITHOUT_CLASSIFICATION	// otherwise, try to load from classpath (Note: Jar resources always uses '/')
WITHOUT_CLASSIFICATION	// Make sure this is not a directory or unavailable in some way
WITHOUT_CLASSIFICATION	// signed short, native
WITHOUT_CLASSIFICATION	// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.
WITHOUT_CLASSIFICATION	// write `I' instance var signet if class is NOT a direct subclass of Object
WITHOUT_CLASSIFICATION	// if name starts with a / we're done (classloader resources won't load with an initial /)
WITHOUT_CLASSIFICATION	// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")
WITHOUT_CLASSIFICATION	/* Directories and unavailable resources are not able to open a stream. */
WITHOUT_CLASSIFICATION	// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.
WITHOUT_CLASSIFICATION	// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here
WITHOUT_CLASSIFICATION	// flush afer whole dump is complete
WITHOUT_CLASSIFICATION	//            write('S');
WITHOUT_CLASSIFICATION	// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.
WITHOUT_CLASSIFICATION	// object is a custom class that extended one of the native types other than Object
WITHOUT_CLASSIFICATION	// We do not want to capture cached methods
WITHOUT_CLASSIFICATION	// w_symbol
WITHOUT_CLASSIFICATION	// w_unique
WITHOUT_CLASSIFICATION	// call the proc, but not for symbols
WITHOUT_CLASSIFICATION	// Major // Minor
WITHOUT_CLASSIFICATION	// any ivars, since we don't have __attached__ ivar now
WITHOUT_CLASSIFICATION	// "hashdef" object, a hash with a default
WITHOUT_CLASSIFICATION	// All "C" marshalled objects descend from core classes, which are all RubyObject
WITHOUT_CLASSIFICATION	// sic
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	/*     * If we are setting post arguments we can assume there are no pre or others     */
WITHOUT_CLASSIFICATION	// XXX: 0xffff0000 on BE?
WITHOUT_CLASSIFICATION	// unsigned short, native
WITHOUT_CLASSIFICATION	// int, native // long, native
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// Look for slash, starting from 'start' position, until 'end'.
WITHOUT_CLASSIFICATION	// Our values holder (name of variables are kept in staticScope)
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// SunSignalFacade
WITHOUT_CLASSIFICATION	// All braces pushed..
WITHOUT_CLASSIFICATION	/* failed : try next recursion */
WITHOUT_CLASSIFICATION	// leftToken made us start as nest 1
WITHOUT_CLASSIFICATION	// are we at '**/'
WITHOUT_CLASSIFICATION	// No or mismatched braces..Move along..nothing to see here
WITHOUT_CLASSIFICATION	// not enough bytes
WITHOUT_CLASSIFICATION	// Get index of last read byte
WITHOUT_CLASSIFICATION	// skip inner braces
WITHOUT_CLASSIFICATION	/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */
WITHOUT_CLASSIFICATION	/* complete, according to Posix.2 */
WITHOUT_CLASSIFICATION	/* Only accept an open brace if there is a close */
WITHOUT_CLASSIFICATION	/* brace to match it.  Bracket expressions must be */
WITHOUT_CLASSIFICATION	// index of left-most brace // index of right-most brace
WITHOUT_CLASSIFICATION	// Length check is a hack.  We should not be reeiving "" as a filename ever. 
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// Pickaxe says @ must be followed by a name character, but MRI // does not require this.
WITHOUT_CLASSIFICATION	// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.
WITHOUT_CLASSIFICATION	// SimpleSampler
WITHOUT_CLASSIFICATION	/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */
WITHOUT_CLASSIFICATION	// b64_xtable for decoding Base 64
WITHOUT_CLASSIFICATION	// single precision, little-endian
WITHOUT_CLASSIFICATION	// single precision, big-endian
WITHOUT_CLASSIFICATION	// single precision, native
WITHOUT_CLASSIFICATION	// single precision, native // single precision, native
WITHOUT_CLASSIFICATION	// double precision, little-endian
WITHOUT_CLASSIFICATION	// double precision, big-endian
WITHOUT_CLASSIFICATION	// double precision, native
WITHOUT_CLASSIFICATION	// signed short, little-endian
WITHOUT_CLASSIFICATION	// signed char
WITHOUT_CLASSIFICATION	// unsigned char
WITHOUT_CLASSIFICATION	// long, little-endian
WITHOUT_CLASSIFICATION	// long, big-endian
WITHOUT_CLASSIFICATION	// unsigned int, native
WITHOUT_CLASSIFICATION	// int, native
WITHOUT_CLASSIFICATION	// 64-bit number, native (as fixnum)
WITHOUT_CLASSIFICATION	// How many occurrences of 'type' we want
WITHOUT_CLASSIFICATION	// See if we have a converter for the job...
WITHOUT_CLASSIFICATION	// Otherwise the unpack should be here...
WITHOUT_CLASSIFICATION	// Possible Checksum Byte
WITHOUT_CLASSIFICATION	// obtain a
WITHOUT_CLASSIFICATION	// obtain b
WITHOUT_CLASSIFICATION	// obtain c
WITHOUT_CLASSIFICATION	// obtain d
WITHOUT_CLASSIFICATION	/*encode.limit() - */
WITHOUT_CLASSIFICATION	/* 1 */
WITHOUT_CLASSIFICATION	/* 2 */
WITHOUT_CLASSIFICATION	/* 3 */
WITHOUT_CLASSIFICATION	/* 4 */
WITHOUT_CLASSIFICATION	/* 5 */
WITHOUT_CLASSIFICATION	/* 6 */
WITHOUT_CLASSIFICATION	/* 7 */
WITHOUT_CLASSIFICATION	// Skip all whitespace in pack format string
WITHOUT_CLASSIFICATION	// Skip embedded comments in pack format string
WITHOUT_CLASSIFICATION	// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.
WITHOUT_CLASSIFICATION	//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char
WITHOUT_CLASSIFICATION	// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.
WITHOUT_CLASSIFICATION	// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.
WITHOUT_CLASSIFICATION	// Determine how many of type are needed (default: 1)
WITHOUT_CLASSIFICATION	// 'Z' adds extra null pad (versus 'a')
WITHOUT_CLASSIFICATION	//if the low bit is set //set the high bit of the result
WITHOUT_CLASSIFICATION	//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte
WITHOUT_CLASSIFICATION	//if the length is not a multiple of 8 //we need to pad the last byte
WITHOUT_CLASSIFICATION	//if the length is not a multiple of 8 //we need to pad the last byte
WITHOUT_CLASSIFICATION	//do some padding, I don't understand the padding strategy
WITHOUT_CLASSIFICATION	// we filled up current byte; append it and create next one
WITHOUT_CLASSIFICATION	//if the index is not a multiple of 8, we are not on a byte boundary
WITHOUT_CLASSIFICATION	//this test may be too lax but it is the same as in MRI
WITHOUT_CLASSIFICATION	// we don't deal with negatives.
WITHOUT_CLASSIFICATION	// populate commandline with NG-provided stuff
WITHOUT_CLASSIFICATION	// are we recursing?
WITHOUT_CLASSIFICATION	// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	// default PidGetter
WITHOUT_CLASSIFICATION	// ignore and try windows version
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// try both
WITHOUT_CLASSIFICATION	// just unix
WITHOUT_CLASSIFICATION	// just windows
WITHOUT_CLASSIFICATION	// neither
WITHOUT_CLASSIFICATION	// CON: popen is a case where I think we should just always shell out.
WITHOUT_CLASSIFICATION	// single string command, pass to sh to expand wildcards
WITHOUT_CLASSIFICATION	// direct invocation of the command
WITHOUT_CLASSIFICATION	// break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	// break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.
WITHOUT_CLASSIFICATION	// ignore, we're on the way out
WITHOUT_CLASSIFICATION	// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	// popen callers wants to be able to read, provide subprocess in directly
WITHOUT_CLASSIFICATION	// popen callers wants to be able to read, provide subprocess in directly
WITHOUT_CLASSIFICATION	// popen caller wants to be able to write, provide subprocess out directly
WITHOUT_CLASSIFICATION	// no read requested, hook up read to parents output
WITHOUT_CLASSIFICATION	// no read requested, hook up read to parents output
WITHOUT_CLASSIFICATION	// execute command with sh -c // this does shell expansion of wildcards
WITHOUT_CLASSIFICATION	// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".
WITHOUT_CLASSIFICATION	// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process
WITHOUT_CLASSIFICATION	// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!
WITHOUT_CLASSIFICATION	// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.
WITHOUT_CLASSIFICATION	// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.
WITHOUT_CLASSIFICATION	// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.
WITHOUT_CLASSIFICATION	//sequential
WITHOUT_CLASSIFICATION	// reverse the entire area of the array selected if it's reversed.
WITHOUT_CLASSIFICATION	// do median of 7 if the array is over 200 elements.
WITHOUT_CLASSIFICATION	// if it's less than 200 do median of 3
WITHOUT_CLASSIFICATION	// SignalFacade
WITHOUT_CLASSIFICATION	// this is the order in which MRI does these two tests
WITHOUT_CLASSIFICATION	// this is the order in which MRI does these tests
WITHOUT_CLASSIFICATION	// basically just forcing a TypeError here to match MRI
WITHOUT_CLASSIFICATION	// not saving DFS instance, as it will only be used once (at most) per call
WITHOUT_CLASSIFICATION	// Args
WITHOUT_CLASSIFICATION	// static methods only
WITHOUT_CLASSIFICATION	//System.err.println(" calculateLength()/str=" + str);
WITHOUT_CLASSIFICATION	// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.
WITHOUT_CLASSIFICATION	// last index (+1) accessed by next() // last index (+1) accessed by get()
WITHOUT_CLASSIFICATION	// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.
WITHOUT_CLASSIFICATION	// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.
WITHOUT_CLASSIFICATION	// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)
WITHOUT_CLASSIFICATION	// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 
WITHOUT_CLASSIFICATION	// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])
WITHOUT_CLASSIFICATION	// 'd' and 'i' are the same
WITHOUT_CLASSIFICATION	// 'u' with space or plus flags is same as 'd'
WITHOUT_CLASSIFICATION	// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).
WITHOUT_CLASSIFICATION	// skip '-' in bytes, will add where appropriate
WITHOUT_CLASSIFICATION	// ..
WITHOUT_CLASSIFICATION	// the 1 is for the stripped sign char
WITHOUT_CLASSIFICATION	// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)
WITHOUT_CLASSIFICATION	// gotta have at least a zero...
WITHOUT_CLASSIFICATION	// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.
WITHOUT_CLASSIFICATION	// intDigits isn't used here, but if it were, it would be 1
WITHOUT_CLASSIFICATION	/* intDigits = 1; */
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong/reading c=" + data[s]);
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong/converted c=" + c);
WITHOUT_CLASSIFICATION	// intDigits isn't used here, but if it were, it would be 1
WITHOUT_CLASSIFICATION	/* intDigits = 1; */
WITHOUT_CLASSIFICATION	// precision for G/g includes integer digits
WITHOUT_CLASSIFICATION	// deal with length/width
WITHOUT_CLASSIFICATION	// deal with length/width
WITHOUT_CLASSIFICATION	// first digit is always printed
WITHOUT_CLASSIFICATION	// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.
WITHOUT_CLASSIFICATION	// 5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	// 4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	// in this mode, '.' is always printed
WITHOUT_CLASSIFICATION	// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 
WITHOUT_CLASSIFICATION	// '.' is printed
WITHOUT_CLASSIFICATION	// all precision numebers printed
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// '.'
WITHOUT_CLASSIFICATION	// decimal form, like (but not *just* like!) 'f'
WITHOUT_CLASSIFICATION	// digits array shifted, update all
WITHOUT_CLASSIFICATION	// will have a trailing '.' // g fills trailing zeroes if #
WITHOUT_CLASSIFICATION	// s/b true, since intLength > 0
WITHOUT_CLASSIFICATION	// s/b true, since intLength > 0
WITHOUT_CLASSIFICATION	// always need at least a 0
WITHOUT_CLASSIFICATION	// always need at least a 0
WITHOUT_CLASSIFICATION	// digits arr shifted, update all
WITHOUT_CLASSIFICATION	// (1|intlen).prec
WITHOUT_CLASSIFICATION	// (1|intlen)
WITHOUT_CLASSIFICATION	// will have a trailing '.'
WITHOUT_CLASSIFICATION	// fill up the rest with zeroes
WITHOUT_CLASSIFICATION	//System.err.println(" main/len=" + len);
WITHOUT_CLASSIFICATION	// 5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	// 4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// '.'
WITHOUT_CLASSIFICATION	// equivalent to MRI case '\0':
WITHOUT_CLASSIFICATION	// '.' and all precision digits printed
WITHOUT_CLASSIFICATION	// \v
WITHOUT_CLASSIFICATION	// dangling '%' char
WITHOUT_CLASSIFICATION	// main while loop (offset < length)
WITHOUT_CLASSIFICATION	// debugging code, keeping for now
WITHOUT_CLASSIFICATION	// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do
WITHOUT_CLASSIFICATION	// "%.0f" % 0.99
WITHOUT_CLASSIFICATION	// limit the length of negatives if possible (also faster)
WITHOUT_CLASSIFICATION	// negative values
WITHOUT_CLASSIFICATION	// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.
WITHOUT_CLASSIFICATION	// relatively cheap test for 32-bit values
WITHOUT_CLASSIFICATION	// no such luck...
WITHOUT_CLASSIFICATION	// ok, now it gets expensive...
WITHOUT_CLASSIFICATION	// go through negated powers of 32 until we find one small enough 
WITHOUT_CLASSIFICATION	// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...
WITHOUT_CLASSIFICATION	/* constant vector a */
WITHOUT_CLASSIFICATION	/* most significant w-r bits */
WITHOUT_CLASSIFICATION	/* least significant r bits */
WITHOUT_CLASSIFICATION	// state[j] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	// state[i] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	// state[i] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	/* MSB is 1; assuring non-zero initial array */
WITHOUT_CLASSIFICATION	/* Tempering */
WITHOUT_CLASSIFICATION	// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.
WITHOUT_CLASSIFICATION	//System.err.println("byteListToInum(" + str + ")");
WITHOUT_CLASSIFICATION	//System.err.println("byteListToInum(" + str + ")");
WITHOUT_CLASSIFICATION	// \v
WITHOUT_CLASSIFICATION	//System.err.println("getSign()");
WITHOUT_CLASSIFICATION	//System.err.println(" getSign/" + sign);
WITHOUT_CLASSIFICATION	//System.err.println("figureOutBase()/base=" + base);
WITHOUT_CLASSIFICATION	//System.err.println(" figureOutBase/base=" + base);
WITHOUT_CLASSIFICATION	//System.err.println("calculateLength()/str=" + str);
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong=" + val);
WITHOUT_CLASSIFICATION	// no number
WITHOUT_CLASSIFICATION	// trailing garbage
WITHOUT_CLASSIFICATION	//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);
WITHOUT_CLASSIFICATION	// it was not found at all!
WITHOUT_CLASSIFICATION	// can be overridden to be informed when objects are removed
WITHOUT_CLASSIFICATION	// we reached the end of a list
WITHOUT_CLASSIFICATION	// goto next bucket
WITHOUT_CLASSIFICATION	// we reached the end
WITHOUT_CLASSIFICATION	// entry is the first element of this bucket
WITHOUT_CLASSIFICATION	// states
WITHOUT_CLASSIFICATION	// remove leading whitespace (includes _ for lax) // get sign, if any
WITHOUT_CLASSIFICATION	// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible
WITHOUT_CLASSIFICATION	// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed
WITHOUT_CLASSIFICATION	// drop through for sign
WITHOUT_CLASSIFICATION	// switch // will use this if we have to go back the slow way
WITHOUT_CLASSIFICATION	// drop through for non-strict digits
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// no digits, go calc (will return +/- 0.0 for lax)
WITHOUT_CLASSIFICATION	// ignore leading zeroes
WITHOUT_CLASSIFICATION	// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).
WITHOUT_CLASSIFICATION	// ok, got a non-zero, have to own up to our horded zeroes
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 
WITHOUT_CLASSIFICATION	// ignore // switch
WITHOUT_CLASSIFICATION	// ignore // switch
WITHOUT_CLASSIFICATION	// end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// first non_underscore char must be digit
WITHOUT_CLASSIFICATION	// no dec digits, end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// difficult case, send to Double/FloatingDecimal
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// lax (str.to_f) allows underscores between e/E and sign
WITHOUT_CLASSIFICATION	// switch // for // no exponent, so drop through for calculation
WITHOUT_CLASSIFICATION	// switch // for // no more data, OK for strict to go calc
WITHOUT_CLASSIFICATION	// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...
WITHOUT_CLASSIFICATION	// no digits, error
WITHOUT_CLASSIFICATION	// too big for us
WITHOUT_CLASSIFICATION	// too big for us
WITHOUT_CLASSIFICATION	// must be at least one digit for strict
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// first char must be digit
WITHOUT_CLASSIFICATION	// no dec digits after '.', error for strict
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// must be at least one digit for strict
WITHOUT_CLASSIFICATION	// // Copy out any buffered bytes //
WITHOUT_CLASSIFICATION	// switch //while
WITHOUT_CLASSIFICATION	/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */
WITHOUT_CLASSIFICATION	// Zlib behavior: negative win_bits means no header and no checksum.
WITHOUT_CLASSIFICATION	// rb_enc_mbclen
WITHOUT_CLASSIFICATION	// rb_enc_precise_mbclen
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	// arg cannot be negative
WITHOUT_CLASSIFICATION	// NoFunctionalitySignalFacade
WITHOUT_CLASSIFICATION	// Change visibility so others can see it
WITHOUT_CLASSIFICATION	// could not get canonical path, just use given path
WITHOUT_CLASSIFICATION	// strip off "_dot_rb" for .rb files
WITHOUT_CLASSIFICATION	// Makes sure the key is not already in the hashtable.
WITHOUT_CLASSIFICATION	// Rehash the table if the threshold is exceeded
WITHOUT_CLASSIFICATION	// Creates the new entry.
WITHOUT_CLASSIFICATION	// next entry to return // current slot // current entry
WITHOUT_CLASSIFICATION	// advance to first entry
WITHOUT_CLASSIFICATION	// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.
WITHOUT_CLASSIFICATION	/*package-protected*/
WITHOUT_CLASSIFICATION	// raw file URL, just open directly
WITHOUT_CLASSIFICATION	// We always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	// if refcount is at or below zero, we're no longer valid
WITHOUT_CLASSIFICATION	// if channel is already closed, we're no longer valid
WITHOUT_CLASSIFICATION	// otherwise decrement and possibly close as normal
WITHOUT_CLASSIFICATION	// r/w buffer // are we reading or writing?
WITHOUT_CLASSIFICATION	// this constructor is used by fdopen, so we don't increment descriptor ref count
WITHOUT_CLASSIFICATION	// unread back
WITHOUT_CLASSIFICATION	// iterate over remainder of buffer until we find a match
WITHOUT_CLASSIFICATION	// terminate and advance buffer when we find our char
WITHOUT_CLASSIFICATION	// no match, append remainder of buffer and continue with next block
WITHOUT_CLASSIFICATION	// found a match above, check if remaining separator characters match, appending as we go
WITHOUT_CLASSIFICATION	// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //
WITHOUT_CLASSIFICATION	// // Copy any buffered data (including ungetc byte) //
WITHOUT_CLASSIFICATION	// // Now read unbuffered directly from the file //
WITHOUT_CLASSIFICATION	// // Copy out any buffered bytes //
WITHOUT_CLASSIFICATION	// // Need to clamp source (buffer) size to avoid overrun //
WITHOUT_CLASSIFICATION	// not closing from finalize
WITHOUT_CLASSIFICATION	// clear runtime so it doesn't get stuck in memory (JRUBY-2933)
WITHOUT_CLASSIFICATION	// silence
WITHOUT_CLASSIFICATION	// silence
WITHOUT_CLASSIFICATION	// Don't bother
WITHOUT_CLASSIFICATION	// Don't bother
WITHOUT_CLASSIFICATION	// For Sockets, only write as much as will fit.
WITHOUT_CLASSIFICATION	// Correct position for read / write buffering (we could invalidate, but expensive)
WITHOUT_CLASSIFICATION	// Adjust for buffered data
WITHOUT_CLASSIFICATION	// for SEEK_CUR, need to adjust for buffered data
WITHOUT_CLASSIFICATION	// libc flushes writes on any read from the actual file, so we flush here
WITHOUT_CLASSIFICATION	// we have read ahead, and need to back up
WITHOUT_CLASSIFICATION	// 128K seems to be the minimum at which the stat+seek is faster than reallocation
WITHOUT_CLASSIFICATION	// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //
WITHOUT_CLASSIFICATION	// append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	// // Copy what is in the buffer, if there is some buffered data //
WITHOUT_CLASSIFICATION	// // Avoid double-copying for reads that are larger than the buffer size //
WITHOUT_CLASSIFICATION	// // Complete the request by filling the read buffer first //
WITHOUT_CLASSIFICATION	// // Complete the request by filling the read buffer first //
WITHOUT_CLASSIFICATION	// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //
WITHOUT_CLASSIFICATION	// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //
WITHOUT_CLASSIFICATION	// Ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	// Ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	// Doesn't fit in buffer. Write immediately. // ensure nothing left to write
WITHOUT_CLASSIFICATION	// truncate can't lengthen files, so we save position, seek/write, and go back
WITHOUT_CLASSIFICATION	// how far ahead we are when reading
WITHOUT_CLASSIFICATION	// if the read buffer is ahead, back up
WITHOUT_CLASSIFICATION	// close without removing from finalizers
WITHOUT_CLASSIFICATION	// putting a bit back, so we're not at EOF anymore
WITHOUT_CLASSIFICATION	// save the ungot
WITHOUT_CLASSIFICATION	// otherwise, we try an unbuffered read to get whatever's available
WITHOUT_CLASSIFICATION	// ignore this; select() will set the correct mode when it is finished
WITHOUT_CLASSIFICATION	// flush first
WITHOUT_CLASSIFICATION	// // Wake up any channels that became unblocked //
WITHOUT_CLASSIFICATION	// // Register any new blocking I/O requests //
WITHOUT_CLASSIFICATION	// Now clear out any previously selected channels
WITHOUT_CLASSIFICATION	// // Wait for I/O on any channel //
WITHOUT_CLASSIFICATION	// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'
WITHOUT_CLASSIFICATION	// Java requires "w" for creating a file that does not exist
WITHOUT_CLASSIFICATION	// seek to force underlying buffer to flush
WITHOUT_CLASSIFICATION	// seek to force read buffer to invalidate
WITHOUT_CLASSIFICATION	/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */
WITHOUT_CLASSIFICATION	// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.
WITHOUT_CLASSIFICATION	// TODO: Ruby logic is somewhat more complicated here, see comments after
WITHOUT_CLASSIFICATION	// make sure the pipe stream is set to null
WITHOUT_CLASSIFICATION	// make sure the main stream is set to null
WITHOUT_CLASSIFICATION	// first try our custom-generated Unsafe
WITHOUT_CLASSIFICATION	// then try Sun's Unsafe
WITHOUT_CLASSIFICATION	// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly
WITHOUT_CLASSIFICATION	// else leave it null
WITHOUT_CLASSIFICATION	// TypeMatcher
WITHOUT_CLASSIFICATION	// This is now needed, since module Java // isn't in by default
WITHOUT_CLASSIFICATION	// Iterate over the RubyHash keySet, simultaneously iterating over the values()
WITHOUT_CLASSIFICATION	// Get the value from the map via the key
WITHOUT_CLASSIFICATION	// Get the value from the map via the values iterator
WITHOUT_CLASSIFICATION	// Check the 2 values obtained via different means
WITHOUT_CLASSIFICATION	// Set a value in the RubyHash
WITHOUT_CLASSIFICATION	// Set a value in the RubyHash
WITHOUT_CLASSIFICATION	// Check the entry.setValue values come back out ok
WITHOUT_CLASSIFICATION	// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.
WITHOUT_CLASSIFICATION	//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));
WITHOUT_CLASSIFICATION	// Init
WITHOUT_CLASSIFICATION	// Block
WITHOUT_CLASSIFICATION	// Copy constructor
WITHOUT_CLASSIFICATION	// presumably this require should fail
WITHOUT_CLASSIFICATION	// JRUBY-646 // presumably this require should fail
WITHOUT_CLASSIFICATION	// Test that requiring a normal Java class raises an error (JRUBY-3214
WITHOUT_CLASSIFICATION	// ok
WITHOUT_CLASSIFICATION	// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).
WITHOUT_CLASSIFICATION	//load should work several times in a row
WITHOUT_CLASSIFICATION	//reset the $loadTestvar
WITHOUT_CLASSIFICATION	//call throwException via JRuby
WITHOUT_CLASSIFICATION	// Notify the calling thread that we're about to go to sleep the first time
WITHOUT_CLASSIFICATION	// wait for the go signal
WITHOUT_CLASSIFICATION	// run ten separate calls into Ruby, with delay and explicit GC
WITHOUT_CLASSIFICATION	// wait until thread has initialized
WITHOUT_CLASSIFICATION	// notify thread to proceed
WITHOUT_CLASSIFICATION	// wait until thread has completed
WITHOUT_CLASSIFICATION	// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline
WITHOUT_CLASSIFICATION	// out of byte range // there will be no match for sure
WITHOUT_CLASSIFICATION	// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.
WITHOUT_CLASSIFICATION	// if any exceptions were raised, we fail
WITHOUT_CLASSIFICATION	// there should only be one more thread in thread group than before we started
WITHOUT_CLASSIFICATION	// construct a new cache with thread's classloader and no limit
WITHOUT_CLASSIFICATION	//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();
WITHOUT_CLASSIFICATION	//        assertSame(script1, script2);
WITHOUT_CLASSIFICATION	// void methods should work
WITHOUT_CLASSIFICATION	// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649
WITHOUT_CLASSIFICATION	// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.
WITHOUT_CLASSIFICATION	// Without a flush Ant will miss some of our output
WITHOUT_CLASSIFICATION	// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());
WITHOUT_CLASSIFICATION	//        int n = 10;
WITHOUT_CLASSIFICATION	// there might be more test classes in a single file, so we iterate over them
WITHOUT_CLASSIFICATION	//No ClassCastException!
WITHOUT_CLASSIFICATION	// value equality
WITHOUT_CLASSIFICATION	// identity equality
WITHOUT_CLASSIFICATION	// bench straight-up integer fib(30)
WITHOUT_CLASSIFICATION	// bench Integer fib
WITHOUT_CLASSIFICATION	// bench fully-boxed fib
WITHOUT_CLASSIFICATION	// bench fully-boxed fib
WITHOUT_CLASSIFICATION	// bench fixnum-boxed fib
WITHOUT_CLASSIFICATION	// bench straight-up long fib(30)
WITHOUT_CLASSIFICATION	// bench Long fib
WITHOUT_CLASSIFICATION	// skip this one, probably no 'ls' (windows)
WITHOUT_CLASSIFICATION	// start off with a neutral parent
WITHOUT_CLASSIFICATION	/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.
WITHOUT_CLASSIFICATION	// We are creating a new IO object that shares the same // IOHandler (and fileno).
WITHOUT_CLASSIFICATION	// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]
WITHOUT_CLASSIFICATION	// select appropriate call site // dup receiver // load self
WITHOUT_CLASSIFICATION	// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //
WITHOUT_CLASSIFICATION	// // Force the client socket to be blocking //
WITHOUT_CLASSIFICATION	// Additional context surrounding tokens that both the lexer and // grammar use.
WITHOUT_CLASSIFICATION	// Enebo:  c can never be antrhign but '.' // Why did I put this here?
WITHOUT_CLASSIFICATION	// save package module as ivar in parent, and add method to parent so // we don't have to come back here.
WITHOUT_CLASSIFICATION	//[C,C] //[C, boolean]
WITHOUT_CLASSIFICATION	// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)
WITHOUT_CLASSIFICATION	// ignore; job was cancelled // FIXME: is this ok?
WITHOUT_CLASSIFICATION	//                    // check arity //                    checkArity(mv, scope);
WITHOUT_CLASSIFICATION	// rethrow exception // rethrow it
WITHOUT_CLASSIFICATION	// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.
WITHOUT_CLASSIFICATION	// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.
WITHOUT_CLASSIFICATION	// proxy is under construction, building thread can // safely read non-volatile value
WITHOUT_CLASSIFICATION	// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 
WITHOUT_CLASSIFICATION	// // construct the proxy method //
WITHOUT_CLASSIFICATION	// line 159 "-" // %token constants
WITHOUT_CLASSIFICATION	// +++ // Helper Methods
WITHOUT_CLASSIFICATION	// line 152 "-" // %token constants
WITHOUT_CLASSIFICATION	// initial size // state stack // value stack // current input // #tokens to shift
WITHOUT_CLASSIFICATION	// +++ // Helper Methods
WITHOUT_CLASSIFICATION	// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.
WITHOUT_CLASSIFICATION	// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 
WITHOUT_CLASSIFICATION	// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.
WITHOUT_CLASSIFICATION	// TODO: make it 16 now ? // MUST be power of 2!
WITHOUT_CLASSIFICATION	// check visibility // dup method
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// unsigned int, native // unsigned long, native
WITHOUT_CLASSIFICATION	//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it
WITHOUT_CLASSIFICATION	// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.
WITHOUT_CLASSIFICATION	// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.
WITHOUT_CLASSIFICATION	// switch // for // no more data, OK for strict to go calc
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem
WITHOUT_CLASSIFICATION	// captures // begin and end are used when not groups defined // source string
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE RUBY METHODS //
WITHOUT_CLASSIFICATION	// switch // while
WITHOUT_CLASSIFICATION	// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.
WITHOUT_CLASSIFICATION	// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.
WITHOUT_CLASSIFICATION	// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method
WITHOUT_CLASSIFICATION	// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// constructor
WITHOUT_CLASSIFICATION	// If a line is followed by a blank line put // it back.
WITHOUT_CLASSIFICATION	/* $>: default output handle */
WITHOUT_CLASSIFICATION	// line 423
WITHOUT_CLASSIFICATION	// line 486
WITHOUT_CLASSIFICATION	// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments
WITHOUT_CLASSIFICATION	// re-register, since fileno points at something new now
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass
WITHOUT_CLASSIFICATION	// Wire up Function#call(*args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// Decrease value to hit upper range.  
WITHOUT_CLASSIFICATION	// assign to appropriate variable
WITHOUT_CLASSIFICATION	// "else" body
WITHOUT_CLASSIFICATION	// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	/* $+: string matches last paren. */
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out
WITHOUT_CLASSIFICATION	/* 10! */
WITHOUT_CLASSIFICATION	//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done
WITHOUT_CLASSIFICATION	// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.
WITHOUT_CLASSIFICATION	// all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	// first, iterate over all required args
WITHOUT_CLASSIFICATION	// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //
WITHOUT_CLASSIFICATION	//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	// initial size // state stack // value stack // current input // #tokens to shift
WITHOUT_CLASSIFICATION	// line 449
WITHOUT_CLASSIFICATION	// line 495
WITHOUT_CLASSIFICATION	// Management/monitoring
WITHOUT_CLASSIFICATION	// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done
WITHOUT_CLASSIFICATION	/* 14! */
WITHOUT_CLASSIFICATION	// Process any set of annotations // No supported options
WITHOUT_CLASSIFICATION	// add to the jitted methods set
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done
WITHOUT_CLASSIFICATION	// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //
WITHOUT_CLASSIFICATION	/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// Atomic integers for symbol and method IDs
WITHOUT_CLASSIFICATION	/* 18! */
WITHOUT_CLASSIFICATION	// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */
WITHOUT_CLASSIFICATION	// Can't support the rest with Java
WITHOUT_CLASSIFICATION	// An atomic long for generating DynamicMethod serial numbers
WITHOUT_CLASSIFICATION	// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.
WITHOUT_CLASSIFICATION	/* 22! */
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	// Build a new class and add it to the current scope (could be a script / module / class)
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// AF_INET
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes
WITHOUT_CLASSIFICATION	// BASE64
WITHOUT_CLASSIFICATION	/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy
WITHOUT_CLASSIFICATION	// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.
WITHOUT_CLASSIFICATION	//IRubyObject protocol = args[4];
WITHOUT_CLASSIFICATION	// promise to implement three to N with block
WITHOUT_CLASSIFICATION	// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.
WITHOUT_CLASSIFICATION	// carriage return
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	// discarding a token does not change stack
WITHOUT_CLASSIFICATION	// String construction routines by NOT byte[] buffer and making the target String shared 
WITHOUT_CLASSIFICATION	// insert all nodes in sequence, hash them in the final instruction // KEY
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions
WITHOUT_CLASSIFICATION	// otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.
WITHOUT_CLASSIFICATION	// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing
WITHOUT_CLASSIFICATION	// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks
WITHOUT_CLASSIFICATION	// check arity in the variable-arity version
WITHOUT_CLASSIFICATION	// leave it null and fall back on our normal invocation logic
WITHOUT_CLASSIFICATION	// Build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	// for each simple method name, implement the complex methods, calling the simple version
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	/* fall through */
WITHOUT_CLASSIFICATION	// deal with case when "other" is not a string
WITHOUT_CLASSIFICATION	// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// store argument count information into scope
WITHOUT_CLASSIFICATION	// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code
WITHOUT_CLASSIFICATION	// First, build assignments for specific named arguments
WITHOUT_CLASSIFICATION	//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }
WITHOUT_CLASSIFICATION	// get current context
WITHOUT_CLASSIFICATION	// octal constant
WITHOUT_CLASSIFICATION	// read
WITHOUT_CLASSIFICATION	// this really needs to be inlined here
WITHOUT_CLASSIFICATION	// it doesn't handle special cases
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// at end
WITHOUT_CLASSIFICATION	/* bang: true, no match, no substitution */
WITHOUT_CLASSIFICATION	// save blocking state
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	// invoke static __file__
WITHOUT_CLASSIFICATION	// rest of the argument array!
WITHOUT_CLASSIFICATION	// fall back on empty env when security disallows environment var access (like in an applet)
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// load null block
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// nothing else to here - the module version will be // included in the class.
WITHOUT_CLASSIFICATION	// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
WITHOUT_CLASSIFICATION	// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// check arity
WITHOUT_CLASSIFICATION	// check arity
WITHOUT_CLASSIFICATION	// create the class
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// No hex value after the 'x'.
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	/* 6:tags 16:addr 1:eos */
WITHOUT_CLASSIFICATION	// Let m be the exact digits precision in an earlier! loop
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// Label for the start of the method // Label for the end of the method
WITHOUT_CLASSIFICATION	// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...
WITHOUT_CLASSIFICATION	// FIXME: JRUBY-3604
WITHOUT_CLASSIFICATION	// invoke pre method stuff
WITHOUT_CLASSIFICATION	// all done with lookup attempts, release monitor
WITHOUT_CLASSIFICATION	// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.
WITHOUT_CLASSIFICATION	// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl
WITHOUT_CLASSIFICATION	// Construct local variables based on parameter names passed in
WITHOUT_CLASSIFICATION	// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.
WITHOUT_CLASSIFICATION	// file given, use it and force it into binding
WITHOUT_CLASSIFICATION	// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it
WITHOUT_CLASSIFICATION	// return sqrt(squarD) with precision of rootMC
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	// Get a new label using the provided label prefix
WITHOUT_CLASSIFICATION	// normal exit, perform finally and return
WITHOUT_CLASSIFICATION	// coerce arguments
WITHOUT_CLASSIFICATION	// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity
WITHOUT_CLASSIFICATION	/* expected */
WITHOUT_CLASSIFICATION	// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.
WITHOUT_CLASSIFICATION	/* ignore backslashed spaces in %w */
WITHOUT_CLASSIFICATION	// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".
WITHOUT_CLASSIFICATION	// no binding given, use 0 for both
WITHOUT_CLASSIFICATION	// <=> may return nil in many circumstances, e.g. 3 <=> NaN        
WITHOUT_CLASSIFICATION	// use numbered access method
WITHOUT_CLASSIFICATION	// Always use "GMT" since that's required by Java API.
WITHOUT_CLASSIFICATION	// ignore if it's not a global var
WITHOUT_CLASSIFICATION	// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;
WITHOUT_CLASSIFICATION	// Remaining arguments are for the script itself
WITHOUT_CLASSIFICATION	// arg grouping, use slower arg walking logic
WITHOUT_CLASSIFICATION	// build scope names string
WITHOUT_CLASSIFICATION	// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.
WITHOUT_CLASSIFICATION	// finally
WITHOUT_CLASSIFICATION	// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.
WITHOUT_CLASSIFICATION	// ?l  | boolean | True if file1 exists and is a symbolic link
WITHOUT_CLASSIFICATION	// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// specific arity
WITHOUT_CLASSIFICATION	// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.
WITHOUT_CLASSIFICATION	// ?w  | boolean | True if file1 exists and is writable by effective uid/gid
WITHOUT_CLASSIFICATION	// // COMMON VARIABLE METHODS //
WITHOUT_CLASSIFICATION	/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// Add property name aliases
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// // INTERNAL VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// backspace
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)
WITHOUT_CLASSIFICATION	// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();
WITHOUT_CLASSIFICATION	// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();
WITHOUT_CLASSIFICATION	/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */
WITHOUT_CLASSIFICATION	// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	// The name of this source (e.g. a filename: foo.rb)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.
WITHOUT_CLASSIFICATION	// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact
WITHOUT_CLASSIFICATION	// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 
WITHOUT_CLASSIFICATION	/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/
WITHOUT_CLASSIFICATION	// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// No seconds, just yield
WITHOUT_CLASSIFICATION	// finally handling for abnormal exit
WITHOUT_CLASSIFICATION	// if it's an inner class and it's not public, we can't access it; // skip population of declared elements
WITHOUT_CLASSIFICATION	// getFoo      => foo // getFoo(int) => foo(int)
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.
WITHOUT_CLASSIFICATION	// this is the only case it might be null here (in MetaClass construction)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND
WITHOUT_CLASSIFICATION	// get "self"
WITHOUT_CLASSIFICATION	// No timeout in critical section
WITHOUT_CLASSIFICATION	// rethrow exception // rethrow it
WITHOUT_CLASSIFICATION	// only public methods
WITHOUT_CLASSIFICATION	// If already inspecting, there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	// First try to use drive letter from supplied dir value, // then try current work dir.
WITHOUT_CLASSIFICATION	// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.
WITHOUT_CLASSIFICATION	// generate a real method signature for the method, with to/from coercions
WITHOUT_CLASSIFICATION	// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry
WITHOUT_CLASSIFICATION	// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //
WITHOUT_CLASSIFICATION	// Create constants for flock
WITHOUT_CLASSIFICATION	// double-testing args.length here, but it avoids duplicating the proc-setup code in two places
WITHOUT_CLASSIFICATION	// indices for temp values
WITHOUT_CLASSIFICATION	// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// snapshot of contents of directory // current position in directory
WITHOUT_CLASSIFICATION	// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.
WITHOUT_CLASSIFICATION	// explode array, it's an internal "args" array
WITHOUT_CLASSIFICATION	// explode array, it's an internal "args" array
WITHOUT_CLASSIFICATION	// set self to the class
WITHOUT_CLASSIFICATION	/* ---------- Public fields, methods --------- */
WITHOUT_CLASSIFICATION	// // A specific version was requested - use as is for search //
WITHOUT_CLASSIFICATION	// zero args, no block; do nothing
WITHOUT_CLASSIFICATION	// we need to collect all methods, though we'll only // install the ones that are named in this class
WITHOUT_CLASSIFICATION	// Store each line into this list if not null.
WITHOUT_CLASSIFICATION	// Portion of line right after beginning marker
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// If an IO exception occurs (something odd, but possible) // A directory may return null.
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// use array as-is, it's a literal array
WITHOUT_CLASSIFICATION	// finally with no exception
WITHOUT_CLASSIFICATION	// Now, for all variables used by 'i' mark them live before 'i'
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */
WITHOUT_CLASSIFICATION	// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned
WITHOUT_CLASSIFICATION	/* not a class */
WITHOUT_CLASSIFICATION	/* not a class */
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF
WITHOUT_CLASSIFICATION	// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway
WITHOUT_CLASSIFICATION	// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);
WITHOUT_CLASSIFICATION	// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.
WITHOUT_CLASSIFICATION	// ////////////////// CONSTANT API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// create the default thread group
WITHOUT_CLASSIFICATION	// range_each_func(range, step_i, b, e, args);
WITHOUT_CLASSIFICATION	/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */
WITHOUT_CLASSIFICATION	// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// retuns null when not found to avoid unnecessary getRuntime().getNil() call
WITHOUT_CLASSIFICATION	// returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	/* \cX, \c\M-X */
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	// line 286
WITHOUT_CLASSIFICATION	// line 476
WITHOUT_CLASSIFICATION	// line 513
WITHOUT_CLASSIFICATION	// line 530
WITHOUT_CLASSIFICATION	// line 533
WITHOUT_CLASSIFICATION	// line 537
WITHOUT_CLASSIFICATION	// line 551
WITHOUT_CLASSIFICATION	// end loop
WITHOUT_CLASSIFICATION	// MRI behavior: we don't print errno for actual Errno errors
WITHOUT_CLASSIFICATION	// prepare to call class definition method
WITHOUT_CLASSIFICATION	// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 
WITHOUT_CLASSIFICATION	// // fields should really be an immutable map as it is never modified after construction //
WITHOUT_CLASSIFICATION	// load self object as IRubyObject, for recv param
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated
WITHOUT_CLASSIFICATION	// We only want IO objects with valid streams (better to error now). 
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	// MRI has extra pointer which makes our code look a little bit // more strange in // comparison
WITHOUT_CLASSIFICATION	// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.
WITHOUT_CLASSIFICATION	//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.
WITHOUT_CLASSIFICATION	/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */
WITHOUT_CLASSIFICATION	/* Consider Thread aspects of this */
WITHOUT_CLASSIFICATION	// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.
WITHOUT_CLASSIFICATION	// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.
WITHOUT_CLASSIFICATION	// line 572
WITHOUT_CLASSIFICATION	// line 601
WITHOUT_CLASSIFICATION	// line 601
WITHOUT_CLASSIFICATION	// line 625
WITHOUT_CLASSIFICATION	// line 649
WITHOUT_CLASSIFICATION	// line 691
WITHOUT_CLASSIFICATION	// line 723
WITHOUT_CLASSIFICATION	// line 732
WITHOUT_CLASSIFICATION	// line 745
WITHOUT_CLASSIFICATION	// line 766
WITHOUT_CLASSIFICATION	// line 785
WITHOUT_CLASSIFICATION	// line 794
WITHOUT_CLASSIFICATION	// line 800
WITHOUT_CLASSIFICATION	// line 812
WITHOUT_CLASSIFICATION	// line 827
WITHOUT_CLASSIFICATION	// line 839
WITHOUT_CLASSIFICATION	// line 845
WITHOUT_CLASSIFICATION	// line 864
WITHOUT_CLASSIFICATION	// line 886
WITHOUT_CLASSIFICATION	// line 896
WITHOUT_CLASSIFICATION	// line 911
WITHOUT_CLASSIFICATION	// line 929
WITHOUT_CLASSIFICATION	// line 952
WITHOUT_CLASSIFICATION	// line 970
WITHOUT_CLASSIFICATION	// line 972
WITHOUT_CLASSIFICATION	// line 991
WITHOUT_CLASSIFICATION	// line 1011
WITHOUT_CLASSIFICATION	// line 1026
WITHOUT_CLASSIFICATION	// line 1038
WITHOUT_CLASSIFICATION	// line 1067
WITHOUT_CLASSIFICATION	// line 1085
WITHOUT_CLASSIFICATION	// line 1097
WITHOUT_CLASSIFICATION	// line 1105
WITHOUT_CLASSIFICATION	// line 1122
WITHOUT_CLASSIFICATION	// line 1133
WITHOUT_CLASSIFICATION	// line 1145
WITHOUT_CLASSIFICATION	// line 1169
WITHOUT_CLASSIFICATION	// line 1201
WITHOUT_CLASSIFICATION	// line 1210
WITHOUT_CLASSIFICATION	// line 1229
WITHOUT_CLASSIFICATION	// line 1261
WITHOUT_CLASSIFICATION	// line 1287
WITHOUT_CLASSIFICATION	// line 1293
WITHOUT_CLASSIFICATION	// line 1307
WITHOUT_CLASSIFICATION	// line 1320
WITHOUT_CLASSIFICATION	// line 1325
WITHOUT_CLASSIFICATION	// line 1363
WITHOUT_CLASSIFICATION	// line 1398
WITHOUT_CLASSIFICATION	// line 1448
WITHOUT_CLASSIFICATION	// line 1456
WITHOUT_CLASSIFICATION	// line 1473
WITHOUT_CLASSIFICATION	// line 1492
WITHOUT_CLASSIFICATION	// line 1513
WITHOUT_CLASSIFICATION	// line 1523
WITHOUT_CLASSIFICATION	// line 1562
WITHOUT_CLASSIFICATION	// line 1582
WITHOUT_CLASSIFICATION	// line 1603
WITHOUT_CLASSIFICATION	// line 1603
WITHOUT_CLASSIFICATION	// line 1615
WITHOUT_CLASSIFICATION	// line 1620
WITHOUT_CLASSIFICATION	// line 1635
WITHOUT_CLASSIFICATION	// line 1652
WITHOUT_CLASSIFICATION	// line 1681
WITHOUT_CLASSIFICATION	// line 1708
WITHOUT_CLASSIFICATION	// line 1716
WITHOUT_CLASSIFICATION	// line 1755
WITHOUT_CLASSIFICATION	// line 1772
WITHOUT_CLASSIFICATION	// line 1789
WITHOUT_CLASSIFICATION	// ACTIONS_END
WITHOUT_CLASSIFICATION	// ACTIONS_END
WITHOUT_CLASSIFICATION	/* force for args */
WITHOUT_CLASSIFICATION	/* last expression should not be void */
WITHOUT_CLASSIFICATION	/* compstmt position includes both parens around it*/
WITHOUT_CLASSIFICATION	// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */
WITHOUT_CLASSIFICATION	// line 313
WITHOUT_CLASSIFICATION	// line 339
WITHOUT_CLASSIFICATION	// line 361
WITHOUT_CLASSIFICATION	// line 413
WITHOUT_CLASSIFICATION	// line 451
WITHOUT_CLASSIFICATION	// line 472
WITHOUT_CLASSIFICATION	// line 500
WITHOUT_CLASSIFICATION	// line 515
WITHOUT_CLASSIFICATION	// line 555
WITHOUT_CLASSIFICATION	// line 582
WITHOUT_CLASSIFICATION	// line 619
WITHOUT_CLASSIFICATION	// line 636
WITHOUT_CLASSIFICATION	// line 669
WITHOUT_CLASSIFICATION	// line 703
WITHOUT_CLASSIFICATION	// line 776
WITHOUT_CLASSIFICATION	// line 814
WITHOUT_CLASSIFICATION	// line 823
WITHOUT_CLASSIFICATION	// line 854
WITHOUT_CLASSIFICATION	// line 872
WITHOUT_CLASSIFICATION	// line 905
WITHOUT_CLASSIFICATION	// line 925
WITHOUT_CLASSIFICATION	// line 958
WITHOUT_CLASSIFICATION	// line 992
WITHOUT_CLASSIFICATION	// line 1047
WITHOUT_CLASSIFICATION	// line 1072
WITHOUT_CLASSIFICATION	// line 1081
WITHOUT_CLASSIFICATION	// line 1108
WITHOUT_CLASSIFICATION	// line 1136
WITHOUT_CLASSIFICATION	// line 1168
WITHOUT_CLASSIFICATION	// line 1192
WITHOUT_CLASSIFICATION	// line 1241
WITHOUT_CLASSIFICATION	// line 1267
WITHOUT_CLASSIFICATION	// line 1286
WITHOUT_CLASSIFICATION	// line 1301
WITHOUT_CLASSIFICATION	// line 1314
WITHOUT_CLASSIFICATION	// line 1333
WITHOUT_CLASSIFICATION	// line 1362
WITHOUT_CLASSIFICATION	// line 1395
WITHOUT_CLASSIFICATION	// line 1420
WITHOUT_CLASSIFICATION	// line 1439
WITHOUT_CLASSIFICATION	// line 1476
WITHOUT_CLASSIFICATION	// line 1535
WITHOUT_CLASSIFICATION	// line 1588
WITHOUT_CLASSIFICATION	// line 1618
WITHOUT_CLASSIFICATION	// line 1643
WITHOUT_CLASSIFICATION	// line 1669
WITHOUT_CLASSIFICATION	// line 1728
WITHOUT_CLASSIFICATION	// line 1753
WITHOUT_CLASSIFICATION	// line 1779
WITHOUT_CLASSIFICATION	// line 1794
WITHOUT_CLASSIFICATION	// line 1812
WITHOUT_CLASSIFICATION	// line 1837
WITHOUT_CLASSIFICATION	// line 1895
WITHOUT_CLASSIFICATION	// line 1925
WITHOUT_CLASSIFICATION	// line 1950
WITHOUT_CLASSIFICATION	// line 1992
WITHOUT_CLASSIFICATION	// line 2014
WITHOUT_CLASSIFICATION	// Whether this scope is used as the "argument scope" for e.g. zsuper
WITHOUT_CLASSIFICATION	// If we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// tc // under method // self // under method // name // args
WITHOUT_CLASSIFICATION	// allow it to bubble up
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// Check for a builtin first.
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e
WITHOUT_CLASSIFICATION	/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */
WITHOUT_CLASSIFICATION	// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.
WITHOUT_CLASSIFICATION	// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar
WITHOUT_CLASSIFICATION	// double precision, native // double precision, native
WITHOUT_CLASSIFICATION	// 64-bit number, native (as bignum)
WITHOUT_CLASSIFICATION	// Next indicates to decode using native encoding format
WITHOUT_CLASSIFICATION	// calculate based on a, b, c and d
WITHOUT_CLASSIFICATION	// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	// MRI behavior:  for 'Q', do not add trailing nils
WITHOUT_CLASSIFICATION	//this test may be too lax but it is the same as in MRI
WITHOUT_CLASSIFICATION	// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.
WITHOUT_CLASSIFICATION	// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.
WITHOUT_CLASSIFICATION	// first digit is always printed
WITHOUT_CLASSIFICATION	// an empirically derived rule: precision applies to // significand length, irrespective of exponent
WITHOUT_CLASSIFICATION	// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form
WITHOUT_CLASSIFICATION	// in this mode, '.' is always printed
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// MRI behavior: validate only the unnumbered arguments
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	// could not get canonical path, just use given path
WITHOUT_CLASSIFICATION	// We always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only
WITHOUT_CLASSIFICATION	// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.
WITHOUT_CLASSIFICATION	// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //
WITHOUT_CLASSIFICATION	// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //
WITHOUT_CLASSIFICATION	// // Cannot discern the total read length - allocate at least enough for the buffered data //
WITHOUT_CLASSIFICATION	// // Copy what is in the buffer, if there is some buffered data //
WITHOUT_CLASSIFICATION	// append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	// already have some bytes buffered, just return those
WITHOUT_CLASSIFICATION	// reset buffer
WITHOUT_CLASSIFICATION	// // Synchronize and re-check to avoid creating more than one Selector per provider //
WITHOUT_CLASSIFICATION	// TODO: Ruby logic is somewhat more complicated here, see comments after
WITHOUT_CLASSIFICATION	// Is there something built into JRuby to do this?
WITHOUT_CLASSIFICATION	// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);
WITHOUT_CLASSIFICATION	// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);
WITHOUT_CLASSIFICATION	// Uncomment the "puts" lines if you want to see more detail
WITHOUT_CLASSIFICATION	// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	// change the thread context to include the class
