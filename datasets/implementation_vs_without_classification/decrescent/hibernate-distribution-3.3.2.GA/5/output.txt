todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9918706274041411	WITHOUT_CLASSIFICATION	0.008129372595858796	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9918706274041411	WITHOUT_CLASSIFICATION	0.008129372595858796	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9376426615789987	WITHOUT_CLASSIFICATION	0.062357338421001315	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6667443943184126	IMPLEMENTATION	0.3332556056815875	WITHOUT_CLASSIFICATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.7255451880483701	WITHOUT_CLASSIFICATION	0.27445481195162985	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9378940933262802	IMPLEMENTATION	0.06210590667371974	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9704457299097418	WITHOUT_CLASSIFICATION	0.02955427009025824	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.981370596651673	WITHOUT_CLASSIFICATION	0.01862940334832693	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.6819763332231132	WITHOUT_CLASSIFICATION	0.3180236667768868	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.727454392204503	IMPLEMENTATION	0.272545607795497	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9429319359380985	WITHOUT_CLASSIFICATION	0.05706806406190146	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9660369831225767	IMPLEMENTATION	0.03396301687742319	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.8488762940659597	WITHOUT_CLASSIFICATION	0.1511237059340403	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.8488762940659597	WITHOUT_CLASSIFICATION	0.1511237059340403	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9890992186334917	IMPLEMENTATION	0.010900781366508364	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9183042636702863	IMPLEMENTATION	0.08169573632971372	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9991956979179495	IMPLEMENTATION	8.043020820505501E-4	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9996244462231866	WITHOUT_CLASSIFICATION	3.755537768134411E-4	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999999994632528	WITHOUT_CLASSIFICATION	5.367470742173171E-10	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.6780880484556207	WITHOUT_CLASSIFICATION	0.32191195154437946	IMPLEMENTATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9488367759148988	IMPLEMENTATION	0.05116322408510124	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9975347034382468	WITHOUT_CLASSIFICATION	0.002465296561753104	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9242907430813928	IMPLEMENTATION	0.0757092569186072	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9990816843769241	IMPLEMENTATION	9.183156230758364E-4	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9990816843769241	IMPLEMENTATION	9.183156230758364E-4	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9979754576657113	IMPLEMENTATION	0.0020245423342887332	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.8559451466148211	WITHOUT_CLASSIFICATION	0.14405485338517884	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9984006963143257	IMPLEMENTATION	0.0015993036856743344	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8186287377515337	IMPLEMENTATION	0.18137126224846625	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9803334847160352	IMPLEMENTATION	0.019666515283964812	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.6775035442687708	WITHOUT_CLASSIFICATION	0.3224964557312292	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.8793133217694226	IMPLEMENTATION	0.1206866782305774	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9971020342125462	WITHOUT_CLASSIFICATION	0.002897965787453855	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8633802850777627	IMPLEMENTATION	0.1366197149222374	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9942766554949276	IMPLEMENTATION	0.005723344505072482	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9736271584306196	WITHOUT_CLASSIFICATION	0.026372841569380353	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.5197464894382943	WITHOUT_CLASSIFICATION	0.4802535105617057	IMPLEMENTATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5946817516087082	IMPLEMENTATION	0.4053182483912919	WITHOUT_CLASSIFICATION
TODO: use these in methods above	IMPLEMENTATION	0.6098589319081188	IMPLEMENTATION	0.3901410680918812	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9867739316176822	IMPLEMENTATION	0.013226068382317779	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9867739316176822	IMPLEMENTATION	0.013226068382317779	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.7968596296738781	WITHOUT_CLASSIFICATION	0.20314037032612187	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9987940047448557	WITHOUT_CLASSIFICATION	0.0012059952551442851	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.998200887237569	WITHOUT_CLASSIFICATION	0.001799112762431017	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9955690580772557	IMPLEMENTATION	0.0044309419227442325	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.9003787085954222	IMPLEMENTATION	0.09962129140457769	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.965627015192393	WITHOUT_CLASSIFICATION	0.03437298480760699	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.5542197505046295	IMPLEMENTATION	0.44578024949537043	WITHOUT_CLASSIFICATION
todo : cache this sql...	IMPLEMENTATION	0.9998367979407672	WITHOUT_CLASSIFICATION	1.6320205923273855E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.9861285471638345	IMPLEMENTATION	0.013871452836165522	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.8993672053465108	WITHOUT_CLASSIFICATION	0.10063279465348912	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9830603677700444	IMPLEMENTATION	0.016939632229955662	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9788296605174366	IMPLEMENTATION	0.021170339482563454	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9889687875032532	IMPLEMENTATION	0.011031212496746748	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9264103255616992	IMPLEMENTATION	0.07358967443830076	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9996649843579581	IMPLEMENTATION	3.350156420419696E-4	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9264103255616992	IMPLEMENTATION	0.07358967443830076	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9998400869672907	IMPLEMENTATION	1.599130327092556E-4	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.9875658892546882	IMPLEMENTATION	0.012434110745311712	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.9264103255616992	IMPLEMENTATION	0.07358967443830076	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999886125978426	WITHOUT_CLASSIFICATION	1.1387402157414835E-5	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999886125978426	WITHOUT_CLASSIFICATION	1.1387402157414835E-5	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.5079353481565236	IMPLEMENTATION	0.49206465184347636	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9975364894989396	WITHOUT_CLASSIFICATION	0.0024635105010603437	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999628339886775	WITHOUT_CLASSIFICATION	3.716601132250897E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.999993619043434	WITHOUT_CLASSIFICATION	6.380956566035055E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.999993619043434	WITHOUT_CLASSIFICATION	6.380956566035055E-6	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999909598544496	WITHOUT_CLASSIFICATION	9.040145550349117E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999349999046	WITHOUT_CLASSIFICATION	6.500009542037165E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999991695948688	WITHOUT_CLASSIFICATION	8.304051312378331E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999990291095336	WITHOUT_CLASSIFICATION	9.708904662775276E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999990291095336	WITHOUT_CLASSIFICATION	9.708904662775276E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998695159772	WITHOUT_CLASSIFICATION	1.304840228162487E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996192039355	WITHOUT_CLASSIFICATION	3.807960644689357E-7	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999994983889999	WITHOUT_CLASSIFICATION	5.016110000247076E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999941155598633	WITHOUT_CLASSIFICATION	5.884440136666506E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990721567446	WITHOUT_CLASSIFICATION	9.27843255509931E-7	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990721567446	WITHOUT_CLASSIFICATION	9.27843255509931E-7	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999779651760659	WITHOUT_CLASSIFICATION	2.2034823934115155E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999753537798713	WITHOUT_CLASSIFICATION	2.46462201287029E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999742710998124	WITHOUT_CLASSIFICATION	2.5728900187610605E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999978308021	WITHOUT_CLASSIFICATION	2.169197860610869E-9	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999967349603	WITHOUT_CLASSIFICATION	3.2650396000599884E-9	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999944886213837	WITHOUT_CLASSIFICATION	5.5113786162928504E-6	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9998898361523553	WITHOUT_CLASSIFICATION	1.1016384764468647E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999846612870789	WITHOUT_CLASSIFICATION	1.53387129211223E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801609285127	WITHOUT_CLASSIFICATION	1.9839071487267648E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999852700779538	WITHOUT_CLASSIFICATION	1.4729922046091768E-5	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999931464159417	WITHOUT_CLASSIFICATION	6.853584058166937E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999690614846518	WITHOUT_CLASSIFICATION	3.0938515348175396E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999999906068	WITHOUT_CLASSIFICATION	9.393190836629321E-11	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999738887095019	WITHOUT_CLASSIFICATION	2.6111290498193048E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999738887095019	WITHOUT_CLASSIFICATION	2.6111290498193048E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999851969033963	WITHOUT_CLASSIFICATION	1.4803096603758008E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999794332364842	WITHOUT_CLASSIFICATION	2.0566763515747692E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999998295468364	WITHOUT_CLASSIFICATION	1.7045316360567637E-7	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999650064460718	WITHOUT_CLASSIFICATION	3.499355392818908E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9978059005971719	WITHOUT_CLASSIFICATION	0.0021940994028280076	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999999982866827	WITHOUT_CLASSIFICATION	1.71331730152425E-8	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.999999463713374	WITHOUT_CLASSIFICATION	5.362866261060753E-7	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999999478515601	WITHOUT_CLASSIFICATION	5.214844000053393E-8	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999955805845	WITHOUT_CLASSIFICATION	4.419415568280629E-9	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999980471798005	WITHOUT_CLASSIFICATION	1.9528201994696724E-6	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999974287939465	WITHOUT_CLASSIFICATION	2.57120605349046E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999825157193	WITHOUT_CLASSIFICATION	1.7484280667743385E-8	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999992568653	WITHOUT_CLASSIFICATION	7.431347784690213E-10	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664275026091	WITHOUT_CLASSIFICATION	3.3572497390874964E-5	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999567806691727	WITHOUT_CLASSIFICATION	4.321933082732695E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999644662329142	WITHOUT_CLASSIFICATION	3.553376708573682E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999475673514193	WITHOUT_CLASSIFICATION	5.243264858066334E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999996236730764	WITHOUT_CLASSIFICATION	3.7632692362304106E-7	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999973776992523	WITHOUT_CLASSIFICATION	2.6223007477625166E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999879504063901	WITHOUT_CLASSIFICATION	1.2049593609920847E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999789503773041	WITHOUT_CLASSIFICATION	2.1049622695935096E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999949875500426	WITHOUT_CLASSIFICATION	5.012449957437214E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999879504063901	WITHOUT_CLASSIFICATION	1.2049593609920847E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999949875500426	WITHOUT_CLASSIFICATION	5.012449957437214E-6	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998443806349	WITHOUT_CLASSIFICATION	1.5561936499853213E-7	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999883016765365	WITHOUT_CLASSIFICATION	1.1698323463502033E-5	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999770091011829	WITHOUT_CLASSIFICATION	2.2990898817114522E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9991122697315925	WITHOUT_CLASSIFICATION	8.877302684075217E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999794263053	WITHOUT_CLASSIFICATION	2.05736947916364E-8	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999982562875	WITHOUT_CLASSIFICATION	1.7437124461140225E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9847031186123554	WITHOUT_CLASSIFICATION	0.015296881387644649	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9945049874908174	WITHOUT_CLASSIFICATION	0.005495012509182589	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998074691690452	WITHOUT_CLASSIFICATION	1.9253083095487688E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9998993813009739	WITHOUT_CLASSIFICATION	1.0061869902610956E-4	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999970760984267	WITHOUT_CLASSIFICATION	2.923901573324674E-6	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999949875500426	WITHOUT_CLASSIFICATION	5.012449957437214E-6	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999958699258	WITHOUT_CLASSIFICATION	4.1300741811906094E-9	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9986676237673272	WITHOUT_CLASSIFICATION	0.0013323762326728048	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.99998918418109	WITHOUT_CLASSIFICATION	1.0815818910041965E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999994863488	WITHOUT_CLASSIFICATION	5.13651203006781E-10	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999473734371	WITHOUT_CLASSIFICATION	5.262656297504249E-8	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998455466664874	WITHOUT_CLASSIFICATION	1.5445333351266394E-4	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999771796296469	WITHOUT_CLASSIFICATION	2.2820370353038427E-5	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999992498588114	WITHOUT_CLASSIFICATION	7.501411885507407E-7	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999969918067105	WITHOUT_CLASSIFICATION	3.008193289574646E-6	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.99999976019425	WITHOUT_CLASSIFICATION	2.3980575003822095E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999853096865133	WITHOUT_CLASSIFICATION	1.4690313486726385E-5	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987607077844	WITHOUT_CLASSIFICATION	1.2392922156370517E-6	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7571771019687964	WITHOUT_CLASSIFICATION	0.24282289803120366	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999971755654115	WITHOUT_CLASSIFICATION	2.8244345885154633E-6	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999999995798811	WITHOUT_CLASSIFICATION	4.2011890228239866E-9	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9975369253881423	WITHOUT_CLASSIFICATION	0.0024630746118577797	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999663128503	WITHOUT_CLASSIFICATION	3.3687149774156436E-8	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999914335338261	WITHOUT_CLASSIFICATION	8.566466173883088E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999849962900382	WITHOUT_CLASSIFICATION	1.500370996177906E-5	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999968066040182	WITHOUT_CLASSIFICATION	3.1933959817438363E-6	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999979591149	WITHOUT_CLASSIFICATION	2.0408851638604704E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999864120451	WITHOUT_CLASSIFICATION	1.358795489451573E-7	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999000969114	WITHOUT_CLASSIFICATION	9.990308858625585E-8	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999987726638	WITHOUT_CLASSIFICATION	1.2273362755197048E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999999864120451	WITHOUT_CLASSIFICATION	1.358795489451573E-7	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999996934285531	WITHOUT_CLASSIFICATION	3.065714468791998E-7	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998866235836	WITHOUT_CLASSIFICATION	1.1337641640700092E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999879504063901	WITHOUT_CLASSIFICATION	1.2049593609920847E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999917115976308	WITHOUT_CLASSIFICATION	8.288402369152348E-6	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.999999230583499	WITHOUT_CLASSIFICATION	7.694165009729647E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997815890299	WITHOUT_CLASSIFICATION	2.1841096999272164E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997815890299	WITHOUT_CLASSIFICATION	2.1841096999272164E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999959452561615	WITHOUT_CLASSIFICATION	4.054743838473844E-6	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999989510864752	WITHOUT_CLASSIFICATION	1.0489135247161557E-6	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.999999982294543	WITHOUT_CLASSIFICATION	1.7705457005532375E-8	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999999909167	WITHOUT_CLASSIFICATION	9.083299123583794E-11	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999261217662	WITHOUT_CLASSIFICATION	7.387823371570134E-8	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999389020319468	WITHOUT_CLASSIFICATION	6.109796805320581E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999751094695489	WITHOUT_CLASSIFICATION	2.4890530451105963E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9999228271410548	WITHOUT_CLASSIFICATION	7.717285894512646E-5	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999919968647832	WITHOUT_CLASSIFICATION	8.003135216776553E-6	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999166031743	WITHOUT_CLASSIFICATION	8.339682561325202E-8	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999997493761568	WITHOUT_CLASSIFICATION	2.5062384319925316E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999997493761568	WITHOUT_CLASSIFICATION	2.5062384319925316E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999726038143216	WITHOUT_CLASSIFICATION	2.739618567829743E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998668322331	WITHOUT_CLASSIFICATION	1.3316776684668192E-7	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999967316166594	WITHOUT_CLASSIFICATION	3.2683833405705763E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999997493761568	WITHOUT_CLASSIFICATION	2.5062384319925316E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999726038143216	WITHOUT_CLASSIFICATION	2.739618567829743E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999726038143216	WITHOUT_CLASSIFICATION	2.739618567829743E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999993937080586	WITHOUT_CLASSIFICATION	6.062919414829572E-7	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998429756113096	WITHOUT_CLASSIFICATION	1.5702438869034566E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999664588417	WITHOUT_CLASSIFICATION	3.354115834450969E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999853355398255	WITHOUT_CLASSIFICATION	1.466446017445015E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999852108004397	WITHOUT_CLASSIFICATION	1.4789199560304045E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.999852108004397	WITHOUT_CLASSIFICATION	1.4789199560304045E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999995326735661	WITHOUT_CLASSIFICATION	4.673264338150869E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999940929961	WITHOUT_CLASSIFICATION	5.907003884443022E-9	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999993907139756	WITHOUT_CLASSIFICATION	6.092860243760793E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998174240907	WITHOUT_CLASSIFICATION	1.825759092791734E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998174240907	WITHOUT_CLASSIFICATION	1.825759092791734E-7	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999995970921743	WITHOUT_CLASSIFICATION	4.0290782574672095E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989715321370725	WITHOUT_CLASSIFICATION	0.0010284678629275176	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991924003603	WITHOUT_CLASSIFICATION	8.075996396762141E-7	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999879513508	WITHOUT_CLASSIFICATION	1.2048649151355847E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999999046487	WITHOUT_CLASSIFICATION	9.53512079075942E-11	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998178502636	WITHOUT_CLASSIFICATION	1.8214973642247218E-7	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999991519432482	WITHOUT_CLASSIFICATION	8.480567518242298E-7	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999954775665246	WITHOUT_CLASSIFICATION	4.5224334754178105E-6	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999967897550519	WITHOUT_CLASSIFICATION	3.2102449481059585E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991924003603	WITHOUT_CLASSIFICATION	8.075996396762141E-7	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999942926286436	WITHOUT_CLASSIFICATION	5.707371356382074E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999408212750439	WITHOUT_CLASSIFICATION	5.917872495617954E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999408212750439	WITHOUT_CLASSIFICATION	5.917872495617954E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999996158389609	WITHOUT_CLASSIFICATION	3.8416103904924483E-7	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998440430765968	WITHOUT_CLASSIFICATION	1.5595692340318563E-4	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999992273158	WITHOUT_CLASSIFICATION	7.726841720350197E-10	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9924261108294102	WITHOUT_CLASSIFICATION	0.007573889170589767	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999998983572402	WITHOUT_CLASSIFICATION	1.0164275981120888E-7	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999554347624152	WITHOUT_CLASSIFICATION	4.4565237584757035E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999650671056711	WITHOUT_CLASSIFICATION	3.493289432897217E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.999999668859248	WITHOUT_CLASSIFICATION	3.311407519306497E-7	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999987529639904	WITHOUT_CLASSIFICATION	1.2470360095775593E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999933632426	WITHOUT_CLASSIFICATION	6.636757365470295E-9	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999933632426	WITHOUT_CLASSIFICATION	6.636757365470295E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997830015506	WITHOUT_CLASSIFICATION	2.1699844936270995E-7	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999628339886775	WITHOUT_CLASSIFICATION	3.716601132250897E-4	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999507723641	WITHOUT_CLASSIFICATION	4.922763586192851E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999997579828952	WITHOUT_CLASSIFICATION	2.4201710482971877E-7	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.999993619043434	WITHOUT_CLASSIFICATION	6.380956566035055E-6	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999973121629732	WITHOUT_CLASSIFICATION	2.687837026871706E-6	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999997320809582	WITHOUT_CLASSIFICATION	2.679190419053824E-7	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999998439666651	WITHOUT_CLASSIFICATION	1.5603333484608948E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.999996353987984	WITHOUT_CLASSIFICATION	3.6460120159148858E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999917366633075	WITHOUT_CLASSIFICATION	8.263336692407216E-6	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999742455474848	WITHOUT_CLASSIFICATION	2.5754452515245376E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999534192321463	WITHOUT_CLASSIFICATION	4.658076785372517E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999967083451271	WITHOUT_CLASSIFICATION	3.2916548728728255E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999349999046	WITHOUT_CLASSIFICATION	6.500009542037165E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988239985881	WITHOUT_CLASSIFICATION	1.1760014119514956E-6	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988239985881	WITHOUT_CLASSIFICATION	1.1760014119514956E-6	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999998919524029	WITHOUT_CLASSIFICATION	1.0804759713390746E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999934233634341	WITHOUT_CLASSIFICATION	6.576636565892332E-6	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999994950680273	WITHOUT_CLASSIFICATION	5.049319726532142E-7	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999980237576606	WITHOUT_CLASSIFICATION	1.976242339384601E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999910986918635	WITHOUT_CLASSIFICATION	8.90130813649258E-6	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999957578143788	WITHOUT_CLASSIFICATION	4.2421856212567815E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999990291095336	WITHOUT_CLASSIFICATION	9.708904662775276E-7	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999982142997703	WITHOUT_CLASSIFICATION	1.7857002296875368E-6	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999979495231452	WITHOUT_CLASSIFICATION	2.050476854750573E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999960033491365	WITHOUT_CLASSIFICATION	3.9966508634918716E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999984803798496	WITHOUT_CLASSIFICATION	1.5196201502998108E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.999986014846907	WITHOUT_CLASSIFICATION	1.3985153092962622E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.999930616731376	WITHOUT_CLASSIFICATION	6.938326862411316E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990116740729	WITHOUT_CLASSIFICATION	9.88325927126372E-7	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999488672517	WITHOUT_CLASSIFICATION	5.11327481639866E-8	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994866407477	WITHOUT_CLASSIFICATION	5.133592523334321E-7	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999991579064385	WITHOUT_CLASSIFICATION	8.420935616700208E-7	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.99999320290027	WITHOUT_CLASSIFICATION	6.797099729879462E-6	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999998637802555	WITHOUT_CLASSIFICATION	1.3621974446709013E-7	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999795448903063	WITHOUT_CLASSIFICATION	2.045510969367172E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.999993619043434	WITHOUT_CLASSIFICATION	6.380956566035055E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.999993619043434	WITHOUT_CLASSIFICATION	6.380956566035055E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999534192321463	WITHOUT_CLASSIFICATION	4.658076785372517E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988239985881	WITHOUT_CLASSIFICATION	1.1760014119514956E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990116740729	WITHOUT_CLASSIFICATION	9.88325927126372E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999998695159772	WITHOUT_CLASSIFICATION	1.304840228162487E-7	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999999349841155	WITHOUT_CLASSIFICATION	6.501588443792605E-8	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999996837200731	WITHOUT_CLASSIFICATION	3.162799269147948E-7	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999973809825627	WITHOUT_CLASSIFICATION	2.619017437325173E-6	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999773697285073	WITHOUT_CLASSIFICATION	2.2630271492703707E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998969981129	WITHOUT_CLASSIFICATION	1.0300188714315828E-7	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999842014702314	WITHOUT_CLASSIFICATION	1.579852976860358E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999979802113244	WITHOUT_CLASSIFICATION	2.019788675530994E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999599346464351	WITHOUT_CLASSIFICATION	4.006535356487557E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.999996922168895	WITHOUT_CLASSIFICATION	3.0778311049580304E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.999991945219476	WITHOUT_CLASSIFICATION	8.054780524137721E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.999991945219476	WITHOUT_CLASSIFICATION	8.054780524137721E-6	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999919971821	WITHOUT_CLASSIFICATION	8.002817912908893E-9	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999996820920689	WITHOUT_CLASSIFICATION	3.1790793111696067E-7	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9997753526979153	WITHOUT_CLASSIFICATION	2.246473020846489E-4	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9995565132364962	WITHOUT_CLASSIFICATION	4.434867635038409E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999953849728	WITHOUT_CLASSIFICATION	4.6150272072720684E-8	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999183909402	WITHOUT_CLASSIFICATION	8.160905986864456E-8	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.999999733534899	WITHOUT_CLASSIFICATION	2.6646510095369995E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996192039355	WITHOUT_CLASSIFICATION	3.807960644689357E-7	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999875935797921	WITHOUT_CLASSIFICATION	1.2406420208023172E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999994711399285	WITHOUT_CLASSIFICATION	5.288600715047297E-7	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999994711399285	WITHOUT_CLASSIFICATION	5.288600715047297E-7	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999995840156153	WITHOUT_CLASSIFICATION	4.159843847731818E-7	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999997995270116	WITHOUT_CLASSIFICATION	2.00472988373881E-7	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999943250879074	WITHOUT_CLASSIFICATION	5.67491209256236E-6	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999989698696512	WITHOUT_CLASSIFICATION	1.030130348796988E-6	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.999990318635355	WITHOUT_CLASSIFICATION	9.681364644911811E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.999993619043434	WITHOUT_CLASSIFICATION	6.380956566035055E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999534192321463	WITHOUT_CLASSIFICATION	4.658076785372517E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999349999046	WITHOUT_CLASSIFICATION	6.500009542037165E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990116740729	WITHOUT_CLASSIFICATION	9.88325927126372E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999990116740729	WITHOUT_CLASSIFICATION	9.88325927126372E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995721598628	WITHOUT_CLASSIFICATION	4.2784013726313583E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995721598628	WITHOUT_CLASSIFICATION	4.2784013726313583E-7	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999993211234911	WITHOUT_CLASSIFICATION	6.788765089122618E-7	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999698139086175	WITHOUT_CLASSIFICATION	3.018609138245672E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999698139086175	WITHOUT_CLASSIFICATION	3.018609138245672E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999863059032954	WITHOUT_CLASSIFICATION	1.3694096704669503E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999980276023073	WITHOUT_CLASSIFICATION	1.9723976927406906E-6	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999996330128486	WITHOUT_CLASSIFICATION	3.6698715140139723E-7	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999997769564279	WITHOUT_CLASSIFICATION	2.2304357200094341E-7	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999996614134634	WITHOUT_CLASSIFICATION	3.385865365204392E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999941155598633	WITHOUT_CLASSIFICATION	5.884440136666506E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999941155598633	WITHOUT_CLASSIFICATION	5.884440136666506E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9985473640930344	WITHOUT_CLASSIFICATION	0.0014526359069656632	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999973747508357	WITHOUT_CLASSIFICATION	2.625249164364936E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999991503256285	WITHOUT_CLASSIFICATION	8.496743715224747E-7	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999242629130524	WITHOUT_CLASSIFICATION	7.57370869477254E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999988989236164	WITHOUT_CLASSIFICATION	1.1010763835704002E-6	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999625977607867	WITHOUT_CLASSIFICATION	3.740223921335843E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990721567446	WITHOUT_CLASSIFICATION	9.27843255509931E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999971627111133	WITHOUT_CLASSIFICATION	2.8372888867102575E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999971627111133	WITHOUT_CLASSIFICATION	2.8372888867102575E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999779651760659	WITHOUT_CLASSIFICATION	2.2034823934115155E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999779651760659	WITHOUT_CLASSIFICATION	2.2034823934115155E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999583480113481	WITHOUT_CLASSIFICATION	4.1651988651893735E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999583480113481	WITHOUT_CLASSIFICATION	4.1651988651893735E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999836791197	WITHOUT_CLASSIFICATION	1.6320880295508893E-8	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999836791197	WITHOUT_CLASSIFICATION	1.6320880295508893E-8	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999941155598633	WITHOUT_CLASSIFICATION	5.884440136666506E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990721567446	WITHOUT_CLASSIFICATION	9.27843255509931E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999971627111133	WITHOUT_CLASSIFICATION	2.8372888867102575E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999971627111133	WITHOUT_CLASSIFICATION	2.8372888867102575E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999779651760659	WITHOUT_CLASSIFICATION	2.2034823934115155E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999583480113481	WITHOUT_CLASSIFICATION	4.1651988651893735E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999583480113481	WITHOUT_CLASSIFICATION	4.1651988651893735E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999836791197	WITHOUT_CLASSIFICATION	1.6320880295508893E-8	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999884256401341	WITHOUT_CLASSIFICATION	1.1574359865831019E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999999684945212	WITHOUT_CLASSIFICATION	3.150547884791466E-8	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999931511750622	WITHOUT_CLASSIFICATION	6.848824937863678E-6	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9992575447502727	WITHOUT_CLASSIFICATION	7.424552497273961E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999976150207673	WITHOUT_CLASSIFICATION	2.3849792327480865E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999462353410067	WITHOUT_CLASSIFICATION	5.376465899326019E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999990375727612	WITHOUT_CLASSIFICATION	9.624272388545864E-7	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999996114484334	WITHOUT_CLASSIFICATION	3.885515666258229E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999988350876291	WITHOUT_CLASSIFICATION	1.164912370921044E-6	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999820236065	WITHOUT_CLASSIFICATION	1.797639340870288E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999861909742304	WITHOUT_CLASSIFICATION	1.3809025769726931E-5	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997413429564	WITHOUT_CLASSIFICATION	2.5865704359840134E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999959452561615	WITHOUT_CLASSIFICATION	4.054743838473844E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999462353410067	WITHOUT_CLASSIFICATION	5.376465899326019E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999462353410067	WITHOUT_CLASSIFICATION	5.376465899326019E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999462353410067	WITHOUT_CLASSIFICATION	5.376465899326019E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999816809327	WITHOUT_CLASSIFICATION	1.8319067294103274E-8	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999931851056	WITHOUT_CLASSIFICATION	6.814894430591091E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999931851056	WITHOUT_CLASSIFICATION	6.814894430591091E-9	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999951676056	WITHOUT_CLASSIFICATION	4.832394336944661E-9	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999999508332	WITHOUT_CLASSIFICATION	4.916676694631462E-11	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999579619095	WITHOUT_CLASSIFICATION	4.203809055901464E-8	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999959117618282	WITHOUT_CLASSIFICATION	4.0882381717916E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999959117618282	WITHOUT_CLASSIFICATION	4.0882381717916E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999967349603	WITHOUT_CLASSIFICATION	3.2650396000599884E-9	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977020642805	WITHOUT_CLASSIFICATION	2.2979357194901133E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977020642805	WITHOUT_CLASSIFICATION	2.2979357194901133E-6	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997884763459	WITHOUT_CLASSIFICATION	2.115236541493524E-7	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999468120533	WITHOUT_CLASSIFICATION	5.318794675245122E-8	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999996595603	WITHOUT_CLASSIFICATION	3.404396059681011E-10	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999931093156964	WITHOUT_CLASSIFICATION	6.890684303609067E-6	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999864698441848	WITHOUT_CLASSIFICATION	1.3530155815197266E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999790670201554	WITHOUT_CLASSIFICATION	2.0932979844654208E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999944886213837	WITHOUT_CLASSIFICATION	5.5113786162928504E-6	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999871243151603	WITHOUT_CLASSIFICATION	1.2875684839671305E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9770375953187929	WITHOUT_CLASSIFICATION	0.022962404681207076	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998340908364753	WITHOUT_CLASSIFICATION	1.6590916352468194E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999964363117014	WITHOUT_CLASSIFICATION	3.563688298671911E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801609285127	WITHOUT_CLASSIFICATION	1.9839071487267648E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997895200673	WITHOUT_CLASSIFICATION	2.1047993264803487E-7	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999358282492303	WITHOUT_CLASSIFICATION	6.417175076962941E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999555035439	WITHOUT_CLASSIFICATION	4.449645612918508E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801609285127	WITHOUT_CLASSIFICATION	1.9839071487267648E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999998255495789	WITHOUT_CLASSIFICATION	1.7445042113868203E-7	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999854391568583	WITHOUT_CLASSIFICATION	1.4560843141602615E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999930698324159	WITHOUT_CLASSIFICATION	6.9301675840541825E-6	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999755503444397	WITHOUT_CLASSIFICATION	2.444965556029925E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999938493421029	WITHOUT_CLASSIFICATION	6.1506578970844995E-6	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999983205361402	WITHOUT_CLASSIFICATION	1.6794638597395972E-6	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999941010019325	WITHOUT_CLASSIFICATION	5.898998067516948E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999690614846518	WITHOUT_CLASSIFICATION	3.0938515348175396E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999974411795693	WITHOUT_CLASSIFICATION	2.5588204306253663E-6	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999999906068	WITHOUT_CLASSIFICATION	9.393190836629321E-11	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999604905813748	WITHOUT_CLASSIFICATION	3.950941862514037E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999999970997302	WITHOUT_CLASSIFICATION	2.900269722208228E-9	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999302729288561	WITHOUT_CLASSIFICATION	6.972707114393562E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999944886213837	WITHOUT_CLASSIFICATION	5.5113786162928504E-6	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999974411795693	WITHOUT_CLASSIFICATION	2.5588204306253663E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999604905813748	WITHOUT_CLASSIFICATION	3.950941862514037E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999302729288561	WITHOUT_CLASSIFICATION	6.972707114393562E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999730070775056	WITHOUT_CLASSIFICATION	2.6992922494294845E-5	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999888276333511	WITHOUT_CLASSIFICATION	1.117236664899837E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999928250839369	WITHOUT_CLASSIFICATION	7.174916063039186E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999738887095019	WITHOUT_CLASSIFICATION	2.6111290498193048E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999937687362429	WITHOUT_CLASSIFICATION	6.231263757073203E-6	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999903998159407	WITHOUT_CLASSIFICATION	9.600184059292846E-6	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999992763168936	WITHOUT_CLASSIFICATION	7.236831064864249E-7	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999870109962197	WITHOUT_CLASSIFICATION	1.2989003780270227E-5	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999991763472648	WITHOUT_CLASSIFICATION	8.236527351717878E-7	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999998851495351	WITHOUT_CLASSIFICATION	1.1485046498537253E-7	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999633110897	WITHOUT_CLASSIFICATION	3.6688910305071663E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999789895226674	WITHOUT_CLASSIFICATION	2.101047733253522E-5	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999996119873157	WITHOUT_CLASSIFICATION	3.8801268422140487E-7	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999972939097577	WITHOUT_CLASSIFICATION	2.7060902422424024E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.999985758359511	WITHOUT_CLASSIFICATION	1.4241640489070971E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999962246000518	WITHOUT_CLASSIFICATION	3.77539994820574E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999794332364842	WITHOUT_CLASSIFICATION	2.0566763515747692E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999886936811	WITHOUT_CLASSIFICATION	1.130631882014372E-8	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999815331151946	WITHOUT_CLASSIFICATION	1.846688480550693E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999974411795693	WITHOUT_CLASSIFICATION	2.5588204306253663E-6	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999999759429619	WITHOUT_CLASSIFICATION	2.40570381007715E-7	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999998338962952	WITHOUT_CLASSIFICATION	1.6610370481076327E-6	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999989660899696	WITHOUT_CLASSIFICATION	1.033910030317113E-6	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999948607988544	WITHOUT_CLASSIFICATION	5.139201145719488E-6	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.999996927422547	WITHOUT_CLASSIFICATION	3.0725774529192357E-6	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999973714391228	WITHOUT_CLASSIFICATION	2.628560877220597E-6	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999997622532722	WITHOUT_CLASSIFICATION	2.3774672779382214E-6	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999995177782578	WITHOUT_CLASSIFICATION	4.82221742265205E-7	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.999999366094718	WITHOUT_CLASSIFICATION	6.339052820231432E-7	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999724048278003	WITHOUT_CLASSIFICATION	2.759517219982954E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.99998896040504	WITHOUT_CLASSIFICATION	1.1039594960008112E-5	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999865136436521	WITHOUT_CLASSIFICATION	1.3486356347884714E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9324298186445698	WITHOUT_CLASSIFICATION	0.06757018135543018	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999650064460718	WITHOUT_CLASSIFICATION	3.499355392818908E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999998760159052	WITHOUT_CLASSIFICATION	1.239840946487026E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999996429222849	WITHOUT_CLASSIFICATION	3.5707771506983415E-7	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.999989172464691	WITHOUT_CLASSIFICATION	1.0827535308992452E-5	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999939128325233	WITHOUT_CLASSIFICATION	6.0871674767568156E-6	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999968000814967	WITHOUT_CLASSIFICATION	3.1999185033958498E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999936514254911	WITHOUT_CLASSIFICATION	6.348574508892766E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999970767598266	WITHOUT_CLASSIFICATION	2.9232401733999814E-6	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998863969683426	WITHOUT_CLASSIFICATION	1.1360303165747778E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999990664251792	WITHOUT_CLASSIFICATION	9.335748208554511E-7	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999999360171334	WITHOUT_CLASSIFICATION	6.398286657344922E-8	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999761519351362	WITHOUT_CLASSIFICATION	2.384806486382374E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999761519351362	WITHOUT_CLASSIFICATION	2.384806486382374E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999654874445527	WITHOUT_CLASSIFICATION	3.4512555447271264E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999402061793039	WITHOUT_CLASSIFICATION	5.979382069611243E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999876145976497	WITHOUT_CLASSIFICATION	1.2385402350261836E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999989398423629	WITHOUT_CLASSIFICATION	1.060157637204941E-6	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999997023569946	WITHOUT_CLASSIFICATION	2.97643005399181E-7	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999997145811548	WITHOUT_CLASSIFICATION	2.8541884527082567E-7	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999966497376848	WITHOUT_CLASSIFICATION	3.3502623152707847E-6	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9995065568616519	WITHOUT_CLASSIFICATION	4.934431383481026E-4	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999992700254867	WITHOUT_CLASSIFICATION	7.299745132279569E-7	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999991871523921	WITHOUT_CLASSIFICATION	8.128476079204207E-7	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999962893546369	WITHOUT_CLASSIFICATION	3.71064536304353E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999997041890933	WITHOUT_CLASSIFICATION	2.9581090666766435E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999988656329978	WITHOUT_CLASSIFICATION	1.134367002202306E-6	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999926880404166	WITHOUT_CLASSIFICATION	7.311959583266498E-6	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999949106509033	WITHOUT_CLASSIFICATION	5.089349096749394E-6	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999994768702289	WITHOUT_CLASSIFICATION	5.231297710847089E-7	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9998395603275699	WITHOUT_CLASSIFICATION	1.6043967243019823E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999994293710202	WITHOUT_CLASSIFICATION	5.706289798221899E-7	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993805558742	WITHOUT_CLASSIFICATION	6.194441256999746E-7	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999555290014	WITHOUT_CLASSIFICATION	4.4470998506105615E-8	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999034393050883	WITHOUT_CLASSIFICATION	9.656069491169329E-5	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999559606134	WITHOUT_CLASSIFICATION	4.403938657566737E-8	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999996454397634	WITHOUT_CLASSIFICATION	3.5456023670106845E-7	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999988904319019	WITHOUT_CLASSIFICATION	1.1095680981080006E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.999999678128711	WITHOUT_CLASSIFICATION	3.2187128896079977E-7	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999927738534249	WITHOUT_CLASSIFICATION	7.226146575014601E-6	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999395484863113	WITHOUT_CLASSIFICATION	6.0451513688689704E-5	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999993168453801	WITHOUT_CLASSIFICATION	6.831546198365388E-7	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999929859891	WITHOUT_CLASSIFICATION	7.014010969035421E-9	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999876348921434	WITHOUT_CLASSIFICATION	1.2365107856596209E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999555290014	WITHOUT_CLASSIFICATION	4.4470998506105615E-8	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999842460008401	WITHOUT_CLASSIFICATION	1.5753999159902522E-4	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999867309777011	WITHOUT_CLASSIFICATION	1.3269022298855617E-5	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999867244692775	WITHOUT_CLASSIFICATION	1.3275530722558734E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999863586692077	WITHOUT_CLASSIFICATION	1.3641330792280512E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999863586692077	WITHOUT_CLASSIFICATION	1.3641330792280512E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999600066949	WITHOUT_CLASSIFICATION	3.999330499433468E-8	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999995619080746	WITHOUT_CLASSIFICATION	4.3809192533596256E-7	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999945876138043	WITHOUT_CLASSIFICATION	5.412386195584679E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999945876138043	WITHOUT_CLASSIFICATION	5.412386195584679E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999990664251792	WITHOUT_CLASSIFICATION	9.335748208554511E-7	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999998523108086	WITHOUT_CLASSIFICATION	1.476891914339494E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999996791136838	WITHOUT_CLASSIFICATION	3.208863162052192E-6	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998117619595	WITHOUT_CLASSIFICATION	1.8823804049896012E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997830015506	WITHOUT_CLASSIFICATION	2.1699844936270995E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999996791136838	WITHOUT_CLASSIFICATION	3.208863162052192E-6	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998117619595	WITHOUT_CLASSIFICATION	1.8823804049896012E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999426973146459	WITHOUT_CLASSIFICATION	5.730268535410826E-5	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999851850943	WITHOUT_CLASSIFICATION	1.4814905870187179E-8	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999493660283	WITHOUT_CLASSIFICATION	5.0633971663246315E-8	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999997420447595	WITHOUT_CLASSIFICATION	2.579552405485481E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9991836238543521	WITHOUT_CLASSIFICATION	8.163761456478565E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.999362173066599	WITHOUT_CLASSIFICATION	6.378269334010116E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998315959014	WITHOUT_CLASSIFICATION	1.6840409857908335E-7	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998315959014	WITHOUT_CLASSIFICATION	1.6840409857908335E-7	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999999404617821	WITHOUT_CLASSIFICATION	5.9538217958055944E-8	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999996033485	WITHOUT_CLASSIFICATION	3.966514954286912E-9	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999827900099301	WITHOUT_CLASSIFICATION	1.7209990069984287E-5	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999992587398	WITHOUT_CLASSIFICATION	7.412601279679552E-10	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999992630575126	WITHOUT_CLASSIFICATION	7.369424874469347E-7	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999979845161616	WITHOUT_CLASSIFICATION	2.0154838383958444E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997830015506	WITHOUT_CLASSIFICATION	2.1699844936270995E-7	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999994693129445	WITHOUT_CLASSIFICATION	5.306870554915722E-7	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999676707845	WITHOUT_CLASSIFICATION	3.232921562483094E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999676707845	WITHOUT_CLASSIFICATION	3.232921562483094E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999980747539939	WITHOUT_CLASSIFICATION	1.925246005948386E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999426973146459	WITHOUT_CLASSIFICATION	5.730268535410826E-5	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999795211368804	WITHOUT_CLASSIFICATION	2.047886311960253E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998812860563859	WITHOUT_CLASSIFICATION	1.187139436141731E-4	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9976622340169371	WITHOUT_CLASSIFICATION	0.0023377659830629205	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998715111644	WITHOUT_CLASSIFICATION	1.284888356126201E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999076438220903	WITHOUT_CLASSIFICATION	9.235617790970185E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999426973146459	WITHOUT_CLASSIFICATION	5.730268535410826E-5	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998715111644	WITHOUT_CLASSIFICATION	1.284888356126201E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999076438220903	WITHOUT_CLASSIFICATION	9.235617790970185E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999997844317193	WITHOUT_CLASSIFICATION	2.1556828077083661E-7	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999956367129259	WITHOUT_CLASSIFICATION	4.363287074092591E-6	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999504749538	WITHOUT_CLASSIFICATION	4.952504605376502E-8	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999426973146459	WITHOUT_CLASSIFICATION	5.730268535410826E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999426973146459	WITHOUT_CLASSIFICATION	5.730268535410826E-5	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999991481267333	WITHOUT_CLASSIFICATION	8.518732668347249E-7	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999987093161563	WITHOUT_CLASSIFICATION	1.2906838436624972E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999992471088853	WITHOUT_CLASSIFICATION	7.528911145952188E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664275026091	WITHOUT_CLASSIFICATION	3.3572497390874964E-5	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.999999391596679	WITHOUT_CLASSIFICATION	6.084033209914271E-7	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999962183067	WITHOUT_CLASSIFICATION	3.781693348898352E-9	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999560766564308	WITHOUT_CLASSIFICATION	4.392334356918476E-5	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999706225993	WITHOUT_CLASSIFICATION	2.9377400701972517E-7	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999931656656341	WITHOUT_CLASSIFICATION	6.83433436590177E-6	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999976736207667	WITHOUT_CLASSIFICATION	2.3263792333466946E-6	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999560975087721	WITHOUT_CLASSIFICATION	4.390249122787475E-5	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9997239617038687	WITHOUT_CLASSIFICATION	2.7603829613138313E-4	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999740339165	WITHOUT_CLASSIFICATION	2.596608354914686E-8	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999952775834842	WITHOUT_CLASSIFICATION	4.7224165158014815E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996487416581	WITHOUT_CLASSIFICATION	3.512583419117623E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999077265702	WITHOUT_CLASSIFICATION	9.227342967467847E-8	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664275026091	WITHOUT_CLASSIFICATION	3.3572497390874964E-5	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999947765778697	WITHOUT_CLASSIFICATION	5.22342213031434E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999962409909138	WITHOUT_CLASSIFICATION	3.759009086150353E-6	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998944719432	WITHOUT_CLASSIFICATION	1.0552805687180189E-7	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999828935408233	WITHOUT_CLASSIFICATION	1.7106459176732344E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999048499140586	WITHOUT_CLASSIFICATION	9.515008594146683E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999048499140586	WITHOUT_CLASSIFICATION	9.515008594146683E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664275026091	WITHOUT_CLASSIFICATION	3.3572497390874964E-5	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999736733947133	WITHOUT_CLASSIFICATION	2.6326605286559384E-5	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998101062337	WITHOUT_CLASSIFICATION	1.8989376617759837E-7	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9973296169497579	WITHOUT_CLASSIFICATION	0.0026703830502422506	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999735335063	WITHOUT_CLASSIFICATION	2.6466493747071487E-8	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995390758826	WITHOUT_CLASSIFICATION	4.6092411739088825E-6	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999631907813197	WITHOUT_CLASSIFICATION	3.680921868029827E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999976653552908	WITHOUT_CLASSIFICATION	2.3346447092287513E-6	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999990032787737	WITHOUT_CLASSIFICATION	9.96721226294194E-7	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976840600764	WITHOUT_CLASSIFICATION	2.3159399236012424E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999781672063	WITHOUT_CLASSIFICATION	2.18327936911921E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999985870803901	WITHOUT_CLASSIFICATION	1.4129196098896679E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999997050412626	WITHOUT_CLASSIFICATION	2.9495873749303216E-7	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9993281697131647	WITHOUT_CLASSIFICATION	6.718302868351858E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999993289296558	WITHOUT_CLASSIFICATION	6.710703442071107E-7	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999225921823	WITHOUT_CLASSIFICATION	7.740781779291744E-8	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999962948755	WITHOUT_CLASSIFICATION	3.7051244570385546E-9	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999981547614883	WITHOUT_CLASSIFICATION	1.8452385116738174E-6	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999968354938011	WITHOUT_CLASSIFICATION	3.1645061988452666E-6	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999278746443	WITHOUT_CLASSIFICATION	7.212535561676918E-8	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999944112812	WITHOUT_CLASSIFICATION	5.588718832127831E-9	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999781426233316	WITHOUT_CLASSIFICATION	2.185737666844534E-5	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999805243644367	WITHOUT_CLASSIFICATION	1.9475635563194286E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9956256770621876	WITHOUT_CLASSIFICATION	0.004374322937812411	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951654294364642	WITHOUT_CLASSIFICATION	0.0048345705635357995	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995769182269756	WITHOUT_CLASSIFICATION	4.2308177302450444E-4	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999564939938239	WITHOUT_CLASSIFICATION	4.3506006176054785E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982355004276553	WITHOUT_CLASSIFICATION	0.00176449957234463	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995696101508106	WITHOUT_CLASSIFICATION	4.3038984918942526E-4	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9916420703615756	WITHOUT_CLASSIFICATION	0.008357929638424435	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999264257561424	WITHOUT_CLASSIFICATION	7.35742438575073E-5	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999071168211389	WITHOUT_CLASSIFICATION	9.288317886112139E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999457676561939	WITHOUT_CLASSIFICATION	5.423234380596031E-5	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999339516744477	WITHOUT_CLASSIFICATION	6.604832555237567E-5	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689736123932	WITHOUT_CLASSIFICATION	3.1026387606671413E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999871629437709	WITHOUT_CLASSIFICATION	1.2837056229098186E-4	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982379447128495	WITHOUT_CLASSIFICATION	0.0017620552871505143	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516841110493	WITHOUT_CLASSIFICATION	4.831588895080425E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927366547846	WITHOUT_CLASSIFICATION	7.2633452153557655E-6	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973373848719289	WITHOUT_CLASSIFICATION	0.0026626151280711168	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981651581815004	WITHOUT_CLASSIFICATION	0.0018348418184996108	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999990675899179	WITHOUT_CLASSIFICATION	9.324100820406654E-7	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998932303533181	WITHOUT_CLASSIFICATION	1.0676964668194147E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8401218423100131	WITHOUT_CLASSIFICATION	0.1598781576899869	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997410138054	WITHOUT_CLASSIFICATION	2.589861945220358E-7	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999599556009	WITHOUT_CLASSIFICATION	4.004439916441545E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998418458351	WITHOUT_CLASSIFICATION	1.581541649086252E-6	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999928451588094	WITHOUT_CLASSIFICATION	7.154841190576164E-6	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999990372460189	WITHOUT_CLASSIFICATION	9.627539811305936E-7	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999993894313	WITHOUT_CLASSIFICATION	6.105687076527474E-10	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999996776729564	WITHOUT_CLASSIFICATION	3.223270435547583E-7	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999965405986633	WITHOUT_CLASSIFICATION	3.4594013367442837E-6	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999804051396127	WITHOUT_CLASSIFICATION	1.9594860387293443E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999927373203819	WITHOUT_CLASSIFICATION	7.2626796181257415E-6	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999969814851792	WITHOUT_CLASSIFICATION	3.018514820689473E-6	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999852080974	WITHOUT_CLASSIFICATION	1.4791902552805574E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999851703701	WITHOUT_CLASSIFICATION	1.4829629916737244E-8	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999397634064093	WITHOUT_CLASSIFICATION	6.023659359080363E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999942156385343	WITHOUT_CLASSIFICATION	5.784361465739125E-6	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999995770846088	WITHOUT_CLASSIFICATION	4.2291539112079176E-7	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114418759066	WITHOUT_CLASSIFICATION	8.85581240933352E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999449234582778	WITHOUT_CLASSIFICATION	5.507654172213566E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997845949038	WITHOUT_CLASSIFICATION	2.1540509621106814E-6	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858744838225	WITHOUT_CLASSIFICATION	1.4125516177435041E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9983545806690037	WITHOUT_CLASSIFICATION	0.0016454193309962933	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999980416456702	WITHOUT_CLASSIFICATION	1.9583543298182376E-6	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999802748831686	WITHOUT_CLASSIFICATION	1.9725116831408778E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999867431555888	WITHOUT_CLASSIFICATION	1.325684441134168E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999583450200243	WITHOUT_CLASSIFICATION	4.1654979975637325E-5	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999444255665	WITHOUT_CLASSIFICATION	5.557443343858321E-8	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999999990257186	WITHOUT_CLASSIFICATION	9.742813998015895E-9	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999996851633082	WITHOUT_CLASSIFICATION	3.148366918358616E-7	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999966191124	WITHOUT_CLASSIFICATION	3.3808874851667776E-9	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9996086704041579	WITHOUT_CLASSIFICATION	3.913295958419936E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999193413692514	WITHOUT_CLASSIFICATION	8.065863074857429E-5	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999998624662	WITHOUT_CLASSIFICATION	1.3753374396625773E-10	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999945080989764	WITHOUT_CLASSIFICATION	5.4919010235940216E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998418458351	WITHOUT_CLASSIFICATION	1.581541649086252E-6	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999997967936468	WITHOUT_CLASSIFICATION	2.0320635316758267E-7	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996921233463	WITHOUT_CLASSIFICATION	3.0787665377291715E-7	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999962220806276	WITHOUT_CLASSIFICATION	3.7779193723036357E-6	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999992104175894	WITHOUT_CLASSIFICATION	7.895824106126822E-7	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999998429470498	WITHOUT_CLASSIFICATION	1.5705295023932347E-7	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999998374696855	WITHOUT_CLASSIFICATION	1.6253031455843992E-7	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9983545806690037	WITHOUT_CLASSIFICATION	0.0016454193309962933	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999996552041305	WITHOUT_CLASSIFICATION	3.4479586948781285E-7	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999996676496443	WITHOUT_CLASSIFICATION	3.323503556860851E-7	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999797804024	WITHOUT_CLASSIFICATION	2.0219597587348524E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999966291293223	WITHOUT_CLASSIFICATION	3.370870677636007E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999485649934	WITHOUT_CLASSIFICATION	5.143500663742148E-8	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997869272846	WITHOUT_CLASSIFICATION	2.1307271539357464E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999901915367015	WITHOUT_CLASSIFICATION	9.80846329841219E-6	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999441981514	WITHOUT_CLASSIFICATION	5.580184850595704E-8	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999997426772058	WITHOUT_CLASSIFICATION	2.5732279415115753E-7	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999994752176493	WITHOUT_CLASSIFICATION	5.247823507098839E-7	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999414735339	WITHOUT_CLASSIFICATION	5.852646617688112E-8	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999983306598297	WITHOUT_CLASSIFICATION	1.6693401703046382E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999980789375295	WITHOUT_CLASSIFICATION	1.9210624706555634E-6	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999682184135933	WITHOUT_CLASSIFICATION	3.17815864066212E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999999157009744	WITHOUT_CLASSIFICATION	8.429902562571882E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999955524301	WITHOUT_CLASSIFICATION	4.447569857619995E-9	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999860077740134	WITHOUT_CLASSIFICATION	1.3992225986515094E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999993583729	WITHOUT_CLASSIFICATION	6.416270799254608E-10	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999994320188549	WITHOUT_CLASSIFICATION	5.679811451024604E-7	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999963175411671	WITHOUT_CLASSIFICATION	3.6824588327699174E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999187358779471	WITHOUT_CLASSIFICATION	8.126412205288627E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999999435135478	WITHOUT_CLASSIFICATION	5.648645222443709E-8	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999999332104527	WITHOUT_CLASSIFICATION	6.678954734891622E-8	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9998467466339501	WITHOUT_CLASSIFICATION	1.5325336604990234E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999999610662834	WITHOUT_CLASSIFICATION	3.8933716594605253E-7	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999997508599046	WITHOUT_CLASSIFICATION	2.491400954726796E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999396356881	WITHOUT_CLASSIFICATION	6.036431180587866E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998418458351	WITHOUT_CLASSIFICATION	1.581541649086252E-6	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999994936135019	WITHOUT_CLASSIFICATION	5.063864981444936E-7	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999746317728	WITHOUT_CLASSIFICATION	2.5368227198840136E-8	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996111295825	WITHOUT_CLASSIFICATION	3.888704176022097E-7	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999222296139	WITHOUT_CLASSIFICATION	7.777038615746929E-8	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999998302489721	WITHOUT_CLASSIFICATION	1.697510278528246E-7	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999998228263662	WITHOUT_CLASSIFICATION	1.7717363381377498E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998418458351	WITHOUT_CLASSIFICATION	1.581541649086252E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999994707882487	WITHOUT_CLASSIFICATION	5.29211751406532E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999860077740134	WITHOUT_CLASSIFICATION	1.3992225986515094E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999876359150285	WITHOUT_CLASSIFICATION	1.236408497145934E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999955524301	WITHOUT_CLASSIFICATION	4.447569857619995E-9	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.99999999995759	WITHOUT_CLASSIFICATION	4.240992990867859E-11	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9960521830149522	WITHOUT_CLASSIFICATION	0.003947816985047854	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999437617245	WITHOUT_CLASSIFICATION	5.6238275581589486E-8	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999797804024	WITHOUT_CLASSIFICATION	2.0219597587348524E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999966291293223	WITHOUT_CLASSIFICATION	3.370870677636007E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999485649934	WITHOUT_CLASSIFICATION	5.143500663742148E-8	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999484765538	WITHOUT_CLASSIFICATION	5.15234462237477E-8	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999994323976564	WITHOUT_CLASSIFICATION	5.676023434879968E-7	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999989244823397	WITHOUT_CLASSIFICATION	1.075517660167057E-6	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999955524301	WITHOUT_CLASSIFICATION	4.447569857619995E-9	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.99999999995759	WITHOUT_CLASSIFICATION	4.240992990867859E-11	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999998418458351	WITHOUT_CLASSIFICATION	1.581541649086252E-6	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997869272846	WITHOUT_CLASSIFICATION	2.1307271539357464E-7	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999901915367015	WITHOUT_CLASSIFICATION	9.80846329841219E-6	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999441981514	WITHOUT_CLASSIFICATION	5.580184850595704E-8	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999108319629	WITHOUT_CLASSIFICATION	8.916803702707502E-8	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998323567814	WITHOUT_CLASSIFICATION	1.6764321858810253E-7	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999998470944167	WITHOUT_CLASSIFICATION	1.5290558318609116E-7	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999999996609205	WITHOUT_CLASSIFICATION	3.39079500544937E-9	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999571298456	WITHOUT_CLASSIFICATION	4.287015439168079E-8	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999409270769	WITHOUT_CLASSIFICATION	5.907292314784458E-8	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981651581815004	WITHOUT_CLASSIFICATION	0.0018348418184996108	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999959754685	WITHOUT_CLASSIFICATION	4.024531542981643E-9	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9982328365289349	WITHOUT_CLASSIFICATION	0.0017671634710650945	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999999569959191	WITHOUT_CLASSIFICATION	4.3004080892132597E-7	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999981199307	WITHOUT_CLASSIFICATION	1.880069296002249E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999985629354434	WITHOUT_CLASSIFICATION	1.4370645565037027E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982355004276553	WITHOUT_CLASSIFICATION	0.00176449957234463	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995696101508106	WITHOUT_CLASSIFICATION	4.3038984918942526E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689736123932	WITHOUT_CLASSIFICATION	3.1026387606671413E-5	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999985629354434	WITHOUT_CLASSIFICATION	1.4370645565037027E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999994107970971	WITHOUT_CLASSIFICATION	5.892029030033034E-7	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999963015733924	WITHOUT_CLASSIFICATION	3.6984266075535607E-6	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982558040699857	WITHOUT_CLASSIFICATION	0.0017441959300142742	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995145854788565	WITHOUT_CLASSIFICATION	4.8541452114342484E-4	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999990763672264	WITHOUT_CLASSIFICATION	9.236327736435837E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999587146194469	WITHOUT_CLASSIFICATION	4.128538055324301E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999871629437709	WITHOUT_CLASSIFICATION	1.2837056229098186E-4	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927366547846	WITHOUT_CLASSIFICATION	7.2633452153557655E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999966191124	WITHOUT_CLASSIFICATION	3.3808874851667776E-9	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999999039018	WITHOUT_CLASSIFICATION	9.609828280232783E-11	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999931321115	WITHOUT_CLASSIFICATION	6.86788846979199E-9	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999988358181	WITHOUT_CLASSIFICATION	1.1641818100248297E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999998909659736	WITHOUT_CLASSIFICATION	1.0903402639693566E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999998852541599	WITHOUT_CLASSIFICATION	1.1474584009055126E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999609404415	WITHOUT_CLASSIFICATION	3.9059558383022064E-8	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999990139710695	WITHOUT_CLASSIFICATION	9.86028930503699E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999976840600764	WITHOUT_CLASSIFICATION	2.3159399236012424E-6	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9996283158328075	WITHOUT_CLASSIFICATION	3.716841671924879E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999987391545594	WITHOUT_CLASSIFICATION	1.2608454406526748E-6	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999699379055144	WITHOUT_CLASSIFICATION	3.0062094485592627E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999944170394267	WITHOUT_CLASSIFICATION	5.582960573333377E-6	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999308954663	WITHOUT_CLASSIFICATION	6.910453366946841E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999932841145579	WITHOUT_CLASSIFICATION	6.715885442112217E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998815665758617	WITHOUT_CLASSIFICATION	1.184334241383521E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9947246426510461	WITHOUT_CLASSIFICATION	0.005275357348953956	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996044619855	WITHOUT_CLASSIFICATION	3.9553801433659597E-7	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999978654305766	WITHOUT_CLASSIFICATION	2.134569423394931E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999996929052767	WITHOUT_CLASSIFICATION	3.070947232857165E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999901960400499	WITHOUT_CLASSIFICATION	9.80395995006565E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969221307045	WITHOUT_CLASSIFICATION	3.0778692955660877E-6	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999958887194278	WITHOUT_CLASSIFICATION	4.111280572107579E-6	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998705585415	WITHOUT_CLASSIFICATION	1.2944145849856529E-6	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999994719099049	WITHOUT_CLASSIFICATION	5.280900951464141E-7	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999991433346873	WITHOUT_CLASSIFICATION	8.566653126014205E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991071622926	WITHOUT_CLASSIFICATION	8.928377074881191E-7	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999814020496605	WITHOUT_CLASSIFICATION	1.8597950339518358E-5	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988392575192	WITHOUT_CLASSIFICATION	1.1607424806980374E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992730715056	WITHOUT_CLASSIFICATION	7.26928494360854E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999990538344574	WITHOUT_CLASSIFICATION	9.46165542530285E-7	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999837877542	WITHOUT_CLASSIFICATION	1.6212245685276983E-8	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999989556938501	WITHOUT_CLASSIFICATION	1.0443061499246797E-6	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999995347451792	WITHOUT_CLASSIFICATION	4.652548208332023E-7	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999723983463792	WITHOUT_CLASSIFICATION	2.760165362074362E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999444368391582	WITHOUT_CLASSIFICATION	5.556316084170486E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999992482394033	WITHOUT_CLASSIFICATION	7.517605966724239E-7	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999994540527282	WITHOUT_CLASSIFICATION	5.459472718679811E-7	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999956462473847	WITHOUT_CLASSIFICATION	4.353752615229687E-6	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999066562004445	WITHOUT_CLASSIFICATION	9.334379955544577E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999918464593	WITHOUT_CLASSIFICATION	8.153540714296956E-9	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998397935227024	WITHOUT_CLASSIFICATION	1.6020647729772896E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999829999253	WITHOUT_CLASSIFICATION	1.700007469502375E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999202413151	WITHOUT_CLASSIFICATION	7.975868489712777E-8	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999923205112939	WITHOUT_CLASSIFICATION	7.67948870600045E-6	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.999999444658042	WITHOUT_CLASSIFICATION	5.553419579971919E-7	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999991265769314	WITHOUT_CLASSIFICATION	8.734230686777194E-7	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999993984241438	WITHOUT_CLASSIFICATION	6.015758561994989E-7	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999916093779704	WITHOUT_CLASSIFICATION	8.390622029538998E-6	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9996540621294147	WITHOUT_CLASSIFICATION	3.4593787058538134E-4	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997989175488291	WITHOUT_CLASSIFICATION	2.010824511708258E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999977391748211	WITHOUT_CLASSIFICATION	2.2608251789033075E-5	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999995813274808	WITHOUT_CLASSIFICATION	4.1867251917604384E-7	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999889845980254	WITHOUT_CLASSIFICATION	1.1015401974626739E-5	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999953309949714	WITHOUT_CLASSIFICATION	4.669005028597618E-6	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999988876704651	WITHOUT_CLASSIFICATION	1.1123295349057282E-6	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999975301069672	WITHOUT_CLASSIFICATION	2.469893032678445E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999978374728985	WITHOUT_CLASSIFICATION	2.1625271014812756E-6	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9998717678003542	WITHOUT_CLASSIFICATION	1.282321996456662E-4	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999956020383863	WITHOUT_CLASSIFICATION	4.397961613773934E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999999961099329	WITHOUT_CLASSIFICATION	3.8900671002601764E-8	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998248598896	WITHOUT_CLASSIFICATION	1.751401103759311E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999995848367825	WITHOUT_CLASSIFICATION	4.1516321745287764E-7	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999763558774982	WITHOUT_CLASSIFICATION	2.3644122501736703E-5	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999128352113708	WITHOUT_CLASSIFICATION	8.716478862924135E-5	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999837104035862	WITHOUT_CLASSIFICATION	1.6289596413713222E-5	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999911656791526	WITHOUT_CLASSIFICATION	8.834320847385418E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999998826443997	WITHOUT_CLASSIFICATION	1.1735560039101874E-7	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999225401387	WITHOUT_CLASSIFICATION	7.745986131655471E-8	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999925784874788	WITHOUT_CLASSIFICATION	7.4215125211243826E-6	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999984172646261	WITHOUT_CLASSIFICATION	1.5827353739903505E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999983106490621	WITHOUT_CLASSIFICATION	1.689350937884413E-6	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9938933063024772	WITHOUT_CLASSIFICATION	0.00610669369752279	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997745624862532	WITHOUT_CLASSIFICATION	2.254375137468854E-4	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999999388621102	WITHOUT_CLASSIFICATION	6.113788968607352E-8	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999939274905105	WITHOUT_CLASSIFICATION	6.0725094894877875E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999980670834857	WITHOUT_CLASSIFICATION	1.9329165144078617E-6	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999994658949	WITHOUT_CLASSIFICATION	5.341051583396959E-10	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999985401643	WITHOUT_CLASSIFICATION	1.4598357572677822E-9	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999972554292899	WITHOUT_CLASSIFICATION	2.7445707101377705E-6	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999760343117	WITHOUT_CLASSIFICATION	2.3965688280369713E-8	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999790944312078	WITHOUT_CLASSIFICATION	2.090556879228245E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999960078677	WITHOUT_CLASSIFICATION	3.992132237757131E-9	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999962710448455	WITHOUT_CLASSIFICATION	3.728955154501979E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999876983950262	WITHOUT_CLASSIFICATION	1.2301604973886833E-5	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999999998804845	WITHOUT_CLASSIFICATION	1.1951549519141121E-9	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999410494227	WITHOUT_CLASSIFICATION	5.8950577337967036E-8	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999999017	WITHOUT_CLASSIFICATION	9.82522912025589E-14	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999981976426121	WITHOUT_CLASSIFICATION	1.802357387906435E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999998501372656	WITHOUT_CLASSIFICATION	1.4986273448302722E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998679887191	WITHOUT_CLASSIFICATION	1.3201128087862965E-7	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999987134627701	WITHOUT_CLASSIFICATION	1.2865372297918002E-6	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999832502421637	WITHOUT_CLASSIFICATION	1.6749757836294378E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999960417780384	WITHOUT_CLASSIFICATION	3.958221961622967E-6	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999838845663	WITHOUT_CLASSIFICATION	1.6115433691013047E-8	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999757339623239	WITHOUT_CLASSIFICATION	2.426603767613018E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999962372890336	WITHOUT_CLASSIFICATION	3.7627109664091323E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999961903400515	WITHOUT_CLASSIFICATION	3.809659948436714E-6	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999825792292	WITHOUT_CLASSIFICATION	1.7420770829218965E-8	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999729669746125	WITHOUT_CLASSIFICATION	2.7033025387567367E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999169903067118	WITHOUT_CLASSIFICATION	8.300969328817084E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999995327081154	WITHOUT_CLASSIFICATION	4.672918845882141E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999729669746125	WITHOUT_CLASSIFICATION	2.7033025387567367E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999550020089	WITHOUT_CLASSIFICATION	4.499799110147095E-8	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.999999971186679	WITHOUT_CLASSIFICATION	2.8813320929364643E-8	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9989737743425658	WITHOUT_CLASSIFICATION	0.0010262256574342392	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9589815201805614	WITHOUT_CLASSIFICATION	0.04101847981943864	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.999999962968385	WITHOUT_CLASSIFICATION	3.703161500752477E-8	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999995426110033	WITHOUT_CLASSIFICATION	4.5738899662313446E-7	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999737770400278	WITHOUT_CLASSIFICATION	2.6222959972351957E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999998651871231	WITHOUT_CLASSIFICATION	1.3481287689873556E-6	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999323958366385	WITHOUT_CLASSIFICATION	6.760416336149939E-5	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999842011209186	WITHOUT_CLASSIFICATION	1.5798879081379844E-5	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999930853445	WITHOUT_CLASSIFICATION	6.914655516734506E-9	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999522340881201	WITHOUT_CLASSIFICATION	4.776591187999239E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999958127699817	WITHOUT_CLASSIFICATION	4.187230018359745E-6	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999593391142	WITHOUT_CLASSIFICATION	4.06608858059367E-8	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999969990332891	WITHOUT_CLASSIFICATION	3.0009667109302585E-6	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999987276738402	WITHOUT_CLASSIFICATION	1.2723261597368255E-6	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998704554370267	WITHOUT_CLASSIFICATION	1.2954456297343067E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998704554370267	WITHOUT_CLASSIFICATION	1.2954456297343067E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999859067959359	WITHOUT_CLASSIFICATION	1.409320406414349E-5	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999963168358129	WITHOUT_CLASSIFICATION	3.683164187128674E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999741669100465	WITHOUT_CLASSIFICATION	2.5833089953597415E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999975270378195	WITHOUT_CLASSIFICATION	2.4729621804138776E-6	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999983918071408	WITHOUT_CLASSIFICATION	1.60819285932229E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999882657463935	WITHOUT_CLASSIFICATION	1.1734253606372422E-5	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999986636007958	WITHOUT_CLASSIFICATION	1.3363992041626247E-6	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999960017955	WITHOUT_CLASSIFICATION	3.998204489465815E-9	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999999460351385	WITHOUT_CLASSIFICATION	5.396486140597553E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999473829511699	WITHOUT_CLASSIFICATION	5.26170488300891E-5	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999999759097552	WITHOUT_CLASSIFICATION	2.4090244724034387E-8	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998886805604	WITHOUT_CLASSIFICATION	1.1131943956705441E-7	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999985067925169	WITHOUT_CLASSIFICATION	1.4932074831167757E-6	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999983816037549	WITHOUT_CLASSIFICATION	1.6183962451657305E-6	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999852400555	WITHOUT_CLASSIFICATION	1.4759944537266387E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999932841145579	WITHOUT_CLASSIFICATION	6.715885442112217E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999976399987913	WITHOUT_CLASSIFICATION	2.360001208576304E-6	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999558366901	WITHOUT_CLASSIFICATION	4.416330990803045E-8	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999777881148586	WITHOUT_CLASSIFICATION	2.2211885141381948E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999900379991653	WITHOUT_CLASSIFICATION	9.962000834601072E-6	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999814966376	WITHOUT_CLASSIFICATION	1.850336230550113E-8	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999965091512724	WITHOUT_CLASSIFICATION	3.490848727682322E-6	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999928849829	WITHOUT_CLASSIFICATION	7.11501716149601E-9	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999958246232	WITHOUT_CLASSIFICATION	4.175376904436325E-9	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999924298661763	WITHOUT_CLASSIFICATION	7.5701338237009055E-6	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999883971713799	WITHOUT_CLASSIFICATION	1.1602828620189631E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999997576794	WITHOUT_CLASSIFICATION	2.4232060974281065E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999981556839223	WITHOUT_CLASSIFICATION	1.8443160777021348E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999873891474258	WITHOUT_CLASSIFICATION	1.2610852574249499E-5	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999996773577273	WITHOUT_CLASSIFICATION	3.2264227268898774E-7	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999984386711249	WITHOUT_CLASSIFICATION	1.5613288750488565E-6	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999999253085173	WITHOUT_CLASSIFICATION	7.469148261445789E-8	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999940411078124	WITHOUT_CLASSIFICATION	5.958892187547308E-6	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999987245922634	WITHOUT_CLASSIFICATION	1.2754077365694058E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999996592964562	WITHOUT_CLASSIFICATION	3.407035437232887E-7	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999996456092828	WITHOUT_CLASSIFICATION	3.5439071721481057E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999919439440771	WITHOUT_CLASSIFICATION	8.056055922902431E-6	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999960556386763	WITHOUT_CLASSIFICATION	3.944361323649785E-6	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999999317608783	WITHOUT_CLASSIFICATION	6.823912170463959E-7	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999999885428802	WITHOUT_CLASSIFICATION	1.1457119797262659E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999728127400037	WITHOUT_CLASSIFICATION	2.718725999630997E-5	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999988476640722	WITHOUT_CLASSIFICATION	1.1523359277639896E-6	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999994790292049	WITHOUT_CLASSIFICATION	5.209707950815245E-7	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999999457078723	WITHOUT_CLASSIFICATION	5.429212774319744E-8	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999999946470264	WITHOUT_CLASSIFICATION	5.35297358384151E-8	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999971209335667	WITHOUT_CLASSIFICATION	2.8790664332179685E-6	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999145761448128	WITHOUT_CLASSIFICATION	8.542385518717574E-5	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918080341312	WITHOUT_CLASSIFICATION	8.19196586874505E-6	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218635616378	WITHOUT_CLASSIFICATION	7.813643836215585E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999986827459275	WITHOUT_CLASSIFICATION	1.3172540725206338E-6	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999998847623553	WITHOUT_CLASSIFICATION	1.152376446983601E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994730407218	WITHOUT_CLASSIFICATION	5.269592781720101E-7	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999117917685	WITHOUT_CLASSIFICATION	8.820823141867909E-8	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999977591634788	WITHOUT_CLASSIFICATION	2.240836521277506E-6	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994474049355826	WITHOUT_CLASSIFICATION	5.525950644173782E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999977591634788	WITHOUT_CLASSIFICATION	2.240836521277506E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999981432133247	WITHOUT_CLASSIFICATION	1.8567866753068302E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999968797399177	WITHOUT_CLASSIFICATION	3.1202600822680337E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999980917964987	WITHOUT_CLASSIFICATION	1.908203501381584E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999943082997229	WITHOUT_CLASSIFICATION	5.691700277089861E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999984017348176	WITHOUT_CLASSIFICATION	1.5982651824295248E-6	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999997949803561	WITHOUT_CLASSIFICATION	2.050196439479407E-7	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999978891007918	WITHOUT_CLASSIFICATION	2.1108992082130598E-6	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999997368832998	WITHOUT_CLASSIFICATION	2.631167001392758E-7	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999997252512886	WITHOUT_CLASSIFICATION	2.747487115411773E-7	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9982008319905036	WITHOUT_CLASSIFICATION	0.0017991680094964233	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999989793010293	WITHOUT_CLASSIFICATION	1.0206989707583983E-6	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999995495350995	WITHOUT_CLASSIFICATION	4.504649004946151E-7	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999996749809085	WITHOUT_CLASSIFICATION	3.250190914745712E-7	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.999998913288322	WITHOUT_CLASSIFICATION	1.0867116779806662E-6	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999968300416117	WITHOUT_CLASSIFICATION	3.169958388346857E-6	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999998999676205	WITHOUT_CLASSIFICATION	1.0003237953093647E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998157156648	WITHOUT_CLASSIFICATION	1.8428433524464591E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998157156648	WITHOUT_CLASSIFICATION	1.8428433524464591E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999996453734802	WITHOUT_CLASSIFICATION	3.546265198230607E-7	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999835347458	WITHOUT_CLASSIFICATION	1.6465254106090993E-8	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999994011131	WITHOUT_CLASSIFICATION	5.988868862522166E-10	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999972121013522	WITHOUT_CLASSIFICATION	2.7878986478448216E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999999896532	WITHOUT_CLASSIFICATION	1.0346805082648473E-10	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999961236115	WITHOUT_CLASSIFICATION	3.876388569009099E-9	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.992963211831922	WITHOUT_CLASSIFICATION	0.007036788168077974	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999976758703655	WITHOUT_CLASSIFICATION	2.3241296345587733E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999986590689978	WITHOUT_CLASSIFICATION	1.340931002222788E-6	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999998278418682	WITHOUT_CLASSIFICATION	1.7215813179620804E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999290625287	WITHOUT_CLASSIFICATION	7.09374712806344E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999344761108	WITHOUT_CLASSIFICATION	6.552388923515917E-8	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999969549745952	WITHOUT_CLASSIFICATION	3.045025404826632E-6	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999974330368253	WITHOUT_CLASSIFICATION	2.566963174643708E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999752129944415	WITHOUT_CLASSIFICATION	2.478700555859019E-5	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999968776956	WITHOUT_CLASSIFICATION	3.122304450089688E-9	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999994493355301	WITHOUT_CLASSIFICATION	5.506644698759672E-7	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9991390118198361	WITHOUT_CLASSIFICATION	8.609881801639082E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.999934576269019	WITHOUT_CLASSIFICATION	6.542373098099642E-5	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999991495438699	WITHOUT_CLASSIFICATION	8.504561299729859E-7	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999995356108133	WITHOUT_CLASSIFICATION	4.6438918657274616E-7	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9995188676706317	WITHOUT_CLASSIFICATION	4.8113232936828883E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9989756187068128	WITHOUT_CLASSIFICATION	0.0010243812931871256	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999474605045917	WITHOUT_CLASSIFICATION	5.2539495408262746E-5	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999965777718506	WITHOUT_CLASSIFICATION	3.422228149332922E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999999498978978	WITHOUT_CLASSIFICATION	5.010210224593082E-8	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999998194901	WITHOUT_CLASSIFICATION	1.805098884634868E-9	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998481534280285	WITHOUT_CLASSIFICATION	1.5184657197145346E-4	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999968262735616	WITHOUT_CLASSIFICATION	3.1737264383689444E-6	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999912396829	WITHOUT_CLASSIFICATION	8.760317090497767E-9	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999983459604	WITHOUT_CLASSIFICATION	1.6540394813376635E-9	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999984904056727	WITHOUT_CLASSIFICATION	1.5095943272925882E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999526638602623	WITHOUT_CLASSIFICATION	4.7336139737597E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999969714915201	WITHOUT_CLASSIFICATION	3.028508479752678E-6	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999393508090594	WITHOUT_CLASSIFICATION	6.0649190940774275E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999997671544647	WITHOUT_CLASSIFICATION	2.3284553534316574E-7	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999526790714	WITHOUT_CLASSIFICATION	4.732092858700623E-7	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.999998516450827	WITHOUT_CLASSIFICATION	1.483549172978132E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999903240275	WITHOUT_CLASSIFICATION	9.675972408779546E-9	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999887917243194	WITHOUT_CLASSIFICATION	1.1208275680530494E-5	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999999993491467	WITHOUT_CLASSIFICATION	6.5085330022631585E-9	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982480352718	WITHOUT_CLASSIFICATION	1.75196472823234E-6	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999991023322098	WITHOUT_CLASSIFICATION	8.976677903098103E-7	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9967860428664623	WITHOUT_CLASSIFICATION	0.0032139571335377012	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999964344415161	WITHOUT_CLASSIFICATION	3.5655584839951045E-6	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999958811724725	WITHOUT_CLASSIFICATION	4.118827527566921E-6	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8910510996960793	WITHOUT_CLASSIFICATION	0.10894890030392061	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999985459687	WITHOUT_CLASSIFICATION	1.4540314389064728E-9	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999995591775503	WITHOUT_CLASSIFICATION	4.408224497058707E-6	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999884855437903	WITHOUT_CLASSIFICATION	1.1514456209821487E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974853562742	WITHOUT_CLASSIFICATION	2.514643725745737E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999584160058	WITHOUT_CLASSIFICATION	4.158399426065445E-8	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999981122076	WITHOUT_CLASSIFICATION	1.887792349615831E-9	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999842883771147	WITHOUT_CLASSIFICATION	1.5711622885273623E-5	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999995007130844	WITHOUT_CLASSIFICATION	4.992869155208335E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999994707882487	WITHOUT_CLASSIFICATION	5.29211751406532E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999994707882487	WITHOUT_CLASSIFICATION	5.29211751406532E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999320738034	WITHOUT_CLASSIFICATION	6.792619659180735E-8	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999845370026499	WITHOUT_CLASSIFICATION	1.546299735018234E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998978648763	WITHOUT_CLASSIFICATION	1.0213512357949425E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999996773980157	WITHOUT_CLASSIFICATION	3.226019843499333E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999996788325334	WITHOUT_CLASSIFICATION	3.2116746669515213E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999305712173	WITHOUT_CLASSIFICATION	6.94287827223996E-8	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9995890711534587	WITHOUT_CLASSIFICATION	4.10928846541289E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999684510400403	WITHOUT_CLASSIFICATION	3.154895995977497E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999982378829023	WITHOUT_CLASSIFICATION	1.762117097573036E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999993760581	WITHOUT_CLASSIFICATION	6.239418797445567E-10	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999289004899	WITHOUT_CLASSIFICATION	7.109950999295818E-8	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999984325896852	WITHOUT_CLASSIFICATION	1.5674103147406047E-6	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.999998345659959	WITHOUT_CLASSIFICATION	1.6543400410476463E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999989982656733	WITHOUT_CLASSIFICATION	1.0017343267328587E-6	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999998642823028	WITHOUT_CLASSIFICATION	1.357176972308508E-7	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999999759927101	WITHOUT_CLASSIFICATION	2.4007289902202226E-7	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999967642510175	WITHOUT_CLASSIFICATION	3.2357489824730076E-6	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999984111332825	WITHOUT_CLASSIFICATION	1.5888667175084106E-6	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999960310012594	WITHOUT_CLASSIFICATION	3.968998740546137E-6	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999953150025	WITHOUT_CLASSIFICATION	4.684997542743148E-9	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999888054707653	WITHOUT_CLASSIFICATION	1.1194529234607142E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999978578594	WITHOUT_CLASSIFICATION	2.142140551272479E-9	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999923943019597	WITHOUT_CLASSIFICATION	7.60569804021409E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824889426178	WITHOUT_CLASSIFICATION	1.751105738215599E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9990289462556573	WITHOUT_CLASSIFICATION	9.710537443426681E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999494313209178	WITHOUT_CLASSIFICATION	5.0568679082027204E-5	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9922992890813511	WITHOUT_CLASSIFICATION	0.007700710918648898	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999261389715752	WITHOUT_CLASSIFICATION	7.386102842476565E-5	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998388324353564	WITHOUT_CLASSIFICATION	1.6116756464354975E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999980820720114	WITHOUT_CLASSIFICATION	1.917927988528966E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824889426178	WITHOUT_CLASSIFICATION	1.751105738215599E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999994484968879	WITHOUT_CLASSIFICATION	5.515031120558799E-7	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999990345734	WITHOUT_CLASSIFICATION	9.65426713325769E-10	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999816559427835	WITHOUT_CLASSIFICATION	1.834405721644395E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.999998497303721	WITHOUT_CLASSIFICATION	1.5026962790333667E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999997097138	WITHOUT_CLASSIFICATION	2.902861937167646E-10	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999982953547232	WITHOUT_CLASSIFICATION	1.7046452767696034E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999546823021116	WITHOUT_CLASSIFICATION	4.531769788842959E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999919707567	WITHOUT_CLASSIFICATION	8.029243350066624E-9	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9961243586521804	WITHOUT_CLASSIFICATION	0.0038756413478195587	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.999998497303721	WITHOUT_CLASSIFICATION	1.5026962790333667E-6	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999999999148017	WITHOUT_CLASSIFICATION	8.519831341388701E-10	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999919707567	WITHOUT_CLASSIFICATION	8.029243350066624E-9	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999991055166652	WITHOUT_CLASSIFICATION	8.944833347460171E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999628458637811	WITHOUT_CLASSIFICATION	3.715413621886565E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999118078673	WITHOUT_CLASSIFICATION	8.819213269243385E-8	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999290625287	WITHOUT_CLASSIFICATION	7.09374712806344E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999259939291	WITHOUT_CLASSIFICATION	7.400607087819944E-8	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999342216586	WITHOUT_CLASSIFICATION	6.5778341399122E-8	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999653779837	WITHOUT_CLASSIFICATION	3.4622016285608157E-8	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9990592631052427	WITHOUT_CLASSIFICATION	9.407368947572959E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999993756321	WITHOUT_CLASSIFICATION	6.2436790764613E-10	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999982583216879	WITHOUT_CLASSIFICATION	1.7416783122375492E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999996537565813	WITHOUT_CLASSIFICATION	3.462434186467745E-7	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999998839605267	WITHOUT_CLASSIFICATION	1.1603947330843611E-7	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999990939065132	WITHOUT_CLASSIFICATION	9.060934868628277E-7	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999912093541314	WITHOUT_CLASSIFICATION	8.790645868471241E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999946706841947	WITHOUT_CLASSIFICATION	5.329315805400233E-6	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999999996388789	WITHOUT_CLASSIFICATION	3.6112108918727237E-9	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999991233755071	WITHOUT_CLASSIFICATION	8.766244928041134E-7	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999152860281452	WITHOUT_CLASSIFICATION	8.471397185480154E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999917146001873	WITHOUT_CLASSIFICATION	8.285399812567911E-6	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999712341205469	WITHOUT_CLASSIFICATION	2.876587945317935E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999929209108281	WITHOUT_CLASSIFICATION	7.079089171940535E-6	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.999999802281559	WITHOUT_CLASSIFICATION	1.977184410134904E-7	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999969256455855	WITHOUT_CLASSIFICATION	3.074354414573811E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999999729460696	WITHOUT_CLASSIFICATION	2.7053930491322774E-8	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999987557411417	WITHOUT_CLASSIFICATION	1.2442588582997852E-6	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9997865195098603	WITHOUT_CLASSIFICATION	2.1348049013977948E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999872936306	WITHOUT_CLASSIFICATION	1.270636936501557E-8	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999998725079	WITHOUT_CLASSIFICATION	1.2749216502176027E-10	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999952238237011	WITHOUT_CLASSIFICATION	4.776176298931633E-6	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999677627687446	WITHOUT_CLASSIFICATION	3.223723125550303E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999993235859056	WITHOUT_CLASSIFICATION	6.764140944487578E-7	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999942250289885	WITHOUT_CLASSIFICATION	5.77497101149592E-5	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999082633094627	WITHOUT_CLASSIFICATION	9.173669053725221E-5	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999929528487118	WITHOUT_CLASSIFICATION	7.047151288237761E-6	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9992404923775557	WITHOUT_CLASSIFICATION	7.595076224441468E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999521814400639	WITHOUT_CLASSIFICATION	4.781855993612563E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996904827037	WITHOUT_CLASSIFICATION	3.0951729632828373E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996904827037	WITHOUT_CLASSIFICATION	3.0951729632828373E-7	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999136249633	WITHOUT_CLASSIFICATION	8.637503661961862E-8	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999976939884228	WITHOUT_CLASSIFICATION	2.3060115771994436E-6	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999963110566316	WITHOUT_CLASSIFICATION	3.6889433683953905E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999987132171041	WITHOUT_CLASSIFICATION	1.286782895965023E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999986035948385	WITHOUT_CLASSIFICATION	1.3964051614149988E-6	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999967073186101	WITHOUT_CLASSIFICATION	3.2926813897606343E-6	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999989243737357	WITHOUT_CLASSIFICATION	1.075626264166562E-6	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999995096243633	WITHOUT_CLASSIFICATION	4.903756366260355E-7	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998036668903	WITHOUT_CLASSIFICATION	1.9633310959340094E-7	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999871428937	WITHOUT_CLASSIFICATION	1.2857106245656472E-8	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999848455278	WITHOUT_CLASSIFICATION	1.515447224729478E-8	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999993507336002	WITHOUT_CLASSIFICATION	6.49266399652405E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999671251422315	WITHOUT_CLASSIFICATION	3.287485776852921E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996904827037	WITHOUT_CLASSIFICATION	3.0951729632828373E-7	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999997952205475	WITHOUT_CLASSIFICATION	2.047794524823647E-6	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999903057160154	WITHOUT_CLASSIFICATION	9.694283984559295E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999003027780585	WITHOUT_CLASSIFICATION	9.969722194146812E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999980098779532	WITHOUT_CLASSIFICATION	1.990122046731736E-6	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999999306469516	WITHOUT_CLASSIFICATION	6.935304838567238E-8	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999921959144	WITHOUT_CLASSIFICATION	7.804085606103981E-8	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9991677166262504	WITHOUT_CLASSIFICATION	8.322833737495439E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999711912702234	WITHOUT_CLASSIFICATION	2.8808729776606447E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999345629197	WITHOUT_CLASSIFICATION	6.543708030132325E-7	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998674618839132	WITHOUT_CLASSIFICATION	1.3253811608689473E-4	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999579575680047	WITHOUT_CLASSIFICATION	4.204243199543635E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999942250289885	WITHOUT_CLASSIFICATION	5.77497101149592E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996904827037	WITHOUT_CLASSIFICATION	3.0951729632828373E-7	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999983925839888	WITHOUT_CLASSIFICATION	1.6074160111949248E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999995859913668	WITHOUT_CLASSIFICATION	4.1400863321969764E-7	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999957243106065	WITHOUT_CLASSIFICATION	4.2756893934833385E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999959573470899	WITHOUT_CLASSIFICATION	4.042652910067059E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999843292491601	WITHOUT_CLASSIFICATION	1.5670750839847495E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999990512227206	WITHOUT_CLASSIFICATION	9.487772792972428E-7	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999895617033173	WITHOUT_CLASSIFICATION	1.0438296682781399E-5	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999980075604	WITHOUT_CLASSIFICATION	1.9924396021424346E-8	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999943808753	WITHOUT_CLASSIFICATION	5.619124803840661E-9	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999999620493857	WITHOUT_CLASSIFICATION	3.795061429447168E-8	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998497353256	WITHOUT_CLASSIFICATION	1.5026467435648624E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999462429723075	WITHOUT_CLASSIFICATION	5.375702769244302E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999990972336815	WITHOUT_CLASSIFICATION	9.027663183855634E-7	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999973684287092	WITHOUT_CLASSIFICATION	2.6315712907783595E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999981432133247	WITHOUT_CLASSIFICATION	1.8567866753068302E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999932355563	WITHOUT_CLASSIFICATION	6.764443707027188E-8	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999901305664	WITHOUT_CLASSIFICATION	9.869433555648748E-9	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999894281212	WITHOUT_CLASSIFICATION	1.0571878880304649E-8	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999950555590826	WITHOUT_CLASSIFICATION	4.944440917461816E-6	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999997729704	WITHOUT_CLASSIFICATION	2.2702959134884937E-9	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999976220760717	WITHOUT_CLASSIFICATION	2.3779239282014343E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999976220760717	WITHOUT_CLASSIFICATION	2.3779239282014343E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998051759912163	WITHOUT_CLASSIFICATION	1.9482400878376085E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999975189409	WITHOUT_CLASSIFICATION	2.4810590369887288E-9	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999903265293447	WITHOUT_CLASSIFICATION	9.673470655359408E-6	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999746075891334	WITHOUT_CLASSIFICATION	2.539241086662808E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999866503211453	WITHOUT_CLASSIFICATION	1.3349678854708448E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999997393377646	WITHOUT_CLASSIFICATION	2.6066223538687765E-7	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999897581179692	WITHOUT_CLASSIFICATION	1.024188203080335E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999701514093	WITHOUT_CLASSIFICATION	2.9848590744668976E-8	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999701514093	WITHOUT_CLASSIFICATION	2.9848590744668976E-8	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999970553582064	WITHOUT_CLASSIFICATION	2.9446417936597337E-6	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999282498423	WITHOUT_CLASSIFICATION	7.175015776490981E-8	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999994798261678	WITHOUT_CLASSIFICATION	5.201738322142475E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999910340053	WITHOUT_CLASSIFICATION	8.965994704780045E-8	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999910340053	WITHOUT_CLASSIFICATION	8.965994704780045E-8	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999910340053	WITHOUT_CLASSIFICATION	8.965994704780045E-8	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999995321838785	WITHOUT_CLASSIFICATION	4.678161215927041E-7	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999448914867	WITHOUT_CLASSIFICATION	5.510851323844066E-8	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9915811481080906	WITHOUT_CLASSIFICATION	0.008418851891909477	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.99998530209875	WITHOUT_CLASSIFICATION	1.4697901249923686E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999997866896588	WITHOUT_CLASSIFICATION	2.1331034123596092E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996904827037	WITHOUT_CLASSIFICATION	3.0951729632828373E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996904827037	WITHOUT_CLASSIFICATION	3.0951729632828373E-7	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.99997037137605	WITHOUT_CLASSIFICATION	2.9628623949923966E-5	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999503091996571	WITHOUT_CLASSIFICATION	4.969080034293282E-5	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9977259596186238	WITHOUT_CLASSIFICATION	0.0022740403813763066	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999724876225617	WITHOUT_CLASSIFICATION	2.7512377438303063E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999996126338767	WITHOUT_CLASSIFICATION	3.8736612327271806E-7	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999939923445649	WITHOUT_CLASSIFICATION	6.007655435176711E-6	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997720553766	WITHOUT_CLASSIFICATION	2.2794462349754673E-7	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999944977606315	WITHOUT_CLASSIFICATION	5.502239368439091E-6	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999087331444	WITHOUT_CLASSIFICATION	9.126685568545454E-8	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999919182296	WITHOUT_CLASSIFICATION	8.081770404534128E-9	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999997748158949	WITHOUT_CLASSIFICATION	2.2518410515629584E-7	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999973639783204	WITHOUT_CLASSIFICATION	2.636021679691442E-6	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999993557404443	WITHOUT_CLASSIFICATION	6.442595558046074E-7	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999993557404443	WITHOUT_CLASSIFICATION	6.442595558046074E-7	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999993603789903	WITHOUT_CLASSIFICATION	6.396210096343318E-7	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999993603789903	WITHOUT_CLASSIFICATION	6.396210096343318E-7	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999993861440007	WITHOUT_CLASSIFICATION	6.138559993123762E-7	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999977625191221	WITHOUT_CLASSIFICATION	2.2374808779108287E-6	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999977625191221	WITHOUT_CLASSIFICATION	2.2374808779108287E-6	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999982230249516	WITHOUT_CLASSIFICATION	1.7769750485046315E-6	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999982853948085	WITHOUT_CLASSIFICATION	1.7146051914323273E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999680734976545	WITHOUT_CLASSIFICATION	3.192650234553416E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999976220760717	WITHOUT_CLASSIFICATION	2.3779239282014343E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998320232639795	WITHOUT_CLASSIFICATION	1.6797673602051642E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999982853948085	WITHOUT_CLASSIFICATION	1.7146051914323273E-6	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999453617285	WITHOUT_CLASSIFICATION	5.463827142485576E-8	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9994649836738853	WITHOUT_CLASSIFICATION	5.350163261146915E-4	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999949603755438	WITHOUT_CLASSIFICATION	5.039624456158622E-6	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999965148153774	WITHOUT_CLASSIFICATION	3.4851846226923575E-6	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998819480048	WITHOUT_CLASSIFICATION	1.1805199511892485E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999599397319795	WITHOUT_CLASSIFICATION	4.006026802052446E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999826991329005	WITHOUT_CLASSIFICATION	1.7300867099517134E-5	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999936853818131	WITHOUT_CLASSIFICATION	6.314618186911061E-6	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999997283931219	WITHOUT_CLASSIFICATION	2.7160687805245753E-7	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999999807415	WITHOUT_CLASSIFICATION	1.925843270016295E-11	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999934225859	WITHOUT_CLASSIFICATION	6.577413991831305E-9	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999890004994424	WITHOUT_CLASSIFICATION	1.0999500557538564E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999813251502665	WITHOUT_CLASSIFICATION	1.8674849733503194E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9999977242455043	WITHOUT_CLASSIFICATION	2.2757544957393963E-6	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999797732068433	WITHOUT_CLASSIFICATION	2.0226793156691812E-4	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999957283979659	WITHOUT_CLASSIFICATION	4.271602034093827E-6	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999999967712426	WITHOUT_CLASSIFICATION	3.228757389047455E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999961087602023	WITHOUT_CLASSIFICATION	3.891239797695158E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999961087602023	WITHOUT_CLASSIFICATION	3.891239797695158E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999996327570487	WITHOUT_CLASSIFICATION	3.6724295124632513E-7	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999768672612	WITHOUT_CLASSIFICATION	2.313273883327085E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999996678596333	WITHOUT_CLASSIFICATION	3.3214036669075215E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996970058409796	WITHOUT_CLASSIFICATION	3.0299415902033483E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999988662549353	WITHOUT_CLASSIFICATION	1.1337450647218923E-6	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999780889834597	WITHOUT_CLASSIFICATION	2.1911016540258344E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999979237392309	WITHOUT_CLASSIFICATION	2.076260769104398E-6	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999997778159652	WITHOUT_CLASSIFICATION	2.221840348086378E-6	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999832703461566	WITHOUT_CLASSIFICATION	1.672965384328478E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999926476091	WITHOUT_CLASSIFICATION	7.352390833808373E-9	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999916156409	WITHOUT_CLASSIFICATION	8.38435904724371E-9	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999462429723075	WITHOUT_CLASSIFICATION	5.375702769244302E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999206373418	WITHOUT_CLASSIFICATION	7.93626581682816E-8	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999965957974088	WITHOUT_CLASSIFICATION	3.4042025910861912E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999987043534406	WITHOUT_CLASSIFICATION	1.295646559404364E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999986223662765	WITHOUT_CLASSIFICATION	1.3776337235619447E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999452645454	WITHOUT_CLASSIFICATION	5.4735454549730344E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999452645454	WITHOUT_CLASSIFICATION	5.4735454549730344E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999674224662705	WITHOUT_CLASSIFICATION	3.257753372962935E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999992911246315	WITHOUT_CLASSIFICATION	7.088753685421242E-7	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999886175435051	WITHOUT_CLASSIFICATION	1.1382456494968507E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999992335889586	WITHOUT_CLASSIFICATION	7.664110415026535E-7	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999997573006209	WITHOUT_CLASSIFICATION	2.4269937909121274E-7	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999619727933114	WITHOUT_CLASSIFICATION	3.802720668848856E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999949398594434	WITHOUT_CLASSIFICATION	5.060140556634465E-6	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999991148179	WITHOUT_CLASSIFICATION	8.851821179988482E-9	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999740103059216	WITHOUT_CLASSIFICATION	2.5989694078457487E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999994427048	WITHOUT_CLASSIFICATION	5.572952413616124E-10	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999948786921	WITHOUT_CLASSIFICATION	5.121307879163047E-9	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999999991148179	WITHOUT_CLASSIFICATION	8.851821179988482E-9	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999987794400323	WITHOUT_CLASSIFICATION	1.2205599675850484E-6	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999892028185062	WITHOUT_CLASSIFICATION	1.0797181493831294E-5	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999991047476	WITHOUT_CLASSIFICATION	8.952524044999581E-9	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999998717212472	WITHOUT_CLASSIFICATION	1.2827875289267712E-7	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999982082117	WITHOUT_CLASSIFICATION	1.7917883152591099E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999362151083	WITHOUT_CLASSIFICATION	6.378489164207694E-8	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997623328977777	WITHOUT_CLASSIFICATION	2.3766710222233457E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999998120076882	WITHOUT_CLASSIFICATION	1.8799231179029298E-6	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999999992015758	WITHOUT_CLASSIFICATION	7.984242034619792E-9	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999929115835103	WITHOUT_CLASSIFICATION	7.088416489703459E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998243278096132	WITHOUT_CLASSIFICATION	1.7567219038675878E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999745318727	WITHOUT_CLASSIFICATION	2.546812719678623E-8	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999838736406	WITHOUT_CLASSIFICATION	1.6126359363697167E-8	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999943735070603	WITHOUT_CLASSIFICATION	5.62649293968788E-6	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999234497066923	WITHOUT_CLASSIFICATION	7.65502933076966E-5	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999980709214642	WITHOUT_CLASSIFICATION	1.929078535742977E-6	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999996109281735	WITHOUT_CLASSIFICATION	3.890718264997182E-7	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9963526042238859	WITHOUT_CLASSIFICATION	0.0036473957761140475	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.99872704853893	WITHOUT_CLASSIFICATION	0.0012729514610700652	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998399148246188	WITHOUT_CLASSIFICATION	1.600851753812367E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999969208789685	WITHOUT_CLASSIFICATION	3.079121031568289E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998498392956	WITHOUT_CLASSIFICATION	1.501607045171046E-7	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999962121935582	WITHOUT_CLASSIFICATION	3.7878064417795066E-6	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999682091585778	WITHOUT_CLASSIFICATION	3.1790841422314804E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998248009362	WITHOUT_CLASSIFICATION	1.751990638762152E-7	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999408212750439	WITHOUT_CLASSIFICATION	5.917872495617954E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999665948764	WITHOUT_CLASSIFICATION	3.340512358509349E-8	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999769544392336	WITHOUT_CLASSIFICATION	2.3045560766355176E-5	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999993566598528	WITHOUT_CLASSIFICATION	6.433401471011729E-7	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999754157663021	WITHOUT_CLASSIFICATION	2.4584233697909142E-5	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999998564909235	WITHOUT_CLASSIFICATION	1.4350907652027932E-7	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999999610593587	WITHOUT_CLASSIFICATION	3.8940641297861607E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999768497244631	WITHOUT_CLASSIFICATION	2.3150275536929444E-5	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999994447932	WITHOUT_CLASSIFICATION	5.552068002359886E-10	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999987516153027	WITHOUT_CLASSIFICATION	1.248384697249718E-6	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999993723546257	WITHOUT_CLASSIFICATION	6.276453744235634E-7	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999998535744	WITHOUT_CLASSIFICATION	1.4642562287898492E-10	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999976641892	WITHOUT_CLASSIFICATION	2.3358108107604165E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999995009804183	WITHOUT_CLASSIFICATION	4.990195816586655E-7	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999986976338613	WITHOUT_CLASSIFICATION	1.3023661386900826E-6	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999880964938973	WITHOUT_CLASSIFICATION	1.1903506102671191E-5	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999970761599	WITHOUT_CLASSIFICATION	2.923840043056064E-9	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999913691999859	WITHOUT_CLASSIFICATION	8.630800014092579E-5	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999998516626	WITHOUT_CLASSIFICATION	1.4833740803558825E-9	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.999999926755313	WITHOUT_CLASSIFICATION	7.324468700880289E-8	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999995256579045	WITHOUT_CLASSIFICATION	4.743420954637732E-7	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998318684322	WITHOUT_CLASSIFICATION	1.681315677499924E-7	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999939838650524	WITHOUT_CLASSIFICATION	6.016134947572458E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999999509612391	WITHOUT_CLASSIFICATION	4.903876100984183E-8	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999998934804085	WITHOUT_CLASSIFICATION	1.0651959152528979E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999867733966854	WITHOUT_CLASSIFICATION	1.3226603314603577E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999998409107707	WITHOUT_CLASSIFICATION	1.5908922929465617E-6	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999832745822	WITHOUT_CLASSIFICATION	1.672541786744095E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999998174065	WITHOUT_CLASSIFICATION	1.8259342006121751E-10	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999844489696	WITHOUT_CLASSIFICATION	1.555103034724073E-8	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999595558111118	WITHOUT_CLASSIFICATION	4.04441888882089E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999811960507455	WITHOUT_CLASSIFICATION	1.8803949254425667E-5	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999800072920579	WITHOUT_CLASSIFICATION	1.9992707942020867E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999985586584492	WITHOUT_CLASSIFICATION	1.441341550790104E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999592253701	WITHOUT_CLASSIFICATION	4.077462996105364E-8	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999941856645802	WITHOUT_CLASSIFICATION	5.814335419834063E-6	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999953601660856	WITHOUT_CLASSIFICATION	4.639833914495861E-6	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999919571570443	WITHOUT_CLASSIFICATION	8.042842955806142E-6	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999841588	WITHOUT_CLASSIFICATION	1.5841180842425402E-11	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999999782203406	WITHOUT_CLASSIFICATION	2.177965940011902E-7	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999993298943337	WITHOUT_CLASSIFICATION	6.701056663075772E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999867733966854	WITHOUT_CLASSIFICATION	1.3226603314603577E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999958441054252	WITHOUT_CLASSIFICATION	4.1558945747974175E-6	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999828690030544	WITHOUT_CLASSIFICATION	1.713099694559423E-5	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999990999318	WITHOUT_CLASSIFICATION	9.000682729306022E-10	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999939489566	WITHOUT_CLASSIFICATION	6.051043433773173E-9	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999787886100899	WITHOUT_CLASSIFICATION	2.1211389910088487E-5	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999998149070323	WITHOUT_CLASSIFICATION	1.8509296774307266E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999740103059216	WITHOUT_CLASSIFICATION	2.5989694078457487E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999946965143418	WITHOUT_CLASSIFICATION	5.3034856582089765E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999987516153027	WITHOUT_CLASSIFICATION	1.248384697249718E-6	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999825893759312	WITHOUT_CLASSIFICATION	1.7410624068852833E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997204311633	WITHOUT_CLASSIFICATION	2.795688367386197E-7	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999884989018	WITHOUT_CLASSIFICATION	1.150109814276333E-8	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999639188019	WITHOUT_CLASSIFICATION	3.608119820240461E-8	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999560862453556	WITHOUT_CLASSIFICATION	4.391375464433578E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999998490515991	WITHOUT_CLASSIFICATION	1.5094840087111346E-7	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999986904799237	WITHOUT_CLASSIFICATION	1.3095200761847704E-6	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999479769791	WITHOUT_CLASSIFICATION	5.2023020881775375E-8	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999998917743564	WITHOUT_CLASSIFICATION	1.0822564349335384E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999827940357	WITHOUT_CLASSIFICATION	1.7205964319765877E-8	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999880839648467	WITHOUT_CLASSIFICATION	1.1916035153330065E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999585831518611	WITHOUT_CLASSIFICATION	4.141684813888008E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995331954318	WITHOUT_CLASSIFICATION	4.668045683010008E-7	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995331954318	WITHOUT_CLASSIFICATION	4.668045683010008E-7	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999997907886504	WITHOUT_CLASSIFICATION	2.0921134965071872E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999955565934033	WITHOUT_CLASSIFICATION	4.443406596670597E-6	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999173756872	WITHOUT_CLASSIFICATION	8.262431283463072E-8	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999949092284	WITHOUT_CLASSIFICATION	5.090771506738613E-9	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999616015629	WITHOUT_CLASSIFICATION	3.839843713558531E-8	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999991453431428	WITHOUT_CLASSIFICATION	8.546568571516741E-7	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999997674361	WITHOUT_CLASSIFICATION	2.3256396916422702E-10	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999999711503643	WITHOUT_CLASSIFICATION	2.8849635693048224E-8	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999521716176	WITHOUT_CLASSIFICATION	4.782838234996917E-8	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999993509565476	WITHOUT_CLASSIFICATION	6.490434523612168E-7	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999796900325664	WITHOUT_CLASSIFICATION	2.030996743366195E-5	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9999962663388048	WITHOUT_CLASSIFICATION	3.7336611951472354E-6	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999931388726989	WITHOUT_CLASSIFICATION	6.861127301052221E-6	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999197812087	WITHOUT_CLASSIFICATION	8.021879123981143E-8	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999739203729471	WITHOUT_CLASSIFICATION	2.607962705299565E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999986023431	WITHOUT_CLASSIFICATION	1.397656937984532E-9	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.99999910331361	WITHOUT_CLASSIFICATION	8.966863899567129E-7	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999998807204612	WITHOUT_CLASSIFICATION	1.1927953880337937E-7	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999938303938	WITHOUT_CLASSIFICATION	6.169606121311173E-9	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999895110926	WITHOUT_CLASSIFICATION	1.0488907391983892E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999954815804	WITHOUT_CLASSIFICATION	4.518419607088819E-9	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999944433996	WITHOUT_CLASSIFICATION	5.556600331114658E-9	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999967969051	WITHOUT_CLASSIFICATION	3.203094891013966E-9	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999992613383237	WITHOUT_CLASSIFICATION	7.386616763244844E-7	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9997581261134938	WITHOUT_CLASSIFICATION	2.4187388650612966E-4	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9996806807261711	WITHOUT_CLASSIFICATION	3.1931927382888566E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640077227735	WITHOUT_CLASSIFICATION	1.3599227722653544E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999985870803901	WITHOUT_CLASSIFICATION	1.4129196098896679E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999993261027	WITHOUT_CLASSIFICATION	6.738972158147374E-10	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999266593135	WITHOUT_CLASSIFICATION	7.334068656376302E-8	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999996644116923	WITHOUT_CLASSIFICATION	3.355883076602731E-7	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999966055213845	WITHOUT_CLASSIFICATION	3.394478615459143E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999999884785433	WITHOUT_CLASSIFICATION	1.1521456733330666E-8	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.999999885403041	WITHOUT_CLASSIFICATION	1.1459695911993668E-7	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9980973876102436	WITHOUT_CLASSIFICATION	0.0019026123897564087	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999968727020919	WITHOUT_CLASSIFICATION	3.1272979080044466E-6	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999907529984	WITHOUT_CLASSIFICATION	9.247001541012682E-9	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999981029057426	WITHOUT_CLASSIFICATION	1.8970942573701088E-6	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999838325865443	WITHOUT_CLASSIFICATION	1.6167413455660367E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999994235850915	WITHOUT_CLASSIFICATION	5.764149084130792E-7	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999943408683507	WITHOUT_CLASSIFICATION	5.659131649310881E-6	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987435527785499	WITHOUT_CLASSIFICATION	0.0012564472214500765	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999991629771411	WITHOUT_CLASSIFICATION	8.370228589287104E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999295195933	WITHOUT_CLASSIFICATION	7.048040672688153E-8	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999998603005328	WITHOUT_CLASSIFICATION	1.3969946728684955E-7	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999996094105711	WITHOUT_CLASSIFICATION	3.90589428909255E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982558040699857	WITHOUT_CLASSIFICATION	0.0017441959300142742	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9770375953187929	WITHOUT_CLASSIFICATION	0.022962404681207076	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999315311632	WITHOUT_CLASSIFICATION	6.846883690811768E-8	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999983662498426	WITHOUT_CLASSIFICATION	1.6337501572827E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999797827642513	WITHOUT_CLASSIFICATION	2.0217235748749918E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966570645244	WITHOUT_CLASSIFICATION	3.342935475600032E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999970489806563	WITHOUT_CLASSIFICATION	2.9510193436654547E-6	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999038592254	WITHOUT_CLASSIFICATION	9.614077463429782E-8	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999960537503729	WITHOUT_CLASSIFICATION	3.94624962713004E-6	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999948924607386	WITHOUT_CLASSIFICATION	5.10753926131488E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999995726073445	WITHOUT_CLASSIFICATION	4.2739265547452656E-7	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998509422815	WITHOUT_CLASSIFICATION	1.490577184853701E-7	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999994149325996	WITHOUT_CLASSIFICATION	5.850674002937768E-7	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999997858986284	WITHOUT_CLASSIFICATION	2.1410137158051754E-7	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.999998485315532	WITHOUT_CLASSIFICATION	1.5146844679660796E-6	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999993415855467	WITHOUT_CLASSIFICATION	6.584144533157371E-7	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999992902366	WITHOUT_CLASSIFICATION	7.097632748884178E-10	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999874196139608	WITHOUT_CLASSIFICATION	1.2580386039264618E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999489881111598	WITHOUT_CLASSIFICATION	5.1011888840153385E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999591978007	WITHOUT_CLASSIFICATION	4.08021994121233E-8	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999997449529	WITHOUT_CLASSIFICATION	2.550471046585488E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999985269448601	WITHOUT_CLASSIFICATION	1.4730551399235087E-6	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999966922297112	WITHOUT_CLASSIFICATION	3.3077702887948846E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999966379122412	WITHOUT_CLASSIFICATION	3.362087758815557E-6	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999916390905489	WITHOUT_CLASSIFICATION	8.360909451189763E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999966379122412	WITHOUT_CLASSIFICATION	3.362087758815557E-6	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999999655659	WITHOUT_CLASSIFICATION	3.443421389639748E-11	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999996897632049	WITHOUT_CLASSIFICATION	3.1023679516949005E-7	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999896722688555	WITHOUT_CLASSIFICATION	1.0327731144574037E-5	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999761185540587	WITHOUT_CLASSIFICATION	2.3881445941369573E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999998246755221	WITHOUT_CLASSIFICATION	1.753244779137593E-7	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999976209597222	WITHOUT_CLASSIFICATION	2.3790402778012134E-6	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999974673163	WITHOUT_CLASSIFICATION	2.5326836485224597E-9	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999998997855732	WITHOUT_CLASSIFICATION	1.0021442675691535E-7	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999997813636776	WITHOUT_CLASSIFICATION	2.186363224086656E-7	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998698074368	WITHOUT_CLASSIFICATION	1.3019256312582117E-7	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999997672528338	WITHOUT_CLASSIFICATION	2.3274716625699216E-7	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999108793252	WITHOUT_CLASSIFICATION	8.912067479290608E-8	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999598106166	WITHOUT_CLASSIFICATION	4.018938335045971E-8	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9947171185397393	WITHOUT_CLASSIFICATION	0.0052828814602607	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999574722729094	WITHOUT_CLASSIFICATION	4.252772709050092E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997497790919	WITHOUT_CLASSIFICATION	2.5022090803062446E-7	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999999842417505	WITHOUT_CLASSIFICATION	1.5758249497513028E-7	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999895132178	WITHOUT_CLASSIFICATION	1.0486782337656635E-8	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999998207814	WITHOUT_CLASSIFICATION	1.7921863557510644E-10	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999997877095426	WITHOUT_CLASSIFICATION	2.1229045738237126E-7	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999971642901	WITHOUT_CLASSIFICATION	2.835709756516097E-9	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999942412482105	WITHOUT_CLASSIFICATION	5.758751789607004E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997157354369147	WITHOUT_CLASSIFICATION	2.8426456308527367E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999923440121635	WITHOUT_CLASSIFICATION	7.655987836453892E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999943522473971	WITHOUT_CLASSIFICATION	5.647752602862254E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999990137474	WITHOUT_CLASSIFICATION	9.862526361224512E-10	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999939008646761	WITHOUT_CLASSIFICATION	6.099135323948046E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999967671304822	WITHOUT_CLASSIFICATION	3.2328695178716065E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998563461705	WITHOUT_CLASSIFICATION	1.4365382949513643E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999928210301231	WITHOUT_CLASSIFICATION	7.178969876905961E-6	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999986971296988	WITHOUT_CLASSIFICATION	1.3028703011292566E-6	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999902259116626	WITHOUT_CLASSIFICATION	9.774088337302423E-6	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999961350264	WITHOUT_CLASSIFICATION	3.864973540917665E-9	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999960085839231	WITHOUT_CLASSIFICATION	3.991416076834374E-6	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998653805561286	WITHOUT_CLASSIFICATION	1.3461944387145315E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999976941994431	WITHOUT_CLASSIFICATION	2.3058005569807967E-6	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999978296965416	WITHOUT_CLASSIFICATION	2.170303458461314E-6	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998682915495	WITHOUT_CLASSIFICATION	1.3170845046642147E-7	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999955720593633	WITHOUT_CLASSIFICATION	4.427940636759229E-6	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999996870430353	WITHOUT_CLASSIFICATION	3.129569646324004E-7	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999999761134246	WITHOUT_CLASSIFICATION	2.3886575406969438E-8	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.999997857101026	WITHOUT_CLASSIFICATION	2.1428989739634583E-6	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999996111295825	WITHOUT_CLASSIFICATION	3.888704176022097E-7	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999990137474	WITHOUT_CLASSIFICATION	9.862526361224512E-10	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.99999001211828	WITHOUT_CLASSIFICATION	9.98788172002489E-6	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999998638638847	WITHOUT_CLASSIFICATION	1.361361152153859E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998738821647767	WITHOUT_CLASSIFICATION	1.261178352233731E-4	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999884913146	WITHOUT_CLASSIFICATION	1.15086853909879E-8	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.999997207611086	WITHOUT_CLASSIFICATION	2.7923889141277855E-6	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999928504008	WITHOUT_CLASSIFICATION	7.14959929040525E-9	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999994077297154	WITHOUT_CLASSIFICATION	5.922702846382768E-7	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999813206451409	WITHOUT_CLASSIFICATION	1.8679354859072172E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999941372434614	WITHOUT_CLASSIFICATION	5.862756538651133E-6	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999970229803	WITHOUT_CLASSIFICATION	2.9770197143297382E-9	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9998980631980903	WITHOUT_CLASSIFICATION	1.0193680190974975E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999913964396	WITHOUT_CLASSIFICATION	8.603560513554356E-9	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999903657010326	WITHOUT_CLASSIFICATION	9.63429896737167E-6	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999997414987604	WITHOUT_CLASSIFICATION	2.5850123959575513E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999976601373	WITHOUT_CLASSIFICATION	2.339862767550526E-9	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999934070616	WITHOUT_CLASSIFICATION	6.592938402274956E-9	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999879333049	WITHOUT_CLASSIFICATION	1.2066695096108901E-8	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999977453802	WITHOUT_CLASSIFICATION	2.2546198101104257E-8	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999716877811543	WITHOUT_CLASSIFICATION	2.8312218845684934E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.99999001211828	WITHOUT_CLASSIFICATION	9.98788172002489E-6	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999991120326829	WITHOUT_CLASSIFICATION	8.879673170503066E-7	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999998735710341	WITHOUT_CLASSIFICATION	1.2642896589606208E-6	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999996626237506	WITHOUT_CLASSIFICATION	3.373762493991976E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999962920466	WITHOUT_CLASSIFICATION	3.707953435490964E-9	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999992079341	WITHOUT_CLASSIFICATION	7.920658033402449E-10	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8681297846253893	WITHOUT_CLASSIFICATION	0.13187021537461077	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8681297846253893	WITHOUT_CLASSIFICATION	0.13187021537461077	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999879178037224	WITHOUT_CLASSIFICATION	1.2082196277587264E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8681297846253893	WITHOUT_CLASSIFICATION	0.13187021537461077	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8681297846253893	WITHOUT_CLASSIFICATION	0.13187021537461077	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999821823081947	WITHOUT_CLASSIFICATION	1.7817691805312962E-5	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999988801512762	WITHOUT_CLASSIFICATION	1.1198487237352433E-6	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998934716886	WITHOUT_CLASSIFICATION	1.0652831130365021E-7	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999973140474024	WITHOUT_CLASSIFICATION	2.6859525975577006E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999984643621295	WITHOUT_CLASSIFICATION	1.5356378706436518E-6	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9997450189528202	WITHOUT_CLASSIFICATION	2.5498104717983983E-4	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998481777966236	WITHOUT_CLASSIFICATION	1.5182220337634557E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999995347196747	WITHOUT_CLASSIFICATION	4.6528032523637043E-7	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999958510034235	WITHOUT_CLASSIFICATION	4.148996576572603E-6	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999876787100213	WITHOUT_CLASSIFICATION	1.2321289978742435E-5	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999952947134114	WITHOUT_CLASSIFICATION	4.705286588568595E-6	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999979824546128	WITHOUT_CLASSIFICATION	2.017545387125033E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999996557369261	WITHOUT_CLASSIFICATION	3.4426307397366317E-7	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999983880198937	WITHOUT_CLASSIFICATION	1.6119801063416321E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999725659644	WITHOUT_CLASSIFICATION	2.7434035624706175E-8	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999984800860443	WITHOUT_CLASSIFICATION	1.5199139556228946E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994730407218	WITHOUT_CLASSIFICATION	5.269592781720101E-7	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999986815219265	WITHOUT_CLASSIFICATION	1.3184780735562355E-6	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999808358695614	WITHOUT_CLASSIFICATION	1.916413043860646E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999964198190052	WITHOUT_CLASSIFICATION	3.580180994879489E-6	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999795034667284	WITHOUT_CLASSIFICATION	2.0496533271569635E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999992920198765	WITHOUT_CLASSIFICATION	7.079801236211805E-7	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994730407218	WITHOUT_CLASSIFICATION	5.269592781720101E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999939008646761	WITHOUT_CLASSIFICATION	6.099135323948046E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999945779765148	WITHOUT_CLASSIFICATION	5.422023485204098E-6	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998705585415	WITHOUT_CLASSIFICATION	1.2944145849856529E-6	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991071622926	WITHOUT_CLASSIFICATION	8.928377074881191E-7	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999958691070443	WITHOUT_CLASSIFICATION	4.130892955760941E-6	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999995465457594	WITHOUT_CLASSIFICATION	4.534542406016149E-6	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999989940339782	WITHOUT_CLASSIFICATION	1.0059660218161271E-6	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9871739580558577	WITHOUT_CLASSIFICATION	0.01282604194414228	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999931349070169	WITHOUT_CLASSIFICATION	6.865092983101804E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999994557486203	WITHOUT_CLASSIFICATION	5.442513797787925E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999345551011215	WITHOUT_CLASSIFICATION	6.544489887849641E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.999999992773015	WITHOUT_CLASSIFICATION	7.226985050523877E-9	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999988466015967	WITHOUT_CLASSIFICATION	1.1533984033553249E-6	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999984010993123	WITHOUT_CLASSIFICATION	1.5989006878250646E-6	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999969508658493	WITHOUT_CLASSIFICATION	3.049134150750185E-6	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999999968273921	WITHOUT_CLASSIFICATION	3.172607900782041E-8	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999997085061901	WITHOUT_CLASSIFICATION	2.9149380983148605E-7	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998047075834052	WITHOUT_CLASSIFICATION	1.95292416594739E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999943233432	WITHOUT_CLASSIFICATION	5.6766568164191744E-9	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999996084126106	WITHOUT_CLASSIFICATION	3.91587389407041E-6	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999774290238519	WITHOUT_CLASSIFICATION	2.2570976148193116E-5	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999930173934238	WITHOUT_CLASSIFICATION	6.9826065761593455E-6	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999943904996	WITHOUT_CLASSIFICATION	5.6095003784713125E-9	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999931349070169	WITHOUT_CLASSIFICATION	6.865092983101804E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998993336123	WITHOUT_CLASSIFICATION	1.0066638766800382E-7	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.999995737985154	WITHOUT_CLASSIFICATION	4.262014846147307E-6	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999412113307102	WITHOUT_CLASSIFICATION	5.8788669289695924E-5	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999987810543411	WITHOUT_CLASSIFICATION	1.2189456587981E-6	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972952895766	WITHOUT_CLASSIFICATION	2.7047104234028314E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999978154652699	WITHOUT_CLASSIFICATION	2.1845347299952587E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999990712695328	WITHOUT_CLASSIFICATION	9.287304671783724E-7	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999994956359904	WITHOUT_CLASSIFICATION	5.04364009619147E-7	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999996557023885	WITHOUT_CLASSIFICATION	3.442976115912908E-7	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999485981055677	WITHOUT_CLASSIFICATION	5.140189443231247E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999990529358566	WITHOUT_CLASSIFICATION	9.470641433935087E-7	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998906518334	WITHOUT_CLASSIFICATION	1.0934816672206983E-7	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999729179324054	WITHOUT_CLASSIFICATION	2.7082067594601692E-5	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.99999998262559	WITHOUT_CLASSIFICATION	1.73744100424359E-8	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997830015506	WITHOUT_CLASSIFICATION	2.1699844936270995E-7	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999966042258	WITHOUT_CLASSIFICATION	3.3957740956305353E-9	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996528304583	WITHOUT_CLASSIFICATION	3.4716954163104037E-7	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999990529358566	WITHOUT_CLASSIFICATION	9.470641433935087E-7	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999989989787	WITHOUT_CLASSIFICATION	1.0010212594087385E-9	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.999997980068913	WITHOUT_CLASSIFICATION	2.0199310869262037E-6	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999985620843583	WITHOUT_CLASSIFICATION	1.4379156415890065E-6	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9988576862018106	WITHOUT_CLASSIFICATION	0.0011423137981894586	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999992376937338	WITHOUT_CLASSIFICATION	7.623062661290138E-7	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999894675565502	WITHOUT_CLASSIFICATION	1.053244344974075E-5	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997830015506	WITHOUT_CLASSIFICATION	2.1699844936270995E-7	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999947116355504	WITHOUT_CLASSIFICATION	5.288364449458538E-6	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936865387131	WITHOUT_CLASSIFICATION	6.313461286878748E-6	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964564802859	WITHOUT_CLASSIFICATION	3.543519713992576E-6	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8782038413938381	WITHOUT_CLASSIFICATION	0.121796158606162	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9188428832111947	WITHOUT_CLASSIFICATION	0.08115711678880534	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9774700720095216	WITHOUT_CLASSIFICATION	0.022529927990478347	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999989691266079	WITHOUT_CLASSIFICATION	1.0308733921334697E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999989691266079	WITHOUT_CLASSIFICATION	1.0308733921334697E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999913807721	WITHOUT_CLASSIFICATION	8.619227962804987E-9	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993816356135	WITHOUT_CLASSIFICATION	6.183643865358177E-7	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999994400612136	WITHOUT_CLASSIFICATION	5.59938786463064E-7	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999987880807336	WITHOUT_CLASSIFICATION	1.2119192664075143E-6	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999971846482831	WITHOUT_CLASSIFICATION	2.8153517168291796E-6	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950204556516	WITHOUT_CLASSIFICATION	4.97954434838526E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718327995125	WITHOUT_CLASSIFICATION	2.8167200487566337E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997617116305108	WITHOUT_CLASSIFICATION	2.3828836948930723E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999953216072821	WITHOUT_CLASSIFICATION	4.678392717959384E-6	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995417756244	WITHOUT_CLASSIFICATION	4.5822437546404173E-7	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950204556516	WITHOUT_CLASSIFICATION	4.97954434838526E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999718327995125	WITHOUT_CLASSIFICATION	2.8167200487566337E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997617116305108	WITHOUT_CLASSIFICATION	2.3828836948930723E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.999999059603347	WITHOUT_CLASSIFICATION	9.403966530666067E-7	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999965154381015	WITHOUT_CLASSIFICATION	3.4845618984605726E-6	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999988310816	WITHOUT_CLASSIFICATION	1.168918483639341E-9	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999987949092819	WITHOUT_CLASSIFICATION	1.2050907181679742E-6	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998453981097	WITHOUT_CLASSIFICATION	1.5460189031544658E-7	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999968136017849	WITHOUT_CLASSIFICATION	3.186398215117743E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999994777803057	WITHOUT_CLASSIFICATION	5.222196942550952E-7	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999985529390769	WITHOUT_CLASSIFICATION	1.4470609230433303E-6	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999955416360545	WITHOUT_CLASSIFICATION	4.458363945428942E-6	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999997335405366	WITHOUT_CLASSIFICATION	2.664594634190491E-7	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999996871696794	WITHOUT_CLASSIFICATION	3.1283032065419957E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999991460108443	WITHOUT_CLASSIFICATION	8.539891557024065E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999993943629364	WITHOUT_CLASSIFICATION	6.056370636186683E-7	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998325015564	WITHOUT_CLASSIFICATION	1.674984435133246E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986619009391	WITHOUT_CLASSIFICATION	1.3380990608680247E-6	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999811291866	WITHOUT_CLASSIFICATION	1.887081334641025E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999996362042562	WITHOUT_CLASSIFICATION	3.6379574379368818E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999910921507672	WITHOUT_CLASSIFICATION	8.907849232772091E-6	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.999996860794291	WITHOUT_CLASSIFICATION	3.1392057090478178E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999939976584545	WITHOUT_CLASSIFICATION	6.0023415454197975E-6	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999981124981	WITHOUT_CLASSIFICATION	1.887501826789986E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999318827350685	WITHOUT_CLASSIFICATION	6.811726493151521E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999715304432	WITHOUT_CLASSIFICATION	2.8469556838974964E-8	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999594649029682	WITHOUT_CLASSIFICATION	4.0535097031791365E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999899781964	WITHOUT_CLASSIFICATION	1.0021803670207494E-8	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9995826711342656	WITHOUT_CLASSIFICATION	4.173288657344573E-4	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959983312215	WITHOUT_CLASSIFICATION	4.001668778376888E-6	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999363250447464	WITHOUT_CLASSIFICATION	6.367495525368879E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999985162872	WITHOUT_CLASSIFICATION	1.483712758104333E-9	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914029391591	WITHOUT_CLASSIFICATION	8.597060840959392E-6	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999512242961535	WITHOUT_CLASSIFICATION	4.8775703846569745E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998679887191	WITHOUT_CLASSIFICATION	1.3201128087862965E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998679887191	WITHOUT_CLASSIFICATION	1.3201128087862965E-7	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999999367776	WITHOUT_CLASSIFICATION	6.322239101511716E-11	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999981767064018	WITHOUT_CLASSIFICATION	1.8232935982220582E-6	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997014278522887	WITHOUT_CLASSIFICATION	2.9857214771139416E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999462429723075	WITHOUT_CLASSIFICATION	5.375702769244302E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999361073871744	WITHOUT_CLASSIFICATION	6.389261282552872E-5	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999943431614	WITHOUT_CLASSIFICATION	5.6568385933868544E-9	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999834711453469	WITHOUT_CLASSIFICATION	1.652885465313347E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999960032626831	WITHOUT_CLASSIFICATION	3.996737316882588E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999961903400515	WITHOUT_CLASSIFICATION	3.809659948436714E-6	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993465449265	WITHOUT_CLASSIFICATION	6.534550735564861E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990634485959	WITHOUT_CLASSIFICATION	9.365514041270676E-7	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999420878918	WITHOUT_CLASSIFICATION	5.79121081876488E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979559795409	WITHOUT_CLASSIFICATION	2.044020459153794E-6	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998688066134	WITHOUT_CLASSIFICATION	1.3119338666071034E-7	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992997031258	WITHOUT_CLASSIFICATION	7.002968742058284E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995961449047	WITHOUT_CLASSIFICATION	4.038550953063694E-7	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988097331756	WITHOUT_CLASSIFICATION	1.1902668244182905E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986014365594	WITHOUT_CLASSIFICATION	1.398563440634635E-6	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958267515161	WITHOUT_CLASSIFICATION	4.173248483859692E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992806612541	WITHOUT_CLASSIFICATION	7.193387460108856E-7	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999847621179352	WITHOUT_CLASSIFICATION	1.523788206485898E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999960618522828	WITHOUT_CLASSIFICATION	3.938147717129933E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999996368684596	WITHOUT_CLASSIFICATION	3.6313154047626733E-7	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999660861869	WITHOUT_CLASSIFICATION	3.391381310156924E-8	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999996285649648	WITHOUT_CLASSIFICATION	3.714350351089668E-7	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9992525961773048	WITHOUT_CLASSIFICATION	7.474038226952715E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999987720792051	WITHOUT_CLASSIFICATION	1.2279207949310495E-6	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9998242427234213	WITHOUT_CLASSIFICATION	1.7575727657864987E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999996368684596	WITHOUT_CLASSIFICATION	3.6313154047626733E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999996368684596	WITHOUT_CLASSIFICATION	3.6313154047626733E-7	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9996629056332317	WITHOUT_CLASSIFICATION	3.3709436676842154E-4	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999951851791753	WITHOUT_CLASSIFICATION	4.814820824680844E-6	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997471346154	WITHOUT_CLASSIFICATION	2.528653846088567E-7	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999952577469685	WITHOUT_CLASSIFICATION	4.742253031440723E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999813251502665	WITHOUT_CLASSIFICATION	1.8674849733503194E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999939976584545	WITHOUT_CLASSIFICATION	6.0023415454197975E-6	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999997954252105	WITHOUT_CLASSIFICATION	2.0457478949778437E-6	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999957600054714	WITHOUT_CLASSIFICATION	4.239994528619591E-6	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999538568273	WITHOUT_CLASSIFICATION	4.614317271676236E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999583971112014	WITHOUT_CLASSIFICATION	4.160288879863935E-5	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9993301346188485	WITHOUT_CLASSIFICATION	6.698653811516044E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999770160561556	WITHOUT_CLASSIFICATION	2.2983943844412867E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999925268738796	WITHOUT_CLASSIFICATION	7.473126120421015E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999925268738796	WITHOUT_CLASSIFICATION	7.473126120421015E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989645331886	WITHOUT_CLASSIFICATION	1.035466811468528E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989645331886	WITHOUT_CLASSIFICATION	1.035466811468528E-6	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983662914744473	WITHOUT_CLASSIFICATION	0.0016337085255527725	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995506128605	WITHOUT_CLASSIFICATION	4.4938713947325465E-7	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999952906545	WITHOUT_CLASSIFICATION	4.7093454724374225E-9	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995892697149663	WITHOUT_CLASSIFICATION	4.107302850337452E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9994805308698358	WITHOUT_CLASSIFICATION	5.194691301641353E-4	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999729788176092	WITHOUT_CLASSIFICATION	2.7021182390893788E-5	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844255691996	WITHOUT_CLASSIFICATION	1.557443080031245E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989533008333	WITHOUT_CLASSIFICATION	1.046699166652137E-6	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999999196330922	WITHOUT_CLASSIFICATION	8.036690775879345E-8	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.99999997744162	WITHOUT_CLASSIFICATION	2.2558380066167644E-8	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999977072621	WITHOUT_CLASSIFICATION	2.292737805033977E-9	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999885267508843	WITHOUT_CLASSIFICATION	1.1473249115642026E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998984116625858	WITHOUT_CLASSIFICATION	1.0158833741432156E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998073596293	WITHOUT_CLASSIFICATION	1.9264037069082168E-7	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999902828445961	WITHOUT_CLASSIFICATION	9.717155403841771E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999902828445961	WITHOUT_CLASSIFICATION	9.717155403841771E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999902828445961	WITHOUT_CLASSIFICATION	9.717155403841771E-6	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999890106693798	WITHOUT_CLASSIFICATION	1.0989330620168923E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999996606681802	WITHOUT_CLASSIFICATION	3.3933181968286975E-7	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999998659297	WITHOUT_CLASSIFICATION	1.340703851483588E-10	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999845372131999	WITHOUT_CLASSIFICATION	1.5462786800176154E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999311759670295	WITHOUT_CLASSIFICATION	6.882403297038493E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999932845282318	WITHOUT_CLASSIFICATION	6.715471768208144E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999997631593657	WITHOUT_CLASSIFICATION	2.3684063429831926E-6	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8393208956757582	WITHOUT_CLASSIFICATION	0.16067910432424176	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999792968681005	WITHOUT_CLASSIFICATION	2.070313189940711E-5	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999813303021305	WITHOUT_CLASSIFICATION	1.866969786942897E-5	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998965361854	WITHOUT_CLASSIFICATION	1.0346381462787943E-7	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999379340184696	WITHOUT_CLASSIFICATION	6.206598153037356E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996487416581	WITHOUT_CLASSIFICATION	3.512583419117623E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999999962813988	WITHOUT_CLASSIFICATION	3.718601212136935E-8	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999013620843528	WITHOUT_CLASSIFICATION	9.863791564722654E-5	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999755749488	WITHOUT_CLASSIFICATION	2.4425051226892795E-8	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999981689771285	WITHOUT_CLASSIFICATION	1.8310228715890186E-6	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999878686658732	WITHOUT_CLASSIFICATION	1.2131334126796143E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999937033213258	WITHOUT_CLASSIFICATION	6.296678674139462E-6	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999980081330014	WITHOUT_CLASSIFICATION	1.9918669985093115E-6	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999993790276	WITHOUT_CLASSIFICATION	6.209723971299959E-10	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992551114186	WITHOUT_CLASSIFICATION	7.44888581403894E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999970432857	WITHOUT_CLASSIFICATION	2.956714300061925E-6	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999888367205	WITHOUT_CLASSIFICATION	1.1163279507795603E-8	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999771032893543	WITHOUT_CLASSIFICATION	2.2896710645728027E-5	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.99999808643057	WITHOUT_CLASSIFICATION	1.913569430098835E-6	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999995177302077	WITHOUT_CLASSIFICATION	4.822697923831146E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999943956734102	WITHOUT_CLASSIFICATION	5.604326589884696E-6	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999901842	WITHOUT_CLASSIFICATION	9.815830369842919E-12	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999987245922634	WITHOUT_CLASSIFICATION	1.2754077365694058E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997974833184	WITHOUT_CLASSIFICATION	2.0251668172551378E-7	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999990894409283	WITHOUT_CLASSIFICATION	9.105590716063931E-7	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.999999439187405	WITHOUT_CLASSIFICATION	5.608125949631403E-7	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9996181930455801	WITHOUT_CLASSIFICATION	3.8180695441985407E-4	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999578984377	WITHOUT_CLASSIFICATION	4.210156243236739E-8	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999996475622076	WITHOUT_CLASSIFICATION	3.5243779245621283E-7	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999984111332825	WITHOUT_CLASSIFICATION	1.5888667175084106E-6	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999725863996849	WITHOUT_CLASSIFICATION	2.741360031501208E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999966790259639	WITHOUT_CLASSIFICATION	3.320974036064733E-6	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999871458913693	WITHOUT_CLASSIFICATION	1.2854108630787831E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999998439541167	WITHOUT_CLASSIFICATION	1.5604588341457627E-7	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999987497213245	WITHOUT_CLASSIFICATION	1.2502786754848255E-6	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9461984724104522	WITHOUT_CLASSIFICATION	0.053801527589547746	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999860058933956	WITHOUT_CLASSIFICATION	1.3994106604394349E-5	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999962843055	WITHOUT_CLASSIFICATION	3.715694632762875E-9	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999992072350552	WITHOUT_CLASSIFICATION	7.927649447004293E-7	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999628023578	WITHOUT_CLASSIFICATION	3.7197642142245735E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998157156648	WITHOUT_CLASSIFICATION	1.8428433524464591E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999908454399721	WITHOUT_CLASSIFICATION	9.154560028020991E-6	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999988390333608	WITHOUT_CLASSIFICATION	1.1609666392115335E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999980705983728	WITHOUT_CLASSIFICATION	1.9294016271678283E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998896110036956	WITHOUT_CLASSIFICATION	1.1038899630436143E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996847206345465	WITHOUT_CLASSIFICATION	3.152793654534269E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999144974447244	WITHOUT_CLASSIFICATION	8.550255527568933E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996824269835577	WITHOUT_CLASSIFICATION	3.175730164422259E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999944097192269	WITHOUT_CLASSIFICATION	5.590280772994366E-6	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9955518184384722	WITHOUT_CLASSIFICATION	0.0044481815615278735	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999995003025473	WITHOUT_CLASSIFICATION	4.996974528186526E-7	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999546357433	WITHOUT_CLASSIFICATION	4.5364256769759234E-8	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.999970707917272	WITHOUT_CLASSIFICATION	2.9292082728026174E-5	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999218324257	WITHOUT_CLASSIFICATION	7.81675742693517E-8	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999710944519	WITHOUT_CLASSIFICATION	2.8905548137305595E-8	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999985014808	WITHOUT_CLASSIFICATION	1.498519205895311E-9	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999785102827	WITHOUT_CLASSIFICATION	2.1489717414778695E-8	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999672714944	WITHOUT_CLASSIFICATION	3.2728505647686575E-8	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999842398892	WITHOUT_CLASSIFICATION	1.576011084325182E-8	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999991566431	WITHOUT_CLASSIFICATION	8.433568870910606E-10	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999803162808	WITHOUT_CLASSIFICATION	1.9683719196036274E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824889426178	WITHOUT_CLASSIFICATION	1.751105738215599E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824889426178	WITHOUT_CLASSIFICATION	1.751105738215599E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998339118891	WITHOUT_CLASSIFICATION	1.6608811082480537E-7	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999995329255698	WITHOUT_CLASSIFICATION	4.670744303638396E-7	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999736205146	WITHOUT_CLASSIFICATION	2.637948535136816E-8	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999999433423479	WITHOUT_CLASSIFICATION	5.665765220840179E-8	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999989153074873	WITHOUT_CLASSIFICATION	1.084692512723584E-6	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999614554640351	WITHOUT_CLASSIFICATION	3.8544535964783475E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999996858432002	WITHOUT_CLASSIFICATION	3.1415679975559594E-7	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999998691762274	WITHOUT_CLASSIFICATION	1.3082377257811068E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999959106674332	WITHOUT_CLASSIFICATION	4.089332566768098E-6	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999998180966873	WITHOUT_CLASSIFICATION	1.8190331280827527E-7	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999855987863876	WITHOUT_CLASSIFICATION	1.440121361249152E-5	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996573661455	WITHOUT_CLASSIFICATION	3.4263385460597954E-7	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999999369787574	WITHOUT_CLASSIFICATION	6.302124258166499E-8	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999991135094	WITHOUT_CLASSIFICATION	8.86490606740647E-9	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999998835337676	WITHOUT_CLASSIFICATION	1.1646623256489808E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9471617744845309	WITHOUT_CLASSIFICATION	0.052838225515469156	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999967378188209	WITHOUT_CLASSIFICATION	3.2621811792255986E-6	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9725745179999209	WITHOUT_CLASSIFICATION	0.02742548200007908	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8436060031845062	WITHOUT_CLASSIFICATION	0.15639399681549393	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999948593742255	WITHOUT_CLASSIFICATION	5.140625774470133E-6	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999996169153155	WITHOUT_CLASSIFICATION	3.8308468454680345E-7	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999952762470826	WITHOUT_CLASSIFICATION	4.723752917361968E-6	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999983804761884	WITHOUT_CLASSIFICATION	1.619523811564774E-6	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.988430338291746	WITHOUT_CLASSIFICATION	0.01156966170825394	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999477087137	WITHOUT_CLASSIFICATION	5.229128619036557E-8	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999981690352591	WITHOUT_CLASSIFICATION	1.830964740891549E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999998000981733	WITHOUT_CLASSIFICATION	1.9990182670904073E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999483981942	WITHOUT_CLASSIFICATION	5.1601805730422817E-8	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999994097261633	WITHOUT_CLASSIFICATION	5.902738367224438E-7	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999977743139342	WITHOUT_CLASSIFICATION	2.2256860657962E-5	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999999309010732	WITHOUT_CLASSIFICATION	6.909892680685574E-7	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999915094631853	WITHOUT_CLASSIFICATION	8.490536814773243E-6	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999992556503566	WITHOUT_CLASSIFICATION	7.443496433782072E-7	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999954569957025	WITHOUT_CLASSIFICATION	4.543004297553046E-6	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9988992978657869	WITHOUT_CLASSIFICATION	0.0011007021342130125	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9988992978657869	WITHOUT_CLASSIFICATION	0.0011007021342130125	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991708440085	WITHOUT_CLASSIFICATION	8.291559916229578E-7	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999505273414263	WITHOUT_CLASSIFICATION	4.94726585737851E-5	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999911088573	WITHOUT_CLASSIFICATION	8.891142671672456E-9	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999322394929783	WITHOUT_CLASSIFICATION	6.776050702178815E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999567311361	WITHOUT_CLASSIFICATION	4.32688638478266E-8	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999997777544334	WITHOUT_CLASSIFICATION	2.2224556674399131E-7	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999992791111688	WITHOUT_CLASSIFICATION	7.208888310660194E-7	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999988947018009	WITHOUT_CLASSIFICATION	1.1052981990212742E-6	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999991155889894	WITHOUT_CLASSIFICATION	8.844110106255362E-7	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999981716022394	WITHOUT_CLASSIFICATION	1.8283977606621598E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999873148925	WITHOUT_CLASSIFICATION	1.2685107496236485E-7	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999960420249654	WITHOUT_CLASSIFICATION	3.9579750346813735E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995550213118255	WITHOUT_CLASSIFICATION	4.4497868817449076E-4	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999875739369	WITHOUT_CLASSIFICATION	1.2426063019917307E-8	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997766921993287	WITHOUT_CLASSIFICATION	2.2330780067119897E-4	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999924927483911	WITHOUT_CLASSIFICATION	7.507251608987741E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9581595424561579	WITHOUT_CLASSIFICATION	0.041840457543842025	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9581595424561579	WITHOUT_CLASSIFICATION	0.041840457543842025	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999999347503966	WITHOUT_CLASSIFICATION	6.52496033888782E-7	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999993831847235	WITHOUT_CLASSIFICATION	6.168152765212737E-7	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999856578812522	WITHOUT_CLASSIFICATION	1.4342118747850497E-5	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998522664328	WITHOUT_CLASSIFICATION	1.4773356719814275E-7	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999976075036946	WITHOUT_CLASSIFICATION	2.392496305423346E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998388324353564	WITHOUT_CLASSIFICATION	1.6116756464354975E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998157992546	WITHOUT_CLASSIFICATION	1.842007454352085E-7	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999590924573	WITHOUT_CLASSIFICATION	4.0907542670545385E-8	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998953998444	WITHOUT_CLASSIFICATION	1.0460015558989736E-7	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999998886142618	WITHOUT_CLASSIFICATION	1.1138573820407861E-6	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999998886142618	WITHOUT_CLASSIFICATION	1.1138573820407861E-6	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999470307764897	WITHOUT_CLASSIFICATION	5.296922351030087E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999996422819872	WITHOUT_CLASSIFICATION	3.577180126575143E-7	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999882724365322	WITHOUT_CLASSIFICATION	1.1727563467898847E-5	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999996757312637	WITHOUT_CLASSIFICATION	3.2426873626761985E-7	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999773948070038	WITHOUT_CLASSIFICATION	2.260519299620945E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999998527541	WITHOUT_CLASSIFICATION	1.4724592444647154E-10	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999971257533529	WITHOUT_CLASSIFICATION	2.8742466471727543E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999628458637811	WITHOUT_CLASSIFICATION	3.715413621886565E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997621114611718	WITHOUT_CLASSIFICATION	2.3788853882829856E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999680734976545	WITHOUT_CLASSIFICATION	3.192650234553416E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996904827037	WITHOUT_CLASSIFICATION	3.0951729632828373E-7	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999985957530862	WITHOUT_CLASSIFICATION	1.4042469138055047E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999003027780585	WITHOUT_CLASSIFICATION	9.969722194146812E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999959573470899	WITHOUT_CLASSIFICATION	4.042652910067059E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999773436091204	WITHOUT_CLASSIFICATION	2.265639087957914E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999993861440007	WITHOUT_CLASSIFICATION	6.138559993123762E-7	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999266593135	WITHOUT_CLASSIFICATION	7.334068656376302E-8	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999943783238	WITHOUT_CLASSIFICATION	5.621676215615308E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999999460605	WITHOUT_CLASSIFICATION	5.393949097538051E-10	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999970394076003	WITHOUT_CLASSIFICATION	2.9605923997113113E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999999219376896	WITHOUT_CLASSIFICATION	7.806231039083907E-8	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9992178086143739	WITHOUT_CLASSIFICATION	7.821913856261905E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999993925462981	WITHOUT_CLASSIFICATION	6.074537019975543E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999982230249516	WITHOUT_CLASSIFICATION	1.7769750485046315E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999986814553473	WITHOUT_CLASSIFICATION	1.318544652695237E-6	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999987538840693	WITHOUT_CLASSIFICATION	1.2461159307130516E-6	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999999042205158	WITHOUT_CLASSIFICATION	9.577948429811478E-8	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9993125375111646	WITHOUT_CLASSIFICATION	6.87462488835401E-4	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.937527452793669	WITHOUT_CLASSIFICATION	0.062472547206330976	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999972559644483	WITHOUT_CLASSIFICATION	2.744035551750945E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9991456165342845	WITHOUT_CLASSIFICATION	8.543834657155077E-4	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999452645454	WITHOUT_CLASSIFICATION	5.4735454549730344E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999739385438275	WITHOUT_CLASSIFICATION	2.606145617243766E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999999706052329	WITHOUT_CLASSIFICATION	2.9394767067777516E-8	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999981595437663	WITHOUT_CLASSIFICATION	1.8404562336507735E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999987621422345	WITHOUT_CLASSIFICATION	1.237857765555153E-6	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999895683819192	WITHOUT_CLASSIFICATION	1.043161808076484E-5	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999978426017271	WITHOUT_CLASSIFICATION	2.157398272935863E-6	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999327894836	WITHOUT_CLASSIFICATION	6.721051643632383E-8	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999327894836	WITHOUT_CLASSIFICATION	6.721051643632383E-8	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999039817706	WITHOUT_CLASSIFICATION	9.601822939699785E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997895200673	WITHOUT_CLASSIFICATION	2.1047993264803487E-7	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999993736267647	WITHOUT_CLASSIFICATION	6.263732352894402E-7	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999939454393599	WITHOUT_CLASSIFICATION	6.054560640152847E-6	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999972847706785	WITHOUT_CLASSIFICATION	2.7152293215413746E-6	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999999643677	WITHOUT_CLASSIFICATION	3.5632242401088214E-11	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999996915718	WITHOUT_CLASSIFICATION	3.0842817346207016E-10	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999828672547942	WITHOUT_CLASSIFICATION	1.7132745205667446E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999039817706	WITHOUT_CLASSIFICATION	9.601822939699785E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997895200673	WITHOUT_CLASSIFICATION	2.1047993264803487E-7	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999979461852156	WITHOUT_CLASSIFICATION	2.053814784327252E-6	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999012140692142	WITHOUT_CLASSIFICATION	9.878593078580958E-5	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998607145361	WITHOUT_CLASSIFICATION	1.392854640077686E-7	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998151008205298	WITHOUT_CLASSIFICATION	1.8489917947013662E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999996035079655	WITHOUT_CLASSIFICATION	3.9649203460342245E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999928252468402	WITHOUT_CLASSIFICATION	7.174753159818054E-6	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999904735668688	WITHOUT_CLASSIFICATION	9.52643313112079E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999366133677535	WITHOUT_CLASSIFICATION	6.338663224642377E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999886922385769	WITHOUT_CLASSIFICATION	1.1307761423142404E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7059357694637434	IMPLEMENTATION	0.2940642305362567	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999971194	WITHOUT_CLASSIFICATION	2.880603738144115E-12	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7059357694637434	IMPLEMENTATION	0.2940642305362567	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999979011035787	WITHOUT_CLASSIFICATION	2.0988964212417398E-6	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999990756379817	WITHOUT_CLASSIFICATION	9.243620182851512E-7	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999984559861282	WITHOUT_CLASSIFICATION	1.5440138717795748E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954747143873	WITHOUT_CLASSIFICATION	4.525285612599538E-6	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999877899274776	WITHOUT_CLASSIFICATION	1.2210072522482343E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999366133677535	WITHOUT_CLASSIFICATION	6.338663224642377E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999366133677535	WITHOUT_CLASSIFICATION	6.338663224642377E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999997333484012	WITHOUT_CLASSIFICATION	2.666515987613283E-7	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999997263197749	WITHOUT_CLASSIFICATION	2.736802251338236E-7	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999958887423352	WITHOUT_CLASSIFICATION	4.111257664747233E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993072538202	WITHOUT_CLASSIFICATION	6.927461796961312E-7	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999990608166041	WITHOUT_CLASSIFICATION	9.391833959649448E-7	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999999955821102	WITHOUT_CLASSIFICATION	4.417889801990446E-8	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9871543961337312	WITHOUT_CLASSIFICATION	0.012845603866268622	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990031169992	WITHOUT_CLASSIFICATION	9.968830007443218E-7	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999589127259	WITHOUT_CLASSIFICATION	4.108727424558929E-8	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999302729288561	WITHOUT_CLASSIFICATION	6.972707114393562E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999977562397501	WITHOUT_CLASSIFICATION	2.243760249972453E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999998379868789	WITHOUT_CLASSIFICATION	1.6201312126259525E-7	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999961086449621	WITHOUT_CLASSIFICATION	3.891355037846756E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999640429540633	WITHOUT_CLASSIFICATION	3.595704593662352E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999998439925228	WITHOUT_CLASSIFICATION	1.5600747715667167E-7	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999310139360872	WITHOUT_CLASSIFICATION	6.898606391279305E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999362437679091	WITHOUT_CLASSIFICATION	6.375623209095417E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999745427485904	WITHOUT_CLASSIFICATION	2.5457251409593556E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999426634240043	WITHOUT_CLASSIFICATION	5.733657599571762E-5	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997976269345	WITHOUT_CLASSIFICATION	2.0237306562430964E-7	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999925285998305	WITHOUT_CLASSIFICATION	7.471400169505369E-6	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998314663208124	WITHOUT_CLASSIFICATION	1.685336791875703E-4	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999978876389736	WITHOUT_CLASSIFICATION	2.1123610263908313E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9981017541202948	WITHOUT_CLASSIFICATION	0.0018982458797052722	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999526258349016	WITHOUT_CLASSIFICATION	4.737416509836908E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999490316064882	WITHOUT_CLASSIFICATION	5.096839351186117E-5	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999989983381504	WITHOUT_CLASSIFICATION	1.0016618496680228E-6	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999999698720647	WITHOUT_CLASSIFICATION	3.0127935300567204E-7	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9219331494906402	WITHOUT_CLASSIFICATION	0.0780668505093598	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9992449145705299	WITHOUT_CLASSIFICATION	7.55085429470128E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9931303579076113	WITHOUT_CLASSIFICATION	0.0068696420923887724	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9745734307939474	WITHOUT_CLASSIFICATION	0.025426569206052574	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.999939880100497	WITHOUT_CLASSIFICATION	6.011989950304428E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999990031169992	WITHOUT_CLASSIFICATION	9.968830007443218E-7	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999926162809478	WITHOUT_CLASSIFICATION	7.383719052071207E-6	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.9999506920840385	WITHOUT_CLASSIFICATION	4.9307915961500374E-5	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9537394521740404	WITHOUT_CLASSIFICATION	0.04626054782595955	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999998982010364	WITHOUT_CLASSIFICATION	1.0179896349173797E-7	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9997778364466628	WITHOUT_CLASSIFICATION	2.221635533371545E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999939759432854	WITHOUT_CLASSIFICATION	6.024056714520684E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993072538202	WITHOUT_CLASSIFICATION	6.927461796961312E-7	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999993072538202	WITHOUT_CLASSIFICATION	6.927461796961312E-7	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999958986388658	WITHOUT_CLASSIFICATION	4.1013611342074215E-5	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999877545722229	WITHOUT_CLASSIFICATION	1.2245427777077504E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999964801178006	WITHOUT_CLASSIFICATION	3.519882199383675E-6	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999816584230119	WITHOUT_CLASSIFICATION	1.83415769881706E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995701638908134	WITHOUT_CLASSIFICATION	4.2983610918659223E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999996715107267	WITHOUT_CLASSIFICATION	3.2848927333735714E-7	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999999199196603	WITHOUT_CLASSIFICATION	8.00803396951157E-7	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999863359599	WITHOUT_CLASSIFICATION	1.3664040157379935E-8	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999735015606	WITHOUT_CLASSIFICATION	2.6498439384878567E-8	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999875762545574	WITHOUT_CLASSIFICATION	1.2423745442671159E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999775611029	WITHOUT_CLASSIFICATION	2.2438897134951086E-8	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999935597991774	WITHOUT_CLASSIFICATION	6.440200822660276E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999821050407172	WITHOUT_CLASSIFICATION	1.7894959282823215E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999039817706	WITHOUT_CLASSIFICATION	9.601822939699785E-8	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999775611029	WITHOUT_CLASSIFICATION	2.2438897134951086E-8	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992389929078	WITHOUT_CLASSIFICATION	7.610070921477289E-7	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999505237879269	WITHOUT_CLASSIFICATION	4.94762120730654E-5	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999996096178128	WITHOUT_CLASSIFICATION	3.9038218728470744E-7	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9316419460104209	IMPLEMENTATION	0.0683580539895791	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999821050407172	WITHOUT_CLASSIFICATION	1.7894959282823215E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999998179251761	WITHOUT_CLASSIFICATION	1.8207482392387886E-7	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999802313332	WITHOUT_CLASSIFICATION	1.9768666801425662E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999326275669	WITHOUT_CLASSIFICATION	6.737243311714418E-8	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999996807	WITHOUT_CLASSIFICATION	3.192150097645026E-13	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999852970504776	WITHOUT_CLASSIFICATION	1.4702949522493058E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999997466403807	WITHOUT_CLASSIFICATION	2.533596193237511E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999195311682	WITHOUT_CLASSIFICATION	8.046883178839613E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869355366058	WITHOUT_CLASSIFICATION	1.306446339423425E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999663647627509	WITHOUT_CLASSIFICATION	3.363523724907838E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999996813934286	WITHOUT_CLASSIFICATION	3.186065714080824E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999880129811	WITHOUT_CLASSIFICATION	1.1987018971545288E-8	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999805859509727	WITHOUT_CLASSIFICATION	1.941404902730745E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999775611029	WITHOUT_CLASSIFICATION	2.2438897134951086E-8	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999998179251761	WITHOUT_CLASSIFICATION	1.8207482392387886E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999326275669	WITHOUT_CLASSIFICATION	6.737243311714418E-8	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999997004335168	WITHOUT_CLASSIFICATION	2.9956648315336514E-7	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999998466979297	WITHOUT_CLASSIFICATION	1.533020701636068E-7	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999999373660103	WITHOUT_CLASSIFICATION	6.263398969253098E-8	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999821050407172	WITHOUT_CLASSIFICATION	1.7894959282823215E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999934159586966	WITHOUT_CLASSIFICATION	6.584041303271742E-6	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999919323365796	WITHOUT_CLASSIFICATION	8.067663420454825E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801609285127	WITHOUT_CLASSIFICATION	1.9839071487267648E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999738887095019	WITHOUT_CLASSIFICATION	2.6111290498193048E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869355366058	WITHOUT_CLASSIFICATION	1.306446339423425E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992389929078	WITHOUT_CLASSIFICATION	7.610070921477289E-7	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.999952753800153	WITHOUT_CLASSIFICATION	4.724619984692628E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999992294884925	WITHOUT_CLASSIFICATION	7.705115074152882E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999993482197215	WITHOUT_CLASSIFICATION	6.517802785664953E-7	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999903485308971	WITHOUT_CLASSIFICATION	9.65146910289772E-6	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9638498892750941	WITHOUT_CLASSIFICATION	0.03615011072490593	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9992116285006788	WITHOUT_CLASSIFICATION	7.883714993212716E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999877395920846	WITHOUT_CLASSIFICATION	1.2260407915467227E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954747143873	WITHOUT_CLASSIFICATION	4.525285612599538E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999011423513	WITHOUT_CLASSIFICATION	9.88576488316561E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998817548971	WITHOUT_CLASSIFICATION	1.182451029888615E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999335631765	WITHOUT_CLASSIFICATION	6.643682351545735E-8	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999999987505291	WITHOUT_CLASSIFICATION	1.2494709041005357E-8	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999867275486	WITHOUT_CLASSIFICATION	1.3272451442914042E-8	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999816321811	WITHOUT_CLASSIFICATION	1.8367818958947643E-8	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999988715418604	WITHOUT_CLASSIFICATION	1.128458139686927E-6	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999999582095467	WITHOUT_CLASSIFICATION	4.17904533020621E-7	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999738887095019	WITHOUT_CLASSIFICATION	2.6111290498193048E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999496226216957	WITHOUT_CLASSIFICATION	5.0377378304213567E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999807683192845	WITHOUT_CLASSIFICATION	1.9231680715531326E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999945205195635	WITHOUT_CLASSIFICATION	5.479480436471283E-6	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999743381508825	WITHOUT_CLASSIFICATION	2.566184911743228E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999995132163602	WITHOUT_CLASSIFICATION	4.867836398607297E-7	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999993406890705	WITHOUT_CLASSIFICATION	6.593109295348741E-7	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999993407508477	WITHOUT_CLASSIFICATION	6.592491522787162E-7	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9996405410257587	WITHOUT_CLASSIFICATION	3.5945897424126904E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999999083230755	WITHOUT_CLASSIFICATION	9.1676924499201E-7	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998835056117352	WITHOUT_CLASSIFICATION	1.1649438826488141E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999996121152513	WITHOUT_CLASSIFICATION	3.878847486613577E-7	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999657401724	WITHOUT_CLASSIFICATION	3.4259827610290645E-8	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999769280241654	WITHOUT_CLASSIFICATION	2.3071975834624657E-5	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999987861974868	WITHOUT_CLASSIFICATION	1.213802513231245E-6	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999706186341	WITHOUT_CLASSIFICATION	2.938136591650722E-8	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999468010263	WITHOUT_CLASSIFICATION	5.319897367694257E-8	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999990251739365	WITHOUT_CLASSIFICATION	9.74826063552256E-7	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998929524572	WITHOUT_CLASSIFICATION	1.0704754287741051E-7	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999993630237547	WITHOUT_CLASSIFICATION	6.369762452849409E-7	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999997781541733	WITHOUT_CLASSIFICATION	2.2184582682208398E-7	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9999578156356089	WITHOUT_CLASSIFICATION	4.218436439100792E-5	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999971825793839	WITHOUT_CLASSIFICATION	2.8174206160914674E-6	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999995091645791	WITHOUT_CLASSIFICATION	4.908354208585832E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999991857113	WITHOUT_CLASSIFICATION	8.14288698112732E-9	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998057889401	WITHOUT_CLASSIFICATION	1.9421105998069866E-7	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8516712916567873	WITHOUT_CLASSIFICATION	0.1483287083432127	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9996896089158431	WITHOUT_CLASSIFICATION	3.103910841568428E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999787760547113	WITHOUT_CLASSIFICATION	2.1223945288702237E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999968699469466	WITHOUT_CLASSIFICATION	3.1300530533984144E-5	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9951290859319886	IMPLEMENTATION	0.004870914068011361	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999793393962	WITHOUT_CLASSIFICATION	2.066060386024426E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999929115835103	WITHOUT_CLASSIFICATION	7.088416489703459E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999995496230503	WITHOUT_CLASSIFICATION	4.503769496940647E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999946965143418	WITHOUT_CLASSIFICATION	5.3034856582089765E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999924273445	WITHOUT_CLASSIFICATION	7.572655538495453E-9	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999878188675065	WITHOUT_CLASSIFICATION	1.2181132493544816E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999689549408	WITHOUT_CLASSIFICATION	3.104505920829087E-8	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999838651173413	WITHOUT_CLASSIFICATION	1.6134882658763765E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999878188675065	WITHOUT_CLASSIFICATION	1.2181132493544816E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999924273445	WITHOUT_CLASSIFICATION	7.572655538495453E-9	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999689549408	WITHOUT_CLASSIFICATION	3.104505920829087E-8	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999966905769118	WITHOUT_CLASSIFICATION	3.3094230883384184E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998472610434	WITHOUT_CLASSIFICATION	1.5273895669937327E-7	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999948681327215	WITHOUT_CLASSIFICATION	5.131867278377121E-6	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999966511213011	WITHOUT_CLASSIFICATION	3.348878698884498E-6	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999998621982	WITHOUT_CLASSIFICATION	1.3780184686512344E-10	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7794330398819528	WITHOUT_CLASSIFICATION	0.22056696011804713	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999965620106583	WITHOUT_CLASSIFICATION	3.437989341567636E-6	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999596562129093	WITHOUT_CLASSIFICATION	4.034378709080239E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999996925984919	WITHOUT_CLASSIFICATION	3.074015080969692E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999972177911997	WITHOUT_CLASSIFICATION	2.782208800435647E-6	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9999972447628811	WITHOUT_CLASSIFICATION	2.7552371189934715E-6	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999994349217273	WITHOUT_CLASSIFICATION	5.6507827267525E-7	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997563528348115	WITHOUT_CLASSIFICATION	2.4364716518863143E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999966511213011	WITHOUT_CLASSIFICATION	3.348878698884498E-6	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998773123981376	WITHOUT_CLASSIFICATION	1.2268760186244225E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999534115992	WITHOUT_CLASSIFICATION	4.658840072109563E-8	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999975537563	WITHOUT_CLASSIFICATION	2.44624356832722E-9	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997685426496	WITHOUT_CLASSIFICATION	2.3145735047559286E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999945604608423	WITHOUT_CLASSIFICATION	5.4395391576483205E-6	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999999930224153	WITHOUT_CLASSIFICATION	6.97758469903488E-8	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9939227528411839	WITHOUT_CLASSIFICATION	0.006077247158816015	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999915173502	WITHOUT_CLASSIFICATION	8.482649700969783E-9	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999966911131416	WITHOUT_CLASSIFICATION	3.3088868584893133E-6	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999758939329317	WITHOUT_CLASSIFICATION	2.410606706830274E-5	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999896934004	WITHOUT_CLASSIFICATION	1.0306599563867152E-8	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999896934004	WITHOUT_CLASSIFICATION	1.0306599563867152E-8	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999987437447	WITHOUT_CLASSIFICATION	1.2562552748382507E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999987437447	WITHOUT_CLASSIFICATION	1.2562552748382507E-9	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9936216423218098	WITHOUT_CLASSIFICATION	0.006378357678190123	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999975537563	WITHOUT_CLASSIFICATION	2.44624356832722E-9	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999914213178582	WITHOUT_CLASSIFICATION	8.57868214176876E-6	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999903622150188	WITHOUT_CLASSIFICATION	9.637784981190285E-6	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999061530545	WITHOUT_CLASSIFICATION	9.384694563541381E-8	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999061530545	WITHOUT_CLASSIFICATION	9.384694563541381E-8	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999993997237178	WITHOUT_CLASSIFICATION	6.002762823571046E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999997993036303	WITHOUT_CLASSIFICATION	2.0069636970100466E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999612053815	WITHOUT_CLASSIFICATION	3.8794618580290257E-8	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999934898412554	WITHOUT_CLASSIFICATION	6.510158744732628E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997190973729951	WITHOUT_CLASSIFICATION	2.809026270048816E-4	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999950487983897	WITHOUT_CLASSIFICATION	4.951201610231739E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999995499965512	WITHOUT_CLASSIFICATION	4.500034489572128E-7	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999249901680773	WITHOUT_CLASSIFICATION	7.500983192266911E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.999972932436948	WITHOUT_CLASSIFICATION	2.70675630520079E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999816371998	WITHOUT_CLASSIFICATION	1.8362800136842156E-8	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.999999362726811	WITHOUT_CLASSIFICATION	6.372731889485935E-7	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.999904691561346	WITHOUT_CLASSIFICATION	9.53084386539869E-5	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999999959597612	WITHOUT_CLASSIFICATION	4.040238795720755E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999995515463004	WITHOUT_CLASSIFICATION	4.484536995933635E-7	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9998857941744086	WITHOUT_CLASSIFICATION	1.142058255914482E-4	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999780060905745	WITHOUT_CLASSIFICATION	2.199390942552311E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848210379244	WITHOUT_CLASSIFICATION	1.5178962075488079E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999900335501752	WITHOUT_CLASSIFICATION	9.966449824748489E-6	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9974144351317075	WITHOUT_CLASSIFICATION	0.002585564868292506	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999974168939	WITHOUT_CLASSIFICATION	2.583106048442512E-9	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9993376797129807	WITHOUT_CLASSIFICATION	6.623202870193437E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.999999657588395	WITHOUT_CLASSIFICATION	3.424116049514462E-7	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999873608290447	WITHOUT_CLASSIFICATION	1.2639170955177144E-5	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999989669503054	WITHOUT_CLASSIFICATION	1.0330496945378428E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999462429723075	WITHOUT_CLASSIFICATION	5.375702769244302E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999985300774348	WITHOUT_CLASSIFICATION	1.4699225651960764E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999657401724	WITHOUT_CLASSIFICATION	3.4259827610290645E-8	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.99999938583065	WITHOUT_CLASSIFICATION	6.141693501428092E-7	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999995061357402	WITHOUT_CLASSIFICATION	4.938642599226446E-7	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999531791841929	WITHOUT_CLASSIFICATION	4.68208158070629E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999934917691735	WITHOUT_CLASSIFICATION	6.508230826492692E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999948420792601	WITHOUT_CLASSIFICATION	5.15792073982576E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999948420792601	WITHOUT_CLASSIFICATION	5.15792073982576E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999981616389433	WITHOUT_CLASSIFICATION	1.8383610566979067E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999983137145741	WITHOUT_CLASSIFICATION	1.6862854258417297E-6	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999999926213017	WITHOUT_CLASSIFICATION	7.37869829222355E-8	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.999999926213017	WITHOUT_CLASSIFICATION	7.37869829222355E-8	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999811960507455	WITHOUT_CLASSIFICATION	1.8803949254425667E-5	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999942219524637	WITHOUT_CLASSIFICATION	5.77804753626403E-6	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9999914894279129	WITHOUT_CLASSIFICATION	8.510572087043865E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999813251502665	WITHOUT_CLASSIFICATION	1.8674849733503194E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999988961476929	WITHOUT_CLASSIFICATION	1.1038523070302736E-6	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999863190981	WITHOUT_CLASSIFICATION	1.3680901838662111E-8	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9996186775563117	WITHOUT_CLASSIFICATION	3.813224436883164E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999884256401341	WITHOUT_CLASSIFICATION	1.1574359865831019E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997558967446	WITHOUT_CLASSIFICATION	2.4410325544345385E-7	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997558967446	WITHOUT_CLASSIFICATION	2.4410325544345385E-7	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999799618310894	WITHOUT_CLASSIFICATION	2.0038168910621957E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999995793986665	WITHOUT_CLASSIFICATION	4.2060133358129607E-7	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999995793986665	WITHOUT_CLASSIFICATION	4.2060133358129607E-7	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999036524431	WITHOUT_CLASSIFICATION	9.634755700038731E-8	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999970696308	WITHOUT_CLASSIFICATION	2.9303690200866603E-9	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9978107394593745	WITHOUT_CLASSIFICATION	0.0021892605406254534	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999918866470056	WITHOUT_CLASSIFICATION	8.113352994550125E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999851624735616	WITHOUT_CLASSIFICATION	1.4837526438318994E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999982031956	WITHOUT_CLASSIFICATION	1.7968044073120055E-9	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999746260796573	WITHOUT_CLASSIFICATION	2.5373920342730048E-5	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997236592809036	WITHOUT_CLASSIFICATION	2.76340719096371E-4	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999999625409241	WITHOUT_CLASSIFICATION	3.7459075891880175E-7	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999764329361879	WITHOUT_CLASSIFICATION	2.356706381211274E-5	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.99999894469354	WITHOUT_CLASSIFICATION	1.055306459996282E-6	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.999962777331327	WITHOUT_CLASSIFICATION	3.7222668673042206E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995390758826	WITHOUT_CLASSIFICATION	4.6092411739088825E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995390758826	WITHOUT_CLASSIFICATION	4.6092411739088825E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995390758826	WITHOUT_CLASSIFICATION	4.6092411739088825E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999995390758826	WITHOUT_CLASSIFICATION	4.6092411739088825E-6	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999933349195991	WITHOUT_CLASSIFICATION	6.665080400886937E-6	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.99994507277507	WITHOUT_CLASSIFICATION	5.4927224929973957E-5	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999976365964854	WITHOUT_CLASSIFICATION	2.363403514638812E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999909193402183	WITHOUT_CLASSIFICATION	9.080659781725193E-6	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999834590000662	WITHOUT_CLASSIFICATION	1.654099993385809E-5	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999458593051432	WITHOUT_CLASSIFICATION	5.414069485678645E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996609021969783	WITHOUT_CLASSIFICATION	3.390978030216401E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998206779224162	WITHOUT_CLASSIFICATION	1.793220775836647E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999816761651579	WITHOUT_CLASSIFICATION	1.832383484214416E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999987332071797	WITHOUT_CLASSIFICATION	1.266792820253999E-6	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999938138423173	WITHOUT_CLASSIFICATION	6.186157682680078E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976375540727	WITHOUT_CLASSIFICATION	2.362445927455522E-6	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999577301915	WITHOUT_CLASSIFICATION	4.2269808619061844E-8	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999992510649713	WITHOUT_CLASSIFICATION	7.48935028605567E-7	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999648270576715	WITHOUT_CLASSIFICATION	3.517294232840575E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976375540727	WITHOUT_CLASSIFICATION	2.362445927455522E-6	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999468290966681	WITHOUT_CLASSIFICATION	5.317090333182705E-5	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999964741572904	WITHOUT_CLASSIFICATION	3.5258427095606863E-6	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999996324690399	WITHOUT_CLASSIFICATION	3.6753096011639074E-7	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999947547664	WITHOUT_CLASSIFICATION	5.245233580367066E-9	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999988436056	WITHOUT_CLASSIFICATION	1.1563943588729717E-9	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999999568842792	WITHOUT_CLASSIFICATION	4.311572081395539E-7	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999214324276	WITHOUT_CLASSIFICATION	7.856757247935418E-8	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999852038573427	WITHOUT_CLASSIFICATION	1.4796142657256913E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991878649632	WITHOUT_CLASSIFICATION	8.12135036713148E-7	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997390805293	WITHOUT_CLASSIFICATION	2.6091947067501466E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999960393243	WITHOUT_CLASSIFICATION	3.960675628720739E-9	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998723617434	WITHOUT_CLASSIFICATION	1.2763825663508653E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999956140220428	WITHOUT_CLASSIFICATION	4.3859779571999485E-6	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999098729630985	WITHOUT_CLASSIFICATION	9.012703690150946E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999976582544868	WITHOUT_CLASSIFICATION	2.3417455132014822E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999990530056664	WITHOUT_CLASSIFICATION	9.469943336856181E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999904406407	WITHOUT_CLASSIFICATION	9.559359257260718E-9	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995707424036	WITHOUT_CLASSIFICATION	4.2925759640680005E-7	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999951320803877	WITHOUT_CLASSIFICATION	4.867919612340947E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999995707424036	WITHOUT_CLASSIFICATION	4.2925759640680005E-7	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997553402298	WITHOUT_CLASSIFICATION	2.446597702442809E-7	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999882571371	WITHOUT_CLASSIFICATION	1.1742862892422017E-8	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999771958136997	WITHOUT_CLASSIFICATION	2.2804186300296547E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999913051579483	WITHOUT_CLASSIFICATION	8.69484205168888E-6	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.99999909445378	WITHOUT_CLASSIFICATION	9.055462199551588E-7	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999984456849688	WITHOUT_CLASSIFICATION	1.5543150312141802E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999138445927	WITHOUT_CLASSIFICATION	8.615540719165191E-8	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999904406407	WITHOUT_CLASSIFICATION	9.559359257260718E-9	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999951320803877	WITHOUT_CLASSIFICATION	4.867919612340947E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999997553402298	WITHOUT_CLASSIFICATION	2.446597702442809E-7	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996014471084	WITHOUT_CLASSIFICATION	3.9855289157001123E-7	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999893741506559	WITHOUT_CLASSIFICATION	1.0625849343994942E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9999017026039672	WITHOUT_CLASSIFICATION	9.829739603290113E-5	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999514409911	WITHOUT_CLASSIFICATION	4.8559008846381E-8	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9999454158636666	WITHOUT_CLASSIFICATION	5.458413633345172E-5	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999520099367959	WITHOUT_CLASSIFICATION	4.799006320414573E-5	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999987197974556	WITHOUT_CLASSIFICATION	1.2802025444502573E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848210379244	WITHOUT_CLASSIFICATION	1.5178962075488079E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999882571371	WITHOUT_CLASSIFICATION	1.1742862892422017E-8	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999750154168	WITHOUT_CLASSIFICATION	2.4984583214366087E-8	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999998616827565	WITHOUT_CLASSIFICATION	1.3831724355715298E-7	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999750042623299	WITHOUT_CLASSIFICATION	2.4995737670088273E-5	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999843182057	WITHOUT_CLASSIFICATION	1.5681794298905078E-8	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848210379244	WITHOUT_CLASSIFICATION	1.5178962075488079E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999969848751885	WITHOUT_CLASSIFICATION	3.015124811533423E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848210379244	WITHOUT_CLASSIFICATION	1.5178962075488079E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999979134097063	WITHOUT_CLASSIFICATION	2.086590293588075E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999943408683507	WITHOUT_CLASSIFICATION	5.659131649310881E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999633152483791	WITHOUT_CLASSIFICATION	3.668475162095845E-5	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999909122746034	WITHOUT_CLASSIFICATION	9.087725396598082E-5	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999315311632	WITHOUT_CLASSIFICATION	6.846883690811768E-8	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999963111643654	WITHOUT_CLASSIFICATION	3.6888356344980677E-6	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999458883151	WITHOUT_CLASSIFICATION	5.4111684994584777E-8	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999970717297988	WITHOUT_CLASSIFICATION	2.9282702012728744E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995812564193	WITHOUT_CLASSIFICATION	4.1874358068720923E-7	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999989383281006	WITHOUT_CLASSIFICATION	1.0616718993234778E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999824889426178	WITHOUT_CLASSIFICATION	1.751105738215599E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999613580619	WITHOUT_CLASSIFICATION	3.864193817239272E-8	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9978107394593745	WITHOUT_CLASSIFICATION	0.0021892605406254534	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999994321775941	WITHOUT_CLASSIFICATION	5.67822405834212E-7	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999899624886281	WITHOUT_CLASSIFICATION	1.0037511371895355E-4	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999999182918206	WITHOUT_CLASSIFICATION	8.170817953821276E-8	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999295195933	WITHOUT_CLASSIFICATION	7.048040672688153E-8	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999986933672	WITHOUT_CLASSIFICATION	1.30663284723007E-9	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999954119397372	WITHOUT_CLASSIFICATION	4.588060262809421E-6	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999877336221117	WITHOUT_CLASSIFICATION	1.2266377888241062E-5	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999993521022429	WITHOUT_CLASSIFICATION	6.478977571501087E-7	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999794963521	WITHOUT_CLASSIFICATION	2.0503647785983715E-8	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999987969046	WITHOUT_CLASSIFICATION	1.2030953880671046E-9	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9980663000410177	WITHOUT_CLASSIFICATION	0.001933699958982292	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999923382301572	WITHOUT_CLASSIFICATION	7.661769842765108E-6	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999967144519589	WITHOUT_CLASSIFICATION	3.285548041109755E-6	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.999999456007657	WITHOUT_CLASSIFICATION	5.439923429725934E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999875170998118	WITHOUT_CLASSIFICATION	1.2482900188192037E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999462353410067	WITHOUT_CLASSIFICATION	5.376465899326019E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999984623095861	WITHOUT_CLASSIFICATION	1.5376904138117394E-6	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9992701357121916	WITHOUT_CLASSIFICATION	7.298642878085087E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999833581455806	WITHOUT_CLASSIFICATION	1.664185441944133E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999961025454548	WITHOUT_CLASSIFICATION	3.897454545163647E-6	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999995305135144	WITHOUT_CLASSIFICATION	4.6948648554457094E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9949015051368858	WITHOUT_CLASSIFICATION	0.005098494863114206	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999985269448601	WITHOUT_CLASSIFICATION	1.4730551399235087E-6	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999997528987314	WITHOUT_CLASSIFICATION	2.471012685389745E-7	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9999929891858204	WITHOUT_CLASSIFICATION	7.010814179624632E-6	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998668964152072	WITHOUT_CLASSIFICATION	1.331035847927914E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999999914300786	WITHOUT_CLASSIFICATION	8.569921447743872E-9	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984760838345471	WITHOUT_CLASSIFICATION	0.001523916165452827	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999220819131521	WITHOUT_CLASSIFICATION	7.79180868478822E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999971189084594	WITHOUT_CLASSIFICATION	2.881091540610435E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999408212750439	WITHOUT_CLASSIFICATION	5.917872495617954E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999408212750439	WITHOUT_CLASSIFICATION	5.917872495617954E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999588717643721	WITHOUT_CLASSIFICATION	4.1128235627901607E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999970717297988	WITHOUT_CLASSIFICATION	2.9282702012728744E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999430859654847	WITHOUT_CLASSIFICATION	5.691403451528529E-4	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999778064105	WITHOUT_CLASSIFICATION	2.21935894695181E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999997485273235	WITHOUT_CLASSIFICATION	2.51472676374153E-7	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999849544681195	WITHOUT_CLASSIFICATION	1.50455318804714E-5	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999840881590341	WITHOUT_CLASSIFICATION	1.591184096594806E-5	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999723998483482	WITHOUT_CLASSIFICATION	2.7600151651807994E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999998990989	WITHOUT_CLASSIFICATION	1.009010403329799E-10	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999991091293	WITHOUT_CLASSIFICATION	8.90870760509489E-10	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999753402545118	WITHOUT_CLASSIFICATION	2.4659745488219908E-5	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999998540247858	WITHOUT_CLASSIFICATION	1.4597521422377508E-7	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999997758813598	WITHOUT_CLASSIFICATION	2.2411864016550652E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999981160529	WITHOUT_CLASSIFICATION	1.8839470799354254E-9	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999967703497	WITHOUT_CLASSIFICATION	3.2296503546232068E-9	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999376903987921	WITHOUT_CLASSIFICATION	6.230960120785762E-5	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999325542392	WITHOUT_CLASSIFICATION	6.744576074275955E-8	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999934563025	WITHOUT_CLASSIFICATION	6.543697519322654E-9	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999919136898	WITHOUT_CLASSIFICATION	8.086310203433281E-9	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997544972816276	WITHOUT_CLASSIFICATION	2.455027183725041E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999983446570102	WITHOUT_CLASSIFICATION	1.655342989747068E-6	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9992219592710895	WITHOUT_CLASSIFICATION	7.780407289105081E-4	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999720529706078	WITHOUT_CLASSIFICATION	2.7947029392196923E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998854903692	WITHOUT_CLASSIFICATION	1.1450963082729937E-7	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9984760838345471	WITHOUT_CLASSIFICATION	0.001523916165452827	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999995660706676	WITHOUT_CLASSIFICATION	4.339293323837683E-7	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999712090218	WITHOUT_CLASSIFICATION	2.8790978101383206E-8	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999958934249	WITHOUT_CLASSIFICATION	4.106575100564411E-9	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999999213104211	WITHOUT_CLASSIFICATION	7.868957895035817E-8	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9969097782131852	WITHOUT_CLASSIFICATION	0.003090221786814875	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9997878784733045	WITHOUT_CLASSIFICATION	2.1212152669556562E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999998380296526	WITHOUT_CLASSIFICATION	1.619703473413736E-7	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999975768856089	WITHOUT_CLASSIFICATION	2.423114391115318E-6	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999926268652508	WITHOUT_CLASSIFICATION	7.373134749147795E-6	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999999999137824	WITHOUT_CLASSIFICATION	8.621761174036145E-10	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999997295927543	WITHOUT_CLASSIFICATION	2.7040724569735404E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999957462979296	WITHOUT_CLASSIFICATION	4.253702070254708E-6	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999988547025765	WITHOUT_CLASSIFICATION	1.1452974233999386E-6	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999999934319346	WITHOUT_CLASSIFICATION	6.568065399279897E-8	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999999995690744	WITHOUT_CLASSIFICATION	4.3092559764611525E-9	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998377225344613	WITHOUT_CLASSIFICATION	1.6227746553871763E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998377225344613	WITHOUT_CLASSIFICATION	1.6227746553871763E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999874327193293	WITHOUT_CLASSIFICATION	1.2567280670614912E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998631801719703	WITHOUT_CLASSIFICATION	1.3681982802974876E-4	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99999998394392	WITHOUT_CLASSIFICATION	1.605607996800506E-8	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.99999998394392	WITHOUT_CLASSIFICATION	1.605607996800506E-8	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999999443097749	WITHOUT_CLASSIFICATION	5.569022521697916E-8	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999979824546128	WITHOUT_CLASSIFICATION	2.017545387125033E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9992770365658814	WITHOUT_CLASSIFICATION	7.229634341185454E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999621559976	WITHOUT_CLASSIFICATION	3.7844002348218936E-8	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999982768869888	WITHOUT_CLASSIFICATION	1.7231130111441647E-6	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999924930401126	WITHOUT_CLASSIFICATION	7.506959887434868E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999990525027	WITHOUT_CLASSIFICATION	9.474972658574521E-10	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999990525027	WITHOUT_CLASSIFICATION	9.474972658574521E-10	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999875872498406	WITHOUT_CLASSIFICATION	1.2412750159416031E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999988702359481	WITHOUT_CLASSIFICATION	1.1297640519713826E-6	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999998832882523	WITHOUT_CLASSIFICATION	1.1671174767112186E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.999999568153959	WITHOUT_CLASSIFICATION	4.3184604107406073E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.999999568153959	WITHOUT_CLASSIFICATION	4.3184604107406073E-7	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999999858361871	WITHOUT_CLASSIFICATION	1.4163813052784481E-8	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999956289618509	WITHOUT_CLASSIFICATION	4.371038149017298E-6	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999997976895437	WITHOUT_CLASSIFICATION	2.023104561994601E-7	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999991327947638	WITHOUT_CLASSIFICATION	8.672052360667449E-7	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999719091129	WITHOUT_CLASSIFICATION	2.8090886990019418E-8	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999358187245	WITHOUT_CLASSIFICATION	6.41812755017291E-8	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999998635558496	WITHOUT_CLASSIFICATION	1.364441503405834E-7	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999991042790852	WITHOUT_CLASSIFICATION	8.957209148156776E-7	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999899507185	WITHOUT_CLASSIFICATION	1.0049281455256753E-8	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999748171322	WITHOUT_CLASSIFICATION	2.5182867763629694E-8	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999967273764	WITHOUT_CLASSIFICATION	3.272623661736179E-9	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9991216587163938	WITHOUT_CLASSIFICATION	8.78341283606297E-4	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9987311383295727	WITHOUT_CLASSIFICATION	0.0012688616704273114	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999565688102371	WITHOUT_CLASSIFICATION	4.34311897629883E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999892413631638	WITHOUT_CLASSIFICATION	1.0758636836283053E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999999842839454	WITHOUT_CLASSIFICATION	1.5716054603631554E-7	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998878081321345	WITHOUT_CLASSIFICATION	1.1219186786556692E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999974966250551	WITHOUT_CLASSIFICATION	2.503374944826074E-6	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999964469319025	WITHOUT_CLASSIFICATION	3.5530680973764673E-6	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999996433662225	WITHOUT_CLASSIFICATION	3.5663377750474194E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999988935739138	WITHOUT_CLASSIFICATION	1.106426086215509E-6	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999831544985974	WITHOUT_CLASSIFICATION	1.6845501402645175E-5	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9994872496627021	WITHOUT_CLASSIFICATION	5.127503372979315E-4	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999997623314483	WITHOUT_CLASSIFICATION	2.3766855185641804E-7	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999982791946621	WITHOUT_CLASSIFICATION	1.7208053378624916E-6	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999985775833	WITHOUT_CLASSIFICATION	1.4224167712181258E-9	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.999999865483565	WITHOUT_CLASSIFICATION	1.3451643490924302E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999734127769377	WITHOUT_CLASSIFICATION	2.658722306218888E-5	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999994905292481	WITHOUT_CLASSIFICATION	5.094707520099437E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986619009391	WITHOUT_CLASSIFICATION	1.3380990608680247E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999318827350685	WITHOUT_CLASSIFICATION	6.811726493151521E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999289051228	WITHOUT_CLASSIFICATION	7.109487723810801E-8	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999970399082523	WITHOUT_CLASSIFICATION	2.9600917476898178E-6	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999986758733315	WITHOUT_CLASSIFICATION	1.3241266685055096E-6	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999988150866274	WITHOUT_CLASSIFICATION	1.184913372559781E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999932284156018	WITHOUT_CLASSIFICATION	6.77158439820571E-6	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999979619787525	WITHOUT_CLASSIFICATION	2.0380212475987777E-6	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999960459952	WITHOUT_CLASSIFICATION	3.954004779684886E-9	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999952911555601	WITHOUT_CLASSIFICATION	4.708844439908398E-6	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999951059044	WITHOUT_CLASSIFICATION	4.8940956109103E-9	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999742679253	WITHOUT_CLASSIFICATION	2.573207466812603E-8	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999998367653268	WITHOUT_CLASSIFICATION	1.6323467325925444E-7	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999982367252666	WITHOUT_CLASSIFICATION	1.7632747333296557E-6	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999979285890472	WITHOUT_CLASSIFICATION	2.0714109527760665E-6	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999974343200533	WITHOUT_CLASSIFICATION	2.565679946826462E-6	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999993183475737	WITHOUT_CLASSIFICATION	6.816524263608966E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999995113430037	WITHOUT_CLASSIFICATION	4.886569963275163E-7	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999969803634039	WITHOUT_CLASSIFICATION	3.0196365960623696E-6	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999954095909446	WITHOUT_CLASSIFICATION	4.590409055413776E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999994931248807	WITHOUT_CLASSIFICATION	5.068751192692554E-7	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999825179032603	WITHOUT_CLASSIFICATION	1.7482096739681288E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9994705385621449	WITHOUT_CLASSIFICATION	5.294614378552037E-4	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9886723669634115	WITHOUT_CLASSIFICATION	0.011327633036588415	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999988456416709	WITHOUT_CLASSIFICATION	1.154358329190291E-6	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.999999510116111	WITHOUT_CLASSIFICATION	4.898838889934879E-7	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9993937768839783	WITHOUT_CLASSIFICATION	6.062231160216252E-4	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999994412575057	WITHOUT_CLASSIFICATION	5.587424941870966E-7	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.99999906232671	WITHOUT_CLASSIFICATION	9.376732900594154E-7	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999929145139221	WITHOUT_CLASSIFICATION	7.085486077894897E-6	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999995852103757	WITHOUT_CLASSIFICATION	4.147896242926978E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999837514872593	WITHOUT_CLASSIFICATION	1.6248512740746706E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999837514872593	WITHOUT_CLASSIFICATION	1.6248512740746706E-5	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999835669	WITHOUT_CLASSIFICATION	1.6433084126728996E-11	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9995131506845067	WITHOUT_CLASSIFICATION	4.8684931549324137E-4	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999942750242	WITHOUT_CLASSIFICATION	5.724975817798529E-9	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999144365853	WITHOUT_CLASSIFICATION	8.556341470642876E-8	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998910466393	WITHOUT_CLASSIFICATION	1.0895336070513116E-7	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999947892558109	WITHOUT_CLASSIFICATION	5.210744189115338E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999826172175	WITHOUT_CLASSIFICATION	1.7382782581583708E-8	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999918139242552	WITHOUT_CLASSIFICATION	8.186075744774084E-6	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999996595284985	WITHOUT_CLASSIFICATION	3.404715016022415E-7	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999551919064	WITHOUT_CLASSIFICATION	4.48080936289973E-8	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999998588398676	WITHOUT_CLASSIFICATION	1.4116013240699304E-7	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999988011620571	WITHOUT_CLASSIFICATION	1.1988379428642386E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999832217079	WITHOUT_CLASSIFICATION	1.6778292085889323E-8	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999609278938718	WITHOUT_CLASSIFICATION	3.90721061281678E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996528304583	WITHOUT_CLASSIFICATION	3.4716954163104037E-7	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996528304583	WITHOUT_CLASSIFICATION	3.4716954163104037E-7	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999998337267	WITHOUT_CLASSIFICATION	1.662734588222983E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9965966420742783	WITHOUT_CLASSIFICATION	0.0034033579257216487	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999560777829	WITHOUT_CLASSIFICATION	4.392221715261058E-8	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998201303848	WITHOUT_CLASSIFICATION	1.7986961524747625E-7	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999990529358566	WITHOUT_CLASSIFICATION	9.470641433935087E-7	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808296994405	WITHOUT_CLASSIFICATION	1.9170300559554212E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999999293460044	WITHOUT_CLASSIFICATION	7.065399559688844E-7	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999916660285502	WITHOUT_CLASSIFICATION	8.33397144982406E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9954070670168419	WITHOUT_CLASSIFICATION	0.004592932983158112	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999996339021073	WITHOUT_CLASSIFICATION	3.6609789267165097E-7	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999106169839035	WITHOUT_CLASSIFICATION	8.938301609653393E-5	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999997363436824	WITHOUT_CLASSIFICATION	2.636563176383415E-7	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999433585204	WITHOUT_CLASSIFICATION	5.6641479558320286E-8	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999998965993	WITHOUT_CLASSIFICATION	1.0340073432912826E-10	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999194684194	WITHOUT_CLASSIFICATION	8.053158061314308E-8	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997723399227	WITHOUT_CLASSIFICATION	2.2766007737665118E-7	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999997967936468	WITHOUT_CLASSIFICATION	2.0320635316758267E-7	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999437617245	WITHOUT_CLASSIFICATION	5.6238275581589486E-8	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999996525076514	WITHOUT_CLASSIFICATION	3.4749234853133693E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.99999999995759	WITHOUT_CLASSIFICATION	4.240992990867859E-11	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999992304979	WITHOUT_CLASSIFICATION	7.695021210850483E-10	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999999613502	WITHOUT_CLASSIFICATION	3.864966263463078E-11	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.999999989816741	WITHOUT_CLASSIFICATION	1.0183258975990614E-8	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999906688967	WITHOUT_CLASSIFICATION	9.331103302239338E-8	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998964013206	WITHOUT_CLASSIFICATION	1.0359867947354704E-7	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999994255880514	WITHOUT_CLASSIFICATION	5.744119486209468E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999991460108443	WITHOUT_CLASSIFICATION	8.539891557024065E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999990635462825	WITHOUT_CLASSIFICATION	9.36453717500388E-7	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999997857689414	WITHOUT_CLASSIFICATION	2.1423105860686926E-7	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999581124890002	WITHOUT_CLASSIFICATION	4.1887510999803025E-4	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999953450205079	WITHOUT_CLASSIFICATION	4.654979492053533E-6	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999119753572	WITHOUT_CLASSIFICATION	8.802464282616253E-8	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999989034840744	WITHOUT_CLASSIFICATION	1.0965159256616086E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999985284428333	WITHOUT_CLASSIFICATION	1.4715571665849623E-6	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999487248714	WITHOUT_CLASSIFICATION	5.127512854212491E-8	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999599420634396	WITHOUT_CLASSIFICATION	4.0057936560390133E-5	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9991962273850384	WITHOUT_CLASSIFICATION	8.037726149616125E-4	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998670400913	WITHOUT_CLASSIFICATION	1.3295990882824438E-7	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999012918147	WITHOUT_CLASSIFICATION	9.870818537570898E-8	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999821858958	WITHOUT_CLASSIFICATION	1.781410427439552E-8	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9997715521544304	WITHOUT_CLASSIFICATION	2.2844784556957305E-4	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999993596173158	WITHOUT_CLASSIFICATION	6.403826843183982E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996762394763369	WITHOUT_CLASSIFICATION	3.237605236630134E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996762394763369	WITHOUT_CLASSIFICATION	3.237605236630134E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999997388353248	WITHOUT_CLASSIFICATION	2.611646753024291E-7	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999969719457	WITHOUT_CLASSIFICATION	3.0280542213954345E-9	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9988854474650201	WITHOUT_CLASSIFICATION	0.0011145525349799356	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999323888721898	WITHOUT_CLASSIFICATION	6.76111278101858E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999999961390395	WITHOUT_CLASSIFICATION	3.860960492367919E-8	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999356651887	WITHOUT_CLASSIFICATION	6.433481120508543E-8	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999202477573214	WITHOUT_CLASSIFICATION	7.975224267863449E-5	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999668479878	WITHOUT_CLASSIFICATION	3.315201228079063E-8	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999993564120497	WITHOUT_CLASSIFICATION	6.43587950247215E-7	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990526745463	WITHOUT_CLASSIFICATION	9.473254537665751E-7	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980560139438	WITHOUT_CLASSIFICATION	1.9439860562381706E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999996368684596	WITHOUT_CLASSIFICATION	3.6313154047626733E-7	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999996602407338	WITHOUT_CLASSIFICATION	3.3975926611329527E-7	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999992164191367	WITHOUT_CLASSIFICATION	7.835808632580895E-7	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999979506440644	WITHOUT_CLASSIFICATION	2.049355935624767E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999604651105465	WITHOUT_CLASSIFICATION	3.953488945340527E-5	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999998857665644	WITHOUT_CLASSIFICATION	1.1423343553449953E-7	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999996882996	WITHOUT_CLASSIFICATION	3.117004196243065E-10	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999965263927	WITHOUT_CLASSIFICATION	3.473607403277006E-9	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9984476761451354	WITHOUT_CLASSIFICATION	0.0015523238548645632	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999983091710933	WITHOUT_CLASSIFICATION	1.6908289067172048E-6	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999876058201	WITHOUT_CLASSIFICATION	1.2394179969582014E-8	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999968476359573	WITHOUT_CLASSIFICATION	3.1523640427119137E-6	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999965152220784	WITHOUT_CLASSIFICATION	3.484777921558708E-6	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999907790131	WITHOUT_CLASSIFICATION	9.220986801808355E-9	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998627821335321	WITHOUT_CLASSIFICATION	1.3721786646795015E-4	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998669290136336	WITHOUT_CLASSIFICATION	1.3307098636645143E-4	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999903312952	WITHOUT_CLASSIFICATION	9.668704865231838E-9	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999967231174346	WITHOUT_CLASSIFICATION	3.27688256543363E-6	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999980835206421	WITHOUT_CLASSIFICATION	1.916479357909749E-6	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999457626467413	WITHOUT_CLASSIFICATION	5.4237353258666144E-5	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999966465104385	WITHOUT_CLASSIFICATION	3.3534895614893156E-6	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999993041086136	WITHOUT_CLASSIFICATION	6.9589138639473915E-6	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.999999995854173	WITHOUT_CLASSIFICATION	4.145827007909157E-9	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999827940357	WITHOUT_CLASSIFICATION	1.7205964319765877E-8	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999994780026	WITHOUT_CLASSIFICATION	5.219973402609814E-10	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999923440121635	WITHOUT_CLASSIFICATION	7.655987836453892E-6	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999968871615	WITHOUT_CLASSIFICATION	3.1128384708951155E-9	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999954546529204	WITHOUT_CLASSIFICATION	4.545347079623678E-6	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999965125987	WITHOUT_CLASSIFICATION	3.48740123380715E-9	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999996214139721	WITHOUT_CLASSIFICATION	3.7858602780568926E-7	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999887018641	WITHOUT_CLASSIFICATION	1.129813599936465E-8	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999936022110184	WITHOUT_CLASSIFICATION	6.397788981687348E-6	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999969779746	WITHOUT_CLASSIFICATION	3.022025365119515E-9	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999864967943	WITHOUT_CLASSIFICATION	1.350320559102712E-8	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999997780074	WITHOUT_CLASSIFICATION	2.2199267554332226E-10	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999835605862	WITHOUT_CLASSIFICATION	1.6439413801905573E-7	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999996911022161	WITHOUT_CLASSIFICATION	3.0889778388423143E-7	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996743499555	WITHOUT_CLASSIFICATION	3.256500445139912E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999832217079	WITHOUT_CLASSIFICATION	1.6778292085889323E-8	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999958308027	WITHOUT_CLASSIFICATION	4.16919736530096E-9	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999902275674	WITHOUT_CLASSIFICATION	9.772432561022754E-9	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999959867485959	WITHOUT_CLASSIFICATION	4.013251404138406E-6	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9998758284653907	WITHOUT_CLASSIFICATION	1.2417153460933717E-4	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999970519817	WITHOUT_CLASSIFICATION	2.94801837039679E-9	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999117227265667	WITHOUT_CLASSIFICATION	8.827727343328415E-5	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9665376580468871	WITHOUT_CLASSIFICATION	0.03346234195311304	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999956035826039	WITHOUT_CLASSIFICATION	4.396417396083868E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999977072621	WITHOUT_CLASSIFICATION	2.292737805033977E-9	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9991837650068736	WITHOUT_CLASSIFICATION	8.162349931264768E-4	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.999999023102698	WITHOUT_CLASSIFICATION	9.768973021080963E-7	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999749204836309	WITHOUT_CLASSIFICATION	2.507951636912245E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999962920466	WITHOUT_CLASSIFICATION	3.707953435490964E-9	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999515960069	WITHOUT_CLASSIFICATION	4.8403993206855884E-8	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999997454202461	WITHOUT_CLASSIFICATION	2.545797538805547E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960478083272	WITHOUT_CLASSIFICATION	3.952191672792561E-6	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996706437814642	WITHOUT_CLASSIFICATION	3.2935621853579644E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998718412625	WITHOUT_CLASSIFICATION	1.2815873757598227E-7	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999926794175305	WITHOUT_CLASSIFICATION	7.320582469602579E-6	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999999187001632	WITHOUT_CLASSIFICATION	8.129983670938936E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960478083272	WITHOUT_CLASSIFICATION	3.952191672792561E-6	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999918471380319	WITHOUT_CLASSIFICATION	8.152861968123952E-6	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999842497692	WITHOUT_CLASSIFICATION	1.5750230739272707E-8	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999677569533	WITHOUT_CLASSIFICATION	3.224304670405089E-7	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999996880388301	WITHOUT_CLASSIFICATION	3.119611698850886E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999987162714477	WITHOUT_CLASSIFICATION	1.2837285523625785E-6	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999985517809	WITHOUT_CLASSIFICATION	1.4482191338383286E-9	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999998339675	WITHOUT_CLASSIFICATION	1.6603256282480817E-10	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999260451624601	WITHOUT_CLASSIFICATION	7.395483753990193E-4	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999893783216	WITHOUT_CLASSIFICATION	1.0621678435641761E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9997587265071854	WITHOUT_CLASSIFICATION	2.4127349281462143E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997771406720725	WITHOUT_CLASSIFICATION	2.2285932792764373E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999952043745386	WITHOUT_CLASSIFICATION	4.795625461390791E-5	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999909894175478	WITHOUT_CLASSIFICATION	9.010582452279919E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9888865432208347	WITHOUT_CLASSIFICATION	0.011113456779165263	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999939358483482	WITHOUT_CLASSIFICATION	6.064151651818538E-6	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999999907007734	WITHOUT_CLASSIFICATION	9.299226644970614E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998854903692	WITHOUT_CLASSIFICATION	1.1450963082729937E-7	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999997117704387	WITHOUT_CLASSIFICATION	2.8822956138388436E-7	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999301140481	WITHOUT_CLASSIFICATION	6.988595192359496E-8	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9757993728983053	WITHOUT_CLASSIFICATION	0.024200627101694586	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999942219350951	WITHOUT_CLASSIFICATION	5.778064904886103E-6	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9965333366263247	WITHOUT_CLASSIFICATION	0.003466663373675325	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999789796099636	WITHOUT_CLASSIFICATION	2.102039003626736E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999945165570131	WITHOUT_CLASSIFICATION	5.483442986932328E-6	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999984937502	WITHOUT_CLASSIFICATION	1.5062497401624154E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.999999998460583	WITHOUT_CLASSIFICATION	1.5394170725684428E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999930633058	WITHOUT_CLASSIFICATION	6.936694259843823E-9	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999667339326226	WITHOUT_CLASSIFICATION	3.326606737735977E-5	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999981689771285	WITHOUT_CLASSIFICATION	1.8310228715890186E-6	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9963162944948902	WITHOUT_CLASSIFICATION	0.0036837055051097563	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.6258599802944244	IMPLEMENTATION	0.3741400197055757	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999999201832899	WITHOUT_CLASSIFICATION	7.981671015304032E-8	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997058665050217	WITHOUT_CLASSIFICATION	2.9413349497826115E-4	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999944817775515	WITHOUT_CLASSIFICATION	5.5182224484439334E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999998391991203	WITHOUT_CLASSIFICATION	1.6080087968778487E-7	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999995728627324	WITHOUT_CLASSIFICATION	4.271372675394525E-7	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999997521649	WITHOUT_CLASSIFICATION	2.478350097919222E-10	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999999999992377	WITHOUT_CLASSIFICATION	7.623020472921284E-12	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999989478798361	WITHOUT_CLASSIFICATION	1.0521201638321504E-6	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999989560312	WITHOUT_CLASSIFICATION	1.043968835899159E-9	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999477087137	WITHOUT_CLASSIFICATION	5.229128619036557E-8	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996294582158304	WITHOUT_CLASSIFICATION	3.705417841696664E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9996294582158304	WITHOUT_CLASSIFICATION	3.705417841696664E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999997777544334	WITHOUT_CLASSIFICATION	2.2224556674399131E-7	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999873148925	WITHOUT_CLASSIFICATION	1.2685107496236485E-7	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998522664328	WITHOUT_CLASSIFICATION	1.4773356719814275E-7	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999994157349	WITHOUT_CLASSIFICATION	5.842651280761218E-10	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999813251502665	WITHOUT_CLASSIFICATION	1.8674849733503194E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999813251502665	WITHOUT_CLASSIFICATION	1.8674849733503194E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999366133677535	WITHOUT_CLASSIFICATION	6.338663224642377E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999999999430704	WITHOUT_CLASSIFICATION	5.692960122974168E-10	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999999502365	WITHOUT_CLASSIFICATION	4.9763426458139654E-11	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999943783238	WITHOUT_CLASSIFICATION	5.621676215615308E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999990317284845	WITHOUT_CLASSIFICATION	9.68271515600726E-7	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999986814553473	WITHOUT_CLASSIFICATION	1.318544652695237E-6	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999996429723841	WITHOUT_CLASSIFICATION	3.570276159096889E-6	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999998981830279	WITHOUT_CLASSIFICATION	1.0181697210170828E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999962323551085	WITHOUT_CLASSIFICATION	3.7676448914689145E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999988438805807	WITHOUT_CLASSIFICATION	1.156119419304085E-6	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999990730912331	WITHOUT_CLASSIFICATION	9.269087668639541E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993413185956	WITHOUT_CLASSIFICATION	6.586814044165304E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993413185956	WITHOUT_CLASSIFICATION	6.586814044165304E-7	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999657115	WITHOUT_CLASSIFICATION	3.428839359493611E-11	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999869355366058	WITHOUT_CLASSIFICATION	1.306446339423425E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999997466403807	WITHOUT_CLASSIFICATION	2.533596193237511E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999198540718	WITHOUT_CLASSIFICATION	8.014592819586297E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999990410549763	WITHOUT_CLASSIFICATION	9.58945023674533E-7	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999011423513	WITHOUT_CLASSIFICATION	9.88576488316561E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994308100362977	WITHOUT_CLASSIFICATION	5.691899637021881E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999995446196456	WITHOUT_CLASSIFICATION	4.5538035439999285E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999999950710956	WITHOUT_CLASSIFICATION	4.9289043921587294E-8	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999606434079733	WITHOUT_CLASSIFICATION	3.9356592026694027E-5	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999777165258	WITHOUT_CLASSIFICATION	2.228347417119224E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9997587265071854	WITHOUT_CLASSIFICATION	2.4127349281462143E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997204397653	WITHOUT_CLASSIFICATION	2.7956023476148675E-7	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999921122677695	WITHOUT_CLASSIFICATION	7.887732230485388E-6	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999892722714984	WITHOUT_CLASSIFICATION	1.0727728501682999E-5	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999939196376314	WITHOUT_CLASSIFICATION	6.0803623685867915E-6	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999962107944597	WITHOUT_CLASSIFICATION	3.789205540302928E-6	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999917659661236	WITHOUT_CLASSIFICATION	8.234033876274003E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999698453449	WITHOUT_CLASSIFICATION	3.015465500944032E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999973503863026	WITHOUT_CLASSIFICATION	2.6496136975263217E-6	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999998369557516	WITHOUT_CLASSIFICATION	1.6304424850103835E-7	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9994956805681823	WITHOUT_CLASSIFICATION	5.043194318176473E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9994956805681823	WITHOUT_CLASSIFICATION	5.043194318176473E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976375540727	WITHOUT_CLASSIFICATION	2.362445927455522E-6	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999892540538702	WITHOUT_CLASSIFICATION	1.074594612983911E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999931847411677	WITHOUT_CLASSIFICATION	6.8152588322508416E-6	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999955447943982	WITHOUT_CLASSIFICATION	4.455205601718639E-6	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999917115976308	WITHOUT_CLASSIFICATION	8.288402369152348E-6	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999814904751921	WITHOUT_CLASSIFICATION	1.8509524807823347E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999976582544868	WITHOUT_CLASSIFICATION	2.3417455132014822E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999661011	WITHOUT_CLASSIFICATION	3.389882188130142E-11	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999996014471084	WITHOUT_CLASSIFICATION	3.9855289157001123E-7	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9991122697315925	WITHOUT_CLASSIFICATION	8.877302684075217E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848210379244	WITHOUT_CLASSIFICATION	1.5178962075488079E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9994840694624528	WITHOUT_CLASSIFICATION	5.159305375470743E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.99994405789674	WITHOUT_CLASSIFICATION	5.5942103260101866E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999958699258	WITHOUT_CLASSIFICATION	4.1300741811906094E-9	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999995964709	WITHOUT_CLASSIFICATION	4.035291013740484E-10	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999853096865133	WITHOUT_CLASSIFICATION	1.4690313486726385E-5	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999995871370906	WITHOUT_CLASSIFICATION	4.128629095052769E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987607077844	WITHOUT_CLASSIFICATION	1.2392922156370517E-6	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999132048608189	WITHOUT_CLASSIFICATION	8.679513918107034E-5	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999990761	WITHOUT_CLASSIFICATION	9.238791005973544E-13	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999637125	WITHOUT_CLASSIFICATION	3.628754895426856E-11	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999992093971	WITHOUT_CLASSIFICATION	7.906028404893439E-10	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999997976895437	WITHOUT_CLASSIFICATION	2.023104561994601E-7	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999998154	WITHOUT_CLASSIFICATION	1.8456004028184285E-13	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997815890299	WITHOUT_CLASSIFICATION	2.1841096999272164E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999997815890299	WITHOUT_CLASSIFICATION	2.1841096999272164E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989715321370725	WITHOUT_CLASSIFICATION	0.0010284678629275176	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9924261108294102	WITHOUT_CLASSIFICATION	0.007573889170589767	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999955275325139	WITHOUT_CLASSIFICATION	4.472467486099068E-6	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999997804423254	WITHOUT_CLASSIFICATION	2.1955767445611657E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997830015506	WITHOUT_CLASSIFICATION	2.1699844936270995E-7	IMPLEMENTATION
