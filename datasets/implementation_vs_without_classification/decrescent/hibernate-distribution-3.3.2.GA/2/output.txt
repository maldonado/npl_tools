// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9952339634689968	WITHOUT_CLASSIFICATION	0.0047660365310032244	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9952339634689968	WITHOUT_CLASSIFICATION	0.0047660365310032244	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9998568903488265	WITHOUT_CLASSIFICATION	1.4310965117342198E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9955428581722414	WITHOUT_CLASSIFICATION	0.004457141827758639	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9989024520057064	WITHOUT_CLASSIFICATION	0.001097547994293639	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.5432499276293848	IMPLEMENTATION	0.4567500723706151	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9892553003318721	WITHOUT_CLASSIFICATION	0.010744699668127829	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9331497740101239	WITHOUT_CLASSIFICATION	0.06685022598987597	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9999713810320877	WITHOUT_CLASSIFICATION	2.8618967912242986E-5	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9739712127657328	WITHOUT_CLASSIFICATION	0.02602878723426722	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9997127491846634	WITHOUT_CLASSIFICATION	2.872508153367053E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9767417975158318	WITHOUT_CLASSIFICATION	0.023258202484168173	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9988461510757669	WITHOUT_CLASSIFICATION	0.0011538489242330446	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9988461510757669	WITHOUT_CLASSIFICATION	0.0011538489242330446	IMPLEMENTATION
/**	IMPLEMENTATION	0.5259438107322658	WITHOUT_CLASSIFICATION	0.47405618926773413	IMPLEMENTATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9210123344710633	IMPLEMENTATION	0.07898766552893659	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9980209609305729	IMPLEMENTATION	0.001979039069427166	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9849720200053931	WITHOUT_CLASSIFICATION	0.015027979994606956	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999996067259849	WITHOUT_CLASSIFICATION	3.9327401523334035E-7	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9996225471196414	WITHOUT_CLASSIFICATION	3.774528803585952E-4	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9948785800465518	WITHOUT_CLASSIFICATION	0.005121419953448204	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999710811244606	WITHOUT_CLASSIFICATION	2.8918875539289964E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.999616324334535	WITHOUT_CLASSIFICATION	3.836756654649922E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8830932580637955	IMPLEMENTATION	0.11690674193620453	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8830932580637955	IMPLEMENTATION	0.11690674193620453	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9984697302341531	IMPLEMENTATION	0.0015302697658468823	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.999148580885865	WITHOUT_CLASSIFICATION	8.514191141349851E-4	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9676237788139239	IMPLEMENTATION	0.03237622118607608	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9842547215880224	WITHOUT_CLASSIFICATION	0.01574527841197751	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9387070238007028	WITHOUT_CLASSIFICATION	0.06129297619929707	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.998165800642406	WITHOUT_CLASSIFICATION	0.0018341993575939743	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9716313234194902	WITHOUT_CLASSIFICATION	0.02836867658050981	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.999972515092753	WITHOUT_CLASSIFICATION	2.7484907246935597E-5	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9372727233116968	WITHOUT_CLASSIFICATION	0.06272727668830325	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8582370594685597	WITHOUT_CLASSIFICATION	0.14176294053144037	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9796406354565541	WITHOUT_CLASSIFICATION	0.020359364543445866	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.763498225652863	IMPLEMENTATION	0.23650177434713707	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9941316585998673	WITHOUT_CLASSIFICATION	0.005868341400132751	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9996575116915097	WITHOUT_CLASSIFICATION	3.4248830849024935E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9795827775652467	IMPLEMENTATION	0.020417222434753253	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9795827775652467	IMPLEMENTATION	0.020417222434753253	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9729200765570727	IMPLEMENTATION	0.027079923442927277	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9994367220286663	WITHOUT_CLASSIFICATION	5.632779713336728E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9988201005895918	WITHOUT_CLASSIFICATION	0.001179899410408248	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9979551275975849	IMPLEMENTATION	0.0020448724024150684	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9981592220952615	WITHOUT_CLASSIFICATION	0.0018407779047385834	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9996317828689831	WITHOUT_CLASSIFICATION	3.68217131016876E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.989395912783896	WITHOUT_CLASSIFICATION	0.01060408721610394	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999873559010568	WITHOUT_CLASSIFICATION	1.2644098943198257E-5	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.9627382064888558	WITHOUT_CLASSIFICATION	0.03726179351114433	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9993167064323277	WITHOUT_CLASSIFICATION	6.832935676722188E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.5637061101523956	WITHOUT_CLASSIFICATION	0.4362938898476045	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.7131835505642246	IMPLEMENTATION	0.28681644943577533	WITHOUT_CLASSIFICATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9860893289860194	WITHOUT_CLASSIFICATION	0.013910671013980648	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.6958835139146018	WITHOUT_CLASSIFICATION	0.30411648608539826	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9525173468405047	IMPLEMENTATION	0.04748265315949525	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.6958835139146018	WITHOUT_CLASSIFICATION	0.30411648608539826	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999988746983668	IMPLEMENTATION	1.1253016332746849E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9154206862140623	IMPLEMENTATION	0.08457931378593764	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.6958835139146018	WITHOUT_CLASSIFICATION	0.30411648608539826	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999741311326	WITHOUT_CLASSIFICATION	2.5868867266248388E-8	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.999999987084919	WITHOUT_CLASSIFICATION	1.2915080943797029E-8	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9605939051103066	IMPLEMENTATION	0.039406094889693405	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999992247129051	WITHOUT_CLASSIFICATION	7.752870948010063E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999613941734113	WITHOUT_CLASSIFICATION	3.860582658858967E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999977929412971	WITHOUT_CLASSIFICATION	2.207058702883762E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999977929412971	WITHOUT_CLASSIFICATION	2.207058702883762E-6	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999974796203234	WITHOUT_CLASSIFICATION	2.5203796765144963E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998242276908	WITHOUT_CLASSIFICATION	1.757723091039347E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999985411822758	WITHOUT_CLASSIFICATION	1.4588177241019616E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986605621513	WITHOUT_CLASSIFICATION	1.3394378487625864E-6	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986605621513	WITHOUT_CLASSIFICATION	1.3394378487625864E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999962525167	WITHOUT_CLASSIFICATION	3.747483354610979E-9	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999502392536	WITHOUT_CLASSIFICATION	4.9760746329175773E-8	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999996668907687	WITHOUT_CLASSIFICATION	3.3310923127137693E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999993282818878	WITHOUT_CLASSIFICATION	6.7171811219780455E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999616684824	WITHOUT_CLASSIFICATION	3.833151758915868E-8	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999616684824	WITHOUT_CLASSIFICATION	3.833151758915868E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999995084495162	WITHOUT_CLASSIFICATION	4.915504838751062E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9995715025381233	WITHOUT_CLASSIFICATION	4.284974618767354E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999984304819453	WITHOUT_CLASSIFICATION	1.5695180548532892E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999873778511	WITHOUT_CLASSIFICATION	1.2622148785251133E-8	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999967654273	WITHOUT_CLASSIFICATION	3.2345726457163984E-9	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999996307702258	WITHOUT_CLASSIFICATION	3.692297741850544E-7	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999907750655531	WITHOUT_CLASSIFICATION	9.224934446902493E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999940817232528	WITHOUT_CLASSIFICATION	5.918276747270348E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998529497413274	WITHOUT_CLASSIFICATION	1.4705025867257492E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9960462679614971	WITHOUT_CLASSIFICATION	0.003953732038502945	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999467743901482	WITHOUT_CLASSIFICATION	5.322560985189801E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.999980366790002	WITHOUT_CLASSIFICATION	1.963320999806252E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999998102204	WITHOUT_CLASSIFICATION	1.8977974098510464E-10	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999753729226734	WITHOUT_CLASSIFICATION	2.4627077326682766E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999753729226734	WITHOUT_CLASSIFICATION	2.4627077326682766E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999999148165174	WITHOUT_CLASSIFICATION	8.518348259772139E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999960161678638	WITHOUT_CLASSIFICATION	3.983832136160889E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999997602264115	WITHOUT_CLASSIFICATION	2.397735885443111E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.99988981516092	WITHOUT_CLASSIFICATION	1.1018483908000948E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.99917751117711	WITHOUT_CLASSIFICATION	8.224888228899947E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5259438107322658	WITHOUT_CLASSIFICATION	0.47405618926773413	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5259438107322658	WITHOUT_CLASSIFICATION	0.47405618926773413	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999992956912734	WITHOUT_CLASSIFICATION	7.043087265459795E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999925879222	WITHOUT_CLASSIFICATION	7.412077916643862E-9	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999999954481089	WITHOUT_CLASSIFICATION	4.551891087233519E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999023383475244	WITHOUT_CLASSIFICATION	9.766165247568587E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999987324928842	WITHOUT_CLASSIFICATION	1.2675071157371158E-6	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999503428537503	WITHOUT_CLASSIFICATION	4.965714624966852E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721525009054	WITHOUT_CLASSIFICATION	2.784749909465106E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999661818629	WITHOUT_CLASSIFICATION	3.381813702324438E-8	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.999942363526054	WITHOUT_CLASSIFICATION	5.7636473946012626E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999999546564088	WITHOUT_CLASSIFICATION	4.534359119841813E-7	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999974027106175	WITHOUT_CLASSIFICATION	2.5972893824982553E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.999942363526054	WITHOUT_CLASSIFICATION	5.7636473946012626E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999974027106175	WITHOUT_CLASSIFICATION	2.5972893824982553E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999908739252	WITHOUT_CLASSIFICATION	9.126074846112777E-9	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9989355770063745	WITHOUT_CLASSIFICATION	0.0010644229936255267	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9997922017643441	WITHOUT_CLASSIFICATION	2.07798235655749E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999792950951304	WITHOUT_CLASSIFICATION	2.0704904869638186E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999909258751	WITHOUT_CLASSIFICATION	9.07412500705386E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999979053281	WITHOUT_CLASSIFICATION	2.0946718050190217E-9	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.995707227339196	WITHOUT_CLASSIFICATION	0.004292772660804032	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999262350943989	WITHOUT_CLASSIFICATION	7.376490560109504E-5	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9909459995036685	WITHOUT_CLASSIFICATION	0.009054000496331479	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998091009442649	WITHOUT_CLASSIFICATION	1.9089905573507467E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999888152076797	WITHOUT_CLASSIFICATION	1.1184792320203643E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999934326844891	WITHOUT_CLASSIFICATION	6.567315510905977E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999990398547903	WITHOUT_CLASSIFICATION	9.60145209734942E-7	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9894505677901305	WITHOUT_CLASSIFICATION	0.010549432209869413	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999972240445199	WITHOUT_CLASSIFICATION	2.7759554800778293E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999999999614812	WITHOUT_CLASSIFICATION	3.8518797492934664E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999245586526	WITHOUT_CLASSIFICATION	7.544134739497568E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999969679519918	WITHOUT_CLASSIFICATION	3.0320480082560848E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999611271889035	WITHOUT_CLASSIFICATION	3.887281109646254E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995707072482	WITHOUT_CLASSIFICATION	4.2929275173830396E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999987267265511	WITHOUT_CLASSIFICATION	1.2732734488305905E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999969163929	WITHOUT_CLASSIFICATION	3.0836072539188263E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999989508402788	WITHOUT_CLASSIFICATION	1.0491597212829358E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999984385044564	WITHOUT_CLASSIFICATION	1.5614955435532254E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9989424869265022	WITHOUT_CLASSIFICATION	0.0010575130734977174	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999969242155575	WITHOUT_CLASSIFICATION	3.075784442496253E-6	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999968969533	WITHOUT_CLASSIFICATION	3.1030467432248247E-9	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9898953434888336	WITHOUT_CLASSIFICATION	0.01010465651116648	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999785419621	WITHOUT_CLASSIFICATION	2.1458037791514564E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999536709399	WITHOUT_CLASSIFICATION	4.6329060073489144E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999722365984	WITHOUT_CLASSIFICATION	2.7763401571262032E-8	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999948417331865	WITHOUT_CLASSIFICATION	5.1582668134075855E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999946812943	WITHOUT_CLASSIFICATION	5.318705650992252E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999976115995216	WITHOUT_CLASSIFICATION	2.3884004784350494E-6	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999986409915083	WITHOUT_CLASSIFICATION	1.3590084918028176E-6	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999897477353	WITHOUT_CLASSIFICATION	1.0252264622054666E-8	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999976115995216	WITHOUT_CLASSIFICATION	2.3884004784350494E-6	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999406175202	WITHOUT_CLASSIFICATION	5.938247976169457E-8	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999996504988099	WITHOUT_CLASSIFICATION	3.495011901123235E-7	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999949300558387	WITHOUT_CLASSIFICATION	5.069944161319744E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999904414420409	WITHOUT_CLASSIFICATION	9.558557959059454E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.999988648461901	WITHOUT_CLASSIFICATION	1.1351538098855476E-5	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990810398244	WITHOUT_CLASSIFICATION	9.189601755217802E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990810398244	WITHOUT_CLASSIFICATION	9.189601755217802E-7	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999989122569237	WITHOUT_CLASSIFICATION	1.0877430763136323E-5	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999459553213	WITHOUT_CLASSIFICATION	5.404467872397796E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997456442627216	WITHOUT_CLASSIFICATION	2.5435573727830996E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999889336721	WITHOUT_CLASSIFICATION	1.1066327913333533E-8	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999960580702647	WITHOUT_CLASSIFICATION	3.941929735394644E-6	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999126243283807	WITHOUT_CLASSIFICATION	8.737567161941286E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999983094920352	WITHOUT_CLASSIFICATION	1.6905079647467568E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9998525363090384	WITHOUT_CLASSIFICATION	1.4746369096155E-4	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999996532139608	WITHOUT_CLASSIFICATION	3.4678603930126185E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999711070967	WITHOUT_CLASSIFICATION	2.8892903236009986E-8	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993918574405	WITHOUT_CLASSIFICATION	6.081425594317997E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993918574405	WITHOUT_CLASSIFICATION	6.081425594317997E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996017868453885	WITHOUT_CLASSIFICATION	3.9821315461151176E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999970108645161	WITHOUT_CLASSIFICATION	2.989135483874336E-6	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999996951433177	WITHOUT_CLASSIFICATION	3.0485668233497276E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993918574405	WITHOUT_CLASSIFICATION	6.081425594317997E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996017868453885	WITHOUT_CLASSIFICATION	3.9821315461151176E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996017868453885	WITHOUT_CLASSIFICATION	3.9821315461151176E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999592453189	WITHOUT_CLASSIFICATION	4.075468095807671E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999622786237766	WITHOUT_CLASSIFICATION	3.77213762233983E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999322801376	WITHOUT_CLASSIFICATION	6.771986233676999E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999806023519268	WITHOUT_CLASSIFICATION	1.939764807329964E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999914915237749	WITHOUT_CLASSIFICATION	8.508476225104673E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999914915237749	WITHOUT_CLASSIFICATION	8.508476225104673E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999983801983745	WITHOUT_CLASSIFICATION	1.6198016254436903E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999978700382596	WITHOUT_CLASSIFICATION	2.12996174038746E-6	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999993379821481	WITHOUT_CLASSIFICATION	6.620178519738969E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999969624872	WITHOUT_CLASSIFICATION	3.0375127207789534E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999969624872	WITHOUT_CLASSIFICATION	3.0375127207789534E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999944499235255	WITHOUT_CLASSIFICATION	5.550076474592695E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999975554845288	WITHOUT_CLASSIFICATION	2.444515471049338E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999451304893823	WITHOUT_CLASSIFICATION	5.486951061770528E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999983996899	WITHOUT_CLASSIFICATION	1.6003101000490024E-9	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999621981346	WITHOUT_CLASSIFICATION	3.7801865470952916E-8	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999995267662329	WITHOUT_CLASSIFICATION	4.732337671535415E-7	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999088194141946	WITHOUT_CLASSIFICATION	9.118058580537132E-5	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9985320324960274	WITHOUT_CLASSIFICATION	0.0014679675039726836	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999905464162536	WITHOUT_CLASSIFICATION	9.45358374628464E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999451304893823	WITHOUT_CLASSIFICATION	5.486951061770528E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999085013826591	WITHOUT_CLASSIFICATION	9.149861734098654E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9997578172781436	WITHOUT_CLASSIFICATION	2.4218272185646617E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9997578172781436	WITHOUT_CLASSIFICATION	2.4218272185646617E-4	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999616781271229	WITHOUT_CLASSIFICATION	3.832187287717196E-5	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999490588505463	WITHOUT_CLASSIFICATION	5.0941149453787825E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9997753060005535	WITHOUT_CLASSIFICATION	2.2469399944648338E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999919001875944	WITHOUT_CLASSIFICATION	8.099812405479518E-6	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999876543285807	WITHOUT_CLASSIFICATION	1.234567141929792E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9990303736511247	WITHOUT_CLASSIFICATION	9.696263488754128E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999992174747485	WITHOUT_CLASSIFICATION	7.825252515091565E-7	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999139087510799	WITHOUT_CLASSIFICATION	8.60912489201109E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999980074967	WITHOUT_CLASSIFICATION	1.9925032841646017E-9	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999980074967	WITHOUT_CLASSIFICATION	1.9925032841646017E-9	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984866492431	WITHOUT_CLASSIFICATION	1.5133507568759312E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999613941734113	WITHOUT_CLASSIFICATION	3.860582658858967E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999998440226833	WITHOUT_CLASSIFICATION	1.5597731678243546E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999994806446185	WITHOUT_CLASSIFICATION	5.193553815350476E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999977929412971	WITHOUT_CLASSIFICATION	2.207058702883762E-6	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999945649129269	WITHOUT_CLASSIFICATION	5.43508707305011E-6	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999994885236562	WITHOUT_CLASSIFICATION	5.114763438473886E-7	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999997632554833	WITHOUT_CLASSIFICATION	2.3674451669331488E-7	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999992786679647	WITHOUT_CLASSIFICATION	7.213320353963718E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999949344489049	WITHOUT_CLASSIFICATION	5.065551095075803E-6	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999785490256948	WITHOUT_CLASSIFICATION	2.1450974305165094E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999999411042518	WITHOUT_CLASSIFICATION	5.889574820925118E-7	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999974251963728	WITHOUT_CLASSIFICATION	2.574803627137271E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998242276908	WITHOUT_CLASSIFICATION	1.757723091039347E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999986372222973	WITHOUT_CLASSIFICATION	1.3627777027984502E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999986372222973	WITHOUT_CLASSIFICATION	1.3627777027984502E-6	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999997702542044	WITHOUT_CLASSIFICATION	2.2974579565665265E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999988825998561	WITHOUT_CLASSIFICATION	1.117400143835997E-6	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999996971107789	WITHOUT_CLASSIFICATION	3.028892212077231E-7	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999990269998197	WITHOUT_CLASSIFICATION	9.730001802826198E-7	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999961058874908	WITHOUT_CLASSIFICATION	3.89411250920639E-6	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999891481170077	WITHOUT_CLASSIFICATION	1.0851882992349323E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999986605621513	WITHOUT_CLASSIFICATION	1.3394378487625864E-6	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999949105611988	WITHOUT_CLASSIFICATION	5.089438801194669E-6	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976730312422	WITHOUT_CLASSIFICATION	2.3269687577460988E-6	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999960296282706	WITHOUT_CLASSIFICATION	3.970371729380572E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996315968701	WITHOUT_CLASSIFICATION	3.6840312994979526E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999910016495971	WITHOUT_CLASSIFICATION	8.998350402958894E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999976489635414	WITHOUT_CLASSIFICATION	2.351036458545874E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999989038568474	WITHOUT_CLASSIFICATION	1.0961431525754632E-6	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998308476306	WITHOUT_CLASSIFICATION	1.6915236949866722E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999981901853351	WITHOUT_CLASSIFICATION	1.8098146648246798E-6	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999964225238558	WITHOUT_CLASSIFICATION	3.5774761442880652E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999813948203763	WITHOUT_CLASSIFICATION	1.8605179623711022E-5	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999332455703	WITHOUT_CLASSIFICATION	6.675442972916464E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999152215679	WITHOUT_CLASSIFICATION	8.477843209472983E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999977929412971	WITHOUT_CLASSIFICATION	2.207058702883762E-6	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999977929412971	WITHOUT_CLASSIFICATION	2.207058702883762E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999999411042518	WITHOUT_CLASSIFICATION	5.889574820925118E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999986372222973	WITHOUT_CLASSIFICATION	1.3627777027984502E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999989038568474	WITHOUT_CLASSIFICATION	1.0961431525754632E-6	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999962525167	WITHOUT_CLASSIFICATION	3.747483354610979E-9	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999892945396	WITHOUT_CLASSIFICATION	1.0705460430025639E-8	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999979046120917	WITHOUT_CLASSIFICATION	2.095387908313565E-6	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999998601615061	WITHOUT_CLASSIFICATION	1.398384937654223E-7	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999980362464754	WITHOUT_CLASSIFICATION	1.9637535246725096E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999989940663239	WITHOUT_CLASSIFICATION	1.0059336761893383E-6	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999978701916616	WITHOUT_CLASSIFICATION	2.1298083384118256E-6	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998391615088	WITHOUT_CLASSIFICATION	1.6083849120889572E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999653748237801	WITHOUT_CLASSIFICATION	3.462517621982372E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999999415747658	WITHOUT_CLASSIFICATION	5.842523424326348E-8	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999941356003567	WITHOUT_CLASSIFICATION	5.864399643381274E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999941356003567	WITHOUT_CLASSIFICATION	5.864399643381274E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999550331294	WITHOUT_CLASSIFICATION	4.496687056853155E-8	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999998310080545	WITHOUT_CLASSIFICATION	1.6899194551838257E-7	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.999998383398298	WITHOUT_CLASSIFICATION	1.6166017019020194E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999992902642165	WITHOUT_CLASSIFICATION	7.0973578351012285E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996268157835	WITHOUT_CLASSIFICATION	3.73184216518135E-7	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999765103638	WITHOUT_CLASSIFICATION	2.3489636140816875E-8	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999998761272042	WITHOUT_CLASSIFICATION	1.2387279584908696E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999502392536	WITHOUT_CLASSIFICATION	4.9760746329175773E-8	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999966414069011	WITHOUT_CLASSIFICATION	3.358593098949276E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999989360894268	WITHOUT_CLASSIFICATION	1.0639105731673108E-6	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999989360894268	WITHOUT_CLASSIFICATION	1.0639105731673108E-6	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999987754406447	WITHOUT_CLASSIFICATION	1.2245593552145775E-6	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999998008816176	WITHOUT_CLASSIFICATION	1.9911838248664608E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999989073844608	WITHOUT_CLASSIFICATION	1.0926155391162488E-6	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999224395575	WITHOUT_CLASSIFICATION	7.756044249832158E-8	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999994937699942	WITHOUT_CLASSIFICATION	5.0623000577921E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999977929412971	WITHOUT_CLASSIFICATION	2.207058702883762E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999999411042518	WITHOUT_CLASSIFICATION	5.889574820925118E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998242276908	WITHOUT_CLASSIFICATION	1.757723091039347E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999989038568474	WITHOUT_CLASSIFICATION	1.0961431525754632E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999989038568474	WITHOUT_CLASSIFICATION	1.0961431525754632E-6	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999643144982	WITHOUT_CLASSIFICATION	3.5685501769296845E-8	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999643144982	WITHOUT_CLASSIFICATION	3.5685501769296845E-8	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999980928129513	WITHOUT_CLASSIFICATION	1.9071870487384797E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999986686940165	WITHOUT_CLASSIFICATION	1.331305983407365E-6	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999986686940165	WITHOUT_CLASSIFICATION	1.331305983407365E-6	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999863808245426	WITHOUT_CLASSIFICATION	1.3619175457349307E-5	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999880691499775	WITHOUT_CLASSIFICATION	1.1930850022573536E-5	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999997707319028	WITHOUT_CLASSIFICATION	2.2926809715102404E-7	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999877872232	WITHOUT_CLASSIFICATION	1.2212776722711646E-8	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999732130898	WITHOUT_CLASSIFICATION	2.6786910257389693E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999993282818878	WITHOUT_CLASSIFICATION	6.7171811219780455E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999993282818878	WITHOUT_CLASSIFICATION	6.7171811219780455E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9994202137505551	WITHOUT_CLASSIFICATION	5.797862494447947E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999995365866654	WITHOUT_CLASSIFICATION	4.634133346308566E-7	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999995623126433	WITHOUT_CLASSIFICATION	4.376873566958179E-7	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999968292869026	WITHOUT_CLASSIFICATION	3.170713097444157E-6	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999084388633	WITHOUT_CLASSIFICATION	9.156113670313523E-8	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999956965644761	WITHOUT_CLASSIFICATION	4.303435523982593E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999616684824	WITHOUT_CLASSIFICATION	3.833151758915868E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998140468243	WITHOUT_CLASSIFICATION	1.859531757545881E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998140468243	WITHOUT_CLASSIFICATION	1.859531757545881E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999995084495162	WITHOUT_CLASSIFICATION	4.915504838751062E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999995084495162	WITHOUT_CLASSIFICATION	4.915504838751062E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999857276364327	WITHOUT_CLASSIFICATION	1.4272363567337424E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999857276364327	WITHOUT_CLASSIFICATION	1.4272363567337424E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996188138386	WITHOUT_CLASSIFICATION	3.8118616135906535E-7	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996188138386	WITHOUT_CLASSIFICATION	3.8118616135906535E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999993282818878	WITHOUT_CLASSIFICATION	6.7171811219780455E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999616684824	WITHOUT_CLASSIFICATION	3.833151758915868E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998140468243	WITHOUT_CLASSIFICATION	1.859531757545881E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998140468243	WITHOUT_CLASSIFICATION	1.859531757545881E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999995084495162	WITHOUT_CLASSIFICATION	4.915504838751062E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999857276364327	WITHOUT_CLASSIFICATION	1.4272363567337424E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999857276364327	WITHOUT_CLASSIFICATION	1.4272363567337424E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996188138386	WITHOUT_CLASSIFICATION	3.8118616135906535E-7	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999984306056463	WITHOUT_CLASSIFICATION	1.5693943537290462E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999878975683445	WITHOUT_CLASSIFICATION	1.2102431655532861E-5	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998055459134433	WITHOUT_CLASSIFICATION	1.9445408655684014E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999961958593979	WITHOUT_CLASSIFICATION	3.8041406021330166E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999892632453613	WITHOUT_CLASSIFICATION	1.0736754638691861E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999872221910261	WITHOUT_CLASSIFICATION	1.2777808973892994E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999850262783239	WITHOUT_CLASSIFICATION	1.4973721676138371E-5	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999994671235188	WITHOUT_CLASSIFICATION	5.328764812758588E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999999805529733	WITHOUT_CLASSIFICATION	1.9447026711681808E-7	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999891577724	WITHOUT_CLASSIFICATION	1.0842227614993329E-7	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999983994926477	WITHOUT_CLASSIFICATION	1.600507352339434E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999319855403	WITHOUT_CLASSIFICATION	6.801445973704584E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999989122569237	WITHOUT_CLASSIFICATION	1.0877430763136323E-5	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999872221910261	WITHOUT_CLASSIFICATION	1.2777808973892994E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999766285307702	WITHOUT_CLASSIFICATION	2.33714692297793E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999766285307702	WITHOUT_CLASSIFICATION	2.33714692297793E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999988156342179	WITHOUT_CLASSIFICATION	1.1843657820377544E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999923127403	WITHOUT_CLASSIFICATION	7.687259711495598E-9	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999923127403	WITHOUT_CLASSIFICATION	7.687259711495598E-9	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999985712079722	WITHOUT_CLASSIFICATION	1.428792027789686E-6	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999961564303	WITHOUT_CLASSIFICATION	3.843569686321261E-9	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999964662707358	WITHOUT_CLASSIFICATION	3.5337292641422634E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999987615293549	WITHOUT_CLASSIFICATION	1.2384706451057215E-5	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999987615293549	WITHOUT_CLASSIFICATION	1.2384706451057215E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999967654273	WITHOUT_CLASSIFICATION	3.2345726457163984E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999989287663369	WITHOUT_CLASSIFICATION	1.0712336631067807E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999989287663369	WITHOUT_CLASSIFICATION	1.0712336631067807E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999996588338251	WITHOUT_CLASSIFICATION	3.411661749312497E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999997701773733	WITHOUT_CLASSIFICATION	2.2982262668906308E-7	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999993452505	WITHOUT_CLASSIFICATION	6.547495248058623E-10	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999986507137126	WITHOUT_CLASSIFICATION	1.349286287387898E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999990209010943	WITHOUT_CLASSIFICATION	9.790989056996132E-7	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999990594591522	WITHOUT_CLASSIFICATION	9.405408478016027E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999996307702258	WITHOUT_CLASSIFICATION	3.692297741850544E-7	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999701773425266	WITHOUT_CLASSIFICATION	2.9822657473401633E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9880840790850229	WITHOUT_CLASSIFICATION	0.011915920914977039	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999906060682785	WITHOUT_CLASSIFICATION	9.39393172149346E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999897015880655	WITHOUT_CLASSIFICATION	1.0298411934536063E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998529497413274	WITHOUT_CLASSIFICATION	1.4705025867257492E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998315970098	WITHOUT_CLASSIFICATION	1.6840299024142916E-7	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999910883986995	WITHOUT_CLASSIFICATION	8.911601300503113E-6	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999345563912	WITHOUT_CLASSIFICATION	6.544360870898105E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998529497413274	WITHOUT_CLASSIFICATION	1.4705025867257492E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999986248255036	WITHOUT_CLASSIFICATION	1.3751744962854114E-6	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999638600589552	WITHOUT_CLASSIFICATION	3.61399410447989E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999780413781904	WITHOUT_CLASSIFICATION	2.195862180961345E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999931355446227	WITHOUT_CLASSIFICATION	6.864455377426969E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999916520488998	WITHOUT_CLASSIFICATION	8.347951100133063E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999978310881391	WITHOUT_CLASSIFICATION	2.1689118608177658E-6	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999942797322026	WITHOUT_CLASSIFICATION	5.720267797428997E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.999980366790002	WITHOUT_CLASSIFICATION	1.963320999806252E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999982077214143	WITHOUT_CLASSIFICATION	1.7922785855789116E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999998102204	WITHOUT_CLASSIFICATION	1.8977974098510464E-10	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999987826761953	WITHOUT_CLASSIFICATION	1.2173238046959037E-5	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999899727037	WITHOUT_CLASSIFICATION	1.0027296392852749E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999981452063943	WITHOUT_CLASSIFICATION	1.8547936056243255E-6	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999996307702258	WITHOUT_CLASSIFICATION	3.692297741850544E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999982077214143	WITHOUT_CLASSIFICATION	1.7922785855789116E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.999987826761953	WITHOUT_CLASSIFICATION	1.2173238046959037E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999981452063943	WITHOUT_CLASSIFICATION	1.8547936056243255E-6	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999776155412889	WITHOUT_CLASSIFICATION	2.238445871104098E-5	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999741963623009	WITHOUT_CLASSIFICATION	2.580363769919923E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999932276525297	WITHOUT_CLASSIFICATION	6.7723474702321615E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999753729226734	WITHOUT_CLASSIFICATION	2.4627077326682766E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999948311367406	WITHOUT_CLASSIFICATION	5.16886325945221E-6	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.999972292904887	WITHOUT_CLASSIFICATION	2.7707095112998126E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999930288011458	WITHOUT_CLASSIFICATION	6.971198854112538E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999881056740035	WITHOUT_CLASSIFICATION	1.1894325996441477E-5	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999986556098515	WITHOUT_CLASSIFICATION	1.344390148574823E-6	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999998063207233	WITHOUT_CLASSIFICATION	1.9367927678865995E-7	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996170383001	WITHOUT_CLASSIFICATION	3.829616999452288E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999951279921667	WITHOUT_CLASSIFICATION	4.872007833320737E-6	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999245567838	WITHOUT_CLASSIFICATION	7.544321631892202E-8	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999981918979024	WITHOUT_CLASSIFICATION	1.8081020975717237E-6	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999909552882856	WITHOUT_CLASSIFICATION	9.044711714250235E-6	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999886023021903	WITHOUT_CLASSIFICATION	1.1397697809788735E-5	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999960161678638	WITHOUT_CLASSIFICATION	3.983832136160889E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999939132105	WITHOUT_CLASSIFICATION	6.086789421581748E-9	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999987842195804	WITHOUT_CLASSIFICATION	1.215780419524598E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999982077214143	WITHOUT_CLASSIFICATION	1.7922785855789116E-6	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999995968726579	WITHOUT_CLASSIFICATION	4.0312734201878764E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999944481037848	WITHOUT_CLASSIFICATION	5.551896215159875E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.999999649875795	WITHOUT_CLASSIFICATION	3.5012420491810506E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9997842089657228	WITHOUT_CLASSIFICATION	2.157910342770814E-4	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999986217913477	WITHOUT_CLASSIFICATION	1.3782086523209542E-6	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999970665095214	WITHOUT_CLASSIFICATION	2.933490478603097E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999979551779838	WITHOUT_CLASSIFICATION	2.0448220161579146E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998229212717	WITHOUT_CLASSIFICATION	1.770787283479349E-7	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999871590342626	WITHOUT_CLASSIFICATION	1.284096573741065E-5	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.999983449656785	WITHOUT_CLASSIFICATION	1.6550343214995127E-5	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999543652632987	WITHOUT_CLASSIFICATION	4.563473670122951E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999919764689669	WITHOUT_CLASSIFICATION	8.023531033165262E-6	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9983493556686477	WITHOUT_CLASSIFICATION	0.0016506443313523346	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.99988981516092	WITHOUT_CLASSIFICATION	1.1018483908000948E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999996226740671	WITHOUT_CLASSIFICATION	3.7732593296392986E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999954601122383	WITHOUT_CLASSIFICATION	4.539887761674428E-6	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.999851202828213	WITHOUT_CLASSIFICATION	1.4879717178694913E-4	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999386755860906	WITHOUT_CLASSIFICATION	6.132441390935049E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999893650421772	WITHOUT_CLASSIFICATION	1.0634957822930321E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999951481986746	WITHOUT_CLASSIFICATION	4.851801325372132E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999990883939722	WITHOUT_CLASSIFICATION	9.116060277950332E-7	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998462509941428	WITHOUT_CLASSIFICATION	1.5374900585712344E-4	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999701711596068	WITHOUT_CLASSIFICATION	2.9828840393108696E-5	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999984990640474	WITHOUT_CLASSIFICATION	1.5009359526995688E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999098256599823	WITHOUT_CLASSIFICATION	9.017434001775398E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999098256599823	WITHOUT_CLASSIFICATION	9.017434001775398E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999994760882197	WITHOUT_CLASSIFICATION	5.239117803062611E-6	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9995942265150289	WITHOUT_CLASSIFICATION	4.0577348497102797E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999971255774609	WITHOUT_CLASSIFICATION	2.874422539103619E-6	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999988275213514	WITHOUT_CLASSIFICATION	1.1724786485551626E-6	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999994886192622	WITHOUT_CLASSIFICATION	5.113807376652925E-7	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999999292745897	WITHOUT_CLASSIFICATION	7.07254103036648E-7	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999954021680064	WITHOUT_CLASSIFICATION	4.597831993641572E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999275213796541	WITHOUT_CLASSIFICATION	7.247862034589958E-4	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999996891617985	WITHOUT_CLASSIFICATION	3.108382014814164E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999996096675214	WITHOUT_CLASSIFICATION	3.9033247849339464E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999430996882801	WITHOUT_CLASSIFICATION	5.690031171990528E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999971802890597	WITHOUT_CLASSIFICATION	2.819710940210393E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999951660134387	WITHOUT_CLASSIFICATION	4.83398656130874E-6	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9996373672680916	WITHOUT_CLASSIFICATION	3.626327319083692E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993538398583	WITHOUT_CLASSIFICATION	6.461601417239663E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999416976390962	WITHOUT_CLASSIFICATION	5.8302360903896915E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999981534301998	WITHOUT_CLASSIFICATION	1.8465698001981627E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999998869953234	WITHOUT_CLASSIFICATION	1.1300467667426026E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999673465896751	WITHOUT_CLASSIFICATION	3.265341032488764E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999074008008738	WITHOUT_CLASSIFICATION	9.259919912617619E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999993794610225	WITHOUT_CLASSIFICATION	6.20538977539813E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999993794610225	WITHOUT_CLASSIFICATION	6.20538977539813E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999955133317389	WITHOUT_CLASSIFICATION	4.486668261175158E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999955133317389	WITHOUT_CLASSIFICATION	4.486668261175158E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999701711596068	WITHOUT_CLASSIFICATION	2.9828840393108696E-5	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999976416292373	WITHOUT_CLASSIFICATION	2.3583707626857534E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997758041558347	WITHOUT_CLASSIFICATION	2.241958441652361E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999962279998317	WITHOUT_CLASSIFICATION	3.772000168442851E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984866492431	WITHOUT_CLASSIFICATION	1.5133507568759312E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9997758041558347	WITHOUT_CLASSIFICATION	2.241958441652361E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999962279998317	WITHOUT_CLASSIFICATION	3.772000168442851E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999499739894588	WITHOUT_CLASSIFICATION	5.002601054120647E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995140107946	WITHOUT_CLASSIFICATION	4.859892053542783E-7	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999998293666791	WITHOUT_CLASSIFICATION	1.7063332082177902E-7	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999994099598041	WITHOUT_CLASSIFICATION	5.900401959388071E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9958128070101793	WITHOUT_CLASSIFICATION	0.00418719298982074	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9933549878868423	WITHOUT_CLASSIFICATION	0.006645012113157793	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999976109761	WITHOUT_CLASSIFICATION	2.3890238707915884E-9	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999899489577	WITHOUT_CLASSIFICATION	1.0051042321094936E-8	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999997552207486	WITHOUT_CLASSIFICATION	2.447792514066359E-7	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999952002648075	WITHOUT_CLASSIFICATION	4.799735192554138E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999893547022904	WITHOUT_CLASSIFICATION	1.0645297709529957E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999750516794	WITHOUT_CLASSIFICATION	2.4948320644258083E-8	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998561217276	WITHOUT_CLASSIFICATION	1.4387827247901716E-7	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999475376469199	WITHOUT_CLASSIFICATION	5.246235308012808E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984866492431	WITHOUT_CLASSIFICATION	1.5133507568759312E-6	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999630197328461	WITHOUT_CLASSIFICATION	3.6980267153919465E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998911570818	WITHOUT_CLASSIFICATION	1.0884291829405932E-7	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998911570818	WITHOUT_CLASSIFICATION	1.0884291829405932E-7	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999953632881484	WITHOUT_CLASSIFICATION	4.636711851582445E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999499739894588	WITHOUT_CLASSIFICATION	5.002601054120647E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999909547732644	WITHOUT_CLASSIFICATION	9.045226735585049E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999706945792958	WITHOUT_CLASSIFICATION	2.930542070420554E-4	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.996283549203013	WITHOUT_CLASSIFICATION	0.0037164507969869465	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999991975276528	WITHOUT_CLASSIFICATION	8.024723472005283E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997357694792592	WITHOUT_CLASSIFICATION	2.6423052074074367E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999499739894588	WITHOUT_CLASSIFICATION	5.002601054120647E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999991975276528	WITHOUT_CLASSIFICATION	8.024723472005283E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997357694792592	WITHOUT_CLASSIFICATION	2.6423052074074367E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9804786798563107	WITHOUT_CLASSIFICATION	0.019521320143689402	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999867014726418	WITHOUT_CLASSIFICATION	1.3298527358289643E-5	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999956503363552	WITHOUT_CLASSIFICATION	4.349663644813407E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999499739894588	WITHOUT_CLASSIFICATION	5.002601054120647E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999499739894588	WITHOUT_CLASSIFICATION	5.002601054120647E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.999996284663578	WITHOUT_CLASSIFICATION	3.7153364218992967E-6	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999959323314128	WITHOUT_CLASSIFICATION	4.067668587144394E-6	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999732783378091	WITHOUT_CLASSIFICATION	2.6721662190782436E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999749365556778	WITHOUT_CLASSIFICATION	2.506344432225485E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999977134595717	WITHOUT_CLASSIFICATION	2.2865404282280833E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999976777199	WITHOUT_CLASSIFICATION	2.3222801973146707E-9	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999856739168095	WITHOUT_CLASSIFICATION	1.432608319051049E-5	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999985114013545	WITHOUT_CLASSIFICATION	1.488598645436221E-6	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999969209522954	WITHOUT_CLASSIFICATION	3.0790477045362357E-6	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999344356136468	WITHOUT_CLASSIFICATION	6.556438635317199E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999994895972391	WITHOUT_CLASSIFICATION	5.10402760906554E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9997960346654773	WITHOUT_CLASSIFICATION	2.0396533452275513E-4	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999127755609	WITHOUT_CLASSIFICATION	8.722443910184816E-8	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999983000804142	WITHOUT_CLASSIFICATION	1.6999195857936648E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992125880033	WITHOUT_CLASSIFICATION	7.874119967450639E-7	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999993037537783	WITHOUT_CLASSIFICATION	6.962462216201076E-7	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999023383475244	WITHOUT_CLASSIFICATION	9.766165247568587E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999995322547841	WITHOUT_CLASSIFICATION	4.6774521594715547E-7	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9963538643940147	WITHOUT_CLASSIFICATION	0.003646135605985324	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999848009499772	WITHOUT_CLASSIFICATION	1.5199050022812579E-5	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998395583207451	WITHOUT_CLASSIFICATION	1.6044167925485513E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9738942798923061	WITHOUT_CLASSIFICATION	0.02610572010769393	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9738942798923061	WITHOUT_CLASSIFICATION	0.02610572010769393	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999023383475244	WITHOUT_CLASSIFICATION	9.766165247568587E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9994542064043108	WITHOUT_CLASSIFICATION	5.457935956891657E-4	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999811534576	WITHOUT_CLASSIFICATION	1.8846542462416623E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.7853520488706829	IMPLEMENTATION	0.21464795112931717	WITHOUT_CLASSIFICATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999996045560776	WITHOUT_CLASSIFICATION	3.954439224040146E-7	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999351943931795	WITHOUT_CLASSIFICATION	6.480560682048648E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999989853928862	WITHOUT_CLASSIFICATION	1.014607113808318E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999519761033983	WITHOUT_CLASSIFICATION	4.802389660164995E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999796465342817	WITHOUT_CLASSIFICATION	2.0353465718248366E-5	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999241410092	WITHOUT_CLASSIFICATION	7.58589907160103E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999997292792795	WITHOUT_CLASSIFICATION	2.7072072050073003E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999989724228245	WITHOUT_CLASSIFICATION	1.0275771755413805E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999971040194894	WITHOUT_CLASSIFICATION	2.8959805106498726E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997219063290596	WITHOUT_CLASSIFICATION	2.780936709404764E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999997644214774	WITHOUT_CLASSIFICATION	2.3557852255615483E-7	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990953681579	WITHOUT_CLASSIFICATION	9.046318422449092E-7	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999998616219249	WITHOUT_CLASSIFICATION	1.383780750540899E-7	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999997240054247	WITHOUT_CLASSIFICATION	2.759945752305591E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999963849339953	WITHOUT_CLASSIFICATION	3.6150660047440433E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997737028632	WITHOUT_CLASSIFICATION	2.2629713692479393E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998726418957	WITHOUT_CLASSIFICATION	1.2735810421904436E-7	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999991854011481	WITHOUT_CLASSIFICATION	8.145988518945367E-6	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999994199811145	WITHOUT_CLASSIFICATION	5.800188855543399E-7	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721818260618	WITHOUT_CLASSIFICATION	2.781817393822555E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998375677821981	WITHOUT_CLASSIFICATION	1.6243221780184037E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998347537800704	WITHOUT_CLASSIFICATION	1.652462199296147E-4	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998361003464238	WITHOUT_CLASSIFICATION	1.638996535761308E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984912404406102	WITHOUT_CLASSIFICATION	0.0015087595593897083	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998952852931737	WITHOUT_CLASSIFICATION	1.0471470682632963E-4	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991300033131386	WITHOUT_CLASSIFICATION	8.699966868614235E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997423375512079	WITHOUT_CLASSIFICATION	2.576624487921567E-4	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999856188552922	WITHOUT_CLASSIFICATION	1.4381144707740113E-5	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999998178193699	WITHOUT_CLASSIFICATION	1.8218063010058985E-6	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778788577331	WITHOUT_CLASSIFICATION	2.2121142266871654E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880649035466	WITHOUT_CLASSIFICATION	1.1935096453295192E-5	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999650408074492	WITHOUT_CLASSIFICATION	3.495919255083437E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991340806601093	WITHOUT_CLASSIFICATION	8.659193398906182E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919301857386	WITHOUT_CLASSIFICATION	8.069814261370354E-6	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701602407093	WITHOUT_CLASSIFICATION	2.983975929063205E-5	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996269606630344	WITHOUT_CLASSIFICATION	3.73039336965657E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99944781904531	WITHOUT_CLASSIFICATION	5.521809546900912E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999984159055484	WITHOUT_CLASSIFICATION	1.5840944516638395E-6	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998567134809605	WITHOUT_CLASSIFICATION	1.4328651903949195E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9993631527900817	WITHOUT_CLASSIFICATION	6.368472099183222E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997159255244	WITHOUT_CLASSIFICATION	2.840744756881324E-7	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999994427854672	WITHOUT_CLASSIFICATION	5.572145329030205E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999949059717196	WITHOUT_CLASSIFICATION	5.094028280454632E-6	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999890994438103	WITHOUT_CLASSIFICATION	1.090055618968007E-5	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999970809412065	WITHOUT_CLASSIFICATION	2.919058793495732E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999819793715633	WITHOUT_CLASSIFICATION	1.802062843660132E-5	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999963809097367	WITHOUT_CLASSIFICATION	3.619090263377011E-6	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999820846743894	WITHOUT_CLASSIFICATION	1.7915325610526616E-5	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999801698596646	WITHOUT_CLASSIFICATION	1.9830140335294165E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999895739053938	WITHOUT_CLASSIFICATION	1.04260946061774E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999903774605967	WITHOUT_CLASSIFICATION	9.622539403214085E-6	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999817513289	WITHOUT_CLASSIFICATION	1.824867106378727E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999998096628595	WITHOUT_CLASSIFICATION	1.9033714043907835E-7	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999543622175342	WITHOUT_CLASSIFICATION	4.563778246581586E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999981789305681	WITHOUT_CLASSIFICATION	1.821069431843693E-6	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999980761167065	WITHOUT_CLASSIFICATION	1.9238832934778517E-6	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119046994034	WITHOUT_CLASSIFICATION	8.809530059659495E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952099249615	WITHOUT_CLASSIFICATION	4.790075038440128E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802288116932	WITHOUT_CLASSIFICATION	1.9771188306781607E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999544890742537	WITHOUT_CLASSIFICATION	4.551092574637681E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9966254866282273	WITHOUT_CLASSIFICATION	0.0033745133717727562	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999991361959993	WITHOUT_CLASSIFICATION	8.63804000700593E-6	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9884312023550881	WITHOUT_CLASSIFICATION	0.011568797644911883	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9997153231445143	WITHOUT_CLASSIFICATION	2.84676855485737E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900040625848	WITHOUT_CLASSIFICATION	9.995937415304079E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999558560787	WITHOUT_CLASSIFICATION	4.414392130123222E-7	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999738925819	WITHOUT_CLASSIFICATION	2.6107418086436438E-8	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999998609858129	WITHOUT_CLASSIFICATION	1.3901418710110667E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998656407374	WITHOUT_CLASSIFICATION	1.343592626536085E-7	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998365949489635	WITHOUT_CLASSIFICATION	1.6340505103656325E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9983400391997849	WITHOUT_CLASSIFICATION	0.0016599608002150904	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999711774836	WITHOUT_CLASSIFICATION	2.8822516390284553E-8	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999970598002713	WITHOUT_CLASSIFICATION	2.9401997287868916E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999949059717196	WITHOUT_CLASSIFICATION	5.094028280454632E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998833138919	WITHOUT_CLASSIFICATION	1.1668610816215841E-7	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999984660181744	WITHOUT_CLASSIFICATION	1.533981825549872E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999611088793495	WITHOUT_CLASSIFICATION	3.889112065053814E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999991560229328	WITHOUT_CLASSIFICATION	8.439770672554219E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999996556876	WITHOUT_CLASSIFICATION	3.4431240001527414E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999992400893971	WITHOUT_CLASSIFICATION	7.599106028114986E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9995391532874843	WITHOUT_CLASSIFICATION	4.608467125157344E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999934156955187	WITHOUT_CLASSIFICATION	6.584304481344167E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999984141065589	WITHOUT_CLASSIFICATION	1.5858934410930944E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999969933344	WITHOUT_CLASSIFICATION	3.0066656133899475E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995745322038	WITHOUT_CLASSIFICATION	4.254677963050061E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999478003432	WITHOUT_CLASSIFICATION	5.219965683079072E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999990845075828	WITHOUT_CLASSIFICATION	9.154924171580768E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999977246353499	WITHOUT_CLASSIFICATION	2.2753646501363686E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999952565451423	WITHOUT_CLASSIFICATION	4.743454857719788E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999994976688554	WITHOUT_CLASSIFICATION	5.023311446769167E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9985583685623779	WITHOUT_CLASSIFICATION	0.0014416314376220606	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999892881570535	WITHOUT_CLASSIFICATION	1.0711842946588927E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999807819986704	WITHOUT_CLASSIFICATION	1.9218001329704052E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999904254183531	WITHOUT_CLASSIFICATION	9.574581646731403E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999911222306356	WITHOUT_CLASSIFICATION	8.877769364519092E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999889456275667	WITHOUT_CLASSIFICATION	1.105437243327353E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999952310042786	WITHOUT_CLASSIFICATION	4.768995721354331E-6	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999956240762086	WITHOUT_CLASSIFICATION	4.37592379139139E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999978043856328	WITHOUT_CLASSIFICATION	2.1956143672784696E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999989032195933	WITHOUT_CLASSIFICATION	1.0967804067005076E-6	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9960462679614971	WITHOUT_CLASSIFICATION	0.003953732038502945	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999963384087205	WITHOUT_CLASSIFICATION	3.6615912796559703E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999986663329787	WITHOUT_CLASSIFICATION	1.3336670213156728E-6	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997173266575	WITHOUT_CLASSIFICATION	2.8267334249421395E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999949059717196	WITHOUT_CLASSIFICATION	5.094028280454632E-6	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998170298176233	WITHOUT_CLASSIFICATION	1.829701823766819E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999008373978	WITHOUT_CLASSIFICATION	9.916260216237167E-8	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999681229657	WITHOUT_CLASSIFICATION	3.187703424891074E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999949059717196	WITHOUT_CLASSIFICATION	5.094028280454632E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.999999915198805	WITHOUT_CLASSIFICATION	8.480119494250473E-8	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999911222306356	WITHOUT_CLASSIFICATION	8.877769364519092E-6	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999650799148734	WITHOUT_CLASSIFICATION	3.4920085126578405E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9993700363853143	WITHOUT_CLASSIFICATION	6.299636146857539E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999463985639061	WITHOUT_CLASSIFICATION	5.360143609376927E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999999969933344	WITHOUT_CLASSIFICATION	3.0066656133899475E-8	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995745322038	WITHOUT_CLASSIFICATION	4.254677963050061E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999478003432	WITHOUT_CLASSIFICATION	5.219965683079072E-8	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999492083949	WITHOUT_CLASSIFICATION	5.07916052163642E-8	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999989682501422	WITHOUT_CLASSIFICATION	1.0317498576795296E-6	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996789846116	WITHOUT_CLASSIFICATION	3.210153884559883E-7	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999837711034	WITHOUT_CLASSIFICATION	1.6228896642141745E-8	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999909741727	WITHOUT_CLASSIFICATION	9.025827319131578E-9	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999949059717196	WITHOUT_CLASSIFICATION	5.094028280454632E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999990845075828	WITHOUT_CLASSIFICATION	9.154924171580768E-7	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999977246353499	WITHOUT_CLASSIFICATION	2.2753646501363686E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994663624883	WITHOUT_CLASSIFICATION	5.336375116861175E-7	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992676621167	WITHOUT_CLASSIFICATION	7.323378832729905E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999293569232	WITHOUT_CLASSIFICATION	7.064307681412959E-8	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998889373893	WITHOUT_CLASSIFICATION	1.1106261078134723E-7	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999116502972	WITHOUT_CLASSIFICATION	8.834970275229506E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999999812206975	WITHOUT_CLASSIFICATION	1.8779302502612388E-7	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99944781904531	WITHOUT_CLASSIFICATION	5.521809546900912E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999488642494	WITHOUT_CLASSIFICATION	5.11357505979099E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9984707789730771	WITHOUT_CLASSIFICATION	0.0015292210269229366	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999929929252038	WITHOUT_CLASSIFICATION	7.007074796142307E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999995210796664	WITHOUT_CLASSIFICATION	4.789203336884003E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998035784249	WITHOUT_CLASSIFICATION	1.9642157505351578E-7	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984912404406102	WITHOUT_CLASSIFICATION	0.0015087595593897083	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998952852931737	WITHOUT_CLASSIFICATION	1.0471470682632963E-4	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880649035466	WITHOUT_CLASSIFICATION	1.1935096453295192E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998035784249	WITHOUT_CLASSIFICATION	1.9642157505351578E-7	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999990375445764	WITHOUT_CLASSIFICATION	9.624554236181543E-7	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998406675188	WITHOUT_CLASSIFICATION	1.5933248118540269E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998386357353994	WITHOUT_CLASSIFICATION	1.6136426460058626E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989730556797933	WITHOUT_CLASSIFICATION	0.0010269443202065647	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999531207934776	WITHOUT_CLASSIFICATION	4.687920652239422E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.999578373919507	WITHOUT_CLASSIFICATION	4.2162608049293434E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999650408074492	WITHOUT_CLASSIFICATION	3.495919255083437E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701602407093	WITHOUT_CLASSIFICATION	2.983975929063205E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998656407374	WITHOUT_CLASSIFICATION	1.343592626536085E-7	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999947820513	WITHOUT_CLASSIFICATION	5.217948761988938E-9	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999398884755928	WITHOUT_CLASSIFICATION	6.011152440725021E-5	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999908393804	WITHOUT_CLASSIFICATION	9.160619669334699E-9	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999996823792106	WITHOUT_CLASSIFICATION	3.1762078941487844E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998371258739	WITHOUT_CLASSIFICATION	1.6287412612138208E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999978130093374	WITHOUT_CLASSIFICATION	2.186990662547157E-6	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999841141538981	WITHOUT_CLASSIFICATION	1.5885846101901688E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999241410092	WITHOUT_CLASSIFICATION	7.58589907160103E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999353165623421	WITHOUT_CLASSIFICATION	6.468343765783462E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999974326659732	WITHOUT_CLASSIFICATION	2.5673340268668687E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999346219253398	WITHOUT_CLASSIFICATION	6.537807466022762E-5	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999738332683	WITHOUT_CLASSIFICATION	2.6166731699903998E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999994385278133	WITHOUT_CLASSIFICATION	5.614721866774379E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999842368587681	WITHOUT_CLASSIFICATION	1.576314123180279E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773299903328	WITHOUT_CLASSIFICATION	2.2670009667180764E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926642868616705	WITHOUT_CLASSIFICATION	0.007335713138329487	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987042305563	WITHOUT_CLASSIFICATION	1.2957694437135246E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999957523541334	WITHOUT_CLASSIFICATION	4.247645866661894E-6	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999939446665991	WITHOUT_CLASSIFICATION	6.055333400907525E-6	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999895096417744	WITHOUT_CLASSIFICATION	1.0490358225557148E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999861196594437	WITHOUT_CLASSIFICATION	1.3880340556267756E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999940709294636	WITHOUT_CLASSIFICATION	5.929070536484987E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999940842548865	WITHOUT_CLASSIFICATION	5.915745113528347E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999991415734939	WITHOUT_CLASSIFICATION	8.584265061615367E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999985737232102	WITHOUT_CLASSIFICATION	1.4262767896794932E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999924059941997	WITHOUT_CLASSIFICATION	7.594005800259375E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9993013249574846	WITHOUT_CLASSIFICATION	6.986750425153635E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999895066620927	WITHOUT_CLASSIFICATION	1.0493337907303054E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991249379696	WITHOUT_CLASSIFICATION	8.750620304717959E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998865784477545	WITHOUT_CLASSIFICATION	1.1342155224541209E-4	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999996745752896	WITHOUT_CLASSIFICATION	3.2542471046788284E-7	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999714196499249	WITHOUT_CLASSIFICATION	2.8580350075143984E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.999998642395943	WITHOUT_CLASSIFICATION	1.3576040569386428E-6	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.99987546901478	WITHOUT_CLASSIFICATION	1.2453098521992176E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997433860280978	WITHOUT_CLASSIFICATION	2.5661397190224975E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999994728488368	WITHOUT_CLASSIFICATION	5.271511631296992E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999909496181274	WITHOUT_CLASSIFICATION	9.050381872657207E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999947904972806	WITHOUT_CLASSIFICATION	5.20950271939289E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999884641701036	WITHOUT_CLASSIFICATION	1.1535829896415881E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999978861241737	WITHOUT_CLASSIFICATION	2.1138758263336424E-6	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9992400094002393	WITHOUT_CLASSIFICATION	7.59990599760708E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999653009426	WITHOUT_CLASSIFICATION	3.469905751491063E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999699949805012	WITHOUT_CLASSIFICATION	3.0005019498799935E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999908750013896	WITHOUT_CLASSIFICATION	9.124998610339834E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.999990157121362	WITHOUT_CLASSIFICATION	9.84287863798542E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999989876658316	WITHOUT_CLASSIFICATION	1.0123341683443806E-6	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999730116214	WITHOUT_CLASSIFICATION	2.6988378594247037E-7	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999583666568179	WITHOUT_CLASSIFICATION	4.1633343182098106E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.84035201460793	WITHOUT_CLASSIFICATION	0.15964798539207015	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998982021199347	WITHOUT_CLASSIFICATION	1.0179788006518814E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999874296026972	WITHOUT_CLASSIFICATION	1.2570397302709485E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999999956565955	WITHOUT_CLASSIFICATION	4.3434045064883394E-8	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9991757398230039	WITHOUT_CLASSIFICATION	8.242601769961048E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999953733014668	WITHOUT_CLASSIFICATION	4.626698533198738E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999998702834064	WITHOUT_CLASSIFICATION	1.297165936003494E-6	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999709274947912	WITHOUT_CLASSIFICATION	2.907250520879536E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999773754763785	WITHOUT_CLASSIFICATION	2.2624523621371013E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999844484796638	WITHOUT_CLASSIFICATION	1.5551520336131405E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999795335129887	WITHOUT_CLASSIFICATION	2.0466487011258487E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999601005631	WITHOUT_CLASSIFICATION	3.989943698487684E-8	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998327042044	WITHOUT_CLASSIFICATION	1.6729579559708503E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998890933658	WITHOUT_CLASSIFICATION	1.1090663427937906E-7	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9995650342636658	WITHOUT_CLASSIFICATION	4.3496573633416714E-4	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9950959615010718	WITHOUT_CLASSIFICATION	0.004904038498928074	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999970884127078	WITHOUT_CLASSIFICATION	2.9115872920299963E-6	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999538869870107	WITHOUT_CLASSIFICATION	4.611301298936951E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999962836335526	WITHOUT_CLASSIFICATION	3.716366447486109E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999987530312645	WITHOUT_CLASSIFICATION	1.2469687354789587E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9997635953588221	WITHOUT_CLASSIFICATION	2.3640464117788662E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999979502711842	WITHOUT_CLASSIFICATION	2.0497288158488313E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.99999665135424	WITHOUT_CLASSIFICATION	3.3486457598990968E-6	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9971851159164136	WITHOUT_CLASSIFICATION	0.0028148840835864	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9995553830860693	WITHOUT_CLASSIFICATION	4.4461691393076305E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999686124102843	WITHOUT_CLASSIFICATION	3.138758971577355E-5	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999962627322698	WITHOUT_CLASSIFICATION	3.7372677300871036E-6	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998900267481311	WITHOUT_CLASSIFICATION	1.0997325186894382E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999068023650729	WITHOUT_CLASSIFICATION	9.319763492707498E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9997615024232164	WITHOUT_CLASSIFICATION	2.3849757678356213E-4	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999716975527805	WITHOUT_CLASSIFICATION	2.8302447219595877E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999995213574143	WITHOUT_CLASSIFICATION	4.786425856811611E-7	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999781363839968	WITHOUT_CLASSIFICATION	2.1863616003097415E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997980663947	WITHOUT_CLASSIFICATION	2.0193360536105762E-7	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999961663197305	WITHOUT_CLASSIFICATION	3.833680269452401E-6	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999985127017411	WITHOUT_CLASSIFICATION	1.4872982588457522E-6	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999619107246	WITHOUT_CLASSIFICATION	3.808927548245168E-8	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999925834178728	WITHOUT_CLASSIFICATION	7.416582127256133E-6	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999988489	WITHOUT_CLASSIFICATION	1.1510595636659057E-12	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999935513263216	WITHOUT_CLASSIFICATION	6.44867367837607E-6	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999375193427924	WITHOUT_CLASSIFICATION	6.248065720759743E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999477169367764	WITHOUT_CLASSIFICATION	5.228306322353457E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9997738026589004	WITHOUT_CLASSIFICATION	2.2619734109966092E-4	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998552173581229	WITHOUT_CLASSIFICATION	1.4478264187720526E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999814949646652	WITHOUT_CLASSIFICATION	1.850503533480072E-5	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9981595890324827	WITHOUT_CLASSIFICATION	0.0018404109675173178	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999876722271911	WITHOUT_CLASSIFICATION	1.2327772809014306E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999293618579569	WITHOUT_CLASSIFICATION	7.063814204315019E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999943541698891	WITHOUT_CLASSIFICATION	5.6458301108750574E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998360108464	WITHOUT_CLASSIFICATION	1.63989153648158E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999290078253722	WITHOUT_CLASSIFICATION	7.099217462781614E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999812895340208	WITHOUT_CLASSIFICATION	1.8710465979252447E-5	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999984124054763	WITHOUT_CLASSIFICATION	1.587594523651879E-6	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999290078253722	WITHOUT_CLASSIFICATION	7.099217462781614E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999402950397	WITHOUT_CLASSIFICATION	5.970496030865803E-8	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999988228378311	WITHOUT_CLASSIFICATION	1.1771621689161823E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998796693263525	WITHOUT_CLASSIFICATION	1.2033067364748393E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9921578316424611	WITHOUT_CLASSIFICATION	0.007842168357539004	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999989801290237	WITHOUT_CLASSIFICATION	1.0198709762668075E-6	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999995732099285	WITHOUT_CLASSIFICATION	4.2679007145300965E-7	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997908994246227	WITHOUT_CLASSIFICATION	2.0910057537725088E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999989950480437	WITHOUT_CLASSIFICATION	1.004951956411632E-6	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9971194392798287	WITHOUT_CLASSIFICATION	0.0028805607201713213	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999233227770798	WITHOUT_CLASSIFICATION	7.667722292012191E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999932307524	WITHOUT_CLASSIFICATION	6.769247593369432E-9	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999872411768698	WITHOUT_CLASSIFICATION	1.2758823130297357E-5	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999429012588456	WITHOUT_CLASSIFICATION	5.709874115439944E-5	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999893602938	WITHOUT_CLASSIFICATION	1.0639706187995897E-8	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999742206732523	WITHOUT_CLASSIFICATION	2.5779326747695014E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9998248951150948	WITHOUT_CLASSIFICATION	1.7510488490523924E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9941686717010633	WITHOUT_CLASSIFICATION	0.005831328298936771	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9941686717010633	WITHOUT_CLASSIFICATION	0.005831328298936771	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999577999639202	WITHOUT_CLASSIFICATION	4.2200036079888123E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999842132017379	WITHOUT_CLASSIFICATION	1.578679826216475E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999994592259793	WITHOUT_CLASSIFICATION	5.407740205755063E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9996980153689726	WITHOUT_CLASSIFICATION	3.019846310273336E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999979978107901	WITHOUT_CLASSIFICATION	2.0021892098582724E-6	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999934226957468	WITHOUT_CLASSIFICATION	6.577304253279534E-6	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999966943551875	WITHOUT_CLASSIFICATION	3.305644812573744E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999951104166	WITHOUT_CLASSIFICATION	4.889583450750034E-9	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999998619766107	WITHOUT_CLASSIFICATION	1.380233893212397E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998668395833942	WITHOUT_CLASSIFICATION	1.331604166058141E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999998331975697	WITHOUT_CLASSIFICATION	1.668024302814148E-7	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999997921367574	WITHOUT_CLASSIFICATION	2.0786324261311005E-7	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999996577152437	WITHOUT_CLASSIFICATION	3.4228475630311657E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999943187270751	WITHOUT_CLASSIFICATION	5.681272924901691E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999857091387	WITHOUT_CLASSIFICATION	1.4290861371174313E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999842368587681	WITHOUT_CLASSIFICATION	1.576314123180279E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997771184568778	WITHOUT_CLASSIFICATION	2.228815431222366E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999992782597187	WITHOUT_CLASSIFICATION	7.217402813434503E-7	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9991647953342739	WITHOUT_CLASSIFICATION	8.352046657261056E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999686782054047	WITHOUT_CLASSIFICATION	3.1321794595412946E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999998500123675	WITHOUT_CLASSIFICATION	1.4998763244856273E-7	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999810203540451	WITHOUT_CLASSIFICATION	1.897964595482806E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999975158566	WITHOUT_CLASSIFICATION	2.4841433427554363E-9	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999995179694507	WITHOUT_CLASSIFICATION	4.820305492845868E-7	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999566000611522	WITHOUT_CLASSIFICATION	4.339993884786073E-5	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999535028393611	WITHOUT_CLASSIFICATION	4.6497160638954374E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999995805288	WITHOUT_CLASSIFICATION	4.19471192541932E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999968371730275	WITHOUT_CLASSIFICATION	3.162826972542674E-6	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.999966302172801	WITHOUT_CLASSIFICATION	3.3697827198948085E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999980354120455	WITHOUT_CLASSIFICATION	1.9645879545981733E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999744666431265	WITHOUT_CLASSIFICATION	2.5533356873595062E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999989395899657	WITHOUT_CLASSIFICATION	1.0604100343933371E-6	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999952799118582	WITHOUT_CLASSIFICATION	4.720088141716523E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999998083453459	WITHOUT_CLASSIFICATION	1.9165465410202817E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999992942118501	WITHOUT_CLASSIFICATION	7.05788149948851E-7	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999984623501096	WITHOUT_CLASSIFICATION	1.537649890410941E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998326615081014	WITHOUT_CLASSIFICATION	1.6733849189861928E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999964630794668	WITHOUT_CLASSIFICATION	3.5369205332166785E-6	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999984444058415	WITHOUT_CLASSIFICATION	1.5555941584616424E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999998223068131	WITHOUT_CLASSIFICATION	1.7769318689035977E-6	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999981872082435	WITHOUT_CLASSIFICATION	1.8127917564710488E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999989797232294	WITHOUT_CLASSIFICATION	1.0202767705967862E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999951565202855	WITHOUT_CLASSIFICATION	4.84347971450349E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999964823139359	WITHOUT_CLASSIFICATION	3.5176860639999132E-6	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999992565781037	WITHOUT_CLASSIFICATION	7.434218963218735E-7	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999999034116532	WITHOUT_CLASSIFICATION	9.658834679662526E-7	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934513367849	WITHOUT_CLASSIFICATION	6.548663215067212E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971461502939	WITHOUT_CLASSIFICATION	2.8538497061889644E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753828372429	WITHOUT_CLASSIFICATION	2.4617162757167507E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999647408587573	WITHOUT_CLASSIFICATION	3.525914124272674E-5	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999987670305621	WITHOUT_CLASSIFICATION	1.2329694378749468E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999984523178356	WITHOUT_CLASSIFICATION	1.5476821645095586E-6	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999977675454735	WITHOUT_CLASSIFICATION	2.2324545263659426E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999984179404114	WITHOUT_CLASSIFICATION	1.5820595886167003E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929570574773	WITHOUT_CLASSIFICATION	7.042942522732663E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999984179404114	WITHOUT_CLASSIFICATION	1.5820595886167003E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999375516759216	WITHOUT_CLASSIFICATION	6.244832407841187E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999988605591849	WITHOUT_CLASSIFICATION	1.1394408151303226E-6	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999794380746176	WITHOUT_CLASSIFICATION	2.056192538230712E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999968217841989	WITHOUT_CLASSIFICATION	3.178215801082431E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999964179984334	WITHOUT_CLASSIFICATION	3.582001566622377E-6	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999988622024611	WITHOUT_CLASSIFICATION	1.1377975388328967E-6	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999958621577869	WITHOUT_CLASSIFICATION	4.137842213158328E-6	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998246476945	WITHOUT_CLASSIFICATION	1.7535230538625122E-7	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999997840491109	WITHOUT_CLASSIFICATION	2.1595088903355923E-7	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9867104905159507	WITHOUT_CLASSIFICATION	0.013289509484049259	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999995165673835	WITHOUT_CLASSIFICATION	4.834326165151816E-7	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999679454387805	WITHOUT_CLASSIFICATION	3.2054561219429695E-5	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999948844706323	WITHOUT_CLASSIFICATION	5.115529367705136E-6	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999893854506587	WITHOUT_CLASSIFICATION	1.0614549341271415E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9335701233851146	WITHOUT_CLASSIFICATION	0.06642987661488552	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999987783323803	WITHOUT_CLASSIFICATION	1.2216676196696018E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999979826000807	WITHOUT_CLASSIFICATION	2.0173999193560297E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999979826000807	WITHOUT_CLASSIFICATION	2.0173999193560297E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999981817686423	WITHOUT_CLASSIFICATION	1.8182313576908007E-5	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999999714669353	WITHOUT_CLASSIFICATION	2.853306469984448E-7	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999638403081	WITHOUT_CLASSIFICATION	3.6159691936464974E-8	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999995221447225	WITHOUT_CLASSIFICATION	4.77855277513753E-7	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999892074858	WITHOUT_CLASSIFICATION	1.079251427016154E-8	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999931103303883	WITHOUT_CLASSIFICATION	6.8896696117145895E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.6181290450227718	WITHOUT_CLASSIFICATION	0.3818709549772283	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999991301477251	WITHOUT_CLASSIFICATION	8.698522749245977E-7	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999994798377217	WITHOUT_CLASSIFICATION	5.201622783134442E-7	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999963991299253	WITHOUT_CLASSIFICATION	3.6008700745912635E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998756114571	WITHOUT_CLASSIFICATION	1.2438854282153646E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999991532022722	WITHOUT_CLASSIFICATION	8.467977278437946E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999763958870173	WITHOUT_CLASSIFICATION	2.360411298279652E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999973787453081	WITHOUT_CLASSIFICATION	2.621254691943902E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998888755961847	WITHOUT_CLASSIFICATION	1.111244038153304E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999998516433	WITHOUT_CLASSIFICATION	1.4835669616318032E-9	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999949812792893	WITHOUT_CLASSIFICATION	5.018720710702065E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999621116229916	WITHOUT_CLASSIFICATION	3.788837700846005E-5	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999094194594029	WITHOUT_CLASSIFICATION	9.058054059712905E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999942496214153	WITHOUT_CLASSIFICATION	5.7503785848083035E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999986848945299	WITHOUT_CLASSIFICATION	1.3151054700395847E-6	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999906220747958	WITHOUT_CLASSIFICATION	9.377925204201833E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999732633842453	WITHOUT_CLASSIFICATION	2.6736615754721716E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999834782864299	WITHOUT_CLASSIFICATION	1.6521713570163454E-5	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9970264188134766	WITHOUT_CLASSIFICATION	0.0029735811865233583	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.999999862536187	WITHOUT_CLASSIFICATION	1.374638130923006E-7	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999295408171	WITHOUT_CLASSIFICATION	7.045918290121096E-7	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9976731769061914	WITHOUT_CLASSIFICATION	0.0023268230938085447	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999966019647212	WITHOUT_CLASSIFICATION	3.398035278837278E-6	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999323884643	WITHOUT_CLASSIFICATION	6.76115356962814E-8	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999400962124	WITHOUT_CLASSIFICATION	5.990378758960931E-8	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999941597194223	WITHOUT_CLASSIFICATION	5.840280577699534E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998469624121775	WITHOUT_CLASSIFICATION	1.5303758782258742E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999318736024542	WITHOUT_CLASSIFICATION	6.812639754584756E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994472595452732	WITHOUT_CLASSIFICATION	5.527404547266956E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999865581721855	WITHOUT_CLASSIFICATION	1.344182781455752E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999940894367463	WITHOUT_CLASSIFICATION	5.910563253703944E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999593852207517	WITHOUT_CLASSIFICATION	4.0614779248370076E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999998510005687	WITHOUT_CLASSIFICATION	1.4899943137482902E-7	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999952526377957	WITHOUT_CLASSIFICATION	4.747362204288928E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999858065785	WITHOUT_CLASSIFICATION	1.4193421537157106E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996262471011	WITHOUT_CLASSIFICATION	3.73752898808916E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999931637008208	WITHOUT_CLASSIFICATION	6.836299179211655E-6	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9603063469429065	WITHOUT_CLASSIFICATION	0.03969365305709356	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9998200115637326	WITHOUT_CLASSIFICATION	1.7998843626733043E-4	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9955275823877615	WITHOUT_CLASSIFICATION	0.0044724176122384555	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.5962146449588245	IMPLEMENTATION	0.4037853550411756	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999903340545	WITHOUT_CLASSIFICATION	9.665945438483759E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999881417580406	WITHOUT_CLASSIFICATION	1.1858241959271923E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999790223328243	WITHOUT_CLASSIFICATION	2.0977667175757745E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996056329408	WITHOUT_CLASSIFICATION	3.9436705931324266E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999995695490091	WITHOUT_CLASSIFICATION	4.3045099084157036E-7	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999985000937591	WITHOUT_CLASSIFICATION	1.4999062408056473E-6	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9997046643631233	WITHOUT_CLASSIFICATION	2.9533563687668375E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999757341125999	WITHOUT_CLASSIFICATION	2.4265887400176906E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.999999915198805	WITHOUT_CLASSIFICATION	8.480119494250473E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.999999915198805	WITHOUT_CLASSIFICATION	8.480119494250473E-8	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999992627048825	WITHOUT_CLASSIFICATION	7.372951175775198E-7	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999509574224272	WITHOUT_CLASSIFICATION	4.904257757281225E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999996206001974	WITHOUT_CLASSIFICATION	3.7939980262251987E-7	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999976158272472	WITHOUT_CLASSIFICATION	2.3841727528788897E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999946462921396	WITHOUT_CLASSIFICATION	5.353707860444263E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9977614864275619	WITHOUT_CLASSIFICATION	0.0022385135724380927	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999101738100078	WITHOUT_CLASSIFICATION	8.982618999227275E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999998195145087	WITHOUT_CLASSIFICATION	1.8048549129878759E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999998492538599	WITHOUT_CLASSIFICATION	1.5074614005233046E-7	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998840516244523	WITHOUT_CLASSIFICATION	1.1594837554780624E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999921903681799	WITHOUT_CLASSIFICATION	7.809631820100288E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999271795554071	WITHOUT_CLASSIFICATION	7.282044459281186E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999929035749336	WITHOUT_CLASSIFICATION	7.096425066363783E-6	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999668374182	WITHOUT_CLASSIFICATION	3.3162581836679054E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999974097559535	WITHOUT_CLASSIFICATION	2.5902440465294444E-6	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999981160220622	WITHOUT_CLASSIFICATION	1.8839779377490029E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989671058476	WITHOUT_CLASSIFICATION	1.0328941524207662E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9999482679993666	WITHOUT_CLASSIFICATION	5.17320006332468E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999996317631591	WITHOUT_CLASSIFICATION	3.6823684093105046E-7	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9994568287757704	WITHOUT_CLASSIFICATION	5.431712242296931E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999979924785	WITHOUT_CLASSIFICATION	2.0075214797543126E-9	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999984438467123	WITHOUT_CLASSIFICATION	1.556153287733704E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998928156693407	WITHOUT_CLASSIFICATION	1.0718433065929265E-4	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9990806753750235	WITHOUT_CLASSIFICATION	9.193246249765129E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998768805839179	WITHOUT_CLASSIFICATION	1.2311941608218955E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9951299158483179	WITHOUT_CLASSIFICATION	0.004870084151682102	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9974037164214584	WITHOUT_CLASSIFICATION	0.002596283578541508	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997919375921585	WITHOUT_CLASSIFICATION	2.0806240784155563E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999593119781394	WITHOUT_CLASSIFICATION	4.068802186065893E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998928156693407	WITHOUT_CLASSIFICATION	1.0718433065929265E-4	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999993776553349	WITHOUT_CLASSIFICATION	6.22344665045154E-7	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999985801042	WITHOUT_CLASSIFICATION	1.419895738958606E-9	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.999980982820052	WITHOUT_CLASSIFICATION	1.9017179947967684E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999936075422123	WITHOUT_CLASSIFICATION	6.39245778762227E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999998235243471	WITHOUT_CLASSIFICATION	1.7647565290545705E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998174902440237	WITHOUT_CLASSIFICATION	1.8250975597633229E-4	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999894892221712	WITHOUT_CLASSIFICATION	1.0510777828771386E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999997508024064	WITHOUT_CLASSIFICATION	2.491975936076428E-7	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.985442890168767	WITHOUT_CLASSIFICATION	0.014557109831233022	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999936075422123	WITHOUT_CLASSIFICATION	6.39245778762227E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999645392805	WITHOUT_CLASSIFICATION	3.546071944368586E-8	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996620026675	WITHOUT_CLASSIFICATION	3.379973324085229E-7	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9996847767890081	WITHOUT_CLASSIFICATION	3.152232109918505E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998847210875781	WITHOUT_CLASSIFICATION	1.1527891242186402E-4	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9978493566911928	WITHOUT_CLASSIFICATION	0.002150643308807151	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998756114571	WITHOUT_CLASSIFICATION	1.2438854282153646E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999992861594227	WITHOUT_CLASSIFICATION	7.138405773995042E-7	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999874838195486	WITHOUT_CLASSIFICATION	1.251618045129092E-5	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999992706022219	WITHOUT_CLASSIFICATION	7.293977780440613E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9921097142293638	WITHOUT_CLASSIFICATION	0.007890285770636237	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999943791896	WITHOUT_CLASSIFICATION	5.620810409961827E-9	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999911876058682	WITHOUT_CLASSIFICATION	8.812394131842947E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999935278052593	WITHOUT_CLASSIFICATION	6.472194740677987E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999636520526	WITHOUT_CLASSIFICATION	3.6347947444065276E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999995351102169	WITHOUT_CLASSIFICATION	4.6488978307022786E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998552744795786	WITHOUT_CLASSIFICATION	1.4472552042144968E-4	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999131836698848	WITHOUT_CLASSIFICATION	8.681633011525888E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999663978366	WITHOUT_CLASSIFICATION	3.3602163359441794E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999995417449375	WITHOUT_CLASSIFICATION	4.5825506252375066E-7	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998635700384335	WITHOUT_CLASSIFICATION	1.3642996156650524E-4	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999927638893592	WITHOUT_CLASSIFICATION	7.236110640694314E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999999022901402	WITHOUT_CLASSIFICATION	9.77098598105319E-8	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998721583661907	WITHOUT_CLASSIFICATION	1.2784163380933229E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999925254842306	WITHOUT_CLASSIFICATION	7.474515769435136E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999603451339064	WITHOUT_CLASSIFICATION	3.965486609357494E-5	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999992279238541	WITHOUT_CLASSIFICATION	7.720761458984241E-6	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999889848144808	WITHOUT_CLASSIFICATION	1.1015185519096808E-5	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999941178909736	WITHOUT_CLASSIFICATION	5.882109026434135E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998281814788	WITHOUT_CLASSIFICATION	1.7181852119146576E-7	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999945461748	WITHOUT_CLASSIFICATION	5.453825238715942E-9	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998930358005289	WITHOUT_CLASSIFICATION	1.0696419947110204E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9996623670880775	WITHOUT_CLASSIFICATION	3.376329119224408E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999976078715871	WITHOUT_CLASSIFICATION	2.3921284130003972E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987611876365	WITHOUT_CLASSIFICATION	1.2388123635349798E-6	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985175486268	WITHOUT_CLASSIFICATION	1.4824513732400482E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9997850079162173	WITHOUT_CLASSIFICATION	2.1499208378271837E-4	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999261450148341	WITHOUT_CLASSIFICATION	7.385498516591663E-5	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999959953690938	WITHOUT_CLASSIFICATION	4.004630906164756E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964513091248	WITHOUT_CLASSIFICATION	3.5486908751664564E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964513091248	WITHOUT_CLASSIFICATION	3.5486908751664564E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999367908967	WITHOUT_CLASSIFICATION	6.320910319760478E-8	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9826453962352196	WITHOUT_CLASSIFICATION	0.017354603764780274	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999843359828828	WITHOUT_CLASSIFICATION	1.5664017117129353E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999784903685363	WITHOUT_CLASSIFICATION	2.1509631463790074E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999898944866594	WITHOUT_CLASSIFICATION	1.0105513340592659E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999915360186247	WITHOUT_CLASSIFICATION	8.463981375416876E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999958955142962	WITHOUT_CLASSIFICATION	4.10448570377919E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999957735305165	WITHOUT_CLASSIFICATION	4.226469483607577E-6	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999960630292514	WITHOUT_CLASSIFICATION	3.936970748696025E-6	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999498224877829	WITHOUT_CLASSIFICATION	5.017751221707823E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999989929845032	WITHOUT_CLASSIFICATION	1.0070154967812227E-6	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999990383577511	WITHOUT_CLASSIFICATION	9.616422489486352E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999968302571742	WITHOUT_CLASSIFICATION	3.169742825793124E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964513091248	WITHOUT_CLASSIFICATION	3.5486908751664564E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999992308921521	WITHOUT_CLASSIFICATION	7.691078479497276E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999466672590073	WITHOUT_CLASSIFICATION	5.333274099280097E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9949012760458452	WITHOUT_CLASSIFICATION	0.005098723954154828	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999995250222864	WITHOUT_CLASSIFICATION	4.749777135950908E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9997962980942623	WITHOUT_CLASSIFICATION	2.0370190573767524E-4	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999994499359324	WITHOUT_CLASSIFICATION	5.500640675648722E-7	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9979383167842448	WITHOUT_CLASSIFICATION	0.0020616832157552504	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999956087117637	WITHOUT_CLASSIFICATION	4.391288236295339E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999995348326485	WITHOUT_CLASSIFICATION	4.651673514813961E-7	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998240887867609	WITHOUT_CLASSIFICATION	1.7591121323922042E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9989938631045087	WITHOUT_CLASSIFICATION	0.0010061368954913275	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987611876365	WITHOUT_CLASSIFICATION	1.2388123635349798E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964513091248	WITHOUT_CLASSIFICATION	3.5486908751664564E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999728374258784	WITHOUT_CLASSIFICATION	2.7162574121550423E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999996875390045	WITHOUT_CLASSIFICATION	3.124609955316606E-7	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999995570913801	WITHOUT_CLASSIFICATION	4.429086199031979E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999993650289646	WITHOUT_CLASSIFICATION	6.349710353907816E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999992494500627	WITHOUT_CLASSIFICATION	7.505499373644146E-7	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999993429578723	WITHOUT_CLASSIFICATION	6.570421277926442E-7	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985110404244	WITHOUT_CLASSIFICATION	1.4889595755295593E-6	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999999255516	WITHOUT_CLASSIFICATION	7.444840176063892E-10	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999926793777	WITHOUT_CLASSIFICATION	7.320622322490076E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999998452117229	WITHOUT_CLASSIFICATION	1.5478827705126711E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999995906443362	WITHOUT_CLASSIFICATION	4.093556637986943E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999389734132139	WITHOUT_CLASSIFICATION	6.102658678608877E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999994483999173	WITHOUT_CLASSIFICATION	5.51600082689739E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999980578833284	WITHOUT_CLASSIFICATION	1.942116671578043E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999375516759216	WITHOUT_CLASSIFICATION	6.244832407841187E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999557926281	WITHOUT_CLASSIFICATION	4.4207371997024624E-8	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999999873589631	WITHOUT_CLASSIFICATION	1.2641036893431476E-7	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999998520039742	WITHOUT_CLASSIFICATION	1.4799602571827032E-7	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999926932859619	WITHOUT_CLASSIFICATION	7.306714038098425E-6	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999665539148	WITHOUT_CLASSIFICATION	3.344608527309256E-8	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997555953626028	WITHOUT_CLASSIFICATION	2.4440463739714303E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997555953626028	WITHOUT_CLASSIFICATION	2.4440463739714303E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999666689788067	WITHOUT_CLASSIFICATION	3.333102119327634E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999999997854014	WITHOUT_CLASSIFICATION	2.1459859189702685E-9	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9988999796549358	WITHOUT_CLASSIFICATION	0.0011000203450641788	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9997413099652454	WITHOUT_CLASSIFICATION	2.586900347546014E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999716921675966	WITHOUT_CLASSIFICATION	2.830783240339839E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999963103301688	WITHOUT_CLASSIFICATION	3.689669831348957E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999996425261233	WITHOUT_CLASSIFICATION	3.5747387670807984E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999543036394	WITHOUT_CLASSIFICATION	4.569636059079429E-8	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999543036394	WITHOUT_CLASSIFICATION	4.569636059079429E-8	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.99999033669815	WITHOUT_CLASSIFICATION	9.663301850048804E-6	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999997324564881	WITHOUT_CLASSIFICATION	2.6754351190676007E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999969515452075	WITHOUT_CLASSIFICATION	3.048454792507765E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994332804495	WITHOUT_CLASSIFICATION	5.66719550424951E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994332804495	WITHOUT_CLASSIFICATION	5.66719550424951E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994332804495	WITHOUT_CLASSIFICATION	5.66719550424951E-7	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999974252715789	WITHOUT_CLASSIFICATION	2.5747284210996697E-6	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999896374822	WITHOUT_CLASSIFICATION	1.0362517824807656E-8	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.949209539606779	WITHOUT_CLASSIFICATION	0.05079046039322099	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998759801606306	WITHOUT_CLASSIFICATION	1.240198393693873E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999997101885649	WITHOUT_CLASSIFICATION	2.8981143506774404E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964513091248	WITHOUT_CLASSIFICATION	3.5486908751664564E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964513091248	WITHOUT_CLASSIFICATION	3.5486908751664564E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9997499586467866	WITHOUT_CLASSIFICATION	2.500413532134135E-4	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9996227358591753	WITHOUT_CLASSIFICATION	3.7726414082470995E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9998681512241742	WITHOUT_CLASSIFICATION	1.318487758259043E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999992817912612	WITHOUT_CLASSIFICATION	7.182087387738743E-7	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999805673953996	WITHOUT_CLASSIFICATION	1.943260460038019E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.99999337006396	WITHOUT_CLASSIFICATION	6.62993603991029E-6	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999953911019247	WITHOUT_CLASSIFICATION	4.608898075223853E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999981805809428	WITHOUT_CLASSIFICATION	1.8194190572389866E-6	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999508408716	WITHOUT_CLASSIFICATION	4.9159128440653166E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999992866763534	WITHOUT_CLASSIFICATION	7.133236465349589E-7	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999968262471344	WITHOUT_CLASSIFICATION	3.1737528655796823E-6	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999996798388361	WITHOUT_CLASSIFICATION	3.2016116381709395E-7	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999996798388361	WITHOUT_CLASSIFICATION	3.2016116381709395E-7	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999996646443535	WITHOUT_CLASSIFICATION	3.353556463651652E-7	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999996646443535	WITHOUT_CLASSIFICATION	3.353556463651652E-7	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999996658657154	WITHOUT_CLASSIFICATION	3.3413428465276463E-7	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999998610271732	WITHOUT_CLASSIFICATION	1.3897282680359697E-6	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999998610271732	WITHOUT_CLASSIFICATION	1.3897282680359697E-6	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999986160171388	WITHOUT_CLASSIFICATION	1.3839828612253152E-6	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999989248291968	WITHOUT_CLASSIFICATION	1.0751708032083559E-6	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999749542465008	WITHOUT_CLASSIFICATION	2.5045753499155213E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997555953626028	WITHOUT_CLASSIFICATION	2.4440463739714303E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999423727286877	WITHOUT_CLASSIFICATION	5.7627271312360235E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999989248291968	WITHOUT_CLASSIFICATION	1.0751708032083559E-6	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9997176236558573	WITHOUT_CLASSIFICATION	2.823763441426802E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999970153096994	WITHOUT_CLASSIFICATION	2.984690300597069E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999999343752832	WITHOUT_CLASSIFICATION	6.562471679219614E-7	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999993282009544	WITHOUT_CLASSIFICATION	6.717990455571396E-7	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999982763758283	WITHOUT_CLASSIFICATION	1.7236241717706556E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999499804650556	WITHOUT_CLASSIFICATION	5.001953494439226E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999982251386285	WITHOUT_CLASSIFICATION	1.7748613715971194E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998433302306879	WITHOUT_CLASSIFICATION	1.5666976931212525E-4	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999876330380203	WITHOUT_CLASSIFICATION	1.2366961979731809E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999862889255	WITHOUT_CLASSIFICATION	1.3711074501866522E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999923764726	WITHOUT_CLASSIFICATION	7.623527284206024E-9	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999971078828134	WITHOUT_CLASSIFICATION	2.892117186534868E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999946585980948	WITHOUT_CLASSIFICATION	5.341401905202071E-6	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999947094606064	WITHOUT_CLASSIFICATION	5.290539393554315E-6	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9983652857710886	WITHOUT_CLASSIFICATION	0.0016347142289113183	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9998303090211147	WITHOUT_CLASSIFICATION	1.6969097888537742E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999302778699	WITHOUT_CLASSIFICATION	6.972213001429387E-8	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999993860537671	WITHOUT_CLASSIFICATION	6.13946232862819E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999993860537671	WITHOUT_CLASSIFICATION	6.13946232862819E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999997938278983	WITHOUT_CLASSIFICATION	2.0617210178561755E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998982112357	WITHOUT_CLASSIFICATION	1.017887643205267E-7	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999997660873402	WITHOUT_CLASSIFICATION	2.3391265991406133E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996694560354668	WITHOUT_CLASSIFICATION	3.305439645332879E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999949303707008	WITHOUT_CLASSIFICATION	5.069629299274895E-6	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999704405460306	WITHOUT_CLASSIFICATION	2.9559453969315637E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998721288582458	WITHOUT_CLASSIFICATION	1.2787114175417857E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999977516500717	WITHOUT_CLASSIFICATION	2.2483499283430987E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999716475708738	WITHOUT_CLASSIFICATION	2.8352429126271144E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998999710457	WITHOUT_CLASSIFICATION	1.0002895433876435E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999542947163	WITHOUT_CLASSIFICATION	4.570528374610284E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999389734132139	WITHOUT_CLASSIFICATION	6.102658678608877E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999994082402973	WITHOUT_CLASSIFICATION	5.917597025874621E-7	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999825135257655	WITHOUT_CLASSIFICATION	1.748647423449091E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999984805209716	WITHOUT_CLASSIFICATION	1.5194790283887194E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999227505829477	WITHOUT_CLASSIFICATION	7.72494170523629E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999980162433695	WITHOUT_CLASSIFICATION	1.9837566304036095E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999980162433695	WITHOUT_CLASSIFICATION	1.9837566304036095E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999456994929841	WITHOUT_CLASSIFICATION	5.430050701603985E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999757267671322	WITHOUT_CLASSIFICATION	2.4273232867808715E-5	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9996327604433964	WITHOUT_CLASSIFICATION	3.6723955660365894E-4	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999641402767062	WITHOUT_CLASSIFICATION	3.585972329369217E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999984211160968	WITHOUT_CLASSIFICATION	1.578883903213128E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999605089032333	WITHOUT_CLASSIFICATION	3.949109676672667E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993354763410104	WITHOUT_CLASSIFICATION	6.64523658989585E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999995125547726	WITHOUT_CLASSIFICATION	4.874452274006312E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9992740215673062	WITHOUT_CLASSIFICATION	7.259784326938493E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999856245285	WITHOUT_CLASSIFICATION	1.4375471541021921E-8	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999612416327	WITHOUT_CLASSIFICATION	3.8758367207870074E-8	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999995125547726	WITHOUT_CLASSIFICATION	4.874452274006312E-7	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999956856069494	WITHOUT_CLASSIFICATION	4.314393050548918E-6	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999868974312589	WITHOUT_CLASSIFICATION	1.310256874113612E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999709803187	WITHOUT_CLASSIFICATION	2.9019681344319074E-8	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999998472205642	WITHOUT_CLASSIFICATION	1.5277943572668453E-7	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998627609982	WITHOUT_CLASSIFICATION	1.372390018056205E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999995923397853	WITHOUT_CLASSIFICATION	4.0766021463129225E-7	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998960304042958	WITHOUT_CLASSIFICATION	1.0396959570433661E-4	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999929137219037	WITHOUT_CLASSIFICATION	7.086278096301649E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999996103532537	WITHOUT_CLASSIFICATION	3.8964674624367793E-7	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999479339846544	WITHOUT_CLASSIFICATION	5.206601534558081E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9977308720870782	WITHOUT_CLASSIFICATION	0.002269127912921695	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999996425632388	WITHOUT_CLASSIFICATION	3.574367611558433E-7	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999957367458456	WITHOUT_CLASSIFICATION	4.263254154374022E-6	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.99999838976895	WITHOUT_CLASSIFICATION	1.6102310500647758E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998248537670856	WITHOUT_CLASSIFICATION	1.7514623291435E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999967901178085	WITHOUT_CLASSIFICATION	3.2098821913570463E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999981545237635	WITHOUT_CLASSIFICATION	1.8454762365547608E-6	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9998781310807006	WITHOUT_CLASSIFICATION	1.2186891929947132E-4	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999539784712016	WITHOUT_CLASSIFICATION	4.602152879839523E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998979659539687	WITHOUT_CLASSIFICATION	1.0203404603122396E-4	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999996721224735	WITHOUT_CLASSIFICATION	3.2787752647761776E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999951006695377	WITHOUT_CLASSIFICATION	4.899330462250482E-6	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999996937869811	WITHOUT_CLASSIFICATION	3.0621301889996947E-6	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999990529248864	WITHOUT_CLASSIFICATION	9.470751136632052E-7	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998267533303	WITHOUT_CLASSIFICATION	1.7324666964789077E-7	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9997578172781436	WITHOUT_CLASSIFICATION	2.4218272185646617E-4	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999933169896631	WITHOUT_CLASSIFICATION	6.683010336900074E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9998186325282852	WITHOUT_CLASSIFICATION	1.8136747171481035E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999989827859791	WITHOUT_CLASSIFICATION	1.0172140208336922E-6	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9996047929965007	WITHOUT_CLASSIFICATION	3.952070034992674E-4	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999768346901	WITHOUT_CLASSIFICATION	2.3165309916043794E-8	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999932873497419	WITHOUT_CLASSIFICATION	6.712650258030724E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999760445158372	WITHOUT_CLASSIFICATION	2.3955484162762877E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999903233158	WITHOUT_CLASSIFICATION	9.6766841435219E-9	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999952893303521	WITHOUT_CLASSIFICATION	4.710669647900675E-6	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999843693369843	WITHOUT_CLASSIFICATION	1.5630663015662244E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999997491908129	WITHOUT_CLASSIFICATION	2.508091871348842E-7	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999993837245	WITHOUT_CLASSIFICATION	6.162754987034524E-9	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998243016709	WITHOUT_CLASSIFICATION	1.7569832900635822E-7	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999653682472658	WITHOUT_CLASSIFICATION	3.463175273418542E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999981098440834	WITHOUT_CLASSIFICATION	1.8901559165857454E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999356813469	WITHOUT_CLASSIFICATION	6.431865310477E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999819314725807	WITHOUT_CLASSIFICATION	1.806852741926733E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997848985497	WITHOUT_CLASSIFICATION	2.1510145033291858E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999997304190584	WITHOUT_CLASSIFICATION	2.6958094151614353E-7	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999997932826563	WITHOUT_CLASSIFICATION	2.0671734361845222E-7	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999985197603213	WITHOUT_CLASSIFICATION	1.4802396788099784E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999980725798279	WITHOUT_CLASSIFICATION	1.9274201721650637E-6	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999992880786852	WITHOUT_CLASSIFICATION	7.119213148487056E-7	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999768002554251	WITHOUT_CLASSIFICATION	2.319974457490718E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999461303348607	WITHOUT_CLASSIFICATION	5.3869665139270954E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999925776201517	WITHOUT_CLASSIFICATION	7.422379848376864E-6	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999897580426	WITHOUT_CLASSIFICATION	1.0241957344874612E-8	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999977903764	WITHOUT_CLASSIFICATION	2.2096236555445205E-9	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999995189983005	WITHOUT_CLASSIFICATION	4.810016995318966E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999851210372344	WITHOUT_CLASSIFICATION	1.4878962765595356E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9994620821378856	WITHOUT_CLASSIFICATION	5.379178621143876E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999828753183698	WITHOUT_CLASSIFICATION	1.712468163019807E-4	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.999998051275306	WITHOUT_CLASSIFICATION	1.948724693886731E-6	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999998544816295	WITHOUT_CLASSIFICATION	1.4551837056485852E-7	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999995160765794	WITHOUT_CLASSIFICATION	4.839234205197126E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999907452696788	WITHOUT_CLASSIFICATION	9.254730321195908E-6	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999855809140918	WITHOUT_CLASSIFICATION	1.441908590809303E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999995208256063	WITHOUT_CLASSIFICATION	4.791743937130952E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999997663228687	WITHOUT_CLASSIFICATION	2.3367713132984965E-7	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999590546168349	WITHOUT_CLASSIFICATION	4.0945383165155036E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999461303348607	WITHOUT_CLASSIFICATION	5.3869665139270954E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999932190924894	WITHOUT_CLASSIFICATION	6.7809075105534345E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999640925133059	WITHOUT_CLASSIFICATION	3.5907486694074894E-5	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999063724611	WITHOUT_CLASSIFICATION	9.362753894586817E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999977295591338	WITHOUT_CLASSIFICATION	2.2704408661841447E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998780289725093	WITHOUT_CLASSIFICATION	1.2197102749073674E-4	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999999352023729	WITHOUT_CLASSIFICATION	6.479762709768044E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9992740215673062	WITHOUT_CLASSIFICATION	7.259784326938493E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974350700804	WITHOUT_CLASSIFICATION	2.5649299194555657E-6	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999952893303521	WITHOUT_CLASSIFICATION	4.710669647900675E-6	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999992401044982	WITHOUT_CLASSIFICATION	7.598955018048166E-6	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999995066257207	WITHOUT_CLASSIFICATION	4.933742792198998E-7	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999978128218	WITHOUT_CLASSIFICATION	2.187178205017761E-8	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999070742374	WITHOUT_CLASSIFICATION	9.292576260523571E-8	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999628639425716	WITHOUT_CLASSIFICATION	3.713605742837009E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999905601756284	WITHOUT_CLASSIFICATION	9.439824371511964E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999987322518248	WITHOUT_CLASSIFICATION	1.2677481752214268E-6	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999997033575159	WITHOUT_CLASSIFICATION	2.966424840513583E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999926331647931	WITHOUT_CLASSIFICATION	7.366835206822606E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997746946645	WITHOUT_CLASSIFICATION	2.2530533558287237E-7	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999911306747694	WITHOUT_CLASSIFICATION	8.86932523054662E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999862591332153	WITHOUT_CLASSIFICATION	1.3740866784798815E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999998392781796	WITHOUT_CLASSIFICATION	1.6072182040428328E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999998392781796	WITHOUT_CLASSIFICATION	1.6072182040428328E-6	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999992396420941	WITHOUT_CLASSIFICATION	7.603579058147746E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999886656362542	WITHOUT_CLASSIFICATION	1.133436374583288E-5	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999992237567	WITHOUT_CLASSIFICATION	7.762433096997392E-9	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999998110037265	WITHOUT_CLASSIFICATION	1.8899627339816464E-7	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999916167136	WITHOUT_CLASSIFICATION	8.383286357956812E-9	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999935521963387	WITHOUT_CLASSIFICATION	6.447803661336013E-6	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999980768617	WITHOUT_CLASSIFICATION	1.92313833022365E-9	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999995416418439	WITHOUT_CLASSIFICATION	4.583581561070461E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999990868045272	WITHOUT_CLASSIFICATION	9.131954728244899E-7	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999132774909	WITHOUT_CLASSIFICATION	8.672250907530457E-8	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999542527394282	WITHOUT_CLASSIFICATION	4.574726057176182E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999528105671096	WITHOUT_CLASSIFICATION	4.7189432890438615E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999952409717607	WITHOUT_CLASSIFICATION	4.759028239309258E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999246457534	WITHOUT_CLASSIFICATION	7.535424670348379E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999717663243736	WITHOUT_CLASSIFICATION	2.823367562652034E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998698529552	WITHOUT_CLASSIFICATION	1.3014704482764059E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999912158839499	WITHOUT_CLASSIFICATION	8.784116050188608E-6	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999729403188	WITHOUT_CLASSIFICATION	2.705968122961466E-8	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999884154732	WITHOUT_CLASSIFICATION	1.1584526803383995E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999966637616625	WITHOUT_CLASSIFICATION	3.336238337613124E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999998721087039	WITHOUT_CLASSIFICATION	1.2789129609072557E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999881333016	WITHOUT_CLASSIFICATION	1.1866698489352509E-8	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999951479804963	WITHOUT_CLASSIFICATION	4.852019503807925E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9959872998910931	WITHOUT_CLASSIFICATION	0.004012700108906819	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.998210441758858	WITHOUT_CLASSIFICATION	0.0017895582411420342	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261217804656	WITHOUT_CLASSIFICATION	7.387821953447853E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999989724228245	WITHOUT_CLASSIFICATION	1.0275771755413805E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999799573087	WITHOUT_CLASSIFICATION	2.004269134967195E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999990624876939	WITHOUT_CLASSIFICATION	9.375123062600389E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999993155720389	WITHOUT_CLASSIFICATION	6.84427961184957E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9960462679614971	WITHOUT_CLASSIFICATION	0.003953732038502945	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999692749127588	WITHOUT_CLASSIFICATION	3.072508724117416E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999999407263982	WITHOUT_CLASSIFICATION	5.927360179840657E-7	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9994531267462315	WITHOUT_CLASSIFICATION	5.46873253768469E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999836495034714	WITHOUT_CLASSIFICATION	1.6350496528609357E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999992217662231	WITHOUT_CLASSIFICATION	7.782337768475854E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999902203157407	WITHOUT_CLASSIFICATION	9.779684259292288E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999197091487892	WITHOUT_CLASSIFICATION	8.029085121083904E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999993786246404	WITHOUT_CLASSIFICATION	6.213753595371067E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993290079321	WITHOUT_CLASSIFICATION	6.709920678458832E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997789135505087	WITHOUT_CLASSIFICATION	2.2108644949128198E-4	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999985097430963	WITHOUT_CLASSIFICATION	1.4902569035635204E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999652426502995	WITHOUT_CLASSIFICATION	3.475734970051215E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999660592628807	WITHOUT_CLASSIFICATION	3.394073711928341E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999970136572598	WITHOUT_CLASSIFICATION	2.9863427402701994E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998386357353994	WITHOUT_CLASSIFICATION	1.6136426460058626E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9997101677401949	WITHOUT_CLASSIFICATION	2.898322598050345E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999980079259359	WITHOUT_CLASSIFICATION	1.992074064064095E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999984893132136	WITHOUT_CLASSIFICATION	1.5106867864814304E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999364031337413	WITHOUT_CLASSIFICATION	6.359686625867776E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989368152087	WITHOUT_CLASSIFICATION	1.0631847913038824E-6	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9995699064826271	WITHOUT_CLASSIFICATION	4.300935173729775E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999180788234	WITHOUT_CLASSIFICATION	8.192117662914115E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999903164670478	WITHOUT_CLASSIFICATION	9.683532952222197E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999980619600176	WITHOUT_CLASSIFICATION	1.938039982390203E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999897500760684	WITHOUT_CLASSIFICATION	1.0249923931566894E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999993344659267	WITHOUT_CLASSIFICATION	6.655340733057253E-7	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9997481889779724	WITHOUT_CLASSIFICATION	2.518110220276476E-4	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999992110729619	WITHOUT_CLASSIFICATION	7.889270380441315E-7	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999974813445737	WITHOUT_CLASSIFICATION	2.5186554264287935E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999962319282955	WITHOUT_CLASSIFICATION	3.7680717046158843E-6	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.99999988090206	WITHOUT_CLASSIFICATION	1.190979399830168E-7	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998625265451537	WITHOUT_CLASSIFICATION	1.374734548463671E-4	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999391021397052	WITHOUT_CLASSIFICATION	6.08978602949705E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.99999996196487	WITHOUT_CLASSIFICATION	3.8035130034271335E-8	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999962986253	WITHOUT_CLASSIFICATION	3.701374661154279E-9	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993168819271	WITHOUT_CLASSIFICATION	6.831180728187537E-7	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999961840842608	WITHOUT_CLASSIFICATION	3.815915739208475E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999897420946993	WITHOUT_CLASSIFICATION	1.0257905300690141E-5	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999922095087594	WITHOUT_CLASSIFICATION	7.790491240561173E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999897420946993	WITHOUT_CLASSIFICATION	1.0257905300690141E-5	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999935057266345	WITHOUT_CLASSIFICATION	6.494273365483202E-6	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999878449595523	WITHOUT_CLASSIFICATION	1.215504044773959E-5	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999917227243574	WITHOUT_CLASSIFICATION	8.277275642538604E-6	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999990418973794	WITHOUT_CLASSIFICATION	9.581026205392432E-7	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999993243193637	WITHOUT_CLASSIFICATION	6.756806363341451E-7	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999944240249095	WITHOUT_CLASSIFICATION	5.575975090598537E-6	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999778042206	WITHOUT_CLASSIFICATION	2.2195779542116867E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999975416752	WITHOUT_CLASSIFICATION	2.458324775871017E-9	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998593489975	WITHOUT_CLASSIFICATION	1.4065100248171268E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999624508346997	WITHOUT_CLASSIFICATION	3.7549165300277795E-5	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999992225285322	WITHOUT_CLASSIFICATION	7.774714677883085E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999999743060418	WITHOUT_CLASSIFICATION	2.5693958159414434E-8	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.99999940689307	WITHOUT_CLASSIFICATION	5.9310693000371E-7	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9751966854497465	WITHOUT_CLASSIFICATION	0.024803314550253617	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999533707308292	WITHOUT_CLASSIFICATION	4.6629269170766605E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998566978594	WITHOUT_CLASSIFICATION	1.433021406736773E-7	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999966993636553	WITHOUT_CLASSIFICATION	3.300636344670608E-6	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999481739321	WITHOUT_CLASSIFICATION	5.1826067936560824E-8	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999983953732052	WITHOUT_CLASSIFICATION	1.604626794788259E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999969868608656	WITHOUT_CLASSIFICATION	3.01313913430028E-6	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999997032174271	WITHOUT_CLASSIFICATION	2.9678257285837017E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998816090812974	WITHOUT_CLASSIFICATION	1.1839091870257855E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9994141539170706	WITHOUT_CLASSIFICATION	5.858460829294013E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999866530798558	WITHOUT_CLASSIFICATION	1.3346920144363265E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999895956882543	WITHOUT_CLASSIFICATION	1.0404311745596377E-5	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999032466321	WITHOUT_CLASSIFICATION	9.675336779106126E-8	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999887844815395	WITHOUT_CLASSIFICATION	1.1215518460472996E-5	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999951319558923	WITHOUT_CLASSIFICATION	4.868044107637124E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999945087437792	WITHOUT_CLASSIFICATION	5.491256220749609E-6	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999881713771731	WITHOUT_CLASSIFICATION	1.1828622826745565E-5	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999832078923354	WITHOUT_CLASSIFICATION	1.6792107664595454E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998440737453526	WITHOUT_CLASSIFICATION	1.5592625464742635E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999636770969	WITHOUT_CLASSIFICATION	3.6322903029646106E-8	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999997529253867	WITHOUT_CLASSIFICATION	2.470746133558934E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998603299891113	WITHOUT_CLASSIFICATION	1.396700108886677E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999895933930179	WITHOUT_CLASSIFICATION	1.0406606982245905E-5	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999920670102712	WITHOUT_CLASSIFICATION	7.932989728659813E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999964334463309	WITHOUT_CLASSIFICATION	3.566553669094168E-6	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9995546705735028	WITHOUT_CLASSIFICATION	4.4532942649727863E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999994614232051	WITHOUT_CLASSIFICATION	5.385767949101305E-7	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999768564233	WITHOUT_CLASSIFICATION	2.3143576686930772E-8	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999834198514479	WITHOUT_CLASSIFICATION	1.6580148552079445E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999681229657	WITHOUT_CLASSIFICATION	3.187703424891074E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999032466321	WITHOUT_CLASSIFICATION	9.675336779106126E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998248537082155	WITHOUT_CLASSIFICATION	1.7514629178460434E-4	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.999999878217787	WITHOUT_CLASSIFICATION	1.2178221306426302E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999775808433925	WITHOUT_CLASSIFICATION	2.2419156607554788E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999998896243992	WITHOUT_CLASSIFICATION	1.103756007266912E-7	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.999977182114033	WITHOUT_CLASSIFICATION	2.2817885967024996E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999969290344	WITHOUT_CLASSIFICATION	3.0709654728860126E-9	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998917421825	WITHOUT_CLASSIFICATION	1.0825781752062388E-7	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999961900577584	WITHOUT_CLASSIFICATION	3.8099422414476658E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999938855853978	WITHOUT_CLASSIFICATION	6.114414602118166E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999983132293969	WITHOUT_CLASSIFICATION	1.6867706030721825E-6	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9996736417843058	WITHOUT_CLASSIFICATION	3.2635821569410657E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999971334228378	WITHOUT_CLASSIFICATION	2.8665771622067414E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999939668007356	WITHOUT_CLASSIFICATION	6.033199264397249E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999867809243446	WITHOUT_CLASSIFICATION	1.3219075655572425E-5	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999886518923	WITHOUT_CLASSIFICATION	1.1348107677786508E-8	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999900839395	WITHOUT_CLASSIFICATION	9.916060505625395E-8	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998666505001	WITHOUT_CLASSIFICATION	1.3334949985928268E-7	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997133800678	WITHOUT_CLASSIFICATION	2.8661993228855196E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999976367048906	WITHOUT_CLASSIFICATION	2.3632951093758605E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9998248537082155	WITHOUT_CLASSIFICATION	1.7514629178460434E-4	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999800024780406	WITHOUT_CLASSIFICATION	1.9997521959338017E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999996076098777	WITHOUT_CLASSIFICATION	3.923901222180309E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999994547838375	WITHOUT_CLASSIFICATION	5.452161624893403E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999992312973449	WITHOUT_CLASSIFICATION	7.687026551260812E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999039629095	WITHOUT_CLASSIFICATION	9.603709053784767E-8	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9380996987367949	WITHOUT_CLASSIFICATION	0.06190030126320517	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9380996987367949	WITHOUT_CLASSIFICATION	0.06190030126320517	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999955456070031	WITHOUT_CLASSIFICATION	4.454392996895969E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9380996987367949	WITHOUT_CLASSIFICATION	0.06190030126320517	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9380996987367949	WITHOUT_CLASSIFICATION	0.06190030126320517	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9997840281155027	WITHOUT_CLASSIFICATION	2.1597188449732038E-4	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999971227115303	WITHOUT_CLASSIFICATION	2.8772884696913804E-6	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999846245033933	WITHOUT_CLASSIFICATION	1.5375496606680787E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999235421552967	WITHOUT_CLASSIFICATION	7.645784470331575E-5	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998868853681467	WITHOUT_CLASSIFICATION	1.1311463185321319E-4	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9946245704247341	WITHOUT_CLASSIFICATION	0.005375429575265947	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9998854389387549	WITHOUT_CLASSIFICATION	1.1456106124496466E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999915693864467	WITHOUT_CLASSIFICATION	8.430613553254165E-6	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999822722479748	WITHOUT_CLASSIFICATION	1.772775202521016E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999821906224398	WITHOUT_CLASSIFICATION	1.7809377560184013E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999890323042049	WITHOUT_CLASSIFICATION	1.0967695795033488E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999888665026757	WITHOUT_CLASSIFICATION	1.1133497324230424E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999997566052502	WITHOUT_CLASSIFICATION	2.433947498628217E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999960681643346	WITHOUT_CLASSIFICATION	3.931835665469731E-6	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999996162771436	WITHOUT_CLASSIFICATION	3.8372285639373864E-7	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998363879614197	WITHOUT_CLASSIFICATION	1.6361203858028932E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999984523178356	WITHOUT_CLASSIFICATION	1.5476821645095586E-6	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999414023361103	WITHOUT_CLASSIFICATION	5.859766388958469E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9997469578404349	WITHOUT_CLASSIFICATION	2.5304215956512417E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999963391677432	WITHOUT_CLASSIFICATION	3.6608322567381412E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999506407442575	WITHOUT_CLASSIFICATION	4.935925574242488E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999712748331875	WITHOUT_CLASSIFICATION	2.8725166812590996E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999984523178356	WITHOUT_CLASSIFICATION	1.5476821645095586E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999887844815395	WITHOUT_CLASSIFICATION	1.1215518460472996E-5	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.999929632618598	WITHOUT_CLASSIFICATION	7.036738140203968E-5	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999940842548865	WITHOUT_CLASSIFICATION	5.915745113528347E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999924059941997	WITHOUT_CLASSIFICATION	7.594005800259375E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999714254483107	WITHOUT_CLASSIFICATION	2.857455168921008E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999973696609491	WITHOUT_CLASSIFICATION	2.6303390509045325E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999989894401069	WITHOUT_CLASSIFICATION	1.010559893126172E-6	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9963103659986026	WITHOUT_CLASSIFICATION	0.003689634001397362	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999594072702677	WITHOUT_CLASSIFICATION	4.0592729732289915E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999992753775218	WITHOUT_CLASSIFICATION	7.246224781942491E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997026208870574	WITHOUT_CLASSIFICATION	2.973791129426076E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999973449183	WITHOUT_CLASSIFICATION	2.6550816870126697E-9	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999991559043198	WITHOUT_CLASSIFICATION	8.440956801743882E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999861122346335	WITHOUT_CLASSIFICATION	1.3887765366557801E-5	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9987416943274323	WITHOUT_CLASSIFICATION	0.0012583056725677083	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999998044766145	WITHOUT_CLASSIFICATION	1.9552338556264395E-7	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999998697618647	WITHOUT_CLASSIFICATION	1.302381352065935E-7	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999070100335026	WITHOUT_CLASSIFICATION	9.298996649741681E-5	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999950302693	WITHOUT_CLASSIFICATION	4.9697307110332206E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999925578549625	WITHOUT_CLASSIFICATION	7.442145037349065E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999607876791015	WITHOUT_CLASSIFICATION	3.9212320898636294E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999997488476158	WITHOUT_CLASSIFICATION	2.5115238419800086E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999299597405	WITHOUT_CLASSIFICATION	7.004025947499483E-8	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999594072702677	WITHOUT_CLASSIFICATION	4.0592729732289915E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999817008953106	WITHOUT_CLASSIFICATION	1.8299104689366207E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.999984618847992	WITHOUT_CLASSIFICATION	1.538115200802125E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997667358662947	WITHOUT_CLASSIFICATION	2.3326413370522211E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999989383917842	WITHOUT_CLASSIFICATION	1.0616082157982274E-5	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940547535855	WITHOUT_CLASSIFICATION	5.945246414525992E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999893766917659	WITHOUT_CLASSIFICATION	1.0623308234092079E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999794256675643	WITHOUT_CLASSIFICATION	2.0574332435710134E-5	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999997203742311	WITHOUT_CLASSIFICATION	2.796257688424287E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999983564813174	WITHOUT_CLASSIFICATION	1.6435186826011787E-6	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999893495749359	WITHOUT_CLASSIFICATION	1.065042506420805E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999978014671665	WITHOUT_CLASSIFICATION	2.1985328334983694E-6	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999979692699688	WITHOUT_CLASSIFICATION	2.030730031294248E-6	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9988772817001002	WITHOUT_CLASSIFICATION	0.0011227182998998569	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999998385551415	WITHOUT_CLASSIFICATION	1.6144485839792895E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984866492431	WITHOUT_CLASSIFICATION	1.5133507568759312E-6	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999984126653557	WITHOUT_CLASSIFICATION	1.5873346443420905E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999811608556349	WITHOUT_CLASSIFICATION	1.883914436513607E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999978014671665	WITHOUT_CLASSIFICATION	2.1985328334983694E-6	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999109139255	WITHOUT_CLASSIFICATION	8.908607448302631E-8	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.999864226854103	WITHOUT_CLASSIFICATION	1.3577314589699346E-4	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999990224697233	WITHOUT_CLASSIFICATION	9.775302767428251E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9965463771727469	WITHOUT_CLASSIFICATION	0.003453622827253024	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999991246542287	WITHOUT_CLASSIFICATION	8.753457713921616E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999997680892804	WITHOUT_CLASSIFICATION	2.3191071952198816E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984866492431	WITHOUT_CLASSIFICATION	1.5133507568759312E-6	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999908686280309	WITHOUT_CLASSIFICATION	9.13137196910742E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939496182212	WITHOUT_CLASSIFICATION	6.050381778807394E-6	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993120324634	WITHOUT_CLASSIFICATION	6.87967536548241E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996999266302791	WITHOUT_CLASSIFICATION	3.0007336972096444E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.7568187138004955	WITHOUT_CLASSIFICATION	0.24318128619950458	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8140588982301487	WITHOUT_CLASSIFICATION	0.18594110176985126	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999933662219941	WITHOUT_CLASSIFICATION	6.633778005913E-6	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999933662219941	WITHOUT_CLASSIFICATION	6.633778005913E-6	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999992956831331	WITHOUT_CLASSIFICATION	7.04316867035104E-7	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999959513997774	WITHOUT_CLASSIFICATION	4.048600222623214E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999979720813792	WITHOUT_CLASSIFICATION	2.0279186207810324E-6	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999981839710843	WITHOUT_CLASSIFICATION	1.8160289156852404E-6	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999819238609013	WITHOUT_CLASSIFICATION	1.8076139098653268E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985052510845	WITHOUT_CLASSIFICATION	1.494748915543592E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990625928618	WITHOUT_CLASSIFICATION	9.374071383052446E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757287587044	WITHOUT_CLASSIFICATION	2.4271241295567276E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999986756014962	WITHOUT_CLASSIFICATION	1.3243985038084982E-6	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996500185585	WITHOUT_CLASSIFICATION	3.4998144154549197E-7	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985052510845	WITHOUT_CLASSIFICATION	1.494748915543592E-6	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990625928618	WITHOUT_CLASSIFICATION	9.374071383052446E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757287587044	WITHOUT_CLASSIFICATION	2.4271241295567276E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999998602410475	WITHOUT_CLASSIFICATION	1.3975895245433745E-7	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9989546008098354	WITHOUT_CLASSIFICATION	0.0010453991901645298	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999847563268	WITHOUT_CLASSIFICATION	1.5243673195948286E-8	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999963025224862	WITHOUT_CLASSIFICATION	3.6974775139116906E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999995901270031	WITHOUT_CLASSIFICATION	4.0987299678446153E-7	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999973538589846	WITHOUT_CLASSIFICATION	2.64614101545943E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999958939163299	WITHOUT_CLASSIFICATION	4.106083670035015E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999996478119789	WITHOUT_CLASSIFICATION	3.521880210031446E-7	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999939474764679	WITHOUT_CLASSIFICATION	6.052523532077633E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999962217311246	WITHOUT_CLASSIFICATION	3.7782688754445663E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999415544558	WITHOUT_CLASSIFICATION	5.8445544282523405E-8	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999923049464523	WITHOUT_CLASSIFICATION	7.695053547682222E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999996840370185	WITHOUT_CLASSIFICATION	3.159629815070625E-6	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998434874994	WITHOUT_CLASSIFICATION	1.565125007049619E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999945856683159	WITHOUT_CLASSIFICATION	5.4143316842143495E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999999968548467	WITHOUT_CLASSIFICATION	3.145153309525213E-8	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999000121607124	WITHOUT_CLASSIFICATION	9.998783928756836E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999906627139894	WITHOUT_CLASSIFICATION	9.337286010613523E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999992514490154	WITHOUT_CLASSIFICATION	7.485509845856646E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999946275810928	WITHOUT_CLASSIFICATION	5.372418907110322E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999629534116	WITHOUT_CLASSIFICATION	3.7046588231703886E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999529576454426	WITHOUT_CLASSIFICATION	4.7042354557408356E-4	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999903792677	WITHOUT_CLASSIFICATION	9.62073228985805E-9	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999368803458	WITHOUT_CLASSIFICATION	6.311965407072958E-8	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999995632326	WITHOUT_CLASSIFICATION	4.367673450201506E-10	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9993017947662398	WITHOUT_CLASSIFICATION	6.982052337602478E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978592232324	WITHOUT_CLASSIFICATION	2.1407767676167933E-6	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958484374397	WITHOUT_CLASSIFICATION	4.151562560304935E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999078411864	WITHOUT_CLASSIFICATION	9.21588135974804E-8	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999079228252	WITHOUT_CLASSIFICATION	9.207717480980298E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986698195802	WITHOUT_CLASSIFICATION	1.3301804198206758E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999477169367764	WITHOUT_CLASSIFICATION	5.228306322353457E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999477169367764	WITHOUT_CLASSIFICATION	5.228306322353457E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999987390187	WITHOUT_CLASSIFICATION	1.260981304157924E-9	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999974751147936	WITHOUT_CLASSIFICATION	2.5248852063902404E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999200005426794	WITHOUT_CLASSIFICATION	7.999945732070437E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999389734132139	WITHOUT_CLASSIFICATION	6.102658678608877E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.99990924023838	WITHOUT_CLASSIFICATION	9.075976161989094E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999828698416	WITHOUT_CLASSIFICATION	1.7130158386816643E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999957283280291	WITHOUT_CLASSIFICATION	4.2716719708680325E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999875808582214	WITHOUT_CLASSIFICATION	1.2419141778665718E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999943541698891	WITHOUT_CLASSIFICATION	5.6458301108750574E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997768232662	WITHOUT_CLASSIFICATION	2.2317673369466546E-7	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998272920749	WITHOUT_CLASSIFICATION	1.7270792500397773E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997947120066	WITHOUT_CLASSIFICATION	2.052879933631146E-7	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972339767138	WITHOUT_CLASSIFICATION	2.766023286305353E-6	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994741741212	WITHOUT_CLASSIFICATION	5.258258788086758E-7	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993869857123	WITHOUT_CLASSIFICATION	6.130142877178063E-7	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995887283457	WITHOUT_CLASSIFICATION	4.112716542044657E-7	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996137639678	WITHOUT_CLASSIFICATION	3.862360321028537E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984101268078	WITHOUT_CLASSIFICATION	1.5898731922388338E-6	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974458070698	WITHOUT_CLASSIFICATION	2.5541929301716165E-6	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992155160017	WITHOUT_CLASSIFICATION	7.84483998281606E-7	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999991132661409	WITHOUT_CLASSIFICATION	8.867338591208248E-7	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999938118853744	WITHOUT_CLASSIFICATION	6.188114625592711E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999972284837421	WITHOUT_CLASSIFICATION	2.7715162579563727E-6	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999785528226391	WITHOUT_CLASSIFICATION	2.1447177360913892E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999983229562128	WITHOUT_CLASSIFICATION	1.6770437871752296E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.999924249413396	WITHOUT_CLASSIFICATION	7.575058660397935E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999993365044567	WITHOUT_CLASSIFICATION	6.634955432765438E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9988759771681017	WITHOUT_CLASSIFICATION	0.0011240228318982906	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999972284837421	WITHOUT_CLASSIFICATION	2.7715162579563727E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999972284837421	WITHOUT_CLASSIFICATION	2.7715162579563727E-6	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.999843130057262	WITHOUT_CLASSIFICATION	1.5686994273803406E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999980923917599	WITHOUT_CLASSIFICATION	1.907608240066888E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999994568843206	WITHOUT_CLASSIFICATION	5.431156794365956E-7	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999948666991602	WITHOUT_CLASSIFICATION	5.133300839862439E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999946585980948	WITHOUT_CLASSIFICATION	5.341401905202071E-6	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999946275810928	WITHOUT_CLASSIFICATION	5.372418907110322E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999952403103948	WITHOUT_CLASSIFICATION	4.7596896053249115E-6	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999980110712675	WITHOUT_CLASSIFICATION	1.9889287324633416E-6	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999240119208	WITHOUT_CLASSIFICATION	7.59880791467215E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995772486818	WITHOUT_CLASSIFICATION	4.227513181654298E-7	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9969874641220674	WITHOUT_CLASSIFICATION	0.003012535877932571	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945864501818	WITHOUT_CLASSIFICATION	5.4135498183076695E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999847129641057	WITHOUT_CLASSIFICATION	1.528703589427468E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999847129641057	WITHOUT_CLASSIFICATION	1.528703589427468E-5	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988259798728	WITHOUT_CLASSIFICATION	1.1740201272216454E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999988259798728	WITHOUT_CLASSIFICATION	1.1740201272216454E-6	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992110906339303	WITHOUT_CLASSIFICATION	7.889093660696138E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999635174763	WITHOUT_CLASSIFICATION	3.648252367877403E-8	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999994261528313	WITHOUT_CLASSIFICATION	5.738471686617365E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995545172717684	WITHOUT_CLASSIFICATION	4.4548272823162276E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999896566834601	WITHOUT_CLASSIFICATION	1.0343316539901869E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999959589929936	WITHOUT_CLASSIFICATION	4.0410070064170216E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999694235579982	WITHOUT_CLASSIFICATION	3.05764420016967E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994388179738	WITHOUT_CLASSIFICATION	5.611820261609965E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999998404628193	WITHOUT_CLASSIFICATION	1.5953718065233567E-7	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999998220084769	WITHOUT_CLASSIFICATION	1.779915230386786E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999951002506	WITHOUT_CLASSIFICATION	4.899749437520607E-9	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998924585172041	WITHOUT_CLASSIFICATION	1.0754148279592866E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9994171374584522	WITHOUT_CLASSIFICATION	5.828625415476901E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999983525840347	WITHOUT_CLASSIFICATION	1.6474159653142167E-6	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999930663976627	WITHOUT_CLASSIFICATION	6.933602337363064E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999789901053789	WITHOUT_CLASSIFICATION	2.1009894621136867E-5	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999789901053789	WITHOUT_CLASSIFICATION	2.1009894621136867E-5	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999996382784207	WITHOUT_CLASSIFICATION	3.617215792916303E-6	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999998344451329	WITHOUT_CLASSIFICATION	1.6555486721060836E-7	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999898957862	WITHOUT_CLASSIFICATION	1.0104213800353995E-8	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999509574224272	WITHOUT_CLASSIFICATION	4.904257757281225E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998138386953329	WITHOUT_CLASSIFICATION	1.8616130466707646E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999249085012597	WITHOUT_CLASSIFICATION	7.509149874029535E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999886984614702	WITHOUT_CLASSIFICATION	1.1301538529852094E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.7685697988148594	WITHOUT_CLASSIFICATION	0.23143020118514065	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999962079716033	WITHOUT_CLASSIFICATION	3.79202839671475E-6	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999988566046877	WITHOUT_CLASSIFICATION	1.143395312346699E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999996462263431	WITHOUT_CLASSIFICATION	3.5377365689152256E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998030352685195	WITHOUT_CLASSIFICATION	1.9696473148056803E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992125880033	WITHOUT_CLASSIFICATION	7.874119967450639E-7	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999993555431657	WITHOUT_CLASSIFICATION	6.444568342829983E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999969743999413	WITHOUT_CLASSIFICATION	3.025600058729499E-6	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999874490997519	WITHOUT_CLASSIFICATION	1.2550900248182062E-5	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999978050936716	WITHOUT_CLASSIFICATION	2.1949063283347974E-6	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999869315827131	WITHOUT_CLASSIFICATION	1.3068417286810362E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999780785225886	WITHOUT_CLASSIFICATION	2.192147741140026E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999835447555188	WITHOUT_CLASSIFICATION	1.645524448120561E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999996681002	WITHOUT_CLASSIFICATION	3.3189979166804854E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999981978610469	WITHOUT_CLASSIFICATION	1.8021389530003327E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999333095750658	WITHOUT_CLASSIFICATION	6.669042493424282E-5	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999873360864967	WITHOUT_CLASSIFICATION	1.2663913503283111E-5	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9997989054413909	WITHOUT_CLASSIFICATION	2.0109455860901226E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999059215568706	WITHOUT_CLASSIFICATION	9.4078443129369E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999999818142539	WITHOUT_CLASSIFICATION	1.8185746099388097E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999995575223035	WITHOUT_CLASSIFICATION	4.424776965032458E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999994817371	WITHOUT_CLASSIFICATION	5.182630052385359E-10	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999998083453459	WITHOUT_CLASSIFICATION	1.9165465410202817E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.999941407055949	WITHOUT_CLASSIFICATION	5.85929440509528E-5	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999903091296526	WITHOUT_CLASSIFICATION	9.690870347357666E-6	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999977208520752	WITHOUT_CLASSIFICATION	2.2791479247745508E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9975757437665158	WITHOUT_CLASSIFICATION	0.0024242562334842064	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999967536558904	WITHOUT_CLASSIFICATION	3.2463441096838537E-6	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999089429587326	WITHOUT_CLASSIFICATION	9.105704126742255E-5	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989671058476	WITHOUT_CLASSIFICATION	1.0328941524207662E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999849644116863	WITHOUT_CLASSIFICATION	1.5035588313747844E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999996226418889	WITHOUT_CLASSIFICATION	3.773581111098303E-7	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.999662302205514	WITHOUT_CLASSIFICATION	3.3769779448606383E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999946082955352	WITHOUT_CLASSIFICATION	5.3917044647284006E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999896564515	WITHOUT_CLASSIFICATION	1.0343548450449486E-8	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9647394624669504	WITHOUT_CLASSIFICATION	0.03526053753304965	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999274758467939	WITHOUT_CLASSIFICATION	7.25241532061035E-4	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999880632103546	WITHOUT_CLASSIFICATION	1.1936789645315206E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999691089912531	WITHOUT_CLASSIFICATION	3.089100874682425E-5	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999991428978536	WITHOUT_CLASSIFICATION	8.571021462764309E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999979826000807	WITHOUT_CLASSIFICATION	2.0173999193560297E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999967962465273	WITHOUT_CLASSIFICATION	3.203753472697207E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999943432671414	WITHOUT_CLASSIFICATION	5.656732858610799E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999864510644586	WITHOUT_CLASSIFICATION	1.3548935541400858E-4	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996734862754808	WITHOUT_CLASSIFICATION	3.265137245191464E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999816045959704	WITHOUT_CLASSIFICATION	1.839540402959457E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997724499662098	WITHOUT_CLASSIFICATION	2.2755003379022363E-4	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998720414935824	WITHOUT_CLASSIFICATION	1.279585064175716E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999870383992238	WITHOUT_CLASSIFICATION	1.2961600776296492E-5	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9957380700105245	WITHOUT_CLASSIFICATION	0.004261929989475431	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999851927333268	WITHOUT_CLASSIFICATION	1.480726667322915E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999676012687	WITHOUT_CLASSIFICATION	3.239873131665752E-8	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997453314799652	WITHOUT_CLASSIFICATION	2.546685200348472E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999991918890737	WITHOUT_CLASSIFICATION	8.081109262538199E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999845247495519	WITHOUT_CLASSIFICATION	1.547525044801428E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999936357827	WITHOUT_CLASSIFICATION	6.364217259447434E-9	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999998965131825	WITHOUT_CLASSIFICATION	1.0348681750358078E-6	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999869512781	WITHOUT_CLASSIFICATION	1.3048721976331615E-8	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999431719584119	WITHOUT_CLASSIFICATION	5.682804158805291E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999998358068118	WITHOUT_CLASSIFICATION	1.6419318820132028E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999970484835096	WITHOUT_CLASSIFICATION	2.951516490459729E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998928156693407	WITHOUT_CLASSIFICATION	1.0718433065929265E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998928156693407	WITHOUT_CLASSIFICATION	1.0718433065929265E-4	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999993670461362	WITHOUT_CLASSIFICATION	6.329538638065785E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999998119136213	WITHOUT_CLASSIFICATION	1.8808637869799324E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999988322962	WITHOUT_CLASSIFICATION	1.1677038284321033E-9	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999999186639309	WITHOUT_CLASSIFICATION	8.133606906236597E-8	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999937605186571	WITHOUT_CLASSIFICATION	6.239481342937789E-6	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999689970610784	WITHOUT_CLASSIFICATION	3.1002938921603437E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999795528814	WITHOUT_CLASSIFICATION	2.0447118581533093E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999997842082936	WITHOUT_CLASSIFICATION	2.1579170630027966E-7	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999636639313016	WITHOUT_CLASSIFICATION	3.633606869824146E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999995234375043	WITHOUT_CLASSIFICATION	4.7656249569617286E-7	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999936743874066	WITHOUT_CLASSIFICATION	6.325612593467013E-6	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999789555438878	WITHOUT_CLASSIFICATION	2.1044456112095413E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999986373144475	WITHOUT_CLASSIFICATION	1.362685552499554E-6	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999634959907	WITHOUT_CLASSIFICATION	3.6504009185407664E-8	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999972120328464	WITHOUT_CLASSIFICATION	2.7879671535518504E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9949839769702056	WITHOUT_CLASSIFICATION	0.005016023029794422	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999773454867685	WITHOUT_CLASSIFICATION	2.2654513231497794E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.995461255581157	WITHOUT_CLASSIFICATION	0.004538744418843054	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999534303318765	WITHOUT_CLASSIFICATION	4.6569668123506037E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999970407160719	WITHOUT_CLASSIFICATION	2.9592839281372337E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999981453006012	WITHOUT_CLASSIFICATION	1.8546993988304463E-6	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999980236071365	WITHOUT_CLASSIFICATION	1.976392863500092E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999995303468506	WITHOUT_CLASSIFICATION	4.69653149274256E-7	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9995960163415641	WITHOUT_CLASSIFICATION	4.039836584358458E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999991461607827	WITHOUT_CLASSIFICATION	8.538392174239189E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999772045500765	WITHOUT_CLASSIFICATION	2.2795449923505378E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999817584947401	WITHOUT_CLASSIFICATION	1.8241505259947048E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999992797893987	WITHOUT_CLASSIFICATION	7.202106012639495E-7	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999986140131196	WITHOUT_CLASSIFICATION	1.3859868804349277E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999285994947117	WITHOUT_CLASSIFICATION	7.14005052883437E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999996837557832	WITHOUT_CLASSIFICATION	3.1624421675315753E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999595821091717	WITHOUT_CLASSIFICATION	4.041789082821348E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999982990746072	WITHOUT_CLASSIFICATION	1.700925392681895E-6	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.999960288188911	WITHOUT_CLASSIFICATION	3.9711811088906724E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999597417119187	WITHOUT_CLASSIFICATION	4.025828808125596E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999597417119187	WITHOUT_CLASSIFICATION	4.025828808125596E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999585279048101	WITHOUT_CLASSIFICATION	4.147209518991132E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.999786736083256	WITHOUT_CLASSIFICATION	2.1326391674395158E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999374481635	WITHOUT_CLASSIFICATION	6.255183646265021E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999985333593524	WITHOUT_CLASSIFICATION	1.4666406474968062E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999999900822553	WITHOUT_CLASSIFICATION	9.917744712191677E-8	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999971319438045	WITHOUT_CLASSIFICATION	2.8680561955174996E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999983633662619	WITHOUT_CLASSIFICATION	1.636633738095937E-6	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999999910942323	WITHOUT_CLASSIFICATION	8.905767697452627E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999022539852144	WITHOUT_CLASSIFICATION	9.774601478560745E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998402964122	WITHOUT_CLASSIFICATION	1.5970358780524158E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999219588246999	WITHOUT_CLASSIFICATION	7.804117530004875E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999796113111151	WITHOUT_CLASSIFICATION	2.038868888484422E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999304590557	WITHOUT_CLASSIFICATION	6.954094440081968E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999947466789852	WITHOUT_CLASSIFICATION	5.253321014710532E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999896651868271	WITHOUT_CLASSIFICATION	1.033481317284694E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9863180249288506	WITHOUT_CLASSIFICATION	0.013681975071149394	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9863180249288506	WITHOUT_CLASSIFICATION	0.013681975071149394	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999629357255451	WITHOUT_CLASSIFICATION	3.706427445501818E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999997416130649	WITHOUT_CLASSIFICATION	2.583869350985335E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999961652065069	WITHOUT_CLASSIFICATION	3.834793493082975E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999147598323	WITHOUT_CLASSIFICATION	8.524016764755651E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997919375921585	WITHOUT_CLASSIFICATION	2.0806240784155563E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.99996435152133	WITHOUT_CLASSIFICATION	3.5648478670000834E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999945710407758	WITHOUT_CLASSIFICATION	5.428959224127675E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999945710407758	WITHOUT_CLASSIFICATION	5.428959224127675E-6	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999593707789729	WITHOUT_CLASSIFICATION	4.062922102704755E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999911343149381	WITHOUT_CLASSIFICATION	8.86568506190195E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999971124760885	WITHOUT_CLASSIFICATION	2.8875239115394654E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999493036135	WITHOUT_CLASSIFICATION	5.069638656764674E-8	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999988285574328	WITHOUT_CLASSIFICATION	1.1714425672185263E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998847210875781	WITHOUT_CLASSIFICATION	1.1527891242186402E-4	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9988952631577537	WITHOUT_CLASSIFICATION	0.0011047368422463482	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999749542465008	WITHOUT_CLASSIFICATION	2.5045753499155213E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999964513091248	WITHOUT_CLASSIFICATION	3.5486908751664564E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9991680606892919	WITHOUT_CLASSIFICATION	8.319393107082238E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9949012760458452	WITHOUT_CLASSIFICATION	0.005098723954154828	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999993650289646	WITHOUT_CLASSIFICATION	6.349710353907816E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999965898546433	WITHOUT_CLASSIFICATION	3.4101453565462854E-6	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999996658657154	WITHOUT_CLASSIFICATION	3.3413428465276463E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999990624876939	WITHOUT_CLASSIFICATION	9.375123062600389E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999950261862	WITHOUT_CLASSIFICATION	4.973813790728615E-9	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999798356716	WITHOUT_CLASSIFICATION	2.0164328481137908E-8	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999966245363999	WITHOUT_CLASSIFICATION	3.37546360017796E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999962086950664	WITHOUT_CLASSIFICATION	3.7913049334278207E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9995269495668812	WITHOUT_CLASSIFICATION	4.730504331187845E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999349534483	WITHOUT_CLASSIFICATION	6.5046551725135E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999986160171388	WITHOUT_CLASSIFICATION	1.3839828612253152E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999954113123289	WITHOUT_CLASSIFICATION	4.588687670999997E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999267620288074	WITHOUT_CLASSIFICATION	7.323797119268105E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999987205363532	WITHOUT_CLASSIFICATION	1.2794636468290443E-6	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998946038549558	WITHOUT_CLASSIFICATION	1.0539614504425538E-4	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.987111290070546	WITHOUT_CLASSIFICATION	0.012888709929453962	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999959263195417	WITHOUT_CLASSIFICATION	4.073680458299931E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9987677945380865	WITHOUT_CLASSIFICATION	0.0012322054619134063	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999980162433695	WITHOUT_CLASSIFICATION	1.9837566304036095E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998460292632657	WITHOUT_CLASSIFICATION	1.5397073673420564E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999990381993579	WITHOUT_CLASSIFICATION	9.61800642059498E-7	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999997911231453	WITHOUT_CLASSIFICATION	2.088768547812467E-7	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999956958793805	WITHOUT_CLASSIFICATION	4.304120619478095E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999808624093857	WITHOUT_CLASSIFICATION	1.913759061431881E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999987332049575	WITHOUT_CLASSIFICATION	1.2667950425373733E-6	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999989489080975	WITHOUT_CLASSIFICATION	1.0510919025320856E-6	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999993627022495	WITHOUT_CLASSIFICATION	6.372977505458003E-7	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999095308858	WITHOUT_CLASSIFICATION	9.046911423219337E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996494086084	WITHOUT_CLASSIFICATION	3.505913916240964E-7	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999641515244	WITHOUT_CLASSIFICATION	3.58484756766232E-8	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999900827245705	WITHOUT_CLASSIFICATION	9.917275429662003E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999763209916236	WITHOUT_CLASSIFICATION	2.367900837645379E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998663713813313	WITHOUT_CLASSIFICATION	1.3362861866877656E-4	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999999965614	WITHOUT_CLASSIFICATION	3.438606059635316E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999360757739215	WITHOUT_CLASSIFICATION	6.39242260784487E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999095308858	WITHOUT_CLASSIFICATION	9.046911423219337E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996494086084	WITHOUT_CLASSIFICATION	3.505913916240964E-7	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999333417142299	WITHOUT_CLASSIFICATION	6.665828577014892E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9988178817231788	WITHOUT_CLASSIFICATION	0.0011821182768212565	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999796326922	WITHOUT_CLASSIFICATION	2.0367307899807224E-8	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9987303630581109	WITHOUT_CLASSIFICATION	0.0012696369418890262	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999574567898224	WITHOUT_CLASSIFICATION	4.254321017764322E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999994357341927	WITHOUT_CLASSIFICATION	5.642658073478579E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9867712507840839	WITHOUT_CLASSIFICATION	0.013228749215916059	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.999997941919516	WITHOUT_CLASSIFICATION	2.058080484010884E-6	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999475540304613	WITHOUT_CLASSIFICATION	5.244596953863208E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9983846687427688	WITHOUT_CLASSIFICATION	0.0016153312572311626	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999991990036	WITHOUT_CLASSIFICATION	8.00996323871707E-10	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9983846687427688	WITHOUT_CLASSIFICATION	0.0016153312572311626	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999665359374	WITHOUT_CLASSIFICATION	3.346406255110756E-8	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999964665427555	WITHOUT_CLASSIFICATION	3.533457244500104E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999271198736	WITHOUT_CLASSIFICATION	7.288012648999005E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904289067477	WITHOUT_CLASSIFICATION	9.571093252203137E-6	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999975505717091	WITHOUT_CLASSIFICATION	2.449428290843282E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999526598388132	WITHOUT_CLASSIFICATION	4.734016118685533E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999526598388132	WITHOUT_CLASSIFICATION	4.734016118685533E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999998924909387	WITHOUT_CLASSIFICATION	1.0750906130366488E-6	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999935976239511	WITHOUT_CLASSIFICATION	6.4023760488326235E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999844567966298	WITHOUT_CLASSIFICATION	1.554320337019261E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998563532433278	WITHOUT_CLASSIFICATION	1.4364675667221706E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999992845405125	WITHOUT_CLASSIFICATION	7.154594874574308E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9955581419979818	WITHOUT_CLASSIFICATION	0.004441858002018223	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999975424320208	WITHOUT_CLASSIFICATION	2.4575679791629886E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999992042460378	WITHOUT_CLASSIFICATION	7.957539620900965E-7	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999981452063943	WITHOUT_CLASSIFICATION	1.8547936056243255E-6	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999880430667497	WITHOUT_CLASSIFICATION	1.195693325029525E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999992339655112	WITHOUT_CLASSIFICATION	7.660344888342456E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999803816351747	WITHOUT_CLASSIFICATION	1.96183648253623E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.99994178172878	WITHOUT_CLASSIFICATION	5.821827121989326E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.999999729224727	WITHOUT_CLASSIFICATION	2.7077527304298057E-7	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999777478944137	WITHOUT_CLASSIFICATION	2.225210558631336E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999929526472612	WITHOUT_CLASSIFICATION	7.0473527389082835E-6	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999973469062021	WITHOUT_CLASSIFICATION	2.6530937979575236E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998975978495527	WITHOUT_CLASSIFICATION	1.024021504472446E-4	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999997221951482	WITHOUT_CLASSIFICATION	2.778048518218111E-7	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999808994540967	WITHOUT_CLASSIFICATION	1.9100545903348635E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997760135518364	WITHOUT_CLASSIFICATION	2.2398644816351733E-4	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999804739895743	WITHOUT_CLASSIFICATION	1.9526010425698515E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9981794741262867	WITHOUT_CLASSIFICATION	0.0018205258737132445	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999361958677919	WITHOUT_CLASSIFICATION	6.380413220806936E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999402014979146	WITHOUT_CLASSIFICATION	5.979850208544573E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999932875161323	WITHOUT_CLASSIFICATION	6.7124838676744565E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999983468349238	WITHOUT_CLASSIFICATION	1.6531650761741903E-6	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9972446212710315	WITHOUT_CLASSIFICATION	0.0027553787289684756	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999864349855516	WITHOUT_CLASSIFICATION	1.3565014448339036E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999444124901621	WITHOUT_CLASSIFICATION	5.558750983796296E-5	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9997926419244075	WITHOUT_CLASSIFICATION	2.0735807559243624E-4	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999531832922403	WITHOUT_CLASSIFICATION	4.681670775968434E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999975424320208	WITHOUT_CLASSIFICATION	2.4575679791629886E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999969890168079	WITHOUT_CLASSIFICATION	3.010983192149301E-6	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9985834703876894	WITHOUT_CLASSIFICATION	0.001416529612310649	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.999862622893414	WITHOUT_CLASSIFICATION	1.3737710658592487E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999996268206162	WITHOUT_CLASSIFICATION	3.731793839000346E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998117761463492	WITHOUT_CLASSIFICATION	1.8822385365085403E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999874621797009	WITHOUT_CLASSIFICATION	1.253782029904444E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998563532433278	WITHOUT_CLASSIFICATION	1.4364675667221706E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998563532433278	WITHOUT_CLASSIFICATION	1.4364675667221706E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998130058181077	WITHOUT_CLASSIFICATION	1.869941818921759E-4	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999754549984246	WITHOUT_CLASSIFICATION	2.4545001575441258E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999901723100547	WITHOUT_CLASSIFICATION	9.827689945303122E-6	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.999959213642353	WITHOUT_CLASSIFICATION	4.0786357647109254E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9222478375529882	WITHOUT_CLASSIFICATION	0.0777521624470118	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999999825792157	WITHOUT_CLASSIFICATION	1.7420784309809767E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999957154583343	WITHOUT_CLASSIFICATION	4.284541665689717E-6	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999997507238193	WITHOUT_CLASSIFICATION	2.492761806585678E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998739089435534	WITHOUT_CLASSIFICATION	1.2609105644659414E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999366491825	WITHOUT_CLASSIFICATION	6.335081745810223E-8	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999987330169788	WITHOUT_CLASSIFICATION	1.2669830212181898E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999658468093204	WITHOUT_CLASSIFICATION	3.415319067959382E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999992831304547	WITHOUT_CLASSIFICATION	7.168695453028965E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999366491825	WITHOUT_CLASSIFICATION	6.335081745810223E-8	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992372295954	WITHOUT_CLASSIFICATION	7.627704046360894E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999889417688781	WITHOUT_CLASSIFICATION	1.1058231121840208E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.999995771566651	WITHOUT_CLASSIFICATION	4.228433349113417E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9591831075400912	WITHOUT_CLASSIFICATION	0.040816892459908764	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999658468093204	WITHOUT_CLASSIFICATION	3.415319067959382E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999985488396	WITHOUT_CLASSIFICATION	1.4511604254865798E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999999317569	WITHOUT_CLASSIFICATION	6.824311284418429E-10	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999943738836	WITHOUT_CLASSIFICATION	5.626116367606403E-9	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999994348	WITHOUT_CLASSIFICATION	5.652412024281752E-13	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997864332377213	WITHOUT_CLASSIFICATION	2.135667622787133E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997434358883	WITHOUT_CLASSIFICATION	2.5656411172038426E-7	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999990261375	WITHOUT_CLASSIFICATION	9.738624864689342E-10	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970229652865	WITHOUT_CLASSIFICATION	2.977034713495433E-6	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999837270733483	WITHOUT_CLASSIFICATION	1.627292665168361E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999792886584468	WITHOUT_CLASSIFICATION	2.0711341553229942E-5	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999997796182268	WITHOUT_CLASSIFICATION	2.2038177324358798E-7	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.999985147907968	WITHOUT_CLASSIFICATION	1.4852092032023762E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999366491825	WITHOUT_CLASSIFICATION	6.335081745810223E-8	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999985488396	WITHOUT_CLASSIFICATION	1.4511604254865798E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999943738836	WITHOUT_CLASSIFICATION	5.626116367606403E-9	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999983880628407	WITHOUT_CLASSIFICATION	1.6119371592064336E-6	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999038849599622	WITHOUT_CLASSIFICATION	9.611504003783464E-5	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999508938623	WITHOUT_CLASSIFICATION	4.9106137670805106E-8	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999658468093204	WITHOUT_CLASSIFICATION	3.415319067959382E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999905277772382	WITHOUT_CLASSIFICATION	9.472222761741726E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999982310254785	WITHOUT_CLASSIFICATION	1.768974521613056E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998529497413274	WITHOUT_CLASSIFICATION	1.4705025867257492E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999753729226734	WITHOUT_CLASSIFICATION	2.4627077326682766E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970229652865	WITHOUT_CLASSIFICATION	2.977034713495433E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999992372295954	WITHOUT_CLASSIFICATION	7.627704046360894E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.999996401808856	WITHOUT_CLASSIFICATION	3.5981911439714713E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999972969567331	WITHOUT_CLASSIFICATION	2.7030432669253126E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999944492989501	WITHOUT_CLASSIFICATION	5.550701049867835E-6	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999418830362445	WITHOUT_CLASSIFICATION	5.811696375539701E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9321055954055946	WITHOUT_CLASSIFICATION	0.06789440459440542	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9979285345032058	WITHOUT_CLASSIFICATION	0.002071465496794169	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9998645695751361	WITHOUT_CLASSIFICATION	1.3543042486394169E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904289067477	WITHOUT_CLASSIFICATION	9.571093252203137E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992450468905	WITHOUT_CLASSIFICATION	7.549531095180655E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999534559836	WITHOUT_CLASSIFICATION	4.654401630200869E-8	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999852946089	WITHOUT_CLASSIFICATION	1.4705391128079459E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999945868615	WITHOUT_CLASSIFICATION	5.413138536977772E-9	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999916040938	WITHOUT_CLASSIFICATION	8.395906226962916E-9	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999685804822	WITHOUT_CLASSIFICATION	3.14195177283177E-8	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999182504865	WITHOUT_CLASSIFICATION	8.174951346431677E-8	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999160831756	WITHOUT_CLASSIFICATION	8.391682444230077E-8	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999753729226734	WITHOUT_CLASSIFICATION	2.4627077326682766E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999531350583252	WITHOUT_CLASSIFICATION	4.6864941674821064E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.999996375831551	WITHOUT_CLASSIFICATION	3.624168449091354E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999510340495685	WITHOUT_CLASSIFICATION	4.8965950431593944E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999969639179335	WITHOUT_CLASSIFICATION	3.036082066496023E-6	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999842715676208	WITHOUT_CLASSIFICATION	1.5728432379087503E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999997257018766	WITHOUT_CLASSIFICATION	2.742981233399627E-7	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999797253122199	WITHOUT_CLASSIFICATION	2.027468778008213E-5	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.999837148996816	WITHOUT_CLASSIFICATION	1.6285100318400744E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999837219615134	WITHOUT_CLASSIFICATION	1.627803848664808E-5	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999956217391424	WITHOUT_CLASSIFICATION	4.378260857606493E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999983242571536	WITHOUT_CLASSIFICATION	1.6757428464486978E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997896447334	WITHOUT_CLASSIFICATION	2.1035526664057607E-7	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9983826005855558	WITHOUT_CLASSIFICATION	0.0016173994144442173	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999851071189714	WITHOUT_CLASSIFICATION	1.4892881028648486E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999958888803044	WITHOUT_CLASSIFICATION	4.111119695603405E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999401599285	WITHOUT_CLASSIFICATION	5.984007146905907E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999926456771973	WITHOUT_CLASSIFICATION	7.3543228026734E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999989397493704	WITHOUT_CLASSIFICATION	1.0602506296314455E-6	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999970518836006	WITHOUT_CLASSIFICATION	2.948116399505727E-6	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999982431898394	WITHOUT_CLASSIFICATION	1.75681016051592E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999967097037276	WITHOUT_CLASSIFICATION	3.290296272567922E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999976662655521	WITHOUT_CLASSIFICATION	2.3337344479291303E-6	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998289068562	WITHOUT_CLASSIFICATION	1.7109314366767372E-7	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999087711265	WITHOUT_CLASSIFICATION	9.122887351009633E-7	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999544567124	WITHOUT_CLASSIFICATION	4.554328759276342E-8	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.510017483452808	IMPLEMENTATION	0.48998251654719216	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9995360229182066	WITHOUT_CLASSIFICATION	4.6397708179343056E-4	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999677728365975	WITHOUT_CLASSIFICATION	3.222716340246784E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998981063168961	WITHOUT_CLASSIFICATION	1.0189368310393469E-4	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6502063969092117	WITHOUT_CLASSIFICATION	0.3497936030907884	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999786455586	WITHOUT_CLASSIFICATION	2.1354441457969696E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999479339846544	WITHOUT_CLASSIFICATION	5.206601534558081E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999122788481	WITHOUT_CLASSIFICATION	8.772115184303714E-8	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999974350700804	WITHOUT_CLASSIFICATION	2.5649299194555657E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999995577254088	WITHOUT_CLASSIFICATION	4.422745911079929E-7	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999960626341557	WITHOUT_CLASSIFICATION	3.937365844198313E-6	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999474757403	WITHOUT_CLASSIFICATION	5.252425968482086E-8	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999713917725185	WITHOUT_CLASSIFICATION	2.860822748160885E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999960626341557	WITHOUT_CLASSIFICATION	3.937365844198313E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999995577254088	WITHOUT_CLASSIFICATION	4.422745911079929E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999474757403	WITHOUT_CLASSIFICATION	5.252425968482086E-8	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999968706596182	WITHOUT_CLASSIFICATION	3.129340381925888E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996753870477	WITHOUT_CLASSIFICATION	3.246129522923944E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999189851108217	WITHOUT_CLASSIFICATION	8.101488917833949E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999897656583749	WITHOUT_CLASSIFICATION	1.023434162501952E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999845777956	WITHOUT_CLASSIFICATION	1.5422204430650664E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7319039246037972	IMPLEMENTATION	0.26809607539620284	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.99988393427164	WITHOUT_CLASSIFICATION	1.1606572835997144E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999465017641569	WITHOUT_CLASSIFICATION	5.3498235843155005E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999821652024888	WITHOUT_CLASSIFICATION	1.7834797511114357E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999987525467642	WITHOUT_CLASSIFICATION	1.2474532358211421E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999962545474523	WITHOUT_CLASSIFICATION	3.7454525476068024E-6	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999992493878652	WITHOUT_CLASSIFICATION	7.506121347399629E-7	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999980459433085	WITHOUT_CLASSIFICATION	1.954056691508171E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.999953390638712	WITHOUT_CLASSIFICATION	4.660936128812167E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9997648337620789	WITHOUT_CLASSIFICATION	2.3516623792107054E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999560697733	WITHOUT_CLASSIFICATION	4.393022663251171E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999897704859	WITHOUT_CLASSIFICATION	1.0229514198899379E-8	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999997886132	WITHOUT_CLASSIFICATION	2.113868040353481E-9	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999994663125837	WITHOUT_CLASSIFICATION	5.336874162114734E-7	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999999807642251	WITHOUT_CLASSIFICATION	1.9235774884050798E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9964038868492637	WITHOUT_CLASSIFICATION	0.0035961131507363017	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999776819047	WITHOUT_CLASSIFICATION	2.231809527140393E-8	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999903193479275	WITHOUT_CLASSIFICATION	9.680652072515886E-6	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999721485502667	WITHOUT_CLASSIFICATION	2.785144973325881E-5	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999997847871049	WITHOUT_CLASSIFICATION	2.1521289491685008E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999997847871049	WITHOUT_CLASSIFICATION	2.1521289491685008E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999994972337	WITHOUT_CLASSIFICATION	5.027662956344038E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999994972337	WITHOUT_CLASSIFICATION	5.027662956344038E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.8685489775952135	WITHOUT_CLASSIFICATION	0.13145102240478643	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999897704859	WITHOUT_CLASSIFICATION	1.0229514198899379E-8	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999956600537592	WITHOUT_CLASSIFICATION	4.339946240848326E-6	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999973176507378	WITHOUT_CLASSIFICATION	2.6823492620535646E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998551560649	WITHOUT_CLASSIFICATION	1.4484393497094325E-7	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998551560649	WITHOUT_CLASSIFICATION	1.4484393497094325E-7	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999989161973358	WITHOUT_CLASSIFICATION	1.0838026641933129E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999924937964887	WITHOUT_CLASSIFICATION	7.506203511240137E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999981542753806	WITHOUT_CLASSIFICATION	1.8457246193999673E-6	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999971815591822	WITHOUT_CLASSIFICATION	2.818440817921686E-6	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9991798226442435	WITHOUT_CLASSIFICATION	8.201773557565509E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999491251104	WITHOUT_CLASSIFICATION	5.087488955089527E-8	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999887333924399	WITHOUT_CLASSIFICATION	1.126660756016882E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999960835014716	WITHOUT_CLASSIFICATION	3.91649852842834E-6	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.999491444020285	WITHOUT_CLASSIFICATION	5.085559797149233E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999986255997313	WITHOUT_CLASSIFICATION	1.374400268774798E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999950251234381	WITHOUT_CLASSIFICATION	4.974876561846855E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9995019550761882	WITHOUT_CLASSIFICATION	4.980449238117647E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999557658509	WITHOUT_CLASSIFICATION	4.423414924038816E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999974979227542	WITHOUT_CLASSIFICATION	2.502077245899505E-6	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999804373566027	WITHOUT_CLASSIFICATION	1.9562643397315104E-5	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999604884458956	WITHOUT_CLASSIFICATION	3.9511554104404694E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832277823133	WITHOUT_CLASSIFICATION	1.6772217686719617E-5	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9988257758162252	WITHOUT_CLASSIFICATION	0.0011742241837747653	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9997548685169888	WITHOUT_CLASSIFICATION	2.451314830110958E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999986046071264	WITHOUT_CLASSIFICATION	1.395392873556674E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999823962329226	WITHOUT_CLASSIFICATION	1.7603767077302777E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999996845339221	WITHOUT_CLASSIFICATION	3.1546607803266944E-7	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999968531136169	WITHOUT_CLASSIFICATION	3.1468863832265505E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999879546089936	WITHOUT_CLASSIFICATION	1.2045391006338824E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999389734132139	WITHOUT_CLASSIFICATION	6.102658678608877E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999998982129708	WITHOUT_CLASSIFICATION	1.0178702921164785E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999997896447334	WITHOUT_CLASSIFICATION	2.1035526664057607E-7	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999984571141867	WITHOUT_CLASSIFICATION	1.5428858133973946E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999965668462185	WITHOUT_CLASSIFICATION	3.4331537814477712E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860945826937	WITHOUT_CLASSIFICATION	1.3905417306254805E-5	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998432903869648	WITHOUT_CLASSIFICATION	1.5670961303529567E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999821808807845	WITHOUT_CLASSIFICATION	1.7819119215436642E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999821808807845	WITHOUT_CLASSIFICATION	1.7819119215436642E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999997091315714	WITHOUT_CLASSIFICATION	2.908684285355082E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999882816013251	WITHOUT_CLASSIFICATION	1.1718398674890102E-5	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999996804089342	WITHOUT_CLASSIFICATION	3.1959106587767105E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999996804089342	WITHOUT_CLASSIFICATION	3.1959106587767105E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9994620821378856	WITHOUT_CLASSIFICATION	5.379178621143876E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999447397950458	WITHOUT_CLASSIFICATION	5.526020495403893E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999929768469127	WITHOUT_CLASSIFICATION	7.0231530873532175E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999946585980948	WITHOUT_CLASSIFICATION	5.341401905202071E-6	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999609887899019	WITHOUT_CLASSIFICATION	3.9011210098067493E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999944892527456	WITHOUT_CLASSIFICATION	5.510747254432766E-6	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9988870814644202	WITHOUT_CLASSIFICATION	0.0011129185355797904	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999984306056463	WITHOUT_CLASSIFICATION	1.5693943537290462E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997089565595	WITHOUT_CLASSIFICATION	2.910434404300009E-7	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999997089565595	WITHOUT_CLASSIFICATION	2.910434404300009E-7	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999845462268516	WITHOUT_CLASSIFICATION	1.545377314837392E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999986626922459	WITHOUT_CLASSIFICATION	1.337307754046747E-6	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999986626922459	WITHOUT_CLASSIFICATION	1.337307754046747E-6	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999115625594	WITHOUT_CLASSIFICATION	8.843744053434922E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999992125487	WITHOUT_CLASSIFICATION	7.874512282192887E-10	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.999451740646161	WITHOUT_CLASSIFICATION	5.482593538389523E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999878378274512	WITHOUT_CLASSIFICATION	1.2162172548976638E-5	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999951125857277	WITHOUT_CLASSIFICATION	4.88741427238138E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999777488386	WITHOUT_CLASSIFICATION	2.2251161292991923E-8	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998927998878612	WITHOUT_CLASSIFICATION	1.072001121388822E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997318471710879	WITHOUT_CLASSIFICATION	2.681528289121202E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999998547891795	WITHOUT_CLASSIFICATION	1.4521082059292285E-7	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997239613488988	WITHOUT_CLASSIFICATION	2.7603865110112683E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999939303503138	WITHOUT_CLASSIFICATION	6.069649686148581E-6	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.999954320718481	WITHOUT_CLASSIFICATION	4.56792815189161E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999351943931795	WITHOUT_CLASSIFICATION	6.480560682048648E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999351943931795	WITHOUT_CLASSIFICATION	6.480560682048648E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999351943931795	WITHOUT_CLASSIFICATION	6.480560682048648E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999351943931795	WITHOUT_CLASSIFICATION	6.480560682048648E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999971235670995	WITHOUT_CLASSIFICATION	2.876432900474423E-6	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999842591226885	WITHOUT_CLASSIFICATION	1.5740877311424854E-5	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999604530525634	WITHOUT_CLASSIFICATION	3.954694743661823E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999817581928807	WITHOUT_CLASSIFICATION	1.8241807119360455E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999661104577791	WITHOUT_CLASSIFICATION	3.38895422209384E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999746907635851	WITHOUT_CLASSIFICATION	2.5309236414877788E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.99998399487631	WITHOUT_CLASSIFICATION	1.6005123689941515E-5	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998680668245788	WITHOUT_CLASSIFICATION	1.3193317542120085E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999922982594146	WITHOUT_CLASSIFICATION	7.701740585383591E-6	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999947501752656	WITHOUT_CLASSIFICATION	5.249824734305193E-6	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.999996561676	WITHOUT_CLASSIFICATION	3.43832399983138E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998064478456	WITHOUT_CLASSIFICATION	1.9355215440412248E-7	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999992416642027	WITHOUT_CLASSIFICATION	7.583357973042333E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999501598160853	WITHOUT_CLASSIFICATION	4.9840183914825606E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998652121069471	WITHOUT_CLASSIFICATION	1.3478789305283577E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998064478456	WITHOUT_CLASSIFICATION	1.9355215440412248E-7	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9982959645847379	WITHOUT_CLASSIFICATION	0.0017040354152620257	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999977289937844	WITHOUT_CLASSIFICATION	2.271006215556314E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999959366886322	WITHOUT_CLASSIFICATION	4.063311367840122E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999994282285781	WITHOUT_CLASSIFICATION	5.717714218581892E-7	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999248493892392	WITHOUT_CLASSIFICATION	7.515061076080352E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999941077597788	WITHOUT_CLASSIFICATION	5.89224022117975E-6	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999534772327	WITHOUT_CLASSIFICATION	4.65227674327328E-8	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998963724088328	WITHOUT_CLASSIFICATION	1.0362759116716075E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999811215259287	WITHOUT_CLASSIFICATION	1.887847407126236E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.99999990851789	WITHOUT_CLASSIFICATION	9.148211007099052E-8	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993507485064	WITHOUT_CLASSIFICATION	6.492514936152366E-7	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998268833323	WITHOUT_CLASSIFICATION	1.7311666764285233E-7	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999898411551774	WITHOUT_CLASSIFICATION	1.0158844822669124E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9997027477087611	WITHOUT_CLASSIFICATION	2.9725229123885255E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992521316139	WITHOUT_CLASSIFICATION	7.478683861166993E-7	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999922293784288	WITHOUT_CLASSIFICATION	7.770621571104732E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999972406229	WITHOUT_CLASSIFICATION	2.7593770358468114E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999965677069678	WITHOUT_CLASSIFICATION	3.432293032211819E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990463839272	WITHOUT_CLASSIFICATION	9.536160726851696E-7	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999965677069678	WITHOUT_CLASSIFICATION	3.432293032211819E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999966972658709	WITHOUT_CLASSIFICATION	3.3027341290341843E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999774957126	WITHOUT_CLASSIFICATION	2.2504287380199556E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999945496502562	WITHOUT_CLASSIFICATION	5.450349743771737E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999990007547778	WITHOUT_CLASSIFICATION	9.992452222917754E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999972406229	WITHOUT_CLASSIFICATION	2.7593770358468114E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999990463839272	WITHOUT_CLASSIFICATION	9.536160726851696E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999966972658709	WITHOUT_CLASSIFICATION	3.3027341290341843E-6	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999946781122617	WITHOUT_CLASSIFICATION	5.3218877382232356E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9998786091131587	WITHOUT_CLASSIFICATION	1.2139088684125615E-4	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.995997868781981	WITHOUT_CLASSIFICATION	0.00400213121801894	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9976975707924173	WITHOUT_CLASSIFICATION	0.002302429207582742	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999183840092715	WITHOUT_CLASSIFICATION	8.161599072854449E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999981955250344	WITHOUT_CLASSIFICATION	1.8044749655831214E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832277823133	WITHOUT_CLASSIFICATION	1.6772217686719617E-5	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999774957126	WITHOUT_CLASSIFICATION	2.2504287380199556E-8	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999336479822	WITHOUT_CLASSIFICATION	6.635201777017694E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998506152804214	WITHOUT_CLASSIFICATION	1.4938471957864788E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999602414624	WITHOUT_CLASSIFICATION	3.975853765379011E-8	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832277823133	WITHOUT_CLASSIFICATION	1.6772217686719617E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999955471102454	WITHOUT_CLASSIFICATION	4.4528897546217595E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832277823133	WITHOUT_CLASSIFICATION	1.6772217686719617E-5	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999993580906581	WITHOUT_CLASSIFICATION	6.419093418681596E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999993290079321	WITHOUT_CLASSIFICATION	6.709920678458832E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999837423671092	WITHOUT_CLASSIFICATION	1.6257632890721368E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999936180975244	WITHOUT_CLASSIFICATION	6.381902475561763E-6	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999980079259359	WITHOUT_CLASSIFICATION	1.992074064064095E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999856283711387	WITHOUT_CLASSIFICATION	1.437162886127018E-5	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999998833911663	WITHOUT_CLASSIFICATION	1.1660883376546234E-7	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999835810218114	WITHOUT_CLASSIFICATION	1.6418978188635474E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999992972538571	WITHOUT_CLASSIFICATION	7.027461429908734E-7	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999912452941174	WITHOUT_CLASSIFICATION	8.754705882474676E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998928156693407	WITHOUT_CLASSIFICATION	1.0718433065929265E-4	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999610148275	WITHOUT_CLASSIFICATION	3.898517240056242E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.999451740646161	WITHOUT_CLASSIFICATION	5.482593538389523E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999826338727418	WITHOUT_CLASSIFICATION	1.736612725815913E-5	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999717430418646	WITHOUT_CLASSIFICATION	2.825695813533984E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999963060048047	WITHOUT_CLASSIFICATION	3.693995195229029E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999652426502995	WITHOUT_CLASSIFICATION	3.475734970051215E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999976928555	WITHOUT_CLASSIFICATION	2.3071444117762392E-9	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999969590820211	WITHOUT_CLASSIFICATION	3.0409179789105593E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9969441412449189	WITHOUT_CLASSIFICATION	0.0030558587550811272	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9995133121115334	WITHOUT_CLASSIFICATION	4.866878884666304E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999998891034328	WITHOUT_CLASSIFICATION	1.1089656712555041E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.99999998859454	WITHOUT_CLASSIFICATION	1.1405459967001252E-8	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9994525241323191	WITHOUT_CLASSIFICATION	5.474758676809329E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998982864621186	WITHOUT_CLASSIFICATION	1.0171353788129114E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999603064111425	WITHOUT_CLASSIFICATION	3.9693588857472245E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996804864052	WITHOUT_CLASSIFICATION	3.195135947979065E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999797560598096	WITHOUT_CLASSIFICATION	2.0243940190378977E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999766285307702	WITHOUT_CLASSIFICATION	2.33714692297793E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998659873067	WITHOUT_CLASSIFICATION	1.340126933156363E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9987737275011418	WITHOUT_CLASSIFICATION	0.0012262724988581321	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999979452363816	WITHOUT_CLASSIFICATION	2.0547636183626976E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999644416308715	WITHOUT_CLASSIFICATION	3.555836912849038E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999818903056658	WITHOUT_CLASSIFICATION	1.8109694334173194E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9999568325875194	WITHOUT_CLASSIFICATION	4.316741248067371E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993168819271	WITHOUT_CLASSIFICATION	6.831180728187537E-7	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999987832445268	WITHOUT_CLASSIFICATION	1.2167554731808747E-6	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999171054213839	WITHOUT_CLASSIFICATION	8.289457861601717E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999100877716992	WITHOUT_CLASSIFICATION	8.991222830078082E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999997838850867	WITHOUT_CLASSIFICATION	2.161149132366261E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9969383701795583	WITHOUT_CLASSIFICATION	0.003061629820441561	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999987708601695	WITHOUT_CLASSIFICATION	1.2291398304985685E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9994945374005781	WITHOUT_CLASSIFICATION	5.054625994218737E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999418545932377	WITHOUT_CLASSIFICATION	5.814540676227897E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999418545932377	WITHOUT_CLASSIFICATION	5.814540676227897E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9286166007064959	WITHOUT_CLASSIFICATION	0.07138339929350418	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999835810218114	WITHOUT_CLASSIFICATION	1.6418978188635474E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999294964380386	WITHOUT_CLASSIFICATION	7.050356196126361E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999938809869	WITHOUT_CLASSIFICATION	6.11901311456193E-9	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999893759603304	WITHOUT_CLASSIFICATION	1.0624039669503094E-5	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9991923480198418	WITHOUT_CLASSIFICATION	8.076519801581965E-4	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.999979921601514	WITHOUT_CLASSIFICATION	2.007839848586878E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999544306228244	WITHOUT_CLASSIFICATION	4.556937717560269E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999991611138301	WITHOUT_CLASSIFICATION	8.388861698054349E-7	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999984893364	WITHOUT_CLASSIFICATION	1.5106635452566824E-9	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9995195732424638	WITHOUT_CLASSIFICATION	4.804267575362018E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999992226424513	WITHOUT_CLASSIFICATION	7.773575486720927E-7	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.999999535746508	WITHOUT_CLASSIFICATION	4.64253492079868E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999420653731	WITHOUT_CLASSIFICATION	5.793462673633111E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999993729074848	WITHOUT_CLASSIFICATION	6.27092515367882E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999454939418707	WITHOUT_CLASSIFICATION	5.450605812930119E-4	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999021935411	WITHOUT_CLASSIFICATION	9.78064588162931E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999563091306	WITHOUT_CLASSIFICATION	4.369086938840338E-8	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999840137178	WITHOUT_CLASSIFICATION	1.5986282244277296E-8	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997468805701727	WITHOUT_CLASSIFICATION	2.53119429827318E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999989314579651	WITHOUT_CLASSIFICATION	1.0685420349077767E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995388195961142	WITHOUT_CLASSIFICATION	4.611804038857698E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999706048841781	WITHOUT_CLASSIFICATION	2.9395115821956215E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998983241749	WITHOUT_CLASSIFICATION	1.016758249825254E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9969383701795583	WITHOUT_CLASSIFICATION	0.003061629820441561	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999992209335453	WITHOUT_CLASSIFICATION	7.790664546626345E-7	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999516107562	WITHOUT_CLASSIFICATION	4.838924374871652E-8	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998996984256	WITHOUT_CLASSIFICATION	1.0030157432624303E-7	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999981042455074	WITHOUT_CLASSIFICATION	1.8957544926847702E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9972067302236834	WITHOUT_CLASSIFICATION	0.002793269776316657	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999910870157463	WITHOUT_CLASSIFICATION	8.912984253700149E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999969982525778	WITHOUT_CLASSIFICATION	3.0017474221297725E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999986616056561	WITHOUT_CLASSIFICATION	1.3383943439239906E-6	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999276757666	WITHOUT_CLASSIFICATION	7.232423339808699E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999991390423545	WITHOUT_CLASSIFICATION	8.609576454366586E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999930057401538	WITHOUT_CLASSIFICATION	6.994259846132781E-6	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999984825379015	WITHOUT_CLASSIFICATION	1.5174620985258385E-6	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999998131443804	WITHOUT_CLASSIFICATION	1.8685561965135625E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999814158370866	WITHOUT_CLASSIFICATION	1.858416291342939E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9983762911186106	WITHOUT_CLASSIFICATION	0.0016237088813894182	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9983762911186106	WITHOUT_CLASSIFICATION	0.0016237088813894182	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999638399609054	WITHOUT_CLASSIFICATION	3.616003909462482E-5	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999068047540545	WITHOUT_CLASSIFICATION	9.31952459455116E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999991255465673	WITHOUT_CLASSIFICATION	8.744534327095449E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999991255465673	WITHOUT_CLASSIFICATION	8.744534327095449E-7	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999421302763	WITHOUT_CLASSIFICATION	5.78697237003785E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999888665026757	WITHOUT_CLASSIFICATION	1.1133497324230424E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9685122272548752	WITHOUT_CLASSIFICATION	0.03148777274512472	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999742887968	WITHOUT_CLASSIFICATION	2.5711203119776996E-8	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997452878804	WITHOUT_CLASSIFICATION	2.5471211955999926E-7	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999997258831095	WITHOUT_CLASSIFICATION	2.74116890484464E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999865892067	WITHOUT_CLASSIFICATION	1.3410793300502743E-8	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999865892067	WITHOUT_CLASSIFICATION	1.3410793300502743E-8	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999991532179557	WITHOUT_CLASSIFICATION	8.467820443086078E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999982544129403	WITHOUT_CLASSIFICATION	1.7455870597813091E-6	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999978566564262	WITHOUT_CLASSIFICATION	2.143343573827002E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999952877450898	WITHOUT_CLASSIFICATION	4.712254910134138E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999952877450898	WITHOUT_CLASSIFICATION	4.712254910134138E-6	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999997290442887	WITHOUT_CLASSIFICATION	2.7095571133037E-7	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999933156822725	WITHOUT_CLASSIFICATION	6.684317727609401E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999999988459523	WITHOUT_CLASSIFICATION	1.1540477050273248E-8	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999983737226465	WITHOUT_CLASSIFICATION	1.6262773534627675E-6	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999996071313626	WITHOUT_CLASSIFICATION	3.9286863729647607E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999979968573872	WITHOUT_CLASSIFICATION	2.0031426128669682E-6	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999939783013263	WITHOUT_CLASSIFICATION	6.021698673774026E-6	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.999983731383995	WITHOUT_CLASSIFICATION	1.626861600491306E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.99999953787726	WITHOUT_CLASSIFICATION	4.6212273999908314E-7	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.999999301612819	WITHOUT_CLASSIFICATION	6.983871809640502E-7	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999998086475755	WITHOUT_CLASSIFICATION	1.9135242447007283E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9959143124242957	WITHOUT_CLASSIFICATION	0.004085687575704319	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.98175030302971	WITHOUT_CLASSIFICATION	0.018249696970290004	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999720492718476	WITHOUT_CLASSIFICATION	2.7950728152438304E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999766333966534	WITHOUT_CLASSIFICATION	2.3366603346453822E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999624676452	WITHOUT_CLASSIFICATION	3.7532354833082846E-8	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999008713213603	WITHOUT_CLASSIFICATION	9.912867863980512E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999995604838742	WITHOUT_CLASSIFICATION	4.3951612581269543E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.999996695503546	WITHOUT_CLASSIFICATION	3.3044964540477277E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999999022860601	WITHOUT_CLASSIFICATION	9.77139398941987E-7	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999980452770597	WITHOUT_CLASSIFICATION	1.954722940299105E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999310341634493	WITHOUT_CLASSIFICATION	6.896583655074687E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9959425020400637	WITHOUT_CLASSIFICATION	0.0040574979599363155	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999996754641814	WITHOUT_CLASSIFICATION	3.245358185857625E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999974146240121	WITHOUT_CLASSIFICATION	2.58537598789038E-6	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999961365388	WITHOUT_CLASSIFICATION	3.863461210042096E-9	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998564723195	WITHOUT_CLASSIFICATION	1.4352768052448052E-7	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999662031558284	WITHOUT_CLASSIFICATION	3.379684417157819E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999995525964929	WITHOUT_CLASSIFICATION	4.474035071594495E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999945856683159	WITHOUT_CLASSIFICATION	5.4143316842143495E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999529576454426	WITHOUT_CLASSIFICATION	4.7042354557408356E-4	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999992992514837	WITHOUT_CLASSIFICATION	7.007485164418606E-7	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999884677902	WITHOUT_CLASSIFICATION	1.1532209796522321E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999791044872413	WITHOUT_CLASSIFICATION	2.0895512758784433E-5	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999972919937606	WITHOUT_CLASSIFICATION	2.7080062393989228E-5	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999734712442381	WITHOUT_CLASSIFICATION	2.6528755762030117E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9997084375427202	WITHOUT_CLASSIFICATION	2.91562457279779E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999998854483139	WITHOUT_CLASSIFICATION	1.1455168616803808E-7	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999954428738388	WITHOUT_CLASSIFICATION	4.557126161237949E-6	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999518377654	WITHOUT_CLASSIFICATION	4.8162234611834715E-8	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998027326717	WITHOUT_CLASSIFICATION	1.9726732829913854E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999986595592345	WITHOUT_CLASSIFICATION	1.3404407655329708E-6	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999993221732767	WITHOUT_CLASSIFICATION	6.778267233259702E-7	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999782052475261	WITHOUT_CLASSIFICATION	2.1794752473854045E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999678889499242	WITHOUT_CLASSIFICATION	3.21110500757888E-5	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999997949922285	WITHOUT_CLASSIFICATION	2.0500777145831758E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999939829923125	WITHOUT_CLASSIFICATION	6.017007687561149E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999988790727364	WITHOUT_CLASSIFICATION	1.120927263545538E-6	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999984478857188	WITHOUT_CLASSIFICATION	1.5521142812293174E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999997189921769	WITHOUT_CLASSIFICATION	2.810078231957989E-7	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999779536200282	WITHOUT_CLASSIFICATION	2.2046379971767746E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9819581079341747	WITHOUT_CLASSIFICATION	0.01804189206582525	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9993462582591914	WITHOUT_CLASSIFICATION	6.537417408086968E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999987744909009	WITHOUT_CLASSIFICATION	1.2255090990266487E-6	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999998912086326	WITHOUT_CLASSIFICATION	1.087913674022697E-6	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998831069578191	WITHOUT_CLASSIFICATION	1.1689304218079971E-4	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999998867636247	WITHOUT_CLASSIFICATION	1.1323637529742323E-6	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999980163396457	WITHOUT_CLASSIFICATION	1.9836603543885265E-6	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999971973885321	WITHOUT_CLASSIFICATION	2.8026114678450757E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999947733642495	WITHOUT_CLASSIFICATION	5.22663575046849E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993724472745	WITHOUT_CLASSIFICATION	6.275527254074507E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993724472745	WITHOUT_CLASSIFICATION	6.275527254074507E-7	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999918954674	WITHOUT_CLASSIFICATION	8.104532476401535E-9	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999923412742563	WITHOUT_CLASSIFICATION	7.658725743720815E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999983796598937	WITHOUT_CLASSIFICATION	1.6203401062113188E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999968339615	WITHOUT_CLASSIFICATION	3.1660385136095856E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999999542320379	WITHOUT_CLASSIFICATION	4.57679621000411E-7	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999590299671041	WITHOUT_CLASSIFICATION	4.097003289599981E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999981159569	WITHOUT_CLASSIFICATION	1.8840431254818784E-9	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999708556668279	WITHOUT_CLASSIFICATION	2.914433317207884E-5	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999996245935547	WITHOUT_CLASSIFICATION	3.754064453647313E-7	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999408285045	WITHOUT_CLASSIFICATION	5.9171495396656506E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999998194801523	WITHOUT_CLASSIFICATION	1.8051984773616314E-7	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999946790881915	WITHOUT_CLASSIFICATION	5.32091180845308E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999974998524942	WITHOUT_CLASSIFICATION	2.500147505858104E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999929547605189	WITHOUT_CLASSIFICATION	7.045239481231866E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999811608556349	WITHOUT_CLASSIFICATION	1.883914436513607E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999811608556349	WITHOUT_CLASSIFICATION	1.883914436513607E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999998449237	WITHOUT_CLASSIFICATION	1.5507637044985538E-10	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999989436600124	WITHOUT_CLASSIFICATION	1.0563399875833127E-6	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999244249413	WITHOUT_CLASSIFICATION	7.55750585786584E-8	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999748964224	WITHOUT_CLASSIFICATION	2.5103577547707705E-8	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999978014671665	WITHOUT_CLASSIFICATION	2.1985328334983694E-6	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989356152824	WITHOUT_CLASSIFICATION	1.0643847176265018E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999520969601099	WITHOUT_CLASSIFICATION	4.790303989008734E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9994563515219306	WITHOUT_CLASSIFICATION	5.436484780694293E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999025603944	WITHOUT_CLASSIFICATION	9.743960565184422E-8	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999998451585818	WITHOUT_CLASSIFICATION	1.5484141835941414E-7	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999206104226	WITHOUT_CLASSIFICATION	7.938957732679211E-8	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999995154030338	WITHOUT_CLASSIFICATION	4.845969661295148E-7	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999821206604	WITHOUT_CLASSIFICATION	1.7879339559898823E-8	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999989524698177	WITHOUT_CLASSIFICATION	1.0475301822892965E-5	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999998764595583	WITHOUT_CLASSIFICATION	1.2354044165160208E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999998833138919	WITHOUT_CLASSIFICATION	1.1668610816215841E-7	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999463985639061	WITHOUT_CLASSIFICATION	5.360143609376927E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999995015399842	WITHOUT_CLASSIFICATION	4.984600157358777E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999058448528	WITHOUT_CLASSIFICATION	9.415514727787373E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999997162283021	WITHOUT_CLASSIFICATION	2.8377169798382715E-7	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999825996048	WITHOUT_CLASSIFICATION	1.7400395192584148E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998617124282	WITHOUT_CLASSIFICATION	1.3828757175862159E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.99999950218149	WITHOUT_CLASSIFICATION	4.978185100404787E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999928861954857	WITHOUT_CLASSIFICATION	7.113804514303389E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999923049464523	WITHOUT_CLASSIFICATION	7.695053547682222E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9997476866214843	WITHOUT_CLASSIFICATION	2.5231337851575454E-4	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999992431325894	WITHOUT_CLASSIFICATION	7.56867410597197E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9918622019068076	WITHOUT_CLASSIFICATION	0.008137798093192311	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999923262665226	WITHOUT_CLASSIFICATION	7.673733477451921E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999995298663273	WITHOUT_CLASSIFICATION	4.7013367257370105E-7	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999972241488798	WITHOUT_CLASSIFICATION	2.775851120253828E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999995042036066	WITHOUT_CLASSIFICATION	4.957963933967155E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999215926596492	WITHOUT_CLASSIFICATION	7.840734035086875E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999973773329562	WITHOUT_CLASSIFICATION	2.622667043799384E-5	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9998066102057096	WITHOUT_CLASSIFICATION	1.9338979429036322E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998281859297	WITHOUT_CLASSIFICATION	1.718140702439828E-7	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999965311194663	WITHOUT_CLASSIFICATION	3.468880533687906E-6	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998154500188	WITHOUT_CLASSIFICATION	1.8454998119819282E-7	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999957396621855	WITHOUT_CLASSIFICATION	4.260337814567674E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999041950819	WITHOUT_CLASSIFICATION	9.580491809092004E-8	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998242648501207	WITHOUT_CLASSIFICATION	1.7573514987926308E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998242648501207	WITHOUT_CLASSIFICATION	1.7573514987926308E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999978802913366	WITHOUT_CLASSIFICATION	2.1197086634390638E-6	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999968477328162	WITHOUT_CLASSIFICATION	3.1522671837931463E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9997473816443956	WITHOUT_CLASSIFICATION	2.5261835560436206E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999997767066363	WITHOUT_CLASSIFICATION	2.232933636847472E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999400726556853	WITHOUT_CLASSIFICATION	5.992734431476799E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999356076705	WITHOUT_CLASSIFICATION	6.439232945416284E-8	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998556871576098	WITHOUT_CLASSIFICATION	1.4431284239021825E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999939570306134	WITHOUT_CLASSIFICATION	6.0429693866046055E-6	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999998340082156	WITHOUT_CLASSIFICATION	1.6599178456277973E-7	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994305693111	WITHOUT_CLASSIFICATION	5.694306889578796E-7	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993954606908	WITHOUT_CLASSIFICATION	6.045393091689077E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999972284837421	WITHOUT_CLASSIFICATION	2.7715162579563727E-6	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999608854165021	WITHOUT_CLASSIFICATION	3.911458349794383E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999986913765435	WITHOUT_CLASSIFICATION	1.3086234565414326E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9997424264786948	WITHOUT_CLASSIFICATION	2.5757352130516997E-4	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9433534292964086	WITHOUT_CLASSIFICATION	0.05664657070359137	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999996622821595	WITHOUT_CLASSIFICATION	3.3771784048950027E-7	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999998216208454	WITHOUT_CLASSIFICATION	1.7837915463347144E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999820361971665	WITHOUT_CLASSIFICATION	1.7963802833439428E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999997532779408	WITHOUT_CLASSIFICATION	2.4672205913278023E-7	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999999969770131	WITHOUT_CLASSIFICATION	3.022986907239473E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999626985093732	WITHOUT_CLASSIFICATION	3.730149062683083E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999982537421065	WITHOUT_CLASSIFICATION	1.7462578934999874E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997440797209061	WITHOUT_CLASSIFICATION	2.55920279093883E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999728808758025	WITHOUT_CLASSIFICATION	2.7119124197530684E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999911787988992	WITHOUT_CLASSIFICATION	8.821201100787822E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998707513426	WITHOUT_CLASSIFICATION	1.292486574749034E-7	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999292319819	WITHOUT_CLASSIFICATION	7.076801811948203E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9994759760857765	WITHOUT_CLASSIFICATION	5.240239142234358E-4	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9733990774818793	WITHOUT_CLASSIFICATION	0.0266009225181208	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999879976775613	WITHOUT_CLASSIFICATION	1.2002322438753594E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9995756923671841	WITHOUT_CLASSIFICATION	4.243076328158315E-4	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999898697826	WITHOUT_CLASSIFICATION	1.0130217433901728E-8	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997746946645	WITHOUT_CLASSIFICATION	2.2530533558287237E-7	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999970128055	WITHOUT_CLASSIFICATION	2.987194478656717E-9	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999866530798558	WITHOUT_CLASSIFICATION	1.3346920144363265E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999997673158352	WITHOUT_CLASSIFICATION	2.32684164807292E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999997717873298	WITHOUT_CLASSIFICATION	2.2821267016611108E-7	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999985143623045	WITHOUT_CLASSIFICATION	1.4856376954930264E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999594548269488	WITHOUT_CLASSIFICATION	4.0545173051180365E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999759741438691	WITHOUT_CLASSIFICATION	2.4025856130927485E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999998415017917	WITHOUT_CLASSIFICATION	1.584982083189565E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999831971049	WITHOUT_CLASSIFICATION	1.6802894993226984E-8	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999946602114	WITHOUT_CLASSIFICATION	5.339788611875305E-9	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999824808009367	WITHOUT_CLASSIFICATION	1.751919906332173E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999919837631931	WITHOUT_CLASSIFICATION	8.016236806942766E-6	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999994826308481	WITHOUT_CLASSIFICATION	5.173691518924443E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999974998524942	WITHOUT_CLASSIFICATION	2.500147505858104E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999994461135	WITHOUT_CLASSIFICATION	5.538865405891873E-10	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999447870886	WITHOUT_CLASSIFICATION	5.521291129358499E-8	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9992508921841193	WITHOUT_CLASSIFICATION	7.491078158806713E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9998716479486154	WITHOUT_CLASSIFICATION	1.2835205138458821E-4	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999992966873021	WITHOUT_CLASSIFICATION	7.033126978326889E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999595341060272	WITHOUT_CLASSIFICATION	4.0465893972702024E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.994723783448716	WITHOUT_CLASSIFICATION	0.005276216551284034	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999528531227073	WITHOUT_CLASSIFICATION	4.714687729259987E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999951002506	WITHOUT_CLASSIFICATION	4.899749437520607E-9	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996746575459003	WITHOUT_CLASSIFICATION	3.2534245409965713E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999968237490046	WITHOUT_CLASSIFICATION	3.176250995393808E-5	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999992312973449	WITHOUT_CLASSIFICATION	7.687026551260812E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999999985506177	WITHOUT_CLASSIFICATION	1.4493823026311784E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998819041245	WITHOUT_CLASSIFICATION	1.180958756340996E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731193786392	WITHOUT_CLASSIFICATION	2.6880621360753937E-5	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9989792151258944	WITHOUT_CLASSIFICATION	0.0010207848741057084	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999997021407147	WITHOUT_CLASSIFICATION	2.978592853402441E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999728062914406	WITHOUT_CLASSIFICATION	2.719370855939418E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999558377168866	WITHOUT_CLASSIFICATION	4.4162283113433455E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731193786392	WITHOUT_CLASSIFICATION	2.6880621360753937E-5	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999999410675173	WITHOUT_CLASSIFICATION	5.893248267168943E-8	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999951501453	WITHOUT_CLASSIFICATION	4.849854789772247E-9	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999962740226536	WITHOUT_CLASSIFICATION	3.725977346399898E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999597097053	WITHOUT_CLASSIFICATION	4.0290294767103305E-8	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999998279969153	WITHOUT_CLASSIFICATION	1.7200308470819956E-7	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999962895727	WITHOUT_CLASSIFICATION	3.710427361715267E-9	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999544640642	WITHOUT_CLASSIFICATION	4.553593575882685E-8	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9997058733391754	WITHOUT_CLASSIFICATION	2.941266608246423E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999509012538	WITHOUT_CLASSIFICATION	4.909874603724131E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991427414031	WITHOUT_CLASSIFICATION	8.572585968382492E-7	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994235015521643	WITHOUT_CLASSIFICATION	5.764984478356901E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999916408102343	WITHOUT_CLASSIFICATION	8.359189765743456E-6	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999998102948474	WITHOUT_CLASSIFICATION	1.8970515270132365E-7	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9828191854846937	WITHOUT_CLASSIFICATION	0.017180814515306262	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9881663148803372	WITHOUT_CLASSIFICATION	0.011833685119662816	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998983241749	WITHOUT_CLASSIFICATION	1.016758249825254E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999995936796776	WITHOUT_CLASSIFICATION	4.063203223290176E-7	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999648431995	WITHOUT_CLASSIFICATION	3.515680046310401E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9946826850158969	WITHOUT_CLASSIFICATION	0.00531731498410323	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9983602571538298	WITHOUT_CLASSIFICATION	0.0016397428461701765	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9996000605961975	WITHOUT_CLASSIFICATION	3.999394038024027E-4	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999960314501396	WITHOUT_CLASSIFICATION	3.96854986040918E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999993128130898	WITHOUT_CLASSIFICATION	6.871869102466466E-7	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999781222091	WITHOUT_CLASSIFICATION	2.187779088853505E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999997240557	WITHOUT_CLASSIFICATION	2.759442386690602E-10	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999997168902213	WITHOUT_CLASSIFICATION	2.831097787299538E-7	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999996346666228	WITHOUT_CLASSIFICATION	3.653333772633002E-7	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999978050936716	WITHOUT_CLASSIFICATION	2.1949063283347974E-6	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.823550255538522	WITHOUT_CLASSIFICATION	0.17644974446147813	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9808881811298844	IMPLEMENTATION	0.019111818870115604	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999983762983161	WITHOUT_CLASSIFICATION	1.6237016838376157E-6	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996450098460335	WITHOUT_CLASSIFICATION	3.5499015396655523E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999983933384353	WITHOUT_CLASSIFICATION	1.6066615646984704E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999979340789079	WITHOUT_CLASSIFICATION	2.065921092035057E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999895115920668	WITHOUT_CLASSIFICATION	1.0488407933222877E-5	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999814278917	WITHOUT_CLASSIFICATION	1.8572108226309807E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998882236603	WITHOUT_CLASSIFICATION	1.1177633969987317E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999983608651609	WITHOUT_CLASSIFICATION	1.6391348391149118E-6	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999999998234524	WITHOUT_CLASSIFICATION	1.7654760208648848E-9	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999991461607827	WITHOUT_CLASSIFICATION	8.538392174239189E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9946011784789652	WITHOUT_CLASSIFICATION	0.005398821521034779	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9946011784789652	WITHOUT_CLASSIFICATION	0.005398821521034779	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999971319438045	WITHOUT_CLASSIFICATION	2.8680561955174996E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998402964122	WITHOUT_CLASSIFICATION	1.5970358780524158E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999147598323	WITHOUT_CLASSIFICATION	8.524016764755651E-8	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5259438107322658	WITHOUT_CLASSIFICATION	0.47405618926773413	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999946585980948	WITHOUT_CLASSIFICATION	5.341401905202071E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999946585980948	WITHOUT_CLASSIFICATION	5.341401905202071E-6	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999837350072823	WITHOUT_CLASSIFICATION	1.6264992717618987E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999950261862	WITHOUT_CLASSIFICATION	4.973813790728615E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999801321694899	WITHOUT_CLASSIFICATION	1.9867830510106045E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999954113123289	WITHOUT_CLASSIFICATION	4.588687670999997E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999872657294	WITHOUT_CLASSIFICATION	1.2734270599210905E-8	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999923271236525	WITHOUT_CLASSIFICATION	7.672876347524574E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999995762598893	WITHOUT_CLASSIFICATION	4.2374011069474324E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999992747078995	WITHOUT_CLASSIFICATION	7.252921005729485E-7	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999900175217	WITHOUT_CLASSIFICATION	9.982478354973439E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994829018714	WITHOUT_CLASSIFICATION	5.170981286961814E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994829018714	WITHOUT_CLASSIFICATION	5.170981286961814E-7	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999987259159508	WITHOUT_CLASSIFICATION	1.2740840490640396E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970229652865	WITHOUT_CLASSIFICATION	2.977034713495433E-6	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999997434358883	WITHOUT_CLASSIFICATION	2.5656411172038426E-7	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998385686574425	WITHOUT_CLASSIFICATION	1.6143134255745028E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.999993270906693	WITHOUT_CLASSIFICATION	6.72909330699965E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992450468905	WITHOUT_CLASSIFICATION	7.549531095180655E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873922334359	WITHOUT_CLASSIFICATION	1.2607766564189993E-5	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999998304645884	WITHOUT_CLASSIFICATION	1.6953541160278779E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999976062953171	WITHOUT_CLASSIFICATION	2.393704683014202E-6	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999136202283935	WITHOUT_CLASSIFICATION	8.637977160643544E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999970868191493	WITHOUT_CLASSIFICATION	2.9131808506841465E-6	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991427414031	WITHOUT_CLASSIFICATION	8.572585968382492E-7	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999995366395775	WITHOUT_CLASSIFICATION	4.6336042235493056E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999687891943376	WITHOUT_CLASSIFICATION	3.1210805662389946E-5	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999997382110047	WITHOUT_CLASSIFICATION	2.6178899530444517E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999933302192363	WITHOUT_CLASSIFICATION	6.669780763659902E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999975494611946	WITHOUT_CLASSIFICATION	2.450538805473011E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999975927115163	WITHOUT_CLASSIFICATION	2.4072884835531507E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999993913615368	WITHOUT_CLASSIFICATION	6.086384632382256E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999976198476058	WITHOUT_CLASSIFICATION	2.380152394156827E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999977210239965	WITHOUT_CLASSIFICATION	2.2789760035290733E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999489038919992	WITHOUT_CLASSIFICATION	5.1096108000852246E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999489038919992	WITHOUT_CLASSIFICATION	5.1096108000852246E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998064478456	WITHOUT_CLASSIFICATION	1.9355215440412248E-7	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.999896593625323	WITHOUT_CLASSIFICATION	1.0340637467696874E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997111908559447	WITHOUT_CLASSIFICATION	2.888091440552531E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9996837249576687	WITHOUT_CLASSIFICATION	3.1627504233131703E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999904414420409	WITHOUT_CLASSIFICATION	9.558557959059454E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999980282551348	WITHOUT_CLASSIFICATION	1.9717448651952188E-6	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992521316139	WITHOUT_CLASSIFICATION	7.478683861166993E-7	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999992094608506	WITHOUT_CLASSIFICATION	7.905391494221497E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999946781122617	WITHOUT_CLASSIFICATION	5.3218877382232356E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999792950951304	WITHOUT_CLASSIFICATION	2.0704904869638186E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832277823133	WITHOUT_CLASSIFICATION	1.6772217686719617E-5	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9989303521083368	WITHOUT_CLASSIFICATION	0.00106964789166318	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9981965720310819	WITHOUT_CLASSIFICATION	0.0018034279689180643	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999990398547903	WITHOUT_CLASSIFICATION	9.60145209734942E-7	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999980570543865	WITHOUT_CLASSIFICATION	1.9429456134724566E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999989508402788	WITHOUT_CLASSIFICATION	1.0491597212829358E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999964066729	WITHOUT_CLASSIFICATION	3.593327055914881E-9	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999984385044564	WITHOUT_CLASSIFICATION	1.5614955435532254E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997395927235949	WITHOUT_CLASSIFICATION	2.6040727640504023E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999996118233	WITHOUT_CLASSIFICATION	3.881767311025295E-10	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999911676019	WITHOUT_CLASSIFICATION	8.832398209416529E-9	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999035172771	WITHOUT_CLASSIFICATION	9.648272295986744E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999999988459523	WITHOUT_CLASSIFICATION	1.1540477050273248E-8	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999975406	WITHOUT_CLASSIFICATION	2.4594474795322863E-12	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990810398244	WITHOUT_CLASSIFICATION	9.189601755217802E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990810398244	WITHOUT_CLASSIFICATION	9.189601755217802E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999975554845288	WITHOUT_CLASSIFICATION	2.444515471049338E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9997753060005535	WITHOUT_CLASSIFICATION	2.2469399944648338E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999639947377048	WITHOUT_CLASSIFICATION	3.600526229524032E-5	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999998324020789	WITHOUT_CLASSIFICATION	1.6759792107915665E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999984866492431	WITHOUT_CLASSIFICATION	1.5133507568759312E-6	IMPLEMENTATION
