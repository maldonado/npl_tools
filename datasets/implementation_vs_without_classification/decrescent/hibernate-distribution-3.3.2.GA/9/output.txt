todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9910092217883945	WITHOUT_CLASSIFICATION	0.008990778211605526	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9910092217883945	WITHOUT_CLASSIFICATION	0.008990778211605526	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9689798608530306	WITHOUT_CLASSIFICATION	0.031020139146969467	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6035651059594198	WITHOUT_CLASSIFICATION	0.3964348940405802	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8479134751986823	WITHOUT_CLASSIFICATION	0.15208652480131774	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9898089574429751	IMPLEMENTATION	0.010191042557024887	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9907997631914724	WITHOUT_CLASSIFICATION	0.009200236808527594	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9940812243886852	WITHOUT_CLASSIFICATION	0.005918775611314792	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.8786659558005919	WITHOUT_CLASSIFICATION	0.121334044199408	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.7109457489584406	IMPLEMENTATION	0.28905425104155924	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.6489043132486599	WITHOUT_CLASSIFICATION	0.35109568675134	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.9916919464016402	IMPLEMENTATION	0.008308053598359757	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6929244666490892	WITHOUT_CLASSIFICATION	0.3070755333509107	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6929244666490892	WITHOUT_CLASSIFICATION	0.3070755333509107	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9911446597496039	IMPLEMENTATION	0.008855340250396054	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8641227151592048	IMPLEMENTATION	0.1358772848407952	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9997412062674182	IMPLEMENTATION	2.5879373258171887E-4	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.999963528852223	WITHOUT_CLASSIFICATION	3.647114777700812E-5	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999999994291712	WITHOUT_CLASSIFICATION	5.708287612309236E-10	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.7960075114771646	IMPLEMENTATION	0.20399248852283522	WITHOUT_CLASSIFICATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.8762208037280111	IMPLEMENTATION	0.12377919627198884	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9988037239427966	WITHOUT_CLASSIFICATION	0.001196276057203486	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9024724031755181	IMPLEMENTATION	0.09752759682448182	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9972846225789016	IMPLEMENTATION	0.002715377421098404	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9972846225789016	IMPLEMENTATION	0.002715377421098404	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9967169601087622	IMPLEMENTATION	0.003283039891237764	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.5717803984751063	WITHOUT_CLASSIFICATION	0.4282196015248938	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.999328784180795	IMPLEMENTATION	6.712158192049082E-4	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9570159294609947	IMPLEMENTATION	0.042984070539005395	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9954891192400119	IMPLEMENTATION	0.004510880759988056	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.5397256612759109	IMPLEMENTATION	0.46027433872408896	WITHOUT_CLASSIFICATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9773331864637487	IMPLEMENTATION	0.022666813536251336	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9951785112196491	WITHOUT_CLASSIFICATION	0.004821488780350959	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8662573242410702	IMPLEMENTATION	0.13374267575892992	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.991772930763951	IMPLEMENTATION	0.00822706923604897	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9960776288901557	WITHOUT_CLASSIFICATION	0.0039223711098443775	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.5252582514611946	IMPLEMENTATION	0.4747417485388054	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.8567407753310593	WITHOUT_CLASSIFICATION	0.1432592246689407	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.6157302062764177	IMPLEMENTATION	0.3842697937235822	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9762860696697139	IMPLEMENTATION	0.02371393033028619	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9762860696697139	IMPLEMENTATION	0.02371393033028619	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9289133842960009	WITHOUT_CLASSIFICATION	0.07108661570399914	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9991475020081115	WITHOUT_CLASSIFICATION	8.524979918884984E-4	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9881756135232693	WITHOUT_CLASSIFICATION	0.011824386476730666	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9736854296578568	IMPLEMENTATION	0.026314570342143188	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.8784151747767521	IMPLEMENTATION	0.12158482522324789	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.9523891141883338	WITHOUT_CLASSIFICATION	0.04761088581166629	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.7444216970224078	IMPLEMENTATION	0.25557830297759215	WITHOUT_CLASSIFICATION
todo : cache this sql...	IMPLEMENTATION	0.9998376702471498	WITHOUT_CLASSIFICATION	1.6232975285028391E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.9570277686785955	IMPLEMENTATION	0.04297223132140446	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9395630507550422	WITHOUT_CLASSIFICATION	0.06043694924495778	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9995564712227886	IMPLEMENTATION	4.4352877721144993E-4	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.6881647337163261	WITHOUT_CLASSIFICATION	0.3118352662836739	IMPLEMENTATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9842682490300458	IMPLEMENTATION	0.015731750969954134	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.884263083037158	IMPLEMENTATION	0.11573691696284204	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9973767607808893	IMPLEMENTATION	0.002623239219110659	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.884263083037158	IMPLEMENTATION	0.11573691696284204	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999724970888898	IMPLEMENTATION	2.750291111015453E-5	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.9642195357737742	IMPLEMENTATION	0.03578046422622581	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.884263083037158	IMPLEMENTATION	0.11573691696284204	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999971963747616	WITHOUT_CLASSIFICATION	2.803625238310833E-6	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999971963747616	WITHOUT_CLASSIFICATION	2.803625238310833E-6	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9997099862272943	IMPLEMENTATION	2.900137727055741E-4	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9994271166798486	WITHOUT_CLASSIFICATION	5.728833201514104E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999533911291598	WITHOUT_CLASSIFICATION	4.660887084013924E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999958951450082	WITHOUT_CLASSIFICATION	4.104854991882036E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999958951450082	WITHOUT_CLASSIFICATION	4.104854991882036E-6	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999936963347532	WITHOUT_CLASSIFICATION	6.303665246763307E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999412306246	WITHOUT_CLASSIFICATION	5.8769375253590116E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999985916234823	WITHOUT_CLASSIFICATION	1.4083765176907537E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998235463318	WITHOUT_CLASSIFICATION	1.7645366817193505E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998235463318	WITHOUT_CLASSIFICATION	1.7645366817193505E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999912737298	WITHOUT_CLASSIFICATION	8.726270189803771E-9	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999987003733709	WITHOUT_CLASSIFICATION	1.2996266291727424E-6	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999981440719496	WITHOUT_CLASSIFICATION	1.8559280503017258E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.999997404422717	WITHOUT_CLASSIFICATION	2.595577283056653E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999999385267884	WITHOUT_CLASSIFICATION	6.147321159262727E-7	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999999385267884	WITHOUT_CLASSIFICATION	6.147321159262727E-7	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999818810619618	WITHOUT_CLASSIFICATION	1.811893803811297E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9976653080358678	WITHOUT_CLASSIFICATION	0.002334691964132048	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999835843182724	WITHOUT_CLASSIFICATION	1.6415681727559656E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999973493122	WITHOUT_CLASSIFICATION	2.6506878092964072E-9	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999997512912	WITHOUT_CLASSIFICATION	2.487088080429207E-10	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999991161629147	WITHOUT_CLASSIFICATION	8.838370852162948E-7	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9999612330336962	WITHOUT_CLASSIFICATION	3.8766966303698585E-5	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999942323057442	WITHOUT_CLASSIFICATION	5.7676942557864005E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999726089455105	WITHOUT_CLASSIFICATION	2.7391054489370463E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999992499004798	WITHOUT_CLASSIFICATION	7.500995200679732E-7	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999933369240446	WITHOUT_CLASSIFICATION	6.663075955383227E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999908116086911	WITHOUT_CLASSIFICATION	9.188391308880648E-6	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999998135515	WITHOUT_CLASSIFICATION	1.8644860635519378E-10	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949921355421	WITHOUT_CLASSIFICATION	5.00786445789269E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949921355421	WITHOUT_CLASSIFICATION	5.00786445789269E-6	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999993388619217	WITHOUT_CLASSIFICATION	6.611380783512306E-7	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999926109815329	WITHOUT_CLASSIFICATION	7.389018467112854E-6	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999575618145	WITHOUT_CLASSIFICATION	4.2438185446904643E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999593371719554	WITHOUT_CLASSIFICATION	4.066282804454556E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9946524734815763	WITHOUT_CLASSIFICATION	0.0053475265184236955	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999982483844916	WITHOUT_CLASSIFICATION	1.7516155083640584E-6	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999994078609924	WITHOUT_CLASSIFICATION	5.921390076583784E-7	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999997888069768	WITHOUT_CLASSIFICATION	2.1119302310175273E-7	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999994979595	WITHOUT_CLASSIFICATION	5.020404666197254E-10	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999998037497795	WITHOUT_CLASSIFICATION	1.9625022047504803E-7	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999992953873241	WITHOUT_CLASSIFICATION	7.046126758925574E-7	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999953865836	WITHOUT_CLASSIFICATION	4.613416463905502E-9	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999994663008	WITHOUT_CLASSIFICATION	5.336993302384901E-10	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999892060259377	WITHOUT_CLASSIFICATION	1.079397406238023E-5	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999939885182327	WITHOUT_CLASSIFICATION	6.011481767222857E-6	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960387109268	WITHOUT_CLASSIFICATION	3.961289073179744E-6	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956804686104	WITHOUT_CLASSIFICATION	4.319531389538456E-6	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999997129713107	WITHOUT_CLASSIFICATION	2.870286891804134E-7	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999998496346513	WITHOUT_CLASSIFICATION	1.5036534869033824E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999892546328931	WITHOUT_CLASSIFICATION	1.0745367106907252E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999998705210463	WITHOUT_CLASSIFICATION	1.29478953739874E-7	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999979103720045	WITHOUT_CLASSIFICATION	2.0896279955247317E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999892546328931	WITHOUT_CLASSIFICATION	1.0745367106907252E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999979103720045	WITHOUT_CLASSIFICATION	2.0896279955247317E-6	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998820186976	WITHOUT_CLASSIFICATION	1.1798130244500052E-7	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999996292128198	WITHOUT_CLASSIFICATION	3.707871800884491E-7	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999955461454257	WITHOUT_CLASSIFICATION	4.453854574322978E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999858833456311	WITHOUT_CLASSIFICATION	1.4116654368895616E-4	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999655032742	WITHOUT_CLASSIFICATION	3.4496725765539295E-8	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999998010715558	WITHOUT_CLASSIFICATION	1.9892844417669718E-7	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997276551893254	WITHOUT_CLASSIFICATION	2.723448106746766E-4	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9817570684020545	WITHOUT_CLASSIFICATION	0.01824293159794558	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9997835519146799	WITHOUT_CLASSIFICATION	2.1644808532003188E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9999432231216877	WITHOUT_CLASSIFICATION	5.677687831228712E-5	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999815076369906	WITHOUT_CLASSIFICATION	1.8492363009337374E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999979103720045	WITHOUT_CLASSIFICATION	2.0896279955247317E-6	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999991319423	WITHOUT_CLASSIFICATION	8.680576962602544E-10	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999910948054437	WITHOUT_CLASSIFICATION	8.905194556341036E-6	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999956486986048	WITHOUT_CLASSIFICATION	4.351301395203344E-6	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999997452709	WITHOUT_CLASSIFICATION	2.5472907546010926E-10	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999478428071	WITHOUT_CLASSIFICATION	5.215719291333615E-8	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999626944341494	WITHOUT_CLASSIFICATION	3.730556585056206E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999997671554781	WITHOUT_CLASSIFICATION	2.328445219011652E-6	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999489625963	WITHOUT_CLASSIFICATION	5.103740380580031E-8	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999995093357488	WITHOUT_CLASSIFICATION	4.906642511933171E-7	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999558910673	WITHOUT_CLASSIFICATION	4.410893267207421E-8	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999986308809046	WITHOUT_CLASSIFICATION	1.36911909540219E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990341875653	WITHOUT_CLASSIFICATION	9.658124346816541E-7	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7706570900397991	WITHOUT_CLASSIFICATION	0.2293429099602009	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999999225142474	WITHOUT_CLASSIFICATION	7.748575258830214E-8	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999994936988938	WITHOUT_CLASSIFICATION	5.063011061371928E-7	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9498054582730029	WITHOUT_CLASSIFICATION	0.05019454172699712	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999806126519	WITHOUT_CLASSIFICATION	1.9387348083152942E-8	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999994885205256	WITHOUT_CLASSIFICATION	5.114794744530045E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999988591907019	WITHOUT_CLASSIFICATION	1.1408092980837898E-6	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999448740772	WITHOUT_CLASSIFICATION	5.512592280236314E-8	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999824938935	WITHOUT_CLASSIFICATION	1.7506106359755128E-8	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999803069763	WITHOUT_CLASSIFICATION	1.9693023705598046E-8	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999026164508	WITHOUT_CLASSIFICATION	9.738354917881703E-8	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999680484	WITHOUT_CLASSIFICATION	3.1951565348668295E-11	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999803069763	WITHOUT_CLASSIFICATION	1.9693023705598046E-8	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999468207109	WITHOUT_CLASSIFICATION	5.317928909615195E-8	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999991111382893	WITHOUT_CLASSIFICATION	8.888617106072454E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999892546328931	WITHOUT_CLASSIFICATION	1.0745367106907252E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999940128472106	WITHOUT_CLASSIFICATION	5.987152789499678E-6	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.999999756579572	WITHOUT_CLASSIFICATION	2.4342042812755375E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999684039022	WITHOUT_CLASSIFICATION	3.159609783232558E-8	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999684039022	WITHOUT_CLASSIFICATION	3.159609783232558E-8	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999961301961547	WITHOUT_CLASSIFICATION	3.869803845171041E-6	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999994536816	WITHOUT_CLASSIFICATION	5.463184000999773E-9	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999981167308	WITHOUT_CLASSIFICATION	1.883269244112548E-9	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999999893014	WITHOUT_CLASSIFICATION	1.0698473554309765E-11	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999998945866294	WITHOUT_CLASSIFICATION	1.054133705665355E-7	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999981949283152	WITHOUT_CLASSIFICATION	1.8050716848014154E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999974355341822	WITHOUT_CLASSIFICATION	2.5644658177523645E-6	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9999614664881581	WITHOUT_CLASSIFICATION	3.853351184193498E-5	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999989368901196	WITHOUT_CLASSIFICATION	1.063109880297991E-6	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999924355102	WITHOUT_CLASSIFICATION	7.56448986587854E-9	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997614326218	WITHOUT_CLASSIFICATION	2.3856737828055766E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997614326218	WITHOUT_CLASSIFICATION	2.3856737828055766E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999943430697188	WITHOUT_CLASSIFICATION	5.65693028122473E-6	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999966673623	WITHOUT_CLASSIFICATION	3.3326376938902555E-8	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999984140016808	WITHOUT_CLASSIFICATION	1.5859983193271481E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997614326218	WITHOUT_CLASSIFICATION	2.3856737828055766E-7	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999943430697188	WITHOUT_CLASSIFICATION	5.65693028122473E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999943430697188	WITHOUT_CLASSIFICATION	5.65693028122473E-6	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999510749569	WITHOUT_CLASSIFICATION	4.8925043041503814E-8	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998633226598987	WITHOUT_CLASSIFICATION	1.366773401012874E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999900635198	WITHOUT_CLASSIFICATION	9.936480119601932E-9	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999726486125	WITHOUT_CLASSIFICATION	2.7351387523170603E-8	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999843235847449	WITHOUT_CLASSIFICATION	1.567641525513865E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999843235847449	WITHOUT_CLASSIFICATION	1.567641525513865E-5	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999996883389846	WITHOUT_CLASSIFICATION	3.1166101545491424E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999982363449	WITHOUT_CLASSIFICATION	1.7636551580074508E-9	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.999999786042535	WITHOUT_CLASSIFICATION	2.1395746498262278E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999010918583	WITHOUT_CLASSIFICATION	9.890814166713458E-8	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999010918583	WITHOUT_CLASSIFICATION	9.890814166713458E-8	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999999237620346	WITHOUT_CLASSIFICATION	7.623796534298964E-8	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999953508586029	WITHOUT_CLASSIFICATION	4.649141397086784E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999498745364	WITHOUT_CLASSIFICATION	5.012546345219449E-8	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999781535343	WITHOUT_CLASSIFICATION	2.1846465745740296E-8	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999999160577	WITHOUT_CLASSIFICATION	8.394221978970976E-11	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999793766503	WITHOUT_CLASSIFICATION	2.0623349693611852E-8	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999997569817337	WITHOUT_CLASSIFICATION	2.430182662777327E-7	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999960837212873	WITHOUT_CLASSIFICATION	3.916278712681669E-6	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.999996741237569	WITHOUT_CLASSIFICATION	3.258762430963207E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999999498745364	WITHOUT_CLASSIFICATION	5.012546345219449E-8	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999964950054647	WITHOUT_CLASSIFICATION	3.504994535284128E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999336234113372	WITHOUT_CLASSIFICATION	6.637658866290374E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999336234113372	WITHOUT_CLASSIFICATION	6.637658866290374E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999999955409742	WITHOUT_CLASSIFICATION	4.459025880087662E-9	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998952490041056	WITHOUT_CLASSIFICATION	1.0475099589447286E-4	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999999219255	WITHOUT_CLASSIFICATION	7.807461792992219E-11	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9981795751000144	WITHOUT_CLASSIFICATION	0.001820424899985516	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999998046287957	WITHOUT_CLASSIFICATION	1.9537120439755468E-7	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999331998105732	WITHOUT_CLASSIFICATION	6.68001894268447E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999758453107602	WITHOUT_CLASSIFICATION	2.4154689239719236E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999962704967116	WITHOUT_CLASSIFICATION	3.7295032883219717E-6	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999995876178817	WITHOUT_CLASSIFICATION	4.1238211841906515E-7	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999934769089	WITHOUT_CLASSIFICATION	6.523091077438181E-9	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999934769089	WITHOUT_CLASSIFICATION	6.523091077438181E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997841993807	WITHOUT_CLASSIFICATION	2.1580061926175468E-7	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999533911291598	WITHOUT_CLASSIFICATION	4.660887084013924E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999613583807	WITHOUT_CLASSIFICATION	3.8641619461799256E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999997261584935	WITHOUT_CLASSIFICATION	2.738415065050247E-7	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999958951450082	WITHOUT_CLASSIFICATION	4.104854991882036E-6	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999982070460887	WITHOUT_CLASSIFICATION	1.7929539113395618E-6	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999998461349653	WITHOUT_CLASSIFICATION	1.5386503473267786E-7	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999998198127628	WITHOUT_CLASSIFICATION	1.8018723725654302E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999954289696993	WITHOUT_CLASSIFICATION	4.571030300711613E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999986207346403	WITHOUT_CLASSIFICATION	1.379265359690228E-6	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999889079970881	WITHOUT_CLASSIFICATION	1.1092002911940767E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999843026479098	WITHOUT_CLASSIFICATION	1.5697352090173866E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.999997427403725	WITHOUT_CLASSIFICATION	2.5725962749756993E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999412306246	WITHOUT_CLASSIFICATION	5.8769375253590116E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999995357234638	WITHOUT_CLASSIFICATION	4.6427653631271726E-7	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999995357234638	WITHOUT_CLASSIFICATION	4.6427653631271726E-7	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999997085391253	WITHOUT_CLASSIFICATION	2.91460874640669E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9998107842864526	WITHOUT_CLASSIFICATION	1.8921571354723845E-4	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999987073528359	WITHOUT_CLASSIFICATION	1.2926471640815944E-6	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999982441286829	WITHOUT_CLASSIFICATION	1.755871317095792E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999995062463128	WITHOUT_CLASSIFICATION	4.937536871995248E-6	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999981542809316	WITHOUT_CLASSIFICATION	1.8457190683698725E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999998235463318	WITHOUT_CLASSIFICATION	1.7645366817193505E-7	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999948899276552	WITHOUT_CLASSIFICATION	5.110072344787077E-6	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999988762431401	WITHOUT_CLASSIFICATION	1.1237568599338327E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999964891357835	WITHOUT_CLASSIFICATION	3.5108642165065815E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999986745306612	WITHOUT_CLASSIFICATION	1.32546933882407E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999837515914382	WITHOUT_CLASSIFICATION	1.6248408561842064E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999473569056091	WITHOUT_CLASSIFICATION	5.2643094390846245E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999989227779988	WITHOUT_CLASSIFICATION	1.0772220012617293E-6	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999837274668	WITHOUT_CLASSIFICATION	1.627253314227607E-8	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999979314832	WITHOUT_CLASSIFICATION	2.06851679992359E-6	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999998212544459	WITHOUT_CLASSIFICATION	1.787455540027599E-7	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999656175343148	WITHOUT_CLASSIFICATION	3.438246568515839E-5	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999973294554202	WITHOUT_CLASSIFICATION	2.6705445798139382E-6	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999860509130621	WITHOUT_CLASSIFICATION	1.3949086937894482E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999958951450082	WITHOUT_CLASSIFICATION	4.104854991882036E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999958951450082	WITHOUT_CLASSIFICATION	4.104854991882036E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999843026479098	WITHOUT_CLASSIFICATION	1.5697352090173866E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999995357234638	WITHOUT_CLASSIFICATION	4.6427653631271726E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999989227779988	WITHOUT_CLASSIFICATION	1.0772220012617293E-6	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999912737298	WITHOUT_CLASSIFICATION	8.726270189803771E-9	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999984299555589	WITHOUT_CLASSIFICATION	1.5700444411118521E-6	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999999333156809	WITHOUT_CLASSIFICATION	6.668431909761612E-7	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997780920427565	WITHOUT_CLASSIFICATION	2.2190795724355303E-4	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999842281642299	WITHOUT_CLASSIFICATION	1.577183577008191E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999529705156	WITHOUT_CLASSIFICATION	4.7029484481762555E-8	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999961272588944	WITHOUT_CLASSIFICATION	3.87274110565358E-6	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999948503276549	WITHOUT_CLASSIFICATION	5.149672345047418E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999769869928637	WITHOUT_CLASSIFICATION	2.3013007136205704E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999990099283985	WITHOUT_CLASSIFICATION	9.900716015102097E-7	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999906017380024	WITHOUT_CLASSIFICATION	9.39826199764621E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999906017380024	WITHOUT_CLASSIFICATION	9.39826199764621E-6	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999866257689	WITHOUT_CLASSIFICATION	1.3374231158251867E-8	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999938167467569	WITHOUT_CLASSIFICATION	6.183253243090282E-6	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999845215187018	WITHOUT_CLASSIFICATION	1.5478481298273907E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998511577567449	WITHOUT_CLASSIFICATION	1.4884224325497193E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999780371684	WITHOUT_CLASSIFICATION	2.1962831508326642E-8	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999966509657058	WITHOUT_CLASSIFICATION	3.349034294147755E-6	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999990024291265	WITHOUT_CLASSIFICATION	9.975708733629893E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999987003733709	WITHOUT_CLASSIFICATION	1.2996266291727424E-6	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999848078510136	WITHOUT_CLASSIFICATION	1.5192148986411857E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999997159374554	WITHOUT_CLASSIFICATION	2.8406254462649456E-7	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999997159374554	WITHOUT_CLASSIFICATION	2.8406254462649456E-7	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.999999701915781	WITHOUT_CLASSIFICATION	2.980842188958113E-7	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999967846833341	WITHOUT_CLASSIFICATION	3.2153166657997466E-6	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999958275619457	WITHOUT_CLASSIFICATION	4.17243805427792E-6	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999998597917783	WITHOUT_CLASSIFICATION	1.4020822177656853E-7	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999951267885324	WITHOUT_CLASSIFICATION	4.873211467526502E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999958951450082	WITHOUT_CLASSIFICATION	4.104854991882036E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999843026479098	WITHOUT_CLASSIFICATION	1.5697352090173866E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999412306246	WITHOUT_CLASSIFICATION	5.8769375253590116E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999989227779988	WITHOUT_CLASSIFICATION	1.0772220012617293E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999989227779988	WITHOUT_CLASSIFICATION	1.0772220012617293E-6	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992146966593	WITHOUT_CLASSIFICATION	7.853033408394278E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992146966593	WITHOUT_CLASSIFICATION	7.853033408394278E-7	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999998346030799	WITHOUT_CLASSIFICATION	1.6539692011575523E-6	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.999974599746656	WITHOUT_CLASSIFICATION	2.5400253344042546E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.999974599746656	WITHOUT_CLASSIFICATION	2.5400253344042546E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999917569049237	WITHOUT_CLASSIFICATION	8.243095076322843E-6	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999991218264614	WITHOUT_CLASSIFICATION	8.78173538567861E-7	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999995497710392	WITHOUT_CLASSIFICATION	4.5022896070604E-7	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999948328085632	WITHOUT_CLASSIFICATION	5.167191436854342E-6	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999999067524985	WITHOUT_CLASSIFICATION	9.324750145682218E-8	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.999997404422717	WITHOUT_CLASSIFICATION	2.595577283056653E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.999997404422717	WITHOUT_CLASSIFICATION	2.595577283056653E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9984702425906633	WITHOUT_CLASSIFICATION	0.001529757409336632	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999951557628833	WITHOUT_CLASSIFICATION	4.844237116639575E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999992707185988	WITHOUT_CLASSIFICATION	7.292814012917651E-7	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.999962904693554	WITHOUT_CLASSIFICATION	3.709530644606441E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999997082630492	WITHOUT_CLASSIFICATION	2.917369508125648E-7	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999855450336766	WITHOUT_CLASSIFICATION	1.4454966323412431E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999999385267884	WITHOUT_CLASSIFICATION	6.147321159262727E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999967985490772	WITHOUT_CLASSIFICATION	3.2014509229011755E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999967985490772	WITHOUT_CLASSIFICATION	3.2014509229011755E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999818810619618	WITHOUT_CLASSIFICATION	1.811893803811297E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999818810619618	WITHOUT_CLASSIFICATION	1.811893803811297E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999775307108969	WITHOUT_CLASSIFICATION	2.2469289103109746E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999775307108969	WITHOUT_CLASSIFICATION	2.2469289103109746E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999924082359	WITHOUT_CLASSIFICATION	7.591764125780578E-9	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999924082359	WITHOUT_CLASSIFICATION	7.591764125780578E-9	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.999997404422717	WITHOUT_CLASSIFICATION	2.595577283056653E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999999385267884	WITHOUT_CLASSIFICATION	6.147321159262727E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999967985490772	WITHOUT_CLASSIFICATION	3.2014509229011755E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999967985490772	WITHOUT_CLASSIFICATION	3.2014509229011755E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999818810619618	WITHOUT_CLASSIFICATION	1.811893803811297E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999775307108969	WITHOUT_CLASSIFICATION	2.2469289103109746E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999775307108969	WITHOUT_CLASSIFICATION	2.2469289103109746E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999924082359	WITHOUT_CLASSIFICATION	7.591764125780578E-9	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999826659008209	WITHOUT_CLASSIFICATION	1.733409917919531E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999999884211657	WITHOUT_CLASSIFICATION	1.1578834300718166E-8	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999893711969269	WITHOUT_CLASSIFICATION	1.062880307316132E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998684808840091	WITHOUT_CLASSIFICATION	1.3151911599084602E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999963486991922	WITHOUT_CLASSIFICATION	3.651300807784269E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999641016883042	WITHOUT_CLASSIFICATION	3.589831169581984E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999999869890204	WITHOUT_CLASSIFICATION	1.3010979638689418E-8	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999998465575457	WITHOUT_CLASSIFICATION	1.5344245433392697E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999997678963248	WITHOUT_CLASSIFICATION	2.321036752238063E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999792426479	WITHOUT_CLASSIFICATION	2.075735209090641E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999998857513204	WITHOUT_CLASSIFICATION	1.1424867959339046E-6	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999716595415	WITHOUT_CLASSIFICATION	2.8340458598521314E-8	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999961301961547	WITHOUT_CLASSIFICATION	3.869803845171041E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999641016883042	WITHOUT_CLASSIFICATION	3.589831169581984E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999641016883042	WITHOUT_CLASSIFICATION	3.589831169581984E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999641016883042	WITHOUT_CLASSIFICATION	3.589831169581984E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999926930568	WITHOUT_CLASSIFICATION	7.306943206727669E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999580238729	WITHOUT_CLASSIFICATION	4.1976127139892893E-8	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999580238729	WITHOUT_CLASSIFICATION	4.1976127139892893E-8	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999971395421	WITHOUT_CLASSIFICATION	2.860457985560845E-9	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999996117194	WITHOUT_CLASSIFICATION	3.88280596191674E-10	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999883500641	WITHOUT_CLASSIFICATION	1.1649935825152304E-8	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999905417367604	WITHOUT_CLASSIFICATION	9.4582632396439E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999905417367604	WITHOUT_CLASSIFICATION	9.4582632396439E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999997512912	WITHOUT_CLASSIFICATION	2.487088080429207E-10	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999986990565362	WITHOUT_CLASSIFICATION	1.300943463867904E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999986990565362	WITHOUT_CLASSIFICATION	1.300943463867904E-6	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999902526263	WITHOUT_CLASSIFICATION	9.747373693439391E-8	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999893771804	WITHOUT_CLASSIFICATION	1.062281969468099E-8	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999987933936	WITHOUT_CLASSIFICATION	1.2066062997347603E-9	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999948389807966	WITHOUT_CLASSIFICATION	5.161019203477348E-6	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.999994983115178	WITHOUT_CLASSIFICATION	5.0168848220157374E-6	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999947862029461	WITHOUT_CLASSIFICATION	5.213797053861785E-6	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999991161629147	WITHOUT_CLASSIFICATION	8.838370852162948E-7	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999964703892879	WITHOUT_CLASSIFICATION	3.5296107121640003E-6	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9785014147153785	WITHOUT_CLASSIFICATION	0.021498585284621383	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9998999461313839	WITHOUT_CLASSIFICATION	1.0005386861610762E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999993556089288	WITHOUT_CLASSIFICATION	6.443910711895907E-7	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999726089455105	WITHOUT_CLASSIFICATION	2.7391054489370463E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999942004524	WITHOUT_CLASSIFICATION	5.799547608210118E-8	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999997665292748	WITHOUT_CLASSIFICATION	2.3347072528156426E-7	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999281454716	WITHOUT_CLASSIFICATION	7.185452833666403E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999726089455105	WITHOUT_CLASSIFICATION	2.7391054489370463E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999997379184247	WITHOUT_CLASSIFICATION	2.620815753235221E-7	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999934512097545	WITHOUT_CLASSIFICATION	6.548790245535847E-6	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999922693140113	WITHOUT_CLASSIFICATION	7.730685988634224E-6	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999902031426084	WITHOUT_CLASSIFICATION	9.79685739166003E-6	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999984754448575	WITHOUT_CLASSIFICATION	1.5245551424504427E-6	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999992150650425	WITHOUT_CLASSIFICATION	7.849349575093773E-7	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999991091837711	WITHOUT_CLASSIFICATION	8.908162288790419E-7	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999908116086911	WITHOUT_CLASSIFICATION	9.188391308880648E-6	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992398774437	WITHOUT_CLASSIFICATION	7.601225563010769E-7	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999998135515	WITHOUT_CLASSIFICATION	1.8644860635519378E-10	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999910975135843	WITHOUT_CLASSIFICATION	8.902486415833243E-6	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999999925259867	WITHOUT_CLASSIFICATION	7.474013203373862E-9	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999887876448484	WITHOUT_CLASSIFICATION	1.1212355151643392E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999991161629147	WITHOUT_CLASSIFICATION	8.838370852162948E-7	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992398774437	WITHOUT_CLASSIFICATION	7.601225563010769E-7	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999910975135843	WITHOUT_CLASSIFICATION	8.902486415833243E-6	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999887876448484	WITHOUT_CLASSIFICATION	1.1212355151643392E-5	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999960496812004	WITHOUT_CLASSIFICATION	3.9503187997279446E-6	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999950881220927	WITHOUT_CLASSIFICATION	4.911877907240507E-6	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999997946834806	WITHOUT_CLASSIFICATION	2.0531651939017842E-6	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949921355421	WITHOUT_CLASSIFICATION	5.00786445789269E-6	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999976608455625	WITHOUT_CLASSIFICATION	2.3391544376113115E-6	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999879536386892	WITHOUT_CLASSIFICATION	1.2046361310781191E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999995777137842	WITHOUT_CLASSIFICATION	4.222862157661322E-7	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999959492810139	WITHOUT_CLASSIFICATION	4.0507189860741044E-6	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999997525663012	WITHOUT_CLASSIFICATION	2.474336986767442E-7	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999795477675	WITHOUT_CLASSIFICATION	2.045223250997286E-8	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999733733486	WITHOUT_CLASSIFICATION	2.662665139328651E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999920255860435	WITHOUT_CLASSIFICATION	7.974413956424603E-6	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999998678657693	WITHOUT_CLASSIFICATION	1.3213423063836588E-7	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999950164899436	WITHOUT_CLASSIFICATION	4.983510056402967E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999967342542867	WITHOUT_CLASSIFICATION	3.2657457133208777E-6	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999987112911053	WITHOUT_CLASSIFICATION	1.288708894692593E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999926109815329	WITHOUT_CLASSIFICATION	7.389018467112854E-6	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999949025458	WITHOUT_CLASSIFICATION	5.09745421554648E-8	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999935906239976	WITHOUT_CLASSIFICATION	6.409376002440478E-6	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992398774437	WITHOUT_CLASSIFICATION	7.601225563010769E-7	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999994731742013	WITHOUT_CLASSIFICATION	5.268257986754875E-7	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999992495248132	WITHOUT_CLASSIFICATION	7.504751868066673E-7	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999986740313339	WITHOUT_CLASSIFICATION	1.3259686660294244E-6	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999987917017172	WITHOUT_CLASSIFICATION	1.2082982828028456E-6	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999992596970768	WITHOUT_CLASSIFICATION	7.403029232667036E-7	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999992318897323	WITHOUT_CLASSIFICATION	7.681102676777415E-7	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999950184497	WITHOUT_CLASSIFICATION	4.981550252306647E-9	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999997122610722	WITHOUT_CLASSIFICATION	2.8773892785926504E-7	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999965348478798	WITHOUT_CLASSIFICATION	3.4651521201017196E-6	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999915876088068	WITHOUT_CLASSIFICATION	8.412391193184711E-6	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999888105808413	WITHOUT_CLASSIFICATION	1.1189419158685028E-5	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999952286756424	WITHOUT_CLASSIFICATION	4.771324357565611E-6	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9867383925989048	WITHOUT_CLASSIFICATION	0.013261607401095117	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999593371719554	WITHOUT_CLASSIFICATION	4.066282804454556E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999998250036463	WITHOUT_CLASSIFICATION	1.7499635376934615E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999937147993859	WITHOUT_CLASSIFICATION	6.285200614037296E-6	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.999991796311816	WITHOUT_CLASSIFICATION	8.203688184001E-6	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999896584820527	WITHOUT_CLASSIFICATION	1.034151794738768E-5	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999950856472497	WITHOUT_CLASSIFICATION	4.914352750315152E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999770063174759	WITHOUT_CLASSIFICATION	2.2993682524110998E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998936760827	WITHOUT_CLASSIFICATION	1.0632391726649079E-7	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999974263466846	WITHOUT_CLASSIFICATION	2.573653315394801E-5	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999993237314175	WITHOUT_CLASSIFICATION	6.762685825590335E-7	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999999231124078	WITHOUT_CLASSIFICATION	7.688759212835337E-8	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999776916438665	WITHOUT_CLASSIFICATION	2.2308356133561488E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999776916438665	WITHOUT_CLASSIFICATION	2.2308356133561488E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999392391508727	WITHOUT_CLASSIFICATION	6.076084912735804E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998106615039047	WITHOUT_CLASSIFICATION	1.8933849609532034E-4	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999977654300252	WITHOUT_CLASSIFICATION	2.2345699749350235E-6	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999993492751365	WITHOUT_CLASSIFICATION	6.507248635511639E-7	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999349224171	WITHOUT_CLASSIFICATION	6.507758289692341E-8	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999831264867	WITHOUT_CLASSIFICATION	1.6873513269798122E-8	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999992739802216	WITHOUT_CLASSIFICATION	7.260197782660989E-7	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999995138083419	WITHOUT_CLASSIFICATION	4.8619165810583105E-6	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999964632502787	WITHOUT_CLASSIFICATION	3.5367497213528233E-6	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999987762383091	WITHOUT_CLASSIFICATION	1.2237616908445878E-6	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999959783335337	WITHOUT_CLASSIFICATION	4.02166646625811E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999993549076879	WITHOUT_CLASSIFICATION	6.450923122046561E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999992631181086	WITHOUT_CLASSIFICATION	7.368818912749046E-7	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999990873192175	WITHOUT_CLASSIFICATION	9.126807823872883E-7	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999728918350682	WITHOUT_CLASSIFICATION	2.7108164931778225E-5	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999998109437394	WITHOUT_CLASSIFICATION	1.8905626058492264E-7	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999998173748775	WITHOUT_CLASSIFICATION	1.8262512249724852E-6	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999999152216379	WITHOUT_CLASSIFICATION	8.477836221571856E-8	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999045814045	WITHOUT_CLASSIFICATION	9.541859547579183E-8	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999739348502	WITHOUT_CLASSIFICATION	2.606514975002E-8	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990363064015	WITHOUT_CLASSIFICATION	9.636935984952171E-6	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999812956614	WITHOUT_CLASSIFICATION	1.8704338733809866E-8	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999991533936421	WITHOUT_CLASSIFICATION	8.466063577699342E-7	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999999017433776	WITHOUT_CLASSIFICATION	9.825662240469549E-7	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999999665004894	WITHOUT_CLASSIFICATION	3.349951057602713E-8	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999995117388816	WITHOUT_CLASSIFICATION	4.882611185034465E-7	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999918778601218	WITHOUT_CLASSIFICATION	8.122139878180915E-6	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999998520499549	WITHOUT_CLASSIFICATION	1.4795004514312147E-7	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999994964442	WITHOUT_CLASSIFICATION	5.035557126408553E-10	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999990647449326	WITHOUT_CLASSIFICATION	9.352550674550141E-7	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999739348502	WITHOUT_CLASSIFICATION	2.606514975002E-8	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998709112748864	WITHOUT_CLASSIFICATION	1.2908872511367534E-4	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999602451308692	WITHOUT_CLASSIFICATION	3.975486913077474E-5	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999587396739898	WITHOUT_CLASSIFICATION	4.126032601024043E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.999983548558239	WITHOUT_CLASSIFICATION	1.645144176089934E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.999983548558239	WITHOUT_CLASSIFICATION	1.645144176089934E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999922781633	WITHOUT_CLASSIFICATION	7.721836800668574E-9	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999999769704149	WITHOUT_CLASSIFICATION	2.302958522087922E-8	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999994624829895	WITHOUT_CLASSIFICATION	5.375170104952645E-7	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999994624829895	WITHOUT_CLASSIFICATION	5.375170104952645E-7	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999993237314175	WITHOUT_CLASSIFICATION	6.762685825590335E-7	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999349821573	WITHOUT_CLASSIFICATION	6.501784271994746E-8	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999881593973167	WITHOUT_CLASSIFICATION	1.1840602683318796E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998699663201	WITHOUT_CLASSIFICATION	1.30033679971511E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997841993807	WITHOUT_CLASSIFICATION	2.1580061926175468E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999881593973167	WITHOUT_CLASSIFICATION	1.1840602683318796E-5	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998699663201	WITHOUT_CLASSIFICATION	1.30033679971511E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999853660241413	WITHOUT_CLASSIFICATION	1.4633975858798739E-5	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999994987167	WITHOUT_CLASSIFICATION	5.012833988065106E-10	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999494668984	WITHOUT_CLASSIFICATION	5.053310156191538E-8	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999986578614541	WITHOUT_CLASSIFICATION	1.342138545813582E-6	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999947264414568	WITHOUT_CLASSIFICATION	5.273558543255903E-6	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9984126607341453	WITHOUT_CLASSIFICATION	0.0015873392658547279	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999989283307944	WITHOUT_CLASSIFICATION	1.0716692055882549E-6	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999989283307944	WITHOUT_CLASSIFICATION	1.0716692055882549E-6	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999999949545759	WITHOUT_CLASSIFICATION	5.0454240926675425E-8	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999998164198	WITHOUT_CLASSIFICATION	1.835801718429778E-10	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999962543937965	WITHOUT_CLASSIFICATION	3.745606203446739E-6	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999975873047	WITHOUT_CLASSIFICATION	2.412695329645855E-9	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999975582181169	WITHOUT_CLASSIFICATION	2.441781883148042E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999996460078049	WITHOUT_CLASSIFICATION	3.539921950164109E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997841993807	WITHOUT_CLASSIFICATION	2.1580061926175468E-7	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999997802031884	WITHOUT_CLASSIFICATION	2.19796811627979E-7	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999952681715	WITHOUT_CLASSIFICATION	4.731828485483974E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999952681715	WITHOUT_CLASSIFICATION	4.731828485483974E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999989329929185	WITHOUT_CLASSIFICATION	1.067007081457843E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999853660241413	WITHOUT_CLASSIFICATION	1.4633975858798739E-5	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999749963627536	WITHOUT_CLASSIFICATION	2.5003637246463674E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999735146742008	WITHOUT_CLASSIFICATION	2.6485325799106187E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9982777663085478	WITHOUT_CLASSIFICATION	0.0017222336914520864	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999318209198	WITHOUT_CLASSIFICATION	6.817908016454989E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998303249675828	WITHOUT_CLASSIFICATION	1.6967503241707382E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999853660241413	WITHOUT_CLASSIFICATION	1.4633975858798739E-5	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999318209198	WITHOUT_CLASSIFICATION	6.817908016454989E-8	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998303249675828	WITHOUT_CLASSIFICATION	1.6967503241707382E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999999418198332	WITHOUT_CLASSIFICATION	5.8180166853594775E-8	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999989973554918	WITHOUT_CLASSIFICATION	1.0026445081913156E-6	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998538874356	WITHOUT_CLASSIFICATION	1.4611256434701877E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999853660241413	WITHOUT_CLASSIFICATION	1.4633975858798739E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999853660241413	WITHOUT_CLASSIFICATION	1.4633975858798739E-5	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999995922544526	WITHOUT_CLASSIFICATION	4.0774554754578285E-7	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.999999002077525	WITHOUT_CLASSIFICATION	9.979224749345264E-7	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999997848566167	WITHOUT_CLASSIFICATION	2.1514338332436883E-7	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999892060259377	WITHOUT_CLASSIFICATION	1.079397406238023E-5	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999997584035953	WITHOUT_CLASSIFICATION	2.4159640462348377E-7	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999949839552	WITHOUT_CLASSIFICATION	5.016044861240576E-9	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999954116006259	WITHOUT_CLASSIFICATION	4.5883993741642994E-6	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997751743329	WITHOUT_CLASSIFICATION	2.248256669809045E-7	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999977078536049	WITHOUT_CLASSIFICATION	2.2921463950723623E-6	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.999999025369824	WITHOUT_CLASSIFICATION	9.746301759185412E-7	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999935786062792	WITHOUT_CLASSIFICATION	6.421393720790516E-6	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999514718344849	WITHOUT_CLASSIFICATION	4.852816551521457E-5	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999977382927	WITHOUT_CLASSIFICATION	2.2617072230774168E-9	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999985647397065	WITHOUT_CLASSIFICATION	1.4352602934673175E-6	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998663729381	WITHOUT_CLASSIFICATION	1.3362706190271396E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999905353854	WITHOUT_CLASSIFICATION	9.464614692847983E-9	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999892060259377	WITHOUT_CLASSIFICATION	1.079397406238023E-5	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999976844400449	WITHOUT_CLASSIFICATION	2.3155599550834323E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999991886078434	WITHOUT_CLASSIFICATION	8.113921566345619E-7	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999953050355	WITHOUT_CLASSIFICATION	4.694964522677332E-9	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999915442394463	WITHOUT_CLASSIFICATION	8.455760553713315E-6	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998499455986853	WITHOUT_CLASSIFICATION	1.5005440131452805E-4	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9998499455986853	WITHOUT_CLASSIFICATION	1.5005440131452805E-4	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999892060259377	WITHOUT_CLASSIFICATION	1.079397406238023E-5	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999996137815058	WITHOUT_CLASSIFICATION	3.8621849417240023E-7	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999874229848	WITHOUT_CLASSIFICATION	1.2577015326386086E-8	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9994357621879968	WITHOUT_CLASSIFICATION	5.642378120032633E-4	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999556265013	WITHOUT_CLASSIFICATION	4.437349860842701E-8	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999990305401105	WITHOUT_CLASSIFICATION	9.694598894945214E-7	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999986540571146	WITHOUT_CLASSIFICATION	1.3459428853979297E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999977573486398	WITHOUT_CLASSIFICATION	2.2426513602043767E-6	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999998012330272	WITHOUT_CLASSIFICATION	1.9876697270495498E-7	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994410001429	WITHOUT_CLASSIFICATION	5.589998570862287E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999995127127885	WITHOUT_CLASSIFICATION	4.872872114694335E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999993470004913	WITHOUT_CLASSIFICATION	6.529995086464447E-7	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999998262442923	WITHOUT_CLASSIFICATION	1.737557076999945E-6	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9995025811454318	WITHOUT_CLASSIFICATION	4.974188545681823E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999970214282414	WITHOUT_CLASSIFICATION	2.9785717584289167E-6	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995742644477	WITHOUT_CLASSIFICATION	4.2573555227532934E-7	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999953154401	WITHOUT_CLASSIFICATION	4.684559950309164E-9	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999757436716	WITHOUT_CLASSIFICATION	2.4256328479675096E-8	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999984809829913	WITHOUT_CLASSIFICATION	1.519017008805685E-6	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999770107401	WITHOUT_CLASSIFICATION	2.2989259980073512E-8	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999999898190833	WITHOUT_CLASSIFICATION	1.0180916705010763E-7	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999955122072075	WITHOUT_CLASSIFICATION	4.487792792581105E-6	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999917070623736	WITHOUT_CLASSIFICATION	8.292937626384122E-6	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995700347220972	WITHOUT_CLASSIFICATION	4.299652779028341E-4	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990424505626543	WITHOUT_CLASSIFICATION	9.575494373456507E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999360395855996	WITHOUT_CLASSIFICATION	6.396041440037639E-5	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999198115852805	WITHOUT_CLASSIFICATION	8.018841471951138E-5	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991550199916335	WITHOUT_CLASSIFICATION	8.449800083665269E-4	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998995197031939	WITHOUT_CLASSIFICATION	1.0048029680603652E-4	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9954614664812255	WITHOUT_CLASSIFICATION	0.004538533518774566	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903076129154	WITHOUT_CLASSIFICATION	9.692387084639722E-6	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999452082279249	WITHOUT_CLASSIFICATION	5.47917720751655E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999984374502354	WITHOUT_CLASSIFICATION	1.562549764596345E-5	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687562288121	WITHOUT_CLASSIFICATION	3.124377118788528E-5	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957425917245	WITHOUT_CLASSIFICATION	4.257408275536725E-6	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999257266722762	WITHOUT_CLASSIFICATION	7.427332772374171E-5	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997687645040564	WITHOUT_CLASSIFICATION	2.3123549594354452E-4	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999038421419425	WITHOUT_CLASSIFICATION	9.615785805756933E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901647751644	WITHOUT_CLASSIFICATION	9.835224835674733E-6	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992954145724379	WITHOUT_CLASSIFICATION	7.045854275620485E-4	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999422772134698	WITHOUT_CLASSIFICATION	5.772278653021006E-4	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999995682681417	WITHOUT_CLASSIFICATION	4.317318582205979E-7	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605406639088	WITHOUT_CLASSIFICATION	3.945933609121231E-5	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9762278783197655	WITHOUT_CLASSIFICATION	0.023772121680234473	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999345917513	WITHOUT_CLASSIFICATION	6.540824871837768E-8	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999850429505	WITHOUT_CLASSIFICATION	1.4957049524537797E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999527201868	WITHOUT_CLASSIFICATION	4.7279813050772055E-8	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999965398635987	WITHOUT_CLASSIFICATION	3.4601364013189807E-6	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999993145198557	WITHOUT_CLASSIFICATION	6.854801443713936E-7	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999999999894781	WITHOUT_CLASSIFICATION	1.052188436587614E-10	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999602272672	WITHOUT_CLASSIFICATION	3.9772732825421254E-8	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999986944534524	WITHOUT_CLASSIFICATION	1.3055465476919035E-6	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.99999670161954	WITHOUT_CLASSIFICATION	3.298380460070627E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999972407276306	WITHOUT_CLASSIFICATION	2.7592723693614184E-6	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999996702179647	WITHOUT_CLASSIFICATION	3.2978203534294014E-7	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999893610384	WITHOUT_CLASSIFICATION	1.0638961500474593E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999980652828	WITHOUT_CLASSIFICATION	1.934717134315259E-9	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999853451547592	WITHOUT_CLASSIFICATION	1.4654845240720105E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999986372236369	WITHOUT_CLASSIFICATION	1.3627763631187286E-6	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999996834965716	WITHOUT_CLASSIFICATION	3.165034283557255E-7	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999416922408598	WITHOUT_CLASSIFICATION	5.830775914013876E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860207016534	WITHOUT_CLASSIFICATION	1.397929834660218E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898273285558	WITHOUT_CLASSIFICATION	1.017267144427374E-5	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988756934201	WITHOUT_CLASSIFICATION	1.1243065799071238E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.99923875884444	WITHOUT_CLASSIFICATION	7.61241155559919E-4	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999121918874	WITHOUT_CLASSIFICATION	8.780811256988525E-8	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9998980819294878	WITHOUT_CLASSIFICATION	1.0191807051218322E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999882264664213	WITHOUT_CLASSIFICATION	1.1773533578652054E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999789655657222	WITHOUT_CLASSIFICATION	2.103443427779816E-5	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999952798914	WITHOUT_CLASSIFICATION	4.720108603327566E-8	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999928651463	WITHOUT_CLASSIFICATION	7.13485369190938E-9	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999464034157	WITHOUT_CLASSIFICATION	5.359658421371189E-8	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999997080593	WITHOUT_CLASSIFICATION	2.919406836178761E-10	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999976148320014	WITHOUT_CLASSIFICATION	2.3851679985954784E-5	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999872560963833	WITHOUT_CLASSIFICATION	1.2743903616602211E-5	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999982405692	WITHOUT_CLASSIFICATION	1.759430791404746E-9	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999974807130488	WITHOUT_CLASSIFICATION	2.5192869510701614E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999527201868	WITHOUT_CLASSIFICATION	4.7279813050772055E-8	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999999328494857	WITHOUT_CLASSIFICATION	6.715051430614611E-7	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999986208334418	WITHOUT_CLASSIFICATION	1.3791665580967552E-6	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999922914407537	WITHOUT_CLASSIFICATION	7.708559246134073E-6	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999997349442667	WITHOUT_CLASSIFICATION	2.6505573320881125E-7	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999994442650627	WITHOUT_CLASSIFICATION	5.557349371850583E-7	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.999999747509775	WITHOUT_CLASSIFICATION	2.5249022494723506E-7	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.99923875884444	WITHOUT_CLASSIFICATION	7.61241155559919E-4	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999999818585317	WITHOUT_CLASSIFICATION	1.8141468297583188E-7	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999972429040292	WITHOUT_CLASSIFICATION	2.757095970765092E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995453130376	WITHOUT_CLASSIFICATION	4.546869623254939E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999924911285992	WITHOUT_CLASSIFICATION	7.508871400844127E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999997897879545	WITHOUT_CLASSIFICATION	2.102120454264637E-7	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998984692313	WITHOUT_CLASSIFICATION	1.0153076857782894E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998177780476902	WITHOUT_CLASSIFICATION	1.8222195230978899E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999302608594	WITHOUT_CLASSIFICATION	6.973914058301894E-8	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999997163444284	WITHOUT_CLASSIFICATION	2.8365557158681253E-7	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999997982801091	WITHOUT_CLASSIFICATION	2.0171989078670306E-7	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999999851871109	WITHOUT_CLASSIFICATION	1.4812889289887407E-8	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998425308582	WITHOUT_CLASSIFICATION	1.5746914179360505E-7	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999979527430527	WITHOUT_CLASSIFICATION	2.0472569473000573E-6	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999661836352749	WITHOUT_CLASSIFICATION	3.381636472517832E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999999489763735	WITHOUT_CLASSIFICATION	5.102362660306354E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999831868082	WITHOUT_CLASSIFICATION	1.6813191839059807E-8	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999802422078434	WITHOUT_CLASSIFICATION	1.9757792156627475E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999986502647	WITHOUT_CLASSIFICATION	1.3497353048498876E-9	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999998308761351	WITHOUT_CLASSIFICATION	1.6912386485465106E-7	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999899905072195	WITHOUT_CLASSIFICATION	1.0009492780488082E-5	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998559438161706	WITHOUT_CLASSIFICATION	1.4405618382939638E-4	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999996676645919	WITHOUT_CLASSIFICATION	3.323354080974761E-7	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999997632567857	WITHOUT_CLASSIFICATION	2.367432141267338E-7	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9994841268895357	WITHOUT_CLASSIFICATION	5.158731104644273E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999999535019473	WITHOUT_CLASSIFICATION	4.6498052702360965E-7	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999997128038544	WITHOUT_CLASSIFICATION	2.871961455758597E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999913649567	WITHOUT_CLASSIFICATION	8.635043409773425E-9	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999527201868	WITHOUT_CLASSIFICATION	4.7279813050772055E-8	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999999947403767	WITHOUT_CLASSIFICATION	5.259623325524123E-9	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999944628701	WITHOUT_CLASSIFICATION	5.537129847108411E-9	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999976198207503	WITHOUT_CLASSIFICATION	2.380179249712543E-6	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999681826685	WITHOUT_CLASSIFICATION	3.1817331606976924E-8	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999998801188599	WITHOUT_CLASSIFICATION	1.198811400236607E-7	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999998986856571	WITHOUT_CLASSIFICATION	1.0131434288182878E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999527201868	WITHOUT_CLASSIFICATION	4.7279813050772055E-8	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999997176918928	WITHOUT_CLASSIFICATION	2.8230810714686107E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999802422078434	WITHOUT_CLASSIFICATION	1.9757792156627475E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999967617980039	WITHOUT_CLASSIFICATION	3.2382019960413617E-6	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999831868082	WITHOUT_CLASSIFICATION	1.6813191839059807E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999997465828	WITHOUT_CLASSIFICATION	2.534170940231264E-10	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9996786519875022	WITHOUT_CLASSIFICATION	3.213480124978613E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998387345647	WITHOUT_CLASSIFICATION	1.612654354148291E-7	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995453130376	WITHOUT_CLASSIFICATION	4.546869623254939E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999924911285992	WITHOUT_CLASSIFICATION	7.508871400844127E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999997897879545	WITHOUT_CLASSIFICATION	2.102120454264637E-7	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999227262153	WITHOUT_CLASSIFICATION	7.727378471115133E-8	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999996987381585	WITHOUT_CLASSIFICATION	3.012618415014191E-7	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999991863761651	WITHOUT_CLASSIFICATION	8.136238349014924E-7	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999831868082	WITHOUT_CLASSIFICATION	1.6813191839059807E-8	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999997465828	WITHOUT_CLASSIFICATION	2.534170940231264E-10	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999999527201868	WITHOUT_CLASSIFICATION	4.7279813050772055E-8	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999998984692313	WITHOUT_CLASSIFICATION	1.0153076857782894E-7	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998177780476902	WITHOUT_CLASSIFICATION	1.8222195230978899E-4	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999302608594	WITHOUT_CLASSIFICATION	6.973914058301894E-8	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999779835815	WITHOUT_CLASSIFICATION	2.201641845513562E-8	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999866015795	WITHOUT_CLASSIFICATION	1.339842053867934E-8	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999999792240166	WITHOUT_CLASSIFICATION	2.0775983385776538E-8	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999996171547	WITHOUT_CLASSIFICATION	3.828453892409977E-10	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999941063775	WITHOUT_CLASSIFICATION	5.893622553470353E-9	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999419397663	WITHOUT_CLASSIFICATION	5.8060233653551594E-8	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999422772134698	WITHOUT_CLASSIFICATION	5.772278653021006E-4	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999958324391	WITHOUT_CLASSIFICATION	4.16756080845502E-9	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9981262433992444	WITHOUT_CLASSIFICATION	0.0018737566007556144	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999993768935902	WITHOUT_CLASSIFICATION	6.231064098799176E-7	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998831994251	WITHOUT_CLASSIFICATION	1.1680057476331702E-7	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999970043600567	WITHOUT_CLASSIFICATION	2.995639943284112E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991550199916335	WITHOUT_CLASSIFICATION	8.449800083665269E-4	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998995197031939	WITHOUT_CLASSIFICATION	1.0048029680603652E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957425917245	WITHOUT_CLASSIFICATION	4.257408275536725E-6	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999970043600567	WITHOUT_CLASSIFICATION	2.995639943284112E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999986797882786	WITHOUT_CLASSIFICATION	1.3202117212849524E-6	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999984183168128	WITHOUT_CLASSIFICATION	1.5816831871834385E-6	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974474906176606	WITHOUT_CLASSIFICATION	0.0025525093823394835	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997883076014662	WITHOUT_CLASSIFICATION	2.1169239853380644E-4	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999927249307614	WITHOUT_CLASSIFICATION	7.2750692386267015E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999943729353924	WITHOUT_CLASSIFICATION	5.627064607610161E-6	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999257266722762	WITHOUT_CLASSIFICATION	7.427332772374171E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901647751644	WITHOUT_CLASSIFICATION	9.835224835674733E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999997080593	WITHOUT_CLASSIFICATION	2.919406836178761E-10	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999998013642	WITHOUT_CLASSIFICATION	1.9863583453591024E-10	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999951346035	WITHOUT_CLASSIFICATION	4.8653965482546075E-9	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999959681419	WITHOUT_CLASSIFICATION	4.031858122795436E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999996864436005	WITHOUT_CLASSIFICATION	3.1355639947266823E-7	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999998602079928	WITHOUT_CLASSIFICATION	1.3979200725048994E-7	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999908215982	WITHOUT_CLASSIFICATION	9.178401875700647E-9	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999999793845833	WITHOUT_CLASSIFICATION	2.0615416703186184E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994410001429	WITHOUT_CLASSIFICATION	5.589998570862287E-7	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998975621774108	WITHOUT_CLASSIFICATION	1.0243782258924723E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999998109297201	WITHOUT_CLASSIFICATION	1.8907027989462658E-7	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999724535420159	WITHOUT_CLASSIFICATION	2.7546457984115903E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999994903907642	WITHOUT_CLASSIFICATION	5.09609235817393E-7	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999996659802205	WITHOUT_CLASSIFICATION	3.340197795164636E-7	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999943206728589	WITHOUT_CLASSIFICATION	5.679327141028475E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999470607202666	WITHOUT_CLASSIFICATION	5.2939279733427966E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993311224397177	WITHOUT_CLASSIFICATION	6.688775602823391E-4	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998334820277	WITHOUT_CLASSIFICATION	1.6651797230526743E-7	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999931767147933	WITHOUT_CLASSIFICATION	6.823285206690845E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999995508777866	WITHOUT_CLASSIFICATION	4.4912221342655295E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999937440952413	WITHOUT_CLASSIFICATION	6.255904758716017E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986027792424	WITHOUT_CLASSIFICATION	1.3972207576387147E-6	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990338704412	WITHOUT_CLASSIFICATION	9.66129558783738E-7	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999699798186	WITHOUT_CLASSIFICATION	3.0020181393143233E-7	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999987599648648	WITHOUT_CLASSIFICATION	1.2400351352574794E-6	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998233147794	WITHOUT_CLASSIFICATION	1.7668522061958433E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999086684646	WITHOUT_CLASSIFICATION	9.13315354893504E-8	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999977354113315	WITHOUT_CLASSIFICATION	2.264588668532098E-6	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999935467887	WITHOUT_CLASSIFICATION	6.45321129453649E-8	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990256133032	WITHOUT_CLASSIFICATION	9.743866967004274E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999138982271	WITHOUT_CLASSIFICATION	8.610177302233255E-8	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999999997029412	WITHOUT_CLASSIFICATION	2.9705879410661213E-9	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997346308438	WITHOUT_CLASSIFICATION	2.653691561749424E-7	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999997735633592	WITHOUT_CLASSIFICATION	2.2643664076501855E-7	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.999981166002955	WITHOUT_CLASSIFICATION	1.8833997045047866E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999732232728769	WITHOUT_CLASSIFICATION	2.6776727123255082E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997905425687	WITHOUT_CLASSIFICATION	2.094574313671842E-7	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999999872480488	WITHOUT_CLASSIFICATION	1.2751951188847903E-7	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999992575174139	WITHOUT_CLASSIFICATION	7.424825859842865E-7	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999400080768237	WITHOUT_CLASSIFICATION	5.9991923176274055E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999837819871	WITHOUT_CLASSIFICATION	1.62180128536286E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999596308264348	WITHOUT_CLASSIFICATION	4.03691735652012E-5	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999728348047	WITHOUT_CLASSIFICATION	2.7165195252003804E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999480062656	WITHOUT_CLASSIFICATION	5.199373439147575E-8	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999973990844105	WITHOUT_CLASSIFICATION	2.600915589432995E-6	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999995814625323	WITHOUT_CLASSIFICATION	4.1853746768509307E-7	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999639663595	WITHOUT_CLASSIFICATION	3.6033640485928284E-8	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999993520050455	WITHOUT_CLASSIFICATION	6.479949544214961E-7	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999923184969768	WITHOUT_CLASSIFICATION	7.681503023249593E-6	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999049380826859	WITHOUT_CLASSIFICATION	9.506191731408765E-4	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999380425397563	WITHOUT_CLASSIFICATION	6.195746024377423E-5	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999928295318767	WITHOUT_CLASSIFICATION	7.170468123185615E-6	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999683492968	WITHOUT_CLASSIFICATION	3.165070318041378E-8	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999981755604523	WITHOUT_CLASSIFICATION	1.8244395476346414E-6	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999595962402003	WITHOUT_CLASSIFICATION	4.040375979978017E-5	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999998954612687	WITHOUT_CLASSIFICATION	1.0453873130361855E-6	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999951581116387	WITHOUT_CLASSIFICATION	4.841888361312555E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999998433071758	WITHOUT_CLASSIFICATION	1.5669282419925522E-6	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999540577502532	WITHOUT_CLASSIFICATION	4.5942249746795E-4	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999881985668803	WITHOUT_CLASSIFICATION	1.1801433119853667E-5	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999993377178	WITHOUT_CLASSIFICATION	6.622821685278642E-10	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997340883439	WITHOUT_CLASSIFICATION	2.6591165609221023E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999921921018	WITHOUT_CLASSIFICATION	7.80789825276281E-9	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998754852563	WITHOUT_CLASSIFICATION	1.2451474366086894E-7	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9929077336244028	WITHOUT_CLASSIFICATION	0.0070922663755972415	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999935494047651	WITHOUT_CLASSIFICATION	6.450595234775214E-6	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999887436484707	WITHOUT_CLASSIFICATION	1.1256351529327274E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999999578899905	WITHOUT_CLASSIFICATION	4.2110009397142644E-8	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999862132668	WITHOUT_CLASSIFICATION	1.3786733233381735E-8	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999961891812371	WITHOUT_CLASSIFICATION	3.8108187628812566E-6	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999993753845133	WITHOUT_CLASSIFICATION	6.246154866009246E-7	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999977729985781	WITHOUT_CLASSIFICATION	2.227001421955021E-6	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9897750554105518	WITHOUT_CLASSIFICATION	0.010224944589448181	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999120198338022	WITHOUT_CLASSIFICATION	8.798016619782327E-5	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999996777919637	WITHOUT_CLASSIFICATION	3.222080361914203E-7	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999305624507555	WITHOUT_CLASSIFICATION	6.94375492444346E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999999323787969	WITHOUT_CLASSIFICATION	6.762120304463943E-8	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999999305801	WITHOUT_CLASSIFICATION	6.941986397396448E-11	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999999497087	WITHOUT_CLASSIFICATION	5.029130002417993E-11	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999991114844387	WITHOUT_CLASSIFICATION	8.885155613072648E-6	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999990155533	WITHOUT_CLASSIFICATION	9.844466669051928E-10	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999968743991039	WITHOUT_CLASSIFICATION	3.125600896050402E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999985143867	WITHOUT_CLASSIFICATION	1.485613298934598E-9	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997408373217886	WITHOUT_CLASSIFICATION	2.5916267821135417E-4	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999933662011433	WITHOUT_CLASSIFICATION	6.6337988566392185E-6	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999995804301	WITHOUT_CLASSIFICATION	4.195699376597241E-10	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999969318988	WITHOUT_CLASSIFICATION	3.0681011014796236E-9	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999999999879	WITHOUT_CLASSIFICATION	1.211022533492894E-13	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999950631785649	WITHOUT_CLASSIFICATION	4.936821435059787E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999998833225222	WITHOUT_CLASSIFICATION	1.1667747787472369E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999540974724	WITHOUT_CLASSIFICATION	4.590252753182099E-8	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.999999229073813	WITHOUT_CLASSIFICATION	7.709261870122874E-7	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999947643682027	WITHOUT_CLASSIFICATION	5.2356317972973586E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999996942616024	WITHOUT_CLASSIFICATION	3.057383976347581E-7	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999984973558	WITHOUT_CLASSIFICATION	1.5026441993798664E-9	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999883704725583	WITHOUT_CLASSIFICATION	1.1629527441616368E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999956208336723	WITHOUT_CLASSIFICATION	4.37916632762282E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999947510244194	WITHOUT_CLASSIFICATION	5.248975580623858E-6	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999849730248	WITHOUT_CLASSIFICATION	1.5026975214876405E-8	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999949042477361	WITHOUT_CLASSIFICATION	5.095752264030541E-6	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999030945107527	WITHOUT_CLASSIFICATION	9.690548924730944E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999998044550832	WITHOUT_CLASSIFICATION	1.9554491672034713E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999949042477361	WITHOUT_CLASSIFICATION	5.095752264030541E-6	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999257225531	WITHOUT_CLASSIFICATION	7.427744694224112E-8	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999998912587785	WITHOUT_CLASSIFICATION	1.0874122144750874E-7	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999056641628796	WITHOUT_CLASSIFICATION	9.43358371203969E-5	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9978977521810773	WITHOUT_CLASSIFICATION	0.002102247818922663	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999999356207436	WITHOUT_CLASSIFICATION	6.437925637183783E-8	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999993675498091	WITHOUT_CLASSIFICATION	6.324501909586816E-7	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999926333606892	WITHOUT_CLASSIFICATION	7.366639310778864E-6	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999992732598132	WITHOUT_CLASSIFICATION	7.267401867428336E-7	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999924314121912	WITHOUT_CLASSIFICATION	7.5685878088267775E-6	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999971054279223	WITHOUT_CLASSIFICATION	2.8945720775888243E-6	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999960835588	WITHOUT_CLASSIFICATION	3.916441139336145E-9	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999896425409119	WITHOUT_CLASSIFICATION	1.0357459088070049E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999999643731705	WITHOUT_CLASSIFICATION	3.5626829498268194E-7	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999956986108	WITHOUT_CLASSIFICATION	4.301389272352884E-9	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998036183758	WITHOUT_CLASSIFICATION	1.963816241338548E-7	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999999390392111	WITHOUT_CLASSIFICATION	6.096078882639227E-8	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999521446292616	WITHOUT_CLASSIFICATION	4.7855370738276763E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999521446292616	WITHOUT_CLASSIFICATION	4.7855370738276763E-5	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999988771444608	WITHOUT_CLASSIFICATION	1.1228555392583582E-6	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999917550123855	WITHOUT_CLASSIFICATION	8.244987614408358E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999782681346435	WITHOUT_CLASSIFICATION	2.17318653564237E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.999995201554431	WITHOUT_CLASSIFICATION	4.798445569009923E-6	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999989554732195	WITHOUT_CLASSIFICATION	1.0445267804909927E-5	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999851387116989	WITHOUT_CLASSIFICATION	1.4861288301072479E-5	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999983674987021	WITHOUT_CLASSIFICATION	1.632501297917832E-6	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999947659258	WITHOUT_CLASSIFICATION	5.234074189621111E-9	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999999524373371	WITHOUT_CLASSIFICATION	4.756266294082354E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999947944602569	WITHOUT_CLASSIFICATION	5.205539743108426E-5	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.999987309982131	WITHOUT_CLASSIFICATION	1.2690017868993212E-5	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999757054769	WITHOUT_CLASSIFICATION	2.4294523117866E-8	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999986475789248	WITHOUT_CLASSIFICATION	1.352421075172194E-6	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999976859539085	WITHOUT_CLASSIFICATION	2.3140460914894976E-6	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999521649298	WITHOUT_CLASSIFICATION	4.7835070279041724E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999943206728589	WITHOUT_CLASSIFICATION	5.679327141028475E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999991226234817	WITHOUT_CLASSIFICATION	8.773765183706993E-7	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999933491738	WITHOUT_CLASSIFICATION	6.650826212348373E-9	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9997858876435567	WITHOUT_CLASSIFICATION	2.141123564432307E-4	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999906799558617	WITHOUT_CLASSIFICATION	9.320044138277789E-6	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999954322275	WITHOUT_CLASSIFICATION	4.567772501873533E-9	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999993884663476	WITHOUT_CLASSIFICATION	6.115336524202593E-7	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.999999992471721	WITHOUT_CLASSIFICATION	7.528278999512562E-9	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999961254317	WITHOUT_CLASSIFICATION	3.874568328024403E-9	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999912915565429	WITHOUT_CLASSIFICATION	8.708443457066199E-6	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999960886932823	WITHOUT_CLASSIFICATION	3.911306717721878E-6	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999997147955	WITHOUT_CLASSIFICATION	2.852045047576095E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999450564459857	WITHOUT_CLASSIFICATION	5.494355401434495E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9998297845060118	WITHOUT_CLASSIFICATION	1.7021549398824355E-4	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999994276524632	WITHOUT_CLASSIFICATION	5.723475367916285E-7	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999990531415637	WITHOUT_CLASSIFICATION	9.468584363540791E-7	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999998897247074	WITHOUT_CLASSIFICATION	1.1027529261852077E-7	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.999990530416953	WITHOUT_CLASSIFICATION	9.46958304698276E-6	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999980690115402	WITHOUT_CLASSIFICATION	1.9309884597996283E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999995541564789	WITHOUT_CLASSIFICATION	4.4584352108765863E-7	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999948570042634	WITHOUT_CLASSIFICATION	5.142995736678396E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999936971234831	WITHOUT_CLASSIFICATION	6.3028765169920045E-6	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999954517747588	WITHOUT_CLASSIFICATION	4.548225241118613E-6	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999999841650066	WITHOUT_CLASSIFICATION	1.583499340605814E-7	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999996645248725	WITHOUT_CLASSIFICATION	3.3547512746655516E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999734697649032	WITHOUT_CLASSIFICATION	2.6530235096752807E-5	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999983998663506	WITHOUT_CLASSIFICATION	1.6001336494106104E-6	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999962291422054	WITHOUT_CLASSIFICATION	3.770857794634764E-6	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998893543514	WITHOUT_CLASSIFICATION	1.1064564867835477E-7	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999742521133	WITHOUT_CLASSIFICATION	2.5747886768675726E-8	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999994204500761	WITHOUT_CLASSIFICATION	5.79549923924555E-7	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999449867864846	WITHOUT_CLASSIFICATION	5.501321351553558E-5	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980504583158	WITHOUT_CLASSIFICATION	1.9495416841285687E-6	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753871143255	WITHOUT_CLASSIFICATION	2.4612885674371283E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999993109754303	WITHOUT_CLASSIFICATION	6.890245697538936E-7	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999997902755565	WITHOUT_CLASSIFICATION	2.0972444349892867E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994094921383	WITHOUT_CLASSIFICATION	5.905078617168656E-7	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999998858604524	WITHOUT_CLASSIFICATION	1.1413954763387778E-7	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999881146517767	WITHOUT_CLASSIFICATION	1.1885348223171503E-5	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995550615165862	WITHOUT_CLASSIFICATION	4.449384834137546E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999881146517767	WITHOUT_CLASSIFICATION	1.1885348223171503E-5	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999960977061201	WITHOUT_CLASSIFICATION	3.902293879891667E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999999338183368	WITHOUT_CLASSIFICATION	6.618166320291239E-7	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999991302712172	WITHOUT_CLASSIFICATION	8.697287827830645E-7	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999994824064574	WITHOUT_CLASSIFICATION	5.17593542547135E-7	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999998503481144	WITHOUT_CLASSIFICATION	1.4965188560324842E-7	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999997664494018	WITHOUT_CLASSIFICATION	2.3355059826439323E-7	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993952703375	WITHOUT_CLASSIFICATION	6.047296624336543E-7	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999999488876542	WITHOUT_CLASSIFICATION	5.111234574572004E-8	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999986838284741	WITHOUT_CLASSIFICATION	1.3161715259787626E-6	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.997741075607662	WITHOUT_CLASSIFICATION	0.00225892439233802	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999529172591883	WITHOUT_CLASSIFICATION	4.708274081168694E-5	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999369409355	WITHOUT_CLASSIFICATION	6.30590644237278E-8	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999999406107862	WITHOUT_CLASSIFICATION	5.9389213680413164E-8	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999998981695689	WITHOUT_CLASSIFICATION	1.01830431166232E-7	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999980099314	WITHOUT_CLASSIFICATION	1.9900685976400946E-9	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999984362495	WITHOUT_CLASSIFICATION	1.563750398519989E-9	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998797629972	WITHOUT_CLASSIFICATION	1.2023700282165666E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998797629972	WITHOUT_CLASSIFICATION	1.2023700282165666E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999994462622901	WITHOUT_CLASSIFICATION	5.537377099975253E-7	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999669029699	WITHOUT_CLASSIFICATION	3.3097030144603094E-8	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999999701686	WITHOUT_CLASSIFICATION	2.9831398577214155E-11	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9997865051137772	WITHOUT_CLASSIFICATION	2.1349488622277323E-4	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999988385952	WITHOUT_CLASSIFICATION	1.16140474003847E-9	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999336087085	WITHOUT_CLASSIFICATION	6.639129148534047E-8	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998851066342048	WITHOUT_CLASSIFICATION	1.1489336579525452E-4	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999414029357174	WITHOUT_CLASSIFICATION	5.859706428262884E-5	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999986300082169	WITHOUT_CLASSIFICATION	1.3699917831763952E-6	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999998218159142	WITHOUT_CLASSIFICATION	1.7818408578372377E-7	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999946621438	WITHOUT_CLASSIFICATION	5.337856209358375E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999956407865871	WITHOUT_CLASSIFICATION	4.359213412930694E-6	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999985590104036	WITHOUT_CLASSIFICATION	1.4409895964404351E-6	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999995767965979	WITHOUT_CLASSIFICATION	4.232034020054236E-7	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999978697641482	WITHOUT_CLASSIFICATION	2.1302358518054924E-6	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999957668574	WITHOUT_CLASSIFICATION	4.233142580166117E-9	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999877061181033	WITHOUT_CLASSIFICATION	1.22938818966435E-5	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9968599253682787	WITHOUT_CLASSIFICATION	0.0031400746317212526	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9999824691669289	WITHOUT_CLASSIFICATION	1.7530833071055854E-5	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999651762068	WITHOUT_CLASSIFICATION	3.4823793195561926E-8	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999995600620807	WITHOUT_CLASSIFICATION	4.399379193520544E-7	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9996913865635136	WITHOUT_CLASSIFICATION	3.086134364864212E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999260005930861	WITHOUT_CLASSIFICATION	7.399940691386866E-5	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9881477565219423	WITHOUT_CLASSIFICATION	0.011852243478057599	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999997355729173	WITHOUT_CLASSIFICATION	2.6442708267471055E-7	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999999658730464	WITHOUT_CLASSIFICATION	3.412695363120446E-8	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999992088884	WITHOUT_CLASSIFICATION	7.911117055889038E-10	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999918252487987	WITHOUT_CLASSIFICATION	8.174751201200489E-6	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999994187966889	WITHOUT_CLASSIFICATION	5.812033111614566E-7	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999989632855	WITHOUT_CLASSIFICATION	1.0367145421344357E-9	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999999539614	WITHOUT_CLASSIFICATION	4.6038669634317195E-11	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999995013002403	WITHOUT_CLASSIFICATION	4.986997597228535E-7	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999711510708897	WITHOUT_CLASSIFICATION	2.8848929110268393E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999990662867253	WITHOUT_CLASSIFICATION	9.337132747520528E-7	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.99988420638665	WITHOUT_CLASSIFICATION	1.1579361335002945E-4	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999997382779047	WITHOUT_CLASSIFICATION	2.6172209525868134E-7	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999309832287	WITHOUT_CLASSIFICATION	6.901677130383667E-8	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999969475521093	WITHOUT_CLASSIFICATION	3.0524478905574612E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999839921963	WITHOUT_CLASSIFICATION	1.6007803678749964E-8	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999974708110021	WITHOUT_CLASSIFICATION	2.5291889980087744E-6	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999995798563	WITHOUT_CLASSIFICATION	4.201436293379701E-10	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993059772122	WITHOUT_CLASSIFICATION	6.940227877058168E-7	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999941551963363	WITHOUT_CLASSIFICATION	5.8448036637433466E-6	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9608208290972322	WITHOUT_CLASSIFICATION	0.039179170902767756	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999230390131	WITHOUT_CLASSIFICATION	7.69609869958007E-8	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999874920048932	WITHOUT_CLASSIFICATION	1.2507995106766415E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6336800884563722	IMPLEMENTATION	0.3663199115436277	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999997517574	WITHOUT_CLASSIFICATION	2.482426035084201E-9	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999933274304993	WITHOUT_CLASSIFICATION	6.67256950070793E-6	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999969938187302	WITHOUT_CLASSIFICATION	3.006181269898207E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984855086328	WITHOUT_CLASSIFICATION	1.5144913671659803E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999934273873	WITHOUT_CLASSIFICATION	6.57261272407776E-9	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999999781818	WITHOUT_CLASSIFICATION	2.1818177267776116E-11	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999999241153096	WITHOUT_CLASSIFICATION	7.588469040064977E-7	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999985608240957	WITHOUT_CLASSIFICATION	1.439175904342417E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999997176918928	WITHOUT_CLASSIFICATION	2.8230810714686107E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999997176918928	WITHOUT_CLASSIFICATION	2.8230810714686107E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999329429075	WITHOUT_CLASSIFICATION	6.705709260284945E-8	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999895844491328	WITHOUT_CLASSIFICATION	1.0415550867328216E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998758803846	WITHOUT_CLASSIFICATION	1.2411961541873247E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999993557204885	WITHOUT_CLASSIFICATION	6.442795114139485E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999990138021714	WITHOUT_CLASSIFICATION	9.861978285880521E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999940304535	WITHOUT_CLASSIFICATION	5.969546612523824E-9	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996357045545773	WITHOUT_CLASSIFICATION	3.642954454227594E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999650519809338	WITHOUT_CLASSIFICATION	3.494801906617298E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999980809372954	WITHOUT_CLASSIFICATION	1.9190627046536526E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999998396815	WITHOUT_CLASSIFICATION	1.6031853958047558E-10	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999994064347	WITHOUT_CLASSIFICATION	5.935653207978665E-10	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999999958234702	WITHOUT_CLASSIFICATION	4.176529785386511E-8	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999999462007926	WITHOUT_CLASSIFICATION	5.379920731341777E-8	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999994520778764	WITHOUT_CLASSIFICATION	5.479221235888223E-7	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999997294966121	WITHOUT_CLASSIFICATION	2.7050338786387593E-7	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999996730790797	WITHOUT_CLASSIFICATION	3.269209203100559E-7	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999944405162852	WITHOUT_CLASSIFICATION	5.559483714863946E-6	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999318266292	WITHOUT_CLASSIFICATION	6.817337092257725E-8	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999980654482284	WITHOUT_CLASSIFICATION	1.9345517715996334E-6	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999985989031	WITHOUT_CLASSIFICATION	1.4010969011079837E-9	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.999988770716691	WITHOUT_CLASSIFICATION	1.1229283309033684E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999999997016549	WITHOUT_CLASSIFICATION	2.9834510791998263E-9	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999954422561443	WITHOUT_CLASSIFICATION	4.55774385567473E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999888225137358	WITHOUT_CLASSIFICATION	1.1177486264138542E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999737910116741	WITHOUT_CLASSIFICATION	2.6208988325911024E-4	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9987598941198055	WITHOUT_CLASSIFICATION	0.001240105880194478	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.8276333424175023	WITHOUT_CLASSIFICATION	0.17236665758249767	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9997690587273963	WITHOUT_CLASSIFICATION	2.309412726036076E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999060281260154	WITHOUT_CLASSIFICATION	9.3971873984675E-5	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999976975497539	WITHOUT_CLASSIFICATION	2.302450246181424E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999888225137358	WITHOUT_CLASSIFICATION	1.1177486264138542E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999988675387597	WITHOUT_CLASSIFICATION	1.13246124040661E-6	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999995033866	WITHOUT_CLASSIFICATION	4.966134836408882E-10	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999909614973086	WITHOUT_CLASSIFICATION	9.03850269135498E-6	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999984135429468	WITHOUT_CLASSIFICATION	1.5864570531690395E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999999181466	WITHOUT_CLASSIFICATION	8.18533771029999E-11	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999999518646474	WITHOUT_CLASSIFICATION	4.813535260421425E-7	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999307151110304	WITHOUT_CLASSIFICATION	6.928488896960352E-5	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999996974247	WITHOUT_CLASSIFICATION	3.0257531133537407E-9	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.998609858213765	WITHOUT_CLASSIFICATION	0.0013901417862349857	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999984135429468	WITHOUT_CLASSIFICATION	1.5864570531690395E-6	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999999998898905	WITHOUT_CLASSIFICATION	1.1010950366886377E-9	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999996974247	WITHOUT_CLASSIFICATION	3.0257531133537407E-9	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999999150354552	WITHOUT_CLASSIFICATION	8.496454486470831E-8	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999809987976191	WITHOUT_CLASSIFICATION	1.9001202380820134E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999221912543	WITHOUT_CLASSIFICATION	7.780874559263174E-8	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999946621438	WITHOUT_CLASSIFICATION	5.337856209358375E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999992937508	WITHOUT_CLASSIFICATION	7.062490978689293E-10	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999985876489	WITHOUT_CLASSIFICATION	1.4123511805866312E-9	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999991987423	WITHOUT_CLASSIFICATION	8.012577697982111E-10	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998208461059047	WITHOUT_CLASSIFICATION	1.791538940953051E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999999405552	WITHOUT_CLASSIFICATION	5.94448367376425E-11	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999991321080703	WITHOUT_CLASSIFICATION	8.678919295715151E-7	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999998863688571	WITHOUT_CLASSIFICATION	1.1363114292630049E-7	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999739381151	WITHOUT_CLASSIFICATION	2.6061884789398984E-8	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999986126756515	WITHOUT_CLASSIFICATION	1.3873243485019713E-6	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999934332316128	WITHOUT_CLASSIFICATION	6.566768387104689E-6	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999958737805208	WITHOUT_CLASSIFICATION	4.1262194791688234E-6	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999951645554	WITHOUT_CLASSIFICATION	4.835444621998611E-9	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999989341381132	WITHOUT_CLASSIFICATION	1.065861886678614E-6	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9999720511058965	WITHOUT_CLASSIFICATION	2.794889410356863E-5	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999994192296465	WITHOUT_CLASSIFICATION	5.8077035349819964E-6	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999752675906186	WITHOUT_CLASSIFICATION	2.473240938140966E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999981832697841	WITHOUT_CLASSIFICATION	1.8167302159057987E-6	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999998941428158	WITHOUT_CLASSIFICATION	1.058571842627785E-7	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999982798340268	WITHOUT_CLASSIFICATION	1.7201659731261698E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999999195034798	WITHOUT_CLASSIFICATION	8.049652016850256E-8	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999942662384241	WITHOUT_CLASSIFICATION	5.733761575922385E-6	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999427156703322	WITHOUT_CLASSIFICATION	5.728432966773116E-5	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999880896868	WITHOUT_CLASSIFICATION	1.1910313060839774E-8	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999414334	WITHOUT_CLASSIFICATION	5.85665410827236E-11	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999936658403993	WITHOUT_CLASSIFICATION	6.334159600764249E-6	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999359202361585	WITHOUT_CLASSIFICATION	6.407976384155845E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999997360171986	WITHOUT_CLASSIFICATION	2.639828014129926E-7	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997389704730617	WITHOUT_CLASSIFICATION	2.610295269383256E-4	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997232631998336	WITHOUT_CLASSIFICATION	2.767368001663479E-4	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999992895477824	WITHOUT_CLASSIFICATION	7.104522175101944E-7	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9988106843642065	WITHOUT_CLASSIFICATION	0.001189315635793523	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999919567834452	WITHOUT_CLASSIFICATION	8.043216554853799E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982828573778	WITHOUT_CLASSIFICATION	1.7171426222314713E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982828573778	WITHOUT_CLASSIFICATION	1.7171426222314713E-6	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999918299393	WITHOUT_CLASSIFICATION	8.170060819901492E-9	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999974007890368	WITHOUT_CLASSIFICATION	2.599210963331614E-6	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999969948768175	WITHOUT_CLASSIFICATION	3.005123182667209E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999982394411262	WITHOUT_CLASSIFICATION	1.7605588737877522E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999964539648691	WITHOUT_CLASSIFICATION	3.546035130810082E-6	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999969000681249	WITHOUT_CLASSIFICATION	3.0999318750267394E-6	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999999130673815	WITHOUT_CLASSIFICATION	8.693261848939768E-8	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999997959612847	WITHOUT_CLASSIFICATION	2.0403871525621465E-7	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999477854555	WITHOUT_CLASSIFICATION	5.221454445941275E-8	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999951654741	WITHOUT_CLASSIFICATION	4.834525859481237E-9	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999505544103	WITHOUT_CLASSIFICATION	4.944558968256756E-8	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995216614599	WITHOUT_CLASSIFICATION	4.78338540165263E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999993829571606	WITHOUT_CLASSIFICATION	6.170428394015207E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982828573778	WITHOUT_CLASSIFICATION	1.7171426222314713E-6	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999999678582496	WITHOUT_CLASSIFICATION	3.2141750387044983E-7	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999994182165198	WITHOUT_CLASSIFICATION	5.817834801631244E-7	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999090691902546	WITHOUT_CLASSIFICATION	9.0930809745519E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999996200372013	WITHOUT_CLASSIFICATION	3.7996279863994637E-7	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999999813794658	WITHOUT_CLASSIFICATION	1.8620534280198633E-8	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999995920060103	WITHOUT_CLASSIFICATION	4.079939897910325E-7	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998909277791549	WITHOUT_CLASSIFICATION	1.0907222084517964E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999591287565096	WITHOUT_CLASSIFICATION	4.087124349030255E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999987687996159	WITHOUT_CLASSIFICATION	1.2312003840308069E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999977693358885	WITHOUT_CLASSIFICATION	2.230664111500646E-6	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999964199335154	WITHOUT_CLASSIFICATION	3.5800664845942184E-6	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997389704730617	WITHOUT_CLASSIFICATION	2.610295269383256E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982828573778	WITHOUT_CLASSIFICATION	1.7171426222314713E-6	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.999994429872242	WITHOUT_CLASSIFICATION	5.57012775801703E-6	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999068821237	WITHOUT_CLASSIFICATION	9.311787636199291E-8	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.999998892807865	WITHOUT_CLASSIFICATION	1.107192134952403E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999971576314309	WITHOUT_CLASSIFICATION	2.8423685690858835E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.999913138578016	WITHOUT_CLASSIFICATION	8.686142198406676E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999998349962093	WITHOUT_CLASSIFICATION	1.6500379069809573E-6	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943256442878	WITHOUT_CLASSIFICATION	5.674355712171518E-6	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997473755213	WITHOUT_CLASSIFICATION	2.5262447867974493E-7	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999962344797	WITHOUT_CLASSIFICATION	3.765520338493865E-9	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999990033028529	WITHOUT_CLASSIFICATION	9.96697147167831E-7	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999996324311776	WITHOUT_CLASSIFICATION	3.6756882235424444E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999817465264175	WITHOUT_CLASSIFICATION	1.825347358248451E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999998336520975	WITHOUT_CLASSIFICATION	1.663479024606731E-7	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999992540578613	WITHOUT_CLASSIFICATION	7.459421386332296E-7	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.999960977061201	WITHOUT_CLASSIFICATION	3.902293879891667E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999803806977	WITHOUT_CLASSIFICATION	1.961930231126785E-8	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999950807644	WITHOUT_CLASSIFICATION	4.919235591144733E-9	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999705241301	WITHOUT_CLASSIFICATION	2.94758698110927E-8	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999992618214861	WITHOUT_CLASSIFICATION	7.381785138830223E-7	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999930459355	WITHOUT_CLASSIFICATION	6.954064500017781E-9	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999998542807949	WITHOUT_CLASSIFICATION	1.4571920510938113E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999998542807949	WITHOUT_CLASSIFICATION	1.4571920510938113E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999707941574648	WITHOUT_CLASSIFICATION	2.9205842535149882E-5	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999984184001	WITHOUT_CLASSIFICATION	1.5815998287057449E-9	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999832607103383	WITHOUT_CLASSIFICATION	1.673928966176303E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999874766813439	WITHOUT_CLASSIFICATION	1.2523318656175343E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999959810692227	WITHOUT_CLASSIFICATION	4.018930777237942E-6	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999999571818413	WITHOUT_CLASSIFICATION	4.2818158666873894E-8	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999767067532417	WITHOUT_CLASSIFICATION	2.3293246758276757E-5	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999637787269	WITHOUT_CLASSIFICATION	3.6221273118578017E-8	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999637787269	WITHOUT_CLASSIFICATION	3.6221273118578017E-8	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999957578719262	WITHOUT_CLASSIFICATION	4.2421280737684665E-6	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999991225267699	WITHOUT_CLASSIFICATION	8.774732299602649E-7	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999398189013	WITHOUT_CLASSIFICATION	6.01810986440839E-8	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993187398252	WITHOUT_CLASSIFICATION	6.81260174802267E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993187398252	WITHOUT_CLASSIFICATION	6.81260174802267E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999993187398252	WITHOUT_CLASSIFICATION	6.81260174802267E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999894927109306	WITHOUT_CLASSIFICATION	1.0507289069325222E-5	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999256506685	WITHOUT_CLASSIFICATION	7.43493314632047E-8	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9966249713349122	WITHOUT_CLASSIFICATION	0.0033750286650878216	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9992268495790081	WITHOUT_CLASSIFICATION	7.731504209917922E-4	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999976809076692	WITHOUT_CLASSIFICATION	2.319092330746894E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982828573778	WITHOUT_CLASSIFICATION	1.7171426222314713E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982828573778	WITHOUT_CLASSIFICATION	1.7171426222314713E-6	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999949688147101	WITHOUT_CLASSIFICATION	5.031185289893577E-6	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999972912274733	WITHOUT_CLASSIFICATION	2.7087725266303262E-6	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9982873139504722	WITHOUT_CLASSIFICATION	0.0017126860495277245	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9966655565548531	WITHOUT_CLASSIFICATION	0.003334443445146839	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999998220214883	WITHOUT_CLASSIFICATION	1.7797851177692952E-7	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999901513412445	WITHOUT_CLASSIFICATION	9.848658755530446E-6	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997940701708	WITHOUT_CLASSIFICATION	2.0592982928364196E-7	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999874148327195	WITHOUT_CLASSIFICATION	1.2585167280481144E-5	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999995522461878	WITHOUT_CLASSIFICATION	4.477538121989329E-7	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999850877869	WITHOUT_CLASSIFICATION	1.4912213114458338E-8	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999394927378	WITHOUT_CLASSIFICATION	6.05072621666929E-8	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999975738816996	WITHOUT_CLASSIFICATION	2.426118300333935E-6	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999995844429139	WITHOUT_CLASSIFICATION	4.155570860979649E-7	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999995844429139	WITHOUT_CLASSIFICATION	4.155570860979649E-7	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999996968177123	WITHOUT_CLASSIFICATION	3.0318228766803295E-7	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999996968177123	WITHOUT_CLASSIFICATION	3.0318228766803295E-7	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999997056496654	WITHOUT_CLASSIFICATION	2.9435033454559884E-7	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999994401357302	WITHOUT_CLASSIFICATION	5.598642699618698E-7	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999994401357302	WITHOUT_CLASSIFICATION	5.598642699618698E-7	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999991094860099	WITHOUT_CLASSIFICATION	8.905139900822058E-7	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999994418615787	WITHOUT_CLASSIFICATION	5.581384211655328E-7	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997703013843819	WITHOUT_CLASSIFICATION	2.296986156182008E-4	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999998542807949	WITHOUT_CLASSIFICATION	1.4571920510938113E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999266931250279	WITHOUT_CLASSIFICATION	7.330687497205512E-5	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999994418615787	WITHOUT_CLASSIFICATION	5.581384211655328E-7	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999984614482	WITHOUT_CLASSIFICATION	1.538551858834918E-9	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9979241659520146	WITHOUT_CLASSIFICATION	0.0020758340479853574	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999991793513844	WITHOUT_CLASSIFICATION	8.206486155903487E-7	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999989343626523	WITHOUT_CLASSIFICATION	1.0656373476982574E-6	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999993793114947	WITHOUT_CLASSIFICATION	6.206885052249932E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999559712526731	WITHOUT_CLASSIFICATION	4.4028747326929696E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999987888468225	WITHOUT_CLASSIFICATION	1.2111531775049032E-6	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999997553378618	WITHOUT_CLASSIFICATION	2.44662138222492E-7	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998824919935	WITHOUT_CLASSIFICATION	1.1750800665882095E-7	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999999775449	WITHOUT_CLASSIFICATION	2.2455198711940333E-11	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999983618769	WITHOUT_CLASSIFICATION	1.6381229904298992E-9	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999959095403647	WITHOUT_CLASSIFICATION	4.090459635341326E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999850267726915	WITHOUT_CLASSIFICATION	1.4973227308545354E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9999993549592749	WITHOUT_CLASSIFICATION	6.450407249800072E-7	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9904990758695758	WITHOUT_CLASSIFICATION	0.00950092413042414	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999999479495563	WITHOUT_CLASSIFICATION	5.205044370048265E-7	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999690611776	WITHOUT_CLASSIFICATION	3.093882229669348E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999978731794892	WITHOUT_CLASSIFICATION	2.1268205108537213E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999978731794892	WITHOUT_CLASSIFICATION	2.1268205108537213E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999996255918199	WITHOUT_CLASSIFICATION	3.744081801383192E-7	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999830639436	WITHOUT_CLASSIFICATION	1.6936056514008777E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999992532777464	WITHOUT_CLASSIFICATION	7.467222535663338E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999536274330556	WITHOUT_CLASSIFICATION	4.637256694436318E-5	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999995623388156	WITHOUT_CLASSIFICATION	4.376611843844666E-7	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999437227707909	WITHOUT_CLASSIFICATION	5.627722920897758E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999952162364028	WITHOUT_CLASSIFICATION	4.783763597270907E-6	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999993279072817	WITHOUT_CLASSIFICATION	6.720927182700492E-7	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999987025735391	WITHOUT_CLASSIFICATION	1.297426460919772E-6	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999249559066	WITHOUT_CLASSIFICATION	7.504409348458452E-8	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999998814551927	WITHOUT_CLASSIFICATION	1.1854480730726722E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999817465264175	WITHOUT_CLASSIFICATION	1.825347358248451E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999013041563	WITHOUT_CLASSIFICATION	9.869584372878378E-8	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996089515675	WITHOUT_CLASSIFICATION	3.910484325673653E-7	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999395791135778	WITHOUT_CLASSIFICATION	6.042088642220293E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999990301885574	WITHOUT_CLASSIFICATION	9.698114425320007E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999676908508	WITHOUT_CLASSIFICATION	3.230914931419705E-8	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999676908508	WITHOUT_CLASSIFICATION	3.230914931419705E-8	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999456770536368	WITHOUT_CLASSIFICATION	5.432294636331868E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.99999963977516	WITHOUT_CLASSIFICATION	3.6022484005850527E-7	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999942166617417	WITHOUT_CLASSIFICATION	5.783338258247077E-6	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.999999319423668	WITHOUT_CLASSIFICATION	6.805763320431792E-7	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999973169993888	WITHOUT_CLASSIFICATION	2.6830006112164014E-6	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.99999426442214	WITHOUT_CLASSIFICATION	5.735577859976609E-6	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999737048312377	WITHOUT_CLASSIFICATION	2.6295168762374272E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999893471528	WITHOUT_CLASSIFICATION	1.065284722612134E-8	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999932150391447	WITHOUT_CLASSIFICATION	6.784960855327972E-6	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999990790495	WITHOUT_CLASSIFICATION	9.209504959035712E-10	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999995002864113	WITHOUT_CLASSIFICATION	4.997135887897555E-7	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999893471528	WITHOUT_CLASSIFICATION	1.065284722612134E-8	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999995903171534	WITHOUT_CLASSIFICATION	4.096828466875758E-7	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999990426804101	WITHOUT_CLASSIFICATION	9.573195898982279E-6	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999883210247	WITHOUT_CLASSIFICATION	1.167897529413425E-7	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999999579390082	WITHOUT_CLASSIFICATION	4.206099189670483E-8	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999986733547	WITHOUT_CLASSIFICATION	1.3266452842365338E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998461667352	WITHOUT_CLASSIFICATION	1.5383326477692006E-7	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999787034173739	WITHOUT_CLASSIFICATION	2.129658262598598E-5	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999028276501	WITHOUT_CLASSIFICATION	9.717234991174266E-8	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999987108744	WITHOUT_CLASSIFICATION	1.2891255497607207E-9	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999858725654356	WITHOUT_CLASSIFICATION	1.4127434564374101E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999271369618884	WITHOUT_CLASSIFICATION	7.286303811153638E-5	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999989857423	WITHOUT_CLASSIFICATION	1.0142577570082485E-9	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999158600417	WITHOUT_CLASSIFICATION	8.41399583895472E-8	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999968536510631	WITHOUT_CLASSIFICATION	3.1463489370716397E-6	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998989371735485	WITHOUT_CLASSIFICATION	1.0106282645144455E-4	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999997681455735	WITHOUT_CLASSIFICATION	2.318544265406964E-7	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999995810765	WITHOUT_CLASSIFICATION	4.189234956429722E-9	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.997251786345194	WITHOUT_CLASSIFICATION	0.0027482136548060325	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9995831000891071	WITHOUT_CLASSIFICATION	4.1689991089287386E-4	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999809205160485	WITHOUT_CLASSIFICATION	1.9079483951555613E-5	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999962026332757	WITHOUT_CLASSIFICATION	3.79736672421125E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999962909273132	WITHOUT_CLASSIFICATION	3.7090726867284623E-6	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999607433267304	WITHOUT_CLASSIFICATION	3.9256673269679664E-5	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999881958186417	WITHOUT_CLASSIFICATION	1.1804181358217629E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998480332276	WITHOUT_CLASSIFICATION	1.519667724507354E-7	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999336234113372	WITHOUT_CLASSIFICATION	6.637658866290374E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999816633232	WITHOUT_CLASSIFICATION	1.8336676913791796E-8	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999967140465486	WITHOUT_CLASSIFICATION	3.2859534515076817E-6	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999995944753508	WITHOUT_CLASSIFICATION	4.055246490744252E-7	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999962156451925	WITHOUT_CLASSIFICATION	3.784354807515878E-6	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999989400515811	WITHOUT_CLASSIFICATION	1.0599484190192547E-6	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999997255601157	WITHOUT_CLASSIFICATION	2.744398843120916E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999178481572969	WITHOUT_CLASSIFICATION	8.215184270305738E-5	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999722410582	WITHOUT_CLASSIFICATION	2.775894178378073E-8	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997260700649	WITHOUT_CLASSIFICATION	2.739299350909826E-7	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998970309174	WITHOUT_CLASSIFICATION	1.0296908257098013E-7	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999997653947	WITHOUT_CLASSIFICATION	2.346053647008584E-10	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999961196163	WITHOUT_CLASSIFICATION	3.8803836747887705E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999048596961	WITHOUT_CLASSIFICATION	9.514030387719401E-8	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999839589632821	WITHOUT_CLASSIFICATION	1.604103671787986E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999994972149643	WITHOUT_CLASSIFICATION	5.027850357941963E-7	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.999999976502597	WITHOUT_CLASSIFICATION	2.3497402904419427E-8	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999923519291447	WITHOUT_CLASSIFICATION	7.64807085537901E-6	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999621541987	WITHOUT_CLASSIFICATION	3.784580130278634E-8	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999559446769	WITHOUT_CLASSIFICATION	4.405532308181894E-8	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999995194584254	WITHOUT_CLASSIFICATION	4.805415745463079E-7	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999998522615076	WITHOUT_CLASSIFICATION	1.4773849239979025E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999985984999774	WITHOUT_CLASSIFICATION	1.4015000226087665E-5	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999999843161789	WITHOUT_CLASSIFICATION	1.5683821139151068E-8	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999999689162773	WITHOUT_CLASSIFICATION	3.108372274721938E-8	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900565784751	WITHOUT_CLASSIFICATION	9.94342152496577E-6	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997374060049	WITHOUT_CLASSIFICATION	2.6259399515085044E-7	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999645769472	WITHOUT_CLASSIFICATION	3.5423052880957393E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999990952333	WITHOUT_CLASSIFICATION	9.04766725664666E-10	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999864157946	WITHOUT_CLASSIFICATION	1.358420534735234E-8	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999986916304983	WITHOUT_CLASSIFICATION	1.3083695017873358E-6	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999972750532032	WITHOUT_CLASSIFICATION	2.7249467967350983E-6	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999999189397794	WITHOUT_CLASSIFICATION	8.106022060755609E-7	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999985677306095	WITHOUT_CLASSIFICATION	1.4322693905530293E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999785120034	WITHOUT_CLASSIFICATION	2.1487996614141495E-8	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999974644147227	WITHOUT_CLASSIFICATION	2.5355852773435195E-6	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999969962531885	WITHOUT_CLASSIFICATION	3.003746811496067E-6	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.999976988933752	WITHOUT_CLASSIFICATION	2.3011066248029507E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999999999999001	WITHOUT_CLASSIFICATION	9.989692483669101E-13	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999998973428152	WITHOUT_CLASSIFICATION	1.0265718478576141E-7	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999996119303575	WITHOUT_CLASSIFICATION	3.8806964252514484E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900565784751	WITHOUT_CLASSIFICATION	9.94342152496577E-6	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999979613377887	WITHOUT_CLASSIFICATION	2.0386622113516613E-6	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999921026552853	WITHOUT_CLASSIFICATION	7.897344714673343E-6	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999999383852	WITHOUT_CLASSIFICATION	6.161479476786171E-10	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999999841423584	WITHOUT_CLASSIFICATION	1.5857641619711314E-8	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999830606819758	WITHOUT_CLASSIFICATION	1.693931802422046E-5	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999998975823806	WITHOUT_CLASSIFICATION	1.0241761938213099E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999932150391447	WITHOUT_CLASSIFICATION	6.784960855327972E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999920344914777	WITHOUT_CLASSIFICATION	7.965508522366097E-6	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999997260700649	WITHOUT_CLASSIFICATION	2.739299350909826E-7	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9997263686215624	WITHOUT_CLASSIFICATION	2.7363137843751476E-4	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999984755623035	WITHOUT_CLASSIFICATION	1.524437696499448E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999948261903	WITHOUT_CLASSIFICATION	5.17380967278349E-9	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999980759906	WITHOUT_CLASSIFICATION	1.924009389167356E-8	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999968695954691	WITHOUT_CLASSIFICATION	3.1304045309003027E-6	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999939689887082	WITHOUT_CLASSIFICATION	6.031011291819274E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999997561746959	WITHOUT_CLASSIFICATION	2.4382530406425173E-7	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998414221402	WITHOUT_CLASSIFICATION	1.585778598090254E-7	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999999482654419	WITHOUT_CLASSIFICATION	5.1734558150802634E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999994909649	WITHOUT_CLASSIFICATION	5.090351832686551E-10	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999854943247648	WITHOUT_CLASSIFICATION	1.4505675235237198E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999822811092532	WITHOUT_CLASSIFICATION	1.7718890746821276E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999758255828	WITHOUT_CLASSIFICATION	2.417441729846934E-8	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999758255828	WITHOUT_CLASSIFICATION	2.417441729846934E-8	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999999992137376	WITHOUT_CLASSIFICATION	7.862624039309039E-9	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999907309048353	WITHOUT_CLASSIFICATION	9.269095164792574E-6	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999950652427	WITHOUT_CLASSIFICATION	4.93475730245636E-9	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999919118266	WITHOUT_CLASSIFICATION	8.08817336173656E-9	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999997373128517	WITHOUT_CLASSIFICATION	2.6268714831387516E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999997959973824	WITHOUT_CLASSIFICATION	2.0400261757865047E-7	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999994696057	WITHOUT_CLASSIFICATION	5.303941702551935E-10	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999998728655392	WITHOUT_CLASSIFICATION	1.2713446088901373E-7	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999934876763	WITHOUT_CLASSIFICATION	6.512323635156563E-9	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999992719821804	WITHOUT_CLASSIFICATION	7.280178195409489E-7	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.999942685869185	WITHOUT_CLASSIFICATION	5.731413081491908E-5	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9999936045533302	WITHOUT_CLASSIFICATION	6.395446669746886E-6	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999932841935268	WITHOUT_CLASSIFICATION	6.71580647312744E-6	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999298085	WITHOUT_CLASSIFICATION	7.019150885959563E-11	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999629312364552	WITHOUT_CLASSIFICATION	3.7068763544907224E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999947597047	WITHOUT_CLASSIFICATION	5.2402952816109726E-9	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999993456961626	WITHOUT_CLASSIFICATION	6.543038374306173E-7	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999999093468652	WITHOUT_CLASSIFICATION	9.065313473107793E-8	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999982707517	WITHOUT_CLASSIFICATION	1.7292482932010947E-8	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999996970400957	WITHOUT_CLASSIFICATION	3.0295990416874503E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999999999646331	WITHOUT_CLASSIFICATION	3.536690156745717E-10	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999998833238044	WITHOUT_CLASSIFICATION	1.1667619560661939E-7	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999893724407	WITHOUT_CLASSIFICATION	1.0627559241295033E-8	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999995116811571	WITHOUT_CLASSIFICATION	4.883188429324773E-7	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9999009552870128	WITHOUT_CLASSIFICATION	9.904471298719231E-5	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9996906035113386	WITHOUT_CLASSIFICATION	3.0939648866140044E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762878653415	WITHOUT_CLASSIFICATION	2.3712134658417405E-5	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999993470004913	WITHOUT_CLASSIFICATION	6.529995086464447E-7	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999915008405	WITHOUT_CLASSIFICATION	8.499159475659863E-9	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999529837114	WITHOUT_CLASSIFICATION	4.701628874611838E-8	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999336313256	WITHOUT_CLASSIFICATION	6.636867438148664E-8	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999997594451906	WITHOUT_CLASSIFICATION	2.405548093944506E-7	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999999994786432	WITHOUT_CLASSIFICATION	5.213567947098099E-9	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999923485285312	WITHOUT_CLASSIFICATION	7.651471468779983E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9978476603847466	WITHOUT_CLASSIFICATION	0.0021523396152534073	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999987261042949	WITHOUT_CLASSIFICATION	1.2738957051643682E-6	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999861233552	WITHOUT_CLASSIFICATION	1.3876644722597957E-8	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999998530944238	WITHOUT_CLASSIFICATION	1.4690557620720282E-6	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997527790084071	WITHOUT_CLASSIFICATION	2.4722099159295795E-4	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999904419527532	WITHOUT_CLASSIFICATION	9.55804724676719E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999990888992631	WITHOUT_CLASSIFICATION	9.11100736835402E-7	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987260947698916	WITHOUT_CLASSIFICATION	0.0012739052301084404	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996872646312	WITHOUT_CLASSIFICATION	3.1273536884464284E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999999957432186	WITHOUT_CLASSIFICATION	4.256781411645039E-8	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999488425494	WITHOUT_CLASSIFICATION	5.115745064280243E-8	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999998638739421	WITHOUT_CLASSIFICATION	1.3612605790047994E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974474906176606	WITHOUT_CLASSIFICATION	0.0025525093823394835	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9785014147153785	WITHOUT_CLASSIFICATION	0.021498585284621383	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999541060776	WITHOUT_CLASSIFICATION	4.589392238935615E-7	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999369923755153	WITHOUT_CLASSIFICATION	6.300762448469388E-5	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999788623724596	WITHOUT_CLASSIFICATION	2.1137627540390232E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999669046896624	WITHOUT_CLASSIFICATION	3.3095310337513555E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999879523162553	WITHOUT_CLASSIFICATION	1.2047683744704808E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999948144613	WITHOUT_CLASSIFICATION	5.185538717667371E-9	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999991133135393	WITHOUT_CLASSIFICATION	8.866864607033678E-7	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.999991506405477	WITHOUT_CLASSIFICATION	8.49359452316836E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999976765218804	WITHOUT_CLASSIFICATION	2.3234781194573247E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999521294666	WITHOUT_CLASSIFICATION	4.7870533336183955E-8	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.999998815113763	WITHOUT_CLASSIFICATION	1.1848862370578636E-6	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.999998527987849	WITHOUT_CLASSIFICATION	1.4720121509772743E-6	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.999999351574691	WITHOUT_CLASSIFICATION	6.484253089294736E-7	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999998852872501	WITHOUT_CLASSIFICATION	1.1471274989331248E-7	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999979296565	WITHOUT_CLASSIFICATION	2.0703434761132077E-9	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999776774964779	WITHOUT_CLASSIFICATION	2.232250352213516E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999845137774052	WITHOUT_CLASSIFICATION	1.548622259483439E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999985093714774	WITHOUT_CLASSIFICATION	1.4906285226773052E-6	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.999999999603829	WITHOUT_CLASSIFICATION	3.9617107033849725E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999983617178592	WITHOUT_CLASSIFICATION	1.6382821408553488E-6	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999931367934469	WITHOUT_CLASSIFICATION	6.863206553034951E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999881537914984	WITHOUT_CLASSIFICATION	1.184620850156105E-5	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999973429561373	WITHOUT_CLASSIFICATION	2.657043862658435E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999881537914984	WITHOUT_CLASSIFICATION	1.184620850156105E-5	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999999724037	WITHOUT_CLASSIFICATION	2.7596177257951573E-11	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999998821922202	WITHOUT_CLASSIFICATION	1.1780777977574502E-7	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999219452059035	WITHOUT_CLASSIFICATION	7.805479409647099E-5	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999935125241118	WITHOUT_CLASSIFICATION	6.487475888109008E-6	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999998955695799	WITHOUT_CLASSIFICATION	1.0443042013662303E-7	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999866619949701	WITHOUT_CLASSIFICATION	1.3338005029851964E-5	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999976898601	WITHOUT_CLASSIFICATION	2.3101398004319653E-9	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999999921102249	WITHOUT_CLASSIFICATION	7.889775104509068E-8	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999999349485713	WITHOUT_CLASSIFICATION	6.505142876149671E-8	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999486409646	WITHOUT_CLASSIFICATION	5.135903536514508E-8	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998765257202	WITHOUT_CLASSIFICATION	1.2347427976720493E-7	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999994557514701	WITHOUT_CLASSIFICATION	5.442485298849189E-7	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999832615686	WITHOUT_CLASSIFICATION	1.673843143432628E-8	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999595165278815	WITHOUT_CLASSIFICATION	4.048347211853893E-5	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999804396428273	WITHOUT_CLASSIFICATION	1.9560357172556257E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999982992769348	WITHOUT_CLASSIFICATION	1.7007230651445637E-6	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999986169027011	WITHOUT_CLASSIFICATION	1.383097298905529E-6	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999982614478	WITHOUT_CLASSIFICATION	1.7385522769493124E-9	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999986929847	WITHOUT_CLASSIFICATION	1.3070153590546317E-9	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999999894173768	WITHOUT_CLASSIFICATION	1.0582623203910754E-7	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999789036441	WITHOUT_CLASSIFICATION	2.109635587090989E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999966323669346	WITHOUT_CLASSIFICATION	3.3676330653420172E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998076796179747	WITHOUT_CLASSIFICATION	1.9232038202536217E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999780315980462	WITHOUT_CLASSIFICATION	2.196840195380287E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999970579320846	WITHOUT_CLASSIFICATION	2.9420679153642626E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999975126376	WITHOUT_CLASSIFICATION	2.4873624304293682E-9	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999982402815287	WITHOUT_CLASSIFICATION	1.759718471282171E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999977673676193	WITHOUT_CLASSIFICATION	2.2326323808489927E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998831045022	WITHOUT_CLASSIFICATION	1.1689549781027371E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999992442785332	WITHOUT_CLASSIFICATION	7.557214668893166E-7	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.999999573543135	WITHOUT_CLASSIFICATION	4.2645686511119825E-7	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999865085552381	WITHOUT_CLASSIFICATION	1.349144476186767E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999999680381	WITHOUT_CLASSIFICATION	3.1961902522507334E-11	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999934218471742	WITHOUT_CLASSIFICATION	6.578152825741174E-6	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999830016067164	WITHOUT_CLASSIFICATION	1.699839328358348E-5	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999984146545804	WITHOUT_CLASSIFICATION	1.5853454196351832E-6	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999995566048375	WITHOUT_CLASSIFICATION	4.433951624710009E-7	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999288664279	WITHOUT_CLASSIFICATION	7.113357211467427E-8	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999975562279927	WITHOUT_CLASSIFICATION	2.4437720073499813E-6	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999842852828	WITHOUT_CLASSIFICATION	1.5714717201577855E-8	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999999453388235	WITHOUT_CLASSIFICATION	5.466117646526099E-8	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.999988975296204	WITHOUT_CLASSIFICATION	1.1024703796094745E-5	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999976198207503	WITHOUT_CLASSIFICATION	2.380179249712543E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999975126376	WITHOUT_CLASSIFICATION	2.4873624304293682E-9	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999986625425951	WITHOUT_CLASSIFICATION	1.3374574049128778E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999995625544651	WITHOUT_CLASSIFICATION	4.374455348843388E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999854592658726	WITHOUT_CLASSIFICATION	1.4540734127371159E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999997907303	WITHOUT_CLASSIFICATION	2.0926971195773475E-9	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999993844848196	WITHOUT_CLASSIFICATION	6.155151804438982E-7	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999425796245	WITHOUT_CLASSIFICATION	5.7420375544542544E-8	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999989066303736	WITHOUT_CLASSIFICATION	1.0933696264033198E-5	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999800022389355	WITHOUT_CLASSIFICATION	1.999776106453549E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.99999710044185	WITHOUT_CLASSIFICATION	2.8995581500211383E-6	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999189457143	WITHOUT_CLASSIFICATION	8.105428566734178E-8	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9999678353912904	WITHOUT_CLASSIFICATION	3.216460870964992E-5	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999971078465	WITHOUT_CLASSIFICATION	2.8921535550015162E-9	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999990216900198	WITHOUT_CLASSIFICATION	9.783099802124374E-7	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999972844618239	WITHOUT_CLASSIFICATION	2.7155381761143775E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999931187029	WITHOUT_CLASSIFICATION	6.8812970763336175E-9	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999989510757	WITHOUT_CLASSIFICATION	1.0489242997296115E-9	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998841949466	WITHOUT_CLASSIFICATION	1.1580505351644673E-7	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999298047477	WITHOUT_CLASSIFICATION	7.019525222337455E-8	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999870717663333	WITHOUT_CLASSIFICATION	1.2928233666760993E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999986625425951	WITHOUT_CLASSIFICATION	1.3374574049128778E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999993599444812	WITHOUT_CLASSIFICATION	6.400555188255118E-7	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997433639501	WITHOUT_CLASSIFICATION	2.56636049834843E-7	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999999250645487	WITHOUT_CLASSIFICATION	7.493545138305986E-8	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999319972437	WITHOUT_CLASSIFICATION	6.800275624917226E-8	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999999061486	WITHOUT_CLASSIFICATION	9.385145631288379E-11	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.924855094866095	WITHOUT_CLASSIFICATION	0.07514490513390498	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.924855094866095	WITHOUT_CLASSIFICATION	0.07514490513390498	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999942485502681	WITHOUT_CLASSIFICATION	5.7514497319157025E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.924855094866095	WITHOUT_CLASSIFICATION	0.07514490513390498	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.924855094866095	WITHOUT_CLASSIFICATION	0.07514490513390498	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999704732818946	WITHOUT_CLASSIFICATION	2.9526718105486765E-5	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999912267225	WITHOUT_CLASSIFICATION	8.773277504663074E-8	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999992003478596	WITHOUT_CLASSIFICATION	7.996521403794899E-7	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999899904519793	WITHOUT_CLASSIFICATION	1.0009548020690707E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999987393394498	WITHOUT_CLASSIFICATION	1.2606605501407014E-6	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999993647248553	WITHOUT_CLASSIFICATION	6.35275144625703E-7	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994902058163253	WITHOUT_CLASSIFICATION	5.097941836747209E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999900519033	WITHOUT_CLASSIFICATION	9.948096694630708E-9	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999839975903748	WITHOUT_CLASSIFICATION	1.600240962521419E-5	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999920553703437	WITHOUT_CLASSIFICATION	7.944629656242817E-6	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999969287548056	WITHOUT_CLASSIFICATION	3.0712451943365933E-6	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999984840403895	WITHOUT_CLASSIFICATION	1.5159596105162905E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999997885129854	WITHOUT_CLASSIFICATION	2.1148701466387858E-7	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999989147008882	WITHOUT_CLASSIFICATION	1.085299111778426E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999930404598	WITHOUT_CLASSIFICATION	6.959540158535694E-9	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999989880243015	WITHOUT_CLASSIFICATION	1.0119756984923643E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994094921383	WITHOUT_CLASSIFICATION	5.905078617168656E-7	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999996676824092	WITHOUT_CLASSIFICATION	3.323175908434819E-7	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999931201439795	WITHOUT_CLASSIFICATION	6.8798560205296125E-6	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999983846232179	WITHOUT_CLASSIFICATION	1.6153767820037973E-6	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999726501897823	WITHOUT_CLASSIFICATION	2.734981021763866E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999985909628459	WITHOUT_CLASSIFICATION	1.409037154059575E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999994094921383	WITHOUT_CLASSIFICATION	5.905078617168656E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999982402815287	WITHOUT_CLASSIFICATION	1.759718471282171E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999708745112914	WITHOUT_CLASSIFICATION	2.912548870859648E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999699798186	WITHOUT_CLASSIFICATION	3.0020181393143233E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999086684646	WITHOUT_CLASSIFICATION	9.13315354893504E-8	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.99999790310546	WITHOUT_CLASSIFICATION	2.096894540072318E-6	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999941369872821	WITHOUT_CLASSIFICATION	5.863012717801374E-6	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999994425958775	WITHOUT_CLASSIFICATION	5.574041225179528E-7	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9804821351253422	WITHOUT_CLASSIFICATION	0.019517864874657825	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999539833172872	WITHOUT_CLASSIFICATION	4.6016682712811246E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999987298538741	WITHOUT_CLASSIFICATION	1.2701461259786238E-6	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999664952386378	WITHOUT_CLASSIFICATION	3.350476136213181E-5	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999993481475	WITHOUT_CLASSIFICATION	6.518523782723706E-10	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999999096670434	WITHOUT_CLASSIFICATION	9.033295664261641E-8	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999995259779393	WITHOUT_CLASSIFICATION	4.7402206073397804E-7	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999996308269845	WITHOUT_CLASSIFICATION	3.691730155016492E-7	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999687255753	WITHOUT_CLASSIFICATION	3.127442466257459E-8	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.999998712707502	WITHOUT_CLASSIFICATION	1.2872924981432128E-6	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9990654040097582	WITHOUT_CLASSIFICATION	9.345959902418704E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999974476946	WITHOUT_CLASSIFICATION	2.55230534688246E-9	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999991024335285	WITHOUT_CLASSIFICATION	8.975664715737777E-7	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999998334236578	WITHOUT_CLASSIFICATION	1.6657634219288989E-6	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999842846237967	WITHOUT_CLASSIFICATION	1.571537620330584E-5	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999481563021	WITHOUT_CLASSIFICATION	5.184369796033903E-8	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999539833172872	WITHOUT_CLASSIFICATION	4.6016682712811246E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999997058197023	WITHOUT_CLASSIFICATION	2.941802976975943E-7	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999958289218437	WITHOUT_CLASSIFICATION	4.1710781563349665E-6	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999314640063357	WITHOUT_CLASSIFICATION	6.853599366436015E-5	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999988793922138	WITHOUT_CLASSIFICATION	1.1206077861347854E-6	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986362717406	WITHOUT_CLASSIFICATION	1.3637282593448535E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.999998928463185	WITHOUT_CLASSIFICATION	1.071536815022075E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999997781402172	WITHOUT_CLASSIFICATION	2.2185978281082836E-7	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999977788983638	WITHOUT_CLASSIFICATION	2.221101636133031E-6	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999996398342742	WITHOUT_CLASSIFICATION	3.601657258876573E-7	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999534985814947	WITHOUT_CLASSIFICATION	4.6501418505217515E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999962965577911	WITHOUT_CLASSIFICATION	3.703442208990151E-6	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999997661555963	WITHOUT_CLASSIFICATION	2.3384440371851946E-7	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999721184923562	WITHOUT_CLASSIFICATION	2.7881507643787076E-5	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999986614846	WITHOUT_CLASSIFICATION	1.338515384727587E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997841993807	WITHOUT_CLASSIFICATION	2.1580061926175468E-7	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999938468711	WITHOUT_CLASSIFICATION	6.153128924239157E-9	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999497790034	WITHOUT_CLASSIFICATION	5.022099650428034E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999962965577911	WITHOUT_CLASSIFICATION	3.703442208990151E-6	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999997719825	WITHOUT_CLASSIFICATION	2.2801757685388798E-10	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999998918527837	WITHOUT_CLASSIFICATION	1.0814721630602814E-7	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999970941457649	WITHOUT_CLASSIFICATION	2.9058542351771198E-6	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9993284812550702	WITHOUT_CLASSIFICATION	6.715187449297954E-4	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999988969624758	WITHOUT_CLASSIFICATION	1.1030375242165972E-6	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999957570460518	WITHOUT_CLASSIFICATION	4.2429539481930525E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997841993807	WITHOUT_CLASSIFICATION	2.1580061926175468E-7	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999985176879642	WITHOUT_CLASSIFICATION	1.4823120358377017E-6	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998867719903	WITHOUT_CLASSIFICATION	1.1322800970329067E-6	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994752258163	WITHOUT_CLASSIFICATION	5.247741836180703E-7	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99737003197227	WITHOUT_CLASSIFICATION	0.0026299680277299706	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9670455908206145	WITHOUT_CLASSIFICATION	0.03295440917938543	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971351890687019	WITHOUT_CLASSIFICATION	0.002864810931298099	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999983393459476	WITHOUT_CLASSIFICATION	1.6606540523890046E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999983393459476	WITHOUT_CLASSIFICATION	1.6606540523890046E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999939226689	WITHOUT_CLASSIFICATION	6.077331055011926E-9	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999977029848014	WITHOUT_CLASSIFICATION	2.2970151985308432E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999995017392477	WITHOUT_CLASSIFICATION	4.982607523837545E-7	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.999999478602724	WITHOUT_CLASSIFICATION	5.21397276050674E-7	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999589780024328	WITHOUT_CLASSIFICATION	4.102199756703759E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990467355625	WITHOUT_CLASSIFICATION	9.532644375642783E-7	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907571508698	WITHOUT_CLASSIFICATION	9.242849130197842E-6	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799228734045	WITHOUT_CLASSIFICATION	2.0077126595478652E-5	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999431863726	WITHOUT_CLASSIFICATION	5.681362731297312E-8	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994746819695	WITHOUT_CLASSIFICATION	5.253180305899094E-7	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990467355625	WITHOUT_CLASSIFICATION	9.532644375642783E-7	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907571508698	WITHOUT_CLASSIFICATION	9.242849130197842E-6	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999799228734045	WITHOUT_CLASSIFICATION	2.0077126595478652E-5	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999996291530198	WITHOUT_CLASSIFICATION	3.708469802036528E-7	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999932197420439	WITHOUT_CLASSIFICATION	6.780257956031387E-6	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999961358795	WITHOUT_CLASSIFICATION	3.8641205591509505E-9	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999998185385787	WITHOUT_CLASSIFICATION	1.8146142142666278E-7	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999758703212	WITHOUT_CLASSIFICATION	2.412967882263438E-8	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999893473957258	WITHOUT_CLASSIFICATION	1.065260427430031E-5	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999989704164292	WITHOUT_CLASSIFICATION	1.0295835708295836E-6	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999922054801617	WITHOUT_CLASSIFICATION	7.794519838444475E-6	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999968833204298	WITHOUT_CLASSIFICATION	3.116679570268913E-6	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999959344547266	WITHOUT_CLASSIFICATION	4.065545273510887E-6	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999894928259	WITHOUT_CLASSIFICATION	1.0507174062917442E-8	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999943037347763	WITHOUT_CLASSIFICATION	5.696265223785938E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999948521240211	WITHOUT_CLASSIFICATION	5.1478759789086285E-6	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999541226314	WITHOUT_CLASSIFICATION	4.587736852327387E-8	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999191719146	WITHOUT_CLASSIFICATION	8.08280854113131E-7	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999379095311	WITHOUT_CLASSIFICATION	6.209046881036512E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999984917147954	WITHOUT_CLASSIFICATION	1.5082852045842428E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999923399993194	WITHOUT_CLASSIFICATION	7.660000680684236E-6	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999974567714635	WITHOUT_CLASSIFICATION	2.543228536542708E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999914840328776	WITHOUT_CLASSIFICATION	8.515967122356046E-6	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999988814092	WITHOUT_CLASSIFICATION	1.1185906696138041E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999463686333088	WITHOUT_CLASSIFICATION	5.363136669118792E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999991323776586	WITHOUT_CLASSIFICATION	8.676223414985227E-7	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999742272680409	WITHOUT_CLASSIFICATION	2.5772731959218774E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999995516978	WITHOUT_CLASSIFICATION	4.4830212658702247E-10	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999342651339406	WITHOUT_CLASSIFICATION	6.573486605943023E-5	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996255624015	WITHOUT_CLASSIFICATION	3.744375984791537E-7	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953628325986	WITHOUT_CLASSIFICATION	4.6371674014011217E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999994790663	WITHOUT_CLASSIFICATION	5.209337562594714E-10	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970166751302	WITHOUT_CLASSIFICATION	2.983324869753027E-6	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689859532831	WITHOUT_CLASSIFICATION	3.10140467169358E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999540974724	WITHOUT_CLASSIFICATION	4.590252753182099E-8	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999999540974724	WITHOUT_CLASSIFICATION	4.590252753182099E-8	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999999089328	WITHOUT_CLASSIFICATION	9.10671148445288E-11	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999821461263	WITHOUT_CLASSIFICATION	1.785387380044181E-8	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999157638319371	WITHOUT_CLASSIFICATION	8.423616806279488E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999817465264175	WITHOUT_CLASSIFICATION	1.825347358248451E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999406417505973	WITHOUT_CLASSIFICATION	5.9358249402824635E-5	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999991079155	WITHOUT_CLASSIFICATION	8.920844827173502E-10	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999926715553545	WITHOUT_CLASSIFICATION	7.3284446454800695E-6	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999905327220233	WITHOUT_CLASSIFICATION	9.467277976718783E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999947510244194	WITHOUT_CLASSIFICATION	5.248975580623858E-6	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997820471354	WITHOUT_CLASSIFICATION	2.179528647224716E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999449664762	WITHOUT_CLASSIFICATION	5.503352380481864E-7	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996134207071	WITHOUT_CLASSIFICATION	3.8657929294173466E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993204892942	WITHOUT_CLASSIFICATION	6.795107057781206E-7	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999557795519	WITHOUT_CLASSIFICATION	4.422044816300492E-8	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993492421677	WITHOUT_CLASSIFICATION	6.507578323297209E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998794103907	WITHOUT_CLASSIFICATION	1.20589609299218E-7	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981364428466	WITHOUT_CLASSIFICATION	1.8635571534046729E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999107675232	WITHOUT_CLASSIFICATION	8.923247679464753E-7	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960662580779	WITHOUT_CLASSIFICATION	3.9337419220804E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997365605292	WITHOUT_CLASSIFICATION	2.634394708799441E-7	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999973730232602	WITHOUT_CLASSIFICATION	2.6269767398222183E-6	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999868341462941	WITHOUT_CLASSIFICATION	1.3165853705996668E-5	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999984045533292	WITHOUT_CLASSIFICATION	1.5954466708064678E-6	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999999620294272	WITHOUT_CLASSIFICATION	3.797057285821189E-8	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999122538482	WITHOUT_CLASSIFICATION	8.774615174556564E-8	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9996544359685028	WITHOUT_CLASSIFICATION	3.4556403149733114E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999995745097557	WITHOUT_CLASSIFICATION	4.2549024430209067E-7	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.996149832752794	WITHOUT_CLASSIFICATION	0.0038501672472061018	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999984045533292	WITHOUT_CLASSIFICATION	1.5954466708064678E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999984045533292	WITHOUT_CLASSIFICATION	1.5954466708064678E-6	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999329603090409	WITHOUT_CLASSIFICATION	6.703969095902072E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999985882007607	WITHOUT_CLASSIFICATION	1.4117992392677158E-6	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999993743336	WITHOUT_CLASSIFICATION	6.256663394212425E-10	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999936160814069	WITHOUT_CLASSIFICATION	6.38391859310018E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999850267726915	WITHOUT_CLASSIFICATION	1.4973227308545354E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999914840328776	WITHOUT_CLASSIFICATION	8.515967122356046E-6	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999015163771	WITHOUT_CLASSIFICATION	9.848362290520229E-8	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999764355435975	WITHOUT_CLASSIFICATION	2.3564456402600402E-5	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999046805005	WITHOUT_CLASSIFICATION	9.531949946716386E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999437427730163	WITHOUT_CLASSIFICATION	5.625722698366521E-5	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998099099926261	WITHOUT_CLASSIFICATION	1.9009000737383396E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893678378758	WITHOUT_CLASSIFICATION	1.0632162124114426E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999907311318122	WITHOUT_CLASSIFICATION	9.26886818769994E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999907311318122	WITHOUT_CLASSIFICATION	9.26886818769994E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999991538191237	WITHOUT_CLASSIFICATION	8.461808761994096E-7	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999991538191237	WITHOUT_CLASSIFICATION	8.461808761994096E-7	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989902729989167	WITHOUT_CLASSIFICATION	0.0010097270010833417	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998952006295	WITHOUT_CLASSIFICATION	1.0479937045639436E-7	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999223230046	WITHOUT_CLASSIFICATION	7.767699541822246E-8	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998884116487831	WITHOUT_CLASSIFICATION	1.1158835121690367E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9992566521573241	WITHOUT_CLASSIFICATION	7.433478426759835E-4	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999914452453743	WITHOUT_CLASSIFICATION	8.554754625786035E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937474775703	WITHOUT_CLASSIFICATION	6.252522429628134E-6	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998018630515	WITHOUT_CLASSIFICATION	1.9813694861188916E-7	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999999802641399	WITHOUT_CLASSIFICATION	1.9735860104409243E-7	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999839974183	WITHOUT_CLASSIFICATION	1.6002581690967974E-8	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999963962164	WITHOUT_CLASSIFICATION	3.603783492704369E-9	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999904731594772	WITHOUT_CLASSIFICATION	9.526840522829638E-6	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999890934414886	WITHOUT_CLASSIFICATION	1.090655851149319E-5	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997560184901	WITHOUT_CLASSIFICATION	2.439815098848635E-7	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999918861202917	WITHOUT_CLASSIFICATION	8.113879708338191E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999918861202917	WITHOUT_CLASSIFICATION	8.113879708338191E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999918861202917	WITHOUT_CLASSIFICATION	8.113879708338191E-6	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999998528065191	WITHOUT_CLASSIFICATION	1.4719348090513317E-6	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999968943688047	WITHOUT_CLASSIFICATION	3.1056311953115893E-6	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999999620192	WITHOUT_CLASSIFICATION	3.7980868954671974E-11	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999895846780178	WITHOUT_CLASSIFICATION	1.0415321982205237E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855653683603	WITHOUT_CLASSIFICATION	1.4434631639773335E-5	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999530364449142	WITHOUT_CLASSIFICATION	4.6963555085874954E-5	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999993376492295	WITHOUT_CLASSIFICATION	6.623507703534537E-7	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967928224524789	WITHOUT_CLASSIFICATION	0.003207177547521014	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9875373965840222	WITHOUT_CLASSIFICATION	0.012462603415977921	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999996915974952	WITHOUT_CLASSIFICATION	3.084025048187911E-7	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999989955405	WITHOUT_CLASSIFICATION	1.0044595456430026E-9	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9974782616219351	WITHOUT_CLASSIFICATION	0.0025217383780650375	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998663729381	WITHOUT_CLASSIFICATION	1.3362706190271396E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999849949468	WITHOUT_CLASSIFICATION	1.5005053107458188E-8	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9988400854355384	WITHOUT_CLASSIFICATION	0.001159914564461654	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999999362276861	WITHOUT_CLASSIFICATION	6.377231390398286E-8	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999645338137	WITHOUT_CLASSIFICATION	3.5466186302531814E-7	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999989686930387	WITHOUT_CLASSIFICATION	1.0313069613010094E-6	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999990097203082	WITHOUT_CLASSIFICATION	9.902796917393132E-7	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999988701843339	WITHOUT_CLASSIFICATION	1.1298156661406732E-6	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999942415	WITHOUT_CLASSIFICATION	5.7585356129834415E-12	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999995667048	WITHOUT_CLASSIFICATION	4.332951913109659E-9	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998334685545	WITHOUT_CLASSIFICATION	1.66531445579744E-7	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999978995389	WITHOUT_CLASSIFICATION	2.1004610980646492E-8	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999938137809571	WITHOUT_CLASSIFICATION	6.18621904292583E-6	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999975932273539	WITHOUT_CLASSIFICATION	2.406772646139494E-6	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999999931623983	WITHOUT_CLASSIFICATION	6.837601694843231E-8	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999997145470783	WITHOUT_CLASSIFICATION	2.8545292169177256E-7	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999693064	WITHOUT_CLASSIFICATION	3.069360721679849E-11	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999980690115402	WITHOUT_CLASSIFICATION	1.9309884597996283E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999723606	WITHOUT_CLASSIFICATION	2.7639457731184358E-11	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999997737970332	WITHOUT_CLASSIFICATION	2.2620296676038898E-7	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999997103749086	WITHOUT_CLASSIFICATION	2.896250912912715E-7	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9988621229681018	WITHOUT_CLASSIFICATION	0.001137877031898123	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999710544688	WITHOUT_CLASSIFICATION	2.894553129260435E-8	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999999699974201	WITHOUT_CLASSIFICATION	3.000257992701881E-8	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999318266292	WITHOUT_CLASSIFICATION	6.817337092257725E-8	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999668569620757	WITHOUT_CLASSIFICATION	3.31430379243215E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999273740952	WITHOUT_CLASSIFICATION	7.26259048477888E-8	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999682215807393	WITHOUT_CLASSIFICATION	3.1778419260786346E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999999887478579	WITHOUT_CLASSIFICATION	1.125214205919914E-8	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999998483715425	WITHOUT_CLASSIFICATION	1.516284575094926E-6	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9851514217640228	WITHOUT_CLASSIFICATION	0.014848578235977178	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999947135567386	WITHOUT_CLASSIFICATION	5.2864432613854525E-6	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999995051262	WITHOUT_CLASSIFICATION	4.94873728444707E-10	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999995220011965	WITHOUT_CLASSIFICATION	4.779988035134086E-7	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999696565731	WITHOUT_CLASSIFICATION	3.034342684199907E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999998797629972	WITHOUT_CLASSIFICATION	1.2023700282165666E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999757984383576	WITHOUT_CLASSIFICATION	2.420156164236336E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999998872937182	WITHOUT_CLASSIFICATION	1.1270628163110627E-7	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999994420018926	WITHOUT_CLASSIFICATION	5.579981073446991E-7	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998596747386967	WITHOUT_CLASSIFICATION	1.403252613032801E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996208570968017	WITHOUT_CLASSIFICATION	3.791429031982556E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999857734050355	WITHOUT_CLASSIFICATION	1.42265949645359E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999987725734302	WITHOUT_CLASSIFICATION	1.227426569809586E-5	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999971971244874	WITHOUT_CLASSIFICATION	2.802875512473038E-6	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9996692037979098	WITHOUT_CLASSIFICATION	3.307962020902143E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999998029194612	WITHOUT_CLASSIFICATION	1.9708053885548677E-7	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999547149105	WITHOUT_CLASSIFICATION	4.52850894137496E-8	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9998968142457528	WITHOUT_CLASSIFICATION	1.0318575424710128E-4	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999999980477607	WITHOUT_CLASSIFICATION	1.9522392967246404E-8	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999971259894	WITHOUT_CLASSIFICATION	2.874010686034047E-9	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999995251384	WITHOUT_CLASSIFICATION	4.748616497036163E-10	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999933257551	WITHOUT_CLASSIFICATION	6.674244959760163E-9	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999935601617	WITHOUT_CLASSIFICATION	6.439838352815079E-9	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999961097568	WITHOUT_CLASSIFICATION	3.890243268983826E-9	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999962571834	WITHOUT_CLASSIFICATION	3.7428165866850915E-9	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999916242731	WITHOUT_CLASSIFICATION	8.375726895400759E-8	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999888225137358	WITHOUT_CLASSIFICATION	1.1177486264138542E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999888225137358	WITHOUT_CLASSIFICATION	1.1177486264138542E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998420944577	WITHOUT_CLASSIFICATION	1.579055422939279E-7	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999618914575	WITHOUT_CLASSIFICATION	3.8108542569162876E-8	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999999690395938	WITHOUT_CLASSIFICATION	3.096040621080392E-7	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999994209106708	WITHOUT_CLASSIFICATION	5.790893292610344E-7	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999997131154679	WITHOUT_CLASSIFICATION	2.868845320749222E-7	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999687629972617	WITHOUT_CLASSIFICATION	3.1237002738209574E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999962889499	WITHOUT_CLASSIFICATION	3.711050014456715E-9	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999801972463	WITHOUT_CLASSIFICATION	1.9802753658933756E-8	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999937945372571	WITHOUT_CLASSIFICATION	6.20546274286914E-6	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999999869165382	WITHOUT_CLASSIFICATION	1.308346178191234E-8	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999994154474847	WITHOUT_CLASSIFICATION	5.845525153679845E-7	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999377728424	WITHOUT_CLASSIFICATION	6.222715767398198E-8	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999999245498592	WITHOUT_CLASSIFICATION	7.545014075137799E-8	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999958551558	WITHOUT_CLASSIFICATION	4.144844230628788E-9	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999995521048908	WITHOUT_CLASSIFICATION	4.478951091605348E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9791225190122381	WITHOUT_CLASSIFICATION	0.020877480987761838	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999988705342137	WITHOUT_CLASSIFICATION	1.1294657862885684E-6	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9792285996805946	WITHOUT_CLASSIFICATION	0.020771400319405445	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9778448325045257	WITHOUT_CLASSIFICATION	0.022155167495474307	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999981471370405	WITHOUT_CLASSIFICATION	1.8528629595989572E-6	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999993838285509	WITHOUT_CLASSIFICATION	6.161714491942133E-7	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999996344326822	WITHOUT_CLASSIFICATION	3.655673176822204E-7	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999995018218257	WITHOUT_CLASSIFICATION	4.981781742360028E-7	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9992761618008897	WITHOUT_CLASSIFICATION	7.238381991103391E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999591950637	WITHOUT_CLASSIFICATION	4.080493630608746E-8	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999951464832774	WITHOUT_CLASSIFICATION	4.853516722646181E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999946753161675	WITHOUT_CLASSIFICATION	5.324683832549696E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999497915271	WITHOUT_CLASSIFICATION	5.0208472855048526E-8	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999984401689097	WITHOUT_CLASSIFICATION	1.5598310903363964E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999974133517832	WITHOUT_CLASSIFICATION	2.5866482169162422E-6	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999997848763672	WITHOUT_CLASSIFICATION	2.1512363278194816E-7	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999776138704558	WITHOUT_CLASSIFICATION	2.2386129544081847E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999996961030911	WITHOUT_CLASSIFICATION	3.038969088456035E-7	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999956858579018	WITHOUT_CLASSIFICATION	4.314142098233394E-6	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998545469052836	WITHOUT_CLASSIFICATION	1.454530947164024E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998545469052836	WITHOUT_CLASSIFICATION	1.454530947164024E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991607259193	WITHOUT_CLASSIFICATION	8.3927408076359E-7	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999959097337733	WITHOUT_CLASSIFICATION	4.0902662267247135E-6	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999759135848	WITHOUT_CLASSIFICATION	2.408641515575974E-8	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999752827117392	WITHOUT_CLASSIFICATION	2.4717288260805346E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999959386394	WITHOUT_CLASSIFICATION	4.0613605878252215E-9	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999834887194	WITHOUT_CLASSIFICATION	1.6511280525276148E-8	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999994497146203	WITHOUT_CLASSIFICATION	5.502853796012173E-7	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999995827836496	WITHOUT_CLASSIFICATION	4.172163502758057E-7	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999999472133104	WITHOUT_CLASSIFICATION	5.27866896227798E-8	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999998562538328	WITHOUT_CLASSIFICATION	1.4374616720825015E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997743417117	WITHOUT_CLASSIFICATION	2.256582882840155E-7	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999966795644943	WITHOUT_CLASSIFICATION	3.3204355056070744E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.99995783267621	WITHOUT_CLASSIFICATION	4.21673237899734E-5	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999999997206928	WITHOUT_CLASSIFICATION	2.7930718898796734E-9	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999788997533383	WITHOUT_CLASSIFICATION	2.1100246661775496E-5	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999989679256959	WITHOUT_CLASSIFICATION	1.032074304166179E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995718118337872	WITHOUT_CLASSIFICATION	4.281881662128627E-4	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995718118337872	WITHOUT_CLASSIFICATION	4.281881662128627E-4	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999998959691122	WITHOUT_CLASSIFICATION	1.0403088779175192E-7	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999998156381413	WITHOUT_CLASSIFICATION	1.843618585993194E-7	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999948166090852	WITHOUT_CLASSIFICATION	5.183390914794622E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999690220621	WITHOUT_CLASSIFICATION	3.097793788026843E-8	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999997303143704	WITHOUT_CLASSIFICATION	2.696856295279562E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999060281260154	WITHOUT_CLASSIFICATION	9.3971873984675E-5	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999655079973	WITHOUT_CLASSIFICATION	3.44920027088313E-8	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999726179639	WITHOUT_CLASSIFICATION	2.7382036056629782E-8	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999952340527	WITHOUT_CLASSIFICATION	4.765947296070079E-9	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999995991925213	WITHOUT_CLASSIFICATION	4.008074785748205E-7	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999995991925213	WITHOUT_CLASSIFICATION	4.008074785748205E-7	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999873557745624	WITHOUT_CLASSIFICATION	1.2644225437517872E-5	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999999343441184	WITHOUT_CLASSIFICATION	6.56558815915721E-8	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999958682397765	WITHOUT_CLASSIFICATION	4.131760223593584E-6	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999999332500955	WITHOUT_CLASSIFICATION	6.674990449614445E-7	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999985569219408	WITHOUT_CLASSIFICATION	1.4430780591977461E-6	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999999168481	WITHOUT_CLASSIFICATION	8.315183404191084E-11	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.999998583886735	WITHOUT_CLASSIFICATION	1.4161132650838809E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999809987976191	WITHOUT_CLASSIFICATION	1.9001202380820134E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999759648414583	WITHOUT_CLASSIFICATION	2.4035158541634003E-5	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997703013843819	WITHOUT_CLASSIFICATION	2.296986156182008E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999982828573778	WITHOUT_CLASSIFICATION	1.7171426222314713E-6	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999975114694224	WITHOUT_CLASSIFICATION	2.4885305775565255E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999090691902546	WITHOUT_CLASSIFICATION	9.0930809745519E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999971576314309	WITHOUT_CLASSIFICATION	2.8423685690858835E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999971718572327	WITHOUT_CLASSIFICATION	2.828142767261219E-6	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999997056496654	WITHOUT_CLASSIFICATION	2.9435033454559884E-7	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999999529837114	WITHOUT_CLASSIFICATION	4.701628874611838E-8	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999959091266	WITHOUT_CLASSIFICATION	4.090873443528719E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999942478335	WITHOUT_CLASSIFICATION	5.752166463858915E-9	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999989315437825	WITHOUT_CLASSIFICATION	1.0684562174595153E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999988093773923	WITHOUT_CLASSIFICATION	1.190622607804561E-6	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997618144776116	WITHOUT_CLASSIFICATION	2.3818552238843017E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999992622325182	WITHOUT_CLASSIFICATION	7.377674818234102E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999991094860099	WITHOUT_CLASSIFICATION	8.905139900822058E-7	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996495332122	WITHOUT_CLASSIFICATION	3.5046678781293117E-7	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999992750665445	WITHOUT_CLASSIFICATION	7.249334554350163E-7	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999994203342837	WITHOUT_CLASSIFICATION	5.796657163333577E-7	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999031681475108	WITHOUT_CLASSIFICATION	9.683185248920126E-5	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996761863229319	WITHOUT_CLASSIFICATION	3.238136770681663E-4	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999941671831412	WITHOUT_CLASSIFICATION	5.832816858932398E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999391288218197	WITHOUT_CLASSIFICATION	6.087117818033782E-5	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999676908508	WITHOUT_CLASSIFICATION	3.230914931419705E-8	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9998841523706186	WITHOUT_CLASSIFICATION	1.1584762938137412E-4	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999999903441925	WITHOUT_CLASSIFICATION	9.65580751154319E-9	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999993954253414	WITHOUT_CLASSIFICATION	6.045746586224491E-7	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.999999530354437	WITHOUT_CLASSIFICATION	4.696455628994309E-7	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999973596485408	WITHOUT_CLASSIFICATION	2.6403514591702383E-6	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999986005443083	WITHOUT_CLASSIFICATION	1.3994556917023699E-6	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999017897522	WITHOUT_CLASSIFICATION	9.821024783135995E-8	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999999017897522	WITHOUT_CLASSIFICATION	9.821024783135995E-8	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999549188262	WITHOUT_CLASSIFICATION	4.5081173870260375E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999942004524	WITHOUT_CLASSIFICATION	5.799547608210118E-8	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998682580622	WITHOUT_CLASSIFICATION	1.3174193788069324E-7	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999902738823369	WITHOUT_CLASSIFICATION	9.726117663202293E-6	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999391440473234	WITHOUT_CLASSIFICATION	6.085595267648124E-5	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999999999995207	WITHOUT_CLASSIFICATION	4.793043782574443E-12	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999933004	WITHOUT_CLASSIFICATION	6.699632181117914E-12	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999899488534666	WITHOUT_CLASSIFICATION	1.0051146533351292E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999549188262	WITHOUT_CLASSIFICATION	4.5081173870260375E-8	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999942004524	WITHOUT_CLASSIFICATION	5.799547608210118E-8	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999994481215596	WITHOUT_CLASSIFICATION	5.518784404602323E-7	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999169663215218	WITHOUT_CLASSIFICATION	8.30336784781473E-5	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999676253178	WITHOUT_CLASSIFICATION	3.237468207293431E-8	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9996652266506612	WITHOUT_CLASSIFICATION	3.347733493388433E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997562709829	WITHOUT_CLASSIFICATION	2.4372901703117257E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999997732499183	WITHOUT_CLASSIFICATION	2.267500817519115E-7	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999941833616448	WITHOUT_CLASSIFICATION	5.816638355164524E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999833315856226	WITHOUT_CLASSIFICATION	1.6668414377376156E-5	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999933262973948	WITHOUT_CLASSIFICATION	6.673702605142467E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9696643039106884	IMPLEMENTATION	0.030335696089311578	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999977653	WITHOUT_CLASSIFICATION	2.234555848083422E-12	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9696643039106884	IMPLEMENTATION	0.030335696089311578	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999969182801606	WITHOUT_CLASSIFICATION	3.0817198394189604E-6	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999997329794471	WITHOUT_CLASSIFICATION	2.67020552817102E-7	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999989548634314	WITHOUT_CLASSIFICATION	1.0451365686410655E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996168158323	WITHOUT_CLASSIFICATION	3.8318416779013615E-7	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999902657165826	WITHOUT_CLASSIFICATION	9.734283417315089E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999833315856226	WITHOUT_CLASSIFICATION	1.6668414377376156E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999833315856226	WITHOUT_CLASSIFICATION	1.6668414377376156E-5	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999577925301	WITHOUT_CLASSIFICATION	4.22074698940751E-8	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999999740586174	WITHOUT_CLASSIFICATION	2.594138263100012E-8	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999995851829032	WITHOUT_CLASSIFICATION	4.148170967851603E-7	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999991772113777	WITHOUT_CLASSIFICATION	8.227886222542302E-7	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999989829566793	WITHOUT_CLASSIFICATION	1.0170433206147164E-6	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999999452275791	WITHOUT_CLASSIFICATION	5.47724209350869E-8	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9989675483127513	WITHOUT_CLASSIFICATION	0.0010324516872488145	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999996894132003	WITHOUT_CLASSIFICATION	3.105867997333611E-7	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999685022644	WITHOUT_CLASSIFICATION	3.149773561524457E-8	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9999887876448484	WITHOUT_CLASSIFICATION	1.1212355151643392E-5	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999983106296427	WITHOUT_CLASSIFICATION	1.6893703572425288E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999999056013781	WITHOUT_CLASSIFICATION	9.439862193787306E-8	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999911461688484	WITHOUT_CLASSIFICATION	8.853831151535041E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999844039766186	WITHOUT_CLASSIFICATION	1.5596023381410595E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999998843967942	WITHOUT_CLASSIFICATION	1.1560320579898814E-7	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999987579255646	WITHOUT_CLASSIFICATION	1.2420744354131573E-5	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999985032287378	WITHOUT_CLASSIFICATION	1.4967712621384674E-6	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999963321030741	WITHOUT_CLASSIFICATION	3.6678969258035393E-6	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999927706102907	WITHOUT_CLASSIFICATION	7.229389709323596E-6	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999889327235	WITHOUT_CLASSIFICATION	1.1067276495367772E-8	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999966639278483	WITHOUT_CLASSIFICATION	3.3360721518563986E-6	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999726800295808	WITHOUT_CLASSIFICATION	2.7319970419168397E-5	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999459698171864	WITHOUT_CLASSIFICATION	5.403018281370961E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997713868030486	WITHOUT_CLASSIFICATION	2.2861319695142992E-4	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999971040521581	WITHOUT_CLASSIFICATION	2.8959478419079508E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999956641149965	WITHOUT_CLASSIFICATION	4.3358850034966915E-5	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999997957656062	WITHOUT_CLASSIFICATION	2.0423439377400632E-7	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999971253900082	WITHOUT_CLASSIFICATION	2.874609991777041E-6	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9951923022191024	WITHOUT_CLASSIFICATION	0.0048076977808977055	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9956136759532505	WITHOUT_CLASSIFICATION	0.004386324046749539	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.969290964062738	WITHOUT_CLASSIFICATION	0.030709035937261996	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.941795019577421	WITHOUT_CLASSIFICATION	0.05820498042257913	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998790115536272	WITHOUT_CLASSIFICATION	1.2098844637285844E-4	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999996894132003	WITHOUT_CLASSIFICATION	3.105867997333611E-7	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999954269877919	WITHOUT_CLASSIFICATION	4.573012208070823E-6	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.9999579754993703	WITHOUT_CLASSIFICATION	4.202450062972152E-5	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7966668385374049	WITHOUT_CLASSIFICATION	0.203333161462595	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999998181316074	WITHOUT_CLASSIFICATION	1.8186839253383705E-7	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.99964713626527	WITHOUT_CLASSIFICATION	3.5286373473000874E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999982101360634	WITHOUT_CLASSIFICATION	1.7898639365450952E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999991772113777	WITHOUT_CLASSIFICATION	8.227886222542302E-7	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999991772113777	WITHOUT_CLASSIFICATION	8.227886222542302E-7	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999078233079994	WITHOUT_CLASSIFICATION	9.217669200054364E-5	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999985074626205	WITHOUT_CLASSIFICATION	1.4925373794820796E-6	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999997045825987	WITHOUT_CLASSIFICATION	2.9541740131162107E-7	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999686026570085	WITHOUT_CLASSIFICATION	3.13973429915147E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999677712472457	WITHOUT_CLASSIFICATION	3.22287527543796E-5	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999997132409167	WITHOUT_CLASSIFICATION	2.867590832683619E-7	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999998406017385	WITHOUT_CLASSIFICATION	1.593982614459406E-7	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999624192663	WITHOUT_CLASSIFICATION	3.7580733672132563E-8	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999901822552	WITHOUT_CLASSIFICATION	9.817744760593369E-9	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999919820435678	WITHOUT_CLASSIFICATION	8.01795643227023E-6	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999635397718	WITHOUT_CLASSIFICATION	3.6460228120427144E-8	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999982059784563	WITHOUT_CLASSIFICATION	1.7940215436957632E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999907142070648	WITHOUT_CLASSIFICATION	9.285792935332242E-6	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999999549188262	WITHOUT_CLASSIFICATION	4.5081173870260375E-8	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999635397718	WITHOUT_CLASSIFICATION	3.6460228120427144E-8	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999997579449614	WITHOUT_CLASSIFICATION	2.4205503861392957E-7	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.998907313015206	WITHOUT_CLASSIFICATION	0.0010926869847940346	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999991876617992	WITHOUT_CLASSIFICATION	8.123382007584972E-7	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.978217592515435	IMPLEMENTATION	0.021782407484564947	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999907142070648	WITHOUT_CLASSIFICATION	9.285792935332242E-6	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999985333893091	WITHOUT_CLASSIFICATION	1.4666106908957548E-6	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999995109197866	WITHOUT_CLASSIFICATION	4.890802133358306E-7	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999959917593212	WITHOUT_CLASSIFICATION	4.00824067886939E-6	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999998362	WITHOUT_CLASSIFICATION	1.636833301462512E-13	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999928269479411	WITHOUT_CLASSIFICATION	7.173052058902359E-6	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999998430429811	WITHOUT_CLASSIFICATION	1.5695701899283088E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.99999997716914	WITHOUT_CLASSIFICATION	2.283086003885396E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999971147004512	WITHOUT_CLASSIFICATION	2.8852995489189988E-6	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999266484854585	WITHOUT_CLASSIFICATION	7.335151454153508E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999938255029084	WITHOUT_CLASSIFICATION	6.174497091567142E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999994513991248	WITHOUT_CLASSIFICATION	5.486008751406574E-7	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999571530651286	WITHOUT_CLASSIFICATION	4.284693487145183E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999635397718	WITHOUT_CLASSIFICATION	3.6460228120427144E-8	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999985333893091	WITHOUT_CLASSIFICATION	1.4666106908957548E-6	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999959917593212	WITHOUT_CLASSIFICATION	4.00824067886939E-6	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999998055453743	WITHOUT_CLASSIFICATION	1.944546256541994E-7	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999999943967186	WITHOUT_CLASSIFICATION	5.603281415250758E-8	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999999548587135	WITHOUT_CLASSIFICATION	4.514128648944294E-8	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999907142070648	WITHOUT_CLASSIFICATION	9.285792935332242E-6	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999996950876591	WITHOUT_CLASSIFICATION	3.0491234089316396E-7	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999973925891444	WITHOUT_CLASSIFICATION	2.607410855536796E-6	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999726089455105	WITHOUT_CLASSIFICATION	2.7391054489370463E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949921355421	WITHOUT_CLASSIFICATION	5.00786445789269E-6	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999971147004512	WITHOUT_CLASSIFICATION	2.8852995489189988E-6	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999997579449614	WITHOUT_CLASSIFICATION	2.4205503861392957E-7	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999801759493046	WITHOUT_CLASSIFICATION	1.9824050695481377E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999998216020042	WITHOUT_CLASSIFICATION	1.7839799584081931E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999999329306778	WITHOUT_CLASSIFICATION	6.706932227524458E-8	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999935791222302	WITHOUT_CLASSIFICATION	6.420877769796123E-6	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9908856729288674	WITHOUT_CLASSIFICATION	0.009114327071132583	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9993794903447806	WITHOUT_CLASSIFICATION	6.205096552193982E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999978199666159	WITHOUT_CLASSIFICATION	2.1800333842610342E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996168158323	WITHOUT_CLASSIFICATION	3.8318416779013615E-7	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999973707097	WITHOUT_CLASSIFICATION	2.6292902891601708E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999975261766	WITHOUT_CLASSIFICATION	2.4738234585583174E-9	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999974045328007	WITHOUT_CLASSIFICATION	2.5954671991696494E-6	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999618335911	WITHOUT_CLASSIFICATION	3.816640892290612E-8	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999066610012	WITHOUT_CLASSIFICATION	9.333899876924957E-8	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999981228083	WITHOUT_CLASSIFICATION	1.877191708160199E-8	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999998120032477	WITHOUT_CLASSIFICATION	1.8799675220020184E-7	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999997391095713	WITHOUT_CLASSIFICATION	2.608904287050657E-7	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999949921355421	WITHOUT_CLASSIFICATION	5.00786445789269E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999578968508324	WITHOUT_CLASSIFICATION	4.210314916771178E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999953131508009	WITHOUT_CLASSIFICATION	4.686849199100804E-6	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999965329882616	WITHOUT_CLASSIFICATION	3.4670117383826815E-6	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.999995650153172	WITHOUT_CLASSIFICATION	4.349846827877282E-6	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999944088931638	WITHOUT_CLASSIFICATION	5.591106836228862E-6	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999972468102775	WITHOUT_CLASSIFICATION	2.7531897224808847E-6	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999965113894748	WITHOUT_CLASSIFICATION	3.4886105251378066E-6	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9962281828853978	WITHOUT_CLASSIFICATION	0.0037718171146022715	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999778791705	WITHOUT_CLASSIFICATION	2.2120829507633296E-8	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998255188286098	WITHOUT_CLASSIFICATION	1.744811713901468E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999999082848462	WITHOUT_CLASSIFICATION	9.171515377268799E-8	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999917102829	WITHOUT_CLASSIFICATION	8.289717063616793E-9	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999399052318343	WITHOUT_CLASSIFICATION	6.009476816569888E-5	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999996407792819	WITHOUT_CLASSIFICATION	3.592207180585438E-7	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999653585581	WITHOUT_CLASSIFICATION	3.464144188730899E-8	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999703936922	WITHOUT_CLASSIFICATION	2.9606307915088093E-8	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999983166776433	WITHOUT_CLASSIFICATION	1.6833223567394041E-6	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998831049224	WITHOUT_CLASSIFICATION	1.1689507752449007E-7	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999979722470376	WITHOUT_CLASSIFICATION	2.027752962381419E-6	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999999225803096	WITHOUT_CLASSIFICATION	7.741969039228098E-8	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.999990374826447	WITHOUT_CLASSIFICATION	9.62517355287638E-6	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999994468749003	WITHOUT_CLASSIFICATION	5.531250997501297E-7	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997938918014	WITHOUT_CLASSIFICATION	2.061081985668098E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999994010216	WITHOUT_CLASSIFICATION	5.989784409395712E-10	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999181823735	WITHOUT_CLASSIFICATION	8.181762646682494E-8	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5599023962221557	WITHOUT_CLASSIFICATION	0.44009760377784424	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999277995713605	WITHOUT_CLASSIFICATION	7.220042863950373E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999993775066556	WITHOUT_CLASSIFICATION	6.224933444578833E-7	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999998289813284	WITHOUT_CLASSIFICATION	1.7101867159808994E-6	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7243143464071692	IMPLEMENTATION	0.2756856535928307	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999701934947	WITHOUT_CLASSIFICATION	2.9806505195519194E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999858725654356	WITHOUT_CLASSIFICATION	1.4127434564374101E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999936087917861	WITHOUT_CLASSIFICATION	6.391208213938495E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999920344914777	WITHOUT_CLASSIFICATION	7.965508522366097E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999983968788	WITHOUT_CLASSIFICATION	1.6031211797032895E-9	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999994655906185	WITHOUT_CLASSIFICATION	5.344093815056256E-6	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999583031133	WITHOUT_CLASSIFICATION	4.1696886702734674E-8	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999662336175841	WITHOUT_CLASSIFICATION	3.376638241596413E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999994655906185	WITHOUT_CLASSIFICATION	5.344093815056256E-6	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999983968788	WITHOUT_CLASSIFICATION	1.6031211797032895E-9	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999583031133	WITHOUT_CLASSIFICATION	4.1696886702734674E-8	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999985064360306	WITHOUT_CLASSIFICATION	1.4935639693064453E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999991511001161	WITHOUT_CLASSIFICATION	8.488998840372259E-7	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999844644101	WITHOUT_CLASSIFICATION	1.5535589950352894E-8	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999996692469946	WITHOUT_CLASSIFICATION	3.307530054230965E-7	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999925901373	WITHOUT_CLASSIFICATION	7.409862791201561E-9	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5805635474617179	WITHOUT_CLASSIFICATION	0.41943645253828216	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999883255154385	WITHOUT_CLASSIFICATION	1.1674484561531359E-5	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9995433584755299	WITHOUT_CLASSIFICATION	4.5664152447004767E-4	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999992138149534	WITHOUT_CLASSIFICATION	7.861850466854774E-7	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999996486661684	WITHOUT_CLASSIFICATION	3.513338315285394E-7	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9999988027019702	WITHOUT_CLASSIFICATION	1.1972980299119696E-6	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999941766429034	WITHOUT_CLASSIFICATION	5.8233570966770515E-6	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999197416198098	WITHOUT_CLASSIFICATION	8.02583801901997E-5	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999996692469946	WITHOUT_CLASSIFICATION	3.307530054230965E-7	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9997040565178565	WITHOUT_CLASSIFICATION	2.9594348214344356E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999869548487	WITHOUT_CLASSIFICATION	1.3045151329408629E-8	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999962405904	WITHOUT_CLASSIFICATION	3.7594095934767766E-9	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997004782698	WITHOUT_CLASSIFICATION	2.9952173023893884E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999999033033675	WITHOUT_CLASSIFICATION	9.669663250310617E-7	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999627363624	WITHOUT_CLASSIFICATION	3.7263637570422297E-8	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9619023461236836	WITHOUT_CLASSIFICATION	0.038097653876316445	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999946437484	WITHOUT_CLASSIFICATION	5.356251583221221E-9	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999977092713747	WITHOUT_CLASSIFICATION	2.29072862538188E-6	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999997901366422	WITHOUT_CLASSIFICATION	2.0986335782558777E-7	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999941572547	WITHOUT_CLASSIFICATION	5.84274536538711E-9	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999941572547	WITHOUT_CLASSIFICATION	5.84274536538711E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999994921708	WITHOUT_CLASSIFICATION	5.078292160325581E-10	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999994921708	WITHOUT_CLASSIFICATION	5.078292160325581E-10	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9926489507554783	WITHOUT_CLASSIFICATION	0.0073510492445217086	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999962405904	WITHOUT_CLASSIFICATION	3.7594095934767766E-9	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999941896920824	WITHOUT_CLASSIFICATION	5.810307917626583E-6	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999732976424319	WITHOUT_CLASSIFICATION	2.670235756808915E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999989242568488	WITHOUT_CLASSIFICATION	1.075743151138743E-6	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999989242568488	WITHOUT_CLASSIFICATION	1.075743151138743E-6	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998493547061	WITHOUT_CLASSIFICATION	1.5064529397207485E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999958383358137	WITHOUT_CLASSIFICATION	4.161664186177741E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999938707665	WITHOUT_CLASSIFICATION	6.1292334493625504E-9	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.999995962184245	WITHOUT_CLASSIFICATION	4.037815755046538E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999702143404999	WITHOUT_CLASSIFICATION	2.9785659500069688E-5	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999982059013655	WITHOUT_CLASSIFICATION	1.7940986345818572E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999999155027831	WITHOUT_CLASSIFICATION	8.4497216906479E-8	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999808676851415	WITHOUT_CLASSIFICATION	1.9132314858587376E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999931461235974	WITHOUT_CLASSIFICATION	6.853876402613724E-6	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999998786379566	WITHOUT_CLASSIFICATION	1.213620434036534E-7	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999988543625008	WITHOUT_CLASSIFICATION	1.1456374992577522E-6	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.999915474969043	WITHOUT_CLASSIFICATION	8.4525030957039E-5	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999700265887	WITHOUT_CLASSIFICATION	2.997341134036811E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999998509114718	WITHOUT_CLASSIFICATION	1.4908852817757138E-7	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9989515363025369	WITHOUT_CLASSIFICATION	0.0010484636974631997	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999989160226923	WITHOUT_CLASSIFICATION	1.0839773077121422E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982288690172	WITHOUT_CLASSIFICATION	1.7711309826673095E-6	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999978856434898	WITHOUT_CLASSIFICATION	2.1143565102240923E-6	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999173845611926	WITHOUT_CLASSIFICATION	8.26154388074137E-5	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999397470886	WITHOUT_CLASSIFICATION	6.025291148221841E-8	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9997684010160028	WITHOUT_CLASSIFICATION	2.315989839972029E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999816160271	WITHOUT_CLASSIFICATION	1.838397287428936E-8	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999931646749536	WITHOUT_CLASSIFICATION	6.835325046422726E-6	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999998755668157	WITHOUT_CLASSIFICATION	1.2443318437050446E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999817465264175	WITHOUT_CLASSIFICATION	1.825347358248451E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998078755374	WITHOUT_CLASSIFICATION	1.921244624535212E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999917102829	WITHOUT_CLASSIFICATION	8.289717063616793E-9	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999985553693201	WITHOUT_CLASSIFICATION	1.4446306799226636E-6	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999994245063482	WITHOUT_CLASSIFICATION	5.754936517707114E-7	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999792196946611	WITHOUT_CLASSIFICATION	2.0780305338920307E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999687195384325	WITHOUT_CLASSIFICATION	3.1280461567462235E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999974034683037	WITHOUT_CLASSIFICATION	2.596531696275401E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999974034683037	WITHOUT_CLASSIFICATION	2.596531696275401E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995939642897	WITHOUT_CLASSIFICATION	4.0603571020739973E-7	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999993514635358	WITHOUT_CLASSIFICATION	6.485364641755287E-7	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999999032858484	WITHOUT_CLASSIFICATION	9.67141515283544E-8	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999999032858484	WITHOUT_CLASSIFICATION	9.67141515283544E-8	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999972750532032	WITHOUT_CLASSIFICATION	2.7249467967350983E-6	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999574775536925	WITHOUT_CLASSIFICATION	4.252244630761093E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9999943807325579	WITHOUT_CLASSIFICATION	5.619267442040214E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999850267726915	WITHOUT_CLASSIFICATION	1.4973227308545354E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999994466151767	WITHOUT_CLASSIFICATION	5.533848232375282E-7	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999988319941	WITHOUT_CLASSIFICATION	1.1680059125823052E-9	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9998650808548271	WITHOUT_CLASSIFICATION	1.349191451728835E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999826659008209	WITHOUT_CLASSIFICATION	1.733409917919531E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999982202706	WITHOUT_CLASSIFICATION	1.779729397559113E-8	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999982202706	WITHOUT_CLASSIFICATION	1.779729397559113E-8	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999966798079537	WITHOUT_CLASSIFICATION	3.320192046206361E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998667990243	WITHOUT_CLASSIFICATION	1.3320097566551706E-7	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999998667990243	WITHOUT_CLASSIFICATION	1.3320097566551706E-7	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999935834547	WITHOUT_CLASSIFICATION	6.41654531184989E-9	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.999999999391181	WITHOUT_CLASSIFICATION	6.088190297623076E-10	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9981098448898282	WITHOUT_CLASSIFICATION	0.001890155110171782	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999989871859538	WITHOUT_CLASSIFICATION	1.0128140461731388E-6	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999988924949592	WITHOUT_CLASSIFICATION	1.1075050408554508E-6	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999986305383	WITHOUT_CLASSIFICATION	1.3694617316976176E-9	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9987648197593331	WITHOUT_CLASSIFICATION	0.0012351802406668797	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999554488534699	WITHOUT_CLASSIFICATION	4.455114653007916E-5	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999030904453	WITHOUT_CLASSIFICATION	9.690955463919022E-8	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997987387917248	WITHOUT_CLASSIFICATION	2.0126120827513794E-4	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999995671403347	WITHOUT_CLASSIFICATION	4.32859665324908E-7	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9996747062476626	WITHOUT_CLASSIFICATION	3.252937523373538E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999990305401105	WITHOUT_CLASSIFICATION	9.694598894945214E-7	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999990305401105	WITHOUT_CLASSIFICATION	9.694598894945214E-7	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999990305401105	WITHOUT_CLASSIFICATION	9.694598894945214E-7	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999990305401105	WITHOUT_CLASSIFICATION	9.694598894945214E-7	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.99999838152861	WITHOUT_CLASSIFICATION	1.6184713900600252E-6	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998565199182246	WITHOUT_CLASSIFICATION	1.4348008177548344E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999951408405388	WITHOUT_CLASSIFICATION	4.859159461168926E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999980205656516	WITHOUT_CLASSIFICATION	1.979434348376008E-6	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999983456567534	WITHOUT_CLASSIFICATION	1.6543432466511705E-6	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9998966097938583	WITHOUT_CLASSIFICATION	1.033902061417208E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999331987976602	WITHOUT_CLASSIFICATION	6.680120233987753E-5	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999848153215207	WITHOUT_CLASSIFICATION	1.5184678479387524E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999243363455494	WITHOUT_CLASSIFICATION	7.566365445056068E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999997989637602	WITHOUT_CLASSIFICATION	2.0103623988317732E-7	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999901400505691	WITHOUT_CLASSIFICATION	9.859949430926786E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999919706629078	WITHOUT_CLASSIFICATION	8.029337092149376E-6	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999925772571	WITHOUT_CLASSIFICATION	7.422742790954284E-9	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999734151972	WITHOUT_CLASSIFICATION	2.658480276608869E-8	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999617095702703	WITHOUT_CLASSIFICATION	3.829042972958284E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999919706629078	WITHOUT_CLASSIFICATION	8.029337092149376E-6	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999987252878331	WITHOUT_CLASSIFICATION	1.2747121668627178E-6	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999961589289397	WITHOUT_CLASSIFICATION	3.8410710602957754E-6	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999986358678775	WITHOUT_CLASSIFICATION	1.364132122466555E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999969263663	WITHOUT_CLASSIFICATION	3.073633744792493E-9	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999957638889	WITHOUT_CLASSIFICATION	4.236111065860798E-9	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998295939779	WITHOUT_CLASSIFICATION	1.7040602204146305E-7	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999997678070494	WITHOUT_CLASSIFICATION	2.3219295064218126E-7	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999807564860896	WITHOUT_CLASSIFICATION	1.924351391042868E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997538523354	WITHOUT_CLASSIFICATION	2.4614766460862077E-7	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999993780754749	WITHOUT_CLASSIFICATION	6.219245249964687E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999980568096	WITHOUT_CLASSIFICATION	1.943190369187672E-9	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999999866494022	WITHOUT_CLASSIFICATION	1.3350597799111794E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999985151514836	WITHOUT_CLASSIFICATION	1.4848485164553424E-6	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998628464927196	WITHOUT_CLASSIFICATION	1.3715350728034178E-4	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999857150835968	WITHOUT_CLASSIFICATION	1.4284916403352146E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999383328958	WITHOUT_CLASSIFICATION	6.166710419157881E-8	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999989986442	WITHOUT_CLASSIFICATION	1.0013557850753951E-9	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999593567211	WITHOUT_CLASSIFICATION	4.064327892662972E-8	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999983391812449	WITHOUT_CLASSIFICATION	1.6608187550561312E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999999593567211	WITHOUT_CLASSIFICATION	4.064327892662972E-8	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994306647066	WITHOUT_CLASSIFICATION	5.693352934167711E-7	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999994784335	WITHOUT_CLASSIFICATION	5.215664653949926E-10	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999934339316215	WITHOUT_CLASSIFICATION	6.566068378411489E-6	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999982961724948	WITHOUT_CLASSIFICATION	1.7038275052173586E-6	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.999999717991297	WITHOUT_CLASSIFICATION	2.820087029621872E-7	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999962030160477	WITHOUT_CLASSIFICATION	3.7969839523181486E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999954379939	WITHOUT_CLASSIFICATION	4.562006122289885E-9	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999989986442	WITHOUT_CLASSIFICATION	1.0013557850753951E-9	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999983391812449	WITHOUT_CLASSIFICATION	1.6608187550561312E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994306647066	WITHOUT_CLASSIFICATION	5.693352934167711E-7	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999978562051971	WITHOUT_CLASSIFICATION	2.1437948029592954E-6	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999964478738085	WITHOUT_CLASSIFICATION	3.5521261915289836E-6	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9999860676322959	WITHOUT_CLASSIFICATION	1.393236770411028E-5	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999987170418	WITHOUT_CLASSIFICATION	1.2829582305627155E-9	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9999844262604446	WITHOUT_CLASSIFICATION	1.557373955546459E-5	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9996068041150752	WITHOUT_CLASSIFICATION	3.9319588492483793E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999992169722655	WITHOUT_CLASSIFICATION	7.830277345353704E-7	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982288690172	WITHOUT_CLASSIFICATION	1.7711309826673095E-6	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999994784335	WITHOUT_CLASSIFICATION	5.215664653949926E-10	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999966386869	WITHOUT_CLASSIFICATION	3.3613131581574972E-9	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999999092805606	WITHOUT_CLASSIFICATION	9.071943940251015E-8	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999869251570646	WITHOUT_CLASSIFICATION	1.3074842935488094E-5	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999207034836	WITHOUT_CLASSIFICATION	7.929651636522123E-8	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982288690172	WITHOUT_CLASSIFICATION	1.7711309826673095E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999980516862581	WITHOUT_CLASSIFICATION	1.9483137419609494E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982288690172	WITHOUT_CLASSIFICATION	1.7711309826673095E-6	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999414954016	WITHOUT_CLASSIFICATION	5.8504598346012057E-8	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999990888992631	WITHOUT_CLASSIFICATION	9.11100736835402E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999929672393346	WITHOUT_CLASSIFICATION	7.032760665394983E-5	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997450454122815	WITHOUT_CLASSIFICATION	2.5495458771845767E-4	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999541060776	WITHOUT_CLASSIFICATION	4.589392238935615E-7	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999977506483636	WITHOUT_CLASSIFICATION	2.249351636412096E-6	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999972474234312	WITHOUT_CLASSIFICATION	2.752576568743209E-6	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999984073061773	WITHOUT_CLASSIFICATION	1.5926938227229046E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999982890600594	WITHOUT_CLASSIFICATION	1.7109399407001475E-6	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.999999730590699	WITHOUT_CLASSIFICATION	2.6940930100506995E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999888225137358	WITHOUT_CLASSIFICATION	1.1177486264138542E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999994581847621	WITHOUT_CLASSIFICATION	5.418152377984227E-7	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9981098448898282	WITHOUT_CLASSIFICATION	0.001890155110171782	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999998100333172	WITHOUT_CLASSIFICATION	1.899666828560951E-7	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999994214332371	WITHOUT_CLASSIFICATION	5.785667629495403E-7	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.999999916359873	WITHOUT_CLASSIFICATION	8.364012704933394E-8	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.999999957432186	WITHOUT_CLASSIFICATION	4.256781411645039E-8	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999991204184	WITHOUT_CLASSIFICATION	8.795815971097928E-10	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999834608776493	WITHOUT_CLASSIFICATION	1.6539122350691456E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999979297199971	WITHOUT_CLASSIFICATION	2.0702800029496463E-6	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999956361024677	WITHOUT_CLASSIFICATION	4.3638975322708835E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996315078346	WITHOUT_CLASSIFICATION	3.6849216550610727E-7	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999375494514	WITHOUT_CLASSIFICATION	6.245054864959277E-8	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.998238465413612	WITHOUT_CLASSIFICATION	0.0017615345863880168	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999071881537	WITHOUT_CLASSIFICATION	9.28118462191015E-8	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998937711132	WITHOUT_CLASSIFICATION	1.0622888676043409E-7	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999992421011283	WITHOUT_CLASSIFICATION	7.578988716733483E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999860662880322	WITHOUT_CLASSIFICATION	1.3933711967696077E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999641016883042	WITHOUT_CLASSIFICATION	3.589831169581984E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999997114603517	WITHOUT_CLASSIFICATION	2.8853964821783994E-7	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998169076325526	WITHOUT_CLASSIFICATION	1.8309236744735E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999951326106407	WITHOUT_CLASSIFICATION	4.867389359346619E-6	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999994391778476	WITHOUT_CLASSIFICATION	5.60822152367235E-7	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999990094233125	WITHOUT_CLASSIFICATION	9.905766874487952E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9952005040926236	WITHOUT_CLASSIFICATION	0.004799495907376382	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999983617178592	WITHOUT_CLASSIFICATION	1.6382821408553488E-6	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999999940536402	WITHOUT_CLASSIFICATION	5.946359813500615E-8	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9999956815827865	WITHOUT_CLASSIFICATION	4.3184172135822E-6	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999928467790223	WITHOUT_CLASSIFICATION	7.153220977699778E-6	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999999913222609	WITHOUT_CLASSIFICATION	8.677739148882494E-9	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9980766916155526	WITHOUT_CLASSIFICATION	0.001923308384447407	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999966092682907	WITHOUT_CLASSIFICATION	3.3907317092907405E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999607647166	WITHOUT_CLASSIFICATION	3.923528332731114E-8	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999336234113372	WITHOUT_CLASSIFICATION	6.637658866290374E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999336234113372	WITHOUT_CLASSIFICATION	6.637658866290374E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999653267405022	WITHOUT_CLASSIFICATION	3.4673259497827616E-5	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999984073061773	WITHOUT_CLASSIFICATION	1.5926938227229046E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9995584694532954	WITHOUT_CLASSIFICATION	4.415305467045757E-4	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999758468873	WITHOUT_CLASSIFICATION	2.4153112675738444E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999716093929	WITHOUT_CLASSIFICATION	2.8390607066527387E-8	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999931456370532	WITHOUT_CLASSIFICATION	6.854362946800128E-6	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999928274685123	WITHOUT_CLASSIFICATION	7.172531487835104E-6	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999930973894814	WITHOUT_CLASSIFICATION	6.902610518626468E-6	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999999999993795	WITHOUT_CLASSIFICATION	6.2049664887916E-12	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999991695679	WITHOUT_CLASSIFICATION	8.304320932604323E-10	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999852223990877	WITHOUT_CLASSIFICATION	1.47776009121609E-5	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999998689850488	WITHOUT_CLASSIFICATION	1.3101495112838952E-7	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999020409554322	WITHOUT_CLASSIFICATION	9.7959044567729E-5	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999991906504	WITHOUT_CLASSIFICATION	8.093496446384303E-10	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999975398046	WITHOUT_CLASSIFICATION	2.4601953398562957E-9	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999977926917836	WITHOUT_CLASSIFICATION	2.2073082163521075E-6	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999723230153	WITHOUT_CLASSIFICATION	2.767698474404365E-8	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999985528639	WITHOUT_CLASSIFICATION	1.4471360244720346E-9	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999997587203	WITHOUT_CLASSIFICATION	2.4127973027805847E-10	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999608163574974	WITHOUT_CLASSIFICATION	3.918364250260293E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999949186292985	WITHOUT_CLASSIFICATION	5.081370701528595E-6	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996550773223344	WITHOUT_CLASSIFICATION	3.4492267766563753E-4	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999944922528679	WITHOUT_CLASSIFICATION	5.507747132179236E-6	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999677579591	WITHOUT_CLASSIFICATION	3.2242041023762644E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9980766916155526	WITHOUT_CLASSIFICATION	0.001923308384447407	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999545338575	WITHOUT_CLASSIFICATION	4.5466142469533104E-8	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999996120348924	WITHOUT_CLASSIFICATION	3.879651075799441E-7	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999975120635	WITHOUT_CLASSIFICATION	2.487936534031617E-9	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999999189994918	WITHOUT_CLASSIFICATION	8.100050819342875E-8	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9980446210575247	WITHOUT_CLASSIFICATION	0.0019553789424754326	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999624793717974	WITHOUT_CLASSIFICATION	3.752062820254888E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999999378633574	WITHOUT_CLASSIFICATION	6.213664258212815E-8	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999994079000278	WITHOUT_CLASSIFICATION	5.920999721903112E-7	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999996915829081	WITHOUT_CLASSIFICATION	3.084170918854641E-6	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999995870483	WITHOUT_CLASSIFICATION	4.129516540135891E-10	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999998694996568	WITHOUT_CLASSIFICATION	1.305003432016028E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999996134146153	WITHOUT_CLASSIFICATION	3.8658538476592346E-7	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999148498774	WITHOUT_CLASSIFICATION	8.515012253150759E-8	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999999934028476	WITHOUT_CLASSIFICATION	6.597152301039925E-9	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999999719845309	WITHOUT_CLASSIFICATION	2.8015469017187794E-8	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999953908040493	WITHOUT_CLASSIFICATION	4.609195950745929E-6	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999953908040493	WITHOUT_CLASSIFICATION	4.609195950745929E-6	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999909019089424	WITHOUT_CLASSIFICATION	9.098091057628326E-6	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999587025152052	WITHOUT_CLASSIFICATION	4.129748479466202E-5	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999996280418	WITHOUT_CLASSIFICATION	3.7195820020768155E-9	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999999996280418	WITHOUT_CLASSIFICATION	3.7195820020768155E-9	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999999520248198	WITHOUT_CLASSIFICATION	4.797518017700722E-8	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999984840403895	WITHOUT_CLASSIFICATION	1.5159596105162905E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9993001306425744	WITHOUT_CLASSIFICATION	6.998693574255681E-4	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999612090406	WITHOUT_CLASSIFICATION	3.879095954644042E-8	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990493209803	WITHOUT_CLASSIFICATION	9.506790198503314E-7	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999989908690551	WITHOUT_CLASSIFICATION	1.0091309449673654E-6	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999997057161	WITHOUT_CLASSIFICATION	2.942839655445026E-10	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999997057161	WITHOUT_CLASSIFICATION	2.942839655445026E-10	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999979983689461	WITHOUT_CLASSIFICATION	2.0016310538749104E-6	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999988828631706	WITHOUT_CLASSIFICATION	1.117136829406129E-6	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999999821805016	WITHOUT_CLASSIFICATION	1.781949849681428E-8	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999998974661415	WITHOUT_CLASSIFICATION	1.0253385846786336E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999998974661415	WITHOUT_CLASSIFICATION	1.0253385846786336E-7	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999999363251403	WITHOUT_CLASSIFICATION	6.367485972281722E-8	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999986873348323	WITHOUT_CLASSIFICATION	1.3126651676929135E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999132078427	WITHOUT_CLASSIFICATION	8.67921573862119E-8	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999997506803624	WITHOUT_CLASSIFICATION	2.4931963765870477E-7	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999959819070701	WITHOUT_CLASSIFICATION	4.018092929889772E-6	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999565125425	WITHOUT_CLASSIFICATION	4.3487457638677335E-8	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999999820199584	WITHOUT_CLASSIFICATION	1.7980041608088056E-7	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999982344500888	WITHOUT_CLASSIFICATION	1.765549911207422E-6	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999802470735	WITHOUT_CLASSIFICATION	1.975292649307806E-8	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999999928206761	WITHOUT_CLASSIFICATION	7.179323891006647E-8	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999697450411	WITHOUT_CLASSIFICATION	3.025495882685335E-8	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9994700452973067	WITHOUT_CLASSIFICATION	5.299547026933419E-4	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9992952080407883	WITHOUT_CLASSIFICATION	7.047919592116467E-4	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9995608043895341	WITHOUT_CLASSIFICATION	4.391956104658107E-4	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999861085858951	WITHOUT_CLASSIFICATION	1.3891414104918824E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999995926741776	WITHOUT_CLASSIFICATION	4.0732582239702265E-6	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999815853229255	WITHOUT_CLASSIFICATION	1.841467707450445E-5	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999993290202995	WITHOUT_CLASSIFICATION	6.709797005687456E-7	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999892158653482	WITHOUT_CLASSIFICATION	1.0784134651769971E-5	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999911398225569	WITHOUT_CLASSIFICATION	8.860177443014106E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.99999668136154	WITHOUT_CLASSIFICATION	3.3186384600324503E-6	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999982652653968	WITHOUT_CLASSIFICATION	1.734734603121903E-6	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998458567443586	WITHOUT_CLASSIFICATION	1.54143255641475E-4	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999998511214574	WITHOUT_CLASSIFICATION	1.488785425977106E-7	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999992130928872	WITHOUT_CLASSIFICATION	7.869071128965452E-7	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999496874432	WITHOUT_CLASSIFICATION	5.0312556793238235E-8	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999998236081137	WITHOUT_CLASSIFICATION	1.763918863769673E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999782832423464	WITHOUT_CLASSIFICATION	2.1716757653627225E-5	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999753611638	WITHOUT_CLASSIFICATION	2.4638836225742192E-8	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999191719146	WITHOUT_CLASSIFICATION	8.08280854113131E-7	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999463686333088	WITHOUT_CLASSIFICATION	5.363136669118792E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999919460829	WITHOUT_CLASSIFICATION	8.053917127001307E-9	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999991694095	WITHOUT_CLASSIFICATION	8.305905000238237E-7	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999983365341235	WITHOUT_CLASSIFICATION	1.6634658764299113E-6	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999970846937417	WITHOUT_CLASSIFICATION	2.915306258332843E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999814333703335	WITHOUT_CLASSIFICATION	1.856662966648696E-5	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999991565140463	WITHOUT_CLASSIFICATION	8.434859536191561E-7	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999998932942	WITHOUT_CLASSIFICATION	1.0670574701576585E-10	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999457030241142	WITHOUT_CLASSIFICATION	5.429697588580813E-5	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999893239057	WITHOUT_CLASSIFICATION	1.0676094364722235E-8	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999998764471696	WITHOUT_CLASSIFICATION	1.2355283036806897E-7	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999997827040688	WITHOUT_CLASSIFICATION	2.1729593124394197E-7	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.9999978502578246	WITHOUT_CLASSIFICATION	2.149742175465771E-6	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.999973500790345	WITHOUT_CLASSIFICATION	2.649920965502264E-5	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999994902037431	WITHOUT_CLASSIFICATION	5.097962568382466E-7	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999997212099032	WITHOUT_CLASSIFICATION	2.7879009674203035E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999997546697528	WITHOUT_CLASSIFICATION	2.4533024723638316E-7	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999996245812856	WITHOUT_CLASSIFICATION	3.754187144726013E-7	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999938956842742	WITHOUT_CLASSIFICATION	6.104315725796443E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999998812989405	WITHOUT_CLASSIFICATION	1.1870105950529296E-6	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999671164136534	WITHOUT_CLASSIFICATION	3.2883586346587254E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999460573727736	WITHOUT_CLASSIFICATION	5.394262722635813E-5	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999679145055603	WITHOUT_CLASSIFICATION	3.208549443959555E-5	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999775761859	WITHOUT_CLASSIFICATION	2.2423814133132982E-8	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999992897345154	WITHOUT_CLASSIFICATION	7.102654845604229E-7	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999951860162918	WITHOUT_CLASSIFICATION	4.813983708190461E-6	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999996826028117	WITHOUT_CLASSIFICATION	3.173971883504721E-7	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999995220809756	WITHOUT_CLASSIFICATION	4.779190242835106E-7	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999790687700081	WITHOUT_CLASSIFICATION	2.0931229991870556E-5	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999999520397629	WITHOUT_CLASSIFICATION	4.796023704121415E-8	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996342688037	WITHOUT_CLASSIFICATION	3.6573119628521343E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996342688037	WITHOUT_CLASSIFICATION	3.6573119628521343E-6	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999999999284	WITHOUT_CLASSIFICATION	7.160040215625991E-13	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999824304008844	WITHOUT_CLASSIFICATION	1.7569599115589412E-5	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999990982107	WITHOUT_CLASSIFICATION	9.017892975372902E-10	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999975229131	WITHOUT_CLASSIFICATION	2.4770869333047672E-9	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.99999995980062	WITHOUT_CLASSIFICATION	4.019937999041545E-8	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999984992688654	WITHOUT_CLASSIFICATION	1.5007311347066582E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999725565984	WITHOUT_CLASSIFICATION	2.7443401532284946E-8	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999110333	WITHOUT_CLASSIFICATION	8.896678781212311E-11	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999998963717046	WITHOUT_CLASSIFICATION	1.0362829537458308E-7	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999910350675	WITHOUT_CLASSIFICATION	8.964932504129745E-9	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999151503107	WITHOUT_CLASSIFICATION	8.484968936049373E-8	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999993956386247	WITHOUT_CLASSIFICATION	6.043613753260241E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999984179693	WITHOUT_CLASSIFICATION	1.582030697165636E-8	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999780351101331	WITHOUT_CLASSIFICATION	2.1964889866872702E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999497790034	WITHOUT_CLASSIFICATION	5.022099650428034E-8	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999999497790034	WITHOUT_CLASSIFICATION	5.022099650428034E-8	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999997985239	WITHOUT_CLASSIFICATION	2.0147602059335295E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9990418103830698	WITHOUT_CLASSIFICATION	9.581896169302521E-4	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999997760831771	WITHOUT_CLASSIFICATION	2.2391682296871714E-7	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999304033023	WITHOUT_CLASSIFICATION	6.959669782755753E-8	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999962965577911	WITHOUT_CLASSIFICATION	3.703442208990151E-6	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868325181958	WITHOUT_CLASSIFICATION	1.3167481804318338E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999998118157636	WITHOUT_CLASSIFICATION	1.8818423636833275E-7	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999917757389745	WITHOUT_CLASSIFICATION	8.224261025436267E-6	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9993330874427413	WITHOUT_CLASSIFICATION	6.669125572587182E-4	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999991462446465	WITHOUT_CLASSIFICATION	8.537553535363351E-7	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9963005128022254	WITHOUT_CLASSIFICATION	0.0036994871977746786	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999992923677289	WITHOUT_CLASSIFICATION	7.076322710387391E-7	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999992891958	WITHOUT_CLASSIFICATION	7.1080420821579045E-9	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999997759599	WITHOUT_CLASSIFICATION	2.2404007543075597E-10	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999911838556	WITHOUT_CLASSIFICATION	8.816144301678534E-9	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999397538731	WITHOUT_CLASSIFICATION	6.024612694422019E-8	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999999328494857	WITHOUT_CLASSIFICATION	6.715051430614611E-7	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999998387345647	WITHOUT_CLASSIFICATION	1.612654354148291E-7	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999997372307834	WITHOUT_CLASSIFICATION	2.6276921664685543E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999997465828	WITHOUT_CLASSIFICATION	2.534170940231264E-10	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999999163801	WITHOUT_CLASSIFICATION	8.361992210025106E-11	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999999880361	WITHOUT_CLASSIFICATION	1.1963855774080671E-11	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999128265908	WITHOUT_CLASSIFICATION	8.717340910202175E-8	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999162144	WITHOUT_CLASSIFICATION	8.37856765368765E-11	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.999999914375402	WITHOUT_CLASSIFICATION	8.562459793425433E-8	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999998464261842	WITHOUT_CLASSIFICATION	1.5357381579729278E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999943037347763	WITHOUT_CLASSIFICATION	5.696265223785938E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999988571117319	WITHOUT_CLASSIFICATION	1.1428882680694854E-6	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999991951107093	WITHOUT_CLASSIFICATION	8.048892906174102E-7	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999930448045611	WITHOUT_CLASSIFICATION	6.955195438997754E-6	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999996186042508	WITHOUT_CLASSIFICATION	3.8139574912439584E-7	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999899732348	WITHOUT_CLASSIFICATION	1.0026765222565976E-8	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999997135055327	WITHOUT_CLASSIFICATION	2.864944672314535E-7	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999998671671856	WITHOUT_CLASSIFICATION	1.3283281437273044E-7	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999994516525	WITHOUT_CLASSIFICATION	5.48347473119525E-10	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993541093637	WITHOUT_CLASSIFICATION	6.458906362499004E-7	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9996180093131484	WITHOUT_CLASSIFICATION	3.8199068685161434E-4	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999753915679	WITHOUT_CLASSIFICATION	2.4608432112154315E-8	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999969316884	WITHOUT_CLASSIFICATION	3.0683116069975835E-8	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999752322678	WITHOUT_CLASSIFICATION	2.4767732255649914E-8	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9961203073965351	WITHOUT_CLASSIFICATION	0.003879692603464762	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999996250806248	WITHOUT_CLASSIFICATION	3.7491937520177784E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995514827990817	WITHOUT_CLASSIFICATION	4.4851720091830923E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995514827990817	WITHOUT_CLASSIFICATION	4.4851720091830923E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999845576993	WITHOUT_CLASSIFICATION	1.5442300694802432E-8	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999914639355	WITHOUT_CLASSIFICATION	8.536064577361357E-9	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9917718902696329	WITHOUT_CLASSIFICATION	0.008228109730367151	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999979761854478	WITHOUT_CLASSIFICATION	2.0238145522015643E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999999754140726	WITHOUT_CLASSIFICATION	2.4585927316997252E-8	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999917223488	WITHOUT_CLASSIFICATION	8.277651185818704E-9	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999937191227533	WITHOUT_CLASSIFICATION	6.280877246733954E-6	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999932538777	WITHOUT_CLASSIFICATION	6.746122328092046E-9	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999994216215308	WITHOUT_CLASSIFICATION	5.783784692805074E-7	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995196753312	WITHOUT_CLASSIFICATION	4.80324668706109E-7	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990841731425	WITHOUT_CLASSIFICATION	9.158268575352087E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999984045533292	WITHOUT_CLASSIFICATION	1.5954466708064678E-6	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999909142392	WITHOUT_CLASSIFICATION	9.085760864632587E-9	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999808623486	WITHOUT_CLASSIFICATION	1.913765124833466E-8	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999977317957182	WITHOUT_CLASSIFICATION	2.2682042818447454E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999995937801155	WITHOUT_CLASSIFICATION	4.0621988440834023E-7	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999998925914951	WITHOUT_CLASSIFICATION	1.0740850486022152E-7	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999966863325	WITHOUT_CLASSIFICATION	3.3136673940964175E-9	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999847407746	WITHOUT_CLASSIFICATION	1.525922536572018E-8	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999681523453534	WITHOUT_CLASSIFICATION	3.184765464651033E-5	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999998829230048	WITHOUT_CLASSIFICATION	1.1707699519601913E-7	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999863370086	WITHOUT_CLASSIFICATION	1.3662991490743419E-8	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999999773598225	WITHOUT_CLASSIFICATION	2.2640177484193913E-8	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999886923177911	WITHOUT_CLASSIFICATION	1.1307682208962836E-5	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999994375384	WITHOUT_CLASSIFICATION	5.624616396765936E-10	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999991588279178	WITHOUT_CLASSIFICATION	8.411720822240967E-7	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997793202122486	WITHOUT_CLASSIFICATION	2.2067978775152912E-4	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999996824610916	WITHOUT_CLASSIFICATION	3.175389083928466E-6	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999999946948355	WITHOUT_CLASSIFICATION	5.305164500749845E-8	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999999963078471	WITHOUT_CLASSIFICATION	3.692152896962703E-8	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999964629455286	WITHOUT_CLASSIFICATION	3.5370544714126474E-6	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999985019298104	WITHOUT_CLASSIFICATION	1.498070189504257E-6	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999960521018019	WITHOUT_CLASSIFICATION	3.9478981981770065E-6	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999853039888	WITHOUT_CLASSIFICATION	1.4696011200701107E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999994909649	WITHOUT_CLASSIFICATION	5.090351832686551E-10	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999998837485	WITHOUT_CLASSIFICATION	1.1625146085120231E-10	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999780315980462	WITHOUT_CLASSIFICATION	2.196840195380287E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999998828837	WITHOUT_CLASSIFICATION	1.171163379355067E-10	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999993870024337	WITHOUT_CLASSIFICATION	6.129975662602429E-7	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999902041362	WITHOUT_CLASSIFICATION	9.795863688863213E-9	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999963423178712	WITHOUT_CLASSIFICATION	3.657682128798029E-6	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999957963278	WITHOUT_CLASSIFICATION	4.203672195741182E-9	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999913212861723	WITHOUT_CLASSIFICATION	8.678713827677522E-6	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999818197812	WITHOUT_CLASSIFICATION	1.818021880453796E-8	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999763629691	WITHOUT_CLASSIFICATION	2.3637030867067177E-8	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999998029424	WITHOUT_CLASSIFICATION	1.970575278710019E-10	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998355681855	WITHOUT_CLASSIFICATION	1.6443181455326727E-7	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999989967121095	WITHOUT_CLASSIFICATION	1.0032878904640882E-6	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999998912965491	WITHOUT_CLASSIFICATION	1.0870345102870719E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999984179693	WITHOUT_CLASSIFICATION	1.582030697165636E-8	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999999683366	WITHOUT_CLASSIFICATION	3.1663486084303967E-11	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999989350098	WITHOUT_CLASSIFICATION	1.0649902740926974E-9	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999986995384013	WITHOUT_CLASSIFICATION	1.300461598819616E-6	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999950762563447	WITHOUT_CLASSIFICATION	4.9237436553697015E-6	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999966045271	WITHOUT_CLASSIFICATION	3.3954729938171084E-9	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999956925692123	WITHOUT_CLASSIFICATION	4.307430787725425E-6	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9815151781449675	WITHOUT_CLASSIFICATION	0.01848482185503251	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999925567961598	WITHOUT_CLASSIFICATION	7.443203840080827E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999963962164	WITHOUT_CLASSIFICATION	3.603783492704369E-9	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995575859457715	WITHOUT_CLASSIFICATION	4.424140542283912E-4	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999987919884744	WITHOUT_CLASSIFICATION	1.2080115255433177E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999996387900765	WITHOUT_CLASSIFICATION	3.612099234067149E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999319972437	WITHOUT_CLASSIFICATION	6.800275624917226E-8	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999985275962	WITHOUT_CLASSIFICATION	1.4724037285003284E-9	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999988135149	WITHOUT_CLASSIFICATION	1.1864851036650288E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991230373058	WITHOUT_CLASSIFICATION	8.769626941490711E-7	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999629715895729	WITHOUT_CLASSIFICATION	3.702841042702743E-5	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.999999945747153	WITHOUT_CLASSIFICATION	5.425284698184987E-8	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999964198371092	WITHOUT_CLASSIFICATION	3.58016289088743E-6	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999997500234915	WITHOUT_CLASSIFICATION	2.4997650845049125E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991230373058	WITHOUT_CLASSIFICATION	8.769626941490711E-7	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999618998379672	WITHOUT_CLASSIFICATION	3.81001620328216E-5	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999932315139	WITHOUT_CLASSIFICATION	6.76848614574992E-9	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999728611929	WITHOUT_CLASSIFICATION	2.713880709555003E-8	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999995363590919	WITHOUT_CLASSIFICATION	4.636409081748054E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999991428905111	WITHOUT_CLASSIFICATION	8.571094889919055E-7	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999964845661	WITHOUT_CLASSIFICATION	3.5154339573296914E-9	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999779351	WITHOUT_CLASSIFICATION	2.2064997034779033E-11	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9996387373711785	WITHOUT_CLASSIFICATION	3.612626288216058E-4	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999810528916	WITHOUT_CLASSIFICATION	1.8947108412086574E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999269756075555	WITHOUT_CLASSIFICATION	7.302439244456473E-5	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998197610107296	WITHOUT_CLASSIFICATION	1.8023898927035784E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999436354189627	WITHOUT_CLASSIFICATION	5.63645810372751E-5	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999987387751377	WITHOUT_CLASSIFICATION	1.2612248622928344E-6	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9991903795195474	WITHOUT_CLASSIFICATION	8.096204804525425E-4	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999998057084967	WITHOUT_CLASSIFICATION	1.9429150341076863E-7	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999999924243934	WITHOUT_CLASSIFICATION	7.575606571560705E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999677579591	WITHOUT_CLASSIFICATION	3.2242041023762644E-8	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999995249960917	WITHOUT_CLASSIFICATION	4.7500390826387103E-7	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999996393016573	WITHOUT_CLASSIFICATION	3.606983427669675E-7	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.99913929783488	WITHOUT_CLASSIFICATION	8.607021651199194E-4	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999992247967533	WITHOUT_CLASSIFICATION	7.752032468252166E-7	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9982504669273906	WITHOUT_CLASSIFICATION	0.001749533072609466	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.99996284975666	WITHOUT_CLASSIFICATION	3.715024333996471E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999997465578971	WITHOUT_CLASSIFICATION	2.534421028812838E-7	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999983361137	WITHOUT_CLASSIFICATION	1.663886303892073E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999982211825	WITHOUT_CLASSIFICATION	1.778817559885892E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999995367286	WITHOUT_CLASSIFICATION	4.632713965937935E-9	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999970469913971	WITHOUT_CLASSIFICATION	2.953008602857419E-6	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999645338137	WITHOUT_CLASSIFICATION	3.5466186302531814E-7	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999638075769671	WITHOUT_CLASSIFICATION	3.6192423032786245E-5	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9625164927920776	WITHOUT_CLASSIFICATION	0.0374835072079224	IMPLEMENTATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999999017305021	WITHOUT_CLASSIFICATION	9.82694977906247E-8	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999910543060642	WITHOUT_CLASSIFICATION	8.945693935778089E-6	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999989192983108	WITHOUT_CLASSIFICATION	1.080701689267701E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999999964059982	WITHOUT_CLASSIFICATION	3.594001802310742E-8	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999916425045	WITHOUT_CLASSIFICATION	8.357495435775164E-9	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999984242485	WITHOUT_CLASSIFICATION	1.5757515491672636E-9	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999999924216	WITHOUT_CLASSIFICATION	7.578406466869882E-12	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999702116478056	WITHOUT_CLASSIFICATION	2.9788352194310408E-5	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999996967148	WITHOUT_CLASSIFICATION	3.0328524877327133E-10	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999591950637	WITHOUT_CLASSIFICATION	4.080493630608746E-8	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998151706546493	WITHOUT_CLASSIFICATION	1.8482934535070728E-4	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998151706546493	WITHOUT_CLASSIFICATION	1.8482934535070728E-4	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999999834887194	WITHOUT_CLASSIFICATION	1.6511280525276148E-8	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997743417117	WITHOUT_CLASSIFICATION	2.256582882840155E-7	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999690220621	WITHOUT_CLASSIFICATION	3.097793788026843E-8	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999991965710229	WITHOUT_CLASSIFICATION	8.034289770536289E-7	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999850267726915	WITHOUT_CLASSIFICATION	1.4973227308545354E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999850267726915	WITHOUT_CLASSIFICATION	1.4973227308545354E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9999833315856226	WITHOUT_CLASSIFICATION	1.6668414377376156E-5	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999999886383	WITHOUT_CLASSIFICATION	1.1361725862950834E-11	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999999952892	WITHOUT_CLASSIFICATION	4.710726763789768E-12	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999959091266	WITHOUT_CLASSIFICATION	4.090873443528719E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999966600669782	WITHOUT_CLASSIFICATION	3.339933021770117E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996495332122	WITHOUT_CLASSIFICATION	3.5046678781293117E-7	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999988506908801	WITHOUT_CLASSIFICATION	1.1493091199163915E-6	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999986062480993	WITHOUT_CLASSIFICATION	1.393751900767885E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999986070572844	WITHOUT_CLASSIFICATION	1.3929427156795841E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999210766467	WITHOUT_CLASSIFICATION	7.89233532890976E-8	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999997102435173	WITHOUT_CLASSIFICATION	2.8975648271240687E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999332012277	WITHOUT_CLASSIFICATION	6.679877233564388E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999332012277	WITHOUT_CLASSIFICATION	6.679877233564388E-8	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999800211	WITHOUT_CLASSIFICATION	1.9978918592481582E-11	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999971147004512	WITHOUT_CLASSIFICATION	2.8852995489189988E-6	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999998430429811	WITHOUT_CLASSIFICATION	1.5695701899283088E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999999986516829	WITHOUT_CLASSIFICATION	1.3483171881658042E-9	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999996785116724	WITHOUT_CLASSIFICATION	3.214883275454491E-7	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999973707097	WITHOUT_CLASSIFICATION	2.6292902891601708E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800639904513	WITHOUT_CLASSIFICATION	1.1993600954880628E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999984241523963	WITHOUT_CLASSIFICATION	1.5758476037258465E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999999955673453	WITHOUT_CLASSIFICATION	4.4326546969199025E-8	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999965992058552	WITHOUT_CLASSIFICATION	3.40079414470933E-6	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999010646812	WITHOUT_CLASSIFICATION	9.893531886601916E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999269756075555	WITHOUT_CLASSIFICATION	7.302439244456473E-5	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999973794480098	WITHOUT_CLASSIFICATION	2.6205519901249328E-6	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999994954876574	WITHOUT_CLASSIFICATION	5.0451234260352885E-6	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999992044474075	WITHOUT_CLASSIFICATION	7.955525925459919E-7	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.999992252833986	WITHOUT_CLASSIFICATION	7.747166014114277E-6	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999988727215314	WITHOUT_CLASSIFICATION	1.1272784685398582E-6	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999933763689672	WITHOUT_CLASSIFICATION	6.623631032683844E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999252768752	WITHOUT_CLASSIFICATION	7.472312480039501E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999999753126503	WITHOUT_CLASSIFICATION	2.468734973314296E-8	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999994472789682	WITHOUT_CLASSIFICATION	5.52721031907782E-7	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998335677096563	WITHOUT_CLASSIFICATION	1.664322903438325E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998335677096563	WITHOUT_CLASSIFICATION	1.664322903438325E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999919706629078	WITHOUT_CLASSIFICATION	8.029337092149376E-6	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999999868013126	WITHOUT_CLASSIFICATION	1.3198687269770877E-8	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999938271571724	WITHOUT_CLASSIFICATION	6.17284282747993E-6	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999837752159932	WITHOUT_CLASSIFICATION	1.622478400673554E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999940128472106	WITHOUT_CLASSIFICATION	5.987152789499678E-6	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999998716874339	WITHOUT_CLASSIFICATION	1.283125661552809E-7	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999857150835968	WITHOUT_CLASSIFICATION	1.4284916403352146E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999999988066	WITHOUT_CLASSIFICATION	1.1933680665947321E-12	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999978562051971	WITHOUT_CLASSIFICATION	2.1437948029592954E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999858833456311	WITHOUT_CLASSIFICATION	1.4116654368895616E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982288690172	WITHOUT_CLASSIFICATION	1.7711309826673095E-6	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998276097710933	WITHOUT_CLASSIFICATION	1.723902289067331E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9998657724582815	WITHOUT_CLASSIFICATION	1.3422754171848314E-4	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999991319423	WITHOUT_CLASSIFICATION	8.680576962602544E-10	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999997899586	WITHOUT_CLASSIFICATION	2.1004138444704302E-10	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999986308809046	WITHOUT_CLASSIFICATION	1.36911909540219E-6	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999999355680764	WITHOUT_CLASSIFICATION	6.44319235879411E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999990341875653	WITHOUT_CLASSIFICATION	9.658124346816541E-7	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9993595268312854	WITHOUT_CLASSIFICATION	6.404731687146106E-4	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999999933	WITHOUT_CLASSIFICATION	6.573933898638955E-15	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999946995	WITHOUT_CLASSIFICATION	5.3005025389854024E-12	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999999316521	WITHOUT_CLASSIFICATION	6.834796553770762E-11	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999132078427	WITHOUT_CLASSIFICATION	8.67921573862119E-8	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999990596	WITHOUT_CLASSIFICATION	9.403690034577325E-13	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999684039022	WITHOUT_CLASSIFICATION	3.159609783232558E-8	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999684039022	WITHOUT_CLASSIFICATION	3.159609783232558E-8	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999953508586029	WITHOUT_CLASSIFICATION	4.649141397086784E-6	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9981795751000144	WITHOUT_CLASSIFICATION	0.001820424899985516	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999769548058	WITHOUT_CLASSIFICATION	2.3045194185509613E-8	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999998750766655	WITHOUT_CLASSIFICATION	1.2492333438401396E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999997841993807	WITHOUT_CLASSIFICATION	2.1580061926175468E-7	IMPLEMENTATION
