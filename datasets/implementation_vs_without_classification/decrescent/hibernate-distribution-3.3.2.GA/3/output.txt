todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9886361202973033	WITHOUT_CLASSIFICATION	0.011363879702696837	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9886361202973033	WITHOUT_CLASSIFICATION	0.011363879702696837	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9926798615121618	WITHOUT_CLASSIFICATION	0.007320138487838181	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.6296796494416768	WITHOUT_CLASSIFICATION	0.37032035055832324	IMPLEMENTATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9794988543541999	WITHOUT_CLASSIFICATION	0.02050114564580011	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.8135430577128471	IMPLEMENTATION	0.18645694228715304	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.8953974973185216	WITHOUT_CLASSIFICATION	0.10460250268147848	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9933176200849018	WITHOUT_CLASSIFICATION	0.006682379915098172	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9980154731899382	WITHOUT_CLASSIFICATION	0.001984526810061822	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.6221171155384478	IMPLEMENTATION	0.3778828844615523	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9456366039013098	WITHOUT_CLASSIFICATION	0.05436339609869029	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.8311380670285862	IMPLEMENTATION	0.16886193297141386	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6865715561110417	WITHOUT_CLASSIFICATION	0.31342844388895824	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.6865715561110417	WITHOUT_CLASSIFICATION	0.31342844388895824	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9226291473608641	IMPLEMENTATION	0.07737085263913597	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9700158984594253	IMPLEMENTATION	0.02998410154057477	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9837672521352568	IMPLEMENTATION	0.016232747864743154	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9999052966835674	WITHOUT_CLASSIFICATION	9.47033164324963E-5	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999990575587914	WITHOUT_CLASSIFICATION	9.42441208606037E-7	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9949273242406403	WITHOUT_CLASSIFICATION	0.0050726757593596615	IMPLEMENTATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.5364924917501122	IMPLEMENTATION	0.4635075082498878	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9999822095770333	WITHOUT_CLASSIFICATION	1.7790422966764902E-5	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9762545386640603	WITHOUT_CLASSIFICATION	0.023745461335939615	IMPLEMENTATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9990842058924814	IMPLEMENTATION	9.157941075185329E-4	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9990842058924814	IMPLEMENTATION	9.157941075185329E-4	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9978140082128477	IMPLEMENTATION	0.002185991787152325	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9708130211097947	WITHOUT_CLASSIFICATION	0.029186978890205266	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9472727317208522	IMPLEMENTATION	0.05272726827914779	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.6928501725831415	WITHOUT_CLASSIFICATION	0.3071498274168585	IMPLEMENTATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.953419289248083	IMPLEMENTATION	0.04658071075191705	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9727872507480878	WITHOUT_CLASSIFICATION	0.027212749251912204	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.5863390834513746	IMPLEMENTATION	0.41366091654862525	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9996651676246853	WITHOUT_CLASSIFICATION	3.348323753146616E-4	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8245497535285948	IMPLEMENTATION	0.17545024647140509	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9386045374448775	IMPLEMENTATION	0.06139546255512263	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.8413246034551422	WITHOUT_CLASSIFICATION	0.15867539654485777	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.5821654424708604	IMPLEMENTATION	0.4178345575291396	WITHOUT_CLASSIFICATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.8581464659179333	WITHOUT_CLASSIFICATION	0.14185353408206663	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.9345572362138694	WITHOUT_CLASSIFICATION	0.06544276378613058	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9861857776520394	IMPLEMENTATION	0.01381422234796064	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9861857776520394	IMPLEMENTATION	0.01381422234796064	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.8354786621653715	WITHOUT_CLASSIFICATION	0.1645213378346285	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.99969983774109	WITHOUT_CLASSIFICATION	3.0016225890999585E-4	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9943324351831652	WITHOUT_CLASSIFICATION	0.005667564816834803	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.8073711079883722	IMPLEMENTATION	0.19262889201162783	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.5840988335754371	IMPLEMENTATION	0.41590116642456276	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.9753053770894213	WITHOUT_CLASSIFICATION	0.02469462291057872	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.6087745461475546	WITHOUT_CLASSIFICATION	0.3912254538524456	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.9999183418507462	WITHOUT_CLASSIFICATION	8.165814925366898E-5	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.9237185371967822	IMPLEMENTATION	0.0762814628032178	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9922590745057336	WITHOUT_CLASSIFICATION	0.007740925494266434	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9811074332940051	IMPLEMENTATION	0.01889256670599495	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9837008856402922	IMPLEMENTATION	0.016299114359707798	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.973777315163908	IMPLEMENTATION	0.026222684836091994	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.963434671587337	IMPLEMENTATION	0.036565328412662974	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9991427602246469	IMPLEMENTATION	8.572397753531379E-4	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.963434671587337	IMPLEMENTATION	0.036565328412662974	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9993062031667884	IMPLEMENTATION	6.937968332115425E-4	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.5363565041704114	IMPLEMENTATION	0.4636434958295887	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.963434671587337	IMPLEMENTATION	0.036565328412662974	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.999993677753364	WITHOUT_CLASSIFICATION	6.322246635955681E-6	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.999993677753364	WITHOUT_CLASSIFICATION	6.322246635955681E-6	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9910945511492337	IMPLEMENTATION	0.008905448850766265	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9996460262522298	WITHOUT_CLASSIFICATION	3.5397374777014566E-4	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999578933160985	WITHOUT_CLASSIFICATION	4.210668390134364E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999889287830954	WITHOUT_CLASSIFICATION	1.1071216904530315E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999889287830954	WITHOUT_CLASSIFICATION	1.1071216904530315E-5	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999939978815839	WITHOUT_CLASSIFICATION	6.002118415994411E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999469519011	WITHOUT_CLASSIFICATION	5.304809889638565E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999994649943005	WITHOUT_CLASSIFICATION	5.350056994944304E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999984678576163	WITHOUT_CLASSIFICATION	1.5321423836599998E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999984678576163	WITHOUT_CLASSIFICATION	1.5321423836599998E-6	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999467884529	WITHOUT_CLASSIFICATION	5.3211546982775854E-8	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999388865614	WITHOUT_CLASSIFICATION	6.111343867094126E-8	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999995099532704	WITHOUT_CLASSIFICATION	4.900467295286412E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999933410301253	WITHOUT_CLASSIFICATION	6.658969874703566E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998192026364	WITHOUT_CLASSIFICATION	1.8079736361042689E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998192026364	WITHOUT_CLASSIFICATION	1.8079736361042689E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999817839077288	WITHOUT_CLASSIFICATION	1.8216092271169048E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9991817016485339	WITHOUT_CLASSIFICATION	8.182983514661505E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.9999871954783521	WITHOUT_CLASSIFICATION	1.2804521647868115E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999996357996	WITHOUT_CLASSIFICATION	3.6420037986231985E-10	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999731421549	WITHOUT_CLASSIFICATION	2.685784513334804E-8	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999945404208117	WITHOUT_CLASSIFICATION	5.459579188305446E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9997747674567086	WITHOUT_CLASSIFICATION	2.2523254329131706E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999963688421728	WITHOUT_CLASSIFICATION	3.631157827208878E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999393169147006	WITHOUT_CLASSIFICATION	6.068308529931025E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999421309939571	WITHOUT_CLASSIFICATION	5.7869006042889E-5	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999673734982913	WITHOUT_CLASSIFICATION	3.2626501708744674E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9998936213988042	WITHOUT_CLASSIFICATION	1.0637860119566804E-4	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999995687764	WITHOUT_CLASSIFICATION	4.312236355809337E-10	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999292294230835	WITHOUT_CLASSIFICATION	7.077057691647671E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999292294230835	WITHOUT_CLASSIFICATION	7.077057691647671E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9998347033399426	WITHOUT_CLASSIFICATION	1.6529666005739632E-4	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999476739861243	WITHOUT_CLASSIFICATION	5.232601387568887E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999851566127	WITHOUT_CLASSIFICATION	1.4843387182469145E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9997376135430706	WITHOUT_CLASSIFICATION	2.623864569294219E-4	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9760707295493155	WITHOUT_CLASSIFICATION	0.02392927045068453	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999998046987375	WITHOUT_CLASSIFICATION	1.9530126257961634E-7	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999942393532307	WITHOUT_CLASSIFICATION	5.76064676923825E-6	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999985806847878	WITHOUT_CLASSIFICATION	1.4193152122280575E-6	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999836803615	WITHOUT_CLASSIFICATION	1.6319638474326493E-8	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999938942182889	WITHOUT_CLASSIFICATION	6.1057817111339814E-6	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999981233279424	WITHOUT_CLASSIFICATION	1.8766720577226003E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999991775078226	WITHOUT_CLASSIFICATION	8.224921773620633E-7	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999836276081	WITHOUT_CLASSIFICATION	1.6372391952621637E-8	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999132966300323	WITHOUT_CLASSIFICATION	8.670336996776725E-5	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999935003774466	WITHOUT_CLASSIFICATION	6.499622553392572E-6	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999081887451595	WITHOUT_CLASSIFICATION	9.181125484040532E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996004525715066	WITHOUT_CLASSIFICATION	3.995474284934229E-4	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.999999580417833	WITHOUT_CLASSIFICATION	4.195821669756747E-7	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994855752218	WITHOUT_CLASSIFICATION	5.144247781690149E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999683892904337	WITHOUT_CLASSIFICATION	3.1610709566264466E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999998454179913	WITHOUT_CLASSIFICATION	1.5458200870886623E-7	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999874989021527	WITHOUT_CLASSIFICATION	1.2501097847230218E-5	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999683892904337	WITHOUT_CLASSIFICATION	3.1610709566264466E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999874989021527	WITHOUT_CLASSIFICATION	1.2501097847230218E-5	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999675772904	WITHOUT_CLASSIFICATION	3.242270964922984E-8	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9995791812067588	WITHOUT_CLASSIFICATION	4.20818793241146E-4	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999481484073359	WITHOUT_CLASSIFICATION	5.185159266420474E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999447408629994	WITHOUT_CLASSIFICATION	5.525913700059713E-5	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999751698427	WITHOUT_CLASSIFICATION	2.4830157299096848E-8	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999986483907	WITHOUT_CLASSIFICATION	1.3516091942143805E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9992046673486691	WITHOUT_CLASSIFICATION	7.953326513308679E-4	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9986593041124937	WITHOUT_CLASSIFICATION	0.001340695887506194	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9983639882908667	WITHOUT_CLASSIFICATION	0.001636011709133325	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9999277883157891	WITHOUT_CLASSIFICATION	7.221168421089984E-5	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999935999365768	WITHOUT_CLASSIFICATION	6.400063423258339E-6	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999874989021527	WITHOUT_CLASSIFICATION	1.2501097847230218E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999855480781	WITHOUT_CLASSIFICATION	1.445192186809237E-8	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9980728756141711	WITHOUT_CLASSIFICATION	0.0019271243858288616	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999893243535183	WITHOUT_CLASSIFICATION	1.0675646481754877E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999999999946172	WITHOUT_CLASSIFICATION	5.3828117964537186E-11	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999997847665993	WITHOUT_CLASSIFICATION	2.152334006825606E-7	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999932882797608	WITHOUT_CLASSIFICATION	6.711720239234336E-6	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999795658462495	WITHOUT_CLASSIFICATION	2.0434153750500229E-4	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999017913938	WITHOUT_CLASSIFICATION	9.820860620312764E-7	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999995951598154	WITHOUT_CLASSIFICATION	4.048401846607983E-7	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999880484471	WITHOUT_CLASSIFICATION	1.1951552809209723E-8	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999969630328526	WITHOUT_CLASSIFICATION	3.036967147423034E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999969295159603	WITHOUT_CLASSIFICATION	3.070484039697119E-6	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9619419769127806	WITHOUT_CLASSIFICATION	0.03805802308721948	IMPLEMENTATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999989417958404	WITHOUT_CLASSIFICATION	1.0582041596533403E-6	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999962022428	WITHOUT_CLASSIFICATION	3.797757147489333E-9	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9885460542149225	WITHOUT_CLASSIFICATION	0.01145394578507753	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999682588347	WITHOUT_CLASSIFICATION	3.1741165176405215E-8	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999746446829	WITHOUT_CLASSIFICATION	2.535531710309801E-8	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999525212522	WITHOUT_CLASSIFICATION	4.747874780750207E-7	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999851132510521	WITHOUT_CLASSIFICATION	1.4886748947983652E-5	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999990002816	WITHOUT_CLASSIFICATION	9.997184184690065E-10	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999982973909614	WITHOUT_CLASSIFICATION	1.7026090386712357E-6	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999997840029111	WITHOUT_CLASSIFICATION	2.1599708900023847E-7	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999990481213	WITHOUT_CLASSIFICATION	9.518786852828177E-10	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999982973909614	WITHOUT_CLASSIFICATION	1.7026090386712357E-6	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999852732272	WITHOUT_CLASSIFICATION	1.4726772826670997E-8	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998376282825	WITHOUT_CLASSIFICATION	1.6237171758048928E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999683892904337	WITHOUT_CLASSIFICATION	3.1610709566264466E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999769463538001	WITHOUT_CLASSIFICATION	2.3053646199904653E-5	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.999995089384635	WITHOUT_CLASSIFICATION	4.910615364931022E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999934249004264	WITHOUT_CLASSIFICATION	6.575099573545705E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999934249004264	WITHOUT_CLASSIFICATION	6.575099573545705E-6	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999913140526058	WITHOUT_CLASSIFICATION	8.685947394202926E-6	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999662408623	WITHOUT_CLASSIFICATION	3.37591376528558E-8	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999998803497664	WITHOUT_CLASSIFICATION	1.1965023355322452E-7	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999988603248	WITHOUT_CLASSIFICATION	1.1396752021625209E-9	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999998783905217	WITHOUT_CLASSIFICATION	1.2160947829950418E-6	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999288794486758	WITHOUT_CLASSIFICATION	7.112055132420173E-5	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999535132817604	WITHOUT_CLASSIFICATION	4.648671823957367E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.9992843328038123	WITHOUT_CLASSIFICATION	7.156671961876088E-4	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999983810291772	WITHOUT_CLASSIFICATION	1.6189708228136682E-6	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998057148892	WITHOUT_CLASSIFICATION	1.9428511080410786E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999979423104581	WITHOUT_CLASSIFICATION	2.057689541770961E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999979423104581	WITHOUT_CLASSIFICATION	2.057689541770961E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999378749289229	WITHOUT_CLASSIFICATION	6.212507107714659E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999965523594753	WITHOUT_CLASSIFICATION	3.4476405247751413E-6	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999999628487031	WITHOUT_CLASSIFICATION	3.7151296913953507E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999979423104581	WITHOUT_CLASSIFICATION	2.057689541770961E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999378749289229	WITHOUT_CLASSIFICATION	6.212507107714659E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999378749289229	WITHOUT_CLASSIFICATION	6.212507107714659E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999311195094	WITHOUT_CLASSIFICATION	6.888049059097866E-8	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9997026049053755	WITHOUT_CLASSIFICATION	2.9739509462454577E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999998339820654	WITHOUT_CLASSIFICATION	1.6601793456806098E-7	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999000269679589	WITHOUT_CLASSIFICATION	9.99730320411871E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.99974920680316	WITHOUT_CLASSIFICATION	2.5079319684001333E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.99974920680316	WITHOUT_CLASSIFICATION	2.5079319684001333E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999999613650688	WITHOUT_CLASSIFICATION	3.863493120386389E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999995273664758	WITHOUT_CLASSIFICATION	4.7263352424896537E-7	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.999998254382613	WITHOUT_CLASSIFICATION	1.7456173869729512E-6	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998422928759	WITHOUT_CLASSIFICATION	1.5770712414761267E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999998422928759	WITHOUT_CLASSIFICATION	1.5770712414761267E-7	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999986153294854	WITHOUT_CLASSIFICATION	1.384670514537006E-6	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998943217111324	WITHOUT_CLASSIFICATION	1.0567828886772125E-4	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999991169381652	WITHOUT_CLASSIFICATION	8.830618348035281E-6	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999987724498	WITHOUT_CLASSIFICATION	1.2275501783895715E-9	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999582459991	WITHOUT_CLASSIFICATION	4.1754000846255276E-8	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999946228943923	WITHOUT_CLASSIFICATION	5.37710560762367E-6	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999999336662768	WITHOUT_CLASSIFICATION	6.633372320075531E-7	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999730954553344	WITHOUT_CLASSIFICATION	2.6904544665591853E-5	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999980347385597	WITHOUT_CLASSIFICATION	1.965261440320682E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999991169381652	WITHOUT_CLASSIFICATION	8.830618348035281E-6	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999947227374595	WITHOUT_CLASSIFICATION	5.277262540548549E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998927028730171	WITHOUT_CLASSIFICATION	1.0729712698283142E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998927028730171	WITHOUT_CLASSIFICATION	1.0729712698283142E-4	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999998266438663	WITHOUT_CLASSIFICATION	1.733561337039118E-6	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999856954526416	WITHOUT_CLASSIFICATION	1.4304547358401805E-5	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999615095511	WITHOUT_CLASSIFICATION	3.8490448956824597E-8	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9993758562666777	WITHOUT_CLASSIFICATION	6.24143733322374E-4	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999991721934107	WITHOUT_CLASSIFICATION	8.278065893144201E-7	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999718570616357	WITHOUT_CLASSIFICATION	2.8142938364272938E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9999651146720108	WITHOUT_CLASSIFICATION	3.488532798919594E-5	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999995134859699	WITHOUT_CLASSIFICATION	4.865140299899804E-7	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999926799988179	WITHOUT_CLASSIFICATION	7.320001182050314E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999497218194	WITHOUT_CLASSIFICATION	5.027818048923974E-8	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999497218194	WITHOUT_CLASSIFICATION	5.027818048923974E-8	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999989752828994	WITHOUT_CLASSIFICATION	1.0247171006630823E-6	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999578933160985	WITHOUT_CLASSIFICATION	4.210668390134364E-5	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997937496125	WITHOUT_CLASSIFICATION	2.0625038757883086E-7	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999993041297086	WITHOUT_CLASSIFICATION	6.95870291404441E-7	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999889287830954	WITHOUT_CLASSIFICATION	1.1071216904530315E-5	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999894114133143	WITHOUT_CLASSIFICATION	1.05885866857894E-5	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.999999790993623	WITHOUT_CLASSIFICATION	2.0900637699284456E-7	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999998528241909	WITHOUT_CLASSIFICATION	1.4717580904265707E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999943872968544	WITHOUT_CLASSIFICATION	5.6127031455029795E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999954580563716	WITHOUT_CLASSIFICATION	4.541943628477608E-6	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.999938265176502	WITHOUT_CLASSIFICATION	6.173482349803031E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9998916423136919	WITHOUT_CLASSIFICATION	1.0835768630809893E-4	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999978513519554	WITHOUT_CLASSIFICATION	2.1486480446198425E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999469519011	WITHOUT_CLASSIFICATION	5.304809889638565E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999982930924778	WITHOUT_CLASSIFICATION	1.706907522196567E-6	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999982930924778	WITHOUT_CLASSIFICATION	1.706907522196567E-6	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999998348049971	WITHOUT_CLASSIFICATION	1.6519500299107296E-7	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999971922772956	WITHOUT_CLASSIFICATION	2.8077227043448115E-6	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999989389583787	WITHOUT_CLASSIFICATION	1.06104162134284E-6	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.999996675657235	WITHOUT_CLASSIFICATION	3.3243427648882104E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999838404553295	WITHOUT_CLASSIFICATION	1.6159544670547802E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999986160035718	WITHOUT_CLASSIFICATION	1.3839964283194324E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999984678576163	WITHOUT_CLASSIFICATION	1.5321423836599998E-6	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999878660111333	WITHOUT_CLASSIFICATION	1.213398886661287E-5	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999977910974994	WITHOUT_CLASSIFICATION	2.2089025006196087E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999969296647826	WITHOUT_CLASSIFICATION	3.0703352173007245E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999971125725922	WITHOUT_CLASSIFICATION	2.88742740790852E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999898054169774	WITHOUT_CLASSIFICATION	1.0194583022603099E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.9999214814776487	WITHOUT_CLASSIFICATION	7.851852235127783E-5	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999995231196328	WITHOUT_CLASSIFICATION	4.768803672332175E-7	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999297934126	WITHOUT_CLASSIFICATION	7.020658740291085E-8	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999997259921115	WITHOUT_CLASSIFICATION	2.740078884637361E-7	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999990146904988	WITHOUT_CLASSIFICATION	9.853095012037902E-7	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999756116348388	WITHOUT_CLASSIFICATION	2.4388365161156867E-5	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.99999994369687	WITHOUT_CLASSIFICATION	5.630313000696551E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999552842604068	WITHOUT_CLASSIFICATION	4.471573959312469E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999889287830954	WITHOUT_CLASSIFICATION	1.1071216904530315E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999889287830954	WITHOUT_CLASSIFICATION	1.1071216904530315E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9998916423136919	WITHOUT_CLASSIFICATION	1.0835768630809893E-4	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999982930924778	WITHOUT_CLASSIFICATION	1.706907522196567E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999995231196328	WITHOUT_CLASSIFICATION	4.768803672332175E-7	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999467884529	WITHOUT_CLASSIFICATION	5.3211546982775854E-8	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999999398270794	WITHOUT_CLASSIFICATION	6.017292066524544E-8	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999989260088619	WITHOUT_CLASSIFICATION	1.0739911382291273E-6	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999972604062326	WITHOUT_CLASSIFICATION	2.739593767328206E-6	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999758035779194	WITHOUT_CLASSIFICATION	2.419642208059164E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999989361931817	WITHOUT_CLASSIFICATION	1.0638068182566563E-6	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999523218897277	WITHOUT_CLASSIFICATION	4.7678110272218026E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999999356023718	WITHOUT_CLASSIFICATION	6.439762819455804E-7	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999472871391798	WITHOUT_CLASSIFICATION	5.27128608202926E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999996295405514	WITHOUT_CLASSIFICATION	3.704594485676984E-7	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999852627782085	WITHOUT_CLASSIFICATION	1.4737221791427686E-5	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999852627782085	WITHOUT_CLASSIFICATION	1.4737221791427686E-5	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998994160075	WITHOUT_CLASSIFICATION	1.0058399245633051E-7	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999997563823204	WITHOUT_CLASSIFICATION	2.43617679517535E-7	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999817155818277	WITHOUT_CLASSIFICATION	1.828441817236002E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9997568690553824	WITHOUT_CLASSIFICATION	2.4313094461751923E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999994073788168	WITHOUT_CLASSIFICATION	5.926211832276642E-7	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999809577752	WITHOUT_CLASSIFICATION	1.9042224697298656E-8	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.9999984461864203	WITHOUT_CLASSIFICATION	1.5538135796413971E-6	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999388865614	WITHOUT_CLASSIFICATION	6.111343867094126E-8	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.9999750434711854	WITHOUT_CLASSIFICATION	2.4956528814679972E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999985927164097	WITHOUT_CLASSIFICATION	1.4072835903489E-6	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.9999985927164097	WITHOUT_CLASSIFICATION	1.4072835903489E-6	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999984224435595	WITHOUT_CLASSIFICATION	1.5775564405587638E-6	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999996695118338	WITHOUT_CLASSIFICATION	3.3048816614220853E-7	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.9999856970884682	WITHOUT_CLASSIFICATION	1.430291153190411E-5	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999989270678126	WITHOUT_CLASSIFICATION	1.0729321874304201E-6	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999867144916327	WITHOUT_CLASSIFICATION	1.3285508367364707E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999889287830954	WITHOUT_CLASSIFICATION	1.1071216904530315E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9998916423136919	WITHOUT_CLASSIFICATION	1.0835768630809893E-4	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999469519011	WITHOUT_CLASSIFICATION	5.304809889638565E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999995231196328	WITHOUT_CLASSIFICATION	4.768803672332175E-7	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999995231196328	WITHOUT_CLASSIFICATION	4.768803672332175E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999045402996	WITHOUT_CLASSIFICATION	9.545970044581667E-8	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999045402996	WITHOUT_CLASSIFICATION	9.545970044581667E-8	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999984146610581	WITHOUT_CLASSIFICATION	1.5853389419623167E-6	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999546692172693	WITHOUT_CLASSIFICATION	4.533078273075757E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999546692172693	WITHOUT_CLASSIFICATION	4.533078273075757E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999769144490016	WITHOUT_CLASSIFICATION	2.3085550998393298E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999958756432964	WITHOUT_CLASSIFICATION	4.124356703615281E-6	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999989460250678	WITHOUT_CLASSIFICATION	1.0539749322737298E-6	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999997599985618	WITHOUT_CLASSIFICATION	2.4000143822977114E-7	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999999478454582	WITHOUT_CLASSIFICATION	5.215454177014635E-8	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999933410301253	WITHOUT_CLASSIFICATION	6.658969874703566E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999933410301253	WITHOUT_CLASSIFICATION	6.658969874703566E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9986194848685159	WITHOUT_CLASSIFICATION	0.0013805151314840725	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999988445701292	WITHOUT_CLASSIFICATION	1.1554298707546034E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999903005773007	WITHOUT_CLASSIFICATION	9.699422699361995E-6	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9999560977304057	WITHOUT_CLASSIFICATION	4.390226959421125E-5	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999973096835649	WITHOUT_CLASSIFICATION	2.6903164350587908E-6	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999447672585482	WITHOUT_CLASSIFICATION	5.523274145187654E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998192026364	WITHOUT_CLASSIFICATION	1.8079736361042689E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999964175402488	WITHOUT_CLASSIFICATION	3.5824597511537807E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999964175402488	WITHOUT_CLASSIFICATION	3.5824597511537807E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999817839077288	WITHOUT_CLASSIFICATION	1.8216092271169048E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999817839077288	WITHOUT_CLASSIFICATION	1.8216092271169048E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999707118637902	WITHOUT_CLASSIFICATION	2.928813620990522E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999707118637902	WITHOUT_CLASSIFICATION	2.928813620990522E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999831451254	WITHOUT_CLASSIFICATION	1.6854874589526444E-7	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999831451254	WITHOUT_CLASSIFICATION	1.6854874589526444E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999933410301253	WITHOUT_CLASSIFICATION	6.658969874703566E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.999998192026364	WITHOUT_CLASSIFICATION	1.8079736361042689E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999964175402488	WITHOUT_CLASSIFICATION	3.5824597511537807E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999964175402488	WITHOUT_CLASSIFICATION	3.5824597511537807E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.9999817839077288	WITHOUT_CLASSIFICATION	1.8216092271169048E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999707118637902	WITHOUT_CLASSIFICATION	2.928813620990522E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999707118637902	WITHOUT_CLASSIFICATION	2.928813620990522E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999831451254	WITHOUT_CLASSIFICATION	1.6854874589526444E-7	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999928769994759	WITHOUT_CLASSIFICATION	7.123000524089294E-6	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999998688453099	WITHOUT_CLASSIFICATION	1.311546900929228E-7	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.9999899713841052	WITHOUT_CLASSIFICATION	1.0028615894808398E-5	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998860609623618	WITHOUT_CLASSIFICATION	1.1393903763818918E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999930255033139	WITHOUT_CLASSIFICATION	6.9744966861205336E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999167115612959	WITHOUT_CLASSIFICATION	8.328843870398924E-5	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999991137342138	WITHOUT_CLASSIFICATION	8.862657863019214E-7	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999998580783958	WITHOUT_CLASSIFICATION	1.4192160422203763E-7	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999998495589024	WITHOUT_CLASSIFICATION	1.504410976066312E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999439845615	WITHOUT_CLASSIFICATION	5.6015438614229836E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999936599373174	WITHOUT_CLASSIFICATION	6.340062682615346E-6	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.999999875879981	WITHOUT_CLASSIFICATION	1.2412001896812606E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999913140526058	WITHOUT_CLASSIFICATION	8.685947394202926E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999167115612959	WITHOUT_CLASSIFICATION	8.328843870398924E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999167115612959	WITHOUT_CLASSIFICATION	8.328843870398924E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999167115612959	WITHOUT_CLASSIFICATION	8.328843870398924E-5	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999995824858373	WITHOUT_CLASSIFICATION	4.175141626489058E-7	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999981404389	WITHOUT_CLASSIFICATION	1.8595610989747984E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999981404389	WITHOUT_CLASSIFICATION	1.8595610989747984E-9	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999722390084	WITHOUT_CLASSIFICATION	2.7760991623040656E-8	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999999617555	WITHOUT_CLASSIFICATION	3.824463427011053E-11	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999989373812243	WITHOUT_CLASSIFICATION	1.0626187756640417E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999949009658194	WITHOUT_CLASSIFICATION	5.099034180614596E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999949009658194	WITHOUT_CLASSIFICATION	5.099034180614596E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999731421549	WITHOUT_CLASSIFICATION	2.685784513334804E-8	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9993602660828169	WITHOUT_CLASSIFICATION	6.397339171832213E-4	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9993602660828169	WITHOUT_CLASSIFICATION	6.397339171832213E-4	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999985577331714	WITHOUT_CLASSIFICATION	1.4422668286801758E-6	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999999838503552	WITHOUT_CLASSIFICATION	1.6149644798146262E-7	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999985908715	WITHOUT_CLASSIFICATION	1.4091285408563894E-9	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999785933337949	WITHOUT_CLASSIFICATION	2.140666620510123E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999499509434695	WITHOUT_CLASSIFICATION	5.004905653058019E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999176866079184	WITHOUT_CLASSIFICATION	8.231339208161966E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999945404208117	WITHOUT_CLASSIFICATION	5.459579188305446E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999441143046897	WITHOUT_CLASSIFICATION	5.588569531020149E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9773707220706895	WITHOUT_CLASSIFICATION	0.022629277929310538	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9996757722432615	WITHOUT_CLASSIFICATION	3.242277567384212E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999677831590211	WITHOUT_CLASSIFICATION	3.221684097880377E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999393169147006	WITHOUT_CLASSIFICATION	6.068308529931025E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999366266134	WITHOUT_CLASSIFICATION	6.337338663643752E-8	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999588860269252	WITHOUT_CLASSIFICATION	4.111397307475606E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999266442626	WITHOUT_CLASSIFICATION	7.335573742910493E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999393169147006	WITHOUT_CLASSIFICATION	6.068308529931025E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999987883448298	WITHOUT_CLASSIFICATION	1.2116551702025696E-6	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999882333130118	WITHOUT_CLASSIFICATION	1.1766686988180541E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999754349393519	WITHOUT_CLASSIFICATION	2.4565060648088757E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999548492796593	WITHOUT_CLASSIFICATION	4.5150720340655356E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999714408790124	WITHOUT_CLASSIFICATION	2.8559120987600444E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999875919556894	WITHOUT_CLASSIFICATION	1.240804431060063E-5	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999662199294377	WITHOUT_CLASSIFICATION	3.3780070562371164E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9998936213988042	WITHOUT_CLASSIFICATION	1.0637860119566804E-4	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999873551847971	WITHOUT_CLASSIFICATION	1.2644815202947553E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999995687764	WITHOUT_CLASSIFICATION	4.312236355809337E-10	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999471931660618	WITHOUT_CLASSIFICATION	5.2806833938035397E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999999868259746	WITHOUT_CLASSIFICATION	1.3174025353398864E-8	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9997688880527572	WITHOUT_CLASSIFICATION	2.311119472428535E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.999945404208117	WITHOUT_CLASSIFICATION	5.459579188305446E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999873551847971	WITHOUT_CLASSIFICATION	1.2644815202947553E-5	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999471931660618	WITHOUT_CLASSIFICATION	5.2806833938035397E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9997688880527572	WITHOUT_CLASSIFICATION	2.311119472428535E-4	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999958723739874	WITHOUT_CLASSIFICATION	4.127626012601742E-5	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.9999735788776202	WITHOUT_CLASSIFICATION	2.6421122379788103E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999699767054624	WITHOUT_CLASSIFICATION	3.0023294537592694E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999292294230835	WITHOUT_CLASSIFICATION	7.077057691647671E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999805718741085	WITHOUT_CLASSIFICATION	1.942812589150402E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999697882072939	WITHOUT_CLASSIFICATION	3.021179270624298E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.9999992551928205	WITHOUT_CLASSIFICATION	7.448071794076085E-7	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999997468579882	WITHOUT_CLASSIFICATION	2.5314201179009017E-6	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999994339627344	WITHOUT_CLASSIFICATION	5.660372655483863E-7	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999992807858974	WITHOUT_CLASSIFICATION	7.192141026704452E-7	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999993402078929	WITHOUT_CLASSIFICATION	6.597921071342479E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999046506903939	WITHOUT_CLASSIFICATION	9.534930960609593E-5	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999995936312799	WITHOUT_CLASSIFICATION	4.063687201869624E-7	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999935685272369	WITHOUT_CLASSIFICATION	6.431472763104917E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999534695782839	WITHOUT_CLASSIFICATION	4.653042171605761E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999728812758507	WITHOUT_CLASSIFICATION	2.711872414931059E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.9999476739861243	WITHOUT_CLASSIFICATION	5.232601387568887E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999991121205	WITHOUT_CLASSIFICATION	8.87879509539949E-10	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999519131999957	WITHOUT_CLASSIFICATION	4.8086800004348364E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999873551847971	WITHOUT_CLASSIFICATION	1.2644815202947553E-5	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999977344762856	WITHOUT_CLASSIFICATION	2.2655237144392052E-6	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999991238988291	WITHOUT_CLASSIFICATION	8.761011709285112E-7	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999996762189713	WITHOUT_CLASSIFICATION	3.237810286845266E-7	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999820366366892	WITHOUT_CLASSIFICATION	1.7963363310851178E-5	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999822251958497	WITHOUT_CLASSIFICATION	1.7774804150329682E-5	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999922234819191	WITHOUT_CLASSIFICATION	7.776518080915734E-6	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999982049403005	WITHOUT_CLASSIFICATION	1.7950596995553675E-6	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999998964106531	WITHOUT_CLASSIFICATION	1.0358934689977529E-6	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999976116814401	WITHOUT_CLASSIFICATION	2.3883185599777256E-6	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999265007486599	WITHOUT_CLASSIFICATION	7.349925134009657E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999408081362479	WITHOUT_CLASSIFICATION	5.919186375219611E-5	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999294574630005	WITHOUT_CLASSIFICATION	7.0542536999442E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9748502390831291	WITHOUT_CLASSIFICATION	0.025149760916870996	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9997376135430706	WITHOUT_CLASSIFICATION	2.623864569294219E-4	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999998192837477	WITHOUT_CLASSIFICATION	1.8071625221289594E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999999737229832	WITHOUT_CLASSIFICATION	2.6277016896558186E-8	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9999834100188731	WITHOUT_CLASSIFICATION	1.6589981126883872E-5	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999950691810442	WITHOUT_CLASSIFICATION	4.930818955800684E-6	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999897237951539	WITHOUT_CLASSIFICATION	1.0276204846093443E-5	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999809891815244	WITHOUT_CLASSIFICATION	1.9010818475537873E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9998658414768411	WITHOUT_CLASSIFICATION	1.3415852315888386E-4	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9997290541558567	WITHOUT_CLASSIFICATION	2.709458441433297E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999982175060924	WITHOUT_CLASSIFICATION	1.7824939076003612E-6	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.999999798616796	WITHOUT_CLASSIFICATION	2.013832039454466E-7	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999811994201298	WITHOUT_CLASSIFICATION	1.8800579870176584E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999811994201298	WITHOUT_CLASSIFICATION	1.8800579870176584E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999899902159147	WITHOUT_CLASSIFICATION	1.0009784085169759E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997940432671545	WITHOUT_CLASSIFICATION	2.0595673284559964E-4	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999665774895335	WITHOUT_CLASSIFICATION	3.342251046634E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999989352549452	WITHOUT_CLASSIFICATION	1.0647450547297732E-6	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999991654945677	WITHOUT_CLASSIFICATION	8.345054323851046E-7	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999996781213528	WITHOUT_CLASSIFICATION	3.218786471959945E-7	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999903428441949	WITHOUT_CLASSIFICATION	9.657155805212364E-6	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998034684908143	WITHOUT_CLASSIFICATION	1.9653150918578756E-4	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999995690096842	WITHOUT_CLASSIFICATION	4.309903158065159E-7	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999995717568801	WITHOUT_CLASSIFICATION	4.282431198617086E-7	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999936960544588	WITHOUT_CLASSIFICATION	6.303945541330472E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999997055062183	WITHOUT_CLASSIFICATION	2.944937816651772E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999960780063714	WITHOUT_CLASSIFICATION	3.921993628672034E-6	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999989598101812	WITHOUT_CLASSIFICATION	1.040189818790494E-6	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999937163931764	WITHOUT_CLASSIFICATION	6.283606823643626E-6	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999404568444545	WITHOUT_CLASSIFICATION	5.954315554547777E-5	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9991719992750026	WITHOUT_CLASSIFICATION	8.2800072499758E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999984467752866	WITHOUT_CLASSIFICATION	1.5532247134257907E-6	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947939492932	WITHOUT_CLASSIFICATION	5.206050706746316E-6	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999996158364567	WITHOUT_CLASSIFICATION	3.841635432423782E-7	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999748221721659	WITHOUT_CLASSIFICATION	2.517782783409121E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999991068985831	WITHOUT_CLASSIFICATION	8.931014169499677E-7	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999999203705437	WITHOUT_CLASSIFICATION	7.962945628910074E-7	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999598529534282	WITHOUT_CLASSIFICATION	4.014704657176702E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999982578445143	WITHOUT_CLASSIFICATION	1.7421554856497304E-6	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999810820165235	WITHOUT_CLASSIFICATION	1.89179834765399E-5	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999493845019849	WITHOUT_CLASSIFICATION	5.061549801518235E-5	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999982132067945	WITHOUT_CLASSIFICATION	1.7867932054998202E-6	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999997640169757	WITHOUT_CLASSIFICATION	2.3598302427605954E-7	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999830622968249	WITHOUT_CLASSIFICATION	1.6937703175100294E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999996158364567	WITHOUT_CLASSIFICATION	3.841635432423782E-7	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999929909895984	WITHOUT_CLASSIFICATION	7.009010401551768E-6	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999358093698129	WITHOUT_CLASSIFICATION	6.419063018706122E-5	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999389928255263	WITHOUT_CLASSIFICATION	6.100717447368469E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999817835698006	WITHOUT_CLASSIFICATION	1.8216430199475557E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999817835698006	WITHOUT_CLASSIFICATION	1.8216430199475557E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999994648077407	WITHOUT_CLASSIFICATION	5.351922592341811E-7	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999952728868061	WITHOUT_CLASSIFICATION	4.7271131938905416E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999962411258416	WITHOUT_CLASSIFICATION	3.758874158405513E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999962411258416	WITHOUT_CLASSIFICATION	3.758874158405513E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999982175060924	WITHOUT_CLASSIFICATION	1.7824939076003612E-6	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999999797015309	WITHOUT_CLASSIFICATION	2.0298469097564545E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999994481854209	WITHOUT_CLASSIFICATION	5.518145791944035E-7	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997652036995	WITHOUT_CLASSIFICATION	2.3479630060506463E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999989752828994	WITHOUT_CLASSIFICATION	1.0247171006630823E-6	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999994481854209	WITHOUT_CLASSIFICATION	5.518145791944035E-7	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999997652036995	WITHOUT_CLASSIFICATION	2.3479630060506463E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999991926899754	WITHOUT_CLASSIFICATION	8.073100246071684E-6	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999183327415	WITHOUT_CLASSIFICATION	8.166725848212714E-8	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999167755252	WITHOUT_CLASSIFICATION	8.322447473844395E-8	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999997719135533	WITHOUT_CLASSIFICATION	2.2808644674460337E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9980629697689536	WITHOUT_CLASSIFICATION	0.001937030231046457	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9985021960043908	WITHOUT_CLASSIFICATION	0.0014978039956092585	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999569529876	WITHOUT_CLASSIFICATION	4.3047012525888424E-8	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999569529876	WITHOUT_CLASSIFICATION	4.3047012525888424E-8	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999999694910706	WITHOUT_CLASSIFICATION	3.0508929430807104E-8	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999998264719356	WITHOUT_CLASSIFICATION	1.735280643843499E-7	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999633782920508	WITHOUT_CLASSIFICATION	3.662170794921041E-5	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999950379211	WITHOUT_CLASSIFICATION	4.962078864422423E-9	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999977977528247	WITHOUT_CLASSIFICATION	2.202247175184889E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999980806666021	WITHOUT_CLASSIFICATION	1.919333397962881E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999989752828994	WITHOUT_CLASSIFICATION	1.0247171006630823E-6	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.999998086402681	WITHOUT_CLASSIFICATION	1.913597319024887E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999982991152	WITHOUT_CLASSIFICATION	1.70088479769358E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999982991152	WITHOUT_CLASSIFICATION	1.70088479769358E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999974745824853	WITHOUT_CLASSIFICATION	2.5254175146979184E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999991926899754	WITHOUT_CLASSIFICATION	8.073100246071684E-6	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999418075260907	WITHOUT_CLASSIFICATION	5.819247390927842E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999585107731609	WITHOUT_CLASSIFICATION	4.148922683908135E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.998665894219585	WITHOUT_CLASSIFICATION	0.0013341057804149975	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996223803581	WITHOUT_CLASSIFICATION	3.7761964181193114E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999966185551783	WITHOUT_CLASSIFICATION	3.3814448217852565E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999991926899754	WITHOUT_CLASSIFICATION	8.073100246071684E-6	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996223803581	WITHOUT_CLASSIFICATION	3.7761964181193114E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999966185551783	WITHOUT_CLASSIFICATION	3.3814448217852565E-6	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999927922171604	WITHOUT_CLASSIFICATION	7.2077828396769715E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999900947450063	WITHOUT_CLASSIFICATION	9.90525499353437E-6	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999996222237261	WITHOUT_CLASSIFICATION	3.7777627395912444E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999991926899754	WITHOUT_CLASSIFICATION	8.073100246071684E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999991926899754	WITHOUT_CLASSIFICATION	8.073100246071684E-6	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999939185202424	WITHOUT_CLASSIFICATION	6.081479757540088E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999978552518071	WITHOUT_CLASSIFICATION	2.1447481928459846E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999947404892939	WITHOUT_CLASSIFICATION	5.259510706090143E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999132966300323	WITHOUT_CLASSIFICATION	8.670336996776725E-5	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999957081832246	WITHOUT_CLASSIFICATION	4.291816775466326E-6	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999974281862	WITHOUT_CLASSIFICATION	2.571813800367364E-9	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999755597559925	WITHOUT_CLASSIFICATION	2.4440244007377346E-5	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999977707799503	WITHOUT_CLASSIFICATION	2.2292200496698014E-6	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999986572620532	WITHOUT_CLASSIFICATION	1.3427379467975648E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999895279717478	WITHOUT_CLASSIFICATION	1.0472028252191233E-5	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999407590258704	WITHOUT_CLASSIFICATION	5.924097412953332E-5	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.998321829420148	WITHOUT_CLASSIFICATION	0.001678170579852076	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999999926295204	WITHOUT_CLASSIFICATION	7.370479605881361E-8	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999708263200697	WITHOUT_CLASSIFICATION	2.9173679930250452E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947573423815	WITHOUT_CLASSIFICATION	5.242657618455087E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999915541326562	WITHOUT_CLASSIFICATION	8.445867343715268E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999132966300323	WITHOUT_CLASSIFICATION	8.670336996776725E-5	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999993572629774	WITHOUT_CLASSIFICATION	6.427370225815519E-7	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999952683132025	WITHOUT_CLASSIFICATION	4.7316867975165895E-6	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998449070778	WITHOUT_CLASSIFICATION	1.5509292216117306E-7	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999544380839381	WITHOUT_CLASSIFICATION	4.5561916061790144E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999199201481529	WITHOUT_CLASSIFICATION	8.007985184706145E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999199201481529	WITHOUT_CLASSIFICATION	8.007985184706145E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999132966300323	WITHOUT_CLASSIFICATION	8.670336996776725E-5	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999506965249082	WITHOUT_CLASSIFICATION	4.93034750918078E-4	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999964694828	WITHOUT_CLASSIFICATION	3.5305173157597506E-9	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9839638682635979	WITHOUT_CLASSIFICATION	0.01603613173640203	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998938989522	WITHOUT_CLASSIFICATION	1.0610104785954316E-7	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999931825865921	WITHOUT_CLASSIFICATION	6.817413407987909E-6	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999615885316395	WITHOUT_CLASSIFICATION	3.8411468360413856E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999677102206488	WITHOUT_CLASSIFICATION	3.228977935127901E-5	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999986984118375	WITHOUT_CLASSIFICATION	1.301588162479947E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999987858268599	WITHOUT_CLASSIFICATION	1.214173140149265E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998861756245	WITHOUT_CLASSIFICATION	1.1382437552312678E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999963075382398	WITHOUT_CLASSIFICATION	3.6924617603653164E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999995818931177	WITHOUT_CLASSIFICATION	4.1810688232884487E-7	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9987995488656959	WITHOUT_CLASSIFICATION	0.0012004511343041175	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999925569451	WITHOUT_CLASSIFICATION	7.443054892469657E-8	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996952401063	WITHOUT_CLASSIFICATION	3.047598935811997E-7	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999691227367	WITHOUT_CLASSIFICATION	3.0877263223405225E-8	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999985570592257	WITHOUT_CLASSIFICATION	1.442940774328609E-6	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999954544277867	WITHOUT_CLASSIFICATION	4.545572213383282E-6	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999661140342	WITHOUT_CLASSIFICATION	3.3885965776077026E-8	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999457175811	WITHOUT_CLASSIFICATION	5.428241879119366E-8	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999951793989175	WITHOUT_CLASSIFICATION	4.820601082573573E-6	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999883251243169	WITHOUT_CLASSIFICATION	1.167487568310206E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996212558439196	WITHOUT_CLASSIFICATION	3.787441560804476E-4	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997034494567235	WITHOUT_CLASSIFICATION	2.965505432765233E-4	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994548474042131	WITHOUT_CLASSIFICATION	5.451525957869892E-4	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995464678383716	WITHOUT_CLASSIFICATION	4.5353216162840536E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980133993887136	WITHOUT_CLASSIFICATION	0.0019866006112863386	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991151856142589	WITHOUT_CLASSIFICATION	8.848143857409939E-4	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9898132506324374	WITHOUT_CLASSIFICATION	0.010186749367562621	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998087458240502	WITHOUT_CLASSIFICATION	1.9125417594976406E-4	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9999799100795772	WITHOUT_CLASSIFICATION	2.0089920422802293E-5	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999987964493606	WITHOUT_CLASSIFICATION	1.2035506393179255E-6	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999433383115343	WITHOUT_CLASSIFICATION	5.6661688465791455E-5	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999699949685977	WITHOUT_CLASSIFICATION	3.0005031402340426E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543660942185	WITHOUT_CLASSIFICATION	4.5633905781590135E-5	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993272024386852	WITHOUT_CLASSIFICATION	6.727975613147885E-4	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999569824717283	WITHOUT_CLASSIFICATION	4.301752827166373E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911615861737	WITHOUT_CLASSIFICATION	8.838413826267097E-6	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997260711961213	WITHOUT_CLASSIFICATION	0.0027392880387870975	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972066445933538	WITHOUT_CLASSIFICATION	0.0027933554066461933	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999988045997629	WITHOUT_CLASSIFICATION	1.1954002370784015E-6	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998090795730367	WITHOUT_CLASSIFICATION	1.9092042696338137E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9969646765632773	WITHOUT_CLASSIFICATION	0.0030353234367228904	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999859722246	WITHOUT_CLASSIFICATION	1.4027775354460987E-8	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999999906336647	WITHOUT_CLASSIFICATION	9.366335296296987E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999936896407288	WITHOUT_CLASSIFICATION	6.310359271183761E-6	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.99999509743518	WITHOUT_CLASSIFICATION	4.902564820046365E-6	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999990405546849	WITHOUT_CLASSIFICATION	9.59445315028859E-7	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999755417154	WITHOUT_CLASSIFICATION	2.4458284678902126E-8	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999921641938654	WITHOUT_CLASSIFICATION	7.83580613462521E-6	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999809290267324	WITHOUT_CLASSIFICATION	1.907097326763731E-5	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999201749671497	WITHOUT_CLASSIFICATION	7.982503285034175E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999955547337586	WITHOUT_CLASSIFICATION	4.4452662413965925E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999818440756022	WITHOUT_CLASSIFICATION	1.8155924397723506E-5	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999644178399	WITHOUT_CLASSIFICATION	3.5582160070152095E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999965035378853	WITHOUT_CLASSIFICATION	3.4964621147673385E-6	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998862919961444	WITHOUT_CLASSIFICATION	1.1370800385549717E-4	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999756706344141	WITHOUT_CLASSIFICATION	2.4329365586023613E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999966905368805	WITHOUT_CLASSIFICATION	3.3094631195976876E-6	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999566939615853	WITHOUT_CLASSIFICATION	4.330603841467135E-5	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543443739308	WITHOUT_CLASSIFICATION	4.5655626069263214E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981878439853	WITHOUT_CLASSIFICATION	1.8121560147745543E-6	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999945090649299	WITHOUT_CLASSIFICATION	5.49093507009315E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.988882702162901	WITHOUT_CLASSIFICATION	0.01111729783709905	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999795168376461	WITHOUT_CLASSIFICATION	2.0483162353816555E-5	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9989340018297651	WITHOUT_CLASSIFICATION	0.001065998170234977	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999953318800332	WITHOUT_CLASSIFICATION	4.668119966755075E-6	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924899310282	WITHOUT_CLASSIFICATION	7.510068971889657E-6	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998650531822	WITHOUT_CLASSIFICATION	1.349468178230794E-7	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999985143678	WITHOUT_CLASSIFICATION	1.4856321805925835E-9	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999989885762492	WITHOUT_CLASSIFICATION	1.0114237507185748E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999860656016	WITHOUT_CLASSIFICATION	1.3934398366856288E-8	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995918679390924	WITHOUT_CLASSIFICATION	4.0813206090754866E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9994557599056489	WITHOUT_CLASSIFICATION	5.442400943510857E-4	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999976891534	WITHOUT_CLASSIFICATION	2.3108466800998616E-9	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999977061980148	WITHOUT_CLASSIFICATION	2.2938019851954557E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999936896407288	WITHOUT_CLASSIFICATION	6.310359271183761E-6	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999999677622097	WITHOUT_CLASSIFICATION	3.223779027697575E-8	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999876204726	WITHOUT_CLASSIFICATION	1.2379527274271118E-8	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999629793777607	WITHOUT_CLASSIFICATION	3.702062223932409E-5	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999302675632	WITHOUT_CLASSIFICATION	6.973243682124107E-8	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999994248864893	WITHOUT_CLASSIFICATION	5.751135106731973E-7	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999995191936444	WITHOUT_CLASSIFICATION	4.808063556020849E-7	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.988882702162901	WITHOUT_CLASSIFICATION	0.01111729783709905	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999992053842401	WITHOUT_CLASSIFICATION	7.946157598998064E-7	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999993032114548	WITHOUT_CLASSIFICATION	6.9678854520114815E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999079523734	WITHOUT_CLASSIFICATION	9.204762661723145E-8	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999982798785709	WITHOUT_CLASSIFICATION	1.7201214290792069E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998606870866	WITHOUT_CLASSIFICATION	1.393129133830103E-7	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991151111206	WITHOUT_CLASSIFICATION	8.848888793732597E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999980785615844	WITHOUT_CLASSIFICATION	1.9214384155965267E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998076812087	WITHOUT_CLASSIFICATION	1.9231879126102024E-7	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999479353319	WITHOUT_CLASSIFICATION	5.206466803850537E-8	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999999760190457	WITHOUT_CLASSIFICATION	2.3980954299093958E-8	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999998838111718	WITHOUT_CLASSIFICATION	1.1618882820626615E-6	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999133319982	WITHOUT_CLASSIFICATION	8.666800177738186E-8	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999973066148272	WITHOUT_CLASSIFICATION	2.693385172700521E-6	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999850008610044	WITHOUT_CLASSIFICATION	1.4999138995599911E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999999377751753	WITHOUT_CLASSIFICATION	6.222482470716769E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999992731407	WITHOUT_CLASSIFICATION	7.2685929630091346E-9	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999566220997527	WITHOUT_CLASSIFICATION	4.3377900247248474E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999942446367	WITHOUT_CLASSIFICATION	5.7553632245009186E-9	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999982940371299	WITHOUT_CLASSIFICATION	1.7059628700223647E-6	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999940583765201	WITHOUT_CLASSIFICATION	5.941623479859123E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999811167100197	WITHOUT_CLASSIFICATION	1.8883289980348583E-5	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999998637924884	WITHOUT_CLASSIFICATION	1.3620751169733448E-7	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999998686271394	WITHOUT_CLASSIFICATION	1.3137286059145083E-7	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9996065190195059	WITHOUT_CLASSIFICATION	3.9348098049412874E-4	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994887774011	WITHOUT_CLASSIFICATION	5.112225988940909E-7	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996647328521	WITHOUT_CLASSIFICATION	3.3526714793822794E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999994193078	WITHOUT_CLASSIFICATION	5.806921951846518E-9	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999936896407288	WITHOUT_CLASSIFICATION	6.310359271183761E-6	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999996553271603	WITHOUT_CLASSIFICATION	3.446728397079503E-6	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999998692247195	WITHOUT_CLASSIFICATION	1.3077528040089176E-7	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999992147465394	WITHOUT_CLASSIFICATION	7.852534605980946E-7	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999997452693977	WITHOUT_CLASSIFICATION	2.5473060227414414E-7	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999993873276554	WITHOUT_CLASSIFICATION	6.126723447017732E-7	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999991940979038	WITHOUT_CLASSIFICATION	8.059020961601E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999936896407288	WITHOUT_CLASSIFICATION	6.310359271183761E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999993787194166	WITHOUT_CLASSIFICATION	6.212805834230948E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999566220997527	WITHOUT_CLASSIFICATION	4.3377900247248474E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999869107687567	WITHOUT_CLASSIFICATION	1.3089231243370475E-5	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999992731407	WITHOUT_CLASSIFICATION	7.2685929630091346E-9	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999484036761	WITHOUT_CLASSIFICATION	5.159632385871174E-8	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9880671998800886	WITHOUT_CLASSIFICATION	0.011932800119911388	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999995721041796	WITHOUT_CLASSIFICATION	4.278958203921888E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999079523734	WITHOUT_CLASSIFICATION	9.204762661723145E-8	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999982798785709	WITHOUT_CLASSIFICATION	1.7201214290792069E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998606870866	WITHOUT_CLASSIFICATION	1.393129133830103E-7	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999994905296281	WITHOUT_CLASSIFICATION	5.09470371784495E-7	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999994155813319	WITHOUT_CLASSIFICATION	5.844186682031132E-7	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996984114958	WITHOUT_CLASSIFICATION	3.0158850411258E-7	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999992731407	WITHOUT_CLASSIFICATION	7.2685929630091346E-9	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999484036761	WITHOUT_CLASSIFICATION	5.159632385871174E-8	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999936896407288	WITHOUT_CLASSIFICATION	6.310359271183761E-6	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991151111206	WITHOUT_CLASSIFICATION	8.848888793732597E-7	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999980785615844	WITHOUT_CLASSIFICATION	1.9214384155965267E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999998076812087	WITHOUT_CLASSIFICATION	1.9231879126102024E-7	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998165580366	WITHOUT_CLASSIFICATION	1.8344196340298E-7	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996604695407	WITHOUT_CLASSIFICATION	3.3953045932721687E-7	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999995752002411	WITHOUT_CLASSIFICATION	4.2479975893051314E-7	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999850750312	WITHOUT_CLASSIFICATION	1.4924968833573266E-8	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999331430823	WITHOUT_CLASSIFICATION	6.685691768910187E-8	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999999539648269	WITHOUT_CLASSIFICATION	4.603517305813273E-8	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972066445933538	WITHOUT_CLASSIFICATION	0.0027933554066461933	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999957864186	WITHOUT_CLASSIFICATION	4.213581399790969E-9	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999558470239611	WITHOUT_CLASSIFICATION	4.415297603889866E-4	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999976045664376	WITHOUT_CLASSIFICATION	2.3954335624524977E-6	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999885152078	WITHOUT_CLASSIFICATION	1.1484792221690762E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999994951526812	WITHOUT_CLASSIFICATION	5.04847318740265E-7	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980133993887136	WITHOUT_CLASSIFICATION	0.0019866006112863386	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991151856142589	WITHOUT_CLASSIFICATION	8.848143857409939E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999699949685977	WITHOUT_CLASSIFICATION	3.0005031402340426E-5	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999994951526812	WITHOUT_CLASSIFICATION	5.04847318740265E-7	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999997612672634	WITHOUT_CLASSIFICATION	2.3873273655955726E-7	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999997619265885	WITHOUT_CLASSIFICATION	2.3807341149593895E-6	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995984688327526	WITHOUT_CLASSIFICATION	4.015311672474161E-4	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991243346334118	WITHOUT_CLASSIFICATION	8.75665366588283E-4	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999975785395886	WITHOUT_CLASSIFICATION	2.4214604115001718E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999791392185619	WITHOUT_CLASSIFICATION	2.0860781438224347E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999543660942185	WITHOUT_CLASSIFICATION	4.5633905781590135E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911615861737	WITHOUT_CLASSIFICATION	8.838413826267097E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999860656016	WITHOUT_CLASSIFICATION	1.3934398366856288E-8	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999966177877	WITHOUT_CLASSIFICATION	3.3822123087043893E-9	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999039376345	WITHOUT_CLASSIFICATION	9.6062365616521E-8	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999987952564	WITHOUT_CLASSIFICATION	1.2047436740166376E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999983837871981	WITHOUT_CLASSIFICATION	1.6162128019264682E-6	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999999362852892	WITHOUT_CLASSIFICATION	6.371471079982165E-8	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999345344244	WITHOUT_CLASSIFICATION	6.546557565844003E-8	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999999717794492	WITHOUT_CLASSIFICATION	2.8220550802408654E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999987858268599	WITHOUT_CLASSIFICATION	1.214173140149265E-6	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995138055383966	WITHOUT_CLASSIFICATION	4.861944616033092E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999994355219035	WITHOUT_CLASSIFICATION	5.644780964927356E-7	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9992735811969276	WITHOUT_CLASSIFICATION	7.264188030724754E-4	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999485059458461	WITHOUT_CLASSIFICATION	5.1494054153829125E-5	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999130742802	WITHOUT_CLASSIFICATION	8.69257199098075E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999955877672081	WITHOUT_CLASSIFICATION	4.4122327918844E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272054337599	WITHOUT_CLASSIFICATION	7.279456624013976E-5	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9894781169145705	WITHOUT_CLASSIFICATION	0.01052188308542957	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998764618343	WITHOUT_CLASSIFICATION	1.2353816569527143E-6	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999976435567668	WITHOUT_CLASSIFICATION	2.356443233278837E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999998269527126	WITHOUT_CLASSIFICATION	1.7304728738399295E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999931125905642	WITHOUT_CLASSIFICATION	6.887409435780985E-6	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999922221790265	WITHOUT_CLASSIFICATION	7.777820973601882E-6	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999844957763095	WITHOUT_CLASSIFICATION	1.5504223690427424E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999932308275137	WITHOUT_CLASSIFICATION	6.769172486293101E-6	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999991254361611	WITHOUT_CLASSIFICATION	8.745638388424255E-7	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999992161530857	WITHOUT_CLASSIFICATION	7.838469142008717E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999997020184996	WITHOUT_CLASSIFICATION	2.9798150040550076E-6	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999239712263186	WITHOUT_CLASSIFICATION	7.602877368138789E-5	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999925243256778	WITHOUT_CLASSIFICATION	7.475674322299057E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997600736773	WITHOUT_CLASSIFICATION	2.3992632275004503E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999838568067311	WITHOUT_CLASSIFICATION	1.6143193268937144E-5	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999767771778	WITHOUT_CLASSIFICATION	2.3222822137687454E-8	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999802778953003	WITHOUT_CLASSIFICATION	1.97221046996021E-5	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999990130680244	WITHOUT_CLASSIFICATION	9.869319755964036E-7	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999701140077305	WITHOUT_CLASSIFICATION	2.988599226959106E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.999925130014053	WITHOUT_CLASSIFICATION	7.486998594694425E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999998386085868	WITHOUT_CLASSIFICATION	1.6139141320074642E-6	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999983148746463	WITHOUT_CLASSIFICATION	1.6851253538145297E-6	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999979781767494	WITHOUT_CLASSIFICATION	2.0218232506018734E-6	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999265210090356	WITHOUT_CLASSIFICATION	7.347899096436565E-5	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999995804136551	WITHOUT_CLASSIFICATION	4.1958634483532154E-7	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997256926736315	WITHOUT_CLASSIFICATION	2.743073263684534E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999384377437	WITHOUT_CLASSIFICATION	6.15622563178036E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999976574718265	WITHOUT_CLASSIFICATION	2.342528173591004E-6	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999737451855277	WITHOUT_CLASSIFICATION	2.6254814472223436E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999825049773137	WITHOUT_CLASSIFICATION	1.7495022686280766E-5	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999995384868076	WITHOUT_CLASSIFICATION	4.615131923297322E-7	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999988339413687	WITHOUT_CLASSIFICATION	1.166058631312717E-6	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999047649840225	WITHOUT_CLASSIFICATION	9.523501597743386E-5	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.7853261721821511	WITHOUT_CLASSIFICATION	0.21467382781784908	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998105341328343	WITHOUT_CLASSIFICATION	1.8946586716571807E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999864992767524	WITHOUT_CLASSIFICATION	1.3500723247600275E-4	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999006675898	WITHOUT_CLASSIFICATION	9.93324101740682E-8	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998478904925286	WITHOUT_CLASSIFICATION	1.5210950747143322E-4	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999797735854566	WITHOUT_CLASSIFICATION	2.0226414543342384E-5	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999987888998095	WITHOUT_CLASSIFICATION	1.2111001904463709E-6	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999997866402455	WITHOUT_CLASSIFICATION	2.1335975449012356E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999955685978067	WITHOUT_CLASSIFICATION	4.431402193236572E-6	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9998415483587391	WITHOUT_CLASSIFICATION	1.5845164126083915E-4	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999967623687405	WITHOUT_CLASSIFICATION	3.237631259474739E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999726387195	WITHOUT_CLASSIFICATION	2.7361280477785195E-8	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999996220328934	WITHOUT_CLASSIFICATION	3.779671066082522E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998431183859	WITHOUT_CLASSIFICATION	1.568816141133407E-7	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9994047898514717	WITHOUT_CLASSIFICATION	5.952101485281728E-4	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999223855206209	WITHOUT_CLASSIFICATION	7.761447937908839E-4	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999982608642192	WITHOUT_CLASSIFICATION	1.7391357808315858E-6	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998544055014438	WITHOUT_CLASSIFICATION	1.4559449855625864E-4	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999996892835603	WITHOUT_CLASSIFICATION	3.107164397408655E-7	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997074989792	WITHOUT_CLASSIFICATION	2.9250102076216506E-7	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.9999565532777279	WITHOUT_CLASSIFICATION	4.344672227207616E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999975920031348	WITHOUT_CLASSIFICATION	2.4079968652447023E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999946690157582	WITHOUT_CLASSIFICATION	5.330984241813771E-6	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9836498321712519	WITHOUT_CLASSIFICATION	0.016350167828748086	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9966135384011744	WITHOUT_CLASSIFICATION	0.0033864615988255294	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999970344236276	WITHOUT_CLASSIFICATION	2.96557637241626E-6	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999929188959226	WITHOUT_CLASSIFICATION	7.081104077413624E-6	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999505328774657	WITHOUT_CLASSIFICATION	4.9467122534326414E-5	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999638776029	WITHOUT_CLASSIFICATION	3.61223969934235E-8	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999998880178842	WITHOUT_CLASSIFICATION	1.1198211582168739E-7	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999798303601867	WITHOUT_CLASSIFICATION	2.0169639813296388E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999996844127994	WITHOUT_CLASSIFICATION	3.1558720067141685E-7	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999929680610306	WITHOUT_CLASSIFICATION	7.031938969459133E-6	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998092367033	WITHOUT_CLASSIFICATION	1.9076329672493613E-7	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999912648356499	WITHOUT_CLASSIFICATION	8.735164350146462E-6	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999924599603791	WITHOUT_CLASSIFICATION	7.540039620997378E-6	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999985854031	WITHOUT_CLASSIFICATION	1.4145968833692196E-9	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999998525730869	WITHOUT_CLASSIFICATION	1.4742691310462613E-7	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999999346	WITHOUT_CLASSIFICATION	6.543303354888715E-14	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999977054833453	WITHOUT_CLASSIFICATION	2.294516654623789E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999994495706197	WITHOUT_CLASSIFICATION	5.504293802456307E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999816312605591	WITHOUT_CLASSIFICATION	1.8368739440930125E-5	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999848105756945	WITHOUT_CLASSIFICATION	1.5189424305351567E-5	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999332881690033	WITHOUT_CLASSIFICATION	6.671183099670739E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999665883858296	WITHOUT_CLASSIFICATION	3.341161417044755E-5	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999363062784	WITHOUT_CLASSIFICATION	6.369372158552342E-8	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.999950326558397	WITHOUT_CLASSIFICATION	4.967344160294364E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999920383165326	WITHOUT_CLASSIFICATION	7.961683467417738E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999954931899644	WITHOUT_CLASSIFICATION	4.506810035640981E-6	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999933679441	WITHOUT_CLASSIFICATION	6.6320559366948295E-9	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9997989461292954	WITHOUT_CLASSIFICATION	2.0105387070457252E-4	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9999326303907219	WITHOUT_CLASSIFICATION	6.736960927809362E-5	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999974781702842	WITHOUT_CLASSIFICATION	2.5218297158409674E-6	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9997989461292954	WITHOUT_CLASSIFICATION	2.0105387070457252E-4	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999997508261177	WITHOUT_CLASSIFICATION	2.491738823341322E-7	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999999345620935	WITHOUT_CLASSIFICATION	6.543790646960353E-8	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9991370284887933	WITHOUT_CLASSIFICATION	8.629715112067528E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9716424690704897	WITHOUT_CLASSIFICATION	0.028357530929510377	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999998705346097	WITHOUT_CLASSIFICATION	1.2946539026062107E-7	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999990807812623	WITHOUT_CLASSIFICATION	9.192187375964806E-7	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997907837399176	WITHOUT_CLASSIFICATION	2.0921626008250588E-4	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999942262604783	WITHOUT_CLASSIFICATION	5.7737395217687595E-6	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9975092969963896	WITHOUT_CLASSIFICATION	0.0024907030036103854	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999849967313071	WITHOUT_CLASSIFICATION	1.500326869289807E-4	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999851917025	WITHOUT_CLASSIFICATION	1.480829748832963E-8	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999976671183806	WITHOUT_CLASSIFICATION	2.3328816193990426E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.99997785570207	WITHOUT_CLASSIFICATION	2.2144297929980884E-5	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999995881469192	WITHOUT_CLASSIFICATION	4.118530807783183E-7	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999967895512867	WITHOUT_CLASSIFICATION	3.2104487133147555E-6	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999957078412012	WITHOUT_CLASSIFICATION	4.292158798795691E-5	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998888781450668	WITHOUT_CLASSIFICATION	1.1112185493326806E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998888781450668	WITHOUT_CLASSIFICATION	1.1112185493326806E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999667641963086	WITHOUT_CLASSIFICATION	3.323580369145371E-5	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999984844769726	WITHOUT_CLASSIFICATION	1.5155230274369228E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999959817765574	WITHOUT_CLASSIFICATION	4.018223442656109E-6	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.9999954157254256	WITHOUT_CLASSIFICATION	4.584274574295103E-6	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999986544132274	WITHOUT_CLASSIFICATION	1.3455867725399318E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999961905536024	WITHOUT_CLASSIFICATION	3.8094463974400865E-6	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999995374209109	WITHOUT_CLASSIFICATION	4.625790891126105E-7	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999966418319	WITHOUT_CLASSIFICATION	3.358168073192425E-9	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.999999920252004	WITHOUT_CLASSIFICATION	7.974799595684973E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998780716933251	WITHOUT_CLASSIFICATION	1.2192830667482204E-4	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.999989051301942	WITHOUT_CLASSIFICATION	1.0948698058044681E-5	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999991238312594	WITHOUT_CLASSIFICATION	8.761687405757057E-7	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999960362207474	WITHOUT_CLASSIFICATION	3.963779252629788E-6	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999997200968617	WITHOUT_CLASSIFICATION	2.7990313841493297E-7	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999900623524	WITHOUT_CLASSIFICATION	9.937647568168007E-9	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999955877672081	WITHOUT_CLASSIFICATION	4.4122327918844E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999592208559311	WITHOUT_CLASSIFICATION	4.077914406888789E-5	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998786421544	WITHOUT_CLASSIFICATION	1.2135784558049978E-7	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.999957569275447	WITHOUT_CLASSIFICATION	4.2430724552994885E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999629239841641	WITHOUT_CLASSIFICATION	3.707601583594201E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999997908887779	WITHOUT_CLASSIFICATION	2.0911122213885335E-7	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999949609341949	WITHOUT_CLASSIFICATION	5.039065805005633E-6	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999689019899	WITHOUT_CLASSIFICATION	3.1098009939645383E-8	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999501158837	WITHOUT_CLASSIFICATION	4.9884116296291744E-8	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999872778745805	WITHOUT_CLASSIFICATION	1.272212541946995E-5	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999818927150728	WITHOUT_CLASSIFICATION	1.810728492729021E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999996038719	WITHOUT_CLASSIFICATION	3.961281101964112E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999912434019655	WITHOUT_CLASSIFICATION	8.756598034423325E-6	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999930061757177	WITHOUT_CLASSIFICATION	6.993824282229079E-6	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999993274042146	WITHOUT_CLASSIFICATION	6.725957853447406E-7	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999895885968186	WITHOUT_CLASSIFICATION	1.0411403181441047E-5	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999999945919828	WITHOUT_CLASSIFICATION	5.4080171941220764E-8	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999961376445331	WITHOUT_CLASSIFICATION	3.862355466886159E-6	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999996760527898	WITHOUT_CLASSIFICATION	3.239472102494567E-7	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999999155034633	WITHOUT_CLASSIFICATION	8.44965365904991E-8	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999994054694112	WITHOUT_CLASSIFICATION	5.94530588798807E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999465234788355	WITHOUT_CLASSIFICATION	5.3476521164490735E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999994115177917	WITHOUT_CLASSIFICATION	5.884822083111673E-7	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999992151771817	WITHOUT_CLASSIFICATION	7.848228182418236E-7	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999999550740561	WITHOUT_CLASSIFICATION	4.4925943893970006E-7	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999875765242178	WITHOUT_CLASSIFICATION	1.2423475782135521E-5	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.9999992091406363	WITHOUT_CLASSIFICATION	7.908593636452386E-7	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999834523050039	WITHOUT_CLASSIFICATION	1.654769499611379E-5	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999993551352038	WITHOUT_CLASSIFICATION	6.44864796161851E-7	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999999933108076	WITHOUT_CLASSIFICATION	6.689192402841386E-8	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999742118270782	WITHOUT_CLASSIFICATION	2.5788172921732144E-5	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997637668735908	WITHOUT_CLASSIFICATION	2.3623312640926448E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920876474317	WITHOUT_CLASSIFICATION	7.912352568272295E-6	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998982018622412	WITHOUT_CLASSIFICATION	1.0179813775880098E-4	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999809812570921	WITHOUT_CLASSIFICATION	1.901874290787994E-5	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999931516277297	WITHOUT_CLASSIFICATION	6.8483722702540895E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995877803083	WITHOUT_CLASSIFICATION	4.1221969165249024E-7	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999992706831079	WITHOUT_CLASSIFICATION	7.293168920837031E-7	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999990361224509	WITHOUT_CLASSIFICATION	9.638775491863523E-7	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998746963318443	WITHOUT_CLASSIFICATION	1.2530366815568752E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999990361224509	WITHOUT_CLASSIFICATION	9.638775491863523E-7	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999906233916525	WITHOUT_CLASSIFICATION	9.376608347608086E-6	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999990350722399	WITHOUT_CLASSIFICATION	9.649277601024526E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999981820403325	WITHOUT_CLASSIFICATION	1.8179596674147767E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999987192950204	WITHOUT_CLASSIFICATION	1.2807049796603283E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999987050724797	WITHOUT_CLASSIFICATION	1.2949275203233065E-6	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999994009142975	WITHOUT_CLASSIFICATION	5.990857025441992E-7	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999997371082788	WITHOUT_CLASSIFICATION	2.6289172119409763E-6	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999988935262211	WITHOUT_CLASSIFICATION	1.1064737789324326E-6	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999993675084342	WITHOUT_CLASSIFICATION	6.32491565773491E-7	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9469997851963018	WITHOUT_CLASSIFICATION	0.053000214803698126	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999977264152444	WITHOUT_CLASSIFICATION	2.2735847555575976E-6	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999983748818578	WITHOUT_CLASSIFICATION	1.625118142139715E-6	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999987972961348	WITHOUT_CLASSIFICATION	1.2027038650573059E-6	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999672945433272	WITHOUT_CLASSIFICATION	3.270545667282434E-5	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9819257626623503	WITHOUT_CLASSIFICATION	0.018074237337649655	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999998971502657	WITHOUT_CLASSIFICATION	1.0284973431939553E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999996016319351	WITHOUT_CLASSIFICATION	3.9836806489998305E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999996016319351	WITHOUT_CLASSIFICATION	3.9836806489998305E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999980157015483	WITHOUT_CLASSIFICATION	1.984298451623746E-6	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999419200687	WITHOUT_CLASSIFICATION	5.807993135496384E-8	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.999999985257784	WITHOUT_CLASSIFICATION	1.4742216137584973E-8	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999989775134654	WITHOUT_CLASSIFICATION	1.0224865346272565E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999990470771	WITHOUT_CLASSIFICATION	9.529228319318826E-10	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999521999046	WITHOUT_CLASSIFICATION	4.780009536594237E-8	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.8739598646179411	WITHOUT_CLASSIFICATION	0.126040135382059	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999989428923061	WITHOUT_CLASSIFICATION	1.0571076938996882E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999987980623526	WITHOUT_CLASSIFICATION	1.2019376473298024E-6	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.99999959148646	WITHOUT_CLASSIFICATION	4.085135399105571E-7	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999752771087	WITHOUT_CLASSIFICATION	2.4722891181994205E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999992250340928	WITHOUT_CLASSIFICATION	7.749659071893451E-7	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999431692919281	WITHOUT_CLASSIFICATION	5.6830708071832046E-5	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999902061593411	WITHOUT_CLASSIFICATION	9.793840658894262E-6	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997311124742079	WITHOUT_CLASSIFICATION	2.688875257922086E-4	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999778105217	WITHOUT_CLASSIFICATION	2.2189478287982445E-8	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999996091853782	WITHOUT_CLASSIFICATION	3.9081462170905363E-7	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9997760887051071	WITHOUT_CLASSIFICATION	2.2391129489275846E-4	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9993320265596175	WITHOUT_CLASSIFICATION	6.679734403824013E-4	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999986221508262	WITHOUT_CLASSIFICATION	1.3778491737606868E-6	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999992987742737	WITHOUT_CLASSIFICATION	7.012257262090617E-7	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9991873264554582	WITHOUT_CLASSIFICATION	8.126735445418938E-4	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9991219818427709	WITHOUT_CLASSIFICATION	8.780181572292083E-4	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999987664527084	WITHOUT_CLASSIFICATION	1.2335472915900947E-5	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9994025430689879	WITHOUT_CLASSIFICATION	5.974569310121455E-4	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999997268858256	WITHOUT_CLASSIFICATION	2.731141743880591E-7	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999460030076	WITHOUT_CLASSIFICATION	5.39969924958423E-8	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9971387231738946	WITHOUT_CLASSIFICATION	0.0028612768261053216	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999812658562691	WITHOUT_CLASSIFICATION	1.873414373087357E-5	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999925932739	WITHOUT_CLASSIFICATION	7.406726175590764E-9	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999972934123	WITHOUT_CLASSIFICATION	2.706587734359539E-9	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999953481505539	WITHOUT_CLASSIFICATION	4.651849446042666E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999896479634031	WITHOUT_CLASSIFICATION	1.0352036596955062E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999179342049701	WITHOUT_CLASSIFICATION	8.206579502997237E-5	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999883258875027	WITHOUT_CLASSIFICATION	1.167411249721656E-5	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999990744679925	WITHOUT_CLASSIFICATION	9.255320073420919E-7	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999976878657082	WITHOUT_CLASSIFICATION	2.3121342916997024E-6	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999968735598502	WITHOUT_CLASSIFICATION	3.1264401498510196E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999900058285	WITHOUT_CLASSIFICATION	9.994171481569293E-9	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999933527868311	WITHOUT_CLASSIFICATION	6.647213168907314E-6	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999624026805	WITHOUT_CLASSIFICATION	3.759731952848458E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985774800157	WITHOUT_CLASSIFICATION	1.42251998423385E-6	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999990889164203	WITHOUT_CLASSIFICATION	9.110835796069434E-7	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9456830436309489	WITHOUT_CLASSIFICATION	0.05431695636905109	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9998177505403631	WITHOUT_CLASSIFICATION	1.8224945963691034E-4	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9993990119596975	WITHOUT_CLASSIFICATION	6.009880403025079E-4	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8314647744308018	IMPLEMENTATION	0.16853522556919825	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999966853323	WITHOUT_CLASSIFICATION	3.314667763298537E-9	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999497273627066	WITHOUT_CLASSIFICATION	5.027263729327807E-5	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.999944293635947	WITHOUT_CLASSIFICATION	5.570636405303177E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972343341451	WITHOUT_CLASSIFICATION	2.765665854838493E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998872459674	WITHOUT_CLASSIFICATION	1.1275403248617812E-7	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999128278694	WITHOUT_CLASSIFICATION	8.717213066003906E-8	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999564019164625	WITHOUT_CLASSIFICATION	4.359808353742064E-5	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999968255422227	WITHOUT_CLASSIFICATION	3.17445777735911E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999993787194166	WITHOUT_CLASSIFICATION	6.212805834230948E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999993787194166	WITHOUT_CLASSIFICATION	6.212805834230948E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999995514115047	WITHOUT_CLASSIFICATION	4.4858849542663246E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999183741776068	WITHOUT_CLASSIFICATION	8.162582239317322E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999999611026126	WITHOUT_CLASSIFICATION	3.8897387302483435E-8	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999999365599856	WITHOUT_CLASSIFICATION	6.344001440839336E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999993316511749	WITHOUT_CLASSIFICATION	6.683488251252991E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999997965528525	WITHOUT_CLASSIFICATION	2.0344714751747626E-7	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9993395004317794	WITHOUT_CLASSIFICATION	6.604995682205006E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999948740614356	WITHOUT_CLASSIFICATION	5.1259385644178854E-6	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999963758595098	WITHOUT_CLASSIFICATION	3.6241404900931134E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999968803257	WITHOUT_CLASSIFICATION	3.1196743189802927E-9	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.999998902270302	WITHOUT_CLASSIFICATION	1.0977296979322025E-6	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999843362714138	WITHOUT_CLASSIFICATION	1.56637285861736E-5	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999926396879927	WITHOUT_CLASSIFICATION	7.360312007426945E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999955090465773	WITHOUT_CLASSIFICATION	4.490953422603692E-6	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999144816546	WITHOUT_CLASSIFICATION	8.551834537960216E-8	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999994343730654	WITHOUT_CLASSIFICATION	5.656269344933454E-7	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999937996879542	WITHOUT_CLASSIFICATION	6.200312045745346E-6	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999953487166148	WITHOUT_CLASSIFICATION	4.651283385258329E-6	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999929980577598	WITHOUT_CLASSIFICATION	7.001942240195182E-6	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999858613485	WITHOUT_CLASSIFICATION	1.4138651486270656E-8	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999201215112105	WITHOUT_CLASSIFICATION	7.987848878961605E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999951041478	WITHOUT_CLASSIFICATION	4.895852129881826E-9	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999891688231402	WITHOUT_CLASSIFICATION	1.0831176859830819E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999144043111979	WITHOUT_CLASSIFICATION	8.559568880214706E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9930599982943499	WITHOUT_CLASSIFICATION	0.006940001705650102	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999960999153029	WITHOUT_CLASSIFICATION	3.900084697087371E-5	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9964224717966681	WITHOUT_CLASSIFICATION	0.0035775282033319498	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9995159421025908	WITHOUT_CLASSIFICATION	4.84057897409256E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998636452896248	WITHOUT_CLASSIFICATION	1.3635471037523877E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999951999224288	WITHOUT_CLASSIFICATION	4.800077571181547E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999144043111979	WITHOUT_CLASSIFICATION	8.559568880214706E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999989304713098	WITHOUT_CLASSIFICATION	1.069528690165082E-6	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999998896503758	WITHOUT_CLASSIFICATION	1.103496242743471E-7	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.9999551775774388	WITHOUT_CLASSIFICATION	4.482242256119295E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999987483006197	WITHOUT_CLASSIFICATION	1.251699380300156E-6	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999186842826	WITHOUT_CLASSIFICATION	8.131571732275403E-8	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998633130373477	WITHOUT_CLASSIFICATION	1.3668696265226277E-4	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997900807763256	WITHOUT_CLASSIFICATION	2.0991922367452203E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998245964538	WITHOUT_CLASSIFICATION	1.754035462164055E-7	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.99125897593221	WITHOUT_CLASSIFICATION	0.008741024067789932	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999987483006197	WITHOUT_CLASSIFICATION	1.251699380300156E-6	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999981324103	WITHOUT_CLASSIFICATION	1.867589673915018E-9	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998245964538	WITHOUT_CLASSIFICATION	1.754035462164055E-7	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999919280454396	WITHOUT_CLASSIFICATION	8.071954560475749E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998997636094402	WITHOUT_CLASSIFICATION	1.0023639055972953E-4	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999794636027247	WITHOUT_CLASSIFICATION	2.053639727535054E-5	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999752771087	WITHOUT_CLASSIFICATION	2.4722891181994205E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997634784249	WITHOUT_CLASSIFICATION	2.3652157523655584E-7	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999999939858343	WITHOUT_CLASSIFICATION	6.01416570018105E-8	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999996044852918	WITHOUT_CLASSIFICATION	3.955147082339805E-7	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997126123844818	WITHOUT_CLASSIFICATION	2.8738761551825025E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999998175877	WITHOUT_CLASSIFICATION	1.824123002687506E-10	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999843095558661	WITHOUT_CLASSIFICATION	1.5690444133818986E-5	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999985227973653	WITHOUT_CLASSIFICATION	1.4772026346990928E-6	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999212133404	WITHOUT_CLASSIFICATION	7.878665959667965E-8	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999983468233834	WITHOUT_CLASSIFICATION	1.6531766165056452E-6	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999784562834838	WITHOUT_CLASSIFICATION	2.1543716516285235E-5	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999668172951918	WITHOUT_CLASSIFICATION	3.3182704808150395E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999968697123	WITHOUT_CLASSIFICATION	3.1302876189162326E-9	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999984897685156	WITHOUT_CLASSIFICATION	1.5102314844013342E-6	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9995273342807497	WITHOUT_CLASSIFICATION	4.7266571925030443E-4	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999678877276283	WITHOUT_CLASSIFICATION	3.211227237173651E-5	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999992998856754	WITHOUT_CLASSIFICATION	7.001143245908863E-7	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999607254078043	WITHOUT_CLASSIFICATION	3.9274592195709114E-4	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999995517178731	WITHOUT_CLASSIFICATION	4.482821268154813E-7	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999953759206022	WITHOUT_CLASSIFICATION	4.624079397806441E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999999787938413	WITHOUT_CLASSIFICATION	2.1206158689042125E-7	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999989874500409	WITHOUT_CLASSIFICATION	1.0125499590904433E-6	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9989967257355516	WITHOUT_CLASSIFICATION	0.0010032742644482577	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999950117469	WITHOUT_CLASSIFICATION	4.988253165884687E-9	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999989518495	WITHOUT_CLASSIFICATION	1.0481505266355775E-9	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999982031133863	WITHOUT_CLASSIFICATION	1.7968866136861426E-6	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.9999705112958405	WITHOUT_CLASSIFICATION	2.9488704159556533E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999978228699157	WITHOUT_CLASSIFICATION	2.1771300842651566E-6	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937334277027	WITHOUT_CLASSIFICATION	6.266572297283244E-6	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999311562067246	WITHOUT_CLASSIFICATION	6.884379327546348E-5	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999878064289506	WITHOUT_CLASSIFICATION	1.2193571049418782E-5	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9975407731483774	WITHOUT_CLASSIFICATION	0.00245922685162258	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999075205144513	WITHOUT_CLASSIFICATION	9.247948554868517E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999980937068266	WITHOUT_CLASSIFICATION	1.9062931733551128E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999980937068266	WITHOUT_CLASSIFICATION	1.9062931733551128E-6	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999987441941072	WITHOUT_CLASSIFICATION	1.2558058927611392E-6	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999672850443826	WITHOUT_CLASSIFICATION	3.2714955617335404E-5	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999975037707404	WITHOUT_CLASSIFICATION	2.496229259721923E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999957384971869	WITHOUT_CLASSIFICATION	4.261502813071431E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999699098636305	WITHOUT_CLASSIFICATION	3.0090136369470713E-5	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999895724953481	WITHOUT_CLASSIFICATION	1.0427504651715578E-5	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999974914033607	WITHOUT_CLASSIFICATION	2.508596639256763E-6	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999949851992949	WITHOUT_CLASSIFICATION	5.0148007050929984E-6	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999997963511138	WITHOUT_CLASSIFICATION	2.036488861934947E-7	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999950320595055	WITHOUT_CLASSIFICATION	4.967940494589332E-6	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999997377992915	WITHOUT_CLASSIFICATION	2.622007085149488E-7	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999614436042	WITHOUT_CLASSIFICATION	3.855639579933684E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999957014638718	WITHOUT_CLASSIFICATION	4.298536128110718E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999980937068266	WITHOUT_CLASSIFICATION	1.9062931733551128E-6	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999997323104953	WITHOUT_CLASSIFICATION	2.6768950465515424E-7	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999923957207417	WITHOUT_CLASSIFICATION	7.604279258275928E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999082891089709	WITHOUT_CLASSIFICATION	9.1710891029037E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999792778113833	WITHOUT_CLASSIFICATION	2.072218861676343E-5	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999995380873437	WITHOUT_CLASSIFICATION	4.619126562883323E-7	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999998678808772	WITHOUT_CLASSIFICATION	1.321191228145567E-7	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998621934985668	WITHOUT_CLASSIFICATION	1.3780650143331764E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999428418089698	WITHOUT_CLASSIFICATION	5.715819103033256E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999963136179325	WITHOUT_CLASSIFICATION	3.6863820674570465E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999681504205562	WITHOUT_CLASSIFICATION	3.184957944382477E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999807352650451	WITHOUT_CLASSIFICATION	1.926473495491281E-4	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937334277027	WITHOUT_CLASSIFICATION	6.266572297283244E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999980937068266	WITHOUT_CLASSIFICATION	1.9062931733551128E-6	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999771078306104	WITHOUT_CLASSIFICATION	2.2892169389519078E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.99999958809401	WITHOUT_CLASSIFICATION	4.119059899315384E-7	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999942317864545	WITHOUT_CLASSIFICATION	5.768213545390715E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999970094545447	WITHOUT_CLASSIFICATION	2.9905454552910607E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999535830434277	WITHOUT_CLASSIFICATION	4.6416956572325145E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999997326109558	WITHOUT_CLASSIFICATION	2.6738904416125537E-7	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999376287614118	WITHOUT_CLASSIFICATION	6.237123858829115E-5	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999945616258	WITHOUT_CLASSIFICATION	5.438374105247892E-9	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999923924138	WITHOUT_CLASSIFICATION	7.607586236459739E-9	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999997847855526	WITHOUT_CLASSIFICATION	2.1521444730630569E-7	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999994822937801	WITHOUT_CLASSIFICATION	5.177062199046372E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998429428551853	WITHOUT_CLASSIFICATION	1.570571448147195E-4	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999897830158696	WITHOUT_CLASSIFICATION	1.0216984130364085E-5	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999945544964174	WITHOUT_CLASSIFICATION	5.445503582635357E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999906233916525	WITHOUT_CLASSIFICATION	9.376608347608086E-6	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999984304566321	WITHOUT_CLASSIFICATION	1.5695433679866568E-6	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999997962474283	WITHOUT_CLASSIFICATION	2.0375257160433174E-7	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999991765747003	WITHOUT_CLASSIFICATION	8.234252997869423E-7	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999844807883337	WITHOUT_CLASSIFICATION	1.5519211666284433E-5	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999805390799	WITHOUT_CLASSIFICATION	1.9460920126605044E-8	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999979036492719	WITHOUT_CLASSIFICATION	2.096350728076308E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999979036492719	WITHOUT_CLASSIFICATION	2.096350728076308E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999171773469989	WITHOUT_CLASSIFICATION	8.282265300112092E-5	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999965218699	WITHOUT_CLASSIFICATION	3.478130002895179E-9	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999248202766045	WITHOUT_CLASSIFICATION	7.51797233956006E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999755254564892	WITHOUT_CLASSIFICATION	2.4474543510878227E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999792354979771	WITHOUT_CLASSIFICATION	2.076450202299325E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999978119712966	WITHOUT_CLASSIFICATION	2.188028703508849E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999603983292633	WITHOUT_CLASSIFICATION	3.960167073667814E-5	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999995602312588	WITHOUT_CLASSIFICATION	4.3976874130413963E-7	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999995602312588	WITHOUT_CLASSIFICATION	4.3976874130413963E-7	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999868023593845	WITHOUT_CLASSIFICATION	1.3197640615442613E-5	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999998612956851	WITHOUT_CLASSIFICATION	1.3870431489021434E-7	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999995062598597	WITHOUT_CLASSIFICATION	4.937401403683457E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999826488929	WITHOUT_CLASSIFICATION	1.7351107095570618E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999826488929	WITHOUT_CLASSIFICATION	1.7351107095570618E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999999826488929	WITHOUT_CLASSIFICATION	1.7351107095570618E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999997437797491	WITHOUT_CLASSIFICATION	2.562202508602726E-7	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999916445454	WITHOUT_CLASSIFICATION	8.35545452785265E-9	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9937264472258726	WITHOUT_CLASSIFICATION	0.0062735527741274635	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999833245079478	WITHOUT_CLASSIFICATION	1.667549205221636E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999988842473422	WITHOUT_CLASSIFICATION	1.1157526579041442E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999980937068266	WITHOUT_CLASSIFICATION	1.9062931733551128E-6	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999980937068266	WITHOUT_CLASSIFICATION	1.9062931733551128E-6	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999935066829223	WITHOUT_CLASSIFICATION	6.493317077640262E-6	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9995886928176805	WITHOUT_CLASSIFICATION	4.113071823194997E-4	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999226537060965	WITHOUT_CLASSIFICATION	7.734629390358039E-5	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9997740119248978	WITHOUT_CLASSIFICATION	2.259880751021901E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999918277436003	WITHOUT_CLASSIFICATION	8.172256399681298E-6	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999796502365249	WITHOUT_CLASSIFICATION	2.0349763475089926E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999970213160213	WITHOUT_CLASSIFICATION	2.978683978618909E-6	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999922975159453	WITHOUT_CLASSIFICATION	7.702484054590566E-6	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.999999733768637	WITHOUT_CLASSIFICATION	2.662313630343379E-7	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999733641258	WITHOUT_CLASSIFICATION	2.6635874168970325E-8	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999994516343963	WITHOUT_CLASSIFICATION	5.483656037248319E-7	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999924070004594	WITHOUT_CLASSIFICATION	7.592999540629036E-6	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999983428707256	WITHOUT_CLASSIFICATION	1.657129274367735E-6	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999983428707256	WITHOUT_CLASSIFICATION	1.657129274367738E-6	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999985683977626	WITHOUT_CLASSIFICATION	1.4316022374176615E-6	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999985683977626	WITHOUT_CLASSIFICATION	1.4316022374176615E-6	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999986470014914	WITHOUT_CLASSIFICATION	1.3529985086080776E-6	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999911676471817	WITHOUT_CLASSIFICATION	8.832352818328973E-6	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999911676471817	WITHOUT_CLASSIFICATION	8.832352818328973E-6	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999936689146801	WITHOUT_CLASSIFICATION	6.331085319798947E-6	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999955492633588	WITHOUT_CLASSIFICATION	4.450736641209709E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999350756212074	WITHOUT_CLASSIFICATION	6.492437879255278E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999979036492719	WITHOUT_CLASSIFICATION	2.096350728076308E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998202733940662	WITHOUT_CLASSIFICATION	1.7972660593382816E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999955492633588	WITHOUT_CLASSIFICATION	4.450736641209709E-6	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999252546038	WITHOUT_CLASSIFICATION	7.474539624170593E-8	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9991956852693895	WITHOUT_CLASSIFICATION	8.043147306105725E-4	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999806885347314	WITHOUT_CLASSIFICATION	1.931146526867345E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999870328782179	WITHOUT_CLASSIFICATION	1.2967121782154681E-5	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998150061701	WITHOUT_CLASSIFICATION	1.8499382991661423E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999148929313754	WITHOUT_CLASSIFICATION	8.510706862467064E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999967657360546	WITHOUT_CLASSIFICATION	3.234263945486793E-6	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999661833133586	WITHOUT_CLASSIFICATION	3.3816686641246157E-5	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999998994073039	WITHOUT_CLASSIFICATION	1.00592696103476E-6	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999998770335	WITHOUT_CLASSIFICATION	1.2296651660325227E-10	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999653092894	WITHOUT_CLASSIFICATION	3.4690710730823736E-8	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999382602282142	WITHOUT_CLASSIFICATION	6.173977178577589E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999626740945794	WITHOUT_CLASSIFICATION	3.732590542066006E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.99999426103112	WITHOUT_CLASSIFICATION	5.738968880079966E-6	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9987770234538068	WITHOUT_CLASSIFICATION	0.0012229765461932206	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9997718915719775	WITHOUT_CLASSIFICATION	2.281084280224059E-4	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999962222799	WITHOUT_CLASSIFICATION	3.777720058659101E-9	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987137591607	WITHOUT_CLASSIFICATION	1.2862408393232276E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999987137591607	WITHOUT_CLASSIFICATION	1.2862408393232276E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999992744311834	WITHOUT_CLASSIFICATION	7.255688165315935E-7	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999361264363	WITHOUT_CLASSIFICATION	6.387356370737446E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999996595866536	WITHOUT_CLASSIFICATION	3.40413346393902E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9992382928431951	WITHOUT_CLASSIFICATION	7.617071568049849E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999954133990143	WITHOUT_CLASSIFICATION	4.586600985587882E-6	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999725035655314	WITHOUT_CLASSIFICATION	2.7496434468676946E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999872903282622	WITHOUT_CLASSIFICATION	1.2709671737789572E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999994576123074	WITHOUT_CLASSIFICATION	5.423876927370738E-7	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999177323096621	WITHOUT_CLASSIFICATION	8.226769033790601E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999231498753	WITHOUT_CLASSIFICATION	7.685012472161352E-8	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999466454655	WITHOUT_CLASSIFICATION	5.335453439270665E-8	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998429428551853	WITHOUT_CLASSIFICATION	1.570571448147195E-4	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999985001499351	WITHOUT_CLASSIFICATION	1.49985006500653E-6	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999756698230324	WITHOUT_CLASSIFICATION	2.433017696768236E-5	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999689582844644	WITHOUT_CLASSIFICATION	3.1041715535574114E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999959076960998	WITHOUT_CLASSIFICATION	4.092303900247418E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999993444011068	WITHOUT_CLASSIFICATION	6.55598893118644E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999993444011068	WITHOUT_CLASSIFICATION	6.55598893118644E-7	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999748787802084	WITHOUT_CLASSIFICATION	2.512121979153135E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999967934564129	WITHOUT_CLASSIFICATION	3.206543587111743E-6	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999389478166514	WITHOUT_CLASSIFICATION	6.105218334857142E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999979003881609	WITHOUT_CLASSIFICATION	2.099611839028057E-6	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999979596557226	WITHOUT_CLASSIFICATION	2.040344277511414E-6	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998703443020085	WITHOUT_CLASSIFICATION	1.2965569799146164E-4	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999094467184049	WITHOUT_CLASSIFICATION	9.0553281595139E-5	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999996035515091	WITHOUT_CLASSIFICATION	3.9644849099022356E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997641890153829	WITHOUT_CLASSIFICATION	2.358109846171743E-4	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999983511759	WITHOUT_CLASSIFICATION	1.648824008658904E-9	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999708528301	WITHOUT_CLASSIFICATION	2.9147169914204914E-8	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999996035515091	WITHOUT_CLASSIFICATION	3.9644849099022356E-7	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999997200022399	WITHOUT_CLASSIFICATION	2.799977601070914E-6	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999839798826405	WITHOUT_CLASSIFICATION	1.6020117359402154E-5	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999997498947767	WITHOUT_CLASSIFICATION	2.5010522332921115E-7	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999997388861785	WITHOUT_CLASSIFICATION	2.611138214382066E-7	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998723732604	WITHOUT_CLASSIFICATION	1.2762673952884064E-7	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999961755586476	WITHOUT_CLASSIFICATION	3.824441352365162E-6	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9990775057090499	WITHOUT_CLASSIFICATION	9.224942909502453E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999979652101446	WITHOUT_CLASSIFICATION	2.034789855427187E-6	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999995389331862	WITHOUT_CLASSIFICATION	4.6106681385604206E-7	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996531255804233	WITHOUT_CLASSIFICATION	3.4687441957667234E-4	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9991522366044013	WITHOUT_CLASSIFICATION	8.477633955986775E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999998423379429	WITHOUT_CLASSIFICATION	1.5766205712327105E-7	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.99999980042853	WITHOUT_CLASSIFICATION	1.9957146997493271E-7	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999982660716386	WITHOUT_CLASSIFICATION	1.7339283614140002E-6	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999168176375207	WITHOUT_CLASSIFICATION	8.31823624791903E-5	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999770172655301	WITHOUT_CLASSIFICATION	2.298273446988444E-5	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999969722359897	WITHOUT_CLASSIFICATION	3.0277640102011595E-6	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9991751144548879	WITHOUT_CLASSIFICATION	8.24885545112036E-4	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996666469631051	WITHOUT_CLASSIFICATION	3.333530368947793E-4	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995395887476073	WITHOUT_CLASSIFICATION	4.6041125239274096E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999993069827577	WITHOUT_CLASSIFICATION	6.930172422209471E-7	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999994064600748	WITHOUT_CLASSIFICATION	5.93539925323423E-7	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999999471126295	WITHOUT_CLASSIFICATION	5.288737050245277E-7	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9998973906323301	WITHOUT_CLASSIFICATION	1.0260936766991808E-4	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999988581035384	WITHOUT_CLASSIFICATION	1.1418964616084452E-6	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998927028730171	WITHOUT_CLASSIFICATION	1.0729712698283142E-4	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999991693940045	WITHOUT_CLASSIFICATION	8.306059955660174E-7	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999625761358676	WITHOUT_CLASSIFICATION	3.742386413239884E-4	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999990780401812	WITHOUT_CLASSIFICATION	9.219598188935781E-7	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999938614794157	WITHOUT_CLASSIFICATION	6.138520584282208E-6	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999866875547	WITHOUT_CLASSIFICATION	1.3312445247287052E-8	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999996701108901	WITHOUT_CLASSIFICATION	3.298891098600739E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999848103667758	WITHOUT_CLASSIFICATION	1.5189633224102813E-5	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999957205236	WITHOUT_CLASSIFICATION	4.279476380952401E-9	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999942640306682	WITHOUT_CLASSIFICATION	5.735969331825111E-6	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999767306204209	WITHOUT_CLASSIFICATION	2.3269379579114634E-5	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999996676544	WITHOUT_CLASSIFICATION	3.3234560766676046E-10	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999974170464	WITHOUT_CLASSIFICATION	2.582953531678545E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998215555143	WITHOUT_CLASSIFICATION	1.78444485778949E-7	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999828981302901	WITHOUT_CLASSIFICATION	1.710186970992464E-5	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999966444257196	WITHOUT_CLASSIFICATION	3.355574280341975E-6	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999081380286	WITHOUT_CLASSIFICATION	9.186197133266297E-8	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998593041240721	WITHOUT_CLASSIFICATION	1.4069587592784386E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999535264822	WITHOUT_CLASSIFICATION	4.647351779706089E-7	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999997744165384	WITHOUT_CLASSIFICATION	2.255834616642357E-7	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999980178394379	WITHOUT_CLASSIFICATION	1.982160562223249E-6	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999988573088373	WITHOUT_CLASSIFICATION	1.1426911626606976E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999992684717867	WITHOUT_CLASSIFICATION	7.31528213289307E-7	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996760566627	WITHOUT_CLASSIFICATION	3.2394333726714663E-7	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999994320317545	WITHOUT_CLASSIFICATION	5.679682455551801E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998966735643334	WITHOUT_CLASSIFICATION	1.0332643566654733E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999929676717991	WITHOUT_CLASSIFICATION	7.032328200915229E-6	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999763537899	WITHOUT_CLASSIFICATION	2.3646210151010823E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999941190968	WITHOUT_CLASSIFICATION	5.8809032378250136E-9	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999629468163	WITHOUT_CLASSIFICATION	3.7053183871277475E-8	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999430694187983	WITHOUT_CLASSIFICATION	5.69305812017153E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999964357303328	WITHOUT_CLASSIFICATION	3.564269667194251E-5	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999431528926495	WITHOUT_CLASSIFICATION	5.684710735047233E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.9999951969759222	WITHOUT_CLASSIFICATION	4.803024077676807E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999652402626	WITHOUT_CLASSIFICATION	3.475973738839216E-8	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999895263115177	WITHOUT_CLASSIFICATION	1.0473688482285806E-5	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999282180178399	WITHOUT_CLASSIFICATION	7.178198216003083E-5	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999664090000051	WITHOUT_CLASSIFICATION	3.359099999488251E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999594438925	WITHOUT_CLASSIFICATION	4.055610753119727E-8	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999999930708987	WITHOUT_CLASSIFICATION	6.929101302394655E-8	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999928339984109	WITHOUT_CLASSIFICATION	7.166001589124794E-6	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998966735643334	WITHOUT_CLASSIFICATION	1.0332643566654733E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999964637724101	WITHOUT_CLASSIFICATION	3.536227589938686E-6	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999850019361035	WITHOUT_CLASSIFICATION	1.4998063896521447E-5	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999208056048	WITHOUT_CLASSIFICATION	7.919439511811484E-8	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999997503404108	WITHOUT_CLASSIFICATION	2.496595891618887E-7	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999896737199548	WITHOUT_CLASSIFICATION	1.0326280045129814E-5	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999991215329693	WITHOUT_CLASSIFICATION	8.784670306295568E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997641890153829	WITHOUT_CLASSIFICATION	2.358109846171743E-4	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998346163113	WITHOUT_CLASSIFICATION	1.6538368882103224E-7	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999942640306682	WITHOUT_CLASSIFICATION	5.735969331825111E-6	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999904799161119	WITHOUT_CLASSIFICATION	9.520083888214382E-6	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999978310718355	WITHOUT_CLASSIFICATION	2.168928164468543E-6	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999778464661	WITHOUT_CLASSIFICATION	2.2153533787890898E-8	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999922455545	WITHOUT_CLASSIFICATION	7.754445494615362E-8	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999101002079969	WITHOUT_CLASSIFICATION	8.989979200317901E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999986832388845	WITHOUT_CLASSIFICATION	1.316761115430396E-6	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999920566356435	WITHOUT_CLASSIFICATION	7.943364356439605E-6	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999980092448448	WITHOUT_CLASSIFICATION	1.9907551552132987E-6	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999992043006944	WITHOUT_CLASSIFICATION	7.956993056149657E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998604760324	WITHOUT_CLASSIFICATION	1.3952396760069084E-7	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999545802071064	WITHOUT_CLASSIFICATION	4.5419792893588114E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999990246153962	WITHOUT_CLASSIFICATION	9.753846037976924E-6	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999890618244123	WITHOUT_CLASSIFICATION	1.0938175587707893E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999890618244123	WITHOUT_CLASSIFICATION	1.0938175587707893E-5	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999997525742179	WITHOUT_CLASSIFICATION	2.474257821157511E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999810721808013	WITHOUT_CLASSIFICATION	1.8927819198591002E-5	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999885535765	WITHOUT_CLASSIFICATION	1.1446423435097817E-8	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999878980522	WITHOUT_CLASSIFICATION	1.2101947694495348E-8	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998896872214	WITHOUT_CLASSIFICATION	1.1031277863574503E-7	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999969969229586	WITHOUT_CLASSIFICATION	3.003077041448639E-6	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999981088838	WITHOUT_CLASSIFICATION	1.8911161138021343E-9	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999976532970226	WITHOUT_CLASSIFICATION	2.3467029773873406E-6	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999103519085	WITHOUT_CLASSIFICATION	8.964809149038577E-7	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999993313458987	WITHOUT_CLASSIFICATION	6.686541012341745E-7	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9998927644831378	WITHOUT_CLASSIFICATION	1.0723551686210775E-4	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.9999801897218372	WITHOUT_CLASSIFICATION	1.9810278162788323E-5	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999813066829302	WITHOUT_CLASSIFICATION	1.8693317069899476E-5	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999907855486	WITHOUT_CLASSIFICATION	9.214451497331883E-9	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999409123724079	WITHOUT_CLASSIFICATION	5.9087627592115726E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999866930626	WITHOUT_CLASSIFICATION	1.3306937428722548E-8	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999980236378748	WITHOUT_CLASSIFICATION	1.9763621251017316E-6	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999984297172106	WITHOUT_CLASSIFICATION	1.5702827893293846E-6	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999244150142	WITHOUT_CLASSIFICATION	7.558498591583478E-8	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999994955515019	WITHOUT_CLASSIFICATION	5.044484981075635E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999998806353634	WITHOUT_CLASSIFICATION	1.1936463660444767E-7	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999999889873331	WITHOUT_CLASSIFICATION	1.1012666840767402E-8	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999745735603	WITHOUT_CLASSIFICATION	2.542643977861585E-8	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999943676113054	WITHOUT_CLASSIFICATION	5.632388694602912E-6	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9995789661901846	WITHOUT_CLASSIFICATION	4.2103380981542096E-4	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9997213637971533	WITHOUT_CLASSIFICATION	2.7863620284675395E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858874083858	WITHOUT_CLASSIFICATION	1.1411259161423843E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999963075382398	WITHOUT_CLASSIFICATION	3.6924617603653164E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999976946613	WITHOUT_CLASSIFICATION	2.3053387245109045E-9	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999994696132756	WITHOUT_CLASSIFICATION	5.303867244523867E-7	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999999958960838	WITHOUT_CLASSIFICATION	4.103916190407067E-8	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999867153605515	WITHOUT_CLASSIFICATION	1.3284639448529162E-5	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999996622903494	WITHOUT_CLASSIFICATION	3.3770965061357545E-7	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999972584562573	WITHOUT_CLASSIFICATION	2.741543742653775E-6	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999060993039598	WITHOUT_CLASSIFICATION	9.390069604016865E-5	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999711557223503	WITHOUT_CLASSIFICATION	2.884427764969458E-5	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998750752404	WITHOUT_CLASSIFICATION	1.249247596975209E-7	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999868748635867	WITHOUT_CLASSIFICATION	1.312513641320843E-5	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999883098919572	WITHOUT_CLASSIFICATION	1.1690108042746423E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.999997330185652	WITHOUT_CLASSIFICATION	2.6698143480078992E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999927923907963	WITHOUT_CLASSIFICATION	7.207609203656886E-6	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989346552986816	WITHOUT_CLASSIFICATION	0.0010653447013183547	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999978398581909	WITHOUT_CLASSIFICATION	2.1601418090797416E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999991391345415	WITHOUT_CLASSIFICATION	8.608654584293569E-7	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999985713585612	WITHOUT_CLASSIFICATION	1.428641438840175E-6	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999990024378237	WITHOUT_CLASSIFICATION	9.97562176345308E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995984688327526	WITHOUT_CLASSIFICATION	4.015311672474161E-4	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9773707220706895	WITHOUT_CLASSIFICATION	0.022629277929310538	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997112708128	WITHOUT_CLASSIFICATION	2.887291872184714E-7	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999958919378628	WITHOUT_CLASSIFICATION	4.108062137188793E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998804380297005	WITHOUT_CLASSIFICATION	1.1956197029948367E-4	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890332098551	WITHOUT_CLASSIFICATION	1.0966790144876623E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999232823231747	WITHOUT_CLASSIFICATION	7.671767682533928E-5	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999892549486	WITHOUT_CLASSIFICATION	1.0745051402898041E-7	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999871512903212	WITHOUT_CLASSIFICATION	1.2848709678820187E-5	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.999988265909191	WITHOUT_CLASSIFICATION	1.1734090808990955E-5	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999959373640191	WITHOUT_CLASSIFICATION	4.062635980876189E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999999497806415	WITHOUT_CLASSIFICATION	5.02193585105019E-7	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999988235217646	WITHOUT_CLASSIFICATION	1.176478235307985E-6	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999994134795218	WITHOUT_CLASSIFICATION	5.865204781897079E-7	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.999998191926608	WITHOUT_CLASSIFICATION	1.8080733919715593E-6	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999983436951866	WITHOUT_CLASSIFICATION	1.6563048134415637E-6	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999954194764	WITHOUT_CLASSIFICATION	4.580523646265567E-9	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999576435867694	WITHOUT_CLASSIFICATION	4.235641323056934E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999646515531885	WITHOUT_CLASSIFICATION	3.534844681149158E-4	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999999386584986	WITHOUT_CLASSIFICATION	6.134150136150163E-8	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.999999999813878	WITHOUT_CLASSIFICATION	1.8612203736165342E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999981137383119	WITHOUT_CLASSIFICATION	1.886261688081639E-6	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999929475617317	WITHOUT_CLASSIFICATION	7.052438268298721E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999872890223306	WITHOUT_CLASSIFICATION	1.271097766951778E-5	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999956009827546	WITHOUT_CLASSIFICATION	4.3990172453160885E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999872890223306	WITHOUT_CLASSIFICATION	1.271097766951778E-5	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999996827729041	WITHOUT_CLASSIFICATION	3.17227096036526E-7	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999997189699834	WITHOUT_CLASSIFICATION	2.8103001660572425E-7	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999957853279895	WITHOUT_CLASSIFICATION	4.214672010427373E-6	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999965627212786	WITHOUT_CLASSIFICATION	3.4372787213229274E-6	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999996875654272	WITHOUT_CLASSIFICATION	3.1243457276764596E-7	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999981271088108	WITHOUT_CLASSIFICATION	1.8728911892997669E-6	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999534527789	WITHOUT_CLASSIFICATION	4.6547221017240675E-8	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999723295664	WITHOUT_CLASSIFICATION	2.7670433628889324E-8	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999999824171057	WITHOUT_CLASSIFICATION	1.7582894287452664E-7	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999978531675373	WITHOUT_CLASSIFICATION	2.146832462662659E-6	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999989741053794	WITHOUT_CLASSIFICATION	1.0258946206799673E-6	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997522883529	WITHOUT_CLASSIFICATION	2.4771164706926E-7	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998620599958	WITHOUT_CLASSIFICATION	1.3794000416628635E-7	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9261070869314171	WITHOUT_CLASSIFICATION	0.07389291306858288	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999908172409494	WITHOUT_CLASSIFICATION	9.18275905055807E-6	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999943656441	WITHOUT_CLASSIFICATION	5.634355905311654E-8	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998150325161	WITHOUT_CLASSIFICATION	1.8496748389178082E-7	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999699494391	WITHOUT_CLASSIFICATION	3.005056093974429E-8	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999908336925	WITHOUT_CLASSIFICATION	9.16630739980054E-9	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999955031988567	WITHOUT_CLASSIFICATION	4.4968011434055495E-6	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999584041493	WITHOUT_CLASSIFICATION	4.1595850617205925E-8	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999986496748245	WITHOUT_CLASSIFICATION	1.3503251754893317E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997893427136435	WITHOUT_CLASSIFICATION	2.1065728635657119E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999861952512404	WITHOUT_CLASSIFICATION	1.3804748759717467E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999946067963575	WITHOUT_CLASSIFICATION	5.393203642400196E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999898020369	WITHOUT_CLASSIFICATION	1.0197963038135353E-8	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.999992256269753	WITHOUT_CLASSIFICATION	7.743730246984296E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.9999981370291539	WITHOUT_CLASSIFICATION	1.8629708460353042E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998116034353	WITHOUT_CLASSIFICATION	1.8839656460361762E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999935451299958	WITHOUT_CLASSIFICATION	6.454870004166866E-6	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999967648593117	WITHOUT_CLASSIFICATION	3.2351406882794476E-6	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998553373719473	WITHOUT_CLASSIFICATION	1.446626280527854E-4	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999998341832	WITHOUT_CLASSIFICATION	1.6581676179812262E-10	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999969202206447	WITHOUT_CLASSIFICATION	3.07977935526826E-6	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996918015325347	WITHOUT_CLASSIFICATION	3.0819846746533514E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999948780734661	WITHOUT_CLASSIFICATION	5.1219265338207085E-6	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999963770080619	WITHOUT_CLASSIFICATION	3.622991938185378E-6	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998117774037	WITHOUT_CLASSIFICATION	1.8822259626549048E-7	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999926225229661	WITHOUT_CLASSIFICATION	7.377477033987101E-6	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999075683099	WITHOUT_CLASSIFICATION	9.243169013401275E-8	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999999532291388	WITHOUT_CLASSIFICATION	4.677086120574699E-8	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9999916428127266	WITHOUT_CLASSIFICATION	8.357187273457509E-6	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999992147465394	WITHOUT_CLASSIFICATION	7.852534605980946E-7	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999898020369	WITHOUT_CLASSIFICATION	1.0197963038135353E-8	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999936577453674	WITHOUT_CLASSIFICATION	6.342254632612722E-6	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999997896458129	WITHOUT_CLASSIFICATION	2.1035418705743386E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999830896029586	WITHOUT_CLASSIFICATION	1.6910397041431053E-5	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999991051351478	WITHOUT_CLASSIFICATION	8.94864852320146E-7	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999909429744537	WITHOUT_CLASSIFICATION	9.057025546206385E-6	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999790005909	WITHOUT_CLASSIFICATION	2.0999409078997194E-8	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999995469735968	WITHOUT_CLASSIFICATION	4.5302640309095795E-7	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999976577523148	WITHOUT_CLASSIFICATION	2.3422476853187307E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999995572489829	WITHOUT_CLASSIFICATION	4.4275101710461736E-6	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999643943429	WITHOUT_CLASSIFICATION	3.5605657138647635E-8	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9996946130567428	WITHOUT_CLASSIFICATION	3.0538694325723506E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999711926695	WITHOUT_CLASSIFICATION	2.88073304952056E-8	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999953007799488	WITHOUT_CLASSIFICATION	4.699220051234853E-6	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999968752275716	WITHOUT_CLASSIFICATION	3.124772428342918E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999907775201	WITHOUT_CLASSIFICATION	9.22247988356022E-9	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999701030866	WITHOUT_CLASSIFICATION	2.98969133973556E-8	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999047787405	WITHOUT_CLASSIFICATION	9.522125964158543E-8	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997182772556	WITHOUT_CLASSIFICATION	2.8172274436730293E-7	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999922101174797	WITHOUT_CLASSIFICATION	7.789882520249087E-6	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.9999936577453674	WITHOUT_CLASSIFICATION	6.342254632612722E-6	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999982118862178	WITHOUT_CLASSIFICATION	1.7881137821511097E-6	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999992296674944	WITHOUT_CLASSIFICATION	7.703325055767829E-7	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999969850237358	WITHOUT_CLASSIFICATION	3.0149762640793244E-6	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999996072037366	WITHOUT_CLASSIFICATION	3.9279626336783424E-7	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999937691911	WITHOUT_CLASSIFICATION	6.2308088357180004E-9	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.751528609284467	WITHOUT_CLASSIFICATION	0.24847139071553317	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.751528609284467	WITHOUT_CLASSIFICATION	0.24847139071553317	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999850533253424	WITHOUT_CLASSIFICATION	1.4946674657768385E-5	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.751528609284467	WITHOUT_CLASSIFICATION	0.24847139071553317	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.751528609284467	WITHOUT_CLASSIFICATION	0.24847139071553317	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999496278511093	WITHOUT_CLASSIFICATION	5.037214889073761E-5	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999891524629079	WITHOUT_CLASSIFICATION	1.0847537092152448E-5	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999972293844529	WITHOUT_CLASSIFICATION	2.7706155471965243E-6	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999789821752821	WITHOUT_CLASSIFICATION	2.1017824717819063E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999670650224707	WITHOUT_CLASSIFICATION	3.2934977529306436E-5	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9963303154411826	WITHOUT_CLASSIFICATION	0.0036696845588173803	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9997356937115478	WITHOUT_CLASSIFICATION	2.643062884521828E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998951136392813	WITHOUT_CLASSIFICATION	1.0488636071879857E-4	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999987737925752	WITHOUT_CLASSIFICATION	1.226207424833954E-6	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.999994975062667	WITHOUT_CLASSIFICATION	5.024937333046842E-6	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.999995730225388	WITHOUT_CLASSIFICATION	4.2697746120484986E-6	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999992455038474	WITHOUT_CLASSIFICATION	7.544961526008714E-7	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999999015766448	WITHOUT_CLASSIFICATION	9.842335527490864E-8	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999996050386619	WITHOUT_CLASSIFICATION	3.949613381278641E-7	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999909955846	WITHOUT_CLASSIFICATION	9.004415471697636E-9	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999701399040534	WITHOUT_CLASSIFICATION	2.9860095946558402E-5	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995877803083	WITHOUT_CLASSIFICATION	4.1221969165249024E-7	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999809836189858	WITHOUT_CLASSIFICATION	1.901638101428065E-5	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999774166056402	WITHOUT_CLASSIFICATION	2.2583394359857684E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999991837567008	WITHOUT_CLASSIFICATION	8.162432992052305E-7	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999613977940295	WITHOUT_CLASSIFICATION	3.860220597039977E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999974326574694	WITHOUT_CLASSIFICATION	2.567342530502073E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995877803083	WITHOUT_CLASSIFICATION	4.1221969165249024E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.999992256269753	WITHOUT_CLASSIFICATION	7.743730246984296E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999819010513697	WITHOUT_CLASSIFICATION	1.8098948630194747E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999932308275137	WITHOUT_CLASSIFICATION	6.769172486293101E-6	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999997020184996	WITHOUT_CLASSIFICATION	2.9798150040550076E-6	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999936476320973	WITHOUT_CLASSIFICATION	6.352367902686774E-6	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999903684491441	WITHOUT_CLASSIFICATION	9.631550855994603E-6	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999989361513795	WITHOUT_CLASSIFICATION	1.063848620503004E-6	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9738422888490744	WITHOUT_CLASSIFICATION	0.026157711150925585	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999888559831173	WITHOUT_CLASSIFICATION	1.1144016882714979E-4	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999998829873463	WITHOUT_CLASSIFICATION	1.1701265376089583E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9998164428496675	WITHOUT_CLASSIFICATION	1.8355715033250246E-4	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999960189404	WITHOUT_CLASSIFICATION	3.981059555461719E-9	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999983618143553	WITHOUT_CLASSIFICATION	1.6381856447557072E-6	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999972431891916	WITHOUT_CLASSIFICATION	2.7568108084130254E-6	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999844053320466	WITHOUT_CLASSIFICATION	1.5594667953441534E-5	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999474883777	WITHOUT_CLASSIFICATION	5.251162216396859E-8	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999993492002657	WITHOUT_CLASSIFICATION	6.50799734305159E-7	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9995826233996349	WITHOUT_CLASSIFICATION	4.173766003651533E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999961370792	WITHOUT_CLASSIFICATION	3.862920712872232E-9	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999929746185021	WITHOUT_CLASSIFICATION	7.025381497924478E-6	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999985935568547	WITHOUT_CLASSIFICATION	1.4064431452630098E-6	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999944368188967	WITHOUT_CLASSIFICATION	5.56318110335786E-6	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999999705583625	WITHOUT_CLASSIFICATION	2.9441637537925945E-8	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.999888559831173	WITHOUT_CLASSIFICATION	1.1144016882714979E-4	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999995852877601	WITHOUT_CLASSIFICATION	4.1471223988791844E-7	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999966961137704	WITHOUT_CLASSIFICATION	3.3038862297100857E-6	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999926419445076	WITHOUT_CLASSIFICATION	7.358055492398469E-5	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999921742375735	WITHOUT_CLASSIFICATION	7.825762426442722E-6	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955264885552	WITHOUT_CLASSIFICATION	4.473511444842393E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999971277003894	WITHOUT_CLASSIFICATION	2.8722996107099407E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999965278563293	WITHOUT_CLASSIFICATION	3.472143670691927E-6	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999998915627809	WITHOUT_CLASSIFICATION	1.0843721907909612E-7	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.9999992721215487	WITHOUT_CLASSIFICATION	7.278784512982851E-7	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999844446063673	WITHOUT_CLASSIFICATION	1.555539363265376E-5	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999898802016446	WITHOUT_CLASSIFICATION	1.0119798355340376E-5	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999993320048192	WITHOUT_CLASSIFICATION	6.679951809186195E-7	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998906862208188	WITHOUT_CLASSIFICATION	1.0931377918125561E-4	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999090539712	WITHOUT_CLASSIFICATION	9.094602876936942E-8	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999989752828994	WITHOUT_CLASSIFICATION	1.0247171006630823E-6	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999999918117322	WITHOUT_CLASSIFICATION	8.188267797443616E-8	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999959160445993	WITHOUT_CLASSIFICATION	4.083955400796083E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999898802016446	WITHOUT_CLASSIFICATION	1.0119798355340376E-5	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999767245483	WITHOUT_CLASSIFICATION	2.3275451770909127E-8	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999679039093121	WITHOUT_CLASSIFICATION	3.209609068782114E-5	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999988171327236	WITHOUT_CLASSIFICATION	1.1828672763168405E-6	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9567276948177349	WITHOUT_CLASSIFICATION	0.04327230518226514	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999982899047093	WITHOUT_CLASSIFICATION	1.7100952906538821E-6	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999987180984012	WITHOUT_CLASSIFICATION	1.281901598764187E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999989752828994	WITHOUT_CLASSIFICATION	1.0247171006630823E-6	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999960358399277	WITHOUT_CLASSIFICATION	3.96416007230242E-6	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767647559247	WITHOUT_CLASSIFICATION	2.3235244075396504E-5	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993057546381	WITHOUT_CLASSIFICATION	6.942453619475446E-7	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994433564205453	WITHOUT_CLASSIFICATION	5.566435794546467E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.79985959259011	WITHOUT_CLASSIFICATION	0.20014040740989006	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9553596669965027	WITHOUT_CLASSIFICATION	0.044640333003497415	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999980044878725	WITHOUT_CLASSIFICATION	1.995512127461501E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999980044878725	WITHOUT_CLASSIFICATION	1.995512127461501E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999757927269	WITHOUT_CLASSIFICATION	2.4207273136646896E-8	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999894511838546	WITHOUT_CLASSIFICATION	1.0548816145337488E-5	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999986582963891	WITHOUT_CLASSIFICATION	1.341703610888288E-6	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999986295041131	WITHOUT_CLASSIFICATION	1.3704958869702046E-6	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999931286304525	WITHOUT_CLASSIFICATION	6.871369547510462E-5	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858209858312	WITHOUT_CLASSIFICATION	1.417901416878053E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605993711412	WITHOUT_CLASSIFICATION	3.940062885876118E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994956336733075	WITHOUT_CLASSIFICATION	5.043663266924676E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999948149844458	WITHOUT_CLASSIFICATION	5.185015554325437E-6	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978979629409	WITHOUT_CLASSIFICATION	2.1020370591956657E-6	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858209858312	WITHOUT_CLASSIFICATION	1.417901416878053E-5	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999605993711412	WITHOUT_CLASSIFICATION	3.940062885876118E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994956336733075	WITHOUT_CLASSIFICATION	5.043663266924676E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999968637060371	WITHOUT_CLASSIFICATION	3.1362939629083593E-6	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.9999877630828197	WITHOUT_CLASSIFICATION	1.2236917180332858E-5	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999990082065	WITHOUT_CLASSIFICATION	9.917935226502967E-10	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999998695964255	WITHOUT_CLASSIFICATION	1.304035745906584E-7	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999996339205212	WITHOUT_CLASSIFICATION	3.660794788917673E-7	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999995130985208	WITHOUT_CLASSIFICATION	4.869014792506942E-7	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999992104441096	WITHOUT_CLASSIFICATION	7.895558904424663E-7	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.9999997017725647	WITHOUT_CLASSIFICATION	2.982274353057176E-7	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999927321187195	WITHOUT_CLASSIFICATION	7.2678812804794E-6	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999998021289398	WITHOUT_CLASSIFICATION	1.978710602601127E-7	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999996304087608	WITHOUT_CLASSIFICATION	3.695912391400189E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999912058050683	WITHOUT_CLASSIFICATION	8.794194931634947E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999967043457322	WITHOUT_CLASSIFICATION	3.295654267826448E-6	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999996077303178	WITHOUT_CLASSIFICATION	3.922696821868821E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997731855989	WITHOUT_CLASSIFICATION	2.268144012052766E-7	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999895168608	WITHOUT_CLASSIFICATION	1.048313920458439E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999633377670067	WITHOUT_CLASSIFICATION	3.666223299334861E-5	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999598241099065	WITHOUT_CLASSIFICATION	4.017589009357244E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999979687054728	WITHOUT_CLASSIFICATION	2.0312945272526874E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999924540715174	WITHOUT_CLASSIFICATION	7.545928482581162E-6	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999976835002	WITHOUT_CLASSIFICATION	2.316499822728136E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999859679982033	WITHOUT_CLASSIFICATION	1.4032001796675232E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999856353655	WITHOUT_CLASSIFICATION	1.4364634529830329E-8	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999998837300618	WITHOUT_CLASSIFICATION	1.1626993829375424E-7	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999998483455	WITHOUT_CLASSIFICATION	1.5165458892465498E-10	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998999751455689	WITHOUT_CLASSIFICATION	1.00024854431147E-4	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804477581857	WITHOUT_CLASSIFICATION	1.9552241814287458E-5	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657984643218	WITHOUT_CLASSIFICATION	1.342015356782178E-4	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999999957570872	WITHOUT_CLASSIFICATION	4.2429127940126077E-8	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778631119727	WITHOUT_CLASSIFICATION	2.2136888027337753E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999549127822327	WITHOUT_CLASSIFICATION	4.5087217767267466E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999816312605591	WITHOUT_CLASSIFICATION	1.8368739440930125E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999816312605591	WITHOUT_CLASSIFICATION	1.8368739440930125E-5	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999998719579	WITHOUT_CLASSIFICATION	1.2804209256896264E-10	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999050353936257	WITHOUT_CLASSIFICATION	9.496460637427193E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9983868913563216	WITHOUT_CLASSIFICATION	0.0016131086436784001	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998429428551853	WITHOUT_CLASSIFICATION	1.570571448147195E-4	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9997240007451795	WITHOUT_CLASSIFICATION	2.75999254820542E-4	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999983812707	WITHOUT_CLASSIFICATION	1.6187292473496252E-9	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999768998970593	WITHOUT_CLASSIFICATION	2.310010294062141E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999848554137009	WITHOUT_CLASSIFICATION	1.5144586299110712E-5	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999954931899644	WITHOUT_CLASSIFICATION	4.506810035640981E-6	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999364490125	WITHOUT_CLASSIFICATION	6.355098750350249E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992268546187	WITHOUT_CLASSIFICATION	7.731453812324931E-7	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997998968837	WITHOUT_CLASSIFICATION	2.0010311626232846E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950386801745	WITHOUT_CLASSIFICATION	4.961319825551047E-6	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996624305251	WITHOUT_CLASSIFICATION	3.3756947486645776E-7	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995797513852	WITHOUT_CLASSIFICATION	4.2024861473339334E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995990302947	WITHOUT_CLASSIFICATION	4.009697053206206E-7	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991168467072	WITHOUT_CLASSIFICATION	8.831532929612613E-7	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964658744097	WITHOUT_CLASSIFICATION	3.5341255903674493E-6	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937103740804	WITHOUT_CLASSIFICATION	6.28962591954592E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999847885627	WITHOUT_CLASSIFICATION	1.5211437299188934E-6	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999084955522687	WITHOUT_CLASSIFICATION	9.150444773128767E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999994864559751	WITHOUT_CLASSIFICATION	5.13544024909021E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998108552517	WITHOUT_CLASSIFICATION	1.8914474828921903E-7	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997079710709	WITHOUT_CLASSIFICATION	2.920289291208623E-7	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999958061647485	WITHOUT_CLASSIFICATION	4.193835251503798E-6	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.999391384825863	WITHOUT_CLASSIFICATION	6.086151741369785E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999989994333709	WITHOUT_CLASSIFICATION	1.0005666291626049E-6	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.994983970408782	WITHOUT_CLASSIFICATION	0.005016029591218026	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998108552517	WITHOUT_CLASSIFICATION	1.8914474828921903E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998108552517	WITHOUT_CLASSIFICATION	1.8914474828921903E-7	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999707380054578	WITHOUT_CLASSIFICATION	2.926199454213083E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999934883085226	WITHOUT_CLASSIFICATION	6.5116914774607E-6	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999923563166059	WITHOUT_CLASSIFICATION	7.643683394103514E-5	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999903953427829	WITHOUT_CLASSIFICATION	9.604657216979155E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999626740945794	WITHOUT_CLASSIFICATION	3.732590542066006E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999924540715174	WITHOUT_CLASSIFICATION	7.545928482581162E-6	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999976883620888	WITHOUT_CLASSIFICATION	2.311637911136834E-6	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999999107677511	WITHOUT_CLASSIFICATION	8.923224889335873E-7	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999601123025	WITHOUT_CLASSIFICATION	3.9887697548141456E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945209567982	WITHOUT_CLASSIFICATION	5.479043201797688E-6	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999697049177125	WITHOUT_CLASSIFICATION	3.029508228749898E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951620851495	WITHOUT_CLASSIFICATION	4.8379148505327144E-6	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999622164335291	WITHOUT_CLASSIFICATION	3.778356647090257E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999622164335291	WITHOUT_CLASSIFICATION	3.778356647090257E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999972873578578	WITHOUT_CLASSIFICATION	2.712642142235622E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999972873578578	WITHOUT_CLASSIFICATION	2.712642142235622E-6	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.997471945301303	WITHOUT_CLASSIFICATION	0.002528054698697059	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979852032809	WITHOUT_CLASSIFICATION	2.0147967190911376E-6	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999899514312	WITHOUT_CLASSIFICATION	1.004856869403175E-8	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990085583043715	WITHOUT_CLASSIFICATION	9.914416956284884E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9986594716367165	WITHOUT_CLASSIFICATION	0.0013405283632834779	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999978373594607	WITHOUT_CLASSIFICATION	2.162640539234802E-6	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999463643707556	WITHOUT_CLASSIFICATION	5.3635629244327214E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994883430646	WITHOUT_CLASSIFICATION	5.11656935409287E-7	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999994745373777	WITHOUT_CLASSIFICATION	5.254626223512696E-7	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999998123249816	WITHOUT_CLASSIFICATION	1.8767501841978776E-7	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999920858564	WITHOUT_CLASSIFICATION	7.914143515249533E-9	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999816983325956	WITHOUT_CLASSIFICATION	1.8301667404366886E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999797798372208	WITHOUT_CLASSIFICATION	2.0220162779213777E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999989613929352	WITHOUT_CLASSIFICATION	1.0386070647194995E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999938211734938	WITHOUT_CLASSIFICATION	6.178826506145854E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999938211734938	WITHOUT_CLASSIFICATION	6.178826506145854E-6	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999938211734938	WITHOUT_CLASSIFICATION	6.178826506145854E-6	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999549623088166	WITHOUT_CLASSIFICATION	4.5037691183442115E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999972689345832	WITHOUT_CLASSIFICATION	2.731065416870947E-6	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999956654242	WITHOUT_CLASSIFICATION	4.334575796530158E-9	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999183741776068	WITHOUT_CLASSIFICATION	8.162582239317322E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998057660972575	WITHOUT_CLASSIFICATION	0.0019423390274250995	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9950231670847495	WITHOUT_CLASSIFICATION	0.004976832915250549	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999963458648997	WITHOUT_CLASSIFICATION	3.654135100299358E-6	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.7473560036313258	WITHOUT_CLASSIFICATION	0.25264399636867424	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999990091801833	WITHOUT_CLASSIFICATION	9.908198167132249E-6	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9995441407989801	WITHOUT_CLASSIFICATION	4.558592010199385E-4	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998800151917	WITHOUT_CLASSIFICATION	1.1998480824996497E-7	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9994561310954257	WITHOUT_CLASSIFICATION	5.438689045743215E-4	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947573423815	WITHOUT_CLASSIFICATION	5.242657618455087E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999130753415	WITHOUT_CLASSIFICATION	8.692465854687049E-8	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998532024978255	WITHOUT_CLASSIFICATION	1.4679750217448637E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.999999931253271	WITHOUT_CLASSIFICATION	6.87467289573696E-8	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999988144592108	WITHOUT_CLASSIFICATION	1.1855407892643657E-6	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999770463699046	WITHOUT_CLASSIFICATION	2.2953630095442658E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999871908890386	WITHOUT_CLASSIFICATION	1.2809110961391507E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.999983814004599	WITHOUT_CLASSIFICATION	1.618599540099467E-5	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.99999992918746	WITHOUT_CLASSIFICATION	7.081254009643043E-8	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999993015221852	WITHOUT_CLASSIFICATION	6.984778148054477E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999417799388957	WITHOUT_CLASSIFICATION	5.822006110443014E-5	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999994128616385	WITHOUT_CLASSIFICATION	5.871383613981316E-7	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9995736786058069	WITHOUT_CLASSIFICATION	4.263213941930063E-4	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999410030236585	WITHOUT_CLASSIFICATION	5.899697634156487E-5	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999995010091687	WITHOUT_CLASSIFICATION	4.989908313574197E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999962397147516	WITHOUT_CLASSIFICATION	3.7602852482875805E-6	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999982688964	WITHOUT_CLASSIFICATION	1.7311036159401779E-9	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999996760527898	WITHOUT_CLASSIFICATION	3.239472102494567E-7	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999896292032674	WITHOUT_CLASSIFICATION	1.0370796732737323E-5	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999953133450252	WITHOUT_CLASSIFICATION	4.68665497477643E-6	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999996302822767	WITHOUT_CLASSIFICATION	3.697177232961937E-7	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9978061568844723	WITHOUT_CLASSIFICATION	0.002193843115527595	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999988483530456	WITHOUT_CLASSIFICATION	1.1516469543848445E-6	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999992896850334	WITHOUT_CLASSIFICATION	7.103149666531256E-7	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999953487166148	WITHOUT_CLASSIFICATION	4.651283385258329E-6	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999587110355281	WITHOUT_CLASSIFICATION	4.128896447190743E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999711886448148	WITHOUT_CLASSIFICATION	2.8811355185152888E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999627680210917	WITHOUT_CLASSIFICATION	3.723197890818503E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999987196322565	WITHOUT_CLASSIFICATION	1.2803677434206245E-6	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999739731209	WITHOUT_CLASSIFICATION	2.6026879202278618E-8	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.650050571820988	WITHOUT_CLASSIFICATION	0.3499494281790119	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998063753231451	WITHOUT_CLASSIFICATION	1.9362467685486704E-4	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999992194511808	WITHOUT_CLASSIFICATION	7.805488192070671E-6	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999992577683878	WITHOUT_CLASSIFICATION	7.422316122282577E-7	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999568593179	WITHOUT_CLASSIFICATION	4.314068215981847E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999996016319351	WITHOUT_CLASSIFICATION	3.9836806489998305E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999528017231742	WITHOUT_CLASSIFICATION	4.7198276825701804E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999986148643204	WITHOUT_CLASSIFICATION	1.3851356796926949E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999909147426786	WITHOUT_CLASSIFICATION	9.085257321392784E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997895644631976	WITHOUT_CLASSIFICATION	2.1043553680240269E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999947379269223	WITHOUT_CLASSIFICATION	5.2620730777093834E-5	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999787759810762	WITHOUT_CLASSIFICATION	2.122401892374982E-5	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998400117778469	WITHOUT_CLASSIFICATION	1.5998822215301098E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999889862039325	WITHOUT_CLASSIFICATION	1.1013796067535733E-5	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.99951044870921	WITHOUT_CLASSIFICATION	4.895512907900361E-4	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999981395067039	WITHOUT_CLASSIFICATION	1.8604932960998934E-6	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999999932113964	WITHOUT_CLASSIFICATION	6.78860360000454E-8	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999628077780874	WITHOUT_CLASSIFICATION	3.719222191256553E-5	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998220979804	WITHOUT_CLASSIFICATION	1.779020195987845E-7	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999997210351874	WITHOUT_CLASSIFICATION	2.789648125690066E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999996040813	WITHOUT_CLASSIFICATION	3.9591884444629795E-10	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999057611556	WITHOUT_CLASSIFICATION	9.423884450869645E-8	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999895160783	WITHOUT_CLASSIFICATION	1.0483921704976073E-7	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999987901145452	WITHOUT_CLASSIFICATION	1.2098854547880462E-6	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.99999999781679	WITHOUT_CLASSIFICATION	2.1832098989171907E-9	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999990858830963	WITHOUT_CLASSIFICATION	9.141169037056676E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999144043111979	WITHOUT_CLASSIFICATION	8.559568880214706E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999144043111979	WITHOUT_CLASSIFICATION	8.559568880214706E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998358034236	WITHOUT_CLASSIFICATION	1.6419657643635553E-7	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999977201137605	WITHOUT_CLASSIFICATION	2.2798862394542592E-6	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999891191853	WITHOUT_CLASSIFICATION	1.0880814604472396E-8	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999999483243508	WITHOUT_CLASSIFICATION	5.167564927383061E-8	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999824271375958	WITHOUT_CLASSIFICATION	1.757286240412877E-5	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999336225713384	WITHOUT_CLASSIFICATION	6.63774286616102E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999555632396	WITHOUT_CLASSIFICATION	4.443676046213789E-8	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999993768099942	WITHOUT_CLASSIFICATION	6.231900058390648E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999820488477734	WITHOUT_CLASSIFICATION	1.795115222658722E-5	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999989852463637	WITHOUT_CLASSIFICATION	1.0147536363453628E-6	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999968331153219	WITHOUT_CLASSIFICATION	3.16688467809316E-5	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999889526529689	WITHOUT_CLASSIFICATION	1.1047347031062486E-5	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999998182245466	WITHOUT_CLASSIFICATION	1.817754533247709E-7	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999682675226	WITHOUT_CLASSIFICATION	3.1732477509330625E-8	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999996833139873	WITHOUT_CLASSIFICATION	3.1668601276084E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9703089646725784	WITHOUT_CLASSIFICATION	0.02969103532742156	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999987328497799	WITHOUT_CLASSIFICATION	1.2671502201407286E-6	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9981708083301741	WITHOUT_CLASSIFICATION	0.0018291916698258877	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9021864035140684	WITHOUT_CLASSIFICATION	0.09781359648593156	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999881777201404	WITHOUT_CLASSIFICATION	1.1822279859642238E-5	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999985528485869	WITHOUT_CLASSIFICATION	1.4471514132160558E-6	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999955016771523	WITHOUT_CLASSIFICATION	4.498322847665348E-6	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999997176990351	WITHOUT_CLASSIFICATION	2.8230096499839073E-7	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9991132078218018	WITHOUT_CLASSIFICATION	8.86792178198176E-4	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999989919203394	WITHOUT_CLASSIFICATION	1.0080796605651762E-6	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999976970663912	WITHOUT_CLASSIFICATION	2.3029336089000013E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999983464077379	WITHOUT_CLASSIFICATION	1.6535922620723593E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999405331164	WITHOUT_CLASSIFICATION	5.946688359963011E-8	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999967042949048	WITHOUT_CLASSIFICATION	3.295705095247054E-6	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999363622222018	WITHOUT_CLASSIFICATION	6.363777779815232E-5	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999993621042954	WITHOUT_CLASSIFICATION	6.378957046232586E-7	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999804271798561	WITHOUT_CLASSIFICATION	1.9572820143865485E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999995799557875	WITHOUT_CLASSIFICATION	4.200442126029989E-7	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999830223517963	WITHOUT_CLASSIFICATION	1.6977648203771143E-5	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9992407615958471	WITHOUT_CLASSIFICATION	7.592384041527872E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9992407615958471	WITHOUT_CLASSIFICATION	7.592384041527872E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999734151381153	WITHOUT_CLASSIFICATION	2.6584861884778338E-5	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999091965029707	WITHOUT_CLASSIFICATION	9.080349702919886E-5	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999917688378	WITHOUT_CLASSIFICATION	8.23116223428803E-9	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999980536483978	WITHOUT_CLASSIFICATION	1.9463516022388113E-6	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999998669992337	WITHOUT_CLASSIFICATION	1.3300076625672403E-7	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999979661484263	WITHOUT_CLASSIFICATION	2.033851573674229E-6	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999986301942978	WITHOUT_CLASSIFICATION	1.3698057022496318E-6	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999984326369016	WITHOUT_CLASSIFICATION	1.5673630984077051E-6	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.999993815813916	WITHOUT_CLASSIFICATION	6.184186083916405E-6	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998932283952494	WITHOUT_CLASSIFICATION	1.0677160475055744E-4	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999984605863921	WITHOUT_CLASSIFICATION	1.5394136079340808E-6	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999924293327531	WITHOUT_CLASSIFICATION	7.570667246938503E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998804407580779	WITHOUT_CLASSIFICATION	1.1955924192211416E-4	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999985065007	WITHOUT_CLASSIFICATION	1.4934992421204957E-9	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999932765890278	WITHOUT_CLASSIFICATION	6.723410972117042E-6	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999753593499716	WITHOUT_CLASSIFICATION	2.464065002837739E-5	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9314405774376874	WITHOUT_CLASSIFICATION	0.06855942256231264	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9314405774376874	WITHOUT_CLASSIFICATION	0.06855942256231264	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999945589035393	WITHOUT_CLASSIFICATION	5.4410964607600365E-6	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999966758909823	WITHOUT_CLASSIFICATION	3.3241090176274008E-6	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999955552147533	WITHOUT_CLASSIFICATION	4.4447852467731465E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999017200633	WITHOUT_CLASSIFICATION	9.827993678490598E-8	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999874625037042	WITHOUT_CLASSIFICATION	1.2537496295839481E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998636452896248	WITHOUT_CLASSIFICATION	1.3635471037523877E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999509470573	WITHOUT_CLASSIFICATION	4.905294269860699E-7	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999989945172807	WITHOUT_CLASSIFICATION	1.0054827192480875E-6	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999987970900721	WITHOUT_CLASSIFICATION	1.2029099279803194E-6	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999988541136624	WITHOUT_CLASSIFICATION	1.1458863376004502E-5	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.999988541136624	WITHOUT_CLASSIFICATION	1.1458863376004502E-5	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998655070067709	WITHOUT_CLASSIFICATION	1.3449299322909971E-4	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999994126849113	WITHOUT_CLASSIFICATION	5.873150886333157E-7	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.99999524659663	WITHOUT_CLASSIFICATION	4.753403370077115E-6	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999998787513399	WITHOUT_CLASSIFICATION	1.2124866009547452E-6	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999594265421567	WITHOUT_CLASSIFICATION	4.0573457843157103E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999897447307	WITHOUT_CLASSIFICATION	1.0255269283331849E-8	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999997299497387	WITHOUT_CLASSIFICATION	2.700502612905682E-7	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998997636094402	WITHOUT_CLASSIFICATION	1.0023639055972953E-4	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9990772685951996	WITHOUT_CLASSIFICATION	9.227314048003124E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999350756212074	WITHOUT_CLASSIFICATION	6.492437879255278E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999980937068266	WITHOUT_CLASSIFICATION	1.9062931733551128E-6	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999556641611631	WITHOUT_CLASSIFICATION	4.4335838836901736E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999082891089709	WITHOUT_CLASSIFICATION	9.1710891029037E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999970094545447	WITHOUT_CLASSIFICATION	2.9905454552910607E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998196175839742	WITHOUT_CLASSIFICATION	1.8038241602580184E-4	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999986470014914	WITHOUT_CLASSIFICATION	1.3529985086080776E-6	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999994696132756	WITHOUT_CLASSIFICATION	5.303867244523867E-7	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999950137707	WITHOUT_CLASSIFICATION	4.9862292324699734E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999751338071	WITHOUT_CLASSIFICATION	2.4866192888485788E-8	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.9999984791768471	WITHOUT_CLASSIFICATION	1.5208231528276863E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999998890488987	WITHOUT_CLASSIFICATION	1.109511013715808E-7	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9993719051605053	WITHOUT_CLASSIFICATION	6.280948394946858E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999996931221785	WITHOUT_CLASSIFICATION	3.068778214525761E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999936689146801	WITHOUT_CLASSIFICATION	6.331085319798947E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999986560776033	WITHOUT_CLASSIFICATION	1.3439223967818028E-6	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999990879942504	WITHOUT_CLASSIFICATION	9.120057495874732E-6	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999998453902151	WITHOUT_CLASSIFICATION	1.5460978493722045E-7	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998386924082574	WITHOUT_CLASSIFICATION	1.613075917425561E-4	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.8000924298026786	WITHOUT_CLASSIFICATION	0.19990757019732142	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999959159899545	WITHOUT_CLASSIFICATION	4.084010045487511E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.996887366507474	WITHOUT_CLASSIFICATION	0.0031126334925259216	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999993444011068	WITHOUT_CLASSIFICATION	6.55598893118644E-7	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9996239167116066	WITHOUT_CLASSIFICATION	3.760832883934797E-4	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999995657902645	WITHOUT_CLASSIFICATION	4.3420973544429495E-7	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999999444416121	WITHOUT_CLASSIFICATION	5.555838785386521E-8	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999982331182465	WITHOUT_CLASSIFICATION	1.7668817534630299E-6	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999935797012722	WITHOUT_CLASSIFICATION	6.420298727758388E-6	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.999992152677392	WITHOUT_CLASSIFICATION	7.84732260789831E-6	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999996537661295	WITHOUT_CLASSIFICATION	3.462338704226696E-7	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999996537661295	WITHOUT_CLASSIFICATION	3.462338704226696E-7	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999997839281912	WITHOUT_CLASSIFICATION	2.160718087854053E-7	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999366266134	WITHOUT_CLASSIFICATION	6.337338663643752E-8	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999985019303487	WITHOUT_CLASSIFICATION	1.498069651432037E-6	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999757161046018	WITHOUT_CLASSIFICATION	2.428389539825696E-5	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999897545938389	WITHOUT_CLASSIFICATION	1.0245406161224519E-5	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999969338386	WITHOUT_CLASSIFICATION	3.0661614737860377E-9	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999746808	WITHOUT_CLASSIFICATION	2.5319131265277164E-11	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999931326041591	WITHOUT_CLASSIFICATION	6.867395840841688E-6	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999997839281912	WITHOUT_CLASSIFICATION	2.160718087854053E-7	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999366266134	WITHOUT_CLASSIFICATION	6.337338663643752E-8	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999939106614167	WITHOUT_CLASSIFICATION	6.089338583233269E-6	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998648711139403	WITHOUT_CLASSIFICATION	1.3512888605968093E-4	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999594560454	WITHOUT_CLASSIFICATION	4.054395476423255E-8	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9997637748643506	WITHOUT_CLASSIFICATION	2.3622513564939494E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999809373072285	WITHOUT_CLASSIFICATION	1.9062692771474858E-5	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999938484173911	WITHOUT_CLASSIFICATION	6.151582608955068E-6	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999986762200528	WITHOUT_CLASSIFICATION	1.3237799471963793E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998496645248827	WITHOUT_CLASSIFICATION	1.5033547511738118E-4	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999956188670563	WITHOUT_CLASSIFICATION	4.381132943658462E-6	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7648828733092747	WITHOUT_CLASSIFICATION	0.2351171266907253	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999559628	WITHOUT_CLASSIFICATION	4.4037334009592707E-11	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7648828733092747	WITHOUT_CLASSIFICATION	0.2351171266907253	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999997969608146	WITHOUT_CLASSIFICATION	2.030391853638265E-7	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999990674482969	WITHOUT_CLASSIFICATION	9.325517029898375E-7	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999992274004955	WITHOUT_CLASSIFICATION	7.725995044509137E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500077847207	WITHOUT_CLASSIFICATION	4.9992215279325614E-5	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999914324930058	WITHOUT_CLASSIFICATION	8.56750699409989E-6	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998496645248827	WITHOUT_CLASSIFICATION	1.5033547511738118E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998496645248827	WITHOUT_CLASSIFICATION	1.5033547511738118E-4	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999165613067	WITHOUT_CLASSIFICATION	8.343869331478223E-8	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999998512438392	WITHOUT_CLASSIFICATION	1.4875616087162542E-7	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999983850449965	WITHOUT_CLASSIFICATION	1.6149550034857803E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999957410668178	WITHOUT_CLASSIFICATION	4.258933182274581E-6	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.999998857744475	WITHOUT_CLASSIFICATION	1.142255525040679E-6	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999999300522469	WITHOUT_CLASSIFICATION	6.994775314730794E-8	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9795205169581751	WITHOUT_CLASSIFICATION	0.020479483041824908	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999993085979384	WITHOUT_CLASSIFICATION	6.914020616254611E-7	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997537477494	WITHOUT_CLASSIFICATION	2.4625225055558906E-7	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9997688880527572	WITHOUT_CLASSIFICATION	2.311119472428535E-4	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.999994783792092	WITHOUT_CLASSIFICATION	5.216207907999164E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999997205636886	WITHOUT_CLASSIFICATION	2.7943631137308533E-7	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999963352765817	WITHOUT_CLASSIFICATION	3.664723418306212E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.9999403398856217	WITHOUT_CLASSIFICATION	5.966011437838395E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999997117482364	WITHOUT_CLASSIFICATION	2.8825176354477373E-7	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997875142520568	WITHOUT_CLASSIFICATION	2.124857479431328E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9996396648016207	WITHOUT_CLASSIFICATION	3.6033519837930624E-4	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998853471477579	WITHOUT_CLASSIFICATION	1.1465285224213263E-4	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998499184598089	WITHOUT_CLASSIFICATION	1.500815401910491E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999560949546	WITHOUT_CLASSIFICATION	4.3905045355350484E-8	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999802314649212	WITHOUT_CLASSIFICATION	1.97685350788031E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9993801433312339	WITHOUT_CLASSIFICATION	6.198566687660768E-4	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999650670193247	WITHOUT_CLASSIFICATION	3.4932980675335565E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9891270451884484	WITHOUT_CLASSIFICATION	0.010872954811551512	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999655103816553	WITHOUT_CLASSIFICATION	3.448961834471512E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999116712716895	WITHOUT_CLASSIFICATION	8.832872831058595E-5	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999993458651026	WITHOUT_CLASSIFICATION	6.541348974052364E-6	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998516276852	WITHOUT_CLASSIFICATION	1.483723147714568E-7	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9033255266761017	WITHOUT_CLASSIFICATION	0.0966744733238984	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999257991973156	WITHOUT_CLASSIFICATION	7.420080268437393E-5	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999339159749899	WITHOUT_CLASSIFICATION	6.60840250100684E-5	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9125086609324087	WITHOUT_CLASSIFICATION	0.08749133906759136	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999853849327887	WITHOUT_CLASSIFICATION	1.4615067211430006E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999993085979384	WITHOUT_CLASSIFICATION	6.914020616254611E-7	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999934655278492	WITHOUT_CLASSIFICATION	6.5344721507412875E-6	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.999920907445734	WITHOUT_CLASSIFICATION	7.909255426595873E-5	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9927461198687014	WITHOUT_CLASSIFICATION	0.007253880131298558	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999998515258902	WITHOUT_CLASSIFICATION	1.4847410973256175E-7	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9997094950617605	WITHOUT_CLASSIFICATION	2.905049382393982E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.999989364343616	WITHOUT_CLASSIFICATION	1.0635656383971578E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999957410668178	WITHOUT_CLASSIFICATION	4.258933182274581E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999957410668178	WITHOUT_CLASSIFICATION	4.258933182274581E-6	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999375863386941	WITHOUT_CLASSIFICATION	6.241366130592885E-5	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999573366226251	WITHOUT_CLASSIFICATION	4.266337737490092E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999939764922073	WITHOUT_CLASSIFICATION	6.023507792592072E-6	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999724334010268	WITHOUT_CLASSIFICATION	2.7566598973130003E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9978439866123838	WITHOUT_CLASSIFICATION	0.002156013387616245	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999998012959587	WITHOUT_CLASSIFICATION	1.9870404139487225E-7	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999925220744497	WITHOUT_CLASSIFICATION	7.47792555036825E-6	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999588530697	WITHOUT_CLASSIFICATION	4.114693035199753E-8	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999998318810303	WITHOUT_CLASSIFICATION	1.6811896977490665E-7	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999313673429863	WITHOUT_CLASSIFICATION	6.863265701380826E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999510193563	WITHOUT_CLASSIFICATION	4.89806436511588E-8	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999976917722824	WITHOUT_CLASSIFICATION	2.30822771763629E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999612827552207	WITHOUT_CLASSIFICATION	3.8717244779240526E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999997839281912	WITHOUT_CLASSIFICATION	2.160718087854053E-7	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999510193563	WITHOUT_CLASSIFICATION	4.89806436511588E-8	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999986336666068	WITHOUT_CLASSIFICATION	1.3663333932468346E-6	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999961873031392	WITHOUT_CLASSIFICATION	3.812696860784772E-6	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999990239617298	WITHOUT_CLASSIFICATION	9.76038270215058E-7	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.8911856557027644	IMPLEMENTATION	0.10881434429723555	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999612827552207	WITHOUT_CLASSIFICATION	3.8717244779240526E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999446907892	WITHOUT_CLASSIFICATION	5.530921073670994E-8	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999868895547	WITHOUT_CLASSIFICATION	1.3110445320740456E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999589857805	WITHOUT_CLASSIFICATION	4.101421937318185E-8	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999971577	WITHOUT_CLASSIFICATION	2.842176303984907E-12	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999335733546219	WITHOUT_CLASSIFICATION	6.64266453781614E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999994487856887	WITHOUT_CLASSIFICATION	5.512143112747276E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999321789906	WITHOUT_CLASSIFICATION	6.782100931521013E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999474957422867	WITHOUT_CLASSIFICATION	5.250425771318943E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999988760214121	WITHOUT_CLASSIFICATION	1.1239785879026275E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999985916506858	WITHOUT_CLASSIFICATION	1.4083493142342413E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999235189585	WITHOUT_CLASSIFICATION	7.64810415638191E-8	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999704150056898	WITHOUT_CLASSIFICATION	2.9584994310179958E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999510193563	WITHOUT_CLASSIFICATION	4.89806436511588E-8	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999446907892	WITHOUT_CLASSIFICATION	5.530921073670994E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999589857805	WITHOUT_CLASSIFICATION	4.101421937318185E-8	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999992650492872	WITHOUT_CLASSIFICATION	7.349507128012299E-7	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.999997473190459	WITHOUT_CLASSIFICATION	2.5268095410540334E-6	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.999999896293013	WITHOUT_CLASSIFICATION	1.0370698692168263E-7	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999612827552207	WITHOUT_CLASSIFICATION	3.8717244779240526E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999964941836816	WITHOUT_CLASSIFICATION	3.5058163183788076E-6	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999754443229898	WITHOUT_CLASSIFICATION	2.455567701018221E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999393169147006	WITHOUT_CLASSIFICATION	6.068308529931025E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999292294230835	WITHOUT_CLASSIFICATION	7.077057691647671E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999474957422867	WITHOUT_CLASSIFICATION	5.250425771318943E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999986336666068	WITHOUT_CLASSIFICATION	1.3663333932468346E-6	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999055066521371	WITHOUT_CLASSIFICATION	9.44933478628745E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999998165491435	WITHOUT_CLASSIFICATION	1.8345085645413857E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999977760731068	WITHOUT_CLASSIFICATION	2.2239268931374697E-6	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999844771432219	WITHOUT_CLASSIFICATION	1.5522856778017905E-5	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9882247533055866	WITHOUT_CLASSIFICATION	0.011775246694413394	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997329123301307	WITHOUT_CLASSIFICATION	2.670876698692841E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999288688003046	WITHOUT_CLASSIFICATION	7.113119969545147E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999500077847207	WITHOUT_CLASSIFICATION	4.9992215279325614E-5	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999315404499	WITHOUT_CLASSIFICATION	6.84595501431471E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999960452508	WITHOUT_CLASSIFICATION	3.954749129829955E-9	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999691907109	WITHOUT_CLASSIFICATION	3.080928907775261E-8	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999971230586	WITHOUT_CLASSIFICATION	2.876941335429172E-9	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999973074527	WITHOUT_CLASSIFICATION	2.6925472196943818E-9	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999358962347	WITHOUT_CLASSIFICATION	6.410376532689008E-8	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999992256126914	WITHOUT_CLASSIFICATION	7.743873085984409E-7	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999678220312	WITHOUT_CLASSIFICATION	3.2177968814328616E-8	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999292294230835	WITHOUT_CLASSIFICATION	7.077057691647671E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999323008951848	WITHOUT_CLASSIFICATION	6.769910481529051E-5	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999373798620871	WITHOUT_CLASSIFICATION	6.262013791291875E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999523107591254	WITHOUT_CLASSIFICATION	4.7689240874642474E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999111002690189	WITHOUT_CLASSIFICATION	8.889973098109258E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.999998356867348	WITHOUT_CLASSIFICATION	1.643132652085036E-6	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999996068928654	WITHOUT_CLASSIFICATION	3.931071345293432E-7	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999979666364248	WITHOUT_CLASSIFICATION	2.0333635751699097E-6	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9998581730284513	WITHOUT_CLASSIFICATION	1.4182697154876007E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999970265633162	WITHOUT_CLASSIFICATION	2.9734366838219103E-6	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998238881677288	WITHOUT_CLASSIFICATION	1.7611183227118435E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.999999701391961	WITHOUT_CLASSIFICATION	2.986080389707154E-7	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998249689135	WITHOUT_CLASSIFICATION	1.7503108654739168E-7	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9995936123081786	WITHOUT_CLASSIFICATION	4.063876918214281E-4	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999939039883806	WITHOUT_CLASSIFICATION	6.096011619410889E-6	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999994764341076	WITHOUT_CLASSIFICATION	5.235658923670068E-7	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999999914394169	WITHOUT_CLASSIFICATION	8.560583095282354E-8	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999774860188076	WITHOUT_CLASSIFICATION	2.2513981192413796E-5	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999884888872	WITHOUT_CLASSIFICATION	1.151111280320955E-7	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999990133876925	WITHOUT_CLASSIFICATION	9.866123075407768E-7	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999999414074017	WITHOUT_CLASSIFICATION	5.8592598324272844E-8	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9998589286768849	WITHOUT_CLASSIFICATION	1.4107132311510872E-4	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999912109539785	WITHOUT_CLASSIFICATION	8.789046021459767E-6	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996787504029	WITHOUT_CLASSIFICATION	3.21249597064514E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999998113704517	WITHOUT_CLASSIFICATION	1.8862954830804464E-7	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999992783230347	WITHOUT_CLASSIFICATION	7.216769652029472E-7	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7991661828043525	WITHOUT_CLASSIFICATION	0.20083381719564755	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9996324609948924	WITHOUT_CLASSIFICATION	3.675390051075427E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999840798312798	WITHOUT_CLASSIFICATION	1.592016872021335E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998251027835265	WITHOUT_CLASSIFICATION	1.7489721647338515E-4	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9729860660224212	IMPLEMENTATION	0.027013933977578734	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999984081001	WITHOUT_CLASSIFICATION	1.591899893309017E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996531255804233	WITHOUT_CLASSIFICATION	3.4687441957667234E-4	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999090509394	WITHOUT_CLASSIFICATION	9.094906059640947E-8	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999998346163113	WITHOUT_CLASSIFICATION	1.6538368882103224E-7	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999534786413	WITHOUT_CLASSIFICATION	4.65213586515814E-8	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999964268132761	WITHOUT_CLASSIFICATION	3.5731867238943135E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999515667363	WITHOUT_CLASSIFICATION	4.8433263815051606E-8	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999912574734752	WITHOUT_CLASSIFICATION	8.74252652476229E-6	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.999964268132761	WITHOUT_CLASSIFICATION	3.5731867238943135E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999534786413	WITHOUT_CLASSIFICATION	4.65213586515814E-8	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999515667363	WITHOUT_CLASSIFICATION	4.8433263815051606E-8	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999961815841628	WITHOUT_CLASSIFICATION	3.818415837135012E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999993490901529	WITHOUT_CLASSIFICATION	6.509098471092844E-7	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999756594782181	WITHOUT_CLASSIFICATION	2.434052178188603E-5	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999772163748109	WITHOUT_CLASSIFICATION	2.2783625189170214E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999987039827	WITHOUT_CLASSIFICATION	1.2960173150804069E-9	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5451236812994388	WITHOUT_CLASSIFICATION	0.4548763187005613	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999996567814312	WITHOUT_CLASSIFICATION	3.432185688099037E-6	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999286499936263	WITHOUT_CLASSIFICATION	7.135000637371113E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999805175694915	WITHOUT_CLASSIFICATION	1.948243050854393E-5	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999984377223917	WITHOUT_CLASSIFICATION	1.5622776083486059E-6	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.99999282203427	WITHOUT_CLASSIFICATION	7.177965730111281E-6	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999998370377393	WITHOUT_CLASSIFICATION	1.6296226070876238E-7	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999655938497731	WITHOUT_CLASSIFICATION	3.440615022683597E-5	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999772163748109	WITHOUT_CLASSIFICATION	2.2783625189170214E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998345929408544	WITHOUT_CLASSIFICATION	1.6540705914547122E-4	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.999999902599135	WITHOUT_CLASSIFICATION	9.740086506520245E-8	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999986413336	WITHOUT_CLASSIFICATION	1.358666366402291E-9	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999999814717782	WITHOUT_CLASSIFICATION	1.8528221758947413E-8	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999995470071803	WITHOUT_CLASSIFICATION	4.529928197958942E-7	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998872640984	WITHOUT_CLASSIFICATION	1.1273590164056114E-7	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9992360392988747	WITHOUT_CLASSIFICATION	7.639607011252659E-4	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999728858031	WITHOUT_CLASSIFICATION	2.711419692331217E-8	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999831082853754	WITHOUT_CLASSIFICATION	1.68917146246023E-5	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999411874945776	WITHOUT_CLASSIFICATION	5.8812505422379505E-5	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999715917983	WITHOUT_CLASSIFICATION	2.8408201668063792E-8	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999715917983	WITHOUT_CLASSIFICATION	2.8408201668063792E-8	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999978233554	WITHOUT_CLASSIFICATION	2.1766446826133545E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999978233554	WITHOUT_CLASSIFICATION	2.1766446826133545E-9	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9920217411544603	WITHOUT_CLASSIFICATION	0.007978258845539583	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999986413336	WITHOUT_CLASSIFICATION	1.358666366402291E-9	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999946337258391	WITHOUT_CLASSIFICATION	5.3662741608996946E-5	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999823410684969	WITHOUT_CLASSIFICATION	1.7658931503004278E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999583889921	WITHOUT_CLASSIFICATION	4.161100790028515E-8	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999583889921	WITHOUT_CLASSIFICATION	4.161100790028515E-8	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998354180214	WITHOUT_CLASSIFICATION	1.6458197858592454E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999927287993711	WITHOUT_CLASSIFICATION	7.271200628864196E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999996777889349	WITHOUT_CLASSIFICATION	3.222110650989129E-6	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999978845137847	WITHOUT_CLASSIFICATION	2.115486215205771E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9988293371158098	WITHOUT_CLASSIFICATION	0.0011706628841901979	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999993459056213	WITHOUT_CLASSIFICATION	6.540943787328098E-7	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999979469382982	WITHOUT_CLASSIFICATION	2.0530617016641392E-6	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999910963082667	WITHOUT_CLASSIFICATION	8.903691733290984E-6	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9996201191813727	WITHOUT_CLASSIFICATION	3.7988081862724024E-4	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999588507873	WITHOUT_CLASSIFICATION	4.1149212628948064E-8	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999813484329905	WITHOUT_CLASSIFICATION	1.8651567009603642E-5	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.9994188957277489	WITHOUT_CLASSIFICATION	5.811042722511329E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999181708871	WITHOUT_CLASSIFICATION	8.182911284613722E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999988895263099	WITHOUT_CLASSIFICATION	1.110473690180224E-6	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999868192308854	WITHOUT_CLASSIFICATION	1.3180769114671403E-5	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9990061284654138	WITHOUT_CLASSIFICATION	9.938715345862161E-4	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733237287076	WITHOUT_CLASSIFICATION	2.6676271292421162E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999802078414196	WITHOUT_CLASSIFICATION	1.979215858048213E-5	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9997500783898621	WITHOUT_CLASSIFICATION	2.499216101379564E-4	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999997368168662	WITHOUT_CLASSIFICATION	2.6318313384480815E-7	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998716205369211	WITHOUT_CLASSIFICATION	1.2837946307885467E-4	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999998212280737	WITHOUT_CLASSIFICATION	1.787719261580143E-7	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999981857847155	WITHOUT_CLASSIFICATION	1.8142152845016425E-5	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999890983704334	WITHOUT_CLASSIFICATION	1.0901629566724271E-5	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9998429428551853	WITHOUT_CLASSIFICATION	1.570571448147195E-4	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999983836567052	WITHOUT_CLASSIFICATION	1.6163432946613358E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998249689135	WITHOUT_CLASSIFICATION	1.7503108654739168E-7	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999988325565408	WITHOUT_CLASSIFICATION	1.1674434592554677E-6	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999972478027292	WITHOUT_CLASSIFICATION	2.752197270851161E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998132210328282	WITHOUT_CLASSIFICATION	1.8677896717177273E-4	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996378311995212	WITHOUT_CLASSIFICATION	3.621688004787431E-4	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999785568008301	WITHOUT_CLASSIFICATION	2.1443199169777887E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999785568008301	WITHOUT_CLASSIFICATION	2.1443199169777887E-5	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998831529611	WITHOUT_CLASSIFICATION	1.1684703889140401E-7	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999930097505721	WITHOUT_CLASSIFICATION	6.990249427808721E-6	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999996473792528	WITHOUT_CLASSIFICATION	3.526207471154601E-7	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999996473792528	WITHOUT_CLASSIFICATION	3.526207471154601E-7	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999964357303328	WITHOUT_CLASSIFICATION	3.564269667194251E-5	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999806196419619	WITHOUT_CLASSIFICATION	1.9380358037984986E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9999540309021568	WITHOUT_CLASSIFICATION	4.596909784302868E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999626740945794	WITHOUT_CLASSIFICATION	3.732590542066006E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999971537574016	WITHOUT_CLASSIFICATION	2.846242598527738E-6	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999989666740141	WITHOUT_CLASSIFICATION	1.0333259858099978E-6	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.9992841142045005	WITHOUT_CLASSIFICATION	7.158857954995164E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999928769994759	WITHOUT_CLASSIFICATION	7.123000524089294E-6	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998826035422	WITHOUT_CLASSIFICATION	1.1739645784400061E-7	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999998826035422	WITHOUT_CLASSIFICATION	1.1739645784400061E-7	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999571908742001	WITHOUT_CLASSIFICATION	4.2809125799977026E-5	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999979115887961	WITHOUT_CLASSIFICATION	2.0884112038805927E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999979115887961	WITHOUT_CLASSIFICATION	2.0884112038805927E-6	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999652180819	WITHOUT_CLASSIFICATION	3.478191807860171E-8	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999962389102	WITHOUT_CLASSIFICATION	3.761089762497779E-9	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9966636045771974	WITHOUT_CLASSIFICATION	0.0033363954228027015	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.9999649766182647	WITHOUT_CLASSIFICATION	3.502338173535684E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999755225181307	WITHOUT_CLASSIFICATION	2.4477481869251518E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999848896076	WITHOUT_CLASSIFICATION	1.5110392384535422E-8	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.999967873780483	WITHOUT_CLASSIFICATION	3.212621951694243E-5	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999085894772836	WITHOUT_CLASSIFICATION	9.141052271639769E-4	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999393503399	WITHOUT_CLASSIFICATION	6.064966005863913E-8	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.999983586385845	WITHOUT_CLASSIFICATION	1.6413614154998047E-5	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999997592811247	WITHOUT_CLASSIFICATION	2.407188752324018E-7	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9997347992715216	WITHOUT_CLASSIFICATION	2.6520072847830285E-4	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999931825865921	WITHOUT_CLASSIFICATION	6.817413407987909E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999931825865921	WITHOUT_CLASSIFICATION	6.817413407987909E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999931825865921	WITHOUT_CLASSIFICATION	6.817413407987909E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999931825865921	WITHOUT_CLASSIFICATION	6.817413407987909E-6	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999960054154016	WITHOUT_CLASSIFICATION	3.994584598368903E-6	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998439095230426	WITHOUT_CLASSIFICATION	1.5609047695739714E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999997255332033	WITHOUT_CLASSIFICATION	2.7446679670461456E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.999989731907186	WITHOUT_CLASSIFICATION	1.0268092813976882E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999766944291285	WITHOUT_CLASSIFICATION	2.3305570871426944E-5	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9998865788972179	WITHOUT_CLASSIFICATION	1.1342110278205587E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.989200339857979	WITHOUT_CLASSIFICATION	0.010799660142021023	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999192979511028	WITHOUT_CLASSIFICATION	8.070204889720119E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999322498068609	WITHOUT_CLASSIFICATION	6.77501931390573E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999953051767055	WITHOUT_CLASSIFICATION	4.694823294475736E-6	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999948713033024	WITHOUT_CLASSIFICATION	5.128696697594244E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998807379062	WITHOUT_CLASSIFICATION	1.1926209372929253E-7	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999999899367261	WITHOUT_CLASSIFICATION	1.0063273910280022E-7	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999748314567113	WITHOUT_CLASSIFICATION	2.516854328867751E-5	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999258703265509	WITHOUT_CLASSIFICATION	7.412967344915139E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998807379062	WITHOUT_CLASSIFICATION	1.1926209372929253E-7	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9977031600731879	WITHOUT_CLASSIFICATION	0.0022968399268121138	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999911906158497	WITHOUT_CLASSIFICATION	8.809384150187776E-6	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999988819849963	WITHOUT_CLASSIFICATION	1.118015003665959E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999808543505	WITHOUT_CLASSIFICATION	1.9145649560170303E-8	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999990492333041	WITHOUT_CLASSIFICATION	9.507666958087581E-7	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999957148205689	WITHOUT_CLASSIFICATION	4.285179431088818E-6	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999997813987381	WITHOUT_CLASSIFICATION	2.1860126193909776E-7	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999854002650956	WITHOUT_CLASSIFICATION	1.4599734904294697E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999845729029152	WITHOUT_CLASSIFICATION	1.54270970847051E-5	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999992055360348	WITHOUT_CLASSIFICATION	7.944639650429415E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999049412766	WITHOUT_CLASSIFICATION	9.505872347994376E-8	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999999582291146	WITHOUT_CLASSIFICATION	4.1770885525693546E-8	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999821950115039	WITHOUT_CLASSIFICATION	1.7804988496073835E-5	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999590973450234	WITHOUT_CLASSIFICATION	4.090265497668861E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999981788875849	WITHOUT_CLASSIFICATION	1.8211124150882505E-6	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999928953348673	WITHOUT_CLASSIFICATION	7.104665132606845E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999970394349	WITHOUT_CLASSIFICATION	2.9605651074356412E-8	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999933139087834	WITHOUT_CLASSIFICATION	6.686091216550001E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999938987964663	WITHOUT_CLASSIFICATION	6.101203533727721E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999933139087834	WITHOUT_CLASSIFICATION	6.686091216550001E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999976836320583	WITHOUT_CLASSIFICATION	2.31636794179509E-6	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999994331666845	WITHOUT_CLASSIFICATION	5.66833315519225E-7	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9998262728980677	WITHOUT_CLASSIFICATION	1.7372710193237398E-4	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999898896349899	WITHOUT_CLASSIFICATION	1.011036501012891E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999909066099307	WITHOUT_CLASSIFICATION	9.093390069305309E-6	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999930829520831	WITHOUT_CLASSIFICATION	6.917047916877284E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999968895988463	WITHOUT_CLASSIFICATION	3.110401153744013E-6	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.999999970394349	WITHOUT_CLASSIFICATION	2.9605651074356412E-8	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999938987964663	WITHOUT_CLASSIFICATION	6.101203533727721E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999976836320583	WITHOUT_CLASSIFICATION	2.31636794179509E-6	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999992861668814	WITHOUT_CLASSIFICATION	7.138331185581582E-7	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999726826203601	WITHOUT_CLASSIFICATION	2.7317379639971745E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9995307473223115	WITHOUT_CLASSIFICATION	4.692526776884696E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999980320245547	WITHOUT_CLASSIFICATION	1.9679754452952717E-6	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9993184436126608	WITHOUT_CLASSIFICATION	6.815563873393441E-4	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9995029560610942	WITHOUT_CLASSIFICATION	4.970439389057342E-4	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999984791977798	WITHOUT_CLASSIFICATION	1.5208022201834675E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733237287076	WITHOUT_CLASSIFICATION	2.6676271292421162E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999994331666845	WITHOUT_CLASSIFICATION	5.66833315519225E-7	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999089866236	WITHOUT_CLASSIFICATION	9.101337641975443E-8	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999999233603383	WITHOUT_CLASSIFICATION	7.663966172373243E-8	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9971818391486731	WITHOUT_CLASSIFICATION	0.0028181608513268654	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999627547149	WITHOUT_CLASSIFICATION	3.724528514793487E-8	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733237287076	WITHOUT_CLASSIFICATION	2.6676271292421162E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999973891247043	WITHOUT_CLASSIFICATION	2.6108752957835763E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733237287076	WITHOUT_CLASSIFICATION	2.6676271292421162E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999998937968214	WITHOUT_CLASSIFICATION	1.0620317860042359E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999927923907963	WITHOUT_CLASSIFICATION	7.207609203656886E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999969707990835	WITHOUT_CLASSIFICATION	3.0292009166815846E-6	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999934086729579	WITHOUT_CLASSIFICATION	6.591327042110801E-6	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997112708128	WITHOUT_CLASSIFICATION	2.887291872184714E-7	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999910585943352	WITHOUT_CLASSIFICATION	8.941405664649763E-6	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999999852472777	WITHOUT_CLASSIFICATION	1.4752722268678782E-8	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999932826173915	WITHOUT_CLASSIFICATION	6.717382608566015E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999999540382422	WITHOUT_CLASSIFICATION	4.5961757907024734E-8	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999980537907979	WITHOUT_CLASSIFICATION	1.9462092020236943E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999144043111979	WITHOUT_CLASSIFICATION	8.559568880214706E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999104584412	WITHOUT_CLASSIFICATION	8.954155875532E-8	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.9966636045771974	WITHOUT_CLASSIFICATION	0.0033363954228027015	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999966445046834	WITHOUT_CLASSIFICATION	3.3554953165739858E-6	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999148229249054	WITHOUT_CLASSIFICATION	8.51770750945161E-5	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999993722448621	WITHOUT_CLASSIFICATION	6.277551378380241E-7	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999991391345415	WITHOUT_CLASSIFICATION	8.608654584293569E-7	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999987785565	WITHOUT_CLASSIFICATION	1.2214435352329014E-9	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9980767520671505	WITHOUT_CLASSIFICATION	0.001923247932849512	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9994007616952915	WITHOUT_CLASSIFICATION	5.992383047084542E-4	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999903407297611	WITHOUT_CLASSIFICATION	9.659270238869566E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999302033459	WITHOUT_CLASSIFICATION	6.979665410888758E-8	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999946976803	WITHOUT_CLASSIFICATION	5.30231963997219E-9	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9968178643834967	WITHOUT_CLASSIFICATION	0.0031821356165033124	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999525033583458	WITHOUT_CLASSIFICATION	4.749664165426835E-5	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999860528091205	WITHOUT_CLASSIFICATION	1.394719087953217E-5	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996387010274	WITHOUT_CLASSIFICATION	3.6129897257995866E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999970182343366	WITHOUT_CLASSIFICATION	2.9817656634031094E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9999167115612959	WITHOUT_CLASSIFICATION	8.328843870398924E-5	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999984388141422	WITHOUT_CLASSIFICATION	1.5611858578412384E-6	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997478781030888	WITHOUT_CLASSIFICATION	2.5212189691115446E-4	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999909985249623	WITHOUT_CLASSIFICATION	9.001475037813743E-6	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999873090687537	WITHOUT_CLASSIFICATION	1.269093124647303E-5	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999997864551965	WITHOUT_CLASSIFICATION	2.135448034128439E-7	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9945377624234261	WITHOUT_CLASSIFICATION	0.0054622375765739015	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999981137383119	WITHOUT_CLASSIFICATION	1.886261688081639E-6	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999996128301009	WITHOUT_CLASSIFICATION	3.8716989911765684E-7	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.999991242787563	WITHOUT_CLASSIFICATION	8.757212436973787E-6	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997338443730972	WITHOUT_CLASSIFICATION	2.6615562690284893E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999999476975305	WITHOUT_CLASSIFICATION	5.230246942665536E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9967103574025993	WITHOUT_CLASSIFICATION	0.003289642597400713	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999936882088004	WITHOUT_CLASSIFICATION	6.311791199511297E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996133892556976	WITHOUT_CLASSIFICATION	3.866107443024349E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998927028730171	WITHOUT_CLASSIFICATION	1.0729712698283142E-4	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9998927028730171	WITHOUT_CLASSIFICATION	1.0729712698283142E-4	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9901964406714592	WITHOUT_CLASSIFICATION	0.009803559328540821	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999932826173915	WITHOUT_CLASSIFICATION	6.717382608566015E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9975704644149239	WITHOUT_CLASSIFICATION	0.002429535585076154	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999982622141	WITHOUT_CLASSIFICATION	1.7377859977551512E-9	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999947874527178	WITHOUT_CLASSIFICATION	5.212547282204081E-5	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998165158503917	WITHOUT_CLASSIFICATION	1.8348414960833175E-4	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999905176053424	WITHOUT_CLASSIFICATION	9.482394657609542E-6	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999464811132791	WITHOUT_CLASSIFICATION	5.3518886721010364E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999975537869	WITHOUT_CLASSIFICATION	2.4462131109540908E-9	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999999999469036	WITHOUT_CLASSIFICATION	5.309640301787568E-10	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998110914063916	WITHOUT_CLASSIFICATION	1.8890859360844539E-4	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.999999820683297	WITHOUT_CLASSIFICATION	1.7931670305644998E-7	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999953290741869	WITHOUT_CLASSIFICATION	4.67092581310683E-6	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999975453705	WITHOUT_CLASSIFICATION	2.454629403985463E-9	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999999945459377	WITHOUT_CLASSIFICATION	5.454062301517697E-8	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9992281952092084	WITHOUT_CLASSIFICATION	7.718047907916226E-4	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999998462477873	WITHOUT_CLASSIFICATION	1.5375221270149295E-7	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999938050711	WITHOUT_CLASSIFICATION	6.194928901523709E-8	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999716345155	WITHOUT_CLASSIFICATION	2.8365484484867717E-8	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9989827975179673	WITHOUT_CLASSIFICATION	0.0010172024820327538	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999989114616996	WITHOUT_CLASSIFICATION	1.088538300390007E-6	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998952512042127	WITHOUT_CLASSIFICATION	1.0474879578718704E-4	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999716225427839	WITHOUT_CLASSIFICATION	2.8377457216178336E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999659201183	WITHOUT_CLASSIFICATION	3.4079881737229145E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9967103574025993	WITHOUT_CLASSIFICATION	0.003289642597400713	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999964081479505	WITHOUT_CLASSIFICATION	3.591852049521962E-6	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999990903521	WITHOUT_CLASSIFICATION	9.096478366696557E-10	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999753132149	WITHOUT_CLASSIFICATION	2.4686785043715237E-8	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999996812009536	WITHOUT_CLASSIFICATION	3.187990463990287E-7	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9649971188032836	WITHOUT_CLASSIFICATION	0.035002881196716365	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998803890682374	WITHOUT_CLASSIFICATION	1.1961093176261063E-4	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999997993554541	WITHOUT_CLASSIFICATION	2.0064454592507697E-7	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999931518921124	WITHOUT_CLASSIFICATION	6.8481078876491254E-6	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999999671982666	WITHOUT_CLASSIFICATION	3.280173339521082E-7	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999991982331	WITHOUT_CLASSIFICATION	8.017668330068734E-10	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999971300902573	WITHOUT_CLASSIFICATION	2.8699097427121347E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999972486100909	WITHOUT_CLASSIFICATION	2.7513899090935575E-5	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999915001094766	WITHOUT_CLASSIFICATION	8.499890523389983E-6	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999998389545972	WITHOUT_CLASSIFICATION	1.610454028238511E-7	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999999681232983	WITHOUT_CLASSIFICATION	3.18767017213555E-8	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995857641867514	WITHOUT_CLASSIFICATION	4.142358132486062E-4	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995857641867514	WITHOUT_CLASSIFICATION	4.142358132486062E-4	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999490553157088	WITHOUT_CLASSIFICATION	5.094468429111393E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9995656749508376	WITHOUT_CLASSIFICATION	4.3432504916242657E-4	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999997800563472	WITHOUT_CLASSIFICATION	2.1994365283191953E-7	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999997800563472	WITHOUT_CLASSIFICATION	2.1994365283191953E-7	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999997668957329	WITHOUT_CLASSIFICATION	2.3310426724984042E-7	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999992455038474	WITHOUT_CLASSIFICATION	7.544961526008714E-7	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9968908997368277	WITHOUT_CLASSIFICATION	0.0031091002631722397	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999653214607	WITHOUT_CLASSIFICATION	3.467853927449299E-8	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999958493234967	WITHOUT_CLASSIFICATION	4.150676503317634E-6	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999747009675465	WITHOUT_CLASSIFICATION	2.5299032453629905E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999968166952	WITHOUT_CLASSIFICATION	3.1833048423313085E-9	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999968166952	WITHOUT_CLASSIFICATION	3.1833048423313085E-9	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999689079082833	WITHOUT_CLASSIFICATION	3.109209171673523E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999991909530245	WITHOUT_CLASSIFICATION	8.090469754184866E-7	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999999707468946	WITHOUT_CLASSIFICATION	2.9253105398924173E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.999997883682637	WITHOUT_CLASSIFICATION	2.1163173630802186E-6	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.999997883682637	WITHOUT_CLASSIFICATION	2.1163173630802186E-6	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999999227712949	WITHOUT_CLASSIFICATION	7.722870505375484E-8	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999667685435177	WITHOUT_CLASSIFICATION	3.32314564821954E-5	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999769987293	WITHOUT_CLASSIFICATION	2.3001270673423382E-8	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999995066759465	WITHOUT_CLASSIFICATION	4.933240535270763E-7	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998542251031	WITHOUT_CLASSIFICATION	1.4577489702889824E-7	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999994994634844	WITHOUT_CLASSIFICATION	5.0053651558298E-7	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999978937807323	WITHOUT_CLASSIFICATION	2.1062192677056093E-6	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.999987529149773	WITHOUT_CLASSIFICATION	1.2470850227125884E-5	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999998274407571	WITHOUT_CLASSIFICATION	1.7255924288131585E-7	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999979086721786	WITHOUT_CLASSIFICATION	2.0913278213658443E-6	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999997944884	WITHOUT_CLASSIFICATION	2.055117166083444E-10	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9991740537207027	WITHOUT_CLASSIFICATION	8.259462792973245E-4	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.9993201705919681	WITHOUT_CLASSIFICATION	6.798294080320153E-4	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999350463384908	WITHOUT_CLASSIFICATION	6.495366150921523E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999665104019185	WITHOUT_CLASSIFICATION	3.34895980814985E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999998393852649	WITHOUT_CLASSIFICATION	1.6061473504966904E-7	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998014578014947	WITHOUT_CLASSIFICATION	1.9854219850544525E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999990580596121	WITHOUT_CLASSIFICATION	9.419403880254844E-7	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999496357254318	WITHOUT_CLASSIFICATION	5.0364274568265125E-5	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999924686268703	WITHOUT_CLASSIFICATION	7.531373129583854E-6	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999884147890356	WITHOUT_CLASSIFICATION	1.1585210964443663E-5	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.999932346088864	WITHOUT_CLASSIFICATION	6.765391113585024E-5	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9983069824101848	WITHOUT_CLASSIFICATION	0.00169301758981517	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999994059990719	WITHOUT_CLASSIFICATION	5.94000928074929E-7	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999986582344732	WITHOUT_CLASSIFICATION	1.3417655268269664E-6	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.999999995307048	WITHOUT_CLASSIFICATION	4.692952045728277E-9	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999997494636905	WITHOUT_CLASSIFICATION	2.5053630947176757E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999141275232305	WITHOUT_CLASSIFICATION	8.587247676949765E-5	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999987692491232	WITHOUT_CLASSIFICATION	1.2307508767029438E-6	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997731855989	WITHOUT_CLASSIFICATION	2.268144012052766E-7	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999859679982033	WITHOUT_CLASSIFICATION	1.4032001796675232E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999426918874	WITHOUT_CLASSIFICATION	5.7308112726110314E-8	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999996536812559	WITHOUT_CLASSIFICATION	3.463187441192328E-7	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999984806732898	WITHOUT_CLASSIFICATION	1.5193267102929244E-6	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999972722066828	WITHOUT_CLASSIFICATION	2.7277933171749984E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999979087017615	WITHOUT_CLASSIFICATION	2.091298238477003E-6	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.999988488615423	WITHOUT_CLASSIFICATION	1.1511384576939925E-5	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999904537238	WITHOUT_CLASSIFICATION	9.54627612285728E-9	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999987716958616	WITHOUT_CLASSIFICATION	1.2283041383283368E-6	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999999975960746	WITHOUT_CLASSIFICATION	2.4039253999491932E-8	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999755943431	WITHOUT_CLASSIFICATION	2.440565696126511E-8	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999994357355907	WITHOUT_CLASSIFICATION	5.642644092456702E-7	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.999999504858048	WITHOUT_CLASSIFICATION	4.951419518792374E-7	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999934309127411	WITHOUT_CLASSIFICATION	6.569087258978927E-6	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999969980963448	WITHOUT_CLASSIFICATION	3.0019036552838393E-6	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999996464045742	WITHOUT_CLASSIFICATION	3.53595425832339E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999983762556451	WITHOUT_CLASSIFICATION	1.6237443548768724E-6	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999853587686139	WITHOUT_CLASSIFICATION	1.4641231386035287E-5	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999972807414296	WITHOUT_CLASSIFICATION	2.7192585703272954E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999999354230053	WITHOUT_CLASSIFICATION	6.457699468323859E-7	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999161150457143	WITHOUT_CLASSIFICATION	8.388495428575336E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9706339533105127	WITHOUT_CLASSIFICATION	0.029366046689487228	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9989218953250989	WITHOUT_CLASSIFICATION	0.0010781046749011325	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9993011474002911	WITHOUT_CLASSIFICATION	6.988525997089219E-4	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999990680524413	WITHOUT_CLASSIFICATION	9.319475586564681E-7	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998567650355872	WITHOUT_CLASSIFICATION	1.4323496441291116E-4	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999992944778344	WITHOUT_CLASSIFICATION	7.055221655479952E-7	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999992217711452	WITHOUT_CLASSIFICATION	7.782288548202033E-7	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999979962268408	WITHOUT_CLASSIFICATION	2.0037731592025033E-5	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999825542963868	WITHOUT_CLASSIFICATION	1.74457036131627E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999839469539148	WITHOUT_CLASSIFICATION	1.605304608521335E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999839469539148	WITHOUT_CLASSIFICATION	1.605304608521335E-5	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999536535	WITHOUT_CLASSIFICATION	4.6346527085669667E-11	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999964352495726	WITHOUT_CLASSIFICATION	3.564750427245035E-6	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999973286147	WITHOUT_CLASSIFICATION	2.6713853659175147E-9	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999650992197	WITHOUT_CLASSIFICATION	3.490078027040806E-8	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999993706812582	WITHOUT_CLASSIFICATION	6.293187417994125E-7	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999997149084154	WITHOUT_CLASSIFICATION	2.8509158460076214E-6	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999998997550351	WITHOUT_CLASSIFICATION	1.0024496492695909E-7	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9998096672942542	WITHOUT_CLASSIFICATION	1.9033270574581523E-4	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999991040829812	WITHOUT_CLASSIFICATION	8.959170186984277E-7	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999177619046	WITHOUT_CLASSIFICATION	8.223809541313737E-8	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999998136254895	WITHOUT_CLASSIFICATION	1.8637451036279797E-7	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999967702829473	WITHOUT_CLASSIFICATION	3.229717052761078E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997459907508	WITHOUT_CLASSIFICATION	2.5400924919973107E-7	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999325208312163	WITHOUT_CLASSIFICATION	6.747916878370843E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999959160445993	WITHOUT_CLASSIFICATION	4.083955400796083E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999959160445993	WITHOUT_CLASSIFICATION	4.083955400796083E-6	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999993789078	WITHOUT_CLASSIFICATION	6.210922470422392E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999874912816635	WITHOUT_CLASSIFICATION	1.2508718336378613E-5	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999680517863	WITHOUT_CLASSIFICATION	3.194821371584152E-8	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.999999996810476	WITHOUT_CLASSIFICATION	3.189523948245952E-9	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999898802016446	WITHOUT_CLASSIFICATION	1.0119798355340376E-5	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979028072005	WITHOUT_CLASSIFICATION	2.0971927994940115E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999914155074601	WITHOUT_CLASSIFICATION	8.584492539992154E-6	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999626392011376	WITHOUT_CLASSIFICATION	3.7360798862364024E-5	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9857946675536607	WITHOUT_CLASSIFICATION	0.0142053324463393	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999996140629623	WITHOUT_CLASSIFICATION	3.8593703774372936E-7	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999981925985422	WITHOUT_CLASSIFICATION	1.8074014577104816E-6	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999956765648	WITHOUT_CLASSIFICATION	4.323435141474935E-9	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999993624258319	WITHOUT_CLASSIFICATION	6.37574168007415E-7	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999983717124	WITHOUT_CLASSIFICATION	1.6282875688825999E-9	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999988276929533	WITHOUT_CLASSIFICATION	1.172307046597062E-6	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999738327167	WITHOUT_CLASSIFICATION	2.6167283369960135E-8	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999999677622097	WITHOUT_CLASSIFICATION	3.223779027697575E-8	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.999995721041796	WITHOUT_CLASSIFICATION	4.278958203921888E-6	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999995548176184	WITHOUT_CLASSIFICATION	4.4518238155776503E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999484036761	WITHOUT_CLASSIFICATION	5.159632385871174E-8	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999986415062	WITHOUT_CLASSIFICATION	1.3584937603589157E-9	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999998966016	WITHOUT_CLASSIFICATION	1.0339842283868469E-10	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999995349234808	WITHOUT_CLASSIFICATION	4.650765191746919E-7	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999631178255	WITHOUT_CLASSIFICATION	3.688217459508117E-8	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999995605756401	WITHOUT_CLASSIFICATION	4.394243598948137E-7	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.9999991146298989	WITHOUT_CLASSIFICATION	8.853701011738971E-7	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999912058050683	WITHOUT_CLASSIFICATION	8.794194931634947E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998682199607781	WITHOUT_CLASSIFICATION	1.3178003922187102E-4	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999968670197449	WITHOUT_CLASSIFICATION	3.1329802551579864E-6	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9984658917054927	WITHOUT_CLASSIFICATION	0.001534108294507363	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999970188925613	WITHOUT_CLASSIFICATION	2.9811074386801114E-6	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999997411521702	WITHOUT_CLASSIFICATION	2.588478297707361E-7	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999930719173308	WITHOUT_CLASSIFICATION	6.928082669201495E-6	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999990409200762	WITHOUT_CLASSIFICATION	9.590799238285496E-7	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999809976296806	WITHOUT_CLASSIFICATION	1.9002370319389332E-5	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999740321106766	WITHOUT_CLASSIFICATION	2.5967889323435268E-5	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999217975287428	WITHOUT_CLASSIFICATION	7.820247125724309E-5	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999995403700684	WITHOUT_CLASSIFICATION	4.5962993161530555E-7	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999961169168865	WITHOUT_CLASSIFICATION	3.883083113480914E-6	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999996877337224	WITHOUT_CLASSIFICATION	3.122662776022042E-7	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9997150741915855	WITHOUT_CLASSIFICATION	2.84925808414553E-4	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999998018864745	WITHOUT_CLASSIFICATION	1.9811352550565315E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999256439013867	WITHOUT_CLASSIFICATION	7.435609861330057E-5	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999256439013867	WITHOUT_CLASSIFICATION	7.435609861330057E-5	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999977022721124	WITHOUT_CLASSIFICATION	2.297727887542446E-6	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998050953042	WITHOUT_CLASSIFICATION	1.9490469590711706E-7	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999745295961056	WITHOUT_CLASSIFICATION	2.5470403894408612E-5	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999993625775218	WITHOUT_CLASSIFICATION	6.3742247819699805E-6	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999997622211281	WITHOUT_CLASSIFICATION	2.3777887186381427E-7	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999849747373	WITHOUT_CLASSIFICATION	1.50252627116177E-8	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9995343735712715	WITHOUT_CLASSIFICATION	4.6562642872844187E-4	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999996717869561	WITHOUT_CLASSIFICATION	3.282130438164776E-7	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999502145155	WITHOUT_CLASSIFICATION	4.978548462358907E-8	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986796591098	WITHOUT_CLASSIFICATION	1.3203408901043934E-6	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953068977123	WITHOUT_CLASSIFICATION	4.693102287712601E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999998108552517	WITHOUT_CLASSIFICATION	1.8914474828921903E-7	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999961147402702	WITHOUT_CLASSIFICATION	3.8852597299091575E-6	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999988960239046	WITHOUT_CLASSIFICATION	1.1039760953728596E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999973749764057	WITHOUT_CLASSIFICATION	2.625023594339172E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9992021887020146	WITHOUT_CLASSIFICATION	7.978112979853615E-4	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999692512767	WITHOUT_CLASSIFICATION	3.0748723349274E-8	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999967938498	WITHOUT_CLASSIFICATION	3.2061502175609607E-9	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999929056734	WITHOUT_CLASSIFICATION	7.094326596021299E-9	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9990669565838548	WITHOUT_CLASSIFICATION	9.330434161452547E-4	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999920624027621	WITHOUT_CLASSIFICATION	7.937597237972824E-6	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999686037307	WITHOUT_CLASSIFICATION	3.139626913974065E-8	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999527374292406	WITHOUT_CLASSIFICATION	4.726257075941219E-5	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999691077113251	WITHOUT_CLASSIFICATION	3.089228867491542E-5	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999978869865259	WITHOUT_CLASSIFICATION	2.1130134739678774E-6	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9903610676014576	WITHOUT_CLASSIFICATION	0.009638932398542414	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999979965588025	WITHOUT_CLASSIFICATION	2.0034411975020296E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999057842381	WITHOUT_CLASSIFICATION	9.421576190871739E-8	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999999427819023	WITHOUT_CLASSIFICATION	5.721809770117486E-7	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9997463060533662	WITHOUT_CLASSIFICATION	2.536939466338188E-4	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9994007046458824	WITHOUT_CLASSIFICATION	5.992953541176508E-4	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999995682042928	WITHOUT_CLASSIFICATION	4.317957072021838E-6	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.99802452306168	WITHOUT_CLASSIFICATION	0.001975476938319948	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999996131283598	WITHOUT_CLASSIFICATION	3.868716400941907E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998604760324	WITHOUT_CLASSIFICATION	1.3952396760069084E-7	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999984850743	WITHOUT_CLASSIFICATION	1.5149256582136114E-9	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999861952512404	WITHOUT_CLASSIFICATION	1.3804748759717467E-5	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999987735385486	WITHOUT_CLASSIFICATION	1.2264614512947777E-6	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.999936492495831	WITHOUT_CLASSIFICATION	6.350750416890221E-5	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999709587212	WITHOUT_CLASSIFICATION	2.9041278743951987E-8	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999907998045103	WITHOUT_CLASSIFICATION	9.200195489679752E-6	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999989818691385	WITHOUT_CLASSIFICATION	1.0181308615489592E-6	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999898451723913	WITHOUT_CLASSIFICATION	1.0154827608697519E-4	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999997744752864	WITHOUT_CLASSIFICATION	2.2552471358916742E-7	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999961422742	WITHOUT_CLASSIFICATION	3.8577258771130416E-9	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999780440608	WITHOUT_CLASSIFICATION	2.1955939206178608E-8	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999996825574201	WITHOUT_CLASSIFICATION	3.1744257985566114E-7	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999924715749391	WITHOUT_CLASSIFICATION	7.528425060901433E-6	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999955745776516	WITHOUT_CLASSIFICATION	4.425422348426906E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997459907508	WITHOUT_CLASSIFICATION	2.5400924919973107E-7	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999971849424	WITHOUT_CLASSIFICATION	2.8150577272549796E-9	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999978489359066	WITHOUT_CLASSIFICATION	2.1510640932890785E-6	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999753289613185	WITHOUT_CLASSIFICATION	2.4671038681634794E-5	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.999985641812525	WITHOUT_CLASSIFICATION	1.4358187474909254E-5	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999997908212758	WITHOUT_CLASSIFICATION	2.0917872416169904E-7	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999061771299242	WITHOUT_CLASSIFICATION	9.382287007572735E-5	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9960065644885289	WITHOUT_CLASSIFICATION	0.003993435511471112	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999606361696514	WITHOUT_CLASSIFICATION	3.9363830348662084E-5	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999920858564	WITHOUT_CLASSIFICATION	7.914143515249533E-9	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9987657317203741	WITHOUT_CLASSIFICATION	0.0012342682796259296	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999981239560788	WITHOUT_CLASSIFICATION	1.8760439212226054E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998908765552253	WITHOUT_CLASSIFICATION	1.0912344477456465E-4	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999996072037366	WITHOUT_CLASSIFICATION	3.9279626336783424E-7	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999350195398	WITHOUT_CLASSIFICATION	6.498046020661655E-8	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999990175181632	WITHOUT_CLASSIFICATION	9.824818368027766E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714960464009	WITHOUT_CLASSIFICATION	2.8503953599114574E-5	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9988209652904924	WITHOUT_CLASSIFICATION	0.0011790347095076946	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999000810479	WITHOUT_CLASSIFICATION	9.991895212732836E-8	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9997482559856714	WITHOUT_CLASSIFICATION	2.5174401432863564E-4	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999970113376169	WITHOUT_CLASSIFICATION	2.9886623831341403E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714960464009	WITHOUT_CLASSIFICATION	2.8503953599114574E-5	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999965075647461	WITHOUT_CLASSIFICATION	3.4924352538514596E-6	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999998856786783	WITHOUT_CLASSIFICATION	1.1432132179407026E-7	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999953048160779	WITHOUT_CLASSIFICATION	4.695183922189548E-6	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998925284094	WITHOUT_CLASSIFICATION	1.0747159066967752E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999999599466418	WITHOUT_CLASSIFICATION	4.0053358117930805E-8	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999996345323	WITHOUT_CLASSIFICATION	3.654676820128863E-10	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999806300698	WITHOUT_CLASSIFICATION	1.9369930316044803E-8	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999940674912551	WITHOUT_CLASSIFICATION	5.932508744909224E-5	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999971891176	WITHOUT_CLASSIFICATION	2.8108824111241708E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999911291189162	WITHOUT_CLASSIFICATION	8.870881083879428E-6	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998576886236625	WITHOUT_CLASSIFICATION	1.4231137633753625E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999976162754036	WITHOUT_CLASSIFICATION	2.3837245963320335E-6	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999860129204109	WITHOUT_CLASSIFICATION	1.3987079589138352E-5	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9144065663512354	WITHOUT_CLASSIFICATION	0.0855934336487646	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9982753741101406	WITHOUT_CLASSIFICATION	0.001724625889859445	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999999948517047	WITHOUT_CLASSIFICATION	5.1482952931875736E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999659201183	WITHOUT_CLASSIFICATION	3.4079881737229145E-8	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999982370865163	WITHOUT_CLASSIFICATION	1.7629134837321621E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999999915933481	WITHOUT_CLASSIFICATION	8.406651898793317E-8	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9316079909804308	WITHOUT_CLASSIFICATION	0.06839200901956924	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9998972407661506	WITHOUT_CLASSIFICATION	1.0275923384942983E-4	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.997920598134509	WITHOUT_CLASSIFICATION	0.002079401865491018	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999789463183443	WITHOUT_CLASSIFICATION	2.10536816556462E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999996147940452	WITHOUT_CLASSIFICATION	3.852059548242062E-7	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999981914115	WITHOUT_CLASSIFICATION	1.808588465825793E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999980251282	WITHOUT_CLASSIFICATION	1.974871869237413E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999941967106	WITHOUT_CLASSIFICATION	5.803289409631833E-9	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999985779945894	WITHOUT_CLASSIFICATION	1.4220054106783807E-6	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999988144592108	WITHOUT_CLASSIFICATION	1.1855407892643657E-6	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.8911424544801527	WITHOUT_CLASSIFICATION	0.10885754551984722	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9914175305895394	IMPLEMENTATION	0.008582469410460494	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999995113518833	WITHOUT_CLASSIFICATION	4.886481167535024E-7	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998230963498994	WITHOUT_CLASSIFICATION	1.7690365010062937E-4	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999923562751036	WITHOUT_CLASSIFICATION	7.643724896433227E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999995920280478	WITHOUT_CLASSIFICATION	4.079719521993334E-6	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999309642157409	WITHOUT_CLASSIFICATION	6.903578425908398E-5	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999990432462	WITHOUT_CLASSIFICATION	9.567537815572011E-10	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999990216198	WITHOUT_CLASSIFICATION	9.783800987796945E-10	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999998639377522	WITHOUT_CLASSIFICATION	1.3606224774521597E-7	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999957647334	WITHOUT_CLASSIFICATION	4.235266614242615E-9	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999989919203394	WITHOUT_CLASSIFICATION	1.0080796605651762E-6	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9988517576477145	WITHOUT_CLASSIFICATION	0.0011482423522855135	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9988517576477145	WITHOUT_CLASSIFICATION	0.0011482423522855135	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999979661484263	WITHOUT_CLASSIFICATION	2.033851573674229E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999984605863921	WITHOUT_CLASSIFICATION	1.5394136079340808E-6	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999017200633	WITHOUT_CLASSIFICATION	9.827993678490598E-8	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999958388832	WITHOUT_CLASSIFICATION	4.161116743072811E-9	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999626740945794	WITHOUT_CLASSIFICATION	3.732590542066006E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999626740945794	WITHOUT_CLASSIFICATION	3.732590542066006E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998496645248827	WITHOUT_CLASSIFICATION	1.5033547511738118E-4	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999994176770252	WITHOUT_CLASSIFICATION	5.823229748927662E-7	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999983410313	WITHOUT_CLASSIFICATION	1.658968700492942E-9	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999950137707	WITHOUT_CLASSIFICATION	4.9862292324699734E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999985918181079	WITHOUT_CLASSIFICATION	1.4081818921056365E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999986560776033	WITHOUT_CLASSIFICATION	1.3439223967818028E-6	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999986438637994	WITHOUT_CLASSIFICATION	1.3561362005456822E-6	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999994694281838	WITHOUT_CLASSIFICATION	5.305718162035666E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999988080542638	WITHOUT_CLASSIFICATION	1.191945736215525E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999900762652997	WITHOUT_CLASSIFICATION	9.923734700362099E-6	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999614771192	WITHOUT_CLASSIFICATION	3.8522880810723115E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978599902876	WITHOUT_CLASSIFICATION	2.1400097124138255E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978599902876	WITHOUT_CLASSIFICATION	2.1400097124138255E-6	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999586648	WITHOUT_CLASSIFICATION	4.133507931843004E-11	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999474957422867	WITHOUT_CLASSIFICATION	5.250425771318943E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999994487856887	WITHOUT_CLASSIFICATION	5.512143112747276E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999997709594995	WITHOUT_CLASSIFICATION	2.2904050044150084E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999976944438239	WITHOUT_CLASSIFICATION	2.305556176105297E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999315404499	WITHOUT_CLASSIFICATION	6.84595501431471E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982864075482513	WITHOUT_CLASSIFICATION	0.0017135924517487611	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999958295766213	WITHOUT_CLASSIFICATION	4.170423378711718E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999996977840314	WITHOUT_CLASSIFICATION	3.022159685175346E-7	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999999196477107	WITHOUT_CLASSIFICATION	8.035228922913179E-8	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999103294426	WITHOUT_CLASSIFICATION	8.967055740807646E-7	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999911291189162	WITHOUT_CLASSIFICATION	8.870881083879428E-6	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999996767845426	WITHOUT_CLASSIFICATION	3.2321545743232216E-7	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999938673208281	WITHOUT_CLASSIFICATION	6.132679171902556E-6	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999877903185442	WITHOUT_CLASSIFICATION	1.2209681455772654E-5	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.999993569068026	WITHOUT_CLASSIFICATION	6.430931974161355E-6	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999971416605867	WITHOUT_CLASSIFICATION	2.8583394131639076E-6	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999952303399234	WITHOUT_CLASSIFICATION	4.769660076616046E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999664402788	WITHOUT_CLASSIFICATION	3.355972111374952E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999930070213511	WITHOUT_CLASSIFICATION	6.9929786488021074E-6	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999994239084712	WITHOUT_CLASSIFICATION	5.760915287774026E-7	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997545280927571	WITHOUT_CLASSIFICATION	2.454719072428882E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997545280927571	WITHOUT_CLASSIFICATION	2.454719072428882E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999998807379062	WITHOUT_CLASSIFICATION	1.1926209372929253E-7	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9997533499655656	WITHOUT_CLASSIFICATION	2.466500344343326E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999910923377104	WITHOUT_CLASSIFICATION	8.90766228961268E-6	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999445409326791	WITHOUT_CLASSIFICATION	5.5459067320966956E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999769463538001	WITHOUT_CLASSIFICATION	2.3053646199904653E-5	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999980637758087	WITHOUT_CLASSIFICATION	1.936224191375867E-6	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999981788875849	WITHOUT_CLASSIFICATION	1.8211124150882505E-6	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999844725084	WITHOUT_CLASSIFICATION	1.552749160140833E-8	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999992861668814	WITHOUT_CLASSIFICATION	7.138331185581582E-7	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999447408629994	WITHOUT_CLASSIFICATION	5.525913700059713E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999733237287076	WITHOUT_CLASSIFICATION	2.6676271292421162E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.979137168983432	WITHOUT_CLASSIFICATION	0.020862831016567978	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999830283353411	WITHOUT_CLASSIFICATION	1.697166465890612E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999855480781	WITHOUT_CLASSIFICATION	1.445192186809237E-8	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999916572799	WITHOUT_CLASSIFICATION	8.342720145203572E-9	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999969630328526	WITHOUT_CLASSIFICATION	3.036967147423034E-6	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999995945948262	WITHOUT_CLASSIFICATION	4.054051737027543E-7	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999969295159603	WITHOUT_CLASSIFICATION	3.070484039697119E-6	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997987779773012	WITHOUT_CLASSIFICATION	2.0122202269873737E-4	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999998303203	WITHOUT_CLASSIFICATION	1.6967957866303241E-10	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999999999712651	WITHOUT_CLASSIFICATION	2.873490172211676E-10	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999999045356	WITHOUT_CLASSIFICATION	9.54643517313709E-11	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999769987293	WITHOUT_CLASSIFICATION	2.3001270673423382E-8	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999990242	WITHOUT_CLASSIFICATION	9.757633225846403E-13	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999934249004264	WITHOUT_CLASSIFICATION	6.575099573545705E-6	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999934249004264	WITHOUT_CLASSIFICATION	6.575099573545705E-6	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998943217111324	WITHOUT_CLASSIFICATION	1.0567828886772125E-4	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9993758562666777	WITHOUT_CLASSIFICATION	6.24143733322374E-4	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999833520871554	WITHOUT_CLASSIFICATION	1.664791284457183E-5	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999981154711232	WITHOUT_CLASSIFICATION	1.884528876824536E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999989752828994	WITHOUT_CLASSIFICATION	1.0247171006630823E-6	IMPLEMENTATION
