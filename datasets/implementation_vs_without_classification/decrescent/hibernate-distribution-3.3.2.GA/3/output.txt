// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9973935243500298	WITHOUT_CLASSIFICATION	0.0026064756499702213	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9973935243500298	WITHOUT_CLASSIFICATION	0.0026064756499702213	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9999092575667261	WITHOUT_CLASSIFICATION	9.074243327384912E-5	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9678055053447783	WITHOUT_CLASSIFICATION	0.0321944946552218	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9936699150475694	WITHOUT_CLASSIFICATION	0.006330084952430617	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.5295894039942767	WITHOUT_CLASSIFICATION	0.4704105960057234	IMPLEMENTATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9548964545945875	WITHOUT_CLASSIFICATION	0.04510354540541251	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9214035411562507	WITHOUT_CLASSIFICATION	0.07859645884374943	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9995326584861306	WITHOUT_CLASSIFICATION	4.673415138694829E-4	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9466475044406558	WITHOUT_CLASSIFICATION	0.053352495559344106	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9990645382843267	WITHOUT_CLASSIFICATION	9.354617156731462E-4	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.8855624009528388	WITHOUT_CLASSIFICATION	0.11443759904716111	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9882278339915176	WITHOUT_CLASSIFICATION	0.011772166008482375	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9882278339915176	WITHOUT_CLASSIFICATION	0.011772166008482375	IMPLEMENTATION
/**	IMPLEMENTATION	0.731034975985742	IMPLEMENTATION	0.2689650240142581	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.8671216296384995	IMPLEMENTATION	0.1328783703615004	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9693045187172137	IMPLEMENTATION	0.030695481282786374	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.997706418969579	WITHOUT_CLASSIFICATION	0.002293581030421016	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999997031864999	WITHOUT_CLASSIFICATION	2.968135001532655E-7	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9982113552660709	WITHOUT_CLASSIFICATION	0.0017886447339291404	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.97413894748627	WITHOUT_CLASSIFICATION	0.025861052513730044	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999880385334042	WITHOUT_CLASSIFICATION	1.196146659585981E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9994480731066029	WITHOUT_CLASSIFICATION	5.519268933971924E-4	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9633519042007226	IMPLEMENTATION	0.03664809579927739	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9633519042007226	IMPLEMENTATION	0.03664809579927739	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9980612404521805	IMPLEMENTATION	0.0019387595478195952	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9989711430733679	WITHOUT_CLASSIFICATION	0.0010288569266321964	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9612698258090394	IMPLEMENTATION	0.03873017419096065	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.8898340185733337	WITHOUT_CLASSIFICATION	0.11016598142666632	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.746700722533727	WITHOUT_CLASSIFICATION	0.25329927746627307	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9970611866222273	WITHOUT_CLASSIFICATION	0.0029388133777725894	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9050840357240119	WITHOUT_CLASSIFICATION	0.09491596427598807	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9999840022023947	WITHOUT_CLASSIFICATION	1.5997797605310547E-5	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.8836449539756324	WITHOUT_CLASSIFICATION	0.11635504602436772	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.5926873516804776	WITHOUT_CLASSIFICATION	0.40731264831952246	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9747189022144865	WITHOUT_CLASSIFICATION	0.025281097785513486	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.8585261180773337	IMPLEMENTATION	0.14147388192266627	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9864861641032939	WITHOUT_CLASSIFICATION	0.013513835896705987	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.999550243357196	WITHOUT_CLASSIFICATION	4.497566428039571E-4	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9913959168341805	IMPLEMENTATION	0.00860408316581948	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9913959168341805	IMPLEMENTATION	0.00860408316581948	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.9542816904418352	IMPLEMENTATION	0.04571830955816483	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9998995956930123	WITHOUT_CLASSIFICATION	1.0040430698770615E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9949803472391605	WITHOUT_CLASSIFICATION	0.005019652760839563	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9969766820615998	IMPLEMENTATION	0.003023317938400221	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9859275877512336	WITHOUT_CLASSIFICATION	0.014072412248766436	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9991581638821068	WITHOUT_CLASSIFICATION	8.418361178931467E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9734014113161175	WITHOUT_CLASSIFICATION	0.026598588683882495	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.999996240776448	WITHOUT_CLASSIFICATION	3.7592235520237464E-6	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.7186299325809722	WITHOUT_CLASSIFICATION	0.28137006741902787	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9992486460075547	WITHOUT_CLASSIFICATION	7.513539924453408E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.8096943800106409	IMPLEMENTATION	0.1903056199893592	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.7811832130550364	IMPLEMENTATION	0.2188167869449635	WITHOUT_CLASSIFICATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.8708702415678393	WITHOUT_CLASSIFICATION	0.12912975843216068	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.5913892105450209	IMPLEMENTATION	0.40861078945497914	WITHOUT_CLASSIFICATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9876751772844983	IMPLEMENTATION	0.012324822715501655	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.5913892105450209	IMPLEMENTATION	0.40861078945497914	WITHOUT_CLASSIFICATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.999981910704839	IMPLEMENTATION	1.808929516096497E-5	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9034490744794795	IMPLEMENTATION	0.09655092552052046	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.5913892105450209	IMPLEMENTATION	0.40861078945497914	WITHOUT_CLASSIFICATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999996990359564	WITHOUT_CLASSIFICATION	3.009640434936897E-7	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999998483818189	WITHOUT_CLASSIFICATION	1.5161818110564965E-7	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.981816174281241	IMPLEMENTATION	0.01818382571875909	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999962962133244	WITHOUT_CLASSIFICATION	3.7037866755273683E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999966481648869	WITHOUT_CLASSIFICATION	3.3518351130924345E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999994812078129	WITHOUT_CLASSIFICATION	5.187921871027773E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999994812078129	WITHOUT_CLASSIFICATION	5.187921871027773E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999989761340125	WITHOUT_CLASSIFICATION	1.0238659875366388E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998953956376	WITHOUT_CLASSIFICATION	1.0460436235114126E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999996670849176	WITHOUT_CLASSIFICATION	3.329150823165236E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996118858024	WITHOUT_CLASSIFICATION	3.8811419757544234E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996118858024	WITHOUT_CLASSIFICATION	3.8811419757544234E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999859627513	WITHOUT_CLASSIFICATION	1.4037248729573538E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999948065704	WITHOUT_CLASSIFICATION	5.1934295927569493E-8	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999993612472242	WITHOUT_CLASSIFICATION	6.387527757786315E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999972563857965	WITHOUT_CLASSIFICATION	2.743614203535487E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999796472686	WITHOUT_CLASSIFICATION	2.0352731404463567E-8	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999796472686	WITHOUT_CLASSIFICATION	2.0352731404463567E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997774166125	WITHOUT_CLASSIFICATION	2.2258338763812228E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9992315593754871	WITHOUT_CLASSIFICATION	7.684406245127861E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999988760151048	WITHOUT_CLASSIFICATION	1.1239848950480315E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999918283736	WITHOUT_CLASSIFICATION	8.171626445752993E-9	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999931144374	WITHOUT_CLASSIFICATION	6.885562561359436E-9	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999998507675208	WITHOUT_CLASSIFICATION	1.4923247918947903E-7	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999948001417814	WITHOUT_CLASSIFICATION	5.199858218555241E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999963658845797	WITHOUT_CLASSIFICATION	3.634115420271355E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999201908153084	WITHOUT_CLASSIFICATION	7.9809184691616E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9980933719368019	WITHOUT_CLASSIFICATION	0.0019066280631982015	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999974076024145	WITHOUT_CLASSIFICATION	2.5923975855072377E-5	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999882653109354	WITHOUT_CLASSIFICATION	1.1734689064586338E-5	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999642097	WITHOUT_CLASSIFICATION	3.5790234806232987E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999982808542002	WITHOUT_CLASSIFICATION	1.719145799794146E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999982808542002	WITHOUT_CLASSIFICATION	1.719145799794146E-5	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999984215833483	WITHOUT_CLASSIFICATION	1.5784166516719819E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999979528815176	WITHOUT_CLASSIFICATION	2.047118482269525E-6	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999953823774	WITHOUT_CLASSIFICATION	4.617622592259827E-8	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999433097841557	WITHOUT_CLASSIFICATION	5.669021584418671E-5	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.999167843945668	WITHOUT_CLASSIFICATION	8.321560543320024E-4	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.731034975985742	IMPLEMENTATION	0.2689650240142581	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.731034975985742	IMPLEMENTATION	0.2689650240142581	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999992396750269	WITHOUT_CLASSIFICATION	7.603249730955001E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999535196752	WITHOUT_CLASSIFICATION	4.648032480442797E-8	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999680750673	WITHOUT_CLASSIFICATION	3.192493270543876E-8	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664327352383	WITHOUT_CLASSIFICATION	3.356726476163984E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999994309952991	WITHOUT_CLASSIFICATION	5.690047009217793E-7	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827641438342	WITHOUT_CLASSIFICATION	1.723585616571331E-5	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881109177075	WITHOUT_CLASSIFICATION	1.1889082292523384E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999975462573	WITHOUT_CLASSIFICATION	2.4537427053625696E-8	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999661350143109	WITHOUT_CLASSIFICATION	3.3864985689138946E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.999999590856284	WITHOUT_CLASSIFICATION	4.0914371597359396E-7	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999865465568525	WITHOUT_CLASSIFICATION	1.3453443147487411E-5	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999661350143109	WITHOUT_CLASSIFICATION	3.3864985689138946E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9999865465568525	WITHOUT_CLASSIFICATION	1.3453443147487411E-5	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999905430599	WITHOUT_CLASSIFICATION	9.456940145571816E-9	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9947872415429938	WITHOUT_CLASSIFICATION	0.005212758457006228	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999011000832785	WITHOUT_CLASSIFICATION	9.889991672156308E-5	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999486343490532	WITHOUT_CLASSIFICATION	5.136565094671448E-5	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999855431334	WITHOUT_CLASSIFICATION	1.4456866661795567E-8	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999992983724	WITHOUT_CLASSIFICATION	7.016276980689531E-10	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9778881432808174	WITHOUT_CLASSIFICATION	0.022111856719182626	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998807475958957	WITHOUT_CLASSIFICATION	1.1925240410420583E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9895802427150714	WITHOUT_CLASSIFICATION	0.010419757284928506	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999291858078779	WITHOUT_CLASSIFICATION	7.081419212199227E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999839137570371	WITHOUT_CLASSIFICATION	1.6086242962977833E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999974354198038	WITHOUT_CLASSIFICATION	2.5645801962421033E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998279240485	WITHOUT_CLASSIFICATION	1.7207595150553144E-7	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9977731255941659	WITHOUT_CLASSIFICATION	0.0022268744058340775	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999988163690711	WITHOUT_CLASSIFICATION	1.1836309288642855E-6	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999998837213	WITHOUT_CLASSIFICATION	1.1627868670076993E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999510012102	WITHOUT_CLASSIFICATION	4.8998789864846576E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999968868677064	WITHOUT_CLASSIFICATION	3.11313229357704E-6	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999384274718943	WITHOUT_CLASSIFICATION	6.157252810568803E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997962825173	WITHOUT_CLASSIFICATION	2.0371748272053977E-7	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999988768500646	WITHOUT_CLASSIFICATION	1.1231499354622548E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999999337393	WITHOUT_CLASSIFICATION	6.626070146625735E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999993900105449	WITHOUT_CLASSIFICATION	6.099894549896954E-7	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985405045756	WITHOUT_CLASSIFICATION	1.4594954245151882E-6	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9990013505023149	WITHOUT_CLASSIFICATION	9.986494976850847E-4	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999993232251396	WITHOUT_CLASSIFICATION	6.767748604367793E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999990410791	WITHOUT_CLASSIFICATION	9.589209514783586E-10	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9945537117312977	WITHOUT_CLASSIFICATION	0.005446288268702301	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999866012712	WITHOUT_CLASSIFICATION	1.3398728841730004E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999962456427	WITHOUT_CLASSIFICATION	3.754357310754234E-9	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999169853508	WITHOUT_CLASSIFICATION	8.301464921045811E-8	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999966255639001	WITHOUT_CLASSIFICATION	3.374436099940666E-6	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999989985158	WITHOUT_CLASSIFICATION	1.0014842004816417E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999995967990196	WITHOUT_CLASSIFICATION	4.0320098032884404E-7	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999993393581413	WITHOUT_CLASSIFICATION	6.606418585762665E-7	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999939128947	WITHOUT_CLASSIFICATION	6.0871052920582834E-9	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999995967990196	WITHOUT_CLASSIFICATION	4.0320098032884404E-7	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999824511527	WITHOUT_CLASSIFICATION	1.75488472057416E-8	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999996726800364	WITHOUT_CLASSIFICATION	3.2731996351238486E-7	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999983101781732	WITHOUT_CLASSIFICATION	1.6898218267603532E-6	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999940689095725	WITHOUT_CLASSIFICATION	5.93109042736552E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9999965482770354	WITHOUT_CLASSIFICATION	3.4517229645149776E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995071268495	WITHOUT_CLASSIFICATION	4.928731504618942E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995071268495	WITHOUT_CLASSIFICATION	4.928731504618942E-7	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999932373250391	WITHOUT_CLASSIFICATION	6.762674960943764E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999959992258	WITHOUT_CLASSIFICATION	4.000774193767333E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997385179518846	WITHOUT_CLASSIFICATION	2.614820481153765E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999941266435	WITHOUT_CLASSIFICATION	5.873356408748382E-9	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999965969370387	WITHOUT_CLASSIFICATION	3.403062961264813E-6	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999593141580413	WITHOUT_CLASSIFICATION	4.0685841958799244E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999960543730791	WITHOUT_CLASSIFICATION	3.945626920795662E-6	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999439924601993	WITHOUT_CLASSIFICATION	5.600753980067217E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999990927870814	WITHOUT_CLASSIFICATION	9.072129185441587E-7	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999781828637	WITHOUT_CLASSIFICATION	2.181713634462703E-8	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999990832445758	WITHOUT_CLASSIFICATION	9.16755424229743E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999990832445758	WITHOUT_CLASSIFICATION	9.16755424229743E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999614116261985	WITHOUT_CLASSIFICATION	3.8588373801501196E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999976990710719	WITHOUT_CLASSIFICATION	2.300928928063896E-6	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998881686278	WITHOUT_CLASSIFICATION	1.118313721497604E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999990832445758	WITHOUT_CLASSIFICATION	9.16755424229743E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999614116261985	WITHOUT_CLASSIFICATION	3.8588373801501196E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999614116261985	WITHOUT_CLASSIFICATION	3.8588373801501196E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999578393853	WITHOUT_CLASSIFICATION	4.2160614724621306E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998373114000306	WITHOUT_CLASSIFICATION	1.6268859996937287E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999366351441	WITHOUT_CLASSIFICATION	6.336485592251649E-8	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999843748653844	WITHOUT_CLASSIFICATION	1.562513461557006E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999827744346522	WITHOUT_CLASSIFICATION	1.7225565347703316E-5	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999827744346522	WITHOUT_CLASSIFICATION	1.7225565347703316E-5	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999987733776965	WITHOUT_CLASSIFICATION	1.226622303513046E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999992824031311	WITHOUT_CLASSIFICATION	7.175968689594139E-7	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999996892767727	WITHOUT_CLASSIFICATION	3.107232272881184E-7	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999961867801	WITHOUT_CLASSIFICATION	3.813219896205791E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999961867801	WITHOUT_CLASSIFICATION	3.813219896205791E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999972402445598	WITHOUT_CLASSIFICATION	2.759755440100028E-6	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999942727697374	WITHOUT_CLASSIFICATION	5.727230262641692E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999586214907843	WITHOUT_CLASSIFICATION	4.137850921569238E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999989200696	WITHOUT_CLASSIFICATION	1.0799303517290878E-9	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999574532628	WITHOUT_CLASSIFICATION	4.2546737187577805E-8	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999990397810827	WITHOUT_CLASSIFICATION	9.602189172749436E-7	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998745276769351	WITHOUT_CLASSIFICATION	1.254723230649153E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9994729380089665	WITHOUT_CLASSIFICATION	5.270619910334741E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999966315731293	WITHOUT_CLASSIFICATION	3.3684268705494394E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999586214907843	WITHOUT_CLASSIFICATION	4.137850921569238E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999778215638294	WITHOUT_CLASSIFICATION	2.217843617054353E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999197058804329	WITHOUT_CLASSIFICATION	8.02941195671268E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999197058804329	WITHOUT_CLASSIFICATION	8.02941195671268E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999387854765641	WITHOUT_CLASSIFICATION	6.121452343586148E-5	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999923995420911	WITHOUT_CLASSIFICATION	7.600457908906651E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996185841120282	WITHOUT_CLASSIFICATION	3.8141588797181795E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999998289444699	WITHOUT_CLASSIFICATION	1.7105553009936146E-6	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999963010902607	WITHOUT_CLASSIFICATION	3.6989097392925906E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9997731225126398	WITHOUT_CLASSIFICATION	2.2687748736015807E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9999996083955321	WITHOUT_CLASSIFICATION	3.916044678490878E-7	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999775609218109	WITHOUT_CLASSIFICATION	2.243907818906229E-5	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999991196068	WITHOUT_CLASSIFICATION	8.803932793168197E-10	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999991196068	WITHOUT_CLASSIFICATION	8.803932793168197E-10	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994196276208	WITHOUT_CLASSIFICATION	5.803723791736799E-7	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999966481648869	WITHOUT_CLASSIFICATION	3.3518351130924345E-5	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999446025852	WITHOUT_CLASSIFICATION	5.539741483913521E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997336495245	WITHOUT_CLASSIFICATION	2.663504754636954E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999994812078129	WITHOUT_CLASSIFICATION	5.187921871027773E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999981774084156	WITHOUT_CLASSIFICATION	1.8225915844559524E-6	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999005908442	WITHOUT_CLASSIFICATION	9.940915569210414E-8	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999513083246	WITHOUT_CLASSIFICATION	4.869167533791637E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999990865406858	WITHOUT_CLASSIFICATION	9.134593141595862E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999994837579746	WITHOUT_CLASSIFICATION	5.162420253637901E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999941149077385	WITHOUT_CLASSIFICATION	5.885092261571794E-6	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999996099660062	WITHOUT_CLASSIFICATION	3.900339937224905E-7	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999978823083217	WITHOUT_CLASSIFICATION	2.1176916782560985E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998953956376	WITHOUT_CLASSIFICATION	1.0460436235114126E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999989210408471	WITHOUT_CLASSIFICATION	1.078959152966025E-6	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999989210408471	WITHOUT_CLASSIFICATION	1.078959152966025E-6	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998660560472	WITHOUT_CLASSIFICATION	1.3394395288871804E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999993957855096	WITHOUT_CLASSIFICATION	6.042144904646133E-7	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999998846065767	WITHOUT_CLASSIFICATION	1.1539342330978636E-7	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999997192718957	WITHOUT_CLASSIFICATION	2.807281042505731E-7	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999974476588009	WITHOUT_CLASSIFICATION	2.5523411991092437E-6	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999990536939413	WITHOUT_CLASSIFICATION	9.463060586376063E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996118858024	WITHOUT_CLASSIFICATION	3.8811419757544234E-7	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999969605989047	WITHOUT_CLASSIFICATION	3.039401095298095E-6	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999991513454505	WITHOUT_CLASSIFICATION	8.486545496466907E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999969601915611	WITHOUT_CLASSIFICATION	3.0398084387681594E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996251139345	WITHOUT_CLASSIFICATION	3.748860655616756E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.999997643669744	WITHOUT_CLASSIFICATION	2.356330256096206E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999978891844868	WITHOUT_CLASSIFICATION	2.110815513178038E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996524323179	WITHOUT_CLASSIFICATION	3.475676820788964E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998688520954	WITHOUT_CLASSIFICATION	1.3114790470630861E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994796086368	WITHOUT_CLASSIFICATION	5.203913631449265E-7	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999989672167934	WITHOUT_CLASSIFICATION	1.0327832066218193E-6	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999901708049612	WITHOUT_CLASSIFICATION	9.829195038796195E-6	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999634084494	WITHOUT_CLASSIFICATION	3.6591550507426916E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.999999220453994	WITHOUT_CLASSIFICATION	7.795460059065445E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999994812078129	WITHOUT_CLASSIFICATION	5.187921871027773E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999994812078129	WITHOUT_CLASSIFICATION	5.187921871027773E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999996099660062	WITHOUT_CLASSIFICATION	3.900339937224905E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999989210408471	WITHOUT_CLASSIFICATION	1.078959152966025E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996524323179	WITHOUT_CLASSIFICATION	3.475676820788964E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999859627513	WITHOUT_CLASSIFICATION	1.4037248729573538E-8	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999959193054	WITHOUT_CLASSIFICATION	4.080694559891329E-9	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999988884826602	WITHOUT_CLASSIFICATION	1.1115173397920916E-6	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999998746736558	WITHOUT_CLASSIFICATION	1.2532634407483787E-7	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999982330951331	WITHOUT_CLASSIFICATION	1.7669048669517004E-6	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999994808526789	WITHOUT_CLASSIFICATION	5.191473210590911E-7	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999991873450008	WITHOUT_CLASSIFICATION	8.126549991485364E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999999296243679	WITHOUT_CLASSIFICATION	7.037563217085847E-8	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.9999800064840549	WITHOUT_CLASSIFICATION	1.9993515945035424E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999998625662142	WITHOUT_CLASSIFICATION	1.3743378582120257E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999967547773982	WITHOUT_CLASSIFICATION	3.245222601784063E-6	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999967547773982	WITHOUT_CLASSIFICATION	3.245222601784063E-6	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999943050167	WITHOUT_CLASSIFICATION	5.694983240891915E-9	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999998563993971	WITHOUT_CLASSIFICATION	1.4360060283658263E-7	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999956102442789	WITHOUT_CLASSIFICATION	4.389755721175407E-6	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.99999339955297	WITHOUT_CLASSIFICATION	6.600447030002399E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999999955917342	WITHOUT_CLASSIFICATION	4.408265786050423E-8	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999860860418	WITHOUT_CLASSIFICATION	1.391395824626319E-8	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999998921921046	WITHOUT_CLASSIFICATION	1.0780789534679068E-7	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999948065704	WITHOUT_CLASSIFICATION	5.1934295927569493E-8	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999990102418134	WITHOUT_CLASSIFICATION	9.897581866387496E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997835429355	WITHOUT_CLASSIFICATION	2.164570643892542E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997835429355	WITHOUT_CLASSIFICATION	2.164570643892542E-7	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999999670869394	WITHOUT_CLASSIFICATION	3.2913060589760326E-7	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997833407914	WITHOUT_CLASSIFICATION	2.1665920865538218E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999992229803024	WITHOUT_CLASSIFICATION	7.770196974611833E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999012913493	WITHOUT_CLASSIFICATION	9.870865071256855E-8	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999998686620972	WITHOUT_CLASSIFICATION	1.3133790269412666E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999994812078129	WITHOUT_CLASSIFICATION	5.187921871027773E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999996099660062	WITHOUT_CLASSIFICATION	3.900339937224905E-7	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998953956376	WITHOUT_CLASSIFICATION	1.0460436235114126E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996524323179	WITHOUT_CLASSIFICATION	3.475676820788964E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996524323179	WITHOUT_CLASSIFICATION	3.475676820788964E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999606253546	WITHOUT_CLASSIFICATION	3.9374645385513265E-8	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999606253546	WITHOUT_CLASSIFICATION	3.9374645385513265E-8	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997107866332	WITHOUT_CLASSIFICATION	2.8921336679918534E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999990570913215	WITHOUT_CLASSIFICATION	9.429086784494606E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999990570913215	WITHOUT_CLASSIFICATION	9.429086784494606E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.999990937514582	WITHOUT_CLASSIFICATION	9.062485417957563E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9999978392524705	WITHOUT_CLASSIFICATION	2.1607475294471596E-6	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999998065512016	WITHOUT_CLASSIFICATION	1.934487984520516E-7	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999793124926	WITHOUT_CLASSIFICATION	2.0687507334588646E-8	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999640604685	WITHOUT_CLASSIFICATION	3.59395313580753E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999972563857965	WITHOUT_CLASSIFICATION	2.743614203535487E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999972563857965	WITHOUT_CLASSIFICATION	2.743614203535487E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997876486284212	WITHOUT_CLASSIFICATION	2.1235137157876914E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.999999763196859	WITHOUT_CLASSIFICATION	2.3680314092491406E-7	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999998494222267	WITHOUT_CLASSIFICATION	1.5057777324222237E-7	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999992297405678	WITHOUT_CLASSIFICATION	7.702594322573709E-7	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999620758706	WITHOUT_CLASSIFICATION	3.7924129488315964E-8	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999980010483813	WITHOUT_CLASSIFICATION	1.9989516186535764E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999796472686	WITHOUT_CLASSIFICATION	2.0352731404463567E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998695534048	WITHOUT_CLASSIFICATION	1.3044659522014637E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998695534048	WITHOUT_CLASSIFICATION	1.3044659522014637E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997774166125	WITHOUT_CLASSIFICATION	2.2258338763812228E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997774166125	WITHOUT_CLASSIFICATION	2.2258338763812228E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999930186575513	WITHOUT_CLASSIFICATION	6.981342448721335E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999930186575513	WITHOUT_CLASSIFICATION	6.981342448721335E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999421872856	WITHOUT_CLASSIFICATION	5.781271441217039E-8	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999421872856	WITHOUT_CLASSIFICATION	5.781271441217039E-8	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9999972563857965	WITHOUT_CLASSIFICATION	2.743614203535487E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999796472686	WITHOUT_CLASSIFICATION	2.0352731404463567E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998695534048	WITHOUT_CLASSIFICATION	1.3044659522014637E-7	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999998695534048	WITHOUT_CLASSIFICATION	1.3044659522014637E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999997774166125	WITHOUT_CLASSIFICATION	2.2258338763812228E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999930186575513	WITHOUT_CLASSIFICATION	6.981342448721335E-6	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999930186575513	WITHOUT_CLASSIFICATION	6.981342448721335E-6	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999421872856	WITHOUT_CLASSIFICATION	5.781271441217039E-8	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999984253682337	WITHOUT_CLASSIFICATION	1.5746317663089224E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999946392385579	WITHOUT_CLASSIFICATION	5.360761442096593E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998512366196038	WITHOUT_CLASSIFICATION	1.4876338039624887E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999944759896391	WITHOUT_CLASSIFICATION	5.524010360809834E-6	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999957366206218	WITHOUT_CLASSIFICATION	4.26337937823488E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999961074234112	WITHOUT_CLASSIFICATION	3.892576588861222E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999912679971894	WITHOUT_CLASSIFICATION	8.732002810542176E-6	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.999999666843647	WITHOUT_CLASSIFICATION	3.3315635302339204E-7	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999997507213776	WITHOUT_CLASSIFICATION	2.4927862239946227E-7	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999175503382	WITHOUT_CLASSIFICATION	8.244966177041845E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999980055907278	WITHOUT_CLASSIFICATION	1.9944092721493638E-6	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999293091959	WITHOUT_CLASSIFICATION	7.069080420588137E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999932373250391	WITHOUT_CLASSIFICATION	6.762674960943764E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999961074234112	WITHOUT_CLASSIFICATION	3.892576588861222E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999866236812507	WITHOUT_CLASSIFICATION	1.3376318749406192E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999866236812507	WITHOUT_CLASSIFICATION	1.3376318749406192E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999986881334954	WITHOUT_CLASSIFICATION	1.3118665046673882E-6	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999995410508	WITHOUT_CLASSIFICATION	4.589491967749115E-9	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999999995410508	WITHOUT_CLASSIFICATION	4.589491967749115E-9	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999219358533	WITHOUT_CLASSIFICATION	7.806414663429495E-8	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999977421872	WITHOUT_CLASSIFICATION	2.257812838157344E-9	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999929276835143	WITHOUT_CLASSIFICATION	7.0723164857019875E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999916352136897	WITHOUT_CLASSIFICATION	8.364786310302436E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999916352136897	WITHOUT_CLASSIFICATION	8.364786310302436E-6	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999931144374	WITHOUT_CLASSIFICATION	6.885562561359436E-9	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999701543084587	WITHOUT_CLASSIFICATION	2.9845691541354305E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999701543084587	WITHOUT_CLASSIFICATION	2.9845691541354305E-5	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999995465914494	WITHOUT_CLASSIFICATION	4.5340855064135706E-7	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999629518537	WITHOUT_CLASSIFICATION	3.704814638470777E-8	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999998610895	WITHOUT_CLASSIFICATION	1.3891048044941708E-10	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999899904543239	WITHOUT_CLASSIFICATION	1.000954567615364E-5	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.99999952628688	WITHOUT_CLASSIFICATION	4.737131200226295E-7	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999996008213436	WITHOUT_CLASSIFICATION	3.991786564545648E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999998507675208	WITHOUT_CLASSIFICATION	1.4923247918947903E-7	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999841835965564	WITHOUT_CLASSIFICATION	1.5816403443622093E-5	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.9876947351667532	WITHOUT_CLASSIFICATION	0.012305264833246718	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999952841914225	WITHOUT_CLASSIFICATION	4.715808577487455E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999996769433459	WITHOUT_CLASSIFICATION	3.2305665409572965E-6	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999201908153084	WITHOUT_CLASSIFICATION	7.9809184691616E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999446604934	WITHOUT_CLASSIFICATION	5.533950666569796E-8	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999850090624351	WITHOUT_CLASSIFICATION	1.4990937564939699E-5	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999743398381	WITHOUT_CLASSIFICATION	2.5660161933027373E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999201908153084	WITHOUT_CLASSIFICATION	7.9809184691616E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999995351065406	WITHOUT_CLASSIFICATION	4.6489345944238914E-7	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999948512192989	WITHOUT_CLASSIFICATION	5.148780701185158E-6	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999872146981136	WITHOUT_CLASSIFICATION	1.2785301886327289E-5	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999974804875242	WITHOUT_CLASSIFICATION	2.5195124757014155E-6	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999964678548487	WITHOUT_CLASSIFICATION	3.5321451511283924E-6	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999987970100987	WITHOUT_CLASSIFICATION	1.2029899012476816E-6	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999973743974403	WITHOUT_CLASSIFICATION	2.6256025597030267E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999882653109354	WITHOUT_CLASSIFICATION	1.1734689064586338E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999987935318185	WITHOUT_CLASSIFICATION	1.2064681814427034E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999642097	WITHOUT_CLASSIFICATION	3.5790234806232987E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999637092574231	WITHOUT_CLASSIFICATION	3.629074257693751E-5	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999934864616	WITHOUT_CLASSIFICATION	6.513538320776795E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999990897213937	WITHOUT_CLASSIFICATION	9.102786062554418E-7	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999998507675208	WITHOUT_CLASSIFICATION	1.4923247918947903E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999987935318185	WITHOUT_CLASSIFICATION	1.2064681814427034E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999637092574231	WITHOUT_CLASSIFICATION	3.629074257693751E-5	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999990897213937	WITHOUT_CLASSIFICATION	9.102786062554418E-7	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999966294532633	WITHOUT_CLASSIFICATION	3.3705467366808403E-6	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999849254087986	WITHOUT_CLASSIFICATION	1.5074591201270475E-5	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999962768121982	WITHOUT_CLASSIFICATION	3.7231878017581693E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999982808542002	WITHOUT_CLASSIFICATION	1.719145799794146E-5	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999973187525293	WITHOUT_CLASSIFICATION	2.6812474706645963E-6	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999872733104858	WITHOUT_CLASSIFICATION	1.2726689514208062E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999971666335711	WITHOUT_CLASSIFICATION	2.833366428802107E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999968447777463	WITHOUT_CLASSIFICATION	3.155222253576162E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999996636915766	WITHOUT_CLASSIFICATION	3.3630842348284067E-7	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999555736208	WITHOUT_CLASSIFICATION	4.4426379351135035E-8	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999997274764433	WITHOUT_CLASSIFICATION	2.7252355676793377E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999983360132721	WITHOUT_CLASSIFICATION	1.663986727886373E-5	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999782150247	WITHOUT_CLASSIFICATION	2.1784975363941508E-8	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999986665812978	WITHOUT_CLASSIFICATION	1.3334187022704814E-6	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999944746296259	WITHOUT_CLASSIFICATION	5.525370374145253E-6	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999923610584677	WITHOUT_CLASSIFICATION	7.638941532364469E-6	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999979528815176	WITHOUT_CLASSIFICATION	2.047118482269525E-6	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999962009428	WITHOUT_CLASSIFICATION	3.799057220822955E-9	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999992501148897	WITHOUT_CLASSIFICATION	7.498851103411235E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999987935318185	WITHOUT_CLASSIFICATION	1.2064681814427034E-6	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999999799989061	WITHOUT_CLASSIFICATION	2.000109390452584E-7	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999908585129188	WITHOUT_CLASSIFICATION	9.141487081130737E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999998808853007	WITHOUT_CLASSIFICATION	1.1911469928691385E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999845222948648	WITHOUT_CLASSIFICATION	1.5477705135241478E-5	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999991161889524	WITHOUT_CLASSIFICATION	8.8381104767558E-7	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999988945082402	WITHOUT_CLASSIFICATION	1.1054917598615967E-6	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999978443494684	WITHOUT_CLASSIFICATION	2.1556505315907794E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999051528237	WITHOUT_CLASSIFICATION	9.484717642366827E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999932508869289	WITHOUT_CLASSIFICATION	6.749113071007065E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999921271175073	WITHOUT_CLASSIFICATION	7.872882492669652E-6	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.99998039748054	WITHOUT_CLASSIFICATION	1.9602519460021005E-5	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999996941817531	WITHOUT_CLASSIFICATION	3.058182468988647E-6	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9990457225116731	WITHOUT_CLASSIFICATION	9.542774883268471E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999433097841557	WITHOUT_CLASSIFICATION	5.669021584418671E-5	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998595661187	WITHOUT_CLASSIFICATION	1.4043388122035037E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999995736773062	WITHOUT_CLASSIFICATION	4.263226938889333E-7	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999423712883801	WITHOUT_CLASSIFICATION	5.7628711619730934E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999829962854563	WITHOUT_CLASSIFICATION	1.700371454365677E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999488353281138	WITHOUT_CLASSIFICATION	5.11646718860509E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999982166731789	WITHOUT_CLASSIFICATION	1.7833268211452417E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999988682496571	WITHOUT_CLASSIFICATION	1.1317503428942681E-6	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999549891270945	WITHOUT_CLASSIFICATION	4.50108729055736E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999978270081252	WITHOUT_CLASSIFICATION	2.172991874700043E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999983199633976	WITHOUT_CLASSIFICATION	1.6800366024542115E-6	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999620539594779	WITHOUT_CLASSIFICATION	3.7946040522001315E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999620539594779	WITHOUT_CLASSIFICATION	3.7946040522001315E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999924954489647	WITHOUT_CLASSIFICATION	7.504551035221098E-6	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9996638165032118	WITHOUT_CLASSIFICATION	3.361834967881171E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999454657422339	WITHOUT_CLASSIFICATION	5.453425776602459E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999992541667677	WITHOUT_CLASSIFICATION	7.458332324052345E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999999733640596	WITHOUT_CLASSIFICATION	2.663594039745661E-7	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999996808188464	WITHOUT_CLASSIFICATION	3.191811535924454E-7	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999973491293447	WITHOUT_CLASSIFICATION	2.6508706552942125E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999272411044106	WITHOUT_CLASSIFICATION	7.275889558941086E-5	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999995987619417	WITHOUT_CLASSIFICATION	4.012380584010394E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999997988412072	WITHOUT_CLASSIFICATION	2.011587927354148E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999567143724116	WITHOUT_CLASSIFICATION	4.3285627588228114E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999964777293322	WITHOUT_CLASSIFICATION	3.5222706677756164E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999986589179809	WITHOUT_CLASSIFICATION	1.3410820191194616E-6	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9991968919220862	WITHOUT_CLASSIFICATION	8.031080779138164E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998251577221	WITHOUT_CLASSIFICATION	1.7484227785001418E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999682741544688	WITHOUT_CLASSIFICATION	3.1725845531285475E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999942455681938	WITHOUT_CLASSIFICATION	5.754431806178968E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999597946916	WITHOUT_CLASSIFICATION	4.0205308411549196E-8	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999865124955144	WITHOUT_CLASSIFICATION	1.3487504485552042E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999688032767354	WITHOUT_CLASSIFICATION	3.119672326447626E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999996469155356	WITHOUT_CLASSIFICATION	3.5308446436822987E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999996469155356	WITHOUT_CLASSIFICATION	3.5308446436822987E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999957278630729	WITHOUT_CLASSIFICATION	4.272136927070886E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999957278630729	WITHOUT_CLASSIFICATION	4.272136927070886E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999978270081252	WITHOUT_CLASSIFICATION	2.172991874700043E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999986463637978	WITHOUT_CLASSIFICATION	1.353636202202389E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999978640340939	WITHOUT_CLASSIFICATION	2.135965906093328E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999990040551854	WITHOUT_CLASSIFICATION	9.959448146297089E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994196276208	WITHOUT_CLASSIFICATION	5.803723791736799E-7	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999978640340939	WITHOUT_CLASSIFICATION	2.135965906093328E-5	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999990040551854	WITHOUT_CLASSIFICATION	9.959448146297089E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999649444340046	WITHOUT_CLASSIFICATION	3.505556599536413E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999996744674648	WITHOUT_CLASSIFICATION	3.255325351269341E-7	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999611912046	WITHOUT_CLASSIFICATION	3.880879537390406E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999129853664	WITHOUT_CLASSIFICATION	8.701463366427907E-8	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9898702898801637	WITHOUT_CLASSIFICATION	0.010129710119836323	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9956841150001952	WITHOUT_CLASSIFICATION	0.004315884999804866	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999987217086	WITHOUT_CLASSIFICATION	1.2782912960838825E-9	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999892473083	WITHOUT_CLASSIFICATION	1.0752691699392436E-8	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999997356088418	WITHOUT_CLASSIFICATION	2.6439115821618093E-7	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999968104051464	WITHOUT_CLASSIFICATION	3.1895948535412183E-6	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999886684703834	WITHOUT_CLASSIFICATION	1.133152961669991E-5	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999927797111	WITHOUT_CLASSIFICATION	7.220288982886101E-9	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999153729485	WITHOUT_CLASSIFICATION	8.462705144613807E-8	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999737093308076	WITHOUT_CLASSIFICATION	2.6290669192394217E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994196276208	WITHOUT_CLASSIFICATION	5.803723791736799E-7	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999805843554036	WITHOUT_CLASSIFICATION	1.9415644596367625E-5	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999089701397	WITHOUT_CLASSIFICATION	9.102986027222713E-8	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999089701397	WITHOUT_CLASSIFICATION	9.102986027222713E-8	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999949793373594	WITHOUT_CLASSIFICATION	5.020662640638152E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999649444340046	WITHOUT_CLASSIFICATION	3.505556599536413E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999930249183492	WITHOUT_CLASSIFICATION	6.975081650822441E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9998204112101582	WITHOUT_CLASSIFICATION	1.795887898417756E-4	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9989993091259676	WITHOUT_CLASSIFICATION	0.0010006908740324242	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999992956427486	WITHOUT_CLASSIFICATION	7.043572512807758E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999626710774038	WITHOUT_CLASSIFICATION	3.7328922596242546E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999649444340046	WITHOUT_CLASSIFICATION	3.505556599536413E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999992956427486	WITHOUT_CLASSIFICATION	7.043572512807758E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999626710774038	WITHOUT_CLASSIFICATION	3.7328922596242546E-5	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9831416684945449	WITHOUT_CLASSIFICATION	0.016858331505455106	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999952569654746	WITHOUT_CLASSIFICATION	4.743034525290574E-6	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999962363732637	WITHOUT_CLASSIFICATION	3.763626736239133E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999649444340046	WITHOUT_CLASSIFICATION	3.505556599536413E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999649444340046	WITHOUT_CLASSIFICATION	3.505556599536413E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999978535161663	WITHOUT_CLASSIFICATION	2.14648383379343E-6	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999984590141825	WITHOUT_CLASSIFICATION	1.5409858173880117E-6	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999802175635952	WITHOUT_CLASSIFICATION	1.9782436404830128E-5	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999936640505416	WITHOUT_CLASSIFICATION	6.335949458507548E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999978110650898	WITHOUT_CLASSIFICATION	2.1889349101898202E-6	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999994602298	WITHOUT_CLASSIFICATION	5.397703392261327E-10	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999900948367535	WITHOUT_CLASSIFICATION	9.905163246565785E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999988573207307	WITHOUT_CLASSIFICATION	1.1426792693622658E-6	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999965995457866	WITHOUT_CLASSIFICATION	3.4004542133272594E-6	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999882220755026	WITHOUT_CLASSIFICATION	1.1777924497307795E-5	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999975963678076	WITHOUT_CLASSIFICATION	2.403632192371026E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9996625008603255	WITHOUT_CLASSIFICATION	3.374991396744809E-4	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998882276173	WITHOUT_CLASSIFICATION	1.1177238269833495E-7	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999921265700625	WITHOUT_CLASSIFICATION	7.87342993749926E-6	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995695712013	WITHOUT_CLASSIFICATION	4.3042879874605085E-7	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999886851785793	WITHOUT_CLASSIFICATION	1.131482142077998E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664327352383	WITHOUT_CLASSIFICATION	3.356726476163984E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999991954881343	WITHOUT_CLASSIFICATION	8.045118657239203E-7	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9964677519012551	WITHOUT_CLASSIFICATION	0.003532248098744874	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999953667585919	WITHOUT_CLASSIFICATION	4.633241408078592E-6	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998822579137527	WITHOUT_CLASSIFICATION	1.1774208624733674E-4	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9967822715823756	WITHOUT_CLASSIFICATION	0.003217728417624292	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9967822715823756	WITHOUT_CLASSIFICATION	0.003217728417624292	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999664327352383	WITHOUT_CLASSIFICATION	3.356726476163984E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9993078925343446	WITHOUT_CLASSIFICATION	6.92107465655479E-4	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999682265818	WITHOUT_CLASSIFICATION	3.177341814643686E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.7951673522391773	WITHOUT_CLASSIFICATION	0.2048326477608227	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999999869567411	WITHOUT_CLASSIFICATION	1.3043258894635013E-7	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999581348525868	WITHOUT_CLASSIFICATION	4.186514741331867E-5	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999985615884119	WITHOUT_CLASSIFICATION	1.43841158804508E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999820516757566	WITHOUT_CLASSIFICATION	1.794832424347121E-5	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999923525780644	WITHOUT_CLASSIFICATION	7.647421935669165E-6	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998894272532	WITHOUT_CLASSIFICATION	1.1057274688467412E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998502756173	WITHOUT_CLASSIFICATION	1.497243825448644E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999976836948891	WITHOUT_CLASSIFICATION	2.316305110876567E-6	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999976238306152	WITHOUT_CLASSIFICATION	2.3761693848278905E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999795607134109	WITHOUT_CLASSIFICATION	2.043928658910492E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999387661911	WITHOUT_CLASSIFICATION	6.123380895925E-8	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999329521954	WITHOUT_CLASSIFICATION	6.704780459058412E-7	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999379341614	WITHOUT_CLASSIFICATION	6.206583851592162E-8	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999998519636792	WITHOUT_CLASSIFICATION	1.4803632067771803E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.999998193926055	WITHOUT_CLASSIFICATION	1.8060739448452466E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999714562854	WITHOUT_CLASSIFICATION	2.8543714618747366E-8	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999576126974	WITHOUT_CLASSIFICATION	4.238730255696584E-8	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999891814242551	WITHOUT_CLASSIFICATION	1.0818575744836982E-5	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999982704344386	WITHOUT_CLASSIFICATION	1.729565561383816E-6	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912429265161	WITHOUT_CLASSIFICATION	8.75707348401303E-6	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999963033524179	WITHOUT_CLASSIFICATION	3.696647582088335E-5	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666166532998	WITHOUT_CLASSIFICATION	3.338334670020473E-5	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998238028814808	WITHOUT_CLASSIFICATION	1.7619711851929223E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996325942844588	WITHOUT_CLASSIFICATION	3.6740571554110484E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999696321023056	WITHOUT_CLASSIFICATION	3.036789769445897E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997678602616558	WITHOUT_CLASSIFICATION	2.3213973834419256E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657997414625	WITHOUT_CLASSIFICATION	3.4200258537468985E-5	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999959830536601	WITHOUT_CLASSIFICATION	4.016946339905437E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999990140459541	WITHOUT_CLASSIFICATION	9.859540459103353E-7	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938672072952	WITHOUT_CLASSIFICATION	6.132792704853751E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972659646164	WITHOUT_CLASSIFICATION	2.7340353836779416E-6	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987423550377	WITHOUT_CLASSIFICATION	1.2576449623017698E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997013897504653	WITHOUT_CLASSIFICATION	2.9861024953468647E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997667943587	WITHOUT_CLASSIFICATION	2.332056412960038E-6	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962084355444	WITHOUT_CLASSIFICATION	3.7915644555117144E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998915646243834	WITHOUT_CLASSIFICATION	1.0843537561653262E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447667507571	WITHOUT_CLASSIFICATION	1.5523324924293354E-4	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999998827937136	WITHOUT_CLASSIFICATION	1.1720628639331127E-6	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999895461409382	WITHOUT_CLASSIFICATION	1.0453859061798202E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9996503032860048	WITHOUT_CLASSIFICATION	3.496967139951701E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999317727433	WITHOUT_CLASSIFICATION	6.822725667062274E-8	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999124772935	WITHOUT_CLASSIFICATION	8.752270655957697E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999961494809536	WITHOUT_CLASSIFICATION	3.850519046491751E-6	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9999966755258745	WITHOUT_CLASSIFICATION	3.324474125539901E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999976326458471	WITHOUT_CLASSIFICATION	2.3673541528572207E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.99999233844632	WITHOUT_CLASSIFICATION	7.661553680056025E-6	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999986556418607	WITHOUT_CLASSIFICATION	1.3443581392948813E-6	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999903962394601	WITHOUT_CLASSIFICATION	9.60376054000821E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999882810240726	WITHOUT_CLASSIFICATION	1.1718975927377674E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999936381685522	WITHOUT_CLASSIFICATION	6.361831447830759E-6	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.999995489042554	WITHOUT_CLASSIFICATION	4.510957446091514E-6	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999467182251	WITHOUT_CLASSIFICATION	5.328177499170235E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999437716852	WITHOUT_CLASSIFICATION	5.6228314703454715E-8	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999862201681825	WITHOUT_CLASSIFICATION	1.377983181758833E-5	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999992078472186	WITHOUT_CLASSIFICATION	7.921527813642183E-7	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999999264090609	WITHOUT_CLASSIFICATION	7.359093910657477E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999499917251694	WITHOUT_CLASSIFICATION	5.0008274830715985E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953563535676	WITHOUT_CLASSIFICATION	4.643646432343097E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930821894095	WITHOUT_CLASSIFICATION	6.9178105905657585E-6	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980562575963	WITHOUT_CLASSIFICATION	1.943742403707801E-5	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.999348575006621	WITHOUT_CLASSIFICATION	6.514249933789374E-4	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999935814055699	WITHOUT_CLASSIFICATION	6.418594430074752E-6	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.968930350033698	WITHOUT_CLASSIFICATION	0.03106964996630197	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998350976846191	WITHOUT_CLASSIFICATION	1.6490231538093765E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958136388012	WITHOUT_CLASSIFICATION	4.186361198840755E-6	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999910093062	WITHOUT_CLASSIFICATION	8.990693804920752E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999977380907	WITHOUT_CLASSIFICATION	2.2619093416981646E-9	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999992462628783	WITHOUT_CLASSIFICATION	7.537371217321541E-7	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999661228859	WITHOUT_CLASSIFICATION	3.387711411543878E-8	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9997870691924371	WITHOUT_CLASSIFICATION	2.1293080756299468E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998176106033702	WITHOUT_CLASSIFICATION	1.8238939662995688E-4	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999907001287	WITHOUT_CLASSIFICATION	9.299871393272817E-9	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999990984969	WITHOUT_CLASSIFICATION	9.015030998450484E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999961494809536	WITHOUT_CLASSIFICATION	3.850519046491751E-6	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999700102287	WITHOUT_CLASSIFICATION	2.998977137135426E-8	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999995038235531	WITHOUT_CLASSIFICATION	4.961764469491947E-7	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999764000431073	WITHOUT_CLASSIFICATION	2.3599956892640956E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998080275074	WITHOUT_CLASSIFICATION	1.9197249261276429E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999992880480383	WITHOUT_CLASSIFICATION	7.119519616647737E-7	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999993630246693	WITHOUT_CLASSIFICATION	6.369753306884917E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998266091629798	WITHOUT_CLASSIFICATION	1.7339083702022968E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999990343628179	WITHOUT_CLASSIFICATION	9.656371821406554E-7	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999960156817771	WITHOUT_CLASSIFICATION	3.984318222922488E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998963652968	WITHOUT_CLASSIFICATION	1.0363470320177207E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999989578466189	WITHOUT_CLASSIFICATION	1.0421533811566866E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999986820691	WITHOUT_CLASSIFICATION	1.3179308998051915E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999995890049866	WITHOUT_CLASSIFICATION	4.109950133778353E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999997747541842	WITHOUT_CLASSIFICATION	2.2524581578756684E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999999344766734	WITHOUT_CLASSIFICATION	6.552332659081435E-7	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999997191708001	WITHOUT_CLASSIFICATION	2.8082919988509693E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9994643076637146	WITHOUT_CLASSIFICATION	5.356923362853027E-4	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999977840928284	WITHOUT_CLASSIFICATION	2.215907171618494E-6	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999998093100097	WITHOUT_CLASSIFICATION	1.9068999029323306E-6	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999939210608068	WITHOUT_CLASSIFICATION	6.078939193330748E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999987320126195	WITHOUT_CLASSIFICATION	1.2679873805087864E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999882899656259	WITHOUT_CLASSIFICATION	1.1710034374099961E-5	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999976314872551	WITHOUT_CLASSIFICATION	2.3685127449502366E-6	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999827180804821	WITHOUT_CLASSIFICATION	1.7281919517848226E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999992712927507	WITHOUT_CLASSIFICATION	7.287072493946032E-7	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997383270814	WITHOUT_CLASSIFICATION	2.6167291853249116E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9980933719368019	WITHOUT_CLASSIFICATION	0.0019066280631982015	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999973774303279	WITHOUT_CLASSIFICATION	2.6225696720406692E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999991615627639	WITHOUT_CLASSIFICATION	8.384372360696684E-7	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999999322398293	WITHOUT_CLASSIFICATION	6.776017070945939E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999961494809536	WITHOUT_CLASSIFICATION	3.850519046491751E-6	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999292898559873	WITHOUT_CLASSIFICATION	7.071014401272204E-5	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999323205674	WITHOUT_CLASSIFICATION	6.76794325257467E-8	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999007144972	WITHOUT_CLASSIFICATION	9.928550280651387E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999961494809536	WITHOUT_CLASSIFICATION	3.850519046491751E-6	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999392947713	WITHOUT_CLASSIFICATION	6.070522878537459E-8	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999987320126195	WITHOUT_CLASSIFICATION	1.2679873805087864E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999883765441075	WITHOUT_CLASSIFICATION	1.1623455892397123E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9994415693982946	WITHOUT_CLASSIFICATION	5.584306017052816E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999515757218795	WITHOUT_CLASSIFICATION	4.842427812045839E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999998963652968	WITHOUT_CLASSIFICATION	1.0363470320177207E-7	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999989578466189	WITHOUT_CLASSIFICATION	1.0421533811566866E-6	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999986820691	WITHOUT_CLASSIFICATION	1.3179308998051915E-7	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999820954352	WITHOUT_CLASSIFICATION	1.7904564799545657E-8	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9999991031951708	WITHOUT_CLASSIFICATION	8.968048291720171E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999999237239326	WITHOUT_CLASSIFICATION	7.62760673974146E-7	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999903538108	WITHOUT_CLASSIFICATION	9.6461892081842E-9	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999921139612	WITHOUT_CLASSIFICATION	7.886038872268677E-9	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999961494809536	WITHOUT_CLASSIFICATION	3.850519046491751E-6	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999995890049866	WITHOUT_CLASSIFICATION	4.109950133778353E-7	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999997747541842	WITHOUT_CLASSIFICATION	2.2524581578756684E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998689159046	WITHOUT_CLASSIFICATION	1.310840953468061E-7	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994955277264	WITHOUT_CLASSIFICATION	5.04472273683701E-7	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999563789113	WITHOUT_CLASSIFICATION	4.362108865084787E-8	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999999838871631	WITHOUT_CLASSIFICATION	1.6112836889078116E-7	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999550908469	WITHOUT_CLASSIFICATION	4.4909153105765386E-8	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999999728980427	WITHOUT_CLASSIFICATION	2.710195730763163E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998447667507571	WITHOUT_CLASSIFICATION	1.5523324924293354E-4	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999999984872542	WITHOUT_CLASSIFICATION	1.5127457939026668E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9995895490809126	WITHOUT_CLASSIFICATION	4.1045091908751007E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999981331490341	WITHOUT_CLASSIFICATION	1.8668509659763012E-6	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998676580935	WITHOUT_CLASSIFICATION	1.323419065015497E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999124197413	WITHOUT_CLASSIFICATION	8.758025872401857E-8	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996325942844588	WITHOUT_CLASSIFICATION	3.6740571554110484E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999696321023056	WITHOUT_CLASSIFICATION	3.036789769445897E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972659646164	WITHOUT_CLASSIFICATION	2.7340353836779416E-6	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999124197413	WITHOUT_CLASSIFICATION	8.758025872401857E-8	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999996978520237	WITHOUT_CLASSIFICATION	3.021479762655955E-7	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999996901590773	WITHOUT_CLASSIFICATION	3.098409227291515E-7	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999402581098884	WITHOUT_CLASSIFICATION	5.974189011162621E-5	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997225178198996	WITHOUT_CLASSIFICATION	2.774821801003682E-4	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999967408315384	WITHOUT_CLASSIFICATION	3.2591684615995086E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9996153418822841	WITHOUT_CLASSIFICATION	3.846581177159466E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987423550377	WITHOUT_CLASSIFICATION	1.2576449623017698E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962084355444	WITHOUT_CLASSIFICATION	3.7915644555117144E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999661228859	WITHOUT_CLASSIFICATION	3.387711411543878E-8	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999907511397	WITHOUT_CLASSIFICATION	9.248860292168903E-9	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999954734318416	WITHOUT_CLASSIFICATION	4.526568158350261E-6	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999825128476	WITHOUT_CLASSIFICATION	1.748715237076737E-8	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999992916682313	WITHOUT_CLASSIFICATION	7.083317686352851E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999998870782667	WITHOUT_CLASSIFICATION	1.129217333545921E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.99999933841121	WITHOUT_CLASSIFICATION	6.615887899757667E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999925960134257	WITHOUT_CLASSIFICATION	7.4039865743092945E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998894272532	WITHOUT_CLASSIFICATION	1.1057274688467412E-7	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999582449430025	WITHOUT_CLASSIFICATION	4.175505699756033E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999974768525829	WITHOUT_CLASSIFICATION	2.5231474171647746E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998011004203285	WITHOUT_CLASSIFICATION	1.9889957967143915E-4	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999806184822235	WITHOUT_CLASSIFICATION	1.9381517776424535E-5	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999997967157604	WITHOUT_CLASSIFICATION	2.0328423952017842E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999894534254127	WITHOUT_CLASSIFICATION	1.0546574587310916E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999697870968429	WITHOUT_CLASSIFICATION	3.0212903157064054E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9955919413693184	WITHOUT_CLASSIFICATION	0.004408058630681551	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969028381038	WITHOUT_CLASSIFICATION	3.0971618962440976E-6	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999999403124614	WITHOUT_CLASSIFICATION	5.96875386110409E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999975863423656	WITHOUT_CLASSIFICATION	2.413657634515779E-6	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999764988190871	WITHOUT_CLASSIFICATION	2.3501180912874095E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999706536603872	WITHOUT_CLASSIFICATION	2.9346339612888775E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999913858698737	WITHOUT_CLASSIFICATION	8.614130126286671E-6	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999928552894651	WITHOUT_CLASSIFICATION	7.144710534846981E-6	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998804437437	WITHOUT_CLASSIFICATION	1.1955625635118589E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999991673776575	WITHOUT_CLASSIFICATION	8.32622342491734E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999926659693733	WITHOUT_CLASSIFICATION	7.334030626797265E-6	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9997706674180182	WITHOUT_CLASSIFICATION	2.2933258198165724E-4	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999789360310349	WITHOUT_CLASSIFICATION	2.1063968964988607E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997901942173	WITHOUT_CLASSIFICATION	2.098057827486154E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999473140649646	WITHOUT_CLASSIFICATION	5.268593503532935E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999999714252107	WITHOUT_CLASSIFICATION	2.8574789304917784E-7	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999807402678937	WITHOUT_CLASSIFICATION	1.9259732106259062E-5	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9999993818606344	WITHOUT_CLASSIFICATION	6.181393656181112E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999406322011899	WITHOUT_CLASSIFICATION	5.9367798810203215E-5	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998972921134487	WITHOUT_CLASSIFICATION	1.0270788655130263E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999995624111662	WITHOUT_CLASSIFICATION	4.375888338721578E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999976080700207	WITHOUT_CLASSIFICATION	2.391929979268467E-6	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999977616181434	WITHOUT_CLASSIFICATION	2.238381856742171E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999901250760146	WITHOUT_CLASSIFICATION	9.874923985404408E-6	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999993970553467	WITHOUT_CLASSIFICATION	6.029446533153675E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9988530032643115	WITHOUT_CLASSIFICATION	0.0011469967356885441	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999715140414	WITHOUT_CLASSIFICATION	2.848595863067484E-8	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999815594393677	WITHOUT_CLASSIFICATION	1.8440560632364513E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999959909491285	WITHOUT_CLASSIFICATION	4.009050871553926E-6	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999986942267504	WITHOUT_CLASSIFICATION	1.3057732496672634E-6	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.99999889316785	WITHOUT_CLASSIFICATION	1.1068321500721779E-6	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999997950119196	WITHOUT_CLASSIFICATION	2.0498808032778336E-7	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999666478728223	WITHOUT_CLASSIFICATION	3.335212717763336E-5	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.7163904719755333	WITHOUT_CLASSIFICATION	0.2836095280244667	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997961345552574	WITHOUT_CLASSIFICATION	2.038654447425276E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999943576730015	WITHOUT_CLASSIFICATION	5.64232699845617E-6	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999916044232	WITHOUT_CLASSIFICATION	8.395576782603975E-9	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999000492647031	WITHOUT_CLASSIFICATION	9.995073529690244E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999985903545559	WITHOUT_CLASSIFICATION	1.4096454441034035E-5	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998009853616	WITHOUT_CLASSIFICATION	1.9901463843027293E-7	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999883140056475	WITHOUT_CLASSIFICATION	1.1685994352589567E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999929233276931	WITHOUT_CLASSIFICATION	7.076672306922321E-6	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999445998689266	WITHOUT_CLASSIFICATION	5.5400131073362916E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999992896370273	WITHOUT_CLASSIFICATION	7.1036297270596675E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999872818348	WITHOUT_CLASSIFICATION	1.2718165160814936E-8	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999999451940823	WITHOUT_CLASSIFICATION	5.480591766227062E-8	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999823797071	WITHOUT_CLASSIFICATION	1.76202929085131E-7	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9988845534744368	WITHOUT_CLASSIFICATION	0.0011154465255631047	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9887536958324237	WITHOUT_CLASSIFICATION	0.011246304167576372	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999958278045344	WITHOUT_CLASSIFICATION	4.172195465622592E-6	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999816966489893	WITHOUT_CLASSIFICATION	1.8303351010665718E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999950228433244	WITHOUT_CLASSIFICATION	4.977156675595949E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999959111039102	WITHOUT_CLASSIFICATION	4.088896089917404E-6	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998515201512733	WITHOUT_CLASSIFICATION	1.484798487266441E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999972902187001	WITHOUT_CLASSIFICATION	2.709781299928423E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999982942351539	WITHOUT_CLASSIFICATION	1.7057648461751736E-6	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9986833105975803	WITHOUT_CLASSIFICATION	0.0013166894024197414	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9988643545238577	WITHOUT_CLASSIFICATION	0.0011356454761423144	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999921390222858	WITHOUT_CLASSIFICATION	7.860977714163099E-6	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999974968612176	WITHOUT_CLASSIFICATION	2.503138782380786E-6	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9998518411030086	WITHOUT_CLASSIFICATION	1.4815889699134086E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999839633729627	WITHOUT_CLASSIFICATION	1.6036627037368545E-5	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999593902503441	WITHOUT_CLASSIFICATION	4.060974965590565E-5	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999795486337016	WITHOUT_CLASSIFICATION	2.045136629843419E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999995824013193	WITHOUT_CLASSIFICATION	4.175986808542198E-7	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.99999167661162	WITHOUT_CLASSIFICATION	8.323388379972056E-6	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997907039369	WITHOUT_CLASSIFICATION	2.092960631198398E-7	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999963023995861	WITHOUT_CLASSIFICATION	3.6976004139086128E-6	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999990670733497	WITHOUT_CLASSIFICATION	9.329266501718238E-7	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999891192421	WITHOUT_CLASSIFICATION	1.0880757865156567E-8	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999969211239517	WITHOUT_CLASSIFICATION	3.0788760482870067E-6	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999984781	WITHOUT_CLASSIFICATION	1.5218422399784245E-12	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999935690007485	WITHOUT_CLASSIFICATION	6.430999251446914E-6	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998148139183299	WITHOUT_CLASSIFICATION	1.8518608166996175E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999822521956439	WITHOUT_CLASSIFICATION	1.774780435605269E-5	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999769373728645	WITHOUT_CLASSIFICATION	2.3062627135444057E-5	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9998987837274881	WITHOUT_CLASSIFICATION	1.0121627251198321E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999967337788909	WITHOUT_CLASSIFICATION	3.26622110905003E-6	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9994301387732694	WITHOUT_CLASSIFICATION	5.698612267305916E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999744246726553	WITHOUT_CLASSIFICATION	2.5575327344617566E-5	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999407231717294	WITHOUT_CLASSIFICATION	5.927682827054867E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999997220595236	WITHOUT_CLASSIFICATION	2.779404764147488E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999511358175	WITHOUT_CLASSIFICATION	4.8864182626082E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999535036580051	WITHOUT_CLASSIFICATION	4.649634199490185E-5	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999956543121236	WITHOUT_CLASSIFICATION	4.345687876453366E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999995263013703	WITHOUT_CLASSIFICATION	4.7369862957140193E-7	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999535036580051	WITHOUT_CLASSIFICATION	4.649634199490185E-5	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999999988221053	WITHOUT_CLASSIFICATION	1.1778947112353782E-8	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999054100823	WITHOUT_CLASSIFICATION	9.458991761216292E-8	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998353230913726	WITHOUT_CLASSIFICATION	1.6467690862748322E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9936112900718013	WITHOUT_CLASSIFICATION	0.00638870992819873	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999992248540005	WITHOUT_CLASSIFICATION	7.751459995299636E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999132407248	WITHOUT_CLASSIFICATION	8.675927513390117E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999140656601866	WITHOUT_CLASSIFICATION	8.593433981348442E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999993186830536	WITHOUT_CLASSIFICATION	6.813169463803598E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9922654645116087	WITHOUT_CLASSIFICATION	0.00773453548839121	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999590024282877	WITHOUT_CLASSIFICATION	4.099757171234521E-5	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999990714975	WITHOUT_CLASSIFICATION	9.285024509347182E-10	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999979862020572	WITHOUT_CLASSIFICATION	2.0137979427514834E-6	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999551877250094	WITHOUT_CLASSIFICATION	4.4812274990657636E-5	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999668447785	WITHOUT_CLASSIFICATION	3.315522148061958E-8	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999977135545644	WITHOUT_CLASSIFICATION	2.2864454355910476E-5	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9997678459777399	WITHOUT_CLASSIFICATION	2.321540222601033E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9942322643688404	WITHOUT_CLASSIFICATION	0.005767735631159631	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9942322643688404	WITHOUT_CLASSIFICATION	0.005767735631159631	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999829260559789	WITHOUT_CLASSIFICATION	1.7073944021153692E-5	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9999925210349638	WITHOUT_CLASSIFICATION	7.478965036072416E-6	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999997599263192	WITHOUT_CLASSIFICATION	2.400736807937836E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997724896556847	WITHOUT_CLASSIFICATION	2.275103443154666E-4	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999989092137911	WITHOUT_CLASSIFICATION	1.0907862089379634E-6	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999957260219879	WITHOUT_CLASSIFICATION	4.273978012045777E-6	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999993080188134	WITHOUT_CLASSIFICATION	6.919811866350162E-7	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999976708388	WITHOUT_CLASSIFICATION	2.3291611823963035E-9	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999998544329619	WITHOUT_CLASSIFICATION	1.455670380192061E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999616739578154	WITHOUT_CLASSIFICATION	3.832604218457259E-5	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999949686106292	WITHOUT_CLASSIFICATION	5.031389370762785E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998920854994	WITHOUT_CLASSIFICATION	1.079145005770315E-7	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999971140968263	WITHOUT_CLASSIFICATION	2.8859031735924425E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999999256039138	WITHOUT_CLASSIFICATION	7.439608619533729E-7	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999906247236	WITHOUT_CLASSIFICATION	9.37527640615031E-9	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999894534254127	WITHOUT_CLASSIFICATION	1.0546574587310916E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997926076805606	WITHOUT_CLASSIFICATION	2.0739231943947916E-4	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999992492100335	WITHOUT_CLASSIFICATION	7.507899664861525E-7	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9996853909618836	WITHOUT_CLASSIFICATION	3.146090381163841E-4	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999715296191659	WITHOUT_CLASSIFICATION	2.8470380834074644E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999324225147	WITHOUT_CLASSIFICATION	6.757748523531593E-8	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999847975340063	WITHOUT_CLASSIFICATION	1.5202465993650798E-5	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999992691655	WITHOUT_CLASSIFICATION	7.308343826190626E-10	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998194688071	WITHOUT_CLASSIFICATION	1.8053119300820444E-7	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999916757059728	WITHOUT_CLASSIFICATION	8.324294027314986E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999871303122219	WITHOUT_CLASSIFICATION	1.2869687778262596E-5	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999999999833554	WITHOUT_CLASSIFICATION	1.664460199835891E-10	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999890028877759	WITHOUT_CLASSIFICATION	1.0997112224023456E-5	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999938301753282	WITHOUT_CLASSIFICATION	6.169824671790247E-6	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999990627119849	WITHOUT_CLASSIFICATION	9.372880150561447E-7	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999606574600163	WITHOUT_CLASSIFICATION	3.934253998369854E-5	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999996210317357	WITHOUT_CLASSIFICATION	3.789682644328017E-7	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999973600005374	WITHOUT_CLASSIFICATION	2.6399994625661696E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999949807266061	WITHOUT_CLASSIFICATION	5.0192733939848426E-6	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999997282808942	WITHOUT_CLASSIFICATION	2.717191057459444E-7	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999756499806034	WITHOUT_CLASSIFICATION	2.4350019396542578E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9996258909718542	WITHOUT_CLASSIFICATION	3.7410902814572107E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999982357766174	WITHOUT_CLASSIFICATION	1.7642233826338088E-6	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999989409435234	WITHOUT_CLASSIFICATION	1.0590564766369555E-6	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999992411459298	WITHOUT_CLASSIFICATION	7.588540702082015E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.999997977555815	WITHOUT_CLASSIFICATION	2.022444184977236E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999995149356689	WITHOUT_CLASSIFICATION	4.850643312028953E-7	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999764059287419	WITHOUT_CLASSIFICATION	2.359407125796971E-5	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999990721637341	WITHOUT_CLASSIFICATION	9.278362658802738E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999329847757	WITHOUT_CLASSIFICATION	6.701522428462581E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999914440526906	WITHOUT_CLASSIFICATION	8.555947309446168E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944708425486	WITHOUT_CLASSIFICATION	5.529157451561098E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971695541217	WITHOUT_CLASSIFICATION	2.8304458782444412E-6	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844728046775	WITHOUT_CLASSIFICATION	1.5527195322502207E-5	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999982420626394	WITHOUT_CLASSIFICATION	1.7579373605004022E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999990502438272	WITHOUT_CLASSIFICATION	9.497561727701393E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996225232534	WITHOUT_CLASSIFICATION	3.7747674661363976E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999995332281736	WITHOUT_CLASSIFICATION	4.667718264043913E-7	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999987456133894	WITHOUT_CLASSIFICATION	1.2543866105651645E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931368021937	WITHOUT_CLASSIFICATION	6.863197806327771E-6	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999987456133894	WITHOUT_CLASSIFICATION	1.2543866105651645E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999079493815121	WITHOUT_CLASSIFICATION	9.205061848788913E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999993143635263	WITHOUT_CLASSIFICATION	6.856364738194049E-7	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999839269746112	WITHOUT_CLASSIFICATION	1.6073025388703293E-5	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999990992664275	WITHOUT_CLASSIFICATION	9.007335725437914E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999999332488034	WITHOUT_CLASSIFICATION	6.675119661079567E-7	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999682175411	WITHOUT_CLASSIFICATION	3.178245886135058E-8	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999984481546902	WITHOUT_CLASSIFICATION	1.5518453098145489E-6	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999998515041102	WITHOUT_CLASSIFICATION	1.4849588978388982E-7	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999244767777	WITHOUT_CLASSIFICATION	7.552322241500431E-8	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9895208422274975	WITHOUT_CLASSIFICATION	0.010479157772502478	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999995185894197	WITHOUT_CLASSIFICATION	4.81410580336784E-7	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999985405537335	WITHOUT_CLASSIFICATION	1.4594462665042055E-6	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999975570593349	WITHOUT_CLASSIFICATION	2.442940665082556E-6	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999939915708776	WITHOUT_CLASSIFICATION	6.008429122331596E-6	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.7947652024934694	WITHOUT_CLASSIFICATION	0.20523479750653073	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999296117861	WITHOUT_CLASSIFICATION	7.03882139646474E-8	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999978687096465	WITHOUT_CLASSIFICATION	2.1312903534993474E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999978687096465	WITHOUT_CLASSIFICATION	2.1312903534993474E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999991715216734	WITHOUT_CLASSIFICATION	8.284783265921163E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999996528737237	WITHOUT_CLASSIFICATION	3.471262762626607E-7	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999862340408	WITHOUT_CLASSIFICATION	1.376595912100541E-8	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999988022523251	WITHOUT_CLASSIFICATION	1.1977476749461522E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999983913125	WITHOUT_CLASSIFICATION	1.6086875589969877E-9	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999989357369573	WITHOUT_CLASSIFICATION	1.0642630426453507E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.8142388467475048	WITHOUT_CLASSIFICATION	0.1857611532524952	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999999511246198	WITHOUT_CLASSIFICATION	4.887538019326431E-7	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999087897917	WITHOUT_CLASSIFICATION	9.121020830957992E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999993846886759	WITHOUT_CLASSIFICATION	6.153113241656122E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999859376701	WITHOUT_CLASSIFICATION	1.4062329833339809E-8	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999996923036287	WITHOUT_CLASSIFICATION	3.076963713004404E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999954712094663	WITHOUT_CLASSIFICATION	4.528790533704983E-5	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999989414551443	WITHOUT_CLASSIFICATION	1.0585448556694003E-6	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999233176944977	WITHOUT_CLASSIFICATION	7.668230550224364E-5	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999999999531693	WITHOUT_CLASSIFICATION	4.683069044187158E-10	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999984958591985	WITHOUT_CLASSIFICATION	1.5041408015563738E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999126620770549	WITHOUT_CLASSIFICATION	8.73379229451444E-5	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9998917811789787	WITHOUT_CLASSIFICATION	1.0821882102135104E-4	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999985065096131	WITHOUT_CLASSIFICATION	1.4934903869010578E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999997110088794	WITHOUT_CLASSIFICATION	2.889911206953119E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999210371175241	WITHOUT_CLASSIFICATION	7.896288247588625E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999770992095175	WITHOUT_CLASSIFICATION	2.2900790482595865E-5	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999884211961046	WITHOUT_CLASSIFICATION	1.1578803895316571E-5	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9968343964576986	WITHOUT_CLASSIFICATION	0.003165603542301501	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999140450945	WITHOUT_CLASSIFICATION	8.59549054500364E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999996974608168	WITHOUT_CLASSIFICATION	3.025391832197694E-7	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9977804948914271	WITHOUT_CLASSIFICATION	0.0022195051085729194	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999982982166603	WITHOUT_CLASSIFICATION	1.7017833396637648E-6	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999593181258	WITHOUT_CLASSIFICATION	4.068187431580709E-8	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999999942656979	WITHOUT_CLASSIFICATION	5.734302105175681E-8	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.99996442068427	WITHOUT_CLASSIFICATION	3.557931572988162E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999964533842256	WITHOUT_CLASSIFICATION	3.546615774408058E-5	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999633384081875	WITHOUT_CLASSIFICATION	3.666159181252679E-5	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998036514907777	WITHOUT_CLASSIFICATION	1.963485092224256E-4	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999954387508959	WITHOUT_CLASSIFICATION	4.561249104100372E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999955150083769	WITHOUT_CLASSIFICATION	4.484991623081968E-6	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999565804750478	WITHOUT_CLASSIFICATION	4.341952495221853E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999655982308	WITHOUT_CLASSIFICATION	3.44017692359327E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999987393897126	WITHOUT_CLASSIFICATION	1.2606102873459246E-6	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999963777083	WITHOUT_CLASSIFICATION	3.6222917126021897E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997385492303	WITHOUT_CLASSIFICATION	2.614507697399689E-7	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999953446002519	WITHOUT_CLASSIFICATION	4.655399748131111E-6	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9639216496269315	WITHOUT_CLASSIFICATION	0.03607835037306852	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9997555170510337	WITHOUT_CLASSIFICATION	2.444829489663374E-4	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9873760213919405	WITHOUT_CLASSIFICATION	0.012623978608059418	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.5402936654867131	IMPLEMENTATION	0.4597063345132871	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999998748402	WITHOUT_CLASSIFICATION	1.251598068318798E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999871878666502	WITHOUT_CLASSIFICATION	1.2812133349692962E-5	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999647696775884	WITHOUT_CLASSIFICATION	3.5230322411532855E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999688022928	WITHOUT_CLASSIFICATION	3.119770719123028E-7	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998900320897	WITHOUT_CLASSIFICATION	1.0996791037130716E-7	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999585661324	WITHOUT_CLASSIFICATION	4.143386759282779E-7	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998984277456593	WITHOUT_CLASSIFICATION	1.0157225434066818E-4	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999788858376412	WITHOUT_CLASSIFICATION	2.1114162358796114E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999392947713	WITHOUT_CLASSIFICATION	6.070522878537459E-8	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999999392947713	WITHOUT_CLASSIFICATION	6.070522878537459E-8	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999997824112808	WITHOUT_CLASSIFICATION	2.1758871921497708E-7	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999712209418423	WITHOUT_CLASSIFICATION	2.8779058157713163E-5	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999997534900386	WITHOUT_CLASSIFICATION	2.4650996134820965E-7	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999999486030501	WITHOUT_CLASSIFICATION	5.139694988636776E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999971189838064	WITHOUT_CLASSIFICATION	2.8810161936153434E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9969856922026666	WITHOUT_CLASSIFICATION	0.00301430779733332	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999872766514704	WITHOUT_CLASSIFICATION	1.2723348529619217E-5	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999983535389282	WITHOUT_CLASSIFICATION	1.646461071893823E-6	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999351764498	WITHOUT_CLASSIFICATION	6.482355021026547E-8	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998938998612821	WITHOUT_CLASSIFICATION	1.0610013871781008E-4	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999280241558015	WITHOUT_CLASSIFICATION	7.197584419855174E-5	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999530553858408	WITHOUT_CLASSIFICATION	4.694461415914701E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999959929763242	WITHOUT_CLASSIFICATION	4.0070236758221255E-6	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999866788365	WITHOUT_CLASSIFICATION	1.332116346314583E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999995455411352	WITHOUT_CLASSIFICATION	4.544588647692684E-7	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999991987219189	WITHOUT_CLASSIFICATION	8.012780811846988E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999984221983957	WITHOUT_CLASSIFICATION	1.5778016042511396E-6	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.999967087157098	WITHOUT_CLASSIFICATION	3.2912842902064545E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999420154387	WITHOUT_CLASSIFICATION	5.79845612027862E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998326643547168	WITHOUT_CLASSIFICATION	1.67335645283107E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999992924401	WITHOUT_CLASSIFICATION	7.075598047601017E-10	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999982280473979	WITHOUT_CLASSIFICATION	1.7719526020710933E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999243519265242	WITHOUT_CLASSIFICATION	7.564807347574505E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9984802749778445	WITHOUT_CLASSIFICATION	0.0015197250221554712	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999959201350964	WITHOUT_CLASSIFICATION	4.079864903531041E-6	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996281644231377	WITHOUT_CLASSIFICATION	3.7183557686230813E-4	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.997026313603412	WITHOUT_CLASSIFICATION	0.0029736863965879766	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999816677276841	WITHOUT_CLASSIFICATION	1.8332272315894378E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999885677724516	WITHOUT_CLASSIFICATION	1.1432227548482428E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999243519265242	WITHOUT_CLASSIFICATION	7.564807347574505E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999998823105678	WITHOUT_CLASSIFICATION	1.1768943221620924E-7	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999978556675	WITHOUT_CLASSIFICATION	2.1443324397680353E-9	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999870591830743	WITHOUT_CLASSIFICATION	1.294081692569105E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999945677905709	WITHOUT_CLASSIFICATION	5.432209429048025E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999979539435538	WITHOUT_CLASSIFICATION	2.0460564462846145E-6	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999509699383928	WITHOUT_CLASSIFICATION	4.903006160719857E-5	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999930640800054	WITHOUT_CLASSIFICATION	6.935919994639967E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996776954881	WITHOUT_CLASSIFICATION	3.223045119023952E-7	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9970851262545278	WITHOUT_CLASSIFICATION	0.0029148737454721954	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999945677905709	WITHOUT_CLASSIFICATION	5.432209429048025E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999999993118611	WITHOUT_CLASSIFICATION	6.881388943885941E-9	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999996421453604	WITHOUT_CLASSIFICATION	3.5785463957325245E-7	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999001978681478	WITHOUT_CLASSIFICATION	9.980213185213188E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999096264257503	WITHOUT_CLASSIFICATION	9.037357424970944E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9997849566227113	WITHOUT_CLASSIFICATION	2.1504337728870716E-4	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999859376701	WITHOUT_CLASSIFICATION	1.4062329833339809E-8	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999993760738278	WITHOUT_CLASSIFICATION	6.239261721739199E-7	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999966891489034	WITHOUT_CLASSIFICATION	3.310851096587199E-6	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999969154914633	WITHOUT_CLASSIFICATION	3.0845085366424155E-6	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9977852695831521	WITHOUT_CLASSIFICATION	0.0022147304168479483	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999980948313	WITHOUT_CLASSIFICATION	1.9051687042312203E-9	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999974572443177	WITHOUT_CLASSIFICATION	2.5427556824449676E-6	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999956297496575	WITHOUT_CLASSIFICATION	4.3702503424274255E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999627984163	WITHOUT_CLASSIFICATION	3.720158357795794E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999996188696009	WITHOUT_CLASSIFICATION	3.8113039910216995E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999588878821747	WITHOUT_CLASSIFICATION	4.1112117825422184E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999105842394722	WITHOUT_CLASSIFICATION	8.94157605277814E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999702371903	WITHOUT_CLASSIFICATION	2.9762809609812237E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999998987957631	WITHOUT_CLASSIFICATION	1.0120423690923023E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999606158721154	WITHOUT_CLASSIFICATION	3.938412788467959E-5	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999924309645442	WITHOUT_CLASSIFICATION	7.569035455810452E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999999112966722	WITHOUT_CLASSIFICATION	8.870332782148276E-8	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.99979879973467	WITHOUT_CLASSIFICATION	2.012002653298757E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999982557162518	WITHOUT_CLASSIFICATION	1.7442837482494674E-6	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999960914669616	WITHOUT_CLASSIFICATION	3.908533038426321E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999979178220578	WITHOUT_CLASSIFICATION	2.0821779422238322E-6	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999968928537177	WITHOUT_CLASSIFICATION	3.1071462823493467E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9998145706786571	WITHOUT_CLASSIFICATION	1.854293213428989E-4	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999534601255	WITHOUT_CLASSIFICATION	4.653987451679817E-8	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999997002652	WITHOUT_CLASSIFICATION	2.9973474795836897E-10	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999673979552398	WITHOUT_CLASSIFICATION	3.260204476019362E-5	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9998344854560899	WITHOUT_CLASSIFICATION	1.6551454391019113E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999989622847003	WITHOUT_CLASSIFICATION	1.0377152996803665E-6	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977557333685	WITHOUT_CLASSIFICATION	2.2442666315827053E-6	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978934726922	WITHOUT_CLASSIFICATION	2.1065273077901214E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999160084377089	WITHOUT_CLASSIFICATION	8.399156229100837E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998857380778025	WITHOUT_CLASSIFICATION	1.1426192219751548E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999601771453178	WITHOUT_CLASSIFICATION	3.9822854682180903E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983269860453	WITHOUT_CLASSIFICATION	1.67301395464815E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983269860453	WITHOUT_CLASSIFICATION	1.67301395464815E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998167221432	WITHOUT_CLASSIFICATION	1.832778567918947E-7	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9981801234938816	WITHOUT_CLASSIFICATION	0.0018198765061184655	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999991211722125	WITHOUT_CLASSIFICATION	8.788277875025395E-6	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999800368219551	WITHOUT_CLASSIFICATION	1.9963178044926853E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999840840949665	WITHOUT_CLASSIFICATION	1.5915905033428763E-5	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999967341333543	WITHOUT_CLASSIFICATION	3.265866645700736E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999981945372302	WITHOUT_CLASSIFICATION	1.805462769827217E-6	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999976022192945	WITHOUT_CLASSIFICATION	2.397780705502652E-6	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998230738021	WITHOUT_CLASSIFICATION	1.7692619791095993E-7	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999891257388497	WITHOUT_CLASSIFICATION	1.08742611503541E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999987517813903	WITHOUT_CLASSIFICATION	1.2482186095891953E-6	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999994877263491	WITHOUT_CLASSIFICATION	5.122736508625932E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.99999709862771	WITHOUT_CLASSIFICATION	2.901372289972689E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983269860453	WITHOUT_CLASSIFICATION	1.67301395464815E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999996716245957	WITHOUT_CLASSIFICATION	3.2837540439913536E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999648057923494	WITHOUT_CLASSIFICATION	3.5194207650612324E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9938250897715544	WITHOUT_CLASSIFICATION	0.006174910228445604	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999977888503381	WITHOUT_CLASSIFICATION	2.2111496619191573E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999853148139413	WITHOUT_CLASSIFICATION	1.4685186058689766E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999996146019294	WITHOUT_CLASSIFICATION	3.8539807058741034E-7	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996206081009652	WITHOUT_CLASSIFICATION	3.7939189903479553E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999725416049488	WITHOUT_CLASSIFICATION	2.7458395051317336E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999910484748	WITHOUT_CLASSIFICATION	8.951525209444157E-8	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9996684878012153	WITHOUT_CLASSIFICATION	3.3151219878466354E-4	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999051522815018	WITHOUT_CLASSIFICATION	9.484771849819607E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977557333685	WITHOUT_CLASSIFICATION	2.2442666315827053E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983269860453	WITHOUT_CLASSIFICATION	1.67301395464815E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999970299234263	WITHOUT_CLASSIFICATION	2.970076573696526E-6	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999567877051	WITHOUT_CLASSIFICATION	4.321229486208394E-8	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999998551936579	WITHOUT_CLASSIFICATION	1.4480634209215962E-7	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999979619411251	WITHOUT_CLASSIFICATION	2.0380588749899538E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999970284980193	WITHOUT_CLASSIFICATION	2.971501980767763E-6	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999990049811704	WITHOUT_CLASSIFICATION	9.95018829565103E-7	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976829008196	WITHOUT_CLASSIFICATION	2.3170991804699053E-6	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999997805077	WITHOUT_CLASSIFICATION	2.1949227725422042E-10	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999985885557	WITHOUT_CLASSIFICATION	1.4114443026822022E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999998449576851	WITHOUT_CLASSIFICATION	1.550423148267039E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999994926418835	WITHOUT_CLASSIFICATION	5.073581165565429E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999595767574991	WITHOUT_CLASSIFICATION	4.04232425008264E-5	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999994510690016	WITHOUT_CLASSIFICATION	5.489309985021987E-7	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999994100477113	WITHOUT_CLASSIFICATION	5.899522886719995E-7	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999079493815121	WITHOUT_CLASSIFICATION	9.205061848788913E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999806318698	WITHOUT_CLASSIFICATION	1.9368130154682894E-8	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999998814781751	WITHOUT_CLASSIFICATION	1.185218249240804E-7	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999450218701	WITHOUT_CLASSIFICATION	5.497812992350006E-8	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999964657554778	WITHOUT_CLASSIFICATION	3.534244522195376E-6	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999892918117	WITHOUT_CLASSIFICATION	1.0708188387889619E-8	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998672926832239	WITHOUT_CLASSIFICATION	1.3270731677613224E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998672926832239	WITHOUT_CLASSIFICATION	1.3270731677613224E-4	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999716974298302	WITHOUT_CLASSIFICATION	2.8302570169876964E-5	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999942736	WITHOUT_CLASSIFICATION	5.7264000865373655E-9	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.99840031435163	WITHOUT_CLASSIFICATION	0.0015996856483699476	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9995836358566677	WITHOUT_CLASSIFICATION	4.1636414333232286E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999995974530624	WITHOUT_CLASSIFICATION	4.025469376002776E-6	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999981545792683	WITHOUT_CLASSIFICATION	1.8454207317190313E-6	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999981882174872	WITHOUT_CLASSIFICATION	1.8117825127824652E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997822728371	WITHOUT_CLASSIFICATION	2.1772716292696036E-7	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997822728371	WITHOUT_CLASSIFICATION	2.1772716292696036E-7	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999881231512853	WITHOUT_CLASSIFICATION	1.187684871480467E-5	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999997871505147	WITHOUT_CLASSIFICATION	2.1284948529735487E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999995592313743	WITHOUT_CLASSIFICATION	4.40768625731879E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996834175663	WITHOUT_CLASSIFICATION	3.1658243374143497E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996834175663	WITHOUT_CLASSIFICATION	3.1658243374143497E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999996834175663	WITHOUT_CLASSIFICATION	3.1658243374143497E-7	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999968387902771	WITHOUT_CLASSIFICATION	3.1612097227681604E-6	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999934432379	WITHOUT_CLASSIFICATION	6.556762153729789E-9	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.6672509922737949	WITHOUT_CLASSIFICATION	0.332749007726205	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998846629637934	WITHOUT_CLASSIFICATION	1.1533703620667412E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999998357633225	WITHOUT_CLASSIFICATION	1.6423667752380463E-7	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983269860453	WITHOUT_CLASSIFICATION	1.67301395464815E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983269860453	WITHOUT_CLASSIFICATION	1.67301395464815E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999845972559288	WITHOUT_CLASSIFICATION	1.5402744071114228E-5	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9992060399967692	WITHOUT_CLASSIFICATION	7.939600032308372E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999439342387172	WITHOUT_CLASSIFICATION	5.606576128294229E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999991754050488	WITHOUT_CLASSIFICATION	8.245949511184288E-7	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999873968217269	WITHOUT_CLASSIFICATION	1.2603178273057179E-5	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999960731607331	WITHOUT_CLASSIFICATION	3.926839266844068E-6	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999907283259064	WITHOUT_CLASSIFICATION	9.27167409358669E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999994391525895	WITHOUT_CLASSIFICATION	5.608474105129724E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999537379807	WITHOUT_CLASSIFICATION	4.626201939728609E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998469328087	WITHOUT_CLASSIFICATION	1.530671912656702E-7	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999976976022463	WITHOUT_CLASSIFICATION	2.3023977537176194E-6	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999998584611083	WITHOUT_CLASSIFICATION	1.4153889178759782E-7	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999998584611083	WITHOUT_CLASSIFICATION	1.4153889178759782E-7	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999998706753525	WITHOUT_CLASSIFICATION	1.2932464762962788E-7	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999998706753525	WITHOUT_CLASSIFICATION	1.2932464762962788E-7	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999998719042612	WITHOUT_CLASSIFICATION	1.2809573881125225E-7	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999993134694962	WITHOUT_CLASSIFICATION	6.865305037502249E-7	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999993134694962	WITHOUT_CLASSIFICATION	6.865305037502249E-7	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999993311531427	WITHOUT_CLASSIFICATION	6.688468573695121E-7	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999995943373398	WITHOUT_CLASSIFICATION	4.056626603415762E-7	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999582530746912	WITHOUT_CLASSIFICATION	4.174692530882803E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998672926832239	WITHOUT_CLASSIFICATION	1.3270731677613224E-4	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999521680265848	WITHOUT_CLASSIFICATION	4.783197341507195E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999995943373398	WITHOUT_CLASSIFICATION	4.056626603415762E-7	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9996735873769458	WITHOUT_CLASSIFICATION	3.264126230542513E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999813272803414	WITHOUT_CLASSIFICATION	1.8672719658617265E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999997248930279	WITHOUT_CLASSIFICATION	2.7510697208868415E-7	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999996392152793	WITHOUT_CLASSIFICATION	3.607847207130771E-7	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999991660727162	WITHOUT_CLASSIFICATION	8.339272838385765E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999970294796211	WITHOUT_CLASSIFICATION	2.9705203789028937E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999988772656975	WITHOUT_CLASSIFICATION	1.1227343025288541E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999981274915093	WITHOUT_CLASSIFICATION	1.8725084907010602E-5	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999969011202978	WITHOUT_CLASSIFICATION	3.0988797020670926E-6	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999626573695	WITHOUT_CLASSIFICATION	3.7342630626960023E-8	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999968991585	WITHOUT_CLASSIFICATION	3.1008415659225414E-9	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999986620317691	WITHOUT_CLASSIFICATION	1.3379682308545026E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999990749287431	WITHOUT_CLASSIFICATION	9.250712568892845E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999988954796807	WITHOUT_CLASSIFICATION	1.1045203193124045E-6	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9997188674923263	WITHOUT_CLASSIFICATION	2.8113250767367466E-4	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9998846187662008	WITHOUT_CLASSIFICATION	1.1538123379908705E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999821782709	WITHOUT_CLASSIFICATION	1.7821729094087595E-8	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999996501282353	WITHOUT_CLASSIFICATION	3.498717646601548E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999996501282353	WITHOUT_CLASSIFICATION	3.498717646601548E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999996566622364	WITHOUT_CLASSIFICATION	3.433377635612259E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999999887639644	WITHOUT_CLASSIFICATION	1.1236035602544719E-7	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999996364835068	WITHOUT_CLASSIFICATION	3.635164933052825E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997718167658567	WITHOUT_CLASSIFICATION	2.281832341431765E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999970325761147	WITHOUT_CLASSIFICATION	2.967423885207827E-6	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999770300141637	WITHOUT_CLASSIFICATION	2.2969985836301403E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999720752658183	WITHOUT_CLASSIFICATION	2.7924734181644305E-5	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999986364917066	WITHOUT_CLASSIFICATION	1.3635082932756966E-6	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999749226770704	WITHOUT_CLASSIFICATION	2.5077322929594937E-5	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999998987924504	WITHOUT_CLASSIFICATION	1.0120754956601739E-7	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999999353210888	WITHOUT_CLASSIFICATION	6.467891123415535E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999595767574991	WITHOUT_CLASSIFICATION	4.04232425008264E-5	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999988066364885	WITHOUT_CLASSIFICATION	1.1933635113996909E-6	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999619396132602	WITHOUT_CLASSIFICATION	3.806038673976953E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999790345276374	WITHOUT_CLASSIFICATION	2.0965472362685662E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999428869269166	WITHOUT_CLASSIFICATION	5.711307308354257E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995076231792	WITHOUT_CLASSIFICATION	4.923768208275059E-7	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995076231792	WITHOUT_CLASSIFICATION	4.923768208275059E-7	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999800575687512	WITHOUT_CLASSIFICATION	1.9942431248782984E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.99999137865584	WITHOUT_CLASSIFICATION	8.621344160003579E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999242772910429	WITHOUT_CLASSIFICATION	7.572270895710202E-4	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999520791533925	WITHOUT_CLASSIFICATION	4.792084660756962E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999988162109018	WITHOUT_CLASSIFICATION	1.1837890981688063E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999730443791954	WITHOUT_CLASSIFICATION	2.6955620804675006E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995655414399282	WITHOUT_CLASSIFICATION	4.3445856007190376E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999989757579962	WITHOUT_CLASSIFICATION	1.0242420038113477E-6	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9989524887049414	WITHOUT_CLASSIFICATION	0.0010475112950586766	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999950778979	WITHOUT_CLASSIFICATION	4.922102062346101E-9	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999646684071	WITHOUT_CLASSIFICATION	3.5331592798830126E-8	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999989757579962	WITHOUT_CLASSIFICATION	1.0242420038113477E-6	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.999997938603948	WITHOUT_CLASSIFICATION	2.061396051913539E-6	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999755536195697	WITHOUT_CLASSIFICATION	2.4446380430295796E-5	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999627389174	WITHOUT_CLASSIFICATION	3.726108260558631E-8	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999999470279196	WITHOUT_CLASSIFICATION	5.297208040983706E-8	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999994800242243	WITHOUT_CLASSIFICATION	5.199757756670842E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999997090503061	WITHOUT_CLASSIFICATION	2.9094969393362687E-7	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999613194571275	WITHOUT_CLASSIFICATION	3.8680542872384764E-5	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999969047950933	WITHOUT_CLASSIFICATION	3.0952049067144073E-6	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998225449198	WITHOUT_CLASSIFICATION	1.7745508020836073E-7	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995236928826019	WITHOUT_CLASSIFICATION	4.7630711739809356E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9978956468381273	WITHOUT_CLASSIFICATION	0.002104353161872776	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999995665667284	WITHOUT_CLASSIFICATION	4.334332716320281E-7	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999977318383443	WITHOUT_CLASSIFICATION	2.2681616557373444E-6	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999947998357035	WITHOUT_CLASSIFICATION	5.200164296419352E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998502562915199	WITHOUT_CLASSIFICATION	1.4974370848009973E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999917745511164	WITHOUT_CLASSIFICATION	8.225448883470698E-6	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999990411354772	WITHOUT_CLASSIFICATION	9.588645227715218E-7	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999708016864984	WITHOUT_CLASSIFICATION	2.9198313501515537E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999891119779802	WITHOUT_CLASSIFICATION	1.0888022019720887E-5	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999614414959326	WITHOUT_CLASSIFICATION	3.855850406750271E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998253691905	WITHOUT_CLASSIFICATION	1.7463080943820386E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999992490914267	WITHOUT_CLASSIFICATION	7.509085732089311E-7	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999989911585238	WITHOUT_CLASSIFICATION	1.0088414762752326E-6	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999995543799558	WITHOUT_CLASSIFICATION	4.4562004428718053E-7	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999997922478582	WITHOUT_CLASSIFICATION	2.0775214179150825E-7	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9999197058804329	WITHOUT_CLASSIFICATION	8.02941195671268E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999907299009743	WITHOUT_CLASSIFICATION	9.270099025697154E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9997820288729832	WITHOUT_CLASSIFICATION	2.1797112701682326E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999992316613009	WITHOUT_CLASSIFICATION	7.683386991397027E-7	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999662679274682	WITHOUT_CLASSIFICATION	3.37320725317578E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999878858036	WITHOUT_CLASSIFICATION	1.211419634423596E-8	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999960400994622	WITHOUT_CLASSIFICATION	3.959900537831957E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999916418803365	WITHOUT_CLASSIFICATION	8.358119663505498E-6	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999963275114	WITHOUT_CLASSIFICATION	3.6724885876398127E-9	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999984801963517	WITHOUT_CLASSIFICATION	1.5198036482268781E-6	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999986293831665	WITHOUT_CLASSIFICATION	1.3706168334882389E-5	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999475754267	WITHOUT_CLASSIFICATION	5.242457330197337E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999969449304	WITHOUT_CLASSIFICATION	3.055069578026318E-9	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999074534699	WITHOUT_CLASSIFICATION	9.254653007929356E-8	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999753479047881	WITHOUT_CLASSIFICATION	2.4652095211822378E-5	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999986953825482	WITHOUT_CLASSIFICATION	1.3046174518164748E-5	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999992117225156	WITHOUT_CLASSIFICATION	7.8827748446249E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999811831188803	WITHOUT_CLASSIFICATION	1.8816881119683168E-5	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999996858931778	WITHOUT_CLASSIFICATION	3.1410682218687575E-7	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999357146223	WITHOUT_CLASSIFICATION	6.428537772701444E-8	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999998487381992	WITHOUT_CLASSIFICATION	1.5126180076839098E-7	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998374755387	WITHOUT_CLASSIFICATION	1.6252446141041426E-7	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999999557232289	WITHOUT_CLASSIFICATION	4.427677110633465E-7	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999989463695973	WITHOUT_CLASSIFICATION	1.053630402741785E-6	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999891007537297	WITHOUT_CLASSIFICATION	1.0899246270282384E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999524650031606	WITHOUT_CLASSIFICATION	4.753499683937465E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999967027749909	WITHOUT_CLASSIFICATION	3.297225009246987E-6	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999934687495	WITHOUT_CLASSIFICATION	6.531250454508863E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999957951969	WITHOUT_CLASSIFICATION	4.204803169562284E-9	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999995684227219	WITHOUT_CLASSIFICATION	4.3157727817816955E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999718710774649	WITHOUT_CLASSIFICATION	2.8128922535053153E-5	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998604826456039	WITHOUT_CLASSIFICATION	1.3951735439610334E-4	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9997874221230677	WITHOUT_CLASSIFICATION	2.1257787693223848E-4	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999988758944505	WITHOUT_CLASSIFICATION	1.1241055495695895E-6	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999922359384	WITHOUT_CLASSIFICATION	7.764061663626649E-9	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999996969143262	WITHOUT_CLASSIFICATION	3.0308567375846006E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999947812475413	WITHOUT_CLASSIFICATION	5.2187524587138994E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999828742935533	WITHOUT_CLASSIFICATION	1.7125706446778866E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999996134868645	WITHOUT_CLASSIFICATION	3.8651313560181355E-7	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999611215188	WITHOUT_CLASSIFICATION	3.887848114965854E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999720523899862	WITHOUT_CLASSIFICATION	2.7947610013726925E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999524650031606	WITHOUT_CLASSIFICATION	4.753499683937465E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999954402324115	WITHOUT_CLASSIFICATION	4.5597675884870555E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999910767688244	WITHOUT_CLASSIFICATION	8.923231175626579E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999246403315	WITHOUT_CLASSIFICATION	7.535966857594132E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999998368600755	WITHOUT_CLASSIFICATION	1.6313992449661067E-6	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999360140797886	WITHOUT_CLASSIFICATION	6.398592021141039E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999993299457094	WITHOUT_CLASSIFICATION	6.700542905201325E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9989524887049414	WITHOUT_CLASSIFICATION	0.0010475112950586766	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999977672899425	WITHOUT_CLASSIFICATION	2.2327100574175993E-6	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999984801963517	WITHOUT_CLASSIFICATION	1.5198036482268781E-6	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999992645473864	WITHOUT_CLASSIFICATION	7.35452613597829E-6	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999995701284347	WITHOUT_CLASSIFICATION	4.2987156531315537E-7	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999800324465	WITHOUT_CLASSIFICATION	1.996755349535745E-8	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999100445164	WITHOUT_CLASSIFICATION	8.99554836150013E-8	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999781153877952	WITHOUT_CLASSIFICATION	2.1884612204772773E-5	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999862674913438	WITHOUT_CLASSIFICATION	1.3732508656190674E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995206129695	WITHOUT_CLASSIFICATION	4.793870304846129E-7	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999995887038857	WITHOUT_CLASSIFICATION	4.1129611429885373E-7	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999947031457979	WITHOUT_CLASSIFICATION	5.296854202086227E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999542944582	WITHOUT_CLASSIFICATION	4.57055417950946E-8	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999940533992028	WITHOUT_CLASSIFICATION	5.946600797269354E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999950685192294	WITHOUT_CLASSIFICATION	4.931480770627457E-6	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995545546826	WITHOUT_CLASSIFICATION	4.4544531731689786E-7	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995545546826	WITHOUT_CLASSIFICATION	4.4544531731689786E-7	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999995686040235	WITHOUT_CLASSIFICATION	4.313959765702459E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999944364998071	WITHOUT_CLASSIFICATION	5.563500192849149E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999992527058	WITHOUT_CLASSIFICATION	7.472942275649544E-10	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999998830284399	WITHOUT_CLASSIFICATION	1.1697156010785795E-7	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999899679648	WITHOUT_CLASSIFICATION	1.003203512339077E-8	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999958525037718	WITHOUT_CLASSIFICATION	4.14749622822304E-6	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999979153752	WITHOUT_CLASSIFICATION	2.084624811981518E-9	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999952210679659	WITHOUT_CLASSIFICATION	4.77893203408643E-6	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999995599210465	WITHOUT_CLASSIFICATION	4.4007895347575344E-7	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999998834063125	WITHOUT_CLASSIFICATION	1.1659368748593286E-7	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999474492341742	WITHOUT_CLASSIFICATION	5.255076582575312E-5	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999517299284988	WITHOUT_CLASSIFICATION	4.827007150120292E-5	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999912132721196	WITHOUT_CLASSIFICATION	8.786727880446446E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999050995831	WITHOUT_CLASSIFICATION	9.490041686425773E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999270272045994	WITHOUT_CLASSIFICATION	7.297279540060427E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998605002582	WITHOUT_CLASSIFICATION	1.3949974171548173E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999998376831902	WITHOUT_CLASSIFICATION	1.623168098006799E-6	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999605964167	WITHOUT_CLASSIFICATION	3.940358334242621E-8	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999997859297215	WITHOUT_CLASSIFICATION	2.1407027850616843E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999953383932126	WITHOUT_CLASSIFICATION	4.6616067873287425E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999997005258702	WITHOUT_CLASSIFICATION	2.9947412992157785E-7	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999964999876	WITHOUT_CLASSIFICATION	3.5000124970474613E-9	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999958713999393	WITHOUT_CLASSIFICATION	4.1286000608020745E-6	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9952269145147643	WITHOUT_CLASSIFICATION	0.004773085485235766	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9985321115824398	WITHOUT_CLASSIFICATION	0.0014678884175601135	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998854411854512	WITHOUT_CLASSIFICATION	1.1455881454887942E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999976836948891	WITHOUT_CLASSIFICATION	2.316305110876567E-6	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999799328069	WITHOUT_CLASSIFICATION	2.0067193215235643E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999992039938861	WITHOUT_CLASSIFICATION	7.960061139347548E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998160232021	WITHOUT_CLASSIFICATION	1.8397679784856924E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9980933719368019	WITHOUT_CLASSIFICATION	0.0019066280631982015	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999748115866106	WITHOUT_CLASSIFICATION	2.518841338931656E-5	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999994792034584	WITHOUT_CLASSIFICATION	5.207965415673264E-7	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9994776087827074	WITHOUT_CLASSIFICATION	5.223912172924947E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999860261252382	WITHOUT_CLASSIFICATION	1.39738747618384E-5	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999992803366453	WITHOUT_CLASSIFICATION	7.196633547449526E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999989858683821	WITHOUT_CLASSIFICATION	1.0141316179125035E-5	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999733515580856	WITHOUT_CLASSIFICATION	2.6648441914361234E-5	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999994896076385	WITHOUT_CLASSIFICATION	5.103923614687749E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992608594768	WITHOUT_CLASSIFICATION	7.391405231355466E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999915938944189	WITHOUT_CLASSIFICATION	8.40610558110925E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999983932042452	WITHOUT_CLASSIFICATION	1.6067957548031516E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999775280617571	WITHOUT_CLASSIFICATION	2.2471938242809277E-5	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999802846210161	WITHOUT_CLASSIFICATION	1.97153789839014E-5	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999980432374254	WITHOUT_CLASSIFICATION	1.956762574621362E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999402581098884	WITHOUT_CLASSIFICATION	5.974189011162621E-5	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9992451958345223	WITHOUT_CLASSIFICATION	7.54804165477612E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999991146256547	WITHOUT_CLASSIFICATION	8.853743452167006E-7	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999985580483309	WITHOUT_CLASSIFICATION	1.4419516690481081E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999445047101092	WITHOUT_CLASSIFICATION	5.5495289890719194E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999644817919	WITHOUT_CLASSIFICATION	3.551820809381977E-7	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9994209185802668	WITHOUT_CLASSIFICATION	5.790814197332104E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999380383603	WITHOUT_CLASSIFICATION	6.196163967503406E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999971660131481	WITHOUT_CLASSIFICATION	2.8339868519428795E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999962241294587	WITHOUT_CLASSIFICATION	3.775870541311221E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999935263664849	WITHOUT_CLASSIFICATION	6.473633515192635E-6	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999996807517775	WITHOUT_CLASSIFICATION	3.192482224610888E-7	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999092878413472	WITHOUT_CLASSIFICATION	9.071215865268227E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999993316747711	WITHOUT_CLASSIFICATION	6.683252288423687E-7	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999976914180617	WITHOUT_CLASSIFICATION	2.308581938157255E-6	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999975820235846	WITHOUT_CLASSIFICATION	2.417976415432622E-6	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999546818154	WITHOUT_CLASSIFICATION	4.5318184718219004E-8	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999448311054638	WITHOUT_CLASSIFICATION	5.51688945362986E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999466585087002	WITHOUT_CLASSIFICATION	5.3341491299864476E-5	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999999989529058	WITHOUT_CLASSIFICATION	1.0470941910984018E-8	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999982295376	WITHOUT_CLASSIFICATION	1.7704624977703033E-9	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995281644697	WITHOUT_CLASSIFICATION	4.7183553031994944E-7	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999820328539496	WITHOUT_CLASSIFICATION	1.796714605036223E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999936905390638	WITHOUT_CLASSIFICATION	6.3094609361206345E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999963682181106	WITHOUT_CLASSIFICATION	3.6317818895320074E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999936905390638	WITHOUT_CLASSIFICATION	6.3094609361206345E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999785046589803	WITHOUT_CLASSIFICATION	2.1495341019680346E-5	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999996554427824	WITHOUT_CLASSIFICATION	3.4455721760374714E-6	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999914821037228	WITHOUT_CLASSIFICATION	8.517896277206141E-6	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999938934920438	WITHOUT_CLASSIFICATION	6.106507956118842E-6	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999928476267	WITHOUT_CLASSIFICATION	7.15237329991698E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999953266796031	WITHOUT_CLASSIFICATION	4.6733203969302434E-6	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999266897218	WITHOUT_CLASSIFICATION	7.331027810857632E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999982189057	WITHOUT_CLASSIFICATION	1.781094238969182E-9	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998440627352	WITHOUT_CLASSIFICATION	1.5593726480326578E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999512434969182	WITHOUT_CLASSIFICATION	4.87565030818723E-5	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999998831589878	WITHOUT_CLASSIFICATION	1.1684101220375388E-6	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999999925043364	WITHOUT_CLASSIFICATION	7.495663595324412E-8	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999990879211024	WITHOUT_CLASSIFICATION	9.120788976024885E-7	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9846654526043266	WITHOUT_CLASSIFICATION	0.015334547395673538	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999595640328527	WITHOUT_CLASSIFICATION	4.043596714729036E-5	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999936191907	WITHOUT_CLASSIFICATION	6.380809308639738E-8	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999991815262982	WITHOUT_CLASSIFICATION	8.184737017212212E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999677274638	WITHOUT_CLASSIFICATION	3.227253620231678E-8	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999994372534166	WITHOUT_CLASSIFICATION	5.627465834381913E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999969698173338	WITHOUT_CLASSIFICATION	3.0301826662772777E-6	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999241102068	WITHOUT_CLASSIFICATION	7.588979321397967E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999936653436421	WITHOUT_CLASSIFICATION	6.334656357902207E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9990622376071092	WITHOUT_CLASSIFICATION	9.377623928907521E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999527363444588	WITHOUT_CLASSIFICATION	4.726365554115821E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999993717984804	WITHOUT_CLASSIFICATION	6.28201519607204E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998757695452	WITHOUT_CLASSIFICATION	1.2423045485024498E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999919171248723	WITHOUT_CLASSIFICATION	8.082875127723582E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999968249402271	WITHOUT_CLASSIFICATION	3.175059772838585E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999983585663678	WITHOUT_CLASSIFICATION	1.6414336322607514E-6	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999927176409164	WITHOUT_CLASSIFICATION	7.2823590835324685E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999865891892177	WITHOUT_CLASSIFICATION	1.3410810782346697E-5	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998693911881646	WITHOUT_CLASSIFICATION	1.306088118353373E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999958911948	WITHOUT_CLASSIFICATION	4.108805108901682E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999998441103058	WITHOUT_CLASSIFICATION	1.5588969402905887E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9998963067444602	WITHOUT_CLASSIFICATION	1.0369325553985101E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.999996523539034	WITHOUT_CLASSIFICATION	3.4764609659333933E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999927335789133	WITHOUT_CLASSIFICATION	7.266421086765424E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999988523673023	WITHOUT_CLASSIFICATION	1.1476326976019238E-6	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9997953679966908	WITHOUT_CLASSIFICATION	2.0463200330931997E-4	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999999530209928	WITHOUT_CLASSIFICATION	4.6979007201923995E-7	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999911388989	WITHOUT_CLASSIFICATION	8.861101182148076E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999658190127502	WITHOUT_CLASSIFICATION	3.418098724988673E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999007144972	WITHOUT_CLASSIFICATION	9.928550280651387E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999998757695452	WITHOUT_CLASSIFICATION	1.2423045485024498E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999425821760934	WITHOUT_CLASSIFICATION	5.741782390666639E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.999999876338046	WITHOUT_CLASSIFICATION	1.2366195404106506E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999952813800728	WITHOUT_CLASSIFICATION	4.718619927192602E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999998506550367	WITHOUT_CLASSIFICATION	1.4934496332712951E-7	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999792857684865	WITHOUT_CLASSIFICATION	2.0714231513561033E-5	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999970958229	WITHOUT_CLASSIFICATION	2.90417714762259E-9	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999992133726946	WITHOUT_CLASSIFICATION	7.866273053933878E-7	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.999993685933948	WITHOUT_CLASSIFICATION	6.314066052049942E-6	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999964742748437	WITHOUT_CLASSIFICATION	3.5257251562243042E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999414868055	WITHOUT_CLASSIFICATION	5.851319454535142E-8	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9995640415877738	WITHOUT_CLASSIFICATION	4.359584122261807E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999998692109202	WITHOUT_CLASSIFICATION	1.3078907986657282E-7	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999959169711358	WITHOUT_CLASSIFICATION	4.083028864196404E-5	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999922165675517	WITHOUT_CLASSIFICATION	7.783432448361302E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999952325886	WITHOUT_CLASSIFICATION	4.767411393579683E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999317458419	WITHOUT_CLASSIFICATION	6.825415801770843E-8	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999180698125	WITHOUT_CLASSIFICATION	8.193018752658701E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.999999759499936	WITHOUT_CLASSIFICATION	2.405000639297907E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999996334452989	WITHOUT_CLASSIFICATION	3.665547010582534E-7	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999425821760934	WITHOUT_CLASSIFICATION	5.741782390666639E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.99997782269418	WITHOUT_CLASSIFICATION	2.2177305819956535E-5	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999999235457799	WITHOUT_CLASSIFICATION	7.645422007393001E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999996885668254	WITHOUT_CLASSIFICATION	3.1143317461266036E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999706468517	WITHOUT_CLASSIFICATION	2.9353148299006747E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999998503333967	WITHOUT_CLASSIFICATION	1.4966660325981929E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9772975305950737	WITHOUT_CLASSIFICATION	0.022702469404926196	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9772975305950737	WITHOUT_CLASSIFICATION	0.022702469404926196	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999956918895587	WITHOUT_CLASSIFICATION	4.308110441219131E-6	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9772975305950737	WITHOUT_CLASSIFICATION	0.022702469404926196	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9772975305950737	WITHOUT_CLASSIFICATION	0.022702469404926196	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999062455193344	WITHOUT_CLASSIFICATION	9.37544806655785E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999998544460317	WITHOUT_CLASSIFICATION	1.455539683083519E-6	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999762277855527	WITHOUT_CLASSIFICATION	2.3772214447361184E-5	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998806025318618	WITHOUT_CLASSIFICATION	1.1939746813815684E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999574453125861	WITHOUT_CLASSIFICATION	4.255468741377538E-5	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9982664114280915	WITHOUT_CLASSIFICATION	0.001733588571908512	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996399796502987	WITHOUT_CLASSIFICATION	3.6002034970134455E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998157900868602	WITHOUT_CLASSIFICATION	1.8420991313992612E-4	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999931399408568	WITHOUT_CLASSIFICATION	6.8600591432285374E-6	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999784736155723	WITHOUT_CLASSIFICATION	2.1526384427579698E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999782904568613	WITHOUT_CLASSIFICATION	2.1709543138744444E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999960168578859	WITHOUT_CLASSIFICATION	3.9831421141216036E-6	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999998972841369	WITHOUT_CLASSIFICATION	1.0271586313643478E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999919773328928	WITHOUT_CLASSIFICATION	8.022667107211027E-6	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999900662907	WITHOUT_CLASSIFICATION	9.933709297064719E-8	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998917248414805	WITHOUT_CLASSIFICATION	1.082751585195808E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996225232534	WITHOUT_CLASSIFICATION	3.7747674661363976E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999913223176087	WITHOUT_CLASSIFICATION	8.677682391301369E-5	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9998601707871901	WITHOUT_CLASSIFICATION	1.3982921280977193E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999927355986028	WITHOUT_CLASSIFICATION	7.2644013972734E-6	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999789680775373	WITHOUT_CLASSIFICATION	2.103192246268636E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999942064935582	WITHOUT_CLASSIFICATION	5.79350644187223E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999996225232534	WITHOUT_CLASSIFICATION	3.7747674661363976E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9999919171248723	WITHOUT_CLASSIFICATION	8.082875127723582E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9998779333255335	WITHOUT_CLASSIFICATION	1.2206667446649986E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999928552894651	WITHOUT_CLASSIFICATION	7.144710534846981E-6	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999926659693733	WITHOUT_CLASSIFICATION	7.334030626797265E-6	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.999987379236488	WITHOUT_CLASSIFICATION	1.2620763512062435E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999903277951607	WITHOUT_CLASSIFICATION	9.672204839289331E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999996669545795	WITHOUT_CLASSIFICATION	3.330454205146591E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9928981116291552	WITHOUT_CLASSIFICATION	0.007101888370844768	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999985046142103	WITHOUT_CLASSIFICATION	1.4953857896905448E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999982968624731	WITHOUT_CLASSIFICATION	1.7031375269029246E-6	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999835640538177	WITHOUT_CLASSIFICATION	1.643594618229857E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999992215375	WITHOUT_CLASSIFICATION	7.78462616688575E-10	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999996673177686	WITHOUT_CLASSIFICATION	3.3268223142161195E-7	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999970142325556	WITHOUT_CLASSIFICATION	2.985767444448987E-6	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998679997379548	WITHOUT_CLASSIFICATION	1.3200026204527774E-4	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999367792939	WITHOUT_CLASSIFICATION	6.322070608635632E-8	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999572331143	WITHOUT_CLASSIFICATION	4.2766885730812855E-8	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998691591400032	WITHOUT_CLASSIFICATION	1.3084085999679447E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999976461768	WITHOUT_CLASSIFICATION	2.3538231432195838E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999946197835833	WITHOUT_CLASSIFICATION	5.380216416794454E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999739636271154	WITHOUT_CLASSIFICATION	2.6036372884598767E-5	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999978882195036	WITHOUT_CLASSIFICATION	2.1117804963798018E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999730434602	WITHOUT_CLASSIFICATION	2.695653972888348E-8	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999985046142103	WITHOUT_CLASSIFICATION	1.4953857896905448E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999875971310805	WITHOUT_CLASSIFICATION	1.2402868919418255E-5	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.999991476361056	WITHOUT_CLASSIFICATION	8.523638943958097E-6	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997706563592466	WITHOUT_CLASSIFICATION	2.2934364075340342E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999974096980252	WITHOUT_CLASSIFICATION	2.590301974709743E-6	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983443843353	WITHOUT_CLASSIFICATION	1.655615664705011E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999877677521891	WITHOUT_CLASSIFICATION	1.2232247810895914E-5	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9999920015907423	WITHOUT_CLASSIFICATION	7.998409257586098E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999998337206735	WITHOUT_CLASSIFICATION	1.6627932653767954E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999988893332867	WITHOUT_CLASSIFICATION	1.1106667131747226E-6	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9999758518907794	WITHOUT_CLASSIFICATION	2.4148109220655784E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999986854227999	WITHOUT_CLASSIFICATION	1.314577200057339E-6	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999996739556342	WITHOUT_CLASSIFICATION	3.260443657799103E-7	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9994935861558459	WITHOUT_CLASSIFICATION	5.064138441540782E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.99999990293802	WITHOUT_CLASSIFICATION	9.706198004564506E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994196276208	WITHOUT_CLASSIFICATION	5.803723791736799E-7	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999985323847299	WITHOUT_CLASSIFICATION	1.4676152701224817E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999512437106604	WITHOUT_CLASSIFICATION	4.8756289339686574E-5	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999986854227999	WITHOUT_CLASSIFICATION	1.314577200057339E-6	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999727442166	WITHOUT_CLASSIFICATION	2.7255783363769376E-8	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999873445491533	WITHOUT_CLASSIFICATION	1.2655450846785964E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998498356477	WITHOUT_CLASSIFICATION	1.5016435226229373E-7	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9977310689068797	WITHOUT_CLASSIFICATION	0.0022689310931201926	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.999998792559627	WITHOUT_CLASSIFICATION	1.2074403729353749E-6	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999996740569519	WITHOUT_CLASSIFICATION	3.259430480960589E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994196276208	WITHOUT_CLASSIFICATION	5.803723791736799E-7	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999911025197328	WITHOUT_CLASSIFICATION	8.897480267085707E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980037199031	WITHOUT_CLASSIFICATION	1.9962800969305843E-6	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998110432846	WITHOUT_CLASSIFICATION	1.8895671537357707E-7	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999766069230184	WITHOUT_CLASSIFICATION	2.3393076981612283E-4	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.7915403221529136	WITHOUT_CLASSIFICATION	0.20845967784708652	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8868928484325946	WITHOUT_CLASSIFICATION	0.11310715156740539	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999971654445273	WITHOUT_CLASSIFICATION	2.834555472641352E-6	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999971654445273	WITHOUT_CLASSIFICATION	2.834555472641352E-6	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999998356839607	WITHOUT_CLASSIFICATION	1.6431603926941562E-7	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999982582411927	WITHOUT_CLASSIFICATION	1.7417588072595935E-6	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999990303956953	WITHOUT_CLASSIFICATION	9.696043046647758E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999993248830101	WITHOUT_CLASSIFICATION	6.751169898126104E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999871939786715	WITHOUT_CLASSIFICATION	1.2806021328380025E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995702104939	WITHOUT_CLASSIFICATION	4.2978950604054926E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994127180661	WITHOUT_CLASSIFICATION	5.872819339790864E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827153820525	WITHOUT_CLASSIFICATION	1.7284617947489707E-5	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999850254716627	WITHOUT_CLASSIFICATION	1.4974528337440635E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998103411324	WITHOUT_CLASSIFICATION	1.8965886762521044E-7	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995702104939	WITHOUT_CLASSIFICATION	4.2978950604054926E-7	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994127180661	WITHOUT_CLASSIFICATION	5.872819339790864E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827153820525	WITHOUT_CLASSIFICATION	1.7284617947489707E-5	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999999353759035	WITHOUT_CLASSIFICATION	6.462409649951156E-8	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9995925062376774	WITHOUT_CLASSIFICATION	4.0749376232267274E-4	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999982225984	WITHOUT_CLASSIFICATION	1.7774014853633796E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999993721258849	WITHOUT_CLASSIFICATION	6.278741150932386E-7	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998109820784	WITHOUT_CLASSIFICATION	1.890179217070236E-7	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999966521744218	WITHOUT_CLASSIFICATION	3.3478255782277813E-6	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999952767978147	WITHOUT_CLASSIFICATION	4.7232021853406205E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999994226134167	WITHOUT_CLASSIFICATION	5.773865834505601E-7	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999963811708282	WITHOUT_CLASSIFICATION	3.6188291718853134E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999998967444644	WITHOUT_CLASSIFICATION	1.032555355993143E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999495930656	WITHOUT_CLASSIFICATION	5.0406934437737444E-8	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999952070727601	WITHOUT_CLASSIFICATION	4.792927239864609E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999966487477493	WITHOUT_CLASSIFICATION	3.3512522507037944E-6	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998947878711	WITHOUT_CLASSIFICATION	1.0521212897423218E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986570022659	WITHOUT_CLASSIFICATION	1.3429977341979818E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999788535506	WITHOUT_CLASSIFICATION	2.1146449417281398E-8	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999690021741034	WITHOUT_CLASSIFICATION	3.099782589657395E-5	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999893179034921	WITHOUT_CLASSIFICATION	1.0682096507903598E-4	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999996553361363	WITHOUT_CLASSIFICATION	3.4466386362853254E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999987933632615	WITHOUT_CLASSIFICATION	1.2066367385104196E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999548681785	WITHOUT_CLASSIFICATION	4.5131821456154125E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9985953569409126	WITHOUT_CLASSIFICATION	0.0014046430590873118	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999617548877	WITHOUT_CLASSIFICATION	3.824511233655592E-8	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999999383190862	WITHOUT_CLASSIFICATION	6.168091387141622E-8	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999997821644	WITHOUT_CLASSIFICATION	2.178356833451001E-10	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9991532971729219	WITHOUT_CLASSIFICATION	8.46702827078078E-4	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992424555555	WITHOUT_CLASSIFICATION	7.575444444970867E-7	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974800374307	WITHOUT_CLASSIFICATION	2.5199625693607717E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999524526714	WITHOUT_CLASSIFICATION	4.754732857769957E-8	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993880933171	WITHOUT_CLASSIFICATION	6.119066828885591E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989876031998	WITHOUT_CLASSIFICATION	1.012396800219637E-6	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999822521956439	WITHOUT_CLASSIFICATION	1.774780435605269E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999822521956439	WITHOUT_CLASSIFICATION	1.774780435605269E-5	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999994569825	WITHOUT_CLASSIFICATION	5.430174840556034E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999983384752984	WITHOUT_CLASSIFICATION	1.661524701593717E-6	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998472732211562	WITHOUT_CLASSIFICATION	1.5272677884381274E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999595767574991	WITHOUT_CLASSIFICATION	4.04232425008264E-5	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.999789541684834	WITHOUT_CLASSIFICATION	2.1045831516600317E-4	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999895104535	WITHOUT_CLASSIFICATION	1.0489546345693377E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999969756379316	WITHOUT_CLASSIFICATION	3.024362068520327E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999971007020354	WITHOUT_CLASSIFICATION	2.89929796464222E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.999997220595236	WITHOUT_CLASSIFICATION	2.779404764147488E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998499091355	WITHOUT_CLASSIFICATION	1.5009086459603594E-7	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998781254447	WITHOUT_CLASSIFICATION	1.2187455526641076E-7	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999038334112	WITHOUT_CLASSIFICATION	9.616658873911608E-8	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991027357316	WITHOUT_CLASSIFICATION	8.972642684134565E-7	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998109174639	WITHOUT_CLASSIFICATION	1.8908253606054656E-7	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998891484818	WITHOUT_CLASSIFICATION	1.1085151827938498E-7	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997784000577	WITHOUT_CLASSIFICATION	2.2159994221848257E-7	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999770178191	WITHOUT_CLASSIFICATION	2.2982180901440758E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992577528065	WITHOUT_CLASSIFICATION	7.422471935298698E-7	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987745656144	WITHOUT_CLASSIFICATION	1.2254343856451188E-6	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996028087859	WITHOUT_CLASSIFICATION	3.971912140905501E-7	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999883359204075	WITHOUT_CLASSIFICATION	1.166407959243888E-5	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.99999709646884	WITHOUT_CLASSIFICATION	2.9035311600297357E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999983696549516	WITHOUT_CLASSIFICATION	1.6303450483017083E-6	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999859654927948	WITHOUT_CLASSIFICATION	1.4034507205228445E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999987821042245	WITHOUT_CLASSIFICATION	1.2178957755028924E-6	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.999972649098193	WITHOUT_CLASSIFICATION	2.7350901807113628E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999994203794014	WITHOUT_CLASSIFICATION	5.796205986363135E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9909381090582987	WITHOUT_CLASSIFICATION	0.009061890941701248	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999983696549516	WITHOUT_CLASSIFICATION	1.6303450483017083E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999983696549516	WITHOUT_CLASSIFICATION	1.6303450483017083E-6	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998340092532122	WITHOUT_CLASSIFICATION	1.6599074678772853E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999973549724382	WITHOUT_CLASSIFICATION	2.645027561704351E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999949171258677	WITHOUT_CLASSIFICATION	5.082874132197798E-6	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999969417059787	WITHOUT_CLASSIFICATION	3.0582940212876577E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999990749287431	WITHOUT_CLASSIFICATION	9.250712568892845E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999987933632615	WITHOUT_CLASSIFICATION	1.2066367385104196E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999976522910833	WITHOUT_CLASSIFICATION	2.3477089166736404E-6	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999993244505355	WITHOUT_CLASSIFICATION	6.755494643795786E-7	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999999954566751	WITHOUT_CLASSIFICATION	4.543324908283632E-8	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991019725031	WITHOUT_CLASSIFICATION	8.980274968728344E-7	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9990149338806225	WITHOUT_CLASSIFICATION	9.85066119377578E-4	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997336699265	WITHOUT_CLASSIFICATION	2.6633007349779714E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999950475003452	WITHOUT_CLASSIFICATION	4.952499654759288E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999950475003452	WITHOUT_CLASSIFICATION	4.952499654759288E-6	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999996831029564	WITHOUT_CLASSIFICATION	3.1689704355871167E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999996831029564	WITHOUT_CLASSIFICATION	3.1689704355871167E-7	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993169414634551	WITHOUT_CLASSIFICATION	6.830585365448567E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999847187544	WITHOUT_CLASSIFICATION	1.528124559641213E-8	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999998848186425	WITHOUT_CLASSIFICATION	1.1518135740895924E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997488656447165	WITHOUT_CLASSIFICATION	2.511343552834488E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999956141078941	WITHOUT_CLASSIFICATION	4.385892105971578E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999982975916832	WITHOUT_CLASSIFICATION	1.7024083167612985E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869117623598	WITHOUT_CLASSIFICATION	1.3088237640159726E-5	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997116797315	WITHOUT_CLASSIFICATION	2.883202685644914E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999997637363784	WITHOUT_CLASSIFICATION	2.3626362160301083E-7	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999998986086159	WITHOUT_CLASSIFICATION	1.013913840615899E-7	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999968719557	WITHOUT_CLASSIFICATION	3.128044146328217E-9	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999565470013505	WITHOUT_CLASSIFICATION	4.3452998649552704E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9994306726904081	WITHOUT_CLASSIFICATION	5.69327309591988E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999992611749524	WITHOUT_CLASSIFICATION	7.388250476811596E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999949337699682	WITHOUT_CLASSIFICATION	5.066230031905385E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999911780861318	WITHOUT_CLASSIFICATION	8.821913868249098E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999911780861318	WITHOUT_CLASSIFICATION	8.821913868249098E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999980381074022	WITHOUT_CLASSIFICATION	1.9618925978146127E-6	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999146254613	WITHOUT_CLASSIFICATION	8.537453859215829E-8	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999918512839	WITHOUT_CLASSIFICATION	8.148716122831692E-9	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999712209418423	WITHOUT_CLASSIFICATION	2.8779058157713163E-5	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998804227112983	WITHOUT_CLASSIFICATION	1.1957728870164115E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999381767430596	WITHOUT_CLASSIFICATION	6.182325694037639E-5	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999904900376282	WITHOUT_CLASSIFICATION	9.509962371754417E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8762651621491184	WITHOUT_CLASSIFICATION	0.12373483785088153	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999924980028243	WITHOUT_CLASSIFICATION	7.501997175640789E-6	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999922370730193	WITHOUT_CLASSIFICATION	7.762926980693912E-6	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999994595242829	WITHOUT_CLASSIFICATION	5.404757170898742E-7	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997465092426436	WITHOUT_CLASSIFICATION	2.534907573564524E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995695712013	WITHOUT_CLASSIFICATION	4.3042879874605085E-7	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999995389343845	WITHOUT_CLASSIFICATION	4.6106561543695906E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999972880131106	WITHOUT_CLASSIFICATION	2.711986889364584E-6	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999925125145134	WITHOUT_CLASSIFICATION	7.487485486655363E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999989772114589	WITHOUT_CLASSIFICATION	1.0227885410455077E-6	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999828237825134	WITHOUT_CLASSIFICATION	1.7176217486728994E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999882744975249	WITHOUT_CLASSIFICATION	1.1725502475005308E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999957144476852	WITHOUT_CLASSIFICATION	4.285552314827725E-6	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999910080348	WITHOUT_CLASSIFICATION	8.99196525764324E-9	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999981401824448	WITHOUT_CLASSIFICATION	1.859817555236276E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9998088805916513	WITHOUT_CLASSIFICATION	1.9111940834865828E-4	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999955311678513	WITHOUT_CLASSIFICATION	4.4688321486450855E-6	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999176058387304	WITHOUT_CLASSIFICATION	8.239416126958219E-5	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999663417314381	WITHOUT_CLASSIFICATION	3.365826856204638E-5	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999996714134127	WITHOUT_CLASSIFICATION	3.2858658730667793E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999996056865053	WITHOUT_CLASSIFICATION	3.943134947328894E-7	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999997042105	WITHOUT_CLASSIFICATION	2.9578949293195463E-10	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999949807266061	WITHOUT_CLASSIFICATION	5.0192733939848426E-6	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999952764393158	WITHOUT_CLASSIFICATION	4.7235606841935674E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999970810444718	WITHOUT_CLASSIFICATION	2.918955528177819E-6	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999992876764889	WITHOUT_CLASSIFICATION	7.12323511031311E-7	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9990734279584449	WITHOUT_CLASSIFICATION	9.265720415550956E-4	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999985947533687	WITHOUT_CLASSIFICATION	1.4052466313200677E-6	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999946324512266	WITHOUT_CLASSIFICATION	5.367548773429249E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999984221983957	WITHOUT_CLASSIFICATION	1.5778016042511396E-6	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999760411004153	WITHOUT_CLASSIFICATION	2.3958899584825387E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999989152404214	WITHOUT_CLASSIFICATION	1.084759578654278E-6	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9996446710209194	WITHOUT_CLASSIFICATION	3.553289790806349E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999984612545338	WITHOUT_CLASSIFICATION	1.538745466061189E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999999922429553	WITHOUT_CLASSIFICATION	7.75704474740411E-9	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9817382552073496	WITHOUT_CLASSIFICATION	0.01826174479265037	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9997829082544607	WITHOUT_CLASSIFICATION	2.170917455393812E-4	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999639089969988	WITHOUT_CLASSIFICATION	3.6091003001144455E-5	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999934517573238	WITHOUT_CLASSIFICATION	6.5482426762651845E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999997736062763	WITHOUT_CLASSIFICATION	2.2639372377095532E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999978687096465	WITHOUT_CLASSIFICATION	2.1312903534993474E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999810083975466	WITHOUT_CLASSIFICATION	1.8991602453473947E-5	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999948526456537	WITHOUT_CLASSIFICATION	5.147354346243646E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999359001687615	WITHOUT_CLASSIFICATION	6.409983123841406E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999761241529724	WITHOUT_CLASSIFICATION	2.3875847027592654E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999885855095205	WITHOUT_CLASSIFICATION	1.1414490479441319E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999302957811393	WITHOUT_CLASSIFICATION	6.970421886069955E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999747681058229	WITHOUT_CLASSIFICATION	2.523189417709845E-4	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999931044170447	WITHOUT_CLASSIFICATION	6.895582955270644E-6	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9953419495545942	WITHOUT_CLASSIFICATION	0.004658050445405791	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999864491634294	WITHOUT_CLASSIFICATION	1.3550836570646362E-5	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999910905157	WITHOUT_CLASSIFICATION	8.90948427156736E-9	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.999803685270857	WITHOUT_CLASSIFICATION	1.9631472914303602E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999997582086667	WITHOUT_CLASSIFICATION	2.417913333278852E-7	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999944760513362	WITHOUT_CLASSIFICATION	5.523948663877998E-6	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999990667133	WITHOUT_CLASSIFICATION	9.332866933416874E-10	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999994200355138	WITHOUT_CLASSIFICATION	5.799644863171095E-7	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999875112153	WITHOUT_CLASSIFICATION	1.2488784693360576E-8	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999876569787409	WITHOUT_CLASSIFICATION	1.2343021259077554E-5	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999995218411543	WITHOUT_CLASSIFICATION	4.781588456416901E-7	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999958895255809	WITHOUT_CLASSIFICATION	4.110474419040639E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999243519265242	WITHOUT_CLASSIFICATION	7.564807347574505E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999243519265242	WITHOUT_CLASSIFICATION	7.564807347574505E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999994303604598	WITHOUT_CLASSIFICATION	5.696395401649269E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999982025395918	WITHOUT_CLASSIFICATION	1.7974604081008159E-6	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999996176469	WITHOUT_CLASSIFICATION	3.823531253648651E-10	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999999689448589	WITHOUT_CLASSIFICATION	3.1055141035438665E-8	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999970971863992	WITHOUT_CLASSIFICATION	2.9028136008184847E-6	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9997643702360276	WITHOUT_CLASSIFICATION	2.3562976397239712E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999854960548	WITHOUT_CLASSIFICATION	1.4503945155371979E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999917544504	WITHOUT_CLASSIFICATION	8.24554960080569E-8	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999136662817509	WITHOUT_CLASSIFICATION	8.633371824898338E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999992754316993	WITHOUT_CLASSIFICATION	7.245683006594073E-7	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999848836555779	WITHOUT_CLASSIFICATION	1.5116344422171346E-5	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999108852552696	WITHOUT_CLASSIFICATION	8.911474473031122E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999989046553306	WITHOUT_CLASSIFICATION	1.0953446693682123E-6	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999971129901	WITHOUT_CLASSIFICATION	2.8870099080670127E-9	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999974513863469	WITHOUT_CLASSIFICATION	2.5486136530384764E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9732135294328412	WITHOUT_CLASSIFICATION	0.026786470567158768	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999846078265862	WITHOUT_CLASSIFICATION	1.5392173413880136E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9980435279258674	WITHOUT_CLASSIFICATION	0.001956472074132598	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999900498723364	WITHOUT_CLASSIFICATION	9.950127663609544E-5	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999978409250164	WITHOUT_CLASSIFICATION	2.159074983618329E-6	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.999999172313105	WITHOUT_CLASSIFICATION	8.27686894968381E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999872914743885	WITHOUT_CLASSIFICATION	1.2708525611474921E-5	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999997677633707	WITHOUT_CLASSIFICATION	2.3223662915189428E-7	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9995753592229641	WITHOUT_CLASSIFICATION	4.2464077703594736E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999990685461769	WITHOUT_CLASSIFICATION	9.314538230073968E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999915035705654	WITHOUT_CLASSIFICATION	8.496429434576322E-6	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999926732725751	WITHOUT_CLASSIFICATION	7.3267274249210035E-6	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999996806799472	WITHOUT_CLASSIFICATION	3.1932005291015967E-7	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999995069747978	WITHOUT_CLASSIFICATION	4.930252022467797E-7	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999578999581527	WITHOUT_CLASSIFICATION	4.21000418473912E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998387667751	WITHOUT_CLASSIFICATION	1.612332248318041E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999822584175379	WITHOUT_CLASSIFICATION	1.7741582462143955E-5	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999990405793409	WITHOUT_CLASSIFICATION	9.594206591204002E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999856468245991	WITHOUT_CLASSIFICATION	1.435317540089167E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999443311636724	WITHOUT_CLASSIFICATION	5.566883632752915E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999443311636724	WITHOUT_CLASSIFICATION	5.566883632752915E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999859314935089	WITHOUT_CLASSIFICATION	1.4068506491019071E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998358887943521	WITHOUT_CLASSIFICATION	1.641112056478142E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999564402338	WITHOUT_CLASSIFICATION	4.355976620421059E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999984463489967	WITHOUT_CLASSIFICATION	1.5536510032679295E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999794949856	WITHOUT_CLASSIFICATION	2.050501438148408E-8	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999934746341683	WITHOUT_CLASSIFICATION	6.52536583166696E-6	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999993752309444	WITHOUT_CLASSIFICATION	6.247690555780681E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999116839199	WITHOUT_CLASSIFICATION	8.831608007676696E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999932631086299	WITHOUT_CLASSIFICATION	6.736891370099168E-5	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994304057561	WITHOUT_CLASSIFICATION	5.695942439862169E-7	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999586427320216	WITHOUT_CLASSIFICATION	4.135726797830084E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999551652159655	WITHOUT_CLASSIFICATION	4.483478403452409E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999797116915	WITHOUT_CLASSIFICATION	2.0288308390991495E-8	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999965003622463	WITHOUT_CLASSIFICATION	3.4996377537191678E-6	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999962127273719	WITHOUT_CLASSIFICATION	3.787272627937545E-6	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9975041743678656	WITHOUT_CLASSIFICATION	0.0024958256321343675	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9975041743678656	WITHOUT_CLASSIFICATION	0.0024958256321343675	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999726918376464	WITHOUT_CLASSIFICATION	2.7308162353646725E-5	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999988103984848	WITHOUT_CLASSIFICATION	1.189601515222538E-6	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999979659951898	WITHOUT_CLASSIFICATION	2.034004810249902E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998951834491	WITHOUT_CLASSIFICATION	1.0481655093631348E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999816677276841	WITHOUT_CLASSIFICATION	1.8332272315894378E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999874491105747	WITHOUT_CLASSIFICATION	1.255088942535236E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999969396083187	WITHOUT_CLASSIFICATION	3.0603916813684743E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.9999969396083187	WITHOUT_CLASSIFICATION	3.0603916813684743E-6	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999526413665308	WITHOUT_CLASSIFICATION	4.735863346917874E-5	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999991295720613	WITHOUT_CLASSIFICATION	8.704279387400007E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999967622285691	WITHOUT_CLASSIFICATION	3.2377714307214875E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999714753985	WITHOUT_CLASSIFICATION	2.8524601365420238E-8	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999992374892174	WITHOUT_CLASSIFICATION	7.625107825683781E-7	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999096264257503	WITHOUT_CLASSIFICATION	9.037357424970944E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9981809600943637	WITHOUT_CLASSIFICATION	0.0018190399056362994	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999582530746912	WITHOUT_CLASSIFICATION	4.174692530882803E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999983269860453	WITHOUT_CLASSIFICATION	1.67301395464815E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998753170930658	WITHOUT_CLASSIFICATION	1.246829069342776E-4	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9938250897715544	WITHOUT_CLASSIFICATION	0.006174910228445604	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.9999979619411251	WITHOUT_CLASSIFICATION	2.0380588749899538E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999946837086988	WITHOUT_CLASSIFICATION	5.316291301266206E-6	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999998719042612	WITHOUT_CLASSIFICATION	1.2809573881125225E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999992039938861	WITHOUT_CLASSIFICATION	7.960061139347548E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999771311965	WITHOUT_CLASSIFICATION	2.2868803466065597E-8	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999899453644	WITHOUT_CLASSIFICATION	1.0054635673907811E-8	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.999997428262665	WITHOUT_CLASSIFICATION	2.5717373349768848E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999985580936567	WITHOUT_CLASSIFICATION	1.4419063433274343E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997290685444069	WITHOUT_CLASSIFICATION	2.7093145559311274E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999691506035	WITHOUT_CLASSIFICATION	3.084939648159651E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999993311531427	WITHOUT_CLASSIFICATION	6.688468573695121E-7	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999954453773586	WITHOUT_CLASSIFICATION	4.5546226414036695E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999852027265483	WITHOUT_CLASSIFICATION	1.4797273451710205E-5	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997839702469	WITHOUT_CLASSIFICATION	2.1602975315040382E-7	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999283474779027	WITHOUT_CLASSIFICATION	7.16525220972668E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9888500456770031	WITHOUT_CLASSIFICATION	0.01114995432299687	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999808654030424	WITHOUT_CLASSIFICATION	1.9134596957630253E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9992903806341328	WITHOUT_CLASSIFICATION	7.096193658672541E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995076231792	WITHOUT_CLASSIFICATION	4.923768208275059E-7	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9997702249361882	WITHOUT_CLASSIFICATION	2.2977506381184441E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999993635205437	WITHOUT_CLASSIFICATION	6.36479456234834E-7	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999999223788725	WITHOUT_CLASSIFICATION	7.762112751364E-8	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999979531493302	WITHOUT_CLASSIFICATION	2.046850669767352E-6	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999849346032451	WITHOUT_CLASSIFICATION	1.5065396754909238E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999990234871134	WITHOUT_CLASSIFICATION	9.765128865503402E-7	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999992434386055	WITHOUT_CLASSIFICATION	7.565613946004651E-7	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999997890850536	WITHOUT_CLASSIFICATION	2.1091494634051674E-7	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999626935401	WITHOUT_CLASSIFICATION	3.730645991579389E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999873919559	WITHOUT_CLASSIFICATION	1.2608044101380424E-7	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998692869951	WITHOUT_CLASSIFICATION	1.307130047718968E-7	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999923350866983	WITHOUT_CLASSIFICATION	7.6649133016252E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999847502114836	WITHOUT_CLASSIFICATION	1.5249788516485282E-5	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999603568214677	WITHOUT_CLASSIFICATION	3.964317853232178E-5	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999999988698	WITHOUT_CLASSIFICATION	1.1301914021801394E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999947864713584	WITHOUT_CLASSIFICATION	5.2135286416004644E-5	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999626935401	WITHOUT_CLASSIFICATION	3.730645991579389E-8	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999873919559	WITHOUT_CLASSIFICATION	1.2608044101380424E-7	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999768082459655	WITHOUT_CLASSIFICATION	2.319175403454267E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998786223860507	WITHOUT_CLASSIFICATION	1.2137761394931498E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999999993076834	WITHOUT_CLASSIFICATION	6.923166018708734E-9	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999009878080571	WITHOUT_CLASSIFICATION	9.90121919428041E-5	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999758352527014	WITHOUT_CLASSIFICATION	2.416474729859349E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999993139488791	WITHOUT_CLASSIFICATION	6.860511208722213E-7	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9954047928680706	WITHOUT_CLASSIFICATION	0.004595207131929336	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999990062925401	WITHOUT_CLASSIFICATION	9.93707459919533E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999883830552516	WITHOUT_CLASSIFICATION	1.1616944748373393E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9965653087634705	WITHOUT_CLASSIFICATION	0.0034346912365294116	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998680861	WITHOUT_CLASSIFICATION	1.3191397646507928E-10	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9965653087634705	WITHOUT_CLASSIFICATION	0.0034346912365294116	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999620169183	WITHOUT_CLASSIFICATION	3.7983081666165836E-8	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999983451553527	WITHOUT_CLASSIFICATION	1.6548446472711533E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999998889189645	WITHOUT_CLASSIFICATION	1.1108103554216851E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939482328729	WITHOUT_CLASSIFICATION	6.051767127010774E-6	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999985247670952	WITHOUT_CLASSIFICATION	1.4752329048244877E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999693130609271	WITHOUT_CLASSIFICATION	3.068693907293105E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999693130609271	WITHOUT_CLASSIFICATION	3.068693907293105E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999997261292859	WITHOUT_CLASSIFICATION	2.7387071411730946E-7	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999986245727563	WITHOUT_CLASSIFICATION	1.3754272436636148E-6	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999981700717097	WITHOUT_CLASSIFICATION	1.8299282902774066E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999173112634401	WITHOUT_CLASSIFICATION	8.268873656000051E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999996453721148	WITHOUT_CLASSIFICATION	3.546278851289992E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9969727165338899	WITHOUT_CLASSIFICATION	0.003027283466110078	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999978067332721	WITHOUT_CLASSIFICATION	2.1932667278708023E-6	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998085566228	WITHOUT_CLASSIFICATION	1.9144337725011495E-7	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999990897213937	WITHOUT_CLASSIFICATION	9.102786062554418E-7	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999954296646656	WITHOUT_CLASSIFICATION	4.5703353344088575E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999997416071841	WITHOUT_CLASSIFICATION	2.583928158922517E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999841606861436	WITHOUT_CLASSIFICATION	1.5839313856366046E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.9999610397458851	WITHOUT_CLASSIFICATION	3.8960254114790516E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.999999896799714	WITHOUT_CLASSIFICATION	1.0320028598054032E-7	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999420252695088	WITHOUT_CLASSIFICATION	5.797473049109292E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999733037923303	WITHOUT_CLASSIFICATION	2.6696207669722567E-5	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999754147338996	WITHOUT_CLASSIFICATION	2.4585266100382654E-5	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998350467365456	WITHOUT_CLASSIFICATION	1.6495326345440864E-4	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999021852379	WITHOUT_CLASSIFICATION	9.781476204593645E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.999988389035284	WITHOUT_CLASSIFICATION	1.1610964715889343E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999561566125273	WITHOUT_CLASSIFICATION	4.3843387472703246E-4	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999872816637764	WITHOUT_CLASSIFICATION	1.271833622358014E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9950103806978858	WITHOUT_CLASSIFICATION	0.004989619302114115	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999734307839825	WITHOUT_CLASSIFICATION	2.6569216017550787E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999675052570662	WITHOUT_CLASSIFICATION	3.2494742933719364E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999951824764863	WITHOUT_CLASSIFICATION	4.817523513600638E-6	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999997316900799	WITHOUT_CLASSIFICATION	2.6830992002674525E-7	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9983745201416754	WITHOUT_CLASSIFICATION	0.001625479858324551	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999380172094844	WITHOUT_CLASSIFICATION	6.19827905155794E-5	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.99983625169645	WITHOUT_CLASSIFICATION	1.637483035500277E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9961295097524739	WITHOUT_CLASSIFICATION	0.0038704902475260104	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999707764795818	WITHOUT_CLASSIFICATION	2.9223520418244297E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999978067332721	WITHOUT_CLASSIFICATION	2.1932667278708023E-6	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999993531803769	WITHOUT_CLASSIFICATION	6.468196230616426E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9997741731067701	WITHOUT_CLASSIFICATION	2.2582689322987016E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9995058479875129	WITHOUT_CLASSIFICATION	4.941520124871913E-4	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999996177982209	WITHOUT_CLASSIFICATION	3.822017790879637E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998259396247042	WITHOUT_CLASSIFICATION	1.7406037529578094E-4	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999901059014241	WITHOUT_CLASSIFICATION	9.894098575873896E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999173112634401	WITHOUT_CLASSIFICATION	8.268873656000051E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999173112634401	WITHOUT_CLASSIFICATION	8.268873656000051E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998425270966038	WITHOUT_CLASSIFICATION	1.5747290339625784E-4	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999570443164105	WITHOUT_CLASSIFICATION	4.295568358950244E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999957011341222	WITHOUT_CLASSIFICATION	4.298865877829056E-6	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999710889427509	WITHOUT_CLASSIFICATION	2.8911057249044496E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9871047424406677	WITHOUT_CLASSIFICATION	0.012895257559332175	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999999932103933	WITHOUT_CLASSIFICATION	6.789606701350345E-8	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999993573053055	WITHOUT_CLASSIFICATION	6.426946944450811E-7	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999508335803	WITHOUT_CLASSIFICATION	4.916641971193088E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999946548102386	WITHOUT_CLASSIFICATION	5.345189761398787E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999811403	WITHOUT_CLASSIFICATION	1.8859700049635553E-8	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999967400453721	WITHOUT_CLASSIFICATION	3.2599546279291057E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997258235977442	WITHOUT_CLASSIFICATION	2.7417640225579063E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999996015829877	WITHOUT_CLASSIFICATION	3.984170122691087E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999811403	WITHOUT_CLASSIFICATION	1.8859700049635553E-8	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.99999937927829	WITHOUT_CLASSIFICATION	6.207217100122437E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999917788881829	WITHOUT_CLASSIFICATION	8.221111817188023E-6	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999965979758068	WITHOUT_CLASSIFICATION	3.402024193136415E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9148876741610787	WITHOUT_CLASSIFICATION	0.08511232583892119	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997258235977442	WITHOUT_CLASSIFICATION	2.7417640225579063E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999925645167	WITHOUT_CLASSIFICATION	7.435483384478957E-9	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999994477683	WITHOUT_CLASSIFICATION	5.522316986867442E-10	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999987639858	WITHOUT_CLASSIFICATION	1.236014153561812E-9	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999987277	WITHOUT_CLASSIFICATION	1.2723796554939588E-12	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998438125106339	WITHOUT_CLASSIFICATION	1.5618748936595462E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999174361486	WITHOUT_CLASSIFICATION	8.25638513761905E-8	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999971087489	WITHOUT_CLASSIFICATION	2.8912511484643035E-9	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999986785337166	WITHOUT_CLASSIFICATION	1.321466283423659E-6	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999481372018636	WITHOUT_CLASSIFICATION	5.1862798136327895E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999942709212257	WITHOUT_CLASSIFICATION	5.729078774324815E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999521590882	WITHOUT_CLASSIFICATION	4.784091176368141E-8	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999898353923816	WITHOUT_CLASSIFICATION	1.0164607618370186E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999811403	WITHOUT_CLASSIFICATION	1.8859700049635553E-8	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999925645167	WITHOUT_CLASSIFICATION	7.435483384478957E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999987639858	WITHOUT_CLASSIFICATION	1.236014153561812E-9	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999994080699642	WITHOUT_CLASSIFICATION	5.919300358101524E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999789020474739	WITHOUT_CLASSIFICATION	2.109795252607846E-5	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999720487829	WITHOUT_CLASSIFICATION	2.7951217128830654E-8	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997258235977442	WITHOUT_CLASSIFICATION	2.7417640225579063E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999819667417068	WITHOUT_CLASSIFICATION	1.8033258293244166E-5	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999991624229598	WITHOUT_CLASSIFICATION	8.375770402049057E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999201908153084	WITHOUT_CLASSIFICATION	7.9809184691616E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999982808542002	WITHOUT_CLASSIFICATION	1.719145799794146E-5	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999986785337166	WITHOUT_CLASSIFICATION	1.321466283423659E-6	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.99999937927829	WITHOUT_CLASSIFICATION	6.207217100122437E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999977719108541	WITHOUT_CLASSIFICATION	2.2280891458078875E-6	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999977629420064	WITHOUT_CLASSIFICATION	2.237057993749034E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999971963007466	WITHOUT_CLASSIFICATION	2.8036992535152502E-6	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999435868515029	WITHOUT_CLASSIFICATION	5.641314849702303E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.864931693507014	WITHOUT_CLASSIFICATION	0.13506830649298587	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9954394089109765	WITHOUT_CLASSIFICATION	0.004560591089023421	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9998487590219661	WITHOUT_CLASSIFICATION	1.512409780338655E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939482328729	WITHOUT_CLASSIFICATION	6.051767127010774E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998599599651	WITHOUT_CLASSIFICATION	1.4004003493801648E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999598023721	WITHOUT_CLASSIFICATION	4.019762788209264E-8	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999703529379	WITHOUT_CLASSIFICATION	2.9647062166889337E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999914539518	WITHOUT_CLASSIFICATION	8.546048213762077E-9	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999957872578	WITHOUT_CLASSIFICATION	4.212742117568589E-9	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999588841921	WITHOUT_CLASSIFICATION	4.1115807911758755E-8	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999457466535	WITHOUT_CLASSIFICATION	5.425334644983708E-8	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999351616844	WITHOUT_CLASSIFICATION	6.483831560161958E-8	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999982808542002	WITHOUT_CLASSIFICATION	1.719145799794146E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999782771642558	WITHOUT_CLASSIFICATION	2.1722835744203704E-5	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999985497911271	WITHOUT_CLASSIFICATION	1.4502088729324142E-6	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999597418954943	WITHOUT_CLASSIFICATION	4.025810450569665E-5	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999987613501031	WITHOUT_CLASSIFICATION	1.238649896902182E-6	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999842582307767	WITHOUT_CLASSIFICATION	1.574176922315906E-5	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999995415652325	WITHOUT_CLASSIFICATION	4.584347674588477E-7	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999977806861357	WITHOUT_CLASSIFICATION	2.2193138644312583E-6	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999156424765352	WITHOUT_CLASSIFICATION	8.435752346486204E-5	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999949946517785	WITHOUT_CLASSIFICATION	5.005348221474207E-6	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999950150057554	WITHOUT_CLASSIFICATION	4.984994244629282E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999992152989883	WITHOUT_CLASSIFICATION	7.847010118337263E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998594927701	WITHOUT_CLASSIFICATION	1.4050722990515877E-7	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997144832038359	WITHOUT_CLASSIFICATION	2.855167961641414E-4	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999869344224535	WITHOUT_CLASSIFICATION	1.3065577546525056E-5	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999939503587499	WITHOUT_CLASSIFICATION	6.049641250031269E-6	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999429470864	WITHOUT_CLASSIFICATION	5.7052913718502484E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999948823655381	WITHOUT_CLASSIFICATION	5.117634461884398E-6	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998672012641	WITHOUT_CLASSIFICATION	1.3279873590855426E-7	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999984554183561	WITHOUT_CLASSIFICATION	1.5445816439151765E-6	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999988156961133	WITHOUT_CLASSIFICATION	1.1843038866840909E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999984565182816	WITHOUT_CLASSIFICATION	1.5434817183834703E-6	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999998216848456	WITHOUT_CLASSIFICATION	1.783151544075882E-6	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998341297959	WITHOUT_CLASSIFICATION	1.6587020420979006E-7	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999996723813545	WITHOUT_CLASSIFICATION	3.2761864549458696E-7	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999949781191	WITHOUT_CLASSIFICATION	5.021880893758366E-8	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5080789755767081	WITHOUT_CLASSIFICATION	0.4919210244232919	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9984054205692342	WITHOUT_CLASSIFICATION	0.001594579430765766	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999416496582048	WITHOUT_CLASSIFICATION	5.835034179525982E-5	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999692119868453	WITHOUT_CLASSIFICATION	3.0788013154632586E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8089768416259333	IMPLEMENTATION	0.1910231583740668	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999821957367	WITHOUT_CLASSIFICATION	1.780426332439239E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995236928826019	WITHOUT_CLASSIFICATION	4.7630711739809356E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999728358716	WITHOUT_CLASSIFICATION	2.7164128402375003E-8	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999977672899425	WITHOUT_CLASSIFICATION	2.2327100574175993E-6	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999999956284329	WITHOUT_CLASSIFICATION	4.371567088919224E-8	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999861660584657	WITHOUT_CLASSIFICATION	1.3833941534352583E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999698927375	WITHOUT_CLASSIFICATION	3.010726239534735E-8	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999970211469764	WITHOUT_CLASSIFICATION	2.9788530234756322E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999861660584657	WITHOUT_CLASSIFICATION	1.3833941534352583E-5	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999999956284329	WITHOUT_CLASSIFICATION	4.371567088919224E-8	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999698927375	WITHOUT_CLASSIFICATION	3.010726239534735E-8	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999973038881922	WITHOUT_CLASSIFICATION	2.6961118078322828E-6	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999998182209303	WITHOUT_CLASSIFICATION	1.8177906976779906E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999478995147157	WITHOUT_CLASSIFICATION	5.2100485284360534E-5	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999924412463992	WITHOUT_CLASSIFICATION	7.558753600733233E-6	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999864611805	WITHOUT_CLASSIFICATION	1.3538819585010955E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8950568617963924	IMPLEMENTATION	0.10494313820360754	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999014208510735	WITHOUT_CLASSIFICATION	9.857914892652283E-5	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999367734592646	WITHOUT_CLASSIFICATION	6.322654073537945E-5	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999798582066244	WITHOUT_CLASSIFICATION	2.0141793375698633E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999994440217785	WITHOUT_CLASSIFICATION	5.559782214575354E-7	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9999978161274748	WITHOUT_CLASSIFICATION	2.183872525169232E-6	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999987923742052	WITHOUT_CLASSIFICATION	1.207625794809664E-6	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999755462556085	WITHOUT_CLASSIFICATION	2.4453744391469778E-5	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999608366345795	WITHOUT_CLASSIFICATION	3.916336542060552E-5	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998516781869939	WITHOUT_CLASSIFICATION	1.4832181300608347E-4	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999373812871	WITHOUT_CLASSIFICATION	6.261871296004987E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999980600847	WITHOUT_CLASSIFICATION	1.939915263426455E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999992774471	WITHOUT_CLASSIFICATION	7.2255295181323E-10	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998426208477	WITHOUT_CLASSIFICATION	1.5737915219552797E-7	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999997734492239	WITHOUT_CLASSIFICATION	2.2655077619701868E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9986294282737186	WITHOUT_CLASSIFICATION	0.0013705717262814082	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999739240616	WITHOUT_CLASSIFICATION	2.6075938351721936E-8	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999990557053581	WITHOUT_CLASSIFICATION	9.442946419031544E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9998172053229542	WITHOUT_CLASSIFICATION	1.827946770457606E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998180306975	WITHOUT_CLASSIFICATION	1.819693025922204E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998180306975	WITHOUT_CLASSIFICATION	1.819693025922204E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.99999999529152	WITHOUT_CLASSIFICATION	4.7084800419246185E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.99999999529152	WITHOUT_CLASSIFICATION	4.7084800419246185E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9940005040401535	WITHOUT_CLASSIFICATION	0.005999495959846475	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999980600847	WITHOUT_CLASSIFICATION	1.939915263426455E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999965600145808	WITHOUT_CLASSIFICATION	3.439985419237751E-6	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999967692529935	WITHOUT_CLASSIFICATION	3.230747006516486E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999181844541	WITHOUT_CLASSIFICATION	8.181554594544796E-8	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999181844541	WITHOUT_CLASSIFICATION	8.181554594544796E-8	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999988227192879	WITHOUT_CLASSIFICATION	1.1772807121443673E-6	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999925736590904	WITHOUT_CLASSIFICATION	7.426340909556563E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999964649019621	WITHOUT_CLASSIFICATION	3.535098037790084E-6	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999976535444309	WITHOUT_CLASSIFICATION	2.3464555690504433E-6	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9993687999893418	WITHOUT_CLASSIFICATION	6.312000106582444E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999996827502156	WITHOUT_CLASSIFICATION	3.172497844833875E-7	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999897179872922	WITHOUT_CLASSIFICATION	1.0282012707874318E-5	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999987677189004	WITHOUT_CLASSIFICATION	1.2322810996484526E-6	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9993288133342022	WITHOUT_CLASSIFICATION	6.711866657978132E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999981762454447	WITHOUT_CLASSIFICATION	1.8237545551547377E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999939205391531	WITHOUT_CLASSIFICATION	6.079460846849134E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9994994958244872	WITHOUT_CLASSIFICATION	5.005041755128133E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999597950093	WITHOUT_CLASSIFICATION	4.0204990632531513E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999990098359877	WITHOUT_CLASSIFICATION	9.901640124024677E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999842763580776	WITHOUT_CLASSIFICATION	1.5723641922350692E-5	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9995327087730655	WITHOUT_CLASSIFICATION	4.6729122693440795E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939290077847	WITHOUT_CLASSIFICATION	6.070992215338778E-6	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9998403620821359	WITHOUT_CLASSIFICATION	1.5963791786405775E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999880675156627	WITHOUT_CLASSIFICATION	1.1932484337294209E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999980476583591	WITHOUT_CLASSIFICATION	1.9523416408087426E-6	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999633537722765	WITHOUT_CLASSIFICATION	3.664622772347221E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.99999990900554	WITHOUT_CLASSIFICATION	9.099446002585685E-8	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999981440550711	WITHOUT_CLASSIFICATION	1.8559449287606362E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999953785750751	WITHOUT_CLASSIFICATION	4.6214249248727104E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999595767574991	WITHOUT_CLASSIFICATION	4.04232425008264E-5	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999985041293749	WITHOUT_CLASSIFICATION	1.4958706251682201E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998594927701	WITHOUT_CLASSIFICATION	1.4050722990515877E-7	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999979145115195	WITHOUT_CLASSIFICATION	2.0854884804984606E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999956384085581	WITHOUT_CLASSIFICATION	4.361591441968422E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951724089924	WITHOUT_CLASSIFICATION	4.8275910075655294E-6	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999088234544528	WITHOUT_CLASSIFICATION	9.117654554729138E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999866907617635	WITHOUT_CLASSIFICATION	1.3309238236547425E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999866907617635	WITHOUT_CLASSIFICATION	1.3309238236547425E-5	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999999934815721	WITHOUT_CLASSIFICATION	6.518427900075022E-8	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999975192251904	WITHOUT_CLASSIFICATION	2.4807748095463634E-6	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999996304777982	WITHOUT_CLASSIFICATION	3.695222019027516E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999996304777982	WITHOUT_CLASSIFICATION	3.695222019027516E-7	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998604826456039	WITHOUT_CLASSIFICATION	1.3951735439610334E-4	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999838332592992	WITHOUT_CLASSIFICATION	1.6166740700851213E-5	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999958658609641	WITHOUT_CLASSIFICATION	4.134139035859308E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999990749287431	WITHOUT_CLASSIFICATION	9.250712568892845E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999846926272173	WITHOUT_CLASSIFICATION	1.530737278267426E-5	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999943277237116	WITHOUT_CLASSIFICATION	5.672276288520845E-6	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9994203655309778	WITHOUT_CLASSIFICATION	5.796344690222943E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999984253682337	WITHOUT_CLASSIFICATION	1.5746317663089224E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999590538883	WITHOUT_CLASSIFICATION	4.0946111793839696E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999590538883	WITHOUT_CLASSIFICATION	4.0946111793839696E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999601573941297	WITHOUT_CLASSIFICATION	3.984260587041172E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999992938152097	WITHOUT_CLASSIFICATION	7.061847903490721E-7	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999992938152097	WITHOUT_CLASSIFICATION	7.061847903490721E-7	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999868979464	WITHOUT_CLASSIFICATION	1.310205360683525E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999997430702	WITHOUT_CLASSIFICATION	2.5692989076443476E-10	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.998565686605394	WITHOUT_CLASSIFICATION	0.0014343133946060317	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999906887840929	WITHOUT_CLASSIFICATION	9.311215906970343E-6	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999968006797968	WITHOUT_CLASSIFICATION	3.199320203237219E-6	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999735435212	WITHOUT_CLASSIFICATION	2.645647877268097E-8	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9991697686343699	WITHOUT_CLASSIFICATION	8.302313656301283E-4	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9996690384418987	WITHOUT_CLASSIFICATION	3.309615581013719E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999999804535049	WITHOUT_CLASSIFICATION	1.9546495104115195E-7	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999576965073094	WITHOUT_CLASSIFICATION	4.230349269071091E-5	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999993963555752	WITHOUT_CLASSIFICATION	6.03644424798977E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9994455265006876	WITHOUT_CLASSIFICATION	5.544734993122776E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999581348525868	WITHOUT_CLASSIFICATION	4.186514741331867E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999581348525868	WITHOUT_CLASSIFICATION	4.186514741331867E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999581348525868	WITHOUT_CLASSIFICATION	4.186514741331867E-5	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999581348525868	WITHOUT_CLASSIFICATION	4.186514741331867E-5	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999993516562966	WITHOUT_CLASSIFICATION	6.483437033042995E-7	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999991357650513	WITHOUT_CLASSIFICATION	8.642349487083277E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999988079862178	WITHOUT_CLASSIFICATION	1.1920137821980465E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999880702796793	WITHOUT_CLASSIFICATION	1.1929720320753647E-5	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999802007576364	WITHOUT_CLASSIFICATION	1.97992423636347E-5	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999685988996418	WITHOUT_CLASSIFICATION	3.140110035818749E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999913914845678	WITHOUT_CLASSIFICATION	8.608515432129787E-6	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999473947178211	WITHOUT_CLASSIFICATION	5.260528217880829E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999840674613079	WITHOUT_CLASSIFICATION	1.5932538692098113E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999985394694948	WITHOUT_CLASSIFICATION	1.4605305052068163E-6	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999967925133649	WITHOUT_CLASSIFICATION	3.20748663510108E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995964577133	WITHOUT_CLASSIFICATION	4.035422867853655E-7	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999984819234286	WITHOUT_CLASSIFICATION	1.5180765713648408E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999816241500947	WITHOUT_CLASSIFICATION	1.8375849905260047E-5	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999529982633442	WITHOUT_CLASSIFICATION	4.700173665582427E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995964577133	WITHOUT_CLASSIFICATION	4.035422867853655E-7	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9923138304692813	WITHOUT_CLASSIFICATION	0.0076861695307186735	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999984502319957	WITHOUT_CLASSIFICATION	1.5497680043221128E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999987852195433	WITHOUT_CLASSIFICATION	1.2147804567040498E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999375466238	WITHOUT_CLASSIFICATION	6.245337629358772E-8	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999978862284039	WITHOUT_CLASSIFICATION	2.1137715960988142E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999976469102718	WITHOUT_CLASSIFICATION	2.3530897280995886E-6	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999669320434	WITHOUT_CLASSIFICATION	3.306795659655196E-8	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997478219025059	WITHOUT_CLASSIFICATION	2.521780974941271E-4	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802032375814	WITHOUT_CLASSIFICATION	1.9796762418628476E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998787377764	WITHOUT_CLASSIFICATION	1.2126222359955235E-7	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994348831514	WITHOUT_CLASSIFICATION	5.651168487008184E-7	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999999276398286	WITHOUT_CLASSIFICATION	7.236017139312835E-8	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999968268304365	WITHOUT_CLASSIFICATION	3.173169563495694E-5	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9998868147840527	WITHOUT_CLASSIFICATION	1.1318521594738403E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999990101875694	WITHOUT_CLASSIFICATION	9.898124304842113E-7	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999985316017713	WITHOUT_CLASSIFICATION	1.468398228753178E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999876657046	WITHOUT_CLASSIFICATION	1.2334295357860458E-8	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999932135699896	WITHOUT_CLASSIFICATION	6.786430010389642E-6	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999982616627366	WITHOUT_CLASSIFICATION	1.7383372634395715E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999932135699896	WITHOUT_CLASSIFICATION	6.786430010389642E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996825562649	WITHOUT_CLASSIFICATION	3.174437351179559E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999871850509	WITHOUT_CLASSIFICATION	1.2814949161760408E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999968375889235	WITHOUT_CLASSIFICATION	3.1624110764776583E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999993619444901	WITHOUT_CLASSIFICATION	6.380555098549301E-7	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999876657046	WITHOUT_CLASSIFICATION	1.2334295357860458E-8	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999982616627366	WITHOUT_CLASSIFICATION	1.7383372634395715E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996825562649	WITHOUT_CLASSIFICATION	3.174437351179559E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999978381445089	WITHOUT_CLASSIFICATION	2.16185549112867E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999453830013257	WITHOUT_CLASSIFICATION	5.461699867433477E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.997887057181569	WITHOUT_CLASSIFICATION	0.002112942818431036	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9979818846474361	WITHOUT_CLASSIFICATION	0.002018115352563975	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999250553106293	WITHOUT_CLASSIFICATION	7.494468937082427E-5	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999988430165563	WITHOUT_CLASSIFICATION	1.1569834436862067E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939290077847	WITHOUT_CLASSIFICATION	6.070992215338778E-6	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999871850509	WITHOUT_CLASSIFICATION	1.2814949161760408E-8	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999904112463	WITHOUT_CLASSIFICATION	9.588753772231674E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998823714685267	WITHOUT_CLASSIFICATION	1.1762853147330146E-4	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999925986481	WITHOUT_CLASSIFICATION	7.401351824102437E-9	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939290077847	WITHOUT_CLASSIFICATION	6.070992215338778E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999928316468809	WITHOUT_CLASSIFICATION	7.168353119036701E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939290077847	WITHOUT_CLASSIFICATION	6.070992215338778E-6	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999996275689	WITHOUT_CLASSIFICATION	3.7243109991748176E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999992608594768	WITHOUT_CLASSIFICATION	7.391405231355466E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999971898503346	WITHOUT_CLASSIFICATION	2.810149665394087E-6	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999910814524876	WITHOUT_CLASSIFICATION	8.9185475123114E-6	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999991146256547	WITHOUT_CLASSIFICATION	8.853743452167006E-7	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999918396213581	WITHOUT_CLASSIFICATION	8.160378641933662E-6	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999998976718445	WITHOUT_CLASSIFICATION	1.023281555389419E-7	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999915257800006	WITHOUT_CLASSIFICATION	8.474219999408362E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999999862067116	WITHOUT_CLASSIFICATION	1.3793288405571383E-7	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999982869608679	WITHOUT_CLASSIFICATION	1.7130391320347565E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999243519265242	WITHOUT_CLASSIFICATION	7.564807347574505E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999485668843	WITHOUT_CLASSIFICATION	5.1433115763733605E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.998565686605394	WITHOUT_CLASSIFICATION	0.0014343133946060317	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999996795065959	WITHOUT_CLASSIFICATION	3.2049340410129407E-6	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999417691711494	WITHOUT_CLASSIFICATION	5.8230828850561E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999980312302545	WITHOUT_CLASSIFICATION	1.968769745425083E-6	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999775280617571	WITHOUT_CLASSIFICATION	2.2471938242809277E-5	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999998458057	WITHOUT_CLASSIFICATION	1.5419430681016246E-10	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999555059632657	WITHOUT_CLASSIFICATION	4.449403673441454E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999328761624988	WITHOUT_CLASSIFICATION	6.712383750120387E-4	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997870782909696	WITHOUT_CLASSIFICATION	2.1292170903034608E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999997192823198	WITHOUT_CLASSIFICATION	2.8071768013376274E-7	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999956753333	WITHOUT_CLASSIFICATION	4.324666697596585E-9	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9985864673775645	WITHOUT_CLASSIFICATION	0.0014135326224354314	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9997483863829784	WITHOUT_CLASSIFICATION	2.5161361702157997E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999346952451691	WITHOUT_CLASSIFICATION	6.530475483084867E-5	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999997829538902	WITHOUT_CLASSIFICATION	2.1704610969299952E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999993972019433	WITHOUT_CLASSIFICATION	6.027980567024188E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999866236812507	WITHOUT_CLASSIFICATION	1.3376318749406192E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998773036565	WITHOUT_CLASSIFICATION	1.226963434920413E-7	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999457627436773	WITHOUT_CLASSIFICATION	5.42372563226951E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999983778235118	WITHOUT_CLASSIFICATION	1.6221764882595753E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999864395847825	WITHOUT_CLASSIFICATION	1.3560415217407006E-5	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999630881367976	WITHOUT_CLASSIFICATION	3.69118632024624E-5	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9999005345726816	WITHOUT_CLASSIFICATION	9.946542731848893E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995281644697	WITHOUT_CLASSIFICATION	4.7183553031994944E-7	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999995610270976	WITHOUT_CLASSIFICATION	4.3897290235534034E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.999972034398014	WITHOUT_CLASSIFICATION	2.7965601986134183E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999019848799512	WITHOUT_CLASSIFICATION	9.801512004872688E-5	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999998980743686	WITHOUT_CLASSIFICATION	1.019256314295523E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9915599564408183	WITHOUT_CLASSIFICATION	0.008440043559181666	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999901927963877	WITHOUT_CLASSIFICATION	9.807203612318938E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993745900541244	WITHOUT_CLASSIFICATION	6.254099458755274E-4	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999623664161643	WITHOUT_CLASSIFICATION	3.7633583835744416E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999623664161643	WITHOUT_CLASSIFICATION	3.7633583835744416E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9918970993818172	WITHOUT_CLASSIFICATION	0.008102900618182715	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999915257800006	WITHOUT_CLASSIFICATION	8.474219999408362E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999566704444082	WITHOUT_CLASSIFICATION	4.3329555591814944E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999984583948	WITHOUT_CLASSIFICATION	1.541605159997495E-9	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999968815268928	WITHOUT_CLASSIFICATION	3.1184731071529253E-6	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9995086684476615	WITHOUT_CLASSIFICATION	4.913315523384518E-4	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999845041236092	WITHOUT_CLASSIFICATION	1.5495876390871796E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999738915754055	WITHOUT_CLASSIFICATION	2.6108424594518715E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999993487505987	WITHOUT_CLASSIFICATION	6.512494012060525E-7	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999993492265	WITHOUT_CLASSIFICATION	6.507735233230316E-10	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997469447239039	WITHOUT_CLASSIFICATION	2.5305527609608807E-4	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999998277934737	WITHOUT_CLASSIFICATION	1.7220652632552726E-7	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999938394048588	WITHOUT_CLASSIFICATION	6.16059514120522E-6	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999468725762	WITHOUT_CLASSIFICATION	5.31274239216298E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999998866869282	WITHOUT_CLASSIFICATION	1.1331307182700998E-7	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999459672935616	WITHOUT_CLASSIFICATION	5.4032706438446024E-5	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999999968777026	WITHOUT_CLASSIFICATION	3.122297393006972E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999980469446	WITHOUT_CLASSIFICATION	1.953055391932274E-8	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999873279404	WITHOUT_CLASSIFICATION	1.2672059597293301E-8	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998184437627151	WITHOUT_CLASSIFICATION	1.8155623728493888E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998617343061	WITHOUT_CLASSIFICATION	1.3826569390204022E-7	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999389970634146	WITHOUT_CLASSIFICATION	6.100293658539299E-4	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999963435427644	WITHOUT_CLASSIFICATION	3.6564572356145325E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997621048273	WITHOUT_CLASSIFICATION	2.3789517272576598E-7	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9915599564408183	WITHOUT_CLASSIFICATION	0.008440043559181666	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999988300628057	WITHOUT_CLASSIFICATION	1.1699371943631303E-6	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999871103402	WITHOUT_CLASSIFICATION	1.2889659838572698E-8	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999796471752	WITHOUT_CLASSIFICATION	2.035282480737877E-8	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999987870242069	WITHOUT_CLASSIFICATION	1.2129757931451711E-6	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9984014631601259	WITHOUT_CLASSIFICATION	0.0015985368398741774	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998967491448191	WITHOUT_CLASSIFICATION	1.032508551808888E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999998724186947	WITHOUT_CLASSIFICATION	1.2758130529251307E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999995156256803	WITHOUT_CLASSIFICATION	4.843743196762206E-7	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999644238258	WITHOUT_CLASSIFICATION	3.557617428243155E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999995585084008	WITHOUT_CLASSIFICATION	4.414915991715099E-7	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999952927882294	WITHOUT_CLASSIFICATION	4.7072117705968064E-6	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999994362508486	WITHOUT_CLASSIFICATION	5.63749151335802E-7	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999999863355311	WITHOUT_CLASSIFICATION	1.366446889149907E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999978967962568	WITHOUT_CLASSIFICATION	2.103203743163732E-6	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997629241086361	WITHOUT_CLASSIFICATION	2.3707589136388483E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997629241086361	WITHOUT_CLASSIFICATION	2.3707589136388483E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999972478848901	WITHOUT_CLASSIFICATION	2.752115109962525E-6	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999469503268517	WITHOUT_CLASSIFICATION	5.30496731483915E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999995983025269	WITHOUT_CLASSIFICATION	4.016974731348305E-7	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999995983025269	WITHOUT_CLASSIFICATION	4.016974731348305E-7	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999279001015	WITHOUT_CLASSIFICATION	7.209989847324681E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999960168578859	WITHOUT_CLASSIFICATION	3.9831421141216036E-6	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9318935562545666	WITHOUT_CLASSIFICATION	0.06810644374543341	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999915919691	WITHOUT_CLASSIFICATION	8.408030938472493E-9	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998707898721	WITHOUT_CLASSIFICATION	1.2921012792952862E-7	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999991878054487	WITHOUT_CLASSIFICATION	8.121945513453989E-7	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999929457967	WITHOUT_CLASSIFICATION	7.0542033763190095E-9	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999929457967	WITHOUT_CLASSIFICATION	7.0542033763190095E-9	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999997442300956	WITHOUT_CLASSIFICATION	2.5576990439853637E-6	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999993723510152	WITHOUT_CLASSIFICATION	6.276489848021667E-7	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999978819544793	WITHOUT_CLASSIFICATION	2.1180455207497053E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999986441025469	WITHOUT_CLASSIFICATION	1.355897453101295E-6	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999986441025469	WITHOUT_CLASSIFICATION	1.355897453101295E-6	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998889324928	WITHOUT_CLASSIFICATION	1.1106750721652551E-7	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999839401042991	WITHOUT_CLASSIFICATION	1.6059895700918132E-5	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999951461678	WITHOUT_CLASSIFICATION	4.853832237882404E-9	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999996681148768	WITHOUT_CLASSIFICATION	3.3188512312740004E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999997921221263	WITHOUT_CLASSIFICATION	2.0787787375804633E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999994718503555	WITHOUT_CLASSIFICATION	5.281496444557199E-7	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999984534494001	WITHOUT_CLASSIFICATION	1.5465505998665774E-6	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999883730548624	WITHOUT_CLASSIFICATION	1.162694513755485E-5	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998360493735	WITHOUT_CLASSIFICATION	1.6395062662097018E-7	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999993354486699	WITHOUT_CLASSIFICATION	6.645513302161232E-7	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999998779278612	WITHOUT_CLASSIFICATION	1.2207213873387324E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.999421376065096	WITHOUT_CLASSIFICATION	5.786239349041023E-4	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9739310770023514	WITHOUT_CLASSIFICATION	0.02606892299764859	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999789595967999	WITHOUT_CLASSIFICATION	2.1040403200015352E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999888314613121	WITHOUT_CLASSIFICATION	1.1168538687879704E-5	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999844123298	WITHOUT_CLASSIFICATION	1.5587670235202538E-8	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999391638922925	WITHOUT_CLASSIFICATION	6.083610770749262E-5	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999998268482223	WITHOUT_CLASSIFICATION	1.7315177777181002E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.999992603761702	WITHOUT_CLASSIFICATION	7.396238298031103E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999986181159146	WITHOUT_CLASSIFICATION	1.3818840853373514E-6	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999997121748524	WITHOUT_CLASSIFICATION	2.8782514759201834E-6	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999772402600791	WITHOUT_CLASSIFICATION	2.2759739920954473E-5	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999526646895978	WITHOUT_CLASSIFICATION	4.733531040218908E-4	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999973446896249	WITHOUT_CLASSIFICATION	2.6553103750925285E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999983822092122	WITHOUT_CLASSIFICATION	1.6177907878046505E-6	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.999999998044394	WITHOUT_CLASSIFICATION	1.955606023686281E-9	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999505632085	WITHOUT_CLASSIFICATION	4.943679158697531E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999621455497213	WITHOUT_CLASSIFICATION	3.785445027871679E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999841730219	WITHOUT_CLASSIFICATION	1.5826978091720245E-7	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999986570022659	WITHOUT_CLASSIFICATION	1.3429977341979818E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9985953569409126	WITHOUT_CLASSIFICATION	0.0014046430590873118	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999997026626883	WITHOUT_CLASSIFICATION	2.9733731164961363E-7	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999998871680319	WITHOUT_CLASSIFICATION	1.1283196814137061E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999918538788976	WITHOUT_CLASSIFICATION	8.146121102340463E-6	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999939393306055	WITHOUT_CLASSIFICATION	6.060669394436798E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999877983029809	WITHOUT_CLASSIFICATION	1.2201697018972907E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9996503456333286	WITHOUT_CLASSIFICATION	3.496543666713516E-4	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999737942833	WITHOUT_CLASSIFICATION	2.6205716745153193E-8	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999976175575686	WITHOUT_CLASSIFICATION	2.382442431487279E-6	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999754583858	WITHOUT_CLASSIFICATION	2.4541614218970992E-8	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999997688750497	WITHOUT_CLASSIFICATION	2.3112495022480125E-7	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999994107364577	WITHOUT_CLASSIFICATION	5.892635422806871E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999996921451151	WITHOUT_CLASSIFICATION	3.078548850141486E-7	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999857462221798	WITHOUT_CLASSIFICATION	1.4253777820303553E-5	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999873886593561	WITHOUT_CLASSIFICATION	1.2611340643794251E-5	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999999803359898	WITHOUT_CLASSIFICATION	1.9664010197864282E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999972073527917	WITHOUT_CLASSIFICATION	2.7926472083046607E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999989550040397	WITHOUT_CLASSIFICATION	1.0449959603473817E-6	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999991368465023	WITHOUT_CLASSIFICATION	8.631534976334677E-7	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999996687706166	WITHOUT_CLASSIFICATION	3.3122938332800707E-7	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999910202255575	WITHOUT_CLASSIFICATION	8.979774442583415E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9628586549993322	WITHOUT_CLASSIFICATION	0.037141345000667875	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9983721263343113	WITHOUT_CLASSIFICATION	0.0016278736656887979	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999941262676425	WITHOUT_CLASSIFICATION	5.873732357475077E-6	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999996356731242	WITHOUT_CLASSIFICATION	3.6432687576167063E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999767462243406	WITHOUT_CLASSIFICATION	2.3253775659404764E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999999620689412	WITHOUT_CLASSIFICATION	3.7931058807494806E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999999870472707	WITHOUT_CLASSIFICATION	1.2952729307835152E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999802619251384	WITHOUT_CLASSIFICATION	1.9738074861573642E-5	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999948558713085	WITHOUT_CLASSIFICATION	5.144128691482198E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988517465308	WITHOUT_CLASSIFICATION	1.1482534691063212E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999988517465308	WITHOUT_CLASSIFICATION	1.1482534691063212E-6	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999983265289	WITHOUT_CLASSIFICATION	1.6734710447611584E-9	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999967525133577	WITHOUT_CLASSIFICATION	3.247486642312501E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999970811405058	WITHOUT_CLASSIFICATION	2.9188594941365145E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999966053534	WITHOUT_CLASSIFICATION	3.3946466045141874E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999998551165585	WITHOUT_CLASSIFICATION	1.448834414692079E-7	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999881175664772	WITHOUT_CLASSIFICATION	1.1882433522790619E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999999997280063	WITHOUT_CLASSIFICATION	2.7199370911865857E-9	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9998972847318373	WITHOUT_CLASSIFICATION	1.0271526816268018E-4	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999998781288181	WITHOUT_CLASSIFICATION	1.218711819325011E-7	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999998840128935	WITHOUT_CLASSIFICATION	1.1598710650916928E-7	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999999154066157	WITHOUT_CLASSIFICATION	8.459338425852192E-8	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999983772486114	WITHOUT_CLASSIFICATION	1.622751388683187E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994683716352	WITHOUT_CLASSIFICATION	5.316283647810262E-7	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999953036309499	WITHOUT_CLASSIFICATION	4.696369050142272E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999512437106604	WITHOUT_CLASSIFICATION	4.8756289339686574E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999512437106604	WITHOUT_CLASSIFICATION	4.8756289339686574E-5	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.99999999993483	WITHOUT_CLASSIFICATION	6.516990204093566E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999992948891935	WITHOUT_CLASSIFICATION	7.05110806552088E-7	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999692424055	WITHOUT_CLASSIFICATION	3.075759447188849E-8	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999946838424	WITHOUT_CLASSIFICATION	5.316157568513359E-9	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999986854227999	WITHOUT_CLASSIFICATION	1.314577200057339E-6	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995517633852	WITHOUT_CLASSIFICATION	4.482366147792482E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999848195971007	WITHOUT_CLASSIFICATION	1.5180402899334277E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9983179230099917	WITHOUT_CLASSIFICATION	0.001682076990008323	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999803434642	WITHOUT_CLASSIFICATION	1.9656535734699824E-8	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999997400379683	WITHOUT_CLASSIFICATION	2.5996203169943657E-7	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999158237891	WITHOUT_CLASSIFICATION	8.417621087041059E-8	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999998310797259	WITHOUT_CLASSIFICATION	1.6892027413284396E-7	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999979070716	WITHOUT_CLASSIFICATION	2.0929283965071546E-9	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999982102724937	WITHOUT_CLASSIFICATION	1.7897275064140014E-6	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999998640072045	WITHOUT_CLASSIFICATION	1.359927954749225E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999700102287	WITHOUT_CLASSIFICATION	2.998977137135426E-8	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999515757218795	WITHOUT_CLASSIFICATION	4.842427812045839E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999997643367297	WITHOUT_CLASSIFICATION	2.356632704497106E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999309404741	WITHOUT_CLASSIFICATION	6.905952588575999E-8	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999671514818	WITHOUT_CLASSIFICATION	3.2848518176859934E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999405836294	WITHOUT_CLASSIFICATION	5.941637049932835E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998988342584	WITHOUT_CLASSIFICATION	1.0116574152654614E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998073107272	WITHOUT_CLASSIFICATION	1.9268927288239905E-7	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999927108117822	WITHOUT_CLASSIFICATION	7.289188217804323E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999952070727601	WITHOUT_CLASSIFICATION	4.792927239864609E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998862362590445	WITHOUT_CLASSIFICATION	1.1376374095546565E-4	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999933429321488	WITHOUT_CLASSIFICATION	6.65706785124363E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9952026656729729	WITHOUT_CLASSIFICATION	0.004797334327027049	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999947549021534	WITHOUT_CLASSIFICATION	5.245097846542313E-6	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999997206342514	WITHOUT_CLASSIFICATION	2.793657486231174E-7	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999967143885812	WITHOUT_CLASSIFICATION	3.2856114187570277E-6	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998758678418	WITHOUT_CLASSIFICATION	1.2413215823440873E-7	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999068380311457	WITHOUT_CLASSIFICATION	9.31619688543428E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999909178325749	WITHOUT_CLASSIFICATION	9.082167425132427E-6	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9995733957859287	WITHOUT_CLASSIFICATION	4.266042140712618E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999175050371	WITHOUT_CLASSIFICATION	8.249496295591053E-8	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999964041100238	WITHOUT_CLASSIFICATION	3.5958899763175237E-6	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999757705633	WITHOUT_CLASSIFICATION	2.4229436692923415E-7	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999985012894506	WITHOUT_CLASSIFICATION	1.4987105493716994E-6	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999760701388	WITHOUT_CLASSIFICATION	2.3929861213025284E-8	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999159915018423	WITHOUT_CLASSIFICATION	8.40084981577431E-5	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999159915018423	WITHOUT_CLASSIFICATION	8.40084981577431E-5	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999991912738113	WITHOUT_CLASSIFICATION	8.087261886914363E-7	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999971839673968	WITHOUT_CLASSIFICATION	2.816032603262088E-6	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999119187743434	WITHOUT_CLASSIFICATION	8.80812256566497E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999998110894129	WITHOUT_CLASSIFICATION	1.8891058710771175E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999274500593632	WITHOUT_CLASSIFICATION	7.254994063679616E-5	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999609081611	WITHOUT_CLASSIFICATION	3.9091838862007846E-8	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998962728867404	WITHOUT_CLASSIFICATION	1.0372711325967042E-4	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999967923458853	WITHOUT_CLASSIFICATION	3.207654114689926E-6	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999999173273528	WITHOUT_CLASSIFICATION	8.267264710788713E-8	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997530301741	WITHOUT_CLASSIFICATION	2.4696982590975737E-7	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995818126175	WITHOUT_CLASSIFICATION	4.1818738247630547E-7	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999983696549516	WITHOUT_CLASSIFICATION	1.6303450483017083E-6	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999196118781507	WITHOUT_CLASSIFICATION	8.038812184927527E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999996772121268	WITHOUT_CLASSIFICATION	3.2278787324859613E-7	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999140377242075	WITHOUT_CLASSIFICATION	8.596227579250343E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9963491306102491	WITHOUT_CLASSIFICATION	0.0036508693897509743	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999544007583	WITHOUT_CLASSIFICATION	4.559924157034499E-8	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999444091303	WITHOUT_CLASSIFICATION	5.5590869775628506E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999741681881008	WITHOUT_CLASSIFICATION	2.5831811899097764E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999989595083487	WITHOUT_CLASSIFICATION	1.0404916512408093E-6	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999544981341	WITHOUT_CLASSIFICATION	4.550186595225386E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999942994388889	WITHOUT_CLASSIFICATION	5.700561111097082E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999955737102384	WITHOUT_CLASSIFICATION	4.426289761634838E-6	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9998407679196342	WITHOUT_CLASSIFICATION	1.5923208036593375E-4	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999726482503882	WITHOUT_CLASSIFICATION	2.7351749611859665E-5	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999736125081768	WITHOUT_CLASSIFICATION	2.63874918230923E-5	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999999883999255	WITHOUT_CLASSIFICATION	1.1600074505870188E-7	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999157269225	WITHOUT_CLASSIFICATION	8.427307752275893E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9997661084830749	WITHOUT_CLASSIFICATION	2.3389151692512322E-4	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9469867278589531	WITHOUT_CLASSIFICATION	0.05301327214104695	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999853412646389	WITHOUT_CLASSIFICATION	1.4658735361126286E-5	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.996839156022833	WITHOUT_CLASSIFICATION	0.003160843977166926	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999710942877	WITHOUT_CLASSIFICATION	2.8905712326494443E-8	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999542944582	WITHOUT_CLASSIFICATION	4.57055417950946E-8	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999973447676	WITHOUT_CLASSIFICATION	2.655232326854952E-9	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999527363444588	WITHOUT_CLASSIFICATION	4.726365554115821E-5	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999960250681694	WITHOUT_CLASSIFICATION	3.97493183054547E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999015414844	WITHOUT_CLASSIFICATION	9.845851554479322E-8	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999998104464359	WITHOUT_CLASSIFICATION	1.8955356410168406E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999690727824716	WITHOUT_CLASSIFICATION	3.0927217528414434E-5	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999526682314529	WITHOUT_CLASSIFICATION	4.73317685469976E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999998466831939	WITHOUT_CLASSIFICATION	1.5331680623222177E-7	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999904436171	WITHOUT_CLASSIFICATION	9.556382934167858E-9	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999995998642	WITHOUT_CLASSIFICATION	4.001357755543768E-10	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999397181273103	WITHOUT_CLASSIFICATION	6.028187268956509E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999965480531389	WITHOUT_CLASSIFICATION	3.45194686121441E-6	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999883825239313	WITHOUT_CLASSIFICATION	1.1617476068713347E-5	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994683716352	WITHOUT_CLASSIFICATION	5.316283647810262E-7	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999996597294	WITHOUT_CLASSIFICATION	3.402705721698743E-10	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999998084087155	WITHOUT_CLASSIFICATION	1.9159128442551617E-7	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9992490131980879	WITHOUT_CLASSIFICATION	7.509868019122353E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9995924307576717	WITHOUT_CLASSIFICATION	4.0756924232827066E-4	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999990526932676	WITHOUT_CLASSIFICATION	9.473067324630815E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999323740672816	WITHOUT_CLASSIFICATION	6.762593271837327E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9953345486067676	WITHOUT_CLASSIFICATION	0.00466545139323237	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999118275292315	WITHOUT_CLASSIFICATION	8.817247076855276E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999968719557	WITHOUT_CLASSIFICATION	3.128044146328217E-9	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997926050222035	WITHOUT_CLASSIFICATION	2.0739497779644417E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999962418150169	WITHOUT_CLASSIFICATION	3.7581849830674993E-6	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999999706468517	WITHOUT_CLASSIFICATION	2.9353148299006747E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999769354694	WITHOUT_CLASSIFICATION	2.3064530611171585E-8	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998204314869	WITHOUT_CLASSIFICATION	1.7956851294004787E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926274305149	WITHOUT_CLASSIFICATION	7.3725694850972865E-6	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9994271368338218	WITHOUT_CLASSIFICATION	5.728631661782461E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998087811941	WITHOUT_CLASSIFICATION	1.9121880576329778E-7	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999977679224741	WITHOUT_CLASSIFICATION	2.232077525894498E-5	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999959137456863	WITHOUT_CLASSIFICATION	4.086254313691175E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926274305149	WITHOUT_CLASSIFICATION	7.3725694850972865E-6	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999994492409483	WITHOUT_CLASSIFICATION	5.50759051725426E-7	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999977972186	WITHOUT_CLASSIFICATION	2.2027813891048875E-9	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999900178432475	WITHOUT_CLASSIFICATION	9.982156752581244E-6	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999960381876	WITHOUT_CLASSIFICATION	3.961812471918696E-9	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999996601089794	WITHOUT_CLASSIFICATION	3.3989102049473024E-7	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999993023573	WITHOUT_CLASSIFICATION	6.976428237487145E-10	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999471083153	WITHOUT_CLASSIFICATION	5.289168465376324E-8	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.99973089172479	WITHOUT_CLASSIFICATION	2.691082752100819E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999768704283	WITHOUT_CLASSIFICATION	2.3129571645424728E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999849242188363	WITHOUT_CLASSIFICATION	1.507578116361514E-5	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.99968129977711	WITHOUT_CLASSIFICATION	3.187002228900345E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999977826695076	WITHOUT_CLASSIFICATION	2.2173304925317372E-6	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999595697675	WITHOUT_CLASSIFICATION	4.043023260746584E-8	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9720822784927156	WITHOUT_CLASSIFICATION	0.027917721507284474	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9965838719788349	WITHOUT_CLASSIFICATION	0.0034161280211650823	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999997621048273	WITHOUT_CLASSIFICATION	2.3789517272576598E-7	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999997084995191	WITHOUT_CLASSIFICATION	2.91500480889438E-7	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999451813648	WITHOUT_CLASSIFICATION	5.4818635105005565E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9975139495932338	WITHOUT_CLASSIFICATION	0.0024860504067662124	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9997280800168192	WITHOUT_CLASSIFICATION	2.71919983180758E-4	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999937669241805	WITHOUT_CLASSIFICATION	6.233075819501748E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999984325926552	WITHOUT_CLASSIFICATION	1.5674073448092887E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999997849701165	WITHOUT_CLASSIFICATION	2.150298835203683E-7	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999741668627	WITHOUT_CLASSIFICATION	2.583313731196654E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999998783997	WITHOUT_CLASSIFICATION	1.216001830915558E-10	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999152361811	WITHOUT_CLASSIFICATION	8.476381887297748E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999991686902553	WITHOUT_CLASSIFICATION	8.313097447552743E-7	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999989772114589	WITHOUT_CLASSIFICATION	1.0227885410455077E-6	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.5735671370781407	WITHOUT_CLASSIFICATION	0.4264328629218594	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9825723088642017	IMPLEMENTATION	0.01742769113579839	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999992997785703	WITHOUT_CLASSIFICATION	7.002214297436435E-7	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998186160185458	WITHOUT_CLASSIFICATION	1.813839814542457E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999880341842845	WITHOUT_CLASSIFICATION	1.1965815715385285E-5	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999978520242084	WITHOUT_CLASSIFICATION	2.14797579165696E-6	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999979327336314	WITHOUT_CLASSIFICATION	2.0672663686095534E-5	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999870490375	WITHOUT_CLASSIFICATION	1.2950962490599356E-8	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999998169504841	WITHOUT_CLASSIFICATION	1.830495158090536E-7	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999995226778604	WITHOUT_CLASSIFICATION	4.773221395798853E-7	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999996836058	WITHOUT_CLASSIFICATION	3.1639423108339356E-10	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999990685461769	WITHOUT_CLASSIFICATION	9.314538230073968E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9964261624736618	WITHOUT_CLASSIFICATION	0.0035738375263382645	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9964261624736618	WITHOUT_CLASSIFICATION	0.0035738375263382645	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999934746341683	WITHOUT_CLASSIFICATION	6.52536583166696E-6	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994304057561	WITHOUT_CLASSIFICATION	5.695942439862169E-7	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998951834491	WITHOUT_CLASSIFICATION	1.0481655093631348E-7	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.731034975985742	IMPLEMENTATION	0.2689650240142581	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999990749287431	WITHOUT_CLASSIFICATION	9.250712568892845E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999990749287431	WITHOUT_CLASSIFICATION	9.250712568892845E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999903009768085	WITHOUT_CLASSIFICATION	9.699023191563883E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999771311965	WITHOUT_CLASSIFICATION	2.2868803466065597E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999877702262471	WITHOUT_CLASSIFICATION	1.2229773752800617E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999954453773586	WITHOUT_CLASSIFICATION	4.5546226414036695E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999659703475	WITHOUT_CLASSIFICATION	3.402965263870395E-8	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999911408862396	WITHOUT_CLASSIFICATION	8.859113760343333E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999991866124084	WITHOUT_CLASSIFICATION	8.133875915399015E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999995739140096	WITHOUT_CLASSIFICATION	4.26085990371077E-7	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999999993237728	WITHOUT_CLASSIFICATION	6.762272057060023E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995444736968	WITHOUT_CLASSIFICATION	4.5552630319751997E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995444736968	WITHOUT_CLASSIFICATION	4.5552630319751997E-7	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999989850702414	WITHOUT_CLASSIFICATION	1.0149297585828567E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999986785337166	WITHOUT_CLASSIFICATION	1.321466283423659E-6	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999174361486	WITHOUT_CLASSIFICATION	8.25638513761905E-8	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999045582460874	WITHOUT_CLASSIFICATION	9.54417539125585E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999952575222605	WITHOUT_CLASSIFICATION	4.7424777395692575E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998599599651	WITHOUT_CLASSIFICATION	1.4004003493801648E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933582199878	WITHOUT_CLASSIFICATION	6.641780012203723E-6	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999984239472213	WITHOUT_CLASSIFICATION	1.57605277883713E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999955187837307	WITHOUT_CLASSIFICATION	4.48121626921842E-6	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999436520411269	WITHOUT_CLASSIFICATION	5.634795887303886E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999999143775299	WITHOUT_CLASSIFICATION	8.562247009411224E-7	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999849242188363	WITHOUT_CLASSIFICATION	1.507578116361514E-5	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998897048824	WITHOUT_CLASSIFICATION	1.1029511760434548E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999962940791742	WITHOUT_CLASSIFICATION	3.705920825649763E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999993868339638	WITHOUT_CLASSIFICATION	6.13166036181942E-7	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999957969929156	WITHOUT_CLASSIFICATION	4.203007084356084E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999981977811861	WITHOUT_CLASSIFICATION	1.802218813795776E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999979722431976	WITHOUT_CLASSIFICATION	2.027756802399877E-6	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999996091016409	WITHOUT_CLASSIFICATION	3.908983591037786E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999958568788007	WITHOUT_CLASSIFICATION	4.143121199368735E-6	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999998510290181	WITHOUT_CLASSIFICATION	1.489709818979102E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999881471742994	WITHOUT_CLASSIFICATION	1.1852825700717753E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999881471742994	WITHOUT_CLASSIFICATION	1.1852825700717753E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999995964577133	WITHOUT_CLASSIFICATION	4.035422867853655E-7	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9988929076171371	WITHOUT_CLASSIFICATION	0.0011070923828628517	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9997844210714827	WITHOUT_CLASSIFICATION	2.1557892851734446E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999554953479955	WITHOUT_CLASSIFICATION	4.4504652004503475E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999940689095725	WITHOUT_CLASSIFICATION	5.93109042736552E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999998004085296	WITHOUT_CLASSIFICATION	1.9959147040727288E-7	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999990101875694	WITHOUT_CLASSIFICATION	9.898124304842113E-7	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999166865874	WITHOUT_CLASSIFICATION	8.331341263938745E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999978381445089	WITHOUT_CLASSIFICATION	2.16185549112867E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999486343490532	WITHOUT_CLASSIFICATION	5.136565094671448E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939290077847	WITHOUT_CLASSIFICATION	6.070992215338778E-6	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9933734089426485	WITHOUT_CLASSIFICATION	0.006626591057351543	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9993973916493009	WITHOUT_CLASSIFICATION	6.02608350699065E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998279240485	WITHOUT_CLASSIFICATION	1.7207595150553144E-7	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999822064766	WITHOUT_CLASSIFICATION	1.7793523401078072E-8	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999993900105449	WITHOUT_CLASSIFICATION	6.099894549896954E-7	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999541391486	WITHOUT_CLASSIFICATION	4.586085158475552E-8	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999985405045756	WITHOUT_CLASSIFICATION	1.4594954245151882E-6	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998684291295339	WITHOUT_CLASSIFICATION	1.3157087046607134E-4	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999215495	WITHOUT_CLASSIFICATION	7.845057375016967E-11	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.99999999877514	WITHOUT_CLASSIFICATION	1.2248599979140472E-9	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999294665962	WITHOUT_CLASSIFICATION	7.053340377443365E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999951461678	WITHOUT_CLASSIFICATION	4.853832237882404E-9	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999959738	WITHOUT_CLASSIFICATION	4.0261589635789045E-12	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995071268495	WITHOUT_CLASSIFICATION	4.928731504618942E-7	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995071268495	WITHOUT_CLASSIFICATION	4.928731504618942E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999942727697374	WITHOUT_CLASSIFICATION	5.727230262641692E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9996185841120282	WITHOUT_CLASSIFICATION	3.8141588797181795E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999790477662359	WITHOUT_CLASSIFICATION	2.0952233763999428E-5	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999999712360684	WITHOUT_CLASSIFICATION	2.876393160277209E-7	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999994196276208	WITHOUT_CLASSIFICATION	5.803723791736799E-7	IMPLEMENTATION
