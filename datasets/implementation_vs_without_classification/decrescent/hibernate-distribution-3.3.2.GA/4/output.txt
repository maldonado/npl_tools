todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9849074484592536	WITHOUT_CLASSIFICATION	0.0150925515407464	IMPLEMENTATION
todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9849074484592536	WITHOUT_CLASSIFICATION	0.0150925515407464	IMPLEMENTATION
TODO: return new Lock(ts);	IMPLEMENTATION	0.9617567723979847	WITHOUT_CLASSIFICATION	0.03824322760201529	IMPLEMENTATION
TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.7948696145100331	IMPLEMENTATION	0.20513038548996682	WITHOUT_CLASSIFICATION
TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.8990959918538217	WITHOUT_CLASSIFICATION	0.1009040081461783	IMPLEMENTATION
TODO: handle TypeDefs	IMPLEMENTATION	0.9453814189679055	IMPLEMENTATION	0.0546185810320946	WITHOUT_CLASSIFICATION
TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9539313882632383	WITHOUT_CLASSIFICATION	0.04606861173676179	IMPLEMENTATION
TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9865282413441565	WITHOUT_CLASSIFICATION	0.013471758655843557	IMPLEMENTATION
TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.7789711937794669	WITHOUT_CLASSIFICATION	0.22102880622053314	IMPLEMENTATION
TODO: native ids	IMPLEMENTATION	0.7263905931677607	IMPLEMENTATION	0.2736094068322394	WITHOUT_CLASSIFICATION
TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9413320197241855	WITHOUT_CLASSIFICATION	0.0586679802758146	IMPLEMENTATION
TODO: handle property-ref	IMPLEMENTATION	0.966992875236624	IMPLEMENTATION	0.03300712476337605	WITHOUT_CLASSIFICATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.7415131243685077	WITHOUT_CLASSIFICATION	0.25848687563149236	IMPLEMENTATION
TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.7415131243685077	WITHOUT_CLASSIFICATION	0.25848687563149236	IMPLEMENTATION
TODO: Check if Mimer SQL cannot handle the way DB2 does	IMPLEMENTATION	0.9953403086547473	IMPLEMENTATION	0.004659691345252646	WITHOUT_CLASSIFICATION
TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.9581670049241319	IMPLEMENTATION	0.041832995075868254	WITHOUT_CLASSIFICATION
TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9970732911402858	IMPLEMENTATION	0.0029267088597143527	WITHOUT_CLASSIFICATION
TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9996832486476503	WITHOUT_CLASSIFICATION	3.1675135234961025E-4	IMPLEMENTATION
add an entry for this type of entity. we can be assured that all referenced entities have already been processed, so specify that this entity is with the latest batch. doing the batch number before adding the name to the list is a faster way to get an accurate number.	IMPLEMENTATION	0.9999999960383691	WITHOUT_CLASSIFICATION	3.961630917834942E-9	IMPLEMENTATION
TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.8994027397286398	WITHOUT_CLASSIFICATION	0.10059726027136015	IMPLEMENTATION
TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9455432168442095	IMPLEMENTATION	0.05445678315579044	WITHOUT_CLASSIFICATION
we could move this inside if we wanted to tolerate collection initializations during collection dirty checking:	IMPLEMENTATION	0.9997717477798241	WITHOUT_CLASSIFICATION	2.2825222017588737E-4	IMPLEMENTATION
TODO: assertion only, could be optimized away	IMPLEMENTATION	0.7454347664968336	IMPLEMENTATION	0.25456523350316634	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9998517741463075	IMPLEMENTATION	1.482258536924794E-4	WITHOUT_CLASSIFICATION
TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9998517741463075	IMPLEMENTATION	1.482258536924794E-4	WITHOUT_CLASSIFICATION
TODO : why aren't these the same?	IMPLEMENTATION	0.9976398688820993	IMPLEMENTATION	0.0023601311179006694	WITHOUT_CLASSIFICATION
TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9221116091273263	WITHOUT_CLASSIFICATION	0.07788839087267377	IMPLEMENTATION
TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9924510152666328	IMPLEMENTATION	0.007548984733367253	WITHOUT_CLASSIFICATION
TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.7791425458903916	IMPLEMENTATION	0.22085745410960836	WITHOUT_CLASSIFICATION
TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.9886042952508445	IMPLEMENTATION	0.011395704749155529	WITHOUT_CLASSIFICATION
TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.7712499338562954	WITHOUT_CLASSIFICATION	0.22875006614370466	IMPLEMENTATION
TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.960561022605132	IMPLEMENTATION	0.039438977394868	WITHOUT_CLASSIFICATION
todo : look at optimizing these...	IMPLEMENTATION	0.9921528555471878	WITHOUT_CLASSIFICATION	0.007847144452812163	IMPLEMENTATION
TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9392442666360489	IMPLEMENTATION	0.06075573336395106	WITHOUT_CLASSIFICATION
TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.9593998750196403	IMPLEMENTATION	0.04060012498035972	WITHOUT_CLASSIFICATION
TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.964813134094314	WITHOUT_CLASSIFICATION	0.0351868659056859	IMPLEMENTATION
TODO: not visible to the user!	IMPLEMENTATION	0.5482926115522679	WITHOUT_CLASSIFICATION	0.4517073884477321	IMPLEMENTATION
TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.5933429692223368	WITHOUT_CLASSIFICATION	0.40665703077766335	IMPLEMENTATION
TODO: use these in methods above	IMPLEMENTATION	0.5245138088406979	WITHOUT_CLASSIFICATION	0.4754861911593022	IMPLEMENTATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9702587535939937	IMPLEMENTATION	0.02974124640600634	WITHOUT_CLASSIFICATION
TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9702587535939937	IMPLEMENTATION	0.02974124640600634	WITHOUT_CLASSIFICATION
TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.8281942148315014	WITHOUT_CLASSIFICATION	0.17180578516849862	IMPLEMENTATION
todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.999797421750505	WITHOUT_CLASSIFICATION	2.025782494950471E-4	IMPLEMENTATION
TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9986834817500702	WITHOUT_CLASSIFICATION	0.0013165182499298635	IMPLEMENTATION
TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9817104331994875	IMPLEMENTATION	0.018289566800512577	WITHOUT_CLASSIFICATION
TODO: add owner argument!!	IMPLEMENTATION	0.8929517503201913	IMPLEMENTATION	0.10704824967980876	WITHOUT_CLASSIFICATION
TODO: formulas ?	IMPLEMENTATION	0.9709180740344534	WITHOUT_CLASSIFICATION	0.029081925965546554	IMPLEMENTATION
TODO: include the rowids!!!!	IMPLEMENTATION	0.5176882100793417	WITHOUT_CLASSIFICATION	0.4823117899206581	IMPLEMENTATION
todo : cache this sql...	IMPLEMENTATION	0.999791329802277	WITHOUT_CLASSIFICATION	2.0867019772285327E-4	IMPLEMENTATION
TODO: create uk loaders for component properties	IMPLEMENTATION	0.9781238777411891	IMPLEMENTATION	0.021876122258810873	WITHOUT_CLASSIFICATION
TODO: cache this in an instvar	IMPLEMENTATION	0.9604798073619842	WITHOUT_CLASSIFICATION	0.039520192638015886	IMPLEMENTATION
/ TODO : look at perhaps caching this...	IMPLEMENTATION	0.9837106469297086	IMPLEMENTATION	0.01628935307029145	WITHOUT_CLASSIFICATION
TODO: eventually put this back in, once we think all is fixed Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9646292739438455	IMPLEMENTATION	0.035370726056154614	WITHOUT_CLASSIFICATION
TODO: if we support multiple fetch groups, we would need to clone the set of lazy properties!	IMPLEMENTATION	0.9652470111165897	IMPLEMENTATION	0.034752988883410336	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.8826361167104069	IMPLEMENTATION	0.11736388328959321	WITHOUT_CLASSIFICATION
TODO: terrible implementation!	IMPLEMENTATION	0.9995567934124562	IMPLEMENTATION	4.43206587543848E-4	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.8826361167104069	IMPLEMENTATION	0.11736388328959321	WITHOUT_CLASSIFICATION
TODO: I don't really like this implementation; it would be better if this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9998425958169844	IMPLEMENTATION	1.5740418301566977E-4	WITHOUT_CLASSIFICATION
TODO: check if key contains the owner ID	IMPLEMENTATION	0.9887085127976034	IMPLEMENTATION	0.01129148720239658	WITHOUT_CLASSIFICATION
TODO: proxies!	IMPLEMENTATION	0.8826361167104069	IMPLEMENTATION	0.11736388328959321	WITHOUT_CLASSIFICATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999880899808641	WITHOUT_CLASSIFICATION	1.1910019135836805E-5	IMPLEMENTATION
table=null -> an association - fill it in later TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999880899808641	WITHOUT_CLASSIFICATION	1.1910019135836805E-5	IMPLEMENTATION
if we are still not resolved, we might represent a constant. needed to add this here because the allowance of naked-prop-refs in the grammar collides with the definition of literals/constants ("nondeterminism"). TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.5619899835567775	IMPLEMENTATION	0.43801001644322235	WITHOUT_CLASSIFICATION
TODO: add referencedClass to disambiguate to FKs on the same columns, pointing to different tables	IMPLEMENTATION	0.9960124662276166	WITHOUT_CLASSIFICATION	0.003987533772383432	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997074603495085	WITHOUT_CLASSIFICATION	2.9253965049150937E-4	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999906429568397	WITHOUT_CLASSIFICATION	9.357043160271659E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999906429568397	WITHOUT_CLASSIFICATION	9.357043160271659E-6	IMPLEMENTATION
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999959875960139	WITHOUT_CLASSIFICATION	4.012403986061628E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999608203128	WITHOUT_CLASSIFICATION	3.917968723556143E-8	IMPLEMENTATION
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.999999309000809	WITHOUT_CLASSIFICATION	6.909991908812808E-7	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999986041515441	WITHOUT_CLASSIFICATION	1.3958484558727613E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999986041515441	WITHOUT_CLASSIFICATION	1.3958484558727613E-6	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999178839852	WITHOUT_CLASSIFICATION	8.211601471541156E-8	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998572496038	WITHOUT_CLASSIFICATION	1.427503961542464E-7	IMPLEMENTATION
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999993817083779	WITHOUT_CLASSIFICATION	6.182916220783945E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999939814681752	WITHOUT_CLASSIFICATION	6.018531824822438E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990222334024	WITHOUT_CLASSIFICATION	9.777665975884675E-7	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990222334024	WITHOUT_CLASSIFICATION	9.777665975884675E-7	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.999970588137093	WITHOUT_CLASSIFICATION	2.9411862906988295E-5	IMPLEMENTATION
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9990355833603619	WITHOUT_CLASSIFICATION	9.644166396380613E-4	IMPLEMENTATION
decode row selection...	WITHOUT_CLASSIFICATION	0.999957495776707	WITHOUT_CLASSIFICATION	4.2504223292984734E-5	IMPLEMENTATION
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999999989152467	WITHOUT_CLASSIFICATION	1.0847532766960695E-9	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999932405258	WITHOUT_CLASSIFICATION	6.759474186848267E-9	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999891382132892	WITHOUT_CLASSIFICATION	1.0861786710926196E-5	IMPLEMENTATION
ROW ID	WITHOUT_CLASSIFICATION	0.9998302021892572	WITHOUT_CLASSIFICATION	1.697978107427475E-4	IMPLEMENTATION
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999734723207225	WITHOUT_CLASSIFICATION	2.6527679277436002E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999663296315662	WITHOUT_CLASSIFICATION	3.367036843383473E-5	IMPLEMENTATION
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999877272073237	WITHOUT_CLASSIFICATION	1.2272792676268266E-5	IMPLEMENTATION
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999849746438737	WITHOUT_CLASSIFICATION	1.5025356126271047E-5	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999159780264847	WITHOUT_CLASSIFICATION	8.40219735152353E-5	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999061592	WITHOUT_CLASSIFICATION	9.384079378604869E-11	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999383769977587	WITHOUT_CLASSIFICATION	6.162300224134414E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999383769977587	WITHOUT_CLASSIFICATION	6.162300224134414E-5	IMPLEMENTATION
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999801602669685	WITHOUT_CLASSIFICATION	1.983973303145907E-5	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.999947304441841	WITHOUT_CLASSIFICATION	5.2695558158970983E-5	IMPLEMENTATION
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999735084706	WITHOUT_CLASSIFICATION	2.6491529383404188E-8	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999665883752507	WITHOUT_CLASSIFICATION	3.3411624749312345E-5	IMPLEMENTATION
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9997163478362586	WITHOUT_CLASSIFICATION	2.836521637413981E-4	IMPLEMENTATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999999879296976	WITHOUT_CLASSIFICATION	1.2070302525993546E-8	IMPLEMENTATION
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999906351666626	WITHOUT_CLASSIFICATION	9.364833337383386E-6	IMPLEMENTATION
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999996189219741	WITHOUT_CLASSIFICATION	3.810780259460967E-7	IMPLEMENTATION
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999999897495873	WITHOUT_CLASSIFICATION	1.0250412743004295E-8	IMPLEMENTATION
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999960316811897	WITHOUT_CLASSIFICATION	3.968318810295519E-6	IMPLEMENTATION
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999998520451313	WITHOUT_CLASSIFICATION	1.4795486870499325E-6	IMPLEMENTATION
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999998831002196	WITHOUT_CLASSIFICATION	1.1689978046946571E-7	IMPLEMENTATION
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999950313688	WITHOUT_CLASSIFICATION	4.968631169439192E-9	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999338053537769	WITHOUT_CLASSIFICATION	6.619464622308108E-5	IMPLEMENTATION
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999789051980679	WITHOUT_CLASSIFICATION	2.1094801932076684E-5	IMPLEMENTATION
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749150692065	WITHOUT_CLASSIFICATION	2.5084930793494888E-5	IMPLEMENTATION
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999453337142742	WITHOUT_CLASSIFICATION	5.4666285725817546E-5	IMPLEMENTATION
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999995728694584	WITHOUT_CLASSIFICATION	4.271305415226272E-7	IMPLEMENTATION
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999966390249153	WITHOUT_CLASSIFICATION	3.360975084758267E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999884820760498	WITHOUT_CLASSIFICATION	1.1517923950236775E-5	IMPLEMENTATION
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999798202255963	WITHOUT_CLASSIFICATION	2.0179774403693414E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999941307475033	WITHOUT_CLASSIFICATION	5.869252496683401E-6	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999884820760498	WITHOUT_CLASSIFICATION	1.1517923950236775E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999941307475033	WITHOUT_CLASSIFICATION	5.869252496683401E-6	IMPLEMENTATION
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999997712776375	WITHOUT_CLASSIFICATION	2.287223625313465E-7	IMPLEMENTATION
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.999980125799012	WITHOUT_CLASSIFICATION	1.987420098805692E-5	IMPLEMENTATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999964222887879	WITHOUT_CLASSIFICATION	3.577711212106255E-5	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9988357337901208	WITHOUT_CLASSIFICATION	0.0011642662098791969	IMPLEMENTATION
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999847112047	WITHOUT_CLASSIFICATION	1.5288795318587306E-8	IMPLEMENTATION
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999976648138	WITHOUT_CLASSIFICATION	2.335186170320935E-9	IMPLEMENTATION
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9955583342428824	WITHOUT_CLASSIFICATION	0.00444166575711754	IMPLEMENTATION
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9867835006433048	WITHOUT_CLASSIFICATION	0.013216499356695159	IMPLEMENTATION
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998074050442517	WITHOUT_CLASSIFICATION	1.9259495574820983E-4	IMPLEMENTATION
Never evict this node	WITHOUT_CLASSIFICATION	0.9999531949672263	WITHOUT_CLASSIFICATION	4.68050327736955E-5	IMPLEMENTATION
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999854662672437	WITHOUT_CLASSIFICATION	1.4533732756269496E-5	IMPLEMENTATION
60 seconds	WITHOUT_CLASSIFICATION	0.9999941307475033	WITHOUT_CLASSIFICATION	5.869252496683401E-6	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999984188415	WITHOUT_CLASSIFICATION	1.5811585025643359E-9	IMPLEMENTATION
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9979888133039595	WITHOUT_CLASSIFICATION	0.0020111866960404066	IMPLEMENTATION
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9999816228816334	WITHOUT_CLASSIFICATION	1.8377118366547558E-5	IMPLEMENTATION
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999996931497	WITHOUT_CLASSIFICATION	3.0685025136230816E-10	IMPLEMENTATION
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999999890159841	WITHOUT_CLASSIFICATION	1.098401588382301E-7	IMPLEMENTATION
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999812390617424	WITHOUT_CLASSIFICATION	1.876093825753108E-5	IMPLEMENTATION
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999097641476644	WITHOUT_CLASSIFICATION	9.023585233557429E-5	IMPLEMENTATION
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999987475673726	WITHOUT_CLASSIFICATION	1.2524326273739671E-6	IMPLEMENTATION
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999990079562312	WITHOUT_CLASSIFICATION	9.920437688081477E-7	IMPLEMENTATION
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999996702297729	WITHOUT_CLASSIFICATION	3.297702271181619E-7	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985165602783	WITHOUT_CLASSIFICATION	1.4834397216793954E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999954501483407	WITHOUT_CLASSIFICATION	4.5498516592759705E-6	IMPLEMENTATION
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.5885514712482005	IMPLEMENTATION	0.4114485287517994	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999977004436762	WITHOUT_CLASSIFICATION	2.2995563238790076E-6	IMPLEMENTATION
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999953335229	WITHOUT_CLASSIFICATION	4.6664769911066786E-9	IMPLEMENTATION
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.994883863376601	WITHOUT_CLASSIFICATION	0.005116136623399085	IMPLEMENTATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999699218028	WITHOUT_CLASSIFICATION	3.007819713911722E-8	IMPLEMENTATION
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999902094721579	WITHOUT_CLASSIFICATION	9.790527842158216E-6	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999971752432022	WITHOUT_CLASSIFICATION	2.824756797797229E-5	IMPLEMENTATION
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999967414668425	WITHOUT_CLASSIFICATION	3.2585331575525786E-6	IMPLEMENTATION
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999988295233	WITHOUT_CLASSIFICATION	1.1704767137601702E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997559352443	WITHOUT_CLASSIFICATION	2.440647557779209E-7	IMPLEMENTATION
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999127595907	WITHOUT_CLASSIFICATION	8.72404092568522E-8	IMPLEMENTATION
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999984171363	WITHOUT_CLASSIFICATION	1.5828637937309495E-9	IMPLEMENTATION
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999997559352443	WITHOUT_CLASSIFICATION	2.440647557779209E-7	IMPLEMENTATION
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999570407854	WITHOUT_CLASSIFICATION	4.29592146537088E-8	IMPLEMENTATION
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999998000452396	WITHOUT_CLASSIFICATION	1.9995476045492453E-7	IMPLEMENTATION
ignore!	WITHOUT_CLASSIFICATION	0.9999884820760498	WITHOUT_CLASSIFICATION	1.1517923950236775E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999919308229513	WITHOUT_CLASSIFICATION	8.069177048671426E-6	IMPLEMENTATION
construct the cache	WITHOUT_CLASSIFICATION	0.9999991624853369	WITHOUT_CLASSIFICATION	8.37514663164689E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990446205419	WITHOUT_CLASSIFICATION	9.55379458039187E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990446205419	WITHOUT_CLASSIFICATION	9.55379458039187E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999965226829307	WITHOUT_CLASSIFICATION	3.4773170692864794E-6	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997025674531	WITHOUT_CLASSIFICATION	2.974325469272816E-7	IMPLEMENTATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999818173201	WITHOUT_CLASSIFICATION	1.818268001174971E-8	IMPLEMENTATION
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999997206832	WITHOUT_CLASSIFICATION	2.793167937599334E-10	IMPLEMENTATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996177632792	WITHOUT_CLASSIFICATION	3.8223672072975163E-7	IMPLEMENTATION
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998006888800506	WITHOUT_CLASSIFICATION	1.9931111994938523E-4	IMPLEMENTATION
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999569048812275	WITHOUT_CLASSIFICATION	4.3095118772567654E-5	IMPLEMENTATION
return the connection	WITHOUT_CLASSIFICATION	0.99989261818134	WITHOUT_CLASSIFICATION	1.0738181866000655E-4	IMPLEMENTATION
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995401199081	WITHOUT_CLASSIFICATION	4.59880091925641E-7	IMPLEMENTATION
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998165696454	WITHOUT_CLASSIFICATION	1.834303545225782E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999925432357215	WITHOUT_CLASSIFICATION	7.4567642785128485E-6	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999925432357215	WITHOUT_CLASSIFICATION	7.4567642785128485E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999198731389419	WITHOUT_CLASSIFICATION	8.01268610580751E-5	IMPLEMENTATION
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999987184151423	WITHOUT_CLASSIFICATION	1.2815848577772374E-6	IMPLEMENTATION
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999996792156711	WITHOUT_CLASSIFICATION	3.2078432886559697E-7	IMPLEMENTATION
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999925432357215	WITHOUT_CLASSIFICATION	7.4567642785128485E-6	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999198731389419	WITHOUT_CLASSIFICATION	8.01268610580751E-5	IMPLEMENTATION
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999198731389419	WITHOUT_CLASSIFICATION	8.01268610580751E-5	IMPLEMENTATION
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999999932820135	WITHOUT_CLASSIFICATION	6.717986495733941E-8	IMPLEMENTATION
Remember Isolation level	WITHOUT_CLASSIFICATION	0.999710313109909	WITHOUT_CLASSIFICATION	2.8968689009098507E-4	IMPLEMENTATION
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999179644067	WITHOUT_CLASSIFICATION	8.203559330009689E-8	IMPLEMENTATION
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999775470027259	WITHOUT_CLASSIFICATION	2.2452997274091607E-5	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997539525240376	WITHOUT_CLASSIFICATION	2.46047475962376E-4	IMPLEMENTATION
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997539525240376	WITHOUT_CLASSIFICATION	2.46047475962376E-4	IMPLEMENTATION
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999995115841046	WITHOUT_CLASSIFICATION	4.884158954037352E-7	IMPLEMENTATION
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999807731466	WITHOUT_CLASSIFICATION	1.922685343225949E-8	IMPLEMENTATION
default is POJO	WITHOUT_CLASSIFICATION	0.9999995949746228	WITHOUT_CLASSIFICATION	4.0502537716534663E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999824346855	WITHOUT_CLASSIFICATION	1.756531450829295E-7	IMPLEMENTATION
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999999824346855	WITHOUT_CLASSIFICATION	1.756531450829295E-7	IMPLEMENTATION
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999992687214374	WITHOUT_CLASSIFICATION	7.312785625451513E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9988218580544296	WITHOUT_CLASSIFICATION	0.0011781419455703464	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991122869221	WITHOUT_CLASSIFICATION	8.877130779106033E-7	IMPLEMENTATION
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999919353485	WITHOUT_CLASSIFICATION	8.064651490054534E-9	IMPLEMENTATION
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999999997671105	WITHOUT_CLASSIFICATION	2.328894041196233E-10	IMPLEMENTATION
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999996309003272	WITHOUT_CLASSIFICATION	3.6909967285308295E-7	IMPLEMENTATION
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999981779861139	WITHOUT_CLASSIFICATION	1.8220138860400912E-6	IMPLEMENTATION
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.99998766400909	WITHOUT_CLASSIFICATION	1.2335990910056799E-5	IMPLEMENTATION
sort first by role name	WITHOUT_CLASSIFICATION	0.9999956763702993	WITHOUT_CLASSIFICATION	4.323629700767528E-6	IMPLEMENTATION
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999991122869221	WITHOUT_CLASSIFICATION	8.877130779106033E-7	IMPLEMENTATION
then by fk	WITHOUT_CLASSIFICATION	0.9999840752863048	WITHOUT_CLASSIFICATION	1.5924713695119325E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999057995742147	WITHOUT_CLASSIFICATION	9.420042578526231E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999057995742147	WITHOUT_CLASSIFICATION	9.420042578526231E-5	IMPLEMENTATION
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999969324842479	WITHOUT_CLASSIFICATION	3.0675157521033467E-6	IMPLEMENTATION
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998252754075798	WITHOUT_CLASSIFICATION	1.7472459242023065E-4	IMPLEMENTATION
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999999920951467	WITHOUT_CLASSIFICATION	7.904853258204378E-9	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9970717569021125	WITHOUT_CLASSIFICATION	0.0029282430978876304	IMPLEMENTATION
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999997442671256	WITHOUT_CLASSIFICATION	2.5573287440602913E-7	IMPLEMENTATION
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999283334979504	WITHOUT_CLASSIFICATION	7.166650204957643E-5	IMPLEMENTATION
then by id	WITHOUT_CLASSIFICATION	0.9998647148893368	WITHOUT_CLASSIFICATION	1.352851106630889E-4	IMPLEMENTATION
to be safe...	WITHOUT_CLASSIFICATION	0.9999990341742391	WITHOUT_CLASSIFICATION	9.658257609091783E-7	IMPLEMENTATION
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999919659095631	WITHOUT_CLASSIFICATION	8.034090436921804E-6	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999927412072	WITHOUT_CLASSIFICATION	7.258792704186666E-9	IMPLEMENTATION
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999927412072	WITHOUT_CLASSIFICATION	7.258792704186666E-9	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996795631863	WITHOUT_CLASSIFICATION	3.2043681377553983E-7	IMPLEMENTATION
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997074603495085	WITHOUT_CLASSIFICATION	2.9253965049150937E-4	IMPLEMENTATION
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999710273386	WITHOUT_CLASSIFICATION	2.8972661384837424E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
invokespecial	WITHOUT_CLASSIFICATION	0.9999996995214788	WITHOUT_CLASSIFICATION	3.0047852114822837E-7	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999906429568397	WITHOUT_CLASSIFICATION	9.357043160271659E-6	IMPLEMENTATION
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999949292070872	WITHOUT_CLASSIFICATION	5.070792912779445E-6	IMPLEMENTATION
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999993482313034	WITHOUT_CLASSIFICATION	6.517686965555835E-7	IMPLEMENTATION
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999997692463866	WITHOUT_CLASSIFICATION	2.3075361351121374E-7	IMPLEMENTATION
aload_2 args	WITHOUT_CLASSIFICATION	0.9999969003723228	WITHOUT_CLASSIFICATION	3.0996276772324443E-6	IMPLEMENTATION
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999918073304934	WITHOUT_CLASSIFICATION	8.192669506659246E-6	IMPLEMENTATION
new	WITHOUT_CLASSIFICATION	0.9999502334167945	WITHOUT_CLASSIFICATION	4.976658320543304E-5	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999019086914195	WITHOUT_CLASSIFICATION	9.809130858052911E-5	IMPLEMENTATION
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999968354172916	WITHOUT_CLASSIFICATION	3.1645827085214315E-6	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999608203128	WITHOUT_CLASSIFICATION	3.917968723556143E-8	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988319862071	WITHOUT_CLASSIFICATION	1.1680137928559062E-6	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988319862071	WITHOUT_CLASSIFICATION	1.1680137928559062E-6	IMPLEMENTATION
aastore args	WITHOUT_CLASSIFICATION	0.9999999023285054	WITHOUT_CLASSIFICATION	9.767149460148358E-8	IMPLEMENTATION
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999973859508098	WITHOUT_CLASSIFICATION	2.61404919018772E-6	IMPLEMENTATION
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999993464875038	WITHOUT_CLASSIFICATION	6.535124962266931E-7	IMPLEMENTATION
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999984474467193	WITHOUT_CLASSIFICATION	1.5525532807092485E-6	IMPLEMENTATION
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999770001875647	WITHOUT_CLASSIFICATION	2.2999812435166937E-5	IMPLEMENTATION
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999941139786193	WITHOUT_CLASSIFICATION	5.886021380745329E-6	IMPLEMENTATION
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999986041515441	WITHOUT_CLASSIFICATION	1.3958484558727613E-6	IMPLEMENTATION
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999953902662075	WITHOUT_CLASSIFICATION	4.609733792493283E-6	IMPLEMENTATION
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976888372022	WITHOUT_CLASSIFICATION	2.3111627978758097E-6	IMPLEMENTATION
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999959736917815	WITHOUT_CLASSIFICATION	4.0263082184795145E-6	IMPLEMENTATION
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999986191283387	WITHOUT_CLASSIFICATION	1.3808716612934378E-6	IMPLEMENTATION
iconst_i	WITHOUT_CLASSIFICATION	0.9999846348776371	WITHOUT_CLASSIFICATION	1.536512236291601E-5	IMPLEMENTATION
aaload	WITHOUT_CLASSIFICATION	0.999890418728117	WITHOUT_CLASSIFICATION	1.095812718828961E-4	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999982343834862	WITHOUT_CLASSIFICATION	1.7656165137874797E-6	IMPLEMENTATION
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999022247786	WITHOUT_CLASSIFICATION	9.777522143122055E-8	IMPLEMENTATION
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999991886465867	WITHOUT_CLASSIFICATION	8.113534132436706E-7	IMPLEMENTATION
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999988229734253	WITHOUT_CLASSIFICATION	1.1770265745707987E-6	IMPLEMENTATION
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999883016458015	WITHOUT_CLASSIFICATION	1.1698354198407218E-5	IMPLEMENTATION
register in exception table	WITHOUT_CLASSIFICATION	0.9999999199042913	WITHOUT_CLASSIFICATION	8.009570872032798E-8	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
aload_0	WITHOUT_CLASSIFICATION	0.9999659863205104	WITHOUT_CLASSIFICATION	3.4013679489688976E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999906429568397	WITHOUT_CLASSIFICATION	9.357043160271659E-6	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999906429568397	WITHOUT_CLASSIFICATION	9.357043160271659E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999019086914195	WITHOUT_CLASSIFICATION	9.809130858052911E-5	IMPLEMENTATION
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988319862071	WITHOUT_CLASSIFICATION	1.1680137928559062E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999982343834862	WITHOUT_CLASSIFICATION	1.7656165137874797E-6	IMPLEMENTATION
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999999178839852	WITHOUT_CLASSIFICATION	8.211601471541156E-8	IMPLEMENTATION
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999999384810502	WITHOUT_CLASSIFICATION	6.15189498643665E-8	IMPLEMENTATION
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999997135568393	WITHOUT_CLASSIFICATION	2.864431607355047E-7	IMPLEMENTATION
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999973647044644	WITHOUT_CLASSIFICATION	2.635295535558168E-6	IMPLEMENTATION
iload_3 i	WITHOUT_CLASSIFICATION	0.9999739434921705	WITHOUT_CLASSIFICATION	2.6056507829484006E-5	IMPLEMENTATION
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998760217149	WITHOUT_CLASSIFICATION	1.2397828507293626E-7	IMPLEMENTATION
athrow	WITHOUT_CLASSIFICATION	0.9999736212567554	WITHOUT_CLASSIFICATION	2.637874324464223E-5	IMPLEMENTATION
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999951041501891	WITHOUT_CLASSIFICATION	4.895849810968038E-6	IMPLEMENTATION
swallow	WITHOUT_CLASSIFICATION	0.9999505576183384	WITHOUT_CLASSIFICATION	4.944238166146943E-5	IMPLEMENTATION
local variable | this |	WITHOUT_CLASSIFICATION	0.9999990019857158	WITHOUT_CLASSIFICATION	9.980142841911965E-7	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999941300215325	WITHOUT_CLASSIFICATION	5.869978467603116E-6	IMPLEMENTATION
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999941300215325	WITHOUT_CLASSIFICATION	5.869978467603116E-6	IMPLEMENTATION
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999718656203	WITHOUT_CLASSIFICATION	2.8134379682657873E-8	IMPLEMENTATION
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999996721067135	WITHOUT_CLASSIFICATION	3.278932864784383E-7	IMPLEMENTATION
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9999248666332067	WITHOUT_CLASSIFICATION	7.513336679322058E-5	IMPLEMENTATION
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996343681777372	WITHOUT_CLASSIFICATION	3.656318222628703E-4	IMPLEMENTATION
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998301294435	WITHOUT_CLASSIFICATION	1.6987055658032792E-7	IMPLEMENTATION
case of non-static field	WITHOUT_CLASSIFICATION	0.9999999418109928	WITHOUT_CLASSIFICATION	5.818900702760128E-8	IMPLEMENTATION
getfield get each field	WITHOUT_CLASSIFICATION	0.999999700492351	WITHOUT_CLASSIFICATION	2.995076489849782E-7	IMPLEMENTATION
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998572496038	WITHOUT_CLASSIFICATION	1.427503961542464E-7	IMPLEMENTATION
ifnonnull	WITHOUT_CLASSIFICATION	0.999983961382939	WITHOUT_CLASSIFICATION	1.6038617060960293E-5	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999999513802019	WITHOUT_CLASSIFICATION	4.861979809492664E-7	IMPLEMENTATION
return each type	WITHOUT_CLASSIFICATION	0.999999513802019	WITHOUT_CLASSIFICATION	4.861979809492664E-7	IMPLEMENTATION
store_1 each type	WITHOUT_CLASSIFICATION	0.9999996319344983	WITHOUT_CLASSIFICATION	3.6806550181769985E-7	IMPLEMENTATION
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999998005675725	WITHOUT_CLASSIFICATION	1.9943242757508507E-7	IMPLEMENTATION
load_1 each type	WITHOUT_CLASSIFICATION	0.999995069300719	WITHOUT_CLASSIFICATION	4.930699280932891E-6	IMPLEMENTATION
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999992249910549	WITHOUT_CLASSIFICATION	7.750089452415648E-7	IMPLEMENTATION
int	WITHOUT_CLASSIFICATION	0.9999836269092276	WITHOUT_CLASSIFICATION	1.6373090772418516E-5	IMPLEMENTATION
return	WITHOUT_CLASSIFICATION	0.9999906429568397	WITHOUT_CLASSIFICATION	9.357043160271659E-6	IMPLEMENTATION
dup	WITHOUT_CLASSIFICATION	0.9999019086914195	WITHOUT_CLASSIFICATION	9.809130858052911E-5	IMPLEMENTATION
invokeinterface	WITHOUT_CLASSIFICATION	0.9999999608203128	WITHOUT_CLASSIFICATION	3.917968723556143E-8	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999982343834862	WITHOUT_CLASSIFICATION	1.7656165137874797E-6	IMPLEMENTATION
checkcast	WITHOUT_CLASSIFICATION	0.9999982343834862	WITHOUT_CLASSIFICATION	1.7656165137874797E-6	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999830007841	WITHOUT_CLASSIFICATION	1.6999215895283143E-7	IMPLEMENTATION
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999830007841	WITHOUT_CLASSIFICATION	1.6999215895283143E-7	IMPLEMENTATION
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999991937354475	WITHOUT_CLASSIFICATION	8.062645525127049E-7	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999599437427836	WITHOUT_CLASSIFICATION	4.005625721639249E-5	IMPLEMENTATION
load_1	WITHOUT_CLASSIFICATION	0.9999599437427836	WITHOUT_CLASSIFICATION	4.005625721639249E-5	IMPLEMENTATION
putfield	WITHOUT_CLASSIFICATION	0.9999832054308468	WITHOUT_CLASSIFICATION	1.6794569153136244E-5	IMPLEMENTATION
return ;	WITHOUT_CLASSIFICATION	0.9999975298484409	WITHOUT_CLASSIFICATION	2.4701515590740635E-6	IMPLEMENTATION
ldc field name	WITHOUT_CLASSIFICATION	0.9999997240190261	WITHOUT_CLASSIFICATION	2.7598097382920396E-7	IMPLEMENTATION
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999996666889861	WITHOUT_CLASSIFICATION	3.3331101400919326E-7	IMPLEMENTATION
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.99999956967361	WITHOUT_CLASSIFICATION	4.303263900140675E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999939814681752	WITHOUT_CLASSIFICATION	6.018531824822438E-6	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999939814681752	WITHOUT_CLASSIFICATION	6.018531824822438E-6	IMPLEMENTATION
not array	WITHOUT_CLASSIFICATION	0.9981103471521015	WITHOUT_CLASSIFICATION	0.00188965284789854	IMPLEMENTATION
array of reference type	WITHOUT_CLASSIFICATION	0.9999976980270427	WITHOUT_CLASSIFICATION	2.3019729572008012E-6	IMPLEMENTATION
boolean	WITHOUT_CLASSIFICATION	0.9999925858124102	WITHOUT_CLASSIFICATION	7.4141875897309884E-6	IMPLEMENTATION
byte	WITHOUT_CLASSIFICATION	0.9998885074936463	WITHOUT_CLASSIFICATION	1.1149250635370526E-4	IMPLEMENTATION
char	WITHOUT_CLASSIFICATION	0.9999982517059743	WITHOUT_CLASSIFICATION	1.7482940257103433E-6	IMPLEMENTATION
short	WITHOUT_CLASSIFICATION	0.9999449387119544	WITHOUT_CLASSIFICATION	5.506128804566096E-5	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990222334024	WITHOUT_CLASSIFICATION	9.777665975884675E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999961928968312	WITHOUT_CLASSIFICATION	3.8071031689170457E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999961928968312	WITHOUT_CLASSIFICATION	3.8071031689170457E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.999970588137093	WITHOUT_CLASSIFICATION	2.9411862906988295E-5	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.999970588137093	WITHOUT_CLASSIFICATION	2.9411862906988295E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999472495349653	WITHOUT_CLASSIFICATION	5.2750465034667134E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999472495349653	WITHOUT_CLASSIFICATION	5.2750465034667134E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997729711537	WITHOUT_CLASSIFICATION	2.2702884622999751E-7	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997729711537	WITHOUT_CLASSIFICATION	2.2702884622999751E-7	IMPLEMENTATION
reference type	WITHOUT_CLASSIFICATION	0.9999939814681752	WITHOUT_CLASSIFICATION	6.018531824822438E-6	IMPLEMENTATION
double	WITHOUT_CLASSIFICATION	0.9999990222334024	WITHOUT_CLASSIFICATION	9.777665975884675E-7	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999961928968312	WITHOUT_CLASSIFICATION	3.8071031689170457E-6	IMPLEMENTATION
float	WITHOUT_CLASSIFICATION	0.9999961928968312	WITHOUT_CLASSIFICATION	3.8071031689170457E-6	IMPLEMENTATION
long	WITHOUT_CLASSIFICATION	0.999970588137093	WITHOUT_CLASSIFICATION	2.9411862906988295E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999472495349653	WITHOUT_CLASSIFICATION	5.2750465034667134E-5	IMPLEMENTATION
bad type	WITHOUT_CLASSIFICATION	0.9999472495349653	WITHOUT_CLASSIFICATION	5.2750465034667134E-5	IMPLEMENTATION
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999997729711537	WITHOUT_CLASSIFICATION	2.2702884622999751E-7	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999760852622629	WITHOUT_CLASSIFICATION	2.391473773708303E-5	IMPLEMENTATION
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999999698111388	WITHOUT_CLASSIFICATION	3.018886117050875E-8	IMPLEMENTATION
decrement the lock	WITHOUT_CLASSIFICATION	0.999992077884826	WITHOUT_CLASSIFICATION	7.922115174008773E-6	IMPLEMENTATION
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999491742597197	WITHOUT_CLASSIFICATION	5.082574028030427E-4	IMPLEMENTATION
recache the updated state	WITHOUT_CLASSIFICATION	0.9999975828334675	WITHOUT_CLASSIFICATION	2.4171665324932434E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998858209845666	WITHOUT_CLASSIFICATION	1.1417901543343771E-4	IMPLEMENTATION
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999999012633117	WITHOUT_CLASSIFICATION	9.87366882964454E-7	IMPLEMENTATION
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999999056497755	WITHOUT_CLASSIFICATION	9.43502245221469E-8	IMPLEMENTATION
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999991319753123	WITHOUT_CLASSIFICATION	8.680246876378616E-7	IMPLEMENTATION
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999878045377	WITHOUT_CLASSIFICATION	1.2195462192629827E-8	IMPLEMENTATION
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999852323641109	WITHOUT_CLASSIFICATION	1.4767635889155508E-5	IMPLEMENTATION
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998399431151	WITHOUT_CLASSIFICATION	1.6005688480836824E-7	IMPLEMENTATION
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999965226829307	WITHOUT_CLASSIFICATION	3.4773170692864794E-6	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998858209845666	WITHOUT_CLASSIFICATION	1.1417901543343771E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998858209845666	WITHOUT_CLASSIFICATION	1.1417901543343771E-4	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998858209845666	WITHOUT_CLASSIFICATION	1.1417901543343771E-4	IMPLEMENTATION
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999879272555	WITHOUT_CLASSIFICATION	1.207274444615383E-8	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999955858117	WITHOUT_CLASSIFICATION	4.4141883425638915E-9	IMPLEMENTATION
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999955858117	WITHOUT_CLASSIFICATION	4.4141883425638915E-9	IMPLEMENTATION
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999866931486	WITHOUT_CLASSIFICATION	1.3306851348457774E-8	IMPLEMENTATION
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999999555386	WITHOUT_CLASSIFICATION	4.446137876842596E-11	IMPLEMENTATION
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999044614339	WITHOUT_CLASSIFICATION	9.55385661137681E-8	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999965098372323	WITHOUT_CLASSIFICATION	3.4901627677515586E-6	IMPLEMENTATION
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999965098372323	WITHOUT_CLASSIFICATION	3.4901627677515586E-6	IMPLEMENTATION
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999932405258	WITHOUT_CLASSIFICATION	6.759474186848267E-9	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999955099825609	WITHOUT_CLASSIFICATION	4.490017439031145E-6	IMPLEMENTATION
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999955099825609	WITHOUT_CLASSIFICATION	4.490017439031145E-6	IMPLEMENTATION
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997891893935	WITHOUT_CLASSIFICATION	2.108106064551999E-7	IMPLEMENTATION
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999456613442	WITHOUT_CLASSIFICATION	5.43386557585362E-8	IMPLEMENTATION
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999997129347	WITHOUT_CLASSIFICATION	2.870652571369099E-10	IMPLEMENTATION
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999861990146159	WITHOUT_CLASSIFICATION	1.3800985384151901E-5	IMPLEMENTATION
MUTABLE	WITHOUT_CLASSIFICATION	0.9999614205426858	WITHOUT_CLASSIFICATION	3.857945731423776E-5	IMPLEMENTATION
WHERE	WITHOUT_CLASSIFICATION	0.9999521927374737	WITHOUT_CLASSIFICATION	4.7807262526237895E-5	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999891382132892	WITHOUT_CLASSIFICATION	1.0861786710926196E-5	IMPLEMENTATION
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999753514426547	WITHOUT_CLASSIFICATION	2.464855734522782E-5	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9738481116500259	WITHOUT_CLASSIFICATION	0.02615188834997409	IMPLEMENTATION
ID	WITHOUT_CLASSIFICATION	0.9997012610780701	WITHOUT_CLASSIFICATION	2.9873892192985093E-4	IMPLEMENTATION
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999855395813687	WITHOUT_CLASSIFICATION	1.4460418631321786E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999663296315662	WITHOUT_CLASSIFICATION	3.367036843383473E-5	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999899349646	WITHOUT_CLASSIFICATION	1.0065035399581761E-7	IMPLEMENTATION
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999239594091168	WITHOUT_CLASSIFICATION	7.604059088320578E-5	IMPLEMENTATION
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999212264681	WITHOUT_CLASSIFICATION	7.877353193513751E-8	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999663296315662	WITHOUT_CLASSIFICATION	3.367036843383473E-5	IMPLEMENTATION
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999997701916673	WITHOUT_CLASSIFICATION	2.298083326918469E-7	IMPLEMENTATION
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999937568729002	WITHOUT_CLASSIFICATION	6.243127099800987E-5	IMPLEMENTATION
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999881532585024	WITHOUT_CLASSIFICATION	1.1846741497569984E-5	IMPLEMENTATION
IMPORT	WITHOUT_CLASSIFICATION	0.9999533286369124	WITHOUT_CLASSIFICATION	4.6671363087523536E-5	IMPLEMENTATION
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999982347973656	WITHOUT_CLASSIFICATION	1.7652026343964512E-5	IMPLEMENTATION
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999967929472146	WITHOUT_CLASSIFICATION	3.207052785327438E-6	IMPLEMENTATION
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999906130663457	WITHOUT_CLASSIFICATION	9.386933654189647E-6	IMPLEMENTATION
PERSISTER	WITHOUT_CLASSIFICATION	0.9999159780264847	WITHOUT_CLASSIFICATION	8.40219735152353E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999995157046125	WITHOUT_CLASSIFICATION	4.8429538750249135E-6	IMPLEMENTATION
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999061592	WITHOUT_CLASSIFICATION	9.384079378604869E-11	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999498316902832	WITHOUT_CLASSIFICATION	5.016830971670498E-5	IMPLEMENTATION
joined subclasses	WITHOUT_CLASSIFICATION	0.9999999962370466	WITHOUT_CLASSIFICATION	3.762953423398681E-9	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9998729858314022	WITHOUT_CLASSIFICATION	1.2701416859793284E-4	IMPLEMENTATION
CHECK	WITHOUT_CLASSIFICATION	0.9999891382132892	WITHOUT_CLASSIFICATION	1.0861786710926196E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999995157046125	WITHOUT_CLASSIFICATION	4.8429538750249135E-6	IMPLEMENTATION
properties	WITHOUT_CLASSIFICATION	0.9999498316902832	WITHOUT_CLASSIFICATION	5.016830971670498E-5	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9998729858314022	WITHOUT_CLASSIFICATION	1.2701416859793284E-4	IMPLEMENTATION
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999748179466504	WITHOUT_CLASSIFICATION	2.518205334952997E-5	IMPLEMENTATION
TABLENAME	WITHOUT_CLASSIFICATION	0.999953296486163	WITHOUT_CLASSIFICATION	4.6703513836962925E-5	IMPLEMENTATION
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999885281549604	WITHOUT_CLASSIFICATION	1.1471845039653672E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999383769977587	WITHOUT_CLASSIFICATION	6.162300224134414E-5	IMPLEMENTATION
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999889009146906	WITHOUT_CLASSIFICATION	1.1099085309330035E-5	IMPLEMENTATION
column index	WITHOUT_CLASSIFICATION	0.9999859713145655	WITHOUT_CLASSIFICATION	1.4028685434537291E-5	IMPLEMENTATION
column unique-key	WITHOUT_CLASSIFICATION	0.99999949239815	WITHOUT_CLASSIFICATION	5.076018500367766E-7	IMPLEMENTATION
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999916734868172	WITHOUT_CLASSIFICATION	8.32651318284529E-6	IMPLEMENTATION
for an any	WITHOUT_CLASSIFICATION	0.9999992788166397	WITHOUT_CLASSIFICATION	7.211833602226491E-7	IMPLEMENTATION
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999086703724	WITHOUT_CLASSIFICATION	9.132962755233615E-8	IMPLEMENTATION
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996075484805	WITHOUT_CLASSIFICATION	3.9245151950450124E-7	IMPLEMENTATION
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999665429566137	WITHOUT_CLASSIFICATION	3.345704338619894E-5	IMPLEMENTATION
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999994414494366	WITHOUT_CLASSIFICATION	5.585505634120085E-7	IMPLEMENTATION
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999958330868527	WITHOUT_CLASSIFICATION	4.166913147330528E-6	IMPLEMENTATION
ROLENAME	WITHOUT_CLASSIFICATION	0.9999447177550401	WITHOUT_CLASSIFICATION	5.52822449600114E-5	IMPLEMENTATION
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999992327224837	WITHOUT_CLASSIFICATION	7.672775162933342E-6	IMPLEMENTATION
TABLE	WITHOUT_CLASSIFICATION	0.999947304441841	WITHOUT_CLASSIFICATION	5.2695558158970983E-5	IMPLEMENTATION
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999948315066	WITHOUT_CLASSIFICATION	5.1684933928347155E-9	IMPLEMENTATION
SORT	WITHOUT_CLASSIFICATION	0.9999690501575108	WITHOUT_CLASSIFICATION	3.0949842489204456E-5	IMPLEMENTATION
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999995157046125	WITHOUT_CLASSIFICATION	4.8429538750249135E-6	IMPLEMENTATION
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997847785589	WITHOUT_CLASSIFICATION	2.1522144122788847E-7	IMPLEMENTATION
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999984799523142	WITHOUT_CLASSIFICATION	1.5200476857464507E-6	IMPLEMENTATION
set up second pass	WITHOUT_CLASSIFICATION	0.9999984912301021	WITHOUT_CLASSIFICATION	1.5087698978166982E-6	IMPLEMENTATION
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.999995600276567	WITHOUT_CLASSIFICATION	4.399723433021117E-6	IMPLEMENTATION
a nested composite element	WITHOUT_CLASSIFICATION	0.9999958473401162	WITHOUT_CLASSIFICATION	4.152659883848366E-6	IMPLEMENTATION
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999967846353545	WITHOUT_CLASSIFICATION	3.215364645486678E-6	IMPLEMENTATION
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999934106032686	WITHOUT_CLASSIFICATION	6.589396731389772E-6	IMPLEMENTATION
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999997725119311	WITHOUT_CLASSIFICATION	2.2748806899359968E-7	IMPLEMENTATION
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999991652989187	WITHOUT_CLASSIFICATION	8.347010812799325E-7	IMPLEMENTATION
GENERATOR	WITHOUT_CLASSIFICATION	0.9999364834568554	WITHOUT_CLASSIFICATION	6.351654314462915E-5	IMPLEMENTATION
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999753649565942	WITHOUT_CLASSIFICATION	2.4635043405893E-5	IMPLEMENTATION
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999650600603688	WITHOUT_CLASSIFICATION	3.493993963115595E-5	IMPLEMENTATION
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9186990357686334	WITHOUT_CLASSIFICATION	0.08130096423136653	IMPLEMENTATION
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999665883752507	WITHOUT_CLASSIFICATION	3.3411624749312345E-5	IMPLEMENTATION
contained elements:	WITHOUT_CLASSIFICATION	0.9999998756303317	WITHOUT_CLASSIFICATION	1.2436966829064608E-7	IMPLEMENTATION
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999996731994619	WITHOUT_CLASSIFICATION	3.2680053804123683E-7	IMPLEMENTATION
Bind the where	WITHOUT_CLASSIFICATION	0.9999881091892469	WITHOUT_CLASSIFICATION	1.1890810753077844E-5	IMPLEMENTATION
Bind the order-by	WITHOUT_CLASSIFICATION	0.999992469785556	WITHOUT_CLASSIFICATION	7.530214443977559E-6	IMPLEMENTATION
Bind the filters	WITHOUT_CLASSIFICATION	0.9999961084647578	WITHOUT_CLASSIFICATION	3.891535242196079E-6	IMPLEMENTATION
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999477025728156	WITHOUT_CLASSIFICATION	5.229742718435801E-5	IMPLEMENTATION
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999985060705133	WITHOUT_CLASSIFICATION	1.4939294866812388E-6	IMPLEMENTATION
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998336327211302	WITHOUT_CLASSIFICATION	1.6636727886980266E-4	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999993818415006	WITHOUT_CLASSIFICATION	6.181584993663103E-7	IMPLEMENTATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999999469119986	WITHOUT_CLASSIFICATION	5.3088001482106896E-8	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999734416816745	WITHOUT_CLASSIFICATION	2.6558318325520608E-5	IMPLEMENTATION
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999734416816745	WITHOUT_CLASSIFICATION	2.6558318325520608E-5	IMPLEMENTATION
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999570901386613	WITHOUT_CLASSIFICATION	4.290986133867324E-5	IMPLEMENTATION
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999334303079455	WITHOUT_CLASSIFICATION	6.656969205443715E-5	IMPLEMENTATION
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999850849332486	WITHOUT_CLASSIFICATION	1.4915066751533397E-5	IMPLEMENTATION
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999986891643128	WITHOUT_CLASSIFICATION	1.3108356871962255E-6	IMPLEMENTATION
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999991969460531	WITHOUT_CLASSIFICATION	8.030539468931329E-7	IMPLEMENTATION
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999994273960231	WITHOUT_CLASSIFICATION	5.726039768426674E-7	IMPLEMENTATION
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999941521307405	WITHOUT_CLASSIFICATION	5.84786925949504E-6	IMPLEMENTATION
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999355231012051	WITHOUT_CLASSIFICATION	6.447689879488752E-4	IMPLEMENTATION
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999990686969171	WITHOUT_CLASSIFICATION	9.313030828944513E-7	IMPLEMENTATION
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999990502606165	WITHOUT_CLASSIFICATION	9.497393834618886E-7	IMPLEMENTATION
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999964571351015	WITHOUT_CLASSIFICATION	3.5428648983798557E-6	IMPLEMENTATION
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999998233162518	WITHOUT_CLASSIFICATION	1.7668374817404026E-7	IMPLEMENTATION
Schema export:	WITHOUT_CLASSIFICATION	0.9999986357983546	WITHOUT_CLASSIFICATION	1.3642016454105723E-6	IMPLEMENTATION
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999927533983424	WITHOUT_CLASSIFICATION	7.246601657563111E-6	IMPLEMENTATION
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999918850640929	WITHOUT_CLASSIFICATION	8.11493590710161E-6	IMPLEMENTATION
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999987827411382	WITHOUT_CLASSIFICATION	1.217258861818656E-6	IMPLEMENTATION
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9995851713173749	WITHOUT_CLASSIFICATION	4.148286826251121E-4	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999975747723052	WITHOUT_CLASSIFICATION	2.4252276948528427E-6	IMPLEMENTATION
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992659262134	WITHOUT_CLASSIFICATION	7.340737866263894E-7	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999465387108	WITHOUT_CLASSIFICATION	5.3461289254161356E-8	IMPLEMENTATION
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998934141891708	WITHOUT_CLASSIFICATION	1.065858108291863E-4	IMPLEMENTATION
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999996548918924	WITHOUT_CLASSIFICATION	3.451081076323925E-7	IMPLEMENTATION
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999993056977461	WITHOUT_CLASSIFICATION	6.943022538589906E-7	IMPLEMENTATION
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999887613929107	WITHOUT_CLASSIFICATION	1.123860708925434E-5	IMPLEMENTATION
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999991259312092	WITHOUT_CLASSIFICATION	8.740687907960743E-7	IMPLEMENTATION
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999899358919871	WITHOUT_CLASSIFICATION	1.006410801282559E-5	IMPLEMENTATION
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999547207201815	WITHOUT_CLASSIFICATION	4.5279279818513397E-5	IMPLEMENTATION
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999992439947621	WITHOUT_CLASSIFICATION	7.560052379245411E-7	IMPLEMENTATION
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999825488043	WITHOUT_CLASSIFICATION	1.7451195700999006E-8	IMPLEMENTATION
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999982412129342	WITHOUT_CLASSIFICATION	1.758787065801217E-5	IMPLEMENTATION
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999999465387108	WITHOUT_CLASSIFICATION	5.3461289254161356E-8	IMPLEMENTATION
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999590067439507	WITHOUT_CLASSIFICATION	4.0993256049268565E-5	IMPLEMENTATION
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999791819255063	WITHOUT_CLASSIFICATION	2.0818074493634835E-5	IMPLEMENTATION
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999787291567424	WITHOUT_CLASSIFICATION	2.1270843257703195E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999825486522426	WITHOUT_CLASSIFICATION	1.74513477574933E-5	IMPLEMENTATION
found	WITHOUT_CLASSIFICATION	0.9999825486522426	WITHOUT_CLASSIFICATION	1.74513477574933E-5	IMPLEMENTATION
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999999548316374	WITHOUT_CLASSIFICATION	4.5168362611456026E-8	IMPLEMENTATION
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999982257699325	WITHOUT_CLASSIFICATION	1.7742300674590711E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999953370143986	WITHOUT_CLASSIFICATION	4.662985601361184E-6	IMPLEMENTATION
<String, String>	WITHOUT_CLASSIFICATION	0.9999953370143986	WITHOUT_CLASSIFICATION	4.662985601361184E-6	IMPLEMENTATION
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999993818415006	WITHOUT_CLASSIFICATION	6.181584993663103E-7	IMPLEMENTATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999996952514056	WITHOUT_CLASSIFICATION	3.047485944137133E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999964850516829	WITHOUT_CLASSIFICATION	3.5149483170246413E-6	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994874137001	WITHOUT_CLASSIFICATION	5.125862998563691E-7	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996795631863	WITHOUT_CLASSIFICATION	3.2043681377553983E-7	IMPLEMENTATION
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999964850516829	WITHOUT_CLASSIFICATION	3.5149483170246413E-6	IMPLEMENTATION
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994874137001	WITHOUT_CLASSIFICATION	5.125862998563691E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999631051099279	WITHOUT_CLASSIFICATION	3.6894890072071124E-5	IMPLEMENTATION
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999330961161	WITHOUT_CLASSIFICATION	6.690388383853156E-8	IMPLEMENTATION
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999055643896	WITHOUT_CLASSIFICATION	9.443561047968177E-8	IMPLEMENTATION
the element has changed	WITHOUT_CLASSIFICATION	0.9999997802939973	WITHOUT_CLASSIFICATION	2.1970600267827778E-7	IMPLEMENTATION
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9990391073641304	WITHOUT_CLASSIFICATION	9.608926358696669E-4	IMPLEMENTATION
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9997359176189297	WITHOUT_CLASSIFICATION	2.64082381070347E-4	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998602939978	WITHOUT_CLASSIFICATION	1.3970600213466368E-7	IMPLEMENTATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999998602939978	WITHOUT_CLASSIFICATION	1.3970600213466368E-7	IMPLEMENTATION
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999998296262287	WITHOUT_CLASSIFICATION	1.7037377131575115E-7	IMPLEMENTATION
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999860972364	WITHOUT_CLASSIFICATION	1.39027635458163E-8	IMPLEMENTATION
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999580435728249	WITHOUT_CLASSIFICATION	4.195642717504808E-5	IMPLEMENTATION
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999969965095	WITHOUT_CLASSIFICATION	3.0034904615077727E-9	IMPLEMENTATION
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999989762228692	WITHOUT_CLASSIFICATION	1.0237771307966037E-6	IMPLEMENTATION
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999958246578594	WITHOUT_CLASSIFICATION	4.175342140634303E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996795631863	WITHOUT_CLASSIFICATION	3.2043681377553983E-7	IMPLEMENTATION
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999986561585729	WITHOUT_CLASSIFICATION	1.3438414271165149E-6	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999810037837	WITHOUT_CLASSIFICATION	1.899621623815474E-8	IMPLEMENTATION
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999810037837	WITHOUT_CLASSIFICATION	1.899621623815474E-8	IMPLEMENTATION
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999946910275069	WITHOUT_CLASSIFICATION	5.308972493076257E-6	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999631051099279	WITHOUT_CLASSIFICATION	3.6894890072071124E-5	IMPLEMENTATION
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999594191490019	WITHOUT_CLASSIFICATION	4.0580850998081005E-5	IMPLEMENTATION
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999399756557606	WITHOUT_CLASSIFICATION	6.002434423936274E-5	IMPLEMENTATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9973034584496546	WITHOUT_CLASSIFICATION	0.0026965415503453264	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996848499584	WITHOUT_CLASSIFICATION	3.1515004164197665E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997038991257083	WITHOUT_CLASSIFICATION	2.961008742917152E-4	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999631051099279	WITHOUT_CLASSIFICATION	3.6894890072071124E-5	IMPLEMENTATION
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996848499584	WITHOUT_CLASSIFICATION	3.1515004164197665E-7	IMPLEMENTATION
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997038991257083	WITHOUT_CLASSIFICATION	2.961008742917152E-4	IMPLEMENTATION
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999955775422826	WITHOUT_CLASSIFICATION	4.422457717343855E-6	IMPLEMENTATION
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999919998742366	WITHOUT_CLASSIFICATION	8.000125763294997E-6	IMPLEMENTATION
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998723147697	WITHOUT_CLASSIFICATION	1.2768523020031687E-7	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999631051099279	WITHOUT_CLASSIFICATION	3.6894890072071124E-5	IMPLEMENTATION
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999631051099279	WITHOUT_CLASSIFICATION	3.6894890072071124E-5	IMPLEMENTATION
from Map	WITHOUT_CLASSIFICATION	0.9999989419670835	WITHOUT_CLASSIFICATION	1.0580329164988245E-6	IMPLEMENTATION
from SortedMap	WITHOUT_CLASSIFICATION	0.9999987950163682	WITHOUT_CLASSIFICATION	1.2049836317271138E-6	IMPLEMENTATION
inject the data	WITHOUT_CLASSIFICATION	0.9999982232474321	WITHOUT_CLASSIFICATION	1.7767525677668967E-6	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999338053537769	WITHOUT_CLASSIFICATION	6.619464622308108E-5	IMPLEMENTATION
default pool size 20	WITHOUT_CLASSIFICATION	0.9999986463857686	WITHOUT_CLASSIFICATION	1.3536142313767574E-6	IMPLEMENTATION
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999951892863	WITHOUT_CLASSIFICATION	4.81071372346011E-9	IMPLEMENTATION
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999689757238437	WITHOUT_CLASSIFICATION	3.1024276156290374E-5	IMPLEMENTATION
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999990106765386	WITHOUT_CLASSIFICATION	9.893234613956176E-7	IMPLEMENTATION
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999805175337901	WITHOUT_CLASSIFICATION	1.9482466209901932E-5	IMPLEMENTATION
then bind it	WITHOUT_CLASSIFICATION	0.9999949230028575	WITHOUT_CLASSIFICATION	5.076997142503472E-6	IMPLEMENTATION
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999616704978326	WITHOUT_CLASSIFICATION	3.83295021673841E-5	IMPLEMENTATION
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.99965524876691	WITHOUT_CLASSIFICATION	3.4475123309003145E-4	IMPLEMENTATION
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999419021739	WITHOUT_CLASSIFICATION	5.809782616470858E-8	IMPLEMENTATION
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999440298524486	WITHOUT_CLASSIFICATION	5.597014755134427E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904231842738	WITHOUT_CLASSIFICATION	9.576815726264029E-6	IMPLEMENTATION
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999168964878	WITHOUT_CLASSIFICATION	8.310351219501543E-8	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999338053537769	WITHOUT_CLASSIFICATION	6.619464622308108E-5	IMPLEMENTATION
private String propertyName;	WITHOUT_CLASSIFICATION	0.999994239055879	WITHOUT_CLASSIFICATION	5.7609441208995635E-6	IMPLEMENTATION
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999967277366324	WITHOUT_CLASSIFICATION	3.27226336749774E-6	IMPLEMENTATION
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998122374902	WITHOUT_CLASSIFICATION	1.877625097477309E-7	IMPLEMENTATION
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999741983144235	WITHOUT_CLASSIFICATION	2.5801685576596066E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999180332169054	WITHOUT_CLASSIFICATION	8.196678309457223E-5	IMPLEMENTATION
unsupported	WITHOUT_CLASSIFICATION	0.9999180332169054	WITHOUT_CLASSIFICATION	8.196678309457223E-5	IMPLEMENTATION
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999338053537769	WITHOUT_CLASSIFICATION	6.619464622308108E-5	IMPLEMENTATION
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999495701169255	WITHOUT_CLASSIFICATION	5.042988307447862E-5	IMPLEMENTATION
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999995198733427	WITHOUT_CLASSIFICATION	4.801266573227877E-7	IMPLEMENTATION
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.997431205945562	WITHOUT_CLASSIFICATION	0.0025687940544379955	IMPLEMENTATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999387674603	WITHOUT_CLASSIFICATION	6.12325396815976E-8	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999944391134078	WITHOUT_CLASSIFICATION	5.560886592238523E-6	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999825257451456	WITHOUT_CLASSIFICATION	1.747425485441428E-5	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999977625434123	WITHOUT_CLASSIFICATION	2.2374565877618866E-6	IMPLEMENTATION
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999973089723072	WITHOUT_CLASSIFICATION	2.69102769275143E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999933040847087	WITHOUT_CLASSIFICATION	6.695915291280865E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999997434943836	WITHOUT_CLASSIFICATION	2.565056164645355E-7	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999996900354758	WITHOUT_CLASSIFICATION	3.0996452420271893E-6	IMPLEMENTATION
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999993731120999	WITHOUT_CLASSIFICATION	6.268879000608271E-7	IMPLEMENTATION
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9990818157611695	WITHOUT_CLASSIFICATION	9.181842388304265E-4	IMPLEMENTATION
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999998301206551	WITHOUT_CLASSIFICATION	1.698793449273919E-7	IMPLEMENTATION
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997272205267	WITHOUT_CLASSIFICATION	2.7277947343097373E-7	IMPLEMENTATION
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999955567935	WITHOUT_CLASSIFICATION	4.4432065136242645E-9	IMPLEMENTATION
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999973168648005	WITHOUT_CLASSIFICATION	2.6831351993921852E-6	IMPLEMENTATION
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999943864865065	WITHOUT_CLASSIFICATION	5.613513493554715E-6	IMPLEMENTATION
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999292782493	WITHOUT_CLASSIFICATION	7.072175067463252E-8	IMPLEMENTATION
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999701688229	WITHOUT_CLASSIFICATION	2.983117714138115E-8	IMPLEMENTATION
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999826241981247	WITHOUT_CLASSIFICATION	1.7375801875306128E-5	IMPLEMENTATION
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999732819788228	WITHOUT_CLASSIFICATION	2.6718021177181527E-5	IMPLEMENTATION
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959701301557677	WITHOUT_CLASSIFICATION	0.004029869844232284	IMPLEMENTATION
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9956438148075656	WITHOUT_CLASSIFICATION	0.004356185192434418	IMPLEMENTATION
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996385719916496	WITHOUT_CLASSIFICATION	3.614280083504333E-4	IMPLEMENTATION
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998888271330676	WITHOUT_CLASSIFICATION	1.1117286693248341E-4	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979092785583134	WITHOUT_CLASSIFICATION	0.002090721441686588	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994384086746956	WITHOUT_CLASSIFICATION	5.615913253044155E-4	IMPLEMENTATION
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9914455854097243	WITHOUT_CLASSIFICATION	0.008554414590275696	IMPLEMENTATION
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999357871219391	WITHOUT_CLASSIFICATION	6.421287806084727E-5	IMPLEMENTATION
by default we report no support	WITHOUT_CLASSIFICATION	0.9998955506377261	WITHOUT_CLASSIFICATION	1.0444936227386897E-4	IMPLEMENTATION
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999325964800482	WITHOUT_CLASSIFICATION	6.740351995185615E-5	IMPLEMENTATION
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999953419116604	WITHOUT_CLASSIFICATION	4.6580883396127765E-5	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832340225884	WITHOUT_CLASSIFICATION	1.6765977411567646E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194135395766	WITHOUT_CLASSIFICATION	8.058646042334264E-5	IMPLEMENTATION
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984485546365665	WITHOUT_CLASSIFICATION	0.0015514453634335108	IMPLEMENTATION
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999488659236063	WITHOUT_CLASSIFICATION	5.1134076393579175E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956815392618	WITHOUT_CLASSIFICATION	4.318460738138692E-6	IMPLEMENTATION
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9966156227747341	WITHOUT_CLASSIFICATION	0.003384377225265751	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977224048830905	WITHOUT_CLASSIFICATION	0.002277595116909592	IMPLEMENTATION
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999984962256614	WITHOUT_CLASSIFICATION	1.5037743386721556E-6	IMPLEMENTATION
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996916516238038	WITHOUT_CLASSIFICATION	3.0834837619619053E-4	IMPLEMENTATION
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9555204134114583	WITHOUT_CLASSIFICATION	0.04447958658854166	IMPLEMENTATION
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999990932380161	WITHOUT_CLASSIFICATION	9.067619840300799E-7	IMPLEMENTATION
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999448948723	WITHOUT_CLASSIFICATION	5.510512780987007E-8	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999984571832495	WITHOUT_CLASSIFICATION	1.542816750384628E-6	IMPLEMENTATION
" cascade";	WITHOUT_CLASSIFICATION	0.9999938817713802	WITHOUT_CLASSIFICATION	6.1182286199487615E-6	IMPLEMENTATION
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999992263655613	WITHOUT_CLASSIFICATION	7.736344386689836E-7	IMPLEMENTATION
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999999924873224	WITHOUT_CLASSIFICATION	7.512677525946678E-9	IMPLEMENTATION
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999994164587526	WITHOUT_CLASSIFICATION	5.835412473934228E-7	IMPLEMENTATION
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999993307788258	WITHOUT_CLASSIFICATION	6.692211742060646E-6	IMPLEMENTATION
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999525331188013	WITHOUT_CLASSIFICATION	4.746688119872087E-5	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999876704033492	WITHOUT_CLASSIFICATION	1.23295966506957E-5	IMPLEMENTATION
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999932220959699	WITHOUT_CLASSIFICATION	6.777904030174109E-6	IMPLEMENTATION
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999864190774	WITHOUT_CLASSIFICATION	1.3580922715100304E-8	IMPLEMENTATION
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999999078937335	WITHOUT_CLASSIFICATION	9.210626645699843E-8	IMPLEMENTATION
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999509417478053	WITHOUT_CLASSIFICATION	4.905825219473961E-5	IMPLEMENTATION
HHH-2300	WITHOUT_CLASSIFICATION	0.9999897937373066	WITHOUT_CLASSIFICATION	1.020626269338511E-5	IMPLEMENTATION
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999996969134494	WITHOUT_CLASSIFICATION	3.030865506423639E-7	IMPLEMENTATION
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998902523706078	WITHOUT_CLASSIFICATION	1.0974762939226536E-4	IMPLEMENTATION
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999366178227257	WITHOUT_CLASSIFICATION	6.338217727435294E-5	IMPLEMENTATION
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974873706263	WITHOUT_CLASSIFICATION	2.5126293736453426E-6	IMPLEMENTATION
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804386806528	WITHOUT_CLASSIFICATION	1.9561319347230153E-5	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9987940745662618	WITHOUT_CLASSIFICATION	0.0012059254337382275	IMPLEMENTATION
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999933572198286	WITHOUT_CLASSIFICATION	6.642780171356721E-6	IMPLEMENTATION
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9998344766200407	WITHOUT_CLASSIFICATION	1.6552337995931002E-4	IMPLEMENTATION
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999827292442806	WITHOUT_CLASSIFICATION	1.7270755719450006E-5	IMPLEMENTATION
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602956653593	WITHOUT_CLASSIFICATION	3.97043346406137E-5	IMPLEMENTATION
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999546752039	WITHOUT_CLASSIFICATION	4.532479613871052E-8	IMPLEMENTATION
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999999919655005	WITHOUT_CLASSIFICATION	8.034499473878321E-9	IMPLEMENTATION
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999997537165866	WITHOUT_CLASSIFICATION	2.462834135164289E-7	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999967716	WITHOUT_CLASSIFICATION	3.228399943300385E-9	IMPLEMENTATION
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9993979025708841	WITHOUT_CLASSIFICATION	6.020974291158063E-4	IMPLEMENTATION
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999271756813509	WITHOUT_CLASSIFICATION	7.282431864903035E-5	IMPLEMENTATION
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999999999776004	WITHOUT_CLASSIFICATION	2.2399595359109358E-10	IMPLEMENTATION
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999939464093921	WITHOUT_CLASSIFICATION	6.053590607905545E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999984571832495	WITHOUT_CLASSIFICATION	1.542816750384628E-6	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999998352550756	WITHOUT_CLASSIFICATION	1.6474492445376238E-7	IMPLEMENTATION
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996939379919	WITHOUT_CLASSIFICATION	3.060620081387592E-7	IMPLEMENTATION
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999930639638899	WITHOUT_CLASSIFICATION	6.936036110116325E-6	IMPLEMENTATION
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999972227764178	WITHOUT_CLASSIFICATION	2.7772235822852147E-6	IMPLEMENTATION
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999996293633718	WITHOUT_CLASSIFICATION	3.7063662819884065E-7	IMPLEMENTATION
function templates	WITHOUT_CLASSIFICATION	0.9999996855054389	WITHOUT_CLASSIFICATION	3.1449456099506093E-7	IMPLEMENTATION
not null is implicit	WITHOUT_CLASSIFICATION	0.9987940745662618	WITHOUT_CLASSIFICATION	0.0012059254337382275	IMPLEMENTATION
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999993184603484	WITHOUT_CLASSIFICATION	6.815396515406796E-7	IMPLEMENTATION
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999977004360913	WITHOUT_CLASSIFICATION	2.2995639087378334E-6	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995485124706	WITHOUT_CLASSIFICATION	4.514875292980168E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999914203823854	WITHOUT_CLASSIFICATION	8.579617614557348E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998271687878	WITHOUT_CLASSIFICATION	1.7283121217489557E-7	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999837016928	WITHOUT_CLASSIFICATION	1.6298307192850877E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999988216086842	WITHOUT_CLASSIFICATION	1.178391315795872E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999448964169	WITHOUT_CLASSIFICATION	5.5103583073564664E-8	IMPLEMENTATION
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999224048003	WITHOUT_CLASSIFICATION	7.75951998231203E-8	IMPLEMENTATION
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999996455058038	WITHOUT_CLASSIFICATION	3.5449419628599604E-7	IMPLEMENTATION
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999996231873844	WITHOUT_CLASSIFICATION	3.768126156590352E-7	IMPLEMENTATION
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999949914982007	WITHOUT_CLASSIFICATION	5.008501799284509E-6	IMPLEMENTATION
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999939377489362	WITHOUT_CLASSIFICATION	6.062251063819859E-6	IMPLEMENTATION
add new ordered map	WITHOUT_CLASSIFICATION	0.9999765944653608	WITHOUT_CLASSIFICATION	2.3405534639198676E-5	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999998850786229	WITHOUT_CLASSIFICATION	1.1492137716480779E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999923992758	WITHOUT_CLASSIFICATION	7.600724112450591E-9	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999884090083087	WITHOUT_CLASSIFICATION	1.1590991691324629E-5	IMPLEMENTATION
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999983324093	WITHOUT_CLASSIFICATION	1.667590653013581E-9	IMPLEMENTATION
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999991269600079	WITHOUT_CLASSIFICATION	8.730399921590658E-7	IMPLEMENTATION
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999997109697256	WITHOUT_CLASSIFICATION	2.8903027440635045E-6	IMPLEMENTATION
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998973233915874	WITHOUT_CLASSIFICATION	1.0267660841251708E-4	IMPLEMENTATION
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999998937767995	WITHOUT_CLASSIFICATION	1.0622320044765131E-7	IMPLEMENTATION
No batch statements	WITHOUT_CLASSIFICATION	0.9999999144914474	WITHOUT_CLASSIFICATION	8.550855250557131E-8	IMPLEMENTATION
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.999954413991949	WITHOUT_CLASSIFICATION	4.558600805102963E-5	IMPLEMENTATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999991042188648	WITHOUT_CLASSIFICATION	8.957811351352862E-7	IMPLEMENTATION
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999994755951512	WITHOUT_CLASSIFICATION	5.244048487383412E-7	IMPLEMENTATION
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998385555658	WITHOUT_CLASSIFICATION	1.6144443419692286E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999984571832495	WITHOUT_CLASSIFICATION	1.542816750384628E-6	IMPLEMENTATION
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999993265603082	WITHOUT_CLASSIFICATION	6.734396918222438E-7	IMPLEMENTATION
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999999845843076	WITHOUT_CLASSIFICATION	1.5415692346363976E-8	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999995603142082	WITHOUT_CLASSIFICATION	4.3968579176523335E-7	IMPLEMENTATION
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999231306111	WITHOUT_CLASSIFICATION	7.686938881434955E-8	IMPLEMENTATION
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999998311333668	WITHOUT_CLASSIFICATION	1.6886663319545687E-7	IMPLEMENTATION
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999997929882565	WITHOUT_CLASSIFICATION	2.07011743381657E-7	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999984571832495	WITHOUT_CLASSIFICATION	1.542816750384628E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999994710425578	WITHOUT_CLASSIFICATION	5.289574421306619E-7	IMPLEMENTATION
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999884090083087	WITHOUT_CLASSIFICATION	1.1590991691324629E-5	IMPLEMENTATION
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999908668964488	WITHOUT_CLASSIFICATION	9.133103551202508E-6	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999923992758	WITHOUT_CLASSIFICATION	7.600724112450591E-9	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999997614258	WITHOUT_CLASSIFICATION	2.385740826381909E-10	IMPLEMENTATION
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9945849446421653	WITHOUT_CLASSIFICATION	0.005415055357834681	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999432674079	WITHOUT_CLASSIFICATION	5.673259199992518E-8	IMPLEMENTATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999995485124706	WITHOUT_CLASSIFICATION	4.514875292980168E-7	IMPLEMENTATION
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999914203823854	WITHOUT_CLASSIFICATION	8.579617614557348E-6	IMPLEMENTATION
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999998271687878	WITHOUT_CLASSIFICATION	1.7283121217489557E-7	IMPLEMENTATION
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.999999665071762	WITHOUT_CLASSIFICATION	3.3492823810458624E-7	IMPLEMENTATION
add the main query	WITHOUT_CLASSIFICATION	0.9999989856255241	WITHOUT_CLASSIFICATION	1.0143744759425902E-6	IMPLEMENTATION
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999977380464129	WITHOUT_CLASSIFICATION	2.2619535871299158E-6	IMPLEMENTATION
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999999923992758	WITHOUT_CLASSIFICATION	7.600724112450591E-9	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999997614258	WITHOUT_CLASSIFICATION	2.385740826381909E-10	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999984571832495	WITHOUT_CLASSIFICATION	1.542816750384628E-6	IMPLEMENTATION
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999999837016928	WITHOUT_CLASSIFICATION	1.6298307192850877E-7	IMPLEMENTATION
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999988216086842	WITHOUT_CLASSIFICATION	1.178391315795872E-5	IMPLEMENTATION
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999999448964169	WITHOUT_CLASSIFICATION	5.5103583073564664E-8	IMPLEMENTATION
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998861312375	WITHOUT_CLASSIFICATION	1.1386876253377329E-7	IMPLEMENTATION
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998565728866	WITHOUT_CLASSIFICATION	1.4342711346820354E-7	IMPLEMENTATION
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999998555619012	WITHOUT_CLASSIFICATION	1.4443809878581888E-7	IMPLEMENTATION
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999946645639	WITHOUT_CLASSIFICATION	5.335436156583997E-9	IMPLEMENTATION
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999999656892773	WITHOUT_CLASSIFICATION	3.431072278438154E-8	IMPLEMENTATION
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999994227933283	WITHOUT_CLASSIFICATION	5.772066717358812E-7	IMPLEMENTATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977224048830905	WITHOUT_CLASSIFICATION	0.002277595116909592	IMPLEMENTATION
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999966470006	WITHOUT_CLASSIFICATION	3.352999415019378E-9	IMPLEMENTATION
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9982645080851084	WITHOUT_CLASSIFICATION	0.0017354919148916573	IMPLEMENTATION
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999999647048639	WITHOUT_CLASSIFICATION	3.5295136099614156E-7	IMPLEMENTATION
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999709866445	WITHOUT_CLASSIFICATION	2.9013355426820396E-8	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.999998983661319	WITHOUT_CLASSIFICATION	1.0163386810221513E-6	IMPLEMENTATION
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979092785583134	WITHOUT_CLASSIFICATION	0.002090721441686588	IMPLEMENTATION
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994384086746956	WITHOUT_CLASSIFICATION	5.615913253044155E-4	IMPLEMENTATION
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999832340225884	WITHOUT_CLASSIFICATION	1.6765977411567646E-5	IMPLEMENTATION
identifier-commalist	WITHOUT_CLASSIFICATION	0.999998983661319	WITHOUT_CLASSIFICATION	1.0163386810221513E-6	IMPLEMENTATION
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999990059436311	WITHOUT_CLASSIFICATION	9.940563688035825E-7	IMPLEMENTATION
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999942529360569	WITHOUT_CLASSIFICATION	5.747063943058729E-6	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998692028270854	WITHOUT_CLASSIFICATION	0.0013079717291459795	IMPLEMENTATION
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990846820364834	WITHOUT_CLASSIFICATION	9.1531796351666E-4	IMPLEMENTATION
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999978646756603	WITHOUT_CLASSIFICATION	2.1353243396151416E-6	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
<String>	WITHOUT_CLASSIFICATION	0.9999508604591397	WITHOUT_CLASSIFICATION	4.9139540860335426E-5	IMPLEMENTATION
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999194135395766	WITHOUT_CLASSIFICATION	8.058646042334264E-5	IMPLEMENTATION
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956815392618	WITHOUT_CLASSIFICATION	4.318460738138692E-6	IMPLEMENTATION
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999967716	WITHOUT_CLASSIFICATION	3.228399943300385E-9	IMPLEMENTATION
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999999993441281	WITHOUT_CLASSIFICATION	6.558720516299581E-10	IMPLEMENTATION
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999999893118533	WITHOUT_CLASSIFICATION	1.0688146651187243E-8	IMPLEMENTATION
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999944990201	WITHOUT_CLASSIFICATION	5.5009798293758025E-9	IMPLEMENTATION
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999993865567692	WITHOUT_CLASSIFICATION	6.134432307250319E-7	IMPLEMENTATION
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999979581135269	WITHOUT_CLASSIFICATION	2.0418864731766727E-6	IMPLEMENTATION
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998757885553	WITHOUT_CLASSIFICATION	1.2421144471061201E-7	IMPLEMENTATION
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999992584144871	WITHOUT_CLASSIFICATION	7.415855127602034E-7	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999933040847087	WITHOUT_CLASSIFICATION	6.695915291280865E-6	IMPLEMENTATION
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9993311332319295	WITHOUT_CLASSIFICATION	6.688667680705682E-4	IMPLEMENTATION
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999999620472157	WITHOUT_CLASSIFICATION	3.7952784306017864E-7	IMPLEMENTATION
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999051677046521	WITHOUT_CLASSIFICATION	9.483229534787958E-5	IMPLEMENTATION
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999941244281381	WITHOUT_CLASSIFICATION	5.8755718619392964E-6	IMPLEMENTATION
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998688588937	WITHOUT_CLASSIFICATION	1.3114110631635038E-7	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999957280812509	WITHOUT_CLASSIFICATION	4.2719187489907104E-6	IMPLEMENTATION
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999896010337295	WITHOUT_CLASSIFICATION	1.0398966270494428E-4	IMPLEMENTATION
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9929895771839473	WITHOUT_CLASSIFICATION	0.007010422816052626	IMPLEMENTATION
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993088176855	WITHOUT_CLASSIFICATION	6.911823144588473E-7	IMPLEMENTATION
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999996755446793	WITHOUT_CLASSIFICATION	3.244553206989229E-6	IMPLEMENTATION
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999996429903665	WITHOUT_CLASSIFICATION	3.570096335376291E-7	IMPLEMENTATION
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999968384170318	WITHOUT_CLASSIFICATION	3.161582968196595E-5	IMPLEMENTATION
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999896876766774	WITHOUT_CLASSIFICATION	1.0312323322656345E-5	IMPLEMENTATION
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999894737906537	WITHOUT_CLASSIFICATION	1.0526209346251913E-5	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999945576574203	WITHOUT_CLASSIFICATION	5.442342579721417E-6	IMPLEMENTATION
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999990363989388	WITHOUT_CLASSIFICATION	9.636010612164617E-7	IMPLEMENTATION
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999995145441674	WITHOUT_CLASSIFICATION	4.854558326603953E-7	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980363537184	WITHOUT_CLASSIFICATION	1.963646281570911E-6	IMPLEMENTATION
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999645149993331	WITHOUT_CLASSIFICATION	3.548500066676692E-5	IMPLEMENTATION
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969511861607	WITHOUT_CLASSIFICATION	3.048813839292726E-6	IMPLEMENTATION
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992538669675	WITHOUT_CLASSIFICATION	7.461330325606982E-7	IMPLEMENTATION
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.99999809162986	WITHOUT_CLASSIFICATION	1.9083701400801915E-6	IMPLEMENTATION
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999998817754495	WITHOUT_CLASSIFICATION	1.1822455050687728E-7	IMPLEMENTATION
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999985907131589	WITHOUT_CLASSIFICATION	1.4092868411431327E-6	IMPLEMENTATION
continue loop	WITHOUT_CLASSIFICATION	0.9999993787061567	WITHOUT_CLASSIFICATION	6.212938431254909E-7	IMPLEMENTATION
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999587243788438	WITHOUT_CLASSIFICATION	4.127562115626514E-5	IMPLEMENTATION
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999012687517916	WITHOUT_CLASSIFICATION	9.873124820832976E-5	IMPLEMENTATION
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999984812958514	WITHOUT_CLASSIFICATION	1.5187041485817433E-6	IMPLEMENTATION
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999983025018419	WITHOUT_CLASSIFICATION	1.6974981580523277E-6	IMPLEMENTATION
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999943587190143	WITHOUT_CLASSIFICATION	5.641280985574781E-6	IMPLEMENTATION
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999849266090813	WITHOUT_CLASSIFICATION	1.5073390918699073E-4	IMPLEMENTATION
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999712171107	WITHOUT_CLASSIFICATION	2.8782889364328125E-8	IMPLEMENTATION
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996999141481877	WITHOUT_CLASSIFICATION	3.0008585181230587E-4	IMPLEMENTATION
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999817922638	WITHOUT_CLASSIFICATION	1.820773621611889E-8	IMPLEMENTATION
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999418273833	WITHOUT_CLASSIFICATION	5.817261682197313E-8	IMPLEMENTATION
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999791561432858	WITHOUT_CLASSIFICATION	2.0843856714166568E-5	IMPLEMENTATION
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999998568235887	WITHOUT_CLASSIFICATION	1.4317641138756077E-7	IMPLEMENTATION
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999975698277433	WITHOUT_CLASSIFICATION	2.430172256531377E-6	IMPLEMENTATION
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999990491080988	WITHOUT_CLASSIFICATION	9.50891901259698E-7	IMPLEMENTATION
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999978991152827	WITHOUT_CLASSIFICATION	2.10088471733662E-6	IMPLEMENTATION
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9988688164881033	WITHOUT_CLASSIFICATION	0.0011311835118966817	IMPLEMENTATION
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9996532438934657	WITHOUT_CLASSIFICATION	3.4675610653439105E-4	IMPLEMENTATION
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999306745173501	WITHOUT_CLASSIFICATION	6.932548264992345E-5	IMPLEMENTATION
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999995815395393	WITHOUT_CLASSIFICATION	4.184604607609874E-7	IMPLEMENTATION
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999929117579621	WITHOUT_CLASSIFICATION	7.088242037907132E-5	IMPLEMENTATION
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999849959614349	WITHOUT_CLASSIFICATION	1.5004038565085318E-5	IMPLEMENTATION
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999965765407791	WITHOUT_CLASSIFICATION	3.4234592207597477E-6	IMPLEMENTATION
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999935079901058	WITHOUT_CLASSIFICATION	6.492009894263254E-6	IMPLEMENTATION
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999945629473629	WITHOUT_CLASSIFICATION	5.437052637222232E-6	IMPLEMENTATION
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9992597965383838	WITHOUT_CLASSIFICATION	7.402034616161126E-4	IMPLEMENTATION
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999921464606644	WITHOUT_CLASSIFICATION	7.853539335609121E-6	IMPLEMENTATION
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999035776405	WITHOUT_CLASSIFICATION	9.642235951338555E-8	IMPLEMENTATION
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997084297855	WITHOUT_CLASSIFICATION	2.915702145683097E-7	IMPLEMENTATION
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999992822890348	WITHOUT_CLASSIFICATION	7.177109651134765E-7	IMPLEMENTATION
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999724815343128	WITHOUT_CLASSIFICATION	2.7518465687142273E-5	IMPLEMENTATION
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9987556692857604	WITHOUT_CLASSIFICATION	0.001244330714239514	IMPLEMENTATION
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999895318867218	WITHOUT_CLASSIFICATION	1.0468113278265308E-5	IMPLEMENTATION
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999434915739154	WITHOUT_CLASSIFICATION	5.650842608461018E-5	IMPLEMENTATION
unwrap the object	WITHOUT_CLASSIFICATION	0.9999997979184128	WITHOUT_CLASSIFICATION	2.0208158733488314E-7	IMPLEMENTATION
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997841254074	WITHOUT_CLASSIFICATION	2.158745926512522E-7	IMPLEMENTATION
return the proxied object	WITHOUT_CLASSIFICATION	0.99998698791884	WITHOUT_CLASSIFICATION	1.3012081160036531E-5	IMPLEMENTATION
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999986781052632	WITHOUT_CLASSIFICATION	1.321894736811405E-6	IMPLEMENTATION
early exit...	WITHOUT_CLASSIFICATION	0.9999965885783606	WITHOUT_CLASSIFICATION	3.4114216394658977E-6	IMPLEMENTATION
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9940042822929509	WITHOUT_CLASSIFICATION	0.005995717707049145	IMPLEMENTATION
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9992573585405391	WITHOUT_CLASSIFICATION	7.426414594610158E-4	IMPLEMENTATION
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999998609998139	WITHOUT_CLASSIFICATION	1.3900018614164286E-7	IMPLEMENTATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999768613028418	WITHOUT_CLASSIFICATION	2.3138697158172396E-5	IMPLEMENTATION
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999915414141216	WITHOUT_CLASSIFICATION	8.45858587846216E-6	IMPLEMENTATION
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999999994629298	WITHOUT_CLASSIFICATION	5.3707020636780716E-9	IMPLEMENTATION
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999999851320688	WITHOUT_CLASSIFICATION	1.4867931295917338E-8	IMPLEMENTATION
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999989536588297	WITHOUT_CLASSIFICATION	1.0463411702832981E-5	IMPLEMENTATION
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999682381198	WITHOUT_CLASSIFICATION	3.17618802092733E-8	IMPLEMENTATION
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.99995466222889	WITHOUT_CLASSIFICATION	4.53377711099829E-5	IMPLEMENTATION
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999833635439	WITHOUT_CLASSIFICATION	1.663645610763753E-8	IMPLEMENTATION
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.99993690832462	WITHOUT_CLASSIFICATION	6.309167537992346E-5	IMPLEMENTATION
bad cast	WITHOUT_CLASSIFICATION	0.9999880729888171	WITHOUT_CLASSIFICATION	1.1927011182903722E-5	IMPLEMENTATION
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999989249034	WITHOUT_CLASSIFICATION	1.0750965766814639E-9	IMPLEMENTATION
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999631553929	WITHOUT_CLASSIFICATION	3.684460706343096E-8	IMPLEMENTATION
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999998116	WITHOUT_CLASSIFICATION	1.8852431638647368E-13	IMPLEMENTATION
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999970016515731	WITHOUT_CLASSIFICATION	2.998348426790623E-6	IMPLEMENTATION
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999997727937431	WITHOUT_CLASSIFICATION	2.2720625705071619E-7	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982099307909	WITHOUT_CLASSIFICATION	1.7900692092056317E-6	IMPLEMENTATION
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999973013144774	WITHOUT_CLASSIFICATION	2.6986855226871054E-6	IMPLEMENTATION
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999877551058839	WITHOUT_CLASSIFICATION	1.2244894116202023E-5	IMPLEMENTATION
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999894397372097	WITHOUT_CLASSIFICATION	1.0560262790342913E-5	IMPLEMENTATION
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999470904932	WITHOUT_CLASSIFICATION	5.2909506668828534E-8	IMPLEMENTATION
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999685005702263	WITHOUT_CLASSIFICATION	3.149942977354865E-5	IMPLEMENTATION
take a snapshot	WITHOUT_CLASSIFICATION	0.9999956786874574	WITHOUT_CLASSIFICATION	4.3213125424764226E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999899851788371	WITHOUT_CLASSIFICATION	1.001482116300724E-5	IMPLEMENTATION
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999444891791	WITHOUT_CLASSIFICATION	5.551082102989123E-8	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999528263164065	WITHOUT_CLASSIFICATION	4.717368359348631E-5	IMPLEMENTATION
We've been here before	WITHOUT_CLASSIFICATION	0.9998993268640997	WITHOUT_CLASSIFICATION	1.0067313590040527E-4	IMPLEMENTATION
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999995817380536	WITHOUT_CLASSIFICATION	4.1826194642669984E-7	IMPLEMENTATION
do the work	WITHOUT_CLASSIFICATION	0.9999528263164065	WITHOUT_CLASSIFICATION	4.717368359348631E-5	IMPLEMENTATION
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998987973489	WITHOUT_CLASSIFICATION	1.0120265120046762E-7	IMPLEMENTATION
or its key changed	WITHOUT_CLASSIFICATION	0.9999999812531783	WITHOUT_CLASSIFICATION	1.874682174035225E-8	IMPLEMENTATION
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9991378772774856	WITHOUT_CLASSIFICATION	8.621227225144722E-4	IMPLEMENTATION
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9516243262679451	WITHOUT_CLASSIFICATION	0.04837567373205495	IMPLEMENTATION
force initialize!	WITHOUT_CLASSIFICATION	0.9999999708108325	WITHOUT_CLASSIFICATION	2.9189167465933655E-8	IMPLEMENTATION
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999996272865967	WITHOUT_CLASSIFICATION	3.727134033053116E-7	IMPLEMENTATION
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999083708820835	WITHOUT_CLASSIFICATION	9.162911791649971E-5	IMPLEMENTATION
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999997544287809	WITHOUT_CLASSIFICATION	2.4557121909868523E-6	IMPLEMENTATION
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9988038844637865	WITHOUT_CLASSIFICATION	0.0011961155362133799	IMPLEMENTATION
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999530204129111	WITHOUT_CLASSIFICATION	4.697958708878915E-5	IMPLEMENTATION
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999999811723652	WITHOUT_CLASSIFICATION	1.882763476786445E-8	IMPLEMENTATION
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999505307653572	WITHOUT_CLASSIFICATION	4.9469234642766714E-5	IMPLEMENTATION
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999903191936016	WITHOUT_CLASSIFICATION	9.680806398439811E-6	IMPLEMENTATION
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999356544563	WITHOUT_CLASSIFICATION	6.434554366457434E-8	IMPLEMENTATION
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999993934961144	WITHOUT_CLASSIFICATION	6.0650388560675965E-6	IMPLEMENTATION
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999991674931027	WITHOUT_CLASSIFICATION	8.325068973754692E-7	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998062970941225	WITHOUT_CLASSIFICATION	1.937029058774414E-4	IMPLEMENTATION
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998062970941225	WITHOUT_CLASSIFICATION	1.937029058774414E-4	IMPLEMENTATION
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999748969966473	WITHOUT_CLASSIFICATION	2.5103003352604486E-5	IMPLEMENTATION
optimization	WITHOUT_CLASSIFICATION	0.9999972709799594	WITHOUT_CLASSIFICATION	2.729020040578742E-6	IMPLEMENTATION
optimization optimization	WITHOUT_CLASSIFICATION	0.9999771397613385	WITHOUT_CLASSIFICATION	2.2860238661513585E-5	IMPLEMENTATION
re-snapshot	WITHOUT_CLASSIFICATION	0.999996267190173	WITHOUT_CLASSIFICATION	3.732809826878061E-6	IMPLEMENTATION
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999987375654407	WITHOUT_CLASSIFICATION	1.2624345593147452E-6	IMPLEMENTATION
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999884377126259	WITHOUT_CLASSIFICATION	1.156228737415191E-5	IMPLEMENTATION
memory optimization	WITHOUT_CLASSIFICATION	0.9999991204094166	WITHOUT_CLASSIFICATION	8.795905833929955E-7	IMPLEMENTATION
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999933288269	WITHOUT_CLASSIFICATION	6.671173029779419E-9	IMPLEMENTATION
copied from Session:	WITHOUT_CLASSIFICATION	0.9999999541568011	WITHOUT_CLASSIFICATION	4.584319879569493E-8	IMPLEMENTATION
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999717508236736	WITHOUT_CLASSIFICATION	2.8249176326410768E-5	IMPLEMENTATION
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999999706847867	WITHOUT_CLASSIFICATION	2.9315213270530432E-8	IMPLEMENTATION
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998066709079	WITHOUT_CLASSIFICATION	1.9332909199706994E-7	IMPLEMENTATION
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999980065605086	WITHOUT_CLASSIFICATION	1.993439491274759E-6	IMPLEMENTATION
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999994282167609	WITHOUT_CLASSIFICATION	5.717832390989365E-7	IMPLEMENTATION
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999832076958	WITHOUT_CLASSIFICATION	1.6792304160210115E-8	IMPLEMENTATION
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999957280812509	WITHOUT_CLASSIFICATION	4.2719187489907104E-6	IMPLEMENTATION
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999951898224423	WITHOUT_CLASSIFICATION	4.81017755765351E-6	IMPLEMENTATION
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999998350801091	WITHOUT_CLASSIFICATION	1.6491989089257637E-7	IMPLEMENTATION
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999755427583078	WITHOUT_CLASSIFICATION	2.445724169221452E-5	IMPLEMENTATION
do the test	WITHOUT_CLASSIFICATION	0.9999862528703874	WITHOUT_CLASSIFICATION	1.3747129612490031E-5	IMPLEMENTATION
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999228824764	WITHOUT_CLASSIFICATION	7.711752357862289E-8	IMPLEMENTATION
unwrap it	WITHOUT_CLASSIFICATION	0.9999944758570906	WITHOUT_CLASSIFICATION	5.524142909355935E-6	IMPLEMENTATION
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999999773557319	WITHOUT_CLASSIFICATION	2.264426815157527E-8	IMPLEMENTATION
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999999976644577	WITHOUT_CLASSIFICATION	2.33554229522508E-8	IMPLEMENTATION
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999926210787703	WITHOUT_CLASSIFICATION	7.378921229603648E-6	IMPLEMENTATION
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999850983348221	WITHOUT_CLASSIFICATION	1.4901665178056196E-5	IMPLEMENTATION
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999996873822	WITHOUT_CLASSIFICATION	3.1261781658451703E-10	IMPLEMENTATION
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999360028609013	WITHOUT_CLASSIFICATION	6.399713909873433E-5	IMPLEMENTATION
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999831084595869	WITHOUT_CLASSIFICATION	1.6891540413119E-5	IMPLEMENTATION
int count = 0;	WITHOUT_CLASSIFICATION	0.9999996632832824	WITHOUT_CLASSIFICATION	3.3671671760070864E-7	IMPLEMENTATION
the first key found after the given key	WITHOUT_CLASSIFICATION	0.999998073400146	WITHOUT_CLASSIFICATION	1.92659985402471E-6	IMPLEMENTATION
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999998856738956	WITHOUT_CLASSIFICATION	1.1432610441516078E-7	IMPLEMENTATION
count++;	WITHOUT_CLASSIFICATION	0.9999939456909142	WITHOUT_CLASSIFICATION	6.054309085827554E-6	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999979359129961	WITHOUT_CLASSIFICATION	2.0640870039272E-6	IMPLEMENTATION
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999998414034064	WITHOUT_CLASSIFICATION	1.5859659366329152E-7	IMPLEMENTATION
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999982342118365	WITHOUT_CLASSIFICATION	1.7657881634523463E-6	IMPLEMENTATION
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999886313832251	WITHOUT_CLASSIFICATION	1.1368616774933183E-5	IMPLEMENTATION
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999976640079729	WITHOUT_CLASSIFICATION	2.3359920272237443E-6	IMPLEMENTATION
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999971898857776	WITHOUT_CLASSIFICATION	2.810114222475945E-6	IMPLEMENTATION
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999999551602596	WITHOUT_CLASSIFICATION	4.4839740346885184E-8	IMPLEMENTATION
initialize this collection	WITHOUT_CLASSIFICATION	0.9999934324222495	WITHOUT_CLASSIFICATION	6.567577750557808E-6	IMPLEMENTATION
create one	WITHOUT_CLASSIFICATION	0.999998427190323	WITHOUT_CLASSIFICATION	1.5728096770351543E-6	IMPLEMENTATION
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999984584991595	WITHOUT_CLASSIFICATION	1.5415008405365097E-6	IMPLEMENTATION
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998606007429	WITHOUT_CLASSIFICATION	1.3939925707964478E-7	IMPLEMENTATION
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999218431115	WITHOUT_CLASSIFICATION	7.81568884205534E-8	IMPLEMENTATION
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999966002898558	WITHOUT_CLASSIFICATION	3.3997101442437432E-6	IMPLEMENTATION
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997709966012858	WITHOUT_CLASSIFICATION	2.2900339871419084E-4	IMPLEMENTATION
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866560447869	WITHOUT_CLASSIFICATION	1.3343955213250634E-5	IMPLEMENTATION
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239098818771	WITHOUT_CLASSIFICATION	7.609011812289814E-5	IMPLEMENTATION
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999991669973889	WITHOUT_CLASSIFICATION	8.330026111009757E-6	IMPLEMENTATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999957796585088	WITHOUT_CLASSIFICATION	4.220341491221263E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991444165761	WITHOUT_CLASSIFICATION	8.555834240115291E-7	IMPLEMENTATION
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999989585174562	WITHOUT_CLASSIFICATION	1.0414825438194612E-6	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999963217192246	WITHOUT_CLASSIFICATION	3.6782807755422695E-6	IMPLEMENTATION
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994225398900703	WITHOUT_CLASSIFICATION	5.774601099295288E-4	IMPLEMENTATION
don't care...	WITHOUT_CLASSIFICATION	0.9999963217192246	WITHOUT_CLASSIFICATION	3.6782807755422695E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999791830778132	WITHOUT_CLASSIFICATION	2.081692218680656E-5	IMPLEMENTATION
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999964118155428	WITHOUT_CLASSIFICATION	3.5881844572071708E-6	IMPLEMENTATION
named parameter	WITHOUT_CLASSIFICATION	0.9999983514010363	WITHOUT_CLASSIFICATION	1.6485989636977761E-6	IMPLEMENTATION
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999982309066849	WITHOUT_CLASSIFICATION	1.769093315157717E-6	IMPLEMENTATION
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999987804341622	WITHOUT_CLASSIFICATION	1.219565837682354E-6	IMPLEMENTATION
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999135799398	WITHOUT_CLASSIFICATION	8.642006020078054E-8	IMPLEMENTATION
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999981254005306	WITHOUT_CLASSIFICATION	1.8745994694501517E-6	IMPLEMENTATION
perform the actual work	WITHOUT_CLASSIFICATION	0.9999995545043371	WITHOUT_CLASSIFICATION	4.4549566299215494E-7	IMPLEMENTATION
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999993121921111	WITHOUT_CLASSIFICATION	6.878078889401088E-7	IMPLEMENTATION
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9984187097092303	WITHOUT_CLASSIFICATION	0.001581290290769623	IMPLEMENTATION
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999986945181176	WITHOUT_CLASSIFICATION	1.3054818823480314E-6	IMPLEMENTATION
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999980902770174	WITHOUT_CLASSIFICATION	1.909722982665021E-6	IMPLEMENTATION
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999998411792708	WITHOUT_CLASSIFICATION	1.588207291967528E-7	IMPLEMENTATION
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9999983957550589	WITHOUT_CLASSIFICATION	1.6042449411102046E-6	IMPLEMENTATION
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999974426988303	WITHOUT_CLASSIFICATION	2.557301169707853E-5	IMPLEMENTATION
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999995943150884	WITHOUT_CLASSIFICATION	4.0568491153086577E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999997547057546	WITHOUT_CLASSIFICATION	2.4529424537273403E-7	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999997547057546	WITHOUT_CLASSIFICATION	2.4529424537273403E-7	IMPLEMENTATION
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999996732447735	WITHOUT_CLASSIFICATION	3.2675522657422316E-7	IMPLEMENTATION
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999472888382	WITHOUT_CLASSIFICATION	5.271116176143618E-8	IMPLEMENTATION
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999966756856	WITHOUT_CLASSIFICATION	3.3243143781054017E-9	IMPLEMENTATION
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999920387736824	WITHOUT_CLASSIFICATION	7.961226317665692E-6	IMPLEMENTATION
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999997901425	WITHOUT_CLASSIFICATION	2.0985739256082228E-10	IMPLEMENTATION
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999761115549	WITHOUT_CLASSIFICATION	2.388844508445833E-8	IMPLEMENTATION
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9602948438890356	WITHOUT_CLASSIFICATION	0.03970515611096424	IMPLEMENTATION
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999983790535445	WITHOUT_CLASSIFICATION	1.6209464555003655E-6	IMPLEMENTATION
grab its current state	WITHOUT_CLASSIFICATION	0.9999993679113547	WITHOUT_CLASSIFICATION	6.320886453080093E-7	IMPLEMENTATION
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999958309236655	WITHOUT_CLASSIFICATION	4.169076334444015E-6	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999150712316	WITHOUT_CLASSIFICATION	8.492876836770493E-8	IMPLEMENTATION
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999357099965	WITHOUT_CLASSIFICATION	6.429000361364243E-8	IMPLEMENTATION
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999996571426474	WITHOUT_CLASSIFICATION	3.428573525970071E-6	IMPLEMENTATION
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999894407214018	WITHOUT_CLASSIFICATION	1.0559278598232712E-5	IMPLEMENTATION
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999692723044694	WITHOUT_CLASSIFICATION	3.07276955305153E-5	IMPLEMENTATION
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999814936764	WITHOUT_CLASSIFICATION	1.850632352779138E-8	IMPLEMENTATION
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999999617827776	WITHOUT_CLASSIFICATION	3.8217222388819457E-7	IMPLEMENTATION
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9973599717252084	WITHOUT_CLASSIFICATION	0.0026400282747915437	IMPLEMENTATION
use the current version	WITHOUT_CLASSIFICATION	0.9999428424173739	WITHOUT_CLASSIFICATION	5.715758262604925E-5	IMPLEMENTATION
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999990851996727	WITHOUT_CLASSIFICATION	9.148003273821144E-7	IMPLEMENTATION
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999985034073923	WITHOUT_CLASSIFICATION	1.49659260777019E-6	IMPLEMENTATION
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9971670520873784	WITHOUT_CLASSIFICATION	0.0028329479126215644	IMPLEMENTATION
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9968608375386357	WITHOUT_CLASSIFICATION	0.0031391624613641674	IMPLEMENTATION
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999559801675135	WITHOUT_CLASSIFICATION	4.401983248647792E-5	IMPLEMENTATION
even process null collections	WITHOUT_CLASSIFICATION	0.9999973195128252	WITHOUT_CLASSIFICATION	2.6804871747996286E-6	IMPLEMENTATION
get the id from the object	WITHOUT_CLASSIFICATION	0.9999999435088024	WITHOUT_CLASSIFICATION	5.649119766767455E-8	IMPLEMENTATION
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999936885597	WITHOUT_CLASSIFICATION	6.311440257157356E-9	IMPLEMENTATION
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998383180919249	WITHOUT_CLASSIFICATION	1.616819080750809E-4	IMPLEMENTATION
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999947299440396	WITHOUT_CLASSIFICATION	5.270055960392046E-6	IMPLEMENTATION
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999764090176	WITHOUT_CLASSIFICATION	2.3590982365367993E-8	IMPLEMENTATION
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999999971365345	WITHOUT_CLASSIFICATION	2.8634654750937473E-9	IMPLEMENTATION
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999972819428734	WITHOUT_CLASSIFICATION	2.7180571267056047E-6	IMPLEMENTATION
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999438265915169	WITHOUT_CLASSIFICATION	5.617340848295548E-5	IMPLEMENTATION
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999970356018691	WITHOUT_CLASSIFICATION	2.9643981309335296E-6	IMPLEMENTATION
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998770713456152	WITHOUT_CLASSIFICATION	1.2292865438490755E-4	IMPLEMENTATION
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999995625989019	WITHOUT_CLASSIFICATION	4.3740109817648905E-7	IMPLEMENTATION
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999990343421662	WITHOUT_CLASSIFICATION	9.656578338559846E-7	IMPLEMENTATION
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999981918099692	WITHOUT_CLASSIFICATION	1.8081900308401395E-6	IMPLEMENTATION
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999803680227	WITHOUT_CLASSIFICATION	1.963197720062194E-8	IMPLEMENTATION
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999824852547033	WITHOUT_CLASSIFICATION	1.7514745296681455E-5	IMPLEMENTATION
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999848287748	WITHOUT_CLASSIFICATION	1.5171225128728292E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966167006057	WITHOUT_CLASSIFICATION	3.3832993943296953E-6	IMPLEMENTATION
some statistics	WITHOUT_CLASSIFICATION	0.9999991687229561	WITHOUT_CLASSIFICATION	8.312770438623197E-7	IMPLEMENTATION
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9863654091169679	WITHOUT_CLASSIFICATION	0.013634590883032111	IMPLEMENTATION
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999920621889121	WITHOUT_CLASSIFICATION	7.937811087896547E-6	IMPLEMENTATION
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999557953187125	WITHOUT_CLASSIFICATION	4.420468128742996E-5	IMPLEMENTATION
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.7530862266913688	WITHOUT_CLASSIFICATION	0.24691377330863112	IMPLEMENTATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999980073678	WITHOUT_CLASSIFICATION	1.992632195396147E-9	IMPLEMENTATION
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999842500858801	WITHOUT_CLASSIFICATION	1.5749914119884223E-5	IMPLEMENTATION
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999517260275896	WITHOUT_CLASSIFICATION	4.8273972410352175E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947852516463	WITHOUT_CLASSIFICATION	5.2147483537945234E-6	IMPLEMENTATION
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999148420665	WITHOUT_CLASSIFICATION	8.515793346602046E-8	IMPLEMENTATION
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999994121678	WITHOUT_CLASSIFICATION	5.8783221231535975E-9	IMPLEMENTATION
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999592883855152	WITHOUT_CLASSIFICATION	4.0711614484829675E-5	IMPLEMENTATION
get a snapshot	WITHOUT_CLASSIFICATION	0.9999988244656677	WITHOUT_CLASSIFICATION	1.1755343323057192E-6	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999994710425578	WITHOUT_CLASSIFICATION	5.289574421306619E-7	IMPLEMENTATION
package-private	WITHOUT_CLASSIFICATION	0.9999994710425578	WITHOUT_CLASSIFICATION	5.289574421306619E-7	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999994064839113	WITHOUT_CLASSIFICATION	5.935160887416614E-7	IMPLEMENTATION
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999969470005357	WITHOUT_CLASSIFICATION	3.052999464302183E-5	IMPLEMENTATION
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999998407144473	WITHOUT_CLASSIFICATION	1.5928555274955688E-7	IMPLEMENTATION
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999997154834026	WITHOUT_CLASSIFICATION	2.845165973621817E-7	IMPLEMENTATION
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999990288209346	WITHOUT_CLASSIFICATION	9.711790654412187E-7	IMPLEMENTATION
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999471127596	WITHOUT_CLASSIFICATION	5.288724040915004E-8	IMPLEMENTATION
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9992664079786615	WITHOUT_CLASSIFICATION	7.335920213384371E-4	IMPLEMENTATION
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999599376606723	WITHOUT_CLASSIFICATION	4.006233932781855E-5	IMPLEMENTATION
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999969354805992	WITHOUT_CLASSIFICATION	3.064519400777089E-6	IMPLEMENTATION
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999990100513	WITHOUT_CLASSIFICATION	9.899487254008502E-10	IMPLEMENTATION
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998823195132	WITHOUT_CLASSIFICATION	1.1768048674497406E-7	IMPLEMENTATION
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999966130432699	WITHOUT_CLASSIFICATION	3.3869567300929766E-6	IMPLEMENTATION
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999977400497888	WITHOUT_CLASSIFICATION	2.2599502110743706E-6	IMPLEMENTATION
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999982419582025	WITHOUT_CLASSIFICATION	1.7580417973738135E-6	IMPLEMENTATION
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999999828434448	WITHOUT_CLASSIFICATION	1.7156555190913873E-7	IMPLEMENTATION
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999979074264101	WITHOUT_CLASSIFICATION	2.0925735898942266E-6	IMPLEMENTATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999806852401613	WITHOUT_CLASSIFICATION	1.9314759838816282E-5	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999874296375025	WITHOUT_CLASSIFICATION	1.2570362497414039E-5	IMPLEMENTATION
cachedState,	WITHOUT_CLASSIFICATION	0.9999953319265836	WITHOUT_CLASSIFICATION	4.66807341638265E-6	IMPLEMENTATION
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999943321017	WITHOUT_CLASSIFICATION	5.6678982146028105E-9	IMPLEMENTATION
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999803142531761	WITHOUT_CLASSIFICATION	1.9685746823896587E-5	IMPLEMENTATION
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999662169586	WITHOUT_CLASSIFICATION	3.378304125985036E-8	IMPLEMENTATION
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999910323178566	WITHOUT_CLASSIFICATION	8.96768214344755E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999660436441002	WITHOUT_CLASSIFICATION	3.3956355899696566E-5	IMPLEMENTATION
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.994216381744786	WITHOUT_CLASSIFICATION	0.005783618255213994	IMPLEMENTATION
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999554638326704	WITHOUT_CLASSIFICATION	4.4536167329614725E-5	IMPLEMENTATION
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9861933530780286	WITHOUT_CLASSIFICATION	0.013806646921971389	IMPLEMENTATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9994881210048248	WITHOUT_CLASSIFICATION	5.118789951752031E-4	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998008868698771	WITHOUT_CLASSIFICATION	1.991131301228812E-4	IMPLEMENTATION
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999856878894811	WITHOUT_CLASSIFICATION	1.431211051903204E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999660436441002	WITHOUT_CLASSIFICATION	3.3956355899696566E-5	IMPLEMENTATION
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999981396281064	WITHOUT_CLASSIFICATION	1.8603718936568563E-6	IMPLEMENTATION
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999812771408	WITHOUT_CLASSIFICATION	1.872285916325015E-8	IMPLEMENTATION
DELETED	WITHOUT_CLASSIFICATION	0.999957772380718	WITHOUT_CLASSIFICATION	4.2227619281959834E-5	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999991897325982	WITHOUT_CLASSIFICATION	8.102674017582283E-7	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999974595434	WITHOUT_CLASSIFICATION	2.5404566745578388E-9	IMPLEMENTATION
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999959574773969	WITHOUT_CLASSIFICATION	4.042522603112957E-6	IMPLEMENTATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9997697119053508	WITHOUT_CLASSIFICATION	2.302880946492519E-4	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999829753534	WITHOUT_CLASSIFICATION	1.7024646532088824E-8	IMPLEMENTATION
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9685448799327583	WITHOUT_CLASSIFICATION	0.031455120067241764	IMPLEMENTATION
before cascade!	WITHOUT_CLASSIFICATION	0.9999991897325982	WITHOUT_CLASSIFICATION	8.102674017582283E-7	IMPLEMENTATION
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999999977902307	WITHOUT_CLASSIFICATION	2.2097691955684746E-9	IMPLEMENTATION
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999829753534	WITHOUT_CLASSIFICATION	1.7024646532088824E-8	IMPLEMENTATION
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999951101056147	WITHOUT_CLASSIFICATION	4.889894385322406E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999058532481175	WITHOUT_CLASSIFICATION	9.414675188236167E-5	IMPLEMENTATION
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999993847405104	WITHOUT_CLASSIFICATION	6.152594895144529E-7	IMPLEMENTATION
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999150712316	WITHOUT_CLASSIFICATION	8.492876836770493E-8	IMPLEMENTATION
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997995939572	WITHOUT_CLASSIFICATION	2.0040604269137174E-7	IMPLEMENTATION
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999999123670661	WITHOUT_CLASSIFICATION	8.763293392209011E-8	IMPLEMENTATION
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999541570994	WITHOUT_CLASSIFICATION	4.584290052602386E-8	IMPLEMENTATION
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9990248882350116	WITHOUT_CLASSIFICATION	9.751117649884536E-4	IMPLEMENTATION
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999995992117	WITHOUT_CLASSIFICATION	4.00788268596439E-10	IMPLEMENTATION
the object is persistent	WITHOUT_CLASSIFICATION	0.9999960508726073	WITHOUT_CLASSIFICATION	3.949127392633857E-6	IMPLEMENTATION
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999990835145293	WITHOUT_CLASSIFICATION	9.164854708110405E-7	IMPLEMENTATION
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999998869221337	WITHOUT_CLASSIFICATION	1.1307786631047106E-7	IMPLEMENTATION
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999998473365323	WITHOUT_CLASSIFICATION	1.5266346769087426E-6	IMPLEMENTATION
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999822712631555	WITHOUT_CLASSIFICATION	1.7728736844384614E-5	IMPLEMENTATION
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999894055270664	WITHOUT_CLASSIFICATION	1.0594472933540842E-5	IMPLEMENTATION
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999975643723	WITHOUT_CLASSIFICATION	2.435627811253488E-9	IMPLEMENTATION
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999997654478224	WITHOUT_CLASSIFICATION	2.345521776030193E-6	IMPLEMENTATION
eat it and try next	WITHOUT_CLASSIFICATION	0.9998495196329619	WITHOUT_CLASSIFICATION	1.5048036703812467E-4	IMPLEMENTATION
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999894771357277	WITHOUT_CLASSIFICATION	1.0522864272217131E-5	IMPLEMENTATION
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999768899453136	WITHOUT_CLASSIFICATION	2.311005468634804E-5	IMPLEMENTATION
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999938984914639	WITHOUT_CLASSIFICATION	6.101508536121617E-6	IMPLEMENTATION
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999997899728451	WITHOUT_CLASSIFICATION	2.1002715493577578E-7	IMPLEMENTATION
remove initial " and "	WITHOUT_CLASSIFICATION	0.999996112732424	WITHOUT_CLASSIFICATION	3.887267576045023E-6	IMPLEMENTATION
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999999315448209	WITHOUT_CLASSIFICATION	6.845517916216677E-8	IMPLEMENTATION
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999998559561319	WITHOUT_CLASSIFICATION	1.440438681031922E-6	IMPLEMENTATION
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9994098458620624	WITHOUT_CLASSIFICATION	5.90154137937622E-4	IMPLEMENTATION
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999926138067	WITHOUT_CLASSIFICATION	7.3861932776087845E-9	IMPLEMENTATION
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999997068607	WITHOUT_CLASSIFICATION	2.9313924719215397E-10	IMPLEMENTATION
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999976662522215	WITHOUT_CLASSIFICATION	2.3337477785066965E-6	IMPLEMENTATION
Note this!!	WITHOUT_CLASSIFICATION	0.999980100006568	WITHOUT_CLASSIFICATION	1.989999343199874E-5	IMPLEMENTATION
Error message constants.	WITHOUT_CLASSIFICATION	0.9999992900872325	WITHOUT_CLASSIFICATION	7.099127673674188E-7	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620738013915	WITHOUT_CLASSIFICATION	3.792619860845529E-5	IMPLEMENTATION
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998814289435052	WITHOUT_CLASSIFICATION	1.185710564948635E-4	IMPLEMENTATION
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999712790743455	WITHOUT_CLASSIFICATION	2.872092565451161E-5	IMPLEMENTATION
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9990281325256035	WITHOUT_CLASSIFICATION	9.718674743963845E-4	IMPLEMENTATION
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9997694238776142	WITHOUT_CLASSIFICATION	2.3057612238565052E-4	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996037583098	WITHOUT_CLASSIFICATION	3.9624169023279355E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996037583098	WITHOUT_CLASSIFICATION	3.9624169023279355E-7	IMPLEMENTATION
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999998722106922	WITHOUT_CLASSIFICATION	1.2778930773008441E-7	IMPLEMENTATION
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999905371686603	WITHOUT_CLASSIFICATION	9.462831339668887E-6	IMPLEMENTATION
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999994809703507	WITHOUT_CLASSIFICATION	5.190296493141502E-6	IMPLEMENTATION
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999958011767061	WITHOUT_CLASSIFICATION	4.198823293846059E-6	IMPLEMENTATION
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999968326599233	WITHOUT_CLASSIFICATION	3.1673400766396605E-6	IMPLEMENTATION
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999965420968844	WITHOUT_CLASSIFICATION	3.457903115613593E-6	IMPLEMENTATION
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999994498609381	WITHOUT_CLASSIFICATION	5.501390618442772E-7	IMPLEMENTATION
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999991886238602	WITHOUT_CLASSIFICATION	8.11376139753711E-7	IMPLEMENTATION
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999997781575753	WITHOUT_CLASSIFICATION	2.2184242463714775E-7	IMPLEMENTATION
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999817468986	WITHOUT_CLASSIFICATION	1.8253101374937616E-8	IMPLEMENTATION
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999797063794	WITHOUT_CLASSIFICATION	2.029362063584406E-8	IMPLEMENTATION
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999995869171938	WITHOUT_CLASSIFICATION	4.130828061560643E-7	IMPLEMENTATION
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999388164453424	WITHOUT_CLASSIFICATION	6.118355465747837E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996037583098	WITHOUT_CLASSIFICATION	3.9624169023279355E-7	IMPLEMENTATION
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999983410503225	WITHOUT_CLASSIFICATION	1.6589496776052165E-6	IMPLEMENTATION
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999902397431382	WITHOUT_CLASSIFICATION	9.760256861718123E-6	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999660078835972	WITHOUT_CLASSIFICATION	3.399211640270236E-5	IMPLEMENTATION
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999949784976447	WITHOUT_CLASSIFICATION	5.021502355236236E-6	IMPLEMENTATION
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999997525378732	WITHOUT_CLASSIFICATION	2.4746212683701154E-7	IMPLEMENTATION
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999999934652316	WITHOUT_CLASSIFICATION	6.534768401594548E-8	IMPLEMENTATION
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9994294046797955	WITHOUT_CLASSIFICATION	5.70595320204561E-4	IMPLEMENTATION
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999610815595041	WITHOUT_CLASSIFICATION	3.891844049587784E-5	IMPLEMENTATION
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999989857294574	WITHOUT_CLASSIFICATION	1.0142705425902249E-6	IMPLEMENTATION
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999151978745598	WITHOUT_CLASSIFICATION	8.480212544013131E-5	IMPLEMENTATION
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999392439952771	WITHOUT_CLASSIFICATION	6.075600472292651E-5	IMPLEMENTATION
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999620738013915	WITHOUT_CLASSIFICATION	3.792619860845529E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996037583098	WITHOUT_CLASSIFICATION	3.9624169023279355E-7	IMPLEMENTATION
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999751878194288	WITHOUT_CLASSIFICATION	2.4812180571133738E-5	IMPLEMENTATION
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999740185181	WITHOUT_CLASSIFICATION	2.5981481898406006E-7	IMPLEMENTATION
switch	WITHOUT_CLASSIFICATION	0.9999943577161217	WITHOUT_CLASSIFICATION	5.6422838783570485E-6	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999986440524226	WITHOUT_CLASSIFICATION	1.355947577352639E-6	IMPLEMENTATION
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999604077694033	WITHOUT_CLASSIFICATION	3.9592230596800325E-5	IMPLEMENTATION
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999983765336932	WITHOUT_CLASSIFICATION	1.6234663069294734E-6	IMPLEMENTATION
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942075136036	WITHOUT_CLASSIFICATION	5.792486396435575E-6	IMPLEMENTATION
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999554339271	WITHOUT_CLASSIFICATION	4.456607299387971E-8	IMPLEMENTATION
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999912480155	WITHOUT_CLASSIFICATION	8.751984507983581E-9	IMPLEMENTATION
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999999334701296	WITHOUT_CLASSIFICATION	6.6529870422228E-8	IMPLEMENTATION
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999996206179106	WITHOUT_CLASSIFICATION	3.793820894131241E-7	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999027690340091	WITHOUT_CLASSIFICATION	9.723096599092498E-5	IMPLEMENTATION
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999979611950983	WITHOUT_CLASSIFICATION	2.0388049016307915E-6	IMPLEMENTATION
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999943954148302	WITHOUT_CLASSIFICATION	5.604585169770659E-6	IMPLEMENTATION
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999791830778132	WITHOUT_CLASSIFICATION	2.081692218680656E-5	IMPLEMENTATION
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998108987687	WITHOUT_CLASSIFICATION	1.891012314247059E-7	IMPLEMENTATION
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999528224812	WITHOUT_CLASSIFICATION	4.71775187490382E-8	IMPLEMENTATION
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999586645603	WITHOUT_CLASSIFICATION	4.133543978441447E-8	IMPLEMENTATION
all clear	WITHOUT_CLASSIFICATION	0.9999912756008076	WITHOUT_CLASSIFICATION	8.724399192451379E-6	IMPLEMENTATION
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999977454305	WITHOUT_CLASSIFICATION	2.254569531286719E-9	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999974261392286	WITHOUT_CLASSIFICATION	2.5738607712932624E-6	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999974261392286	WITHOUT_CLASSIFICATION	2.5738607712932624E-6	IMPLEMENTATION
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9997303721441463	WITHOUT_CLASSIFICATION	2.6962785585376057E-4	IMPLEMENTATION
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999936456254	WITHOUT_CLASSIFICATION	6.354374650803422E-9	IMPLEMENTATION
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999721860219968	WITHOUT_CLASSIFICATION	2.781397800322759E-5	IMPLEMENTATION
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999690523409804	WITHOUT_CLASSIFICATION	3.094765901958346E-5	IMPLEMENTATION
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999733032593495	WITHOUT_CLASSIFICATION	2.669674065046242E-5	IMPLEMENTATION
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999989314432265	WITHOUT_CLASSIFICATION	1.068556773554436E-6	IMPLEMENTATION
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9996198271092803	WITHOUT_CLASSIFICATION	3.801728907196764E-4	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999265225377	WITHOUT_CLASSIFICATION	7.347746238180124E-8	IMPLEMENTATION
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999265225377	WITHOUT_CLASSIFICATION	7.347746238180124E-8	IMPLEMENTATION
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999781388293383	WITHOUT_CLASSIFICATION	2.186117066164483E-5	IMPLEMENTATION
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999999269378201	WITHOUT_CLASSIFICATION	7.306217989727462E-8	IMPLEMENTATION
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999990880724758	WITHOUT_CLASSIFICATION	9.119275241578719E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997326137	WITHOUT_CLASSIFICATION	2.673863000400203E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997326137	WITHOUT_CLASSIFICATION	2.673863000400203E-7	IMPLEMENTATION
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999997326137	WITHOUT_CLASSIFICATION	2.673863000400203E-7	IMPLEMENTATION
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999990111720313	WITHOUT_CLASSIFICATION	9.88827968828628E-7	IMPLEMENTATION
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999436332584	WITHOUT_CLASSIFICATION	5.636674165711356E-8	IMPLEMENTATION
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9744236918844172	WITHOUT_CLASSIFICATION	0.025576308115582754	IMPLEMENTATION
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999636942806053	WITHOUT_CLASSIFICATION	3.630571939463289E-5	IMPLEMENTATION
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999991103665203	WITHOUT_CLASSIFICATION	8.896334796580044E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996037583098	WITHOUT_CLASSIFICATION	3.9624169023279355E-7	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996037583098	WITHOUT_CLASSIFICATION	3.9624169023279355E-7	IMPLEMENTATION
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999465961502909	WITHOUT_CLASSIFICATION	5.340384970915324E-5	IMPLEMENTATION
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9992951356758487	WITHOUT_CLASSIFICATION	7.04864324151408E-4	IMPLEMENTATION
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9981184300998649	WITHOUT_CLASSIFICATION	0.001881569900135161	IMPLEMENTATION
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9994550267960207	WITHOUT_CLASSIFICATION	5.449732039792478E-4	IMPLEMENTATION
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999996541462386	WITHOUT_CLASSIFICATION	3.4585376149759197E-7	IMPLEMENTATION
igndore it...	WITHOUT_CLASSIFICATION	0.9999894909531589	WITHOUT_CLASSIFICATION	1.0509046841140262E-5	IMPLEMENTATION
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999999674337589	WITHOUT_CLASSIFICATION	3.256624110142783E-7	IMPLEMENTATION
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999937902689022	WITHOUT_CLASSIFICATION	6.209731097746727E-6	IMPLEMENTATION
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999999596803497	WITHOUT_CLASSIFICATION	4.031965029119476E-8	IMPLEMENTATION
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999830340106	WITHOUT_CLASSIFICATION	1.696598938318513E-8	IMPLEMENTATION
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998502754232	WITHOUT_CLASSIFICATION	1.497245767713113E-7	IMPLEMENTATION
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999965229719414	WITHOUT_CLASSIFICATION	3.47702805863348E-6	IMPLEMENTATION
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999984648838398	WITHOUT_CLASSIFICATION	1.5351161602187796E-6	IMPLEMENTATION
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999984648838398	WITHOUT_CLASSIFICATION	1.5351161602187796E-6	IMPLEMENTATION
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999982828917984	WITHOUT_CLASSIFICATION	1.7171082015604388E-6	IMPLEMENTATION
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999982828917984	WITHOUT_CLASSIFICATION	1.7171082015604388E-6	IMPLEMENTATION
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999983021442934	WITHOUT_CLASSIFICATION	1.697855706568114E-6	IMPLEMENTATION
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999935098634963	WITHOUT_CLASSIFICATION	6.490136503626121E-6	IMPLEMENTATION
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999935098634963	WITHOUT_CLASSIFICATION	6.490136503626121E-6	IMPLEMENTATION
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999954862182978	WITHOUT_CLASSIFICATION	4.513781702133621E-6	IMPLEMENTATION
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999954181650792	WITHOUT_CLASSIFICATION	4.581834920782929E-6	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999244634336016	WITHOUT_CLASSIFICATION	7.553656639843323E-5	IMPLEMENTATION
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999974261392286	WITHOUT_CLASSIFICATION	2.5738607712932624E-6	IMPLEMENTATION
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998951562407893	WITHOUT_CLASSIFICATION	1.0484375921079616E-4	IMPLEMENTATION
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999954181650792	WITHOUT_CLASSIFICATION	4.581834920782929E-6	IMPLEMENTATION
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999999651235952	WITHOUT_CLASSIFICATION	3.487640487273953E-8	IMPLEMENTATION
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9980273371910018	WITHOUT_CLASSIFICATION	0.001972662808998209	IMPLEMENTATION
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999879427360951	WITHOUT_CLASSIFICATION	1.2057263904763285E-5	IMPLEMENTATION
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999991410152864	WITHOUT_CLASSIFICATION	8.589847136012448E-6	IMPLEMENTATION
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999996312591223	WITHOUT_CLASSIFICATION	3.687408776917947E-7	IMPLEMENTATION
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999334643716928	WITHOUT_CLASSIFICATION	6.653562830716105E-5	IMPLEMENTATION
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999889905966701	WITHOUT_CLASSIFICATION	1.1009403329888235E-5	IMPLEMENTATION
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999802935797509	WITHOUT_CLASSIFICATION	1.9706420248991592E-5	IMPLEMENTATION
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999997557528939	WITHOUT_CLASSIFICATION	2.442471060846181E-7	IMPLEMENTATION
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999999525465	WITHOUT_CLASSIFICATION	4.745351763608839E-11	IMPLEMENTATION
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999885863949	WITHOUT_CLASSIFICATION	1.14136051613837E-8	IMPLEMENTATION
Set it!	WITHOUT_CLASSIFICATION	0.9999800520231101	WITHOUT_CLASSIFICATION	1.9947976889798767E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999804451168931	WITHOUT_CLASSIFICATION	1.955488310696282E-5	IMPLEMENTATION
strip the " where "	WITHOUT_CLASSIFICATION	0.9999972714421332	WITHOUT_CLASSIFICATION	2.7285578666897434E-6	IMPLEMENTATION
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9997495433491113	WITHOUT_CLASSIFICATION	2.5045665088873416E-4	IMPLEMENTATION
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999817139138545	WITHOUT_CLASSIFICATION	1.8286086145467374E-5	IMPLEMENTATION
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999354406699	WITHOUT_CLASSIFICATION	6.455933014107693E-8	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999982931903951	WITHOUT_CLASSIFICATION	1.7068096049840496E-6	IMPLEMENTATION
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999982931903951	WITHOUT_CLASSIFICATION	1.7068096049840496E-6	IMPLEMENTATION
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999990923677037	WITHOUT_CLASSIFICATION	9.076322963461933E-7	IMPLEMENTATION
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999492707591	WITHOUT_CLASSIFICATION	5.0729241004931047E-8	IMPLEMENTATION
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999994334401004	WITHOUT_CLASSIFICATION	5.665598995869364E-7	IMPLEMENTATION
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996535985164574	WITHOUT_CLASSIFICATION	3.464014835426091E-4	IMPLEMENTATION
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999972375639147	WITHOUT_CLASSIFICATION	2.762436085285625E-6	IMPLEMENTATION
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999474272646456	WITHOUT_CLASSIFICATION	5.257273535441641E-5	IMPLEMENTATION
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999892395454323	WITHOUT_CLASSIFICATION	1.0760454567690569E-5	IMPLEMENTATION
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999990593690535	WITHOUT_CLASSIFICATION	9.406309465686892E-7	IMPLEMENTATION
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999934548100962	WITHOUT_CLASSIFICATION	6.545189903794241E-5	IMPLEMENTATION
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.99999999393509	WITHOUT_CLASSIFICATION	6.064909947708476E-9	IMPLEMENTATION
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999981490625	WITHOUT_CLASSIFICATION	1.8509375035443565E-8	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999027690340091	WITHOUT_CLASSIFICATION	9.723096599092498E-5	IMPLEMENTATION
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999356485482	WITHOUT_CLASSIFICATION	6.435145181444652E-8	IMPLEMENTATION
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999997144383674	WITHOUT_CLASSIFICATION	2.855616325917702E-6	IMPLEMENTATION
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999730448202929	WITHOUT_CLASSIFICATION	2.6955179707113328E-5	IMPLEMENTATION
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999977933202658	WITHOUT_CLASSIFICATION	2.206679734087093E-6	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998756259053	WITHOUT_CLASSIFICATION	1.2437409471748635E-7	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998756259053	WITHOUT_CLASSIFICATION	1.2437409471748635E-7	IMPLEMENTATION
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999620651002797	WITHOUT_CLASSIFICATION	3.793489972020351E-5	IMPLEMENTATION
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999988758768127	WITHOUT_CLASSIFICATION	1.1241231873124492E-6	IMPLEMENTATION
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999697476621895	WITHOUT_CLASSIFICATION	3.0252337810573864E-5	IMPLEMENTATION
The property is a component...	WITHOUT_CLASSIFICATION	0.9999989592118588	WITHOUT_CLASSIFICATION	1.040788141260406E-6	IMPLEMENTATION
The property is another class..	WITHOUT_CLASSIFICATION	0.9999992897393455	WITHOUT_CLASSIFICATION	7.10260654423743E-7	IMPLEMENTATION
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999581288880308	WITHOUT_CLASSIFICATION	4.187111196915563E-5	IMPLEMENTATION
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999924016945619	WITHOUT_CLASSIFICATION	7.5983054380539765E-6	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999856033757	WITHOUT_CLASSIFICATION	1.4396624470815704E-8	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999546608531213	WITHOUT_CLASSIFICATION	4.5339146878685586E-5	IMPLEMENTATION
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999989431277	WITHOUT_CLASSIFICATION	1.0568722167299268E-9	IMPLEMENTATION
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999912031577	WITHOUT_CLASSIFICATION	8.79684219869692E-9	IMPLEMENTATION
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999999856033757	WITHOUT_CLASSIFICATION	1.4396624470815704E-8	IMPLEMENTATION
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999981675601042	WITHOUT_CLASSIFICATION	1.832439895752167E-6	IMPLEMENTATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999812184499552	WITHOUT_CLASSIFICATION	1.8781550044795706E-5	IMPLEMENTATION
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999837433514	WITHOUT_CLASSIFICATION	1.6256648522895082E-8	IMPLEMENTATION
again, null != null here	WITHOUT_CLASSIFICATION	0.9999997337559071	WITHOUT_CLASSIFICATION	2.662440928803436E-7	IMPLEMENTATION
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999954378977	WITHOUT_CLASSIFICATION	4.562102242579792E-9	IMPLEMENTATION
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999398115574	WITHOUT_CLASSIFICATION	6.018844254113781E-8	IMPLEMENTATION
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9995248527510432	WITHOUT_CLASSIFICATION	4.7514724895671243E-4	IMPLEMENTATION
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999980660310619	WITHOUT_CLASSIFICATION	1.933968938097047E-6	IMPLEMENTATION
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999739146377	WITHOUT_CLASSIFICATION	2.608536228252312E-8	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999575037968425	WITHOUT_CLASSIFICATION	4.2496203157514995E-5	IMPLEMENTATION
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9997336346898017	WITHOUT_CLASSIFICATION	2.6636531019829036E-4	IMPLEMENTATION
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999999948262715	WITHOUT_CLASSIFICATION	5.173728496756811E-8	IMPLEMENTATION
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999617766361	WITHOUT_CLASSIFICATION	3.822336402712148E-8	IMPLEMENTATION
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999952457462206	WITHOUT_CLASSIFICATION	4.754253779370579E-6	IMPLEMENTATION
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999070185798707	WITHOUT_CLASSIFICATION	9.298142012936075E-5	IMPLEMENTATION
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999975073698122	WITHOUT_CLASSIFICATION	2.492630187897035E-6	IMPLEMENTATION
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999995527059065	WITHOUT_CLASSIFICATION	4.4729409343794314E-7	IMPLEMENTATION
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9962288352678197	WITHOUT_CLASSIFICATION	0.0037711647321801937	IMPLEMENTATION
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9986849532663508	WITHOUT_CLASSIFICATION	0.0013150467336492339	IMPLEMENTATION
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997405102900092	WITHOUT_CLASSIFICATION	2.5948970999070925E-4	IMPLEMENTATION
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999921295722177	WITHOUT_CLASSIFICATION	7.870427782230475E-6	IMPLEMENTATION
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999997332248101	WITHOUT_CLASSIFICATION	2.6677518990016105E-7	IMPLEMENTATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999991693963574	WITHOUT_CLASSIFICATION	8.306036425894973E-6	IMPLEMENTATION
#2	WITHOUT_CLASSIFICATION	0.9999419839466377	WITHOUT_CLASSIFICATION	5.8016053362376E-5	IMPLEMENTATION
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999996576576413	WITHOUT_CLASSIFICATION	3.4234235873432945E-7	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999057995742147	WITHOUT_CLASSIFICATION	9.420042578526231E-5	IMPLEMENTATION
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999256606402	WITHOUT_CLASSIFICATION	7.43393597823604E-8	IMPLEMENTATION
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999099011528179	WITHOUT_CLASSIFICATION	9.009884718207103E-5	IMPLEMENTATION
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999981849700742	WITHOUT_CLASSIFICATION	1.8150299258943298E-6	IMPLEMENTATION
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999914286502474	WITHOUT_CLASSIFICATION	8.57134975264144E-6	IMPLEMENTATION
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999771096538	WITHOUT_CLASSIFICATION	2.2890346201345107E-7	IMPLEMENTATION
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999994867719659	WITHOUT_CLASSIFICATION	5.132280340832076E-7	IMPLEMENTATION
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999607620103923	WITHOUT_CLASSIFICATION	3.923798960773454E-5	IMPLEMENTATION
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999983436938	WITHOUT_CLASSIFICATION	1.6563061303798328E-9	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999937545958895	WITHOUT_CLASSIFICATION	6.2454041105030895E-6	IMPLEMENTATION
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999985735759267	WITHOUT_CLASSIFICATION	1.4264240732593422E-6	IMPLEMENTATION
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999998377763	WITHOUT_CLASSIFICATION	1.6222364318785163E-10	IMPLEMENTATION
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999997383229	WITHOUT_CLASSIFICATION	2.6167710537107825E-9	IMPLEMENTATION
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999996835040453	WITHOUT_CLASSIFICATION	3.16495954687962E-7	IMPLEMENTATION
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999938079711506	WITHOUT_CLASSIFICATION	6.192028849403579E-6	IMPLEMENTATION
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999817870742341	WITHOUT_CLASSIFICATION	1.8212925765862493E-5	IMPLEMENTATION
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999999957827452	WITHOUT_CLASSIFICATION	4.217254845783525E-9	IMPLEMENTATION
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998593525092893	WITHOUT_CLASSIFICATION	1.4064749071065238E-4	IMPLEMENTATION
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999972187182	WITHOUT_CLASSIFICATION	2.7812817812195473E-9	IMPLEMENTATION
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999506967772	WITHOUT_CLASSIFICATION	4.930322291700622E-8	IMPLEMENTATION
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999528598493	WITHOUT_CLASSIFICATION	4.714015069577355E-7	IMPLEMENTATION
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999988544595977	WITHOUT_CLASSIFICATION	1.1455404024025125E-6	IMPLEMENTATION
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999998030529808	WITHOUT_CLASSIFICATION	1.9694701919777593E-6	IMPLEMENTATION
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999998286537948	WITHOUT_CLASSIFICATION	1.7134620517620904E-7	IMPLEMENTATION
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999997354364097	WITHOUT_CLASSIFICATION	2.6456359021783917E-7	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639442873455	WITHOUT_CLASSIFICATION	1.3605571265443774E-4	IMPLEMENTATION
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999929582224173	WITHOUT_CLASSIFICATION	7.041777582689203E-6	IMPLEMENTATION
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999742440351	WITHOUT_CLASSIFICATION	2.5755964905789268E-8	IMPLEMENTATION
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999999707687	WITHOUT_CLASSIFICATION	2.9231298158127194E-10	IMPLEMENTATION
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999840416819	WITHOUT_CLASSIFICATION	1.595831812127329E-8	IMPLEMENTATION
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999633498908966	WITHOUT_CLASSIFICATION	3.665010910324561E-5	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999651975823468	WITHOUT_CLASSIFICATION	3.4802417653129545E-5	IMPLEMENTATION
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999654248634581	WITHOUT_CLASSIFICATION	3.4575136541916466E-5	IMPLEMENTATION
Collection of components.	WITHOUT_CLASSIFICATION	0.999997610805212	WITHOUT_CLASSIFICATION	2.3891947880369134E-6	IMPLEMENTATION
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999849716132	WITHOUT_CLASSIFICATION	1.502838674331023E-8	IMPLEMENTATION
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999902896831812	WITHOUT_CLASSIFICATION	9.710316818953335E-6	IMPLEMENTATION
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999888031496911	WITHOUT_CLASSIFICATION	1.119685030901945E-5	IMPLEMENTATION
currently allowed...	WITHOUT_CLASSIFICATION	0.9999795002240073	WITHOUT_CLASSIFICATION	2.049977599282307E-5	IMPLEMENTATION
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999414673	WITHOUT_CLASSIFICATION	5.85326406421423E-11	IMPLEMENTATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999998582420904	WITHOUT_CLASSIFICATION	1.417579096597531E-7	IMPLEMENTATION
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999986352113753	WITHOUT_CLASSIFICATION	1.3647886246788896E-6	IMPLEMENTATION
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639442873455	WITHOUT_CLASSIFICATION	1.3605571265443774E-4	IMPLEMENTATION
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999847768866347	WITHOUT_CLASSIFICATION	1.5223113365346912E-5	IMPLEMENTATION
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999978503098877	WITHOUT_CLASSIFICATION	2.1496901122977038E-5	IMPLEMENTATION
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999983042547	WITHOUT_CLASSIFICATION	1.6957453031761583E-9	IMPLEMENTATION
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.999999985909769	WITHOUT_CLASSIFICATION	1.4090231109403876E-8	IMPLEMENTATION
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999625780413196	WITHOUT_CLASSIFICATION	3.7421958680419093E-5	IMPLEMENTATION
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999998209900849	WITHOUT_CLASSIFICATION	1.790099150999279E-7	IMPLEMENTATION
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999546608531213	WITHOUT_CLASSIFICATION	4.5339146878685586E-5	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999822175307886	WITHOUT_CLASSIFICATION	1.7782469211427884E-5	IMPLEMENTATION
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999937545958895	WITHOUT_CLASSIFICATION	6.2454041105030895E-6	IMPLEMENTATION
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999696103948915	WITHOUT_CLASSIFICATION	3.038960510843251E-5	IMPLEMENTATION
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999994373337722	WITHOUT_CLASSIFICATION	5.62666227818022E-7	IMPLEMENTATION
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999949600399	WITHOUT_CLASSIFICATION	5.039960090726892E-9	IMPLEMENTATION
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999833020966	WITHOUT_CLASSIFICATION	1.6697903374942625E-8	IMPLEMENTATION
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999672515792158	WITHOUT_CLASSIFICATION	3.2748420784142304E-5	IMPLEMENTATION
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999994860206166	WITHOUT_CLASSIFICATION	5.139793834150233E-7	IMPLEMENTATION
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999998876114342	WITHOUT_CLASSIFICATION	1.123885657911089E-6	IMPLEMENTATION
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999997989815526	WITHOUT_CLASSIFICATION	2.0101844744922457E-7	IMPLEMENTATION
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999997844966999	WITHOUT_CLASSIFICATION	2.1550330010794611E-7	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999886770684	WITHOUT_CLASSIFICATION	1.1322931599959057E-8	IMPLEMENTATION
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999895638072429	WITHOUT_CLASSIFICATION	1.0436192757134864E-5	IMPLEMENTATION
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999499901796236	WITHOUT_CLASSIFICATION	5.0009820376276984E-5	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999993221968518	WITHOUT_CLASSIFICATION	6.778031482280902E-7	IMPLEMENTATION
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999993221968518	WITHOUT_CLASSIFICATION	6.778031482280902E-7	IMPLEMENTATION
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999997933231844	WITHOUT_CLASSIFICATION	2.066768154749617E-7	IMPLEMENTATION
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999957149720737	WITHOUT_CLASSIFICATION	4.2850279262609305E-6	IMPLEMENTATION
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998308008562	WITHOUT_CLASSIFICATION	1.6919914384068006E-7	IMPLEMENTATION
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999998102808	WITHOUT_CLASSIFICATION	1.8971920488211646E-9	IMPLEMENTATION
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999193304547	WITHOUT_CLASSIFICATION	8.066954523585762E-8	IMPLEMENTATION
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999991658363742	WITHOUT_CLASSIFICATION	8.341636258034685E-7	IMPLEMENTATION
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999991710248	WITHOUT_CLASSIFICATION	8.289751706266033E-10	IMPLEMENTATION
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999999258151039	WITHOUT_CLASSIFICATION	7.418489613117259E-8	IMPLEMENTATION
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999997930659692	WITHOUT_CLASSIFICATION	2.0693403082566323E-7	IMPLEMENTATION
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999985782485924	WITHOUT_CLASSIFICATION	1.421751407536684E-6	IMPLEMENTATION
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999095974126029	WITHOUT_CLASSIFICATION	9.040258739711622E-5	IMPLEMENTATION
A collection of components...	WITHOUT_CLASSIFICATION	0.999988974364784	WITHOUT_CLASSIFICATION	1.1025635215994622E-5	IMPLEMENTATION
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999754612410572	WITHOUT_CLASSIFICATION	2.453875894278997E-5	IMPLEMENTATION
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999676535369	WITHOUT_CLASSIFICATION	3.234646309456534E-7	IMPLEMENTATION
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999637694036697	WITHOUT_CLASSIFICATION	3.623059633017722E-5	IMPLEMENTATION
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999999958601683	WITHOUT_CLASSIFICATION	4.139831657873036E-9	IMPLEMENTATION
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999994397403987	WITHOUT_CLASSIFICATION	5.60259601378291E-7	IMPLEMENTATION
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999993656700715	WITHOUT_CLASSIFICATION	6.343299285303975E-7	IMPLEMENTATION
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999985635107	WITHOUT_CLASSIFICATION	1.4364893151944577E-8	IMPLEMENTATION
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998546717034	WITHOUT_CLASSIFICATION	1.453282965938189E-7	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999896404265	WITHOUT_CLASSIFICATION	1.0359573440619708E-8	IMPLEMENTATION
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.99999998134188	WITHOUT_CLASSIFICATION	1.865812001781439E-8	IMPLEMENTATION
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999961379753	WITHOUT_CLASSIFICATION	3.862024720444894E-9	IMPLEMENTATION
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999991602398082	WITHOUT_CLASSIFICATION	8.397601917987507E-7	IMPLEMENTATION
implied	WITHOUT_CLASSIFICATION	0.9997134750628465	WITHOUT_CLASSIFICATION	2.8652493715349144E-4	IMPLEMENTATION
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9997112590886295	WITHOUT_CLASSIFICATION	2.887409113705214E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999677303295687	WITHOUT_CLASSIFICATION	3.2269670431293455E-4	IMPLEMENTATION
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999996900354758	WITHOUT_CLASSIFICATION	3.0996452420271893E-6	IMPLEMENTATION
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999999993210523	WITHOUT_CLASSIFICATION	6.78947654500319E-10	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998773373525	WITHOUT_CLASSIFICATION	1.226626475040078E-7	IMPLEMENTATION
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999989126703813	WITHOUT_CLASSIFICATION	1.087329618741447E-6	IMPLEMENTATION
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.999995929983844	WITHOUT_CLASSIFICATION	4.070016155933786E-6	IMPLEMENTATION
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999999877516462	WITHOUT_CLASSIFICATION	1.224835380241635E-8	IMPLEMENTATION
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999996462352382	WITHOUT_CLASSIFICATION	3.537647617099969E-7	IMPLEMENTATION
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998076390674646	WITHOUT_CLASSIFICATION	1.9236093253533236E-4	IMPLEMENTATION
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999974414193037	WITHOUT_CLASSIFICATION	2.558580696324042E-6	IMPLEMENTATION
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999866722799	WITHOUT_CLASSIFICATION	1.3327720130624741E-8	IMPLEMENTATION
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999974859665585	WITHOUT_CLASSIFICATION	2.5140334415709274E-6	IMPLEMENTATION
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999803742322617	WITHOUT_CLASSIFICATION	1.96257677382837E-5	IMPLEMENTATION
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999977135732844	WITHOUT_CLASSIFICATION	2.2864267155524936E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999988224027544	WITHOUT_CLASSIFICATION	1.1775972456076304E-5	IMPLEMENTATION
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998748123654028	WITHOUT_CLASSIFICATION	0.0012518763459720141	IMPLEMENTATION
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999942748383935	WITHOUT_CLASSIFICATION	5.725161606554862E-6	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999998982864822	WITHOUT_CLASSIFICATION	1.0171351789036022E-7	IMPLEMENTATION
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999998356356989	WITHOUT_CLASSIFICATION	1.6436430106997912E-7	IMPLEMENTATION
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999997403568398	WITHOUT_CLASSIFICATION	2.596431602333447E-7	IMPLEMENTATION
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998692028270854	WITHOUT_CLASSIFICATION	0.0013079717291459795	IMPLEMENTATION
TODO:	WITHOUT_CLASSIFICATION	0.9738481116500259	WITHOUT_CLASSIFICATION	0.02615188834997409	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999045494233	WITHOUT_CLASSIFICATION	9.545057656712135E-8	IMPLEMENTATION
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999972334318084	WITHOUT_CLASSIFICATION	2.766568191667895E-6	IMPLEMENTATION
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999541374751941	WITHOUT_CLASSIFICATION	4.5862524805806345E-5	IMPLEMENTATION
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999784280379697	WITHOUT_CLASSIFICATION	2.1571962030380892E-5	IMPLEMENTATION
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999919438380706	WITHOUT_CLASSIFICATION	8.056161929469847E-6	IMPLEMENTATION
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999998713579876	WITHOUT_CLASSIFICATION	1.2864201229563923E-7	IMPLEMENTATION
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999902748379412	WITHOUT_CLASSIFICATION	9.725162058718305E-6	IMPLEMENTATION
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999905481842355	WITHOUT_CLASSIFICATION	9.451815764539539E-6	IMPLEMENTATION
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999970185226433	WITHOUT_CLASSIFICATION	2.9814773566280806E-6	IMPLEMENTATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999997382394503	WITHOUT_CLASSIFICATION	2.6176054959161627E-7	IMPLEMENTATION
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999993684083853	WITHOUT_CLASSIFICATION	6.315916147413499E-7	IMPLEMENTATION
Dialect function	WITHOUT_CLASSIFICATION	0.9999996135382796	WITHOUT_CLASSIFICATION	3.8646172040742134E-7	IMPLEMENTATION
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999970506354674	WITHOUT_CLASSIFICATION	2.949364532625993E-6	IMPLEMENTATION
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999995081384876	WITHOUT_CLASSIFICATION	4.918615123556557E-7	IMPLEMENTATION
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999982334312	WITHOUT_CLASSIFICATION	1.766568713076245E-9	IMPLEMENTATION
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999858662018069	WITHOUT_CLASSIFICATION	1.4133798193008256E-5	IMPLEMENTATION
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999146129697102	WITHOUT_CLASSIFICATION	8.53870302897792E-5	IMPLEMENTATION
the name of an entity class	WITHOUT_CLASSIFICATION	0.999999939650095	WITHOUT_CLASSIFICATION	6.034990491109801E-8	IMPLEMENTATION
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999999998187862	WITHOUT_CLASSIFICATION	1.8121382724863892E-10	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999979788538876	WITHOUT_CLASSIFICATION	2.0211461124449176E-6	IMPLEMENTATION
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999970418791966	WITHOUT_CLASSIFICATION	2.95812080349988E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999912596215648	WITHOUT_CLASSIFICATION	8.740378435233531E-6	IMPLEMENTATION
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999930911777539	WITHOUT_CLASSIFICATION	6.908822246115161E-6	IMPLEMENTATION
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999912596215648	WITHOUT_CLASSIFICATION	8.740378435233531E-6	IMPLEMENTATION
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999999253489	WITHOUT_CLASSIFICATION	7.46510700843541E-11	IMPLEMENTATION
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999995861624253	WITHOUT_CLASSIFICATION	4.13837574667245E-7	IMPLEMENTATION
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999645341779692	WITHOUT_CLASSIFICATION	3.546582203087754E-5	IMPLEMENTATION
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999640975988247	WITHOUT_CLASSIFICATION	3.590240117523229E-5	IMPLEMENTATION
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999998147715575	WITHOUT_CLASSIFICATION	1.852284424376192E-7	IMPLEMENTATION
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999932633027664	WITHOUT_CLASSIFICATION	6.736697233711307E-6	IMPLEMENTATION
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999947618126	WITHOUT_CLASSIFICATION	5.2381874349427235E-9	IMPLEMENTATION
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999680507242	WITHOUT_CLASSIFICATION	3.1949275769286806E-8	IMPLEMENTATION
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999995581076347	WITHOUT_CLASSIFICATION	4.4189236531042444E-7	IMPLEMENTATION
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998813986504	WITHOUT_CLASSIFICATION	1.1860134961252614E-7	IMPLEMENTATION
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999990174772428	WITHOUT_CLASSIFICATION	9.825227572102795E-7	IMPLEMENTATION
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999997901556783	WITHOUT_CLASSIFICATION	2.0984432163515936E-7	IMPLEMENTATION
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999066209654	WITHOUT_CLASSIFICATION	9.337903459552344E-8	IMPLEMENTATION
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9973741502304492	WITHOUT_CLASSIFICATION	0.002625849769550804	IMPLEMENTATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999568717701133	WITHOUT_CLASSIFICATION	4.3128229886636736E-5	IMPLEMENTATION
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997172795502	WITHOUT_CLASSIFICATION	2.827204498378659E-7	IMPLEMENTATION
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998470583339	WITHOUT_CLASSIFICATION	1.52941666066512E-7	IMPLEMENTATION
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999976027719	WITHOUT_CLASSIFICATION	2.3972281098341575E-8	IMPLEMENTATION
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999997910493	WITHOUT_CLASSIFICATION	2.0895066976311881E-10	IMPLEMENTATION
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.999999830408545	WITHOUT_CLASSIFICATION	1.6959145496506128E-7	IMPLEMENTATION
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999999917808631	WITHOUT_CLASSIFICATION	8.219136993110803E-9	IMPLEMENTATION
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999956205954305	WITHOUT_CLASSIFICATION	4.379404569500618E-6	IMPLEMENTATION
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9997694672753225	WITHOUT_CLASSIFICATION	2.30532724677449E-4	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999940346741379	WITHOUT_CLASSIFICATION	5.965325862008167E-6	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999993363820794	WITHOUT_CLASSIFICATION	6.636179205964434E-6	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999985328883	WITHOUT_CLASSIFICATION	1.4671116923814745E-9	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999922848291684	WITHOUT_CLASSIFICATION	7.715170831618469E-6	IMPLEMENTATION
default mode	WITHOUT_CLASSIFICATION	0.999997516370904	WITHOUT_CLASSIFICATION	2.483629096003431E-6	IMPLEMENTATION
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998081621599	WITHOUT_CLASSIFICATION	1.9183784002100086E-7	IMPLEMENTATION
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999949571419205	WITHOUT_CLASSIFICATION	5.04285807946242E-6	IMPLEMENTATION
after reset!	WITHOUT_CLASSIFICATION	0.9999986615570485	WITHOUT_CLASSIFICATION	1.3384429515169993E-6	IMPLEMENTATION
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999876220391382	WITHOUT_CLASSIFICATION	1.2377960861934011E-5	IMPLEMENTATION
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999986829818	WITHOUT_CLASSIFICATION	1.3170182361707416E-9	IMPLEMENTATION
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999963683308697	WITHOUT_CLASSIFICATION	3.631669130363026E-6	IMPLEMENTATION
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9997783097778139	WITHOUT_CLASSIFICATION	2.216902221860124E-4	IMPLEMENTATION
if its "id"	WITHOUT_CLASSIFICATION	0.9999979290842829	WITHOUT_CLASSIFICATION	2.070915717221229E-6	IMPLEMENTATION
or its the id property name	WITHOUT_CLASSIFICATION	0.9999983458905821	WITHOUT_CLASSIFICATION	1.654109417838339E-6	IMPLEMENTATION
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998399976453	WITHOUT_CLASSIFICATION	1.6000235476672853E-7	IMPLEMENTATION
important!!	WITHOUT_CLASSIFICATION	0.9999955858398464	WITHOUT_CLASSIFICATION	4.414160153611146E-6	IMPLEMENTATION
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999132031735	WITHOUT_CLASSIFICATION	8.679682652477075E-8	IMPLEMENTATION
an association	WITHOUT_CLASSIFICATION	0.9999999748914653	WITHOUT_CLASSIFICATION	2.5108534751549028E-8	IMPLEMENTATION
allow index() function:	WITHOUT_CLASSIFICATION	0.9999937259628467	WITHOUT_CLASSIFICATION	6.274037153279761E-6	IMPLEMENTATION
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999995603142082	WITHOUT_CLASSIFICATION	4.3968579176523335E-7	IMPLEMENTATION
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999985328883	WITHOUT_CLASSIFICATION	1.4671116923814745E-9	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999989112437335	WITHOUT_CLASSIFICATION	1.0887562664945494E-5	IMPLEMENTATION
collections of values	WITHOUT_CLASSIFICATION	0.9999998211616442	WITHOUT_CLASSIFICATION	1.7883835584927538E-7	IMPLEMENTATION
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997514071129561	WITHOUT_CLASSIFICATION	2.4859288704388556E-4	IMPLEMENTATION
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999683200143	WITHOUT_CLASSIFICATION	3.167998581236153E-8	IMPLEMENTATION
special case	WITHOUT_CLASSIFICATION	0.9999957808747633	WITHOUT_CLASSIFICATION	4.219125236800899E-6	IMPLEMENTATION
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999825200179	WITHOUT_CLASSIFICATION	1.747998217739343E-8	IMPLEMENTATION
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999998648859779	WITHOUT_CLASSIFICATION	1.3511402208119727E-7	IMPLEMENTATION
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999505185646083	WITHOUT_CLASSIFICATION	4.9481435391783874E-5	IMPLEMENTATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999932406165047	WITHOUT_CLASSIFICATION	6.759383495240922E-6	IMPLEMENTATION
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999938995984	WITHOUT_CLASSIFICATION	6.100401632098057E-9	IMPLEMENTATION
register collection role	WITHOUT_CLASSIFICATION	0.9997723314133002	WITHOUT_CLASSIFICATION	2.276685866996857E-4	IMPLEMENTATION
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999881381717	WITHOUT_CLASSIFICATION	1.186182831324305E-8	IMPLEMENTATION
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999889081005078	WITHOUT_CLASSIFICATION	1.1091899492172048E-5	IMPLEMENTATION
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999974765923297	WITHOUT_CLASSIFICATION	2.523407670237691E-6	IMPLEMENTATION
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999949217966	WITHOUT_CLASSIFICATION	5.078203454167496E-9	IMPLEMENTATION
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999999989425827	WITHOUT_CLASSIFICATION	1.0574173040116223E-8	IMPLEMENTATION
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999740059738	WITHOUT_CLASSIFICATION	2.5994026101453854E-8	IMPLEMENTATION
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999243144898	WITHOUT_CLASSIFICATION	7.568551016077912E-8	IMPLEMENTATION
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999529498959232	WITHOUT_CLASSIFICATION	4.70501040768276E-5	IMPLEMENTATION
many-to-many	WITHOUT_CLASSIFICATION	0.999989112437335	WITHOUT_CLASSIFICATION	1.0887562664945494E-5	IMPLEMENTATION
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999982156640208	WITHOUT_CLASSIFICATION	1.7843359792838403E-6	IMPLEMENTATION
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999987684306094	WITHOUT_CLASSIFICATION	1.2315693905609706E-6	IMPLEMENTATION
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999996373738539	WITHOUT_CLASSIFICATION	3.626261461471656E-7	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999818537382	WITHOUT_CLASSIFICATION	1.814626174248688E-8	IMPLEMENTATION
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999971028583	WITHOUT_CLASSIFICATION	2.8971416987060376E-9	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8580357016861687	WITHOUT_CLASSIFICATION	0.14196429831383128	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8580357016861687	WITHOUT_CLASSIFICATION	0.14196429831383128	IMPLEMENTATION
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999929037091432	WITHOUT_CLASSIFICATION	7.096290856763328E-6	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8580357016861687	WITHOUT_CLASSIFICATION	0.14196429831383128	IMPLEMENTATION
not known!	WITHOUT_CLASSIFICATION	0.8580357016861687	WITHOUT_CLASSIFICATION	0.14196429831383128	IMPLEMENTATION
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999818058623863	WITHOUT_CLASSIFICATION	1.819413761376012E-5	IMPLEMENTATION
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999929751431795	WITHOUT_CLASSIFICATION	7.024856820523634E-6	IMPLEMENTATION
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999999851765332	WITHOUT_CLASSIFICATION	1.4823466803456105E-7	IMPLEMENTATION
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999968541280043	WITHOUT_CLASSIFICATION	3.1458719957004767E-6	IMPLEMENTATION
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999974763474953	WITHOUT_CLASSIFICATION	2.523652504746917E-6	IMPLEMENTATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9997342513771666	WITHOUT_CLASSIFICATION	2.6574862283325915E-4	IMPLEMENTATION
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994958402201726	WITHOUT_CLASSIFICATION	5.041597798274115E-4	IMPLEMENTATION
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999902896799192	WITHOUT_CLASSIFICATION	9.710320080857168E-6	IMPLEMENTATION
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999969366642866	WITHOUT_CLASSIFICATION	3.0633357133133986E-6	IMPLEMENTATION
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999851845868637	WITHOUT_CLASSIFICATION	1.4815413136402297E-5	IMPLEMENTATION
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999937342969009	WITHOUT_CLASSIFICATION	6.265703099204904E-6	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999978199135605	WITHOUT_CLASSIFICATION	2.1800864394487425E-6	IMPLEMENTATION
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999995202298783	WITHOUT_CLASSIFICATION	4.797701216763951E-7	IMPLEMENTATION
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999982444686689	WITHOUT_CLASSIFICATION	1.7555313310697803E-6	IMPLEMENTATION
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999999824150643	WITHOUT_CLASSIFICATION	1.7584935750931306E-8	IMPLEMENTATION
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.999992174123196	WITHOUT_CLASSIFICATION	7.825876804050113E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991444165761	WITHOUT_CLASSIFICATION	8.555834240115291E-7	IMPLEMENTATION
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999995349901809	WITHOUT_CLASSIFICATION	4.65009819125046E-7	IMPLEMENTATION
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999873056933591	WITHOUT_CLASSIFICATION	1.2694306640877469E-5	IMPLEMENTATION
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999957201289398	WITHOUT_CLASSIFICATION	4.279871060144393E-6	IMPLEMENTATION
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999233998200887	WITHOUT_CLASSIFICATION	7.660017991127914E-5	IMPLEMENTATION
Add any joins	WITHOUT_CLASSIFICATION	0.9999988740047627	WITHOUT_CLASSIFICATION	1.125995237333297E-6	IMPLEMENTATION
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999991444165761	WITHOUT_CLASSIFICATION	8.555834240115291E-7	IMPLEMENTATION
named query parameter	WITHOUT_CLASSIFICATION	0.9999922848291684	WITHOUT_CLASSIFICATION	7.715170831618469E-6	IMPLEMENTATION
path expression	WITHOUT_CLASSIFICATION	0.9999955734525627	WITHOUT_CLASSIFICATION	4.426547437294687E-6	IMPLEMENTATION
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999945576574203	WITHOUT_CLASSIFICATION	5.442342579721417E-6	IMPLEMENTATION
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980363537184	WITHOUT_CLASSIFICATION	1.963646281570911E-6	IMPLEMENTATION
anything else	WITHOUT_CLASSIFICATION	0.9999925067369602	WITHOUT_CLASSIFICATION	7.4932630399247535E-6	IMPLEMENTATION
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999955081494899	WITHOUT_CLASSIFICATION	4.491850510039214E-6	IMPLEMENTATION
careful with this!	WITHOUT_CLASSIFICATION	0.9999993547801572	WITHOUT_CLASSIFICATION	6.452198426809813E-7	IMPLEMENTATION
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9889644323889959	WITHOUT_CLASSIFICATION	0.011035567611004042	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999200315779188	WITHOUT_CLASSIFICATION	7.99684220812845E-5	IMPLEMENTATION
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999573068011	WITHOUT_CLASSIFICATION	4.2693198891380073E-7	IMPLEMENTATION
cannot instantiate	WITHOUT_CLASSIFICATION	0.9998820134415066	WITHOUT_CLASSIFICATION	1.1798655849338804E-4	IMPLEMENTATION
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999657346167	WITHOUT_CLASSIFICATION	3.4265383205945436E-8	IMPLEMENTATION
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999992143456917	WITHOUT_CLASSIFICATION	7.856543083426711E-7	IMPLEMENTATION
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999998585910388	WITHOUT_CLASSIFICATION	1.4140896119764556E-6	IMPLEMENTATION
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999947141842359	WITHOUT_CLASSIFICATION	5.285815764173667E-6	IMPLEMENTATION
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999929527899	WITHOUT_CLASSIFICATION	7.047210154286523E-9	IMPLEMENTATION
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999996541374813	WITHOUT_CLASSIFICATION	3.458625187344066E-7	IMPLEMENTATION
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998016421868373	WITHOUT_CLASSIFICATION	1.9835781316266218E-4	IMPLEMENTATION
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999979021934	WITHOUT_CLASSIFICATION	2.0978065732600044E-9	IMPLEMENTATION
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999997597505361	WITHOUT_CLASSIFICATION	2.40249463893958E-6	IMPLEMENTATION
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999960620521497	WITHOUT_CLASSIFICATION	3.937947850224587E-6	IMPLEMENTATION
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999915966983555	WITHOUT_CLASSIFICATION	8.403301644533091E-6	IMPLEMENTATION
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.999999977630754	WITHOUT_CLASSIFICATION	2.2369245915030048E-8	IMPLEMENTATION
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999200315779188	WITHOUT_CLASSIFICATION	7.99684220812845E-5	IMPLEMENTATION
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999472489457	WITHOUT_CLASSIFICATION	5.275105434196764E-8	IMPLEMENTATION
do replacements	WITHOUT_CLASSIFICATION	0.9999967984810619	WITHOUT_CLASSIFICATION	3.201518938113171E-6	IMPLEMENTATION
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998397024951229	WITHOUT_CLASSIFICATION	1.6029750487706054E-4	IMPLEMENTATION
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999986330866659	WITHOUT_CLASSIFICATION	1.3669133340115235E-6	IMPLEMENTATION
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996125532302	WITHOUT_CLASSIFICATION	3.874467697999196E-6	IMPLEMENTATION
hilo params	WITHOUT_CLASSIFICATION	0.9999982757799833	WITHOUT_CLASSIFICATION	1.724220016568114E-6	IMPLEMENTATION
sql = query;	WITHOUT_CLASSIFICATION	0.9999987851585109	WITHOUT_CLASSIFICATION	1.2148414890230599E-6	IMPLEMENTATION
performance opt	WITHOUT_CLASSIFICATION	0.9999995379035281	WITHOUT_CLASSIFICATION	4.620964719055541E-7	IMPLEMENTATION
sql = update;	WITHOUT_CLASSIFICATION	0.999999439082971	WITHOUT_CLASSIFICATION	5.609170290566219E-7	IMPLEMENTATION
hilo config	WITHOUT_CLASSIFICATION	0.9999908459762333	WITHOUT_CLASSIFICATION	9.154023766719525E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999976680849431	WITHOUT_CLASSIFICATION	2.3319150569913424E-6	IMPLEMENTATION
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999030317939	WITHOUT_CLASSIFICATION	9.696820617195371E-8	IMPLEMENTATION
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998359475103932	WITHOUT_CLASSIFICATION	1.6405248960674312E-4	IMPLEMENTATION
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999608293142	WITHOUT_CLASSIFICATION	3.91706858029894E-8	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996795631863	WITHOUT_CLASSIFICATION	3.2043681377553983E-7	IMPLEMENTATION
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999894969219	WITHOUT_CLASSIFICATION	1.0503078064846506E-8	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999987406821793	WITHOUT_CLASSIFICATION	1.2593178206362778E-6	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999976680849431	WITHOUT_CLASSIFICATION	2.3319150569913424E-6	IMPLEMENTATION
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999969160079	WITHOUT_CLASSIFICATION	3.0839920185951612E-9	IMPLEMENTATION
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9999889450873467	WITHOUT_CLASSIFICATION	1.1054912653281177E-5	IMPLEMENTATION
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.99999556847073	WITHOUT_CLASSIFICATION	4.431529269965548E-6	IMPLEMENTATION
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9979219316156225	WITHOUT_CLASSIFICATION	0.002078068384377591	IMPLEMENTATION
the default...	WITHOUT_CLASSIFICATION	0.9999982536634197	WITHOUT_CLASSIFICATION	1.746336580410027E-6	IMPLEMENTATION
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999947428492297	WITHOUT_CLASSIFICATION	5.257150770337759E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996795631863	WITHOUT_CLASSIFICATION	3.2043681377553983E-7	IMPLEMENTATION
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999821807817862	WITHOUT_CLASSIFICATION	1.7819218213848463E-5	IMPLEMENTATION
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990988966229	WITHOUT_CLASSIFICATION	9.011033770966105E-6	IMPLEMENTATION
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991023504929	WITHOUT_CLASSIFICATION	8.97649507047643E-7	IMPLEMENTATION
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993696979874034	WITHOUT_CLASSIFICATION	6.303020125966644E-4	IMPLEMENTATION
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.8904654702511662	WITHOUT_CLASSIFICATION	0.10953452974883389	IMPLEMENTATION
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9726331763804895	WITHOUT_CLASSIFICATION	0.027366823619510462	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999986710196755	WITHOUT_CLASSIFICATION	1.3289803244931308E-6	IMPLEMENTATION
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999986710196755	WITHOUT_CLASSIFICATION	1.3289803244931308E-6	IMPLEMENTATION
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999999791907632	WITHOUT_CLASSIFICATION	2.080923681812431E-8	IMPLEMENTATION
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999976031669308	WITHOUT_CLASSIFICATION	2.3968330692287595E-6	IMPLEMENTATION
scroll ahead	WITHOUT_CLASSIFICATION	0.9999992837832489	WITHOUT_CLASSIFICATION	7.162167512283653E-7	IMPLEMENTATION
scroll backward	WITHOUT_CLASSIFICATION	0.9999992065907554	WITHOUT_CLASSIFICATION	7.934092446096562E-7	IMPLEMENTATION
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999914584486586	WITHOUT_CLASSIFICATION	8.541551341443195E-6	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953547038107	WITHOUT_CLASSIFICATION	4.645296189271895E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999950726463646	WITHOUT_CLASSIFICATION	4.927353635400564E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996042724507803	WITHOUT_CLASSIFICATION	3.9572754921967117E-4	IMPLEMENTATION
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.999995972593904	WITHOUT_CLASSIFICATION	4.027406095922052E-6	IMPLEMENTATION
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999309549021	WITHOUT_CLASSIFICATION	6.904509790349784E-7	IMPLEMENTATION
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953547038107	WITHOUT_CLASSIFICATION	4.645296189271895E-6	IMPLEMENTATION
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999950726463646	WITHOUT_CLASSIFICATION	4.927353635400564E-5	IMPLEMENTATION
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996042724507803	WITHOUT_CLASSIFICATION	3.9572754921967117E-4	IMPLEMENTATION
Caches	WITHOUT_CLASSIFICATION	0.9999988089133504	WITHOUT_CLASSIFICATION	1.1910866496238005E-6	IMPLEMENTATION
Generators:	WITHOUT_CLASSIFICATION	0.999994387330219	WITHOUT_CLASSIFICATION	5.612669781081857E-6	IMPLEMENTATION
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999985279925	WITHOUT_CLASSIFICATION	1.4720075149150483E-9	IMPLEMENTATION
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999969200706391	WITHOUT_CLASSIFICATION	3.079929360905089E-6	IMPLEMENTATION
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999994885947082	WITHOUT_CLASSIFICATION	5.114052917202431E-7	IMPLEMENTATION
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999921126368786	WITHOUT_CLASSIFICATION	7.887363121437058E-6	IMPLEMENTATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999981012559791	WITHOUT_CLASSIFICATION	1.8987440208122291E-6	IMPLEMENTATION
checking for named queries	WITHOUT_CLASSIFICATION	0.999996945452601	WITHOUT_CLASSIFICATION	3.054547398990675E-6	IMPLEMENTATION
stats	WITHOUT_CLASSIFICATION	0.9999930612183283	WITHOUT_CLASSIFICATION	6.9387816717972076E-6	IMPLEMENTATION
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999992405464886	WITHOUT_CLASSIFICATION	7.594535113773615E-7	IMPLEMENTATION
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999989173414201	WITHOUT_CLASSIFICATION	1.082658579873477E-6	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999931077212068	WITHOUT_CLASSIFICATION	6.892278793204267E-6	IMPLEMENTATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999996625847991	WITHOUT_CLASSIFICATION	3.374152008602101E-7	IMPLEMENTATION
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998949858097	WITHOUT_CLASSIFICATION	1.0501419029249282E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999997527763788	WITHOUT_CLASSIFICATION	2.472236211991345E-6	IMPLEMENTATION
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999999890281599	WITHOUT_CLASSIFICATION	1.0971840217114712E-8	IMPLEMENTATION
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999969448482885	WITHOUT_CLASSIFICATION	3.0551517115105972E-6	IMPLEMENTATION
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999814355127077	WITHOUT_CLASSIFICATION	1.856448729234432E-5	IMPLEMENTATION
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999983930073005	WITHOUT_CLASSIFICATION	1.6069926995824526E-6	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999988849008138	WITHOUT_CLASSIFICATION	1.1150991861987325E-6	IMPLEMENTATION
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999970735537	WITHOUT_CLASSIFICATION	2.926446279374176E-9	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999903027981887	WITHOUT_CLASSIFICATION	9.697201811302995E-5	IMPLEMENTATION
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998907627302	WITHOUT_CLASSIFICATION	1.0923726980202012E-7	IMPLEMENTATION
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999674024175293	WITHOUT_CLASSIFICATION	3.259758247069082E-5	IMPLEMENTATION
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999999968036324	WITHOUT_CLASSIFICATION	3.1963675857849176E-9	IMPLEMENTATION
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9997565387860815	WITHOUT_CLASSIFICATION	2.434612139185111E-4	IMPLEMENTATION
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949098496179	WITHOUT_CLASSIFICATION	5.090150382084501E-6	IMPLEMENTATION
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999937517387892	WITHOUT_CLASSIFICATION	6.248261210795154E-5	IMPLEMENTATION
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999925621712	WITHOUT_CLASSIFICATION	7.437828865721122E-9	IMPLEMENTATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885091325069	WITHOUT_CLASSIFICATION	1.1490867493128421E-5	IMPLEMENTATION
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999338888041065	WITHOUT_CLASSIFICATION	6.611119589346576E-5	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982099307909	WITHOUT_CLASSIFICATION	1.7900692092056317E-6	IMPLEMENTATION
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999982099307909	WITHOUT_CLASSIFICATION	1.7900692092056317E-6	IMPLEMENTATION
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999999568281	WITHOUT_CLASSIFICATION	4.317185196750468E-11	IMPLEMENTATION
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999988527164499	WITHOUT_CLASSIFICATION	1.1472835500918304E-5	IMPLEMENTATION
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9991320752474825	WITHOUT_CLASSIFICATION	8.679247525174668E-4	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999027690340091	WITHOUT_CLASSIFICATION	9.723096599092498E-5	IMPLEMENTATION
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999428106559495	WITHOUT_CLASSIFICATION	5.718934405061808E-5	IMPLEMENTATION
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999867368495	WITHOUT_CLASSIFICATION	1.326315048020561E-8	IMPLEMENTATION
for EJB3	WITHOUT_CLASSIFICATION	0.9999811245886376	WITHOUT_CLASSIFICATION	1.887541136235967E-5	IMPLEMENTATION
just ignore	WITHOUT_CLASSIFICATION	0.9999959698935165	WITHOUT_CLASSIFICATION	4.0301064835819265E-6	IMPLEMENTATION
do a check	WITHOUT_CLASSIFICATION	0.9999899851788371	WITHOUT_CLASSIFICATION	1.001482116300724E-5	IMPLEMENTATION
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993382907663	WITHOUT_CLASSIFICATION	6.617092337248115E-7	IMPLEMENTATION
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986444470796	WITHOUT_CLASSIFICATION	1.3555529203504265E-6	IMPLEMENTATION
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994690316335	WITHOUT_CLASSIFICATION	5.309683665288108E-7	IMPLEMENTATION
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977442158213	WITHOUT_CLASSIFICATION	2.2557841786208155E-6	IMPLEMENTATION
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999806034423	WITHOUT_CLASSIFICATION	1.939655769291829E-7	IMPLEMENTATION
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991617335857	WITHOUT_CLASSIFICATION	8.382664142091122E-7	IMPLEMENTATION
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996441554684	WITHOUT_CLASSIFICATION	3.558445316833011E-7	IMPLEMENTATION
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998523607946	WITHOUT_CLASSIFICATION	1.4763920538306103E-6	IMPLEMENTATION
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998244381921	WITHOUT_CLASSIFICATION	1.7556180790618828E-6	IMPLEMENTATION
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939056576801	WITHOUT_CLASSIFICATION	6.094342319853004E-6	IMPLEMENTATION
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988126967305	WITHOUT_CLASSIFICATION	1.1873032695199897E-6	IMPLEMENTATION
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999774747171217	WITHOUT_CLASSIFICATION	2.252528287826846E-5	IMPLEMENTATION
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999972279023208	WITHOUT_CLASSIFICATION	2.772097679156651E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997318650193	WITHOUT_CLASSIFICATION	2.681349806356897E-7	IMPLEMENTATION
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999998011781316	WITHOUT_CLASSIFICATION	1.9882186845123698E-7	IMPLEMENTATION
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999986847242776	WITHOUT_CLASSIFICATION	1.3152757224463465E-6	IMPLEMENTATION
not for internal use:	WITHOUT_CLASSIFICATION	0.9990757127174281	WITHOUT_CLASSIFICATION	9.242872825717807E-4	IMPLEMENTATION
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999976780425688	WITHOUT_CLASSIFICATION	2.3219574312016906E-6	IMPLEMENTATION
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.99905639468717	WITHOUT_CLASSIFICATION	9.436053128299155E-4	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997318650193	WITHOUT_CLASSIFICATION	2.681349806356897E-7	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997318650193	WITHOUT_CLASSIFICATION	2.681349806356897E-7	IMPLEMENTATION
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999211461766101	WITHOUT_CLASSIFICATION	7.885382338985985E-5	IMPLEMENTATION
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999886530027376	WITHOUT_CLASSIFICATION	1.1346997262305307E-5	IMPLEMENTATION
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997984356304	WITHOUT_CLASSIFICATION	2.0156436966249918E-7	IMPLEMENTATION
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999915954020893	WITHOUT_CLASSIFICATION	8.404597910764815E-6	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999804451168931	WITHOUT_CLASSIFICATION	1.955488310696282E-5	IMPLEMENTATION
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999988849008138	WITHOUT_CLASSIFICATION	1.1150991861987325E-6	IMPLEMENTATION
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999993660863475	WITHOUT_CLASSIFICATION	6.339136525387043E-7	IMPLEMENTATION
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999911203121568	WITHOUT_CLASSIFICATION	8.879687843245902E-6	IMPLEMENTATION
parameter bind values...	WITHOUT_CLASSIFICATION	0.999999925931252	WITHOUT_CLASSIFICATION	7.406874805257494E-8	IMPLEMENTATION
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999431947533238	WITHOUT_CLASSIFICATION	5.680524667611262E-5	IMPLEMENTATION
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999348519419199	WITHOUT_CLASSIFICATION	6.514805808009984E-4	IMPLEMENTATION
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736581970309	WITHOUT_CLASSIFICATION	2.6341802969228845E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999752042244765	WITHOUT_CLASSIFICATION	2.4795775523455396E-5	IMPLEMENTATION
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999752042244765	WITHOUT_CLASSIFICATION	2.4795775523455396E-5	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999978150126543	WITHOUT_CLASSIFICATION	2.1849873457666914E-6	IMPLEMENTATION
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999978150126543	WITHOUT_CLASSIFICATION	2.1849873457666914E-6	IMPLEMENTATION
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987625861671297	WITHOUT_CLASSIFICATION	0.0012374138328703564	IMPLEMENTATION
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996522409265	WITHOUT_CLASSIFICATION	3.477590736274076E-7	IMPLEMENTATION
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999938202544	WITHOUT_CLASSIFICATION	6.1797455374859374E-9	IMPLEMENTATION
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994300904417258	WITHOUT_CLASSIFICATION	5.699095582742222E-4	IMPLEMENTATION
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9994320377364431	WITHOUT_CLASSIFICATION	5.679622635569702E-4	IMPLEMENTATION
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999815136230691	WITHOUT_CLASSIFICATION	1.8486376930869992E-5	IMPLEMENTATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999595554769872	WITHOUT_CLASSIFICATION	4.044452301268065E-5	IMPLEMENTATION
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985898671953	WITHOUT_CLASSIFICATION	1.4101328047680957E-6	IMPLEMENTATION
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999996215534658	WITHOUT_CLASSIFICATION	3.784465341644031E-7	IMPLEMENTATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9999999801173001	WITHOUT_CLASSIFICATION	1.9882699910645016E-8	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999983358377	WITHOUT_CLASSIFICATION	1.664162256360038E-9	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999875512906783	WITHOUT_CLASSIFICATION	1.2448709321679664E-5	IMPLEMENTATION
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998519518852355	WITHOUT_CLASSIFICATION	1.4804811476450808E-4	IMPLEMENTATION
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997491160115	WITHOUT_CLASSIFICATION	2.508839884375479E-7	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999823014443484	WITHOUT_CLASSIFICATION	1.769855565158893E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999823014443484	WITHOUT_CLASSIFICATION	1.769855565158893E-5	IMPLEMENTATION
no big deal	WITHOUT_CLASSIFICATION	0.9999823014443484	WITHOUT_CLASSIFICATION	1.769855565158893E-5	IMPLEMENTATION
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999588974356645	WITHOUT_CLASSIFICATION	4.110256433554215E-5	IMPLEMENTATION
see explanation above...	WITHOUT_CLASSIFICATION	0.9999990058220137	WITHOUT_CLASSIFICATION	9.94177986299073E-7	IMPLEMENTATION
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999998490436	WITHOUT_CLASSIFICATION	1.5095636608144795E-10	IMPLEMENTATION
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999694706621813	WITHOUT_CLASSIFICATION	3.052933781861184E-5	IMPLEMENTATION
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998683258913453	WITHOUT_CLASSIFICATION	1.3167410865468586E-4	IMPLEMENTATION
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998397907283901	WITHOUT_CLASSIFICATION	1.602092716098561E-4	IMPLEMENTATION
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999967553260156	WITHOUT_CLASSIFICATION	3.244673984336677E-6	IMPLEMENTATION
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.7620383961750011	WITHOUT_CLASSIFICATION	0.2379616038249989	IMPLEMENTATION
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999832144801455	WITHOUT_CLASSIFICATION	1.6785519854501758E-5	IMPLEMENTATION
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9997453170479293	WITHOUT_CLASSIFICATION	2.546829520707159E-4	IMPLEMENTATION
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998630801769	WITHOUT_CLASSIFICATION	1.3691982305192156E-7	IMPLEMENTATION
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999291287459282	WITHOUT_CLASSIFICATION	7.087125407185014E-5	IMPLEMENTATION
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904231842738	WITHOUT_CLASSIFICATION	9.576815726264029E-6	IMPLEMENTATION
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999206084529	WITHOUT_CLASSIFICATION	7.939154713080916E-8	IMPLEMENTATION
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997560838268064	WITHOUT_CLASSIFICATION	2.4391617319359773E-4	IMPLEMENTATION
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999998025483421	WITHOUT_CLASSIFICATION	1.9745165798050156E-7	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992742445077	WITHOUT_CLASSIFICATION	7.257554921500887E-7	IMPLEMENTATION
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999499675540466	WITHOUT_CLASSIFICATION	5.0032445953380545E-5	IMPLEMENTATION
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999668718487865	WITHOUT_CLASSIFICATION	3.312815121345009E-5	IMPLEMENTATION
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999952647044286	WITHOUT_CLASSIFICATION	4.735295571419722E-6	IMPLEMENTATION
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999994372563	WITHOUT_CLASSIFICATION	5.627437470106559E-10	IMPLEMENTATION
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999993014805172	WITHOUT_CLASSIFICATION	6.985194828241066E-7	IMPLEMENTATION
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999992603225492	WITHOUT_CLASSIFICATION	7.396774508022069E-6	IMPLEMENTATION
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999769549781	WITHOUT_CLASSIFICATION	2.304502188306469E-8	IMPLEMENTATION
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.99997216922561	WITHOUT_CLASSIFICATION	2.7830774390060048E-5	IMPLEMENTATION
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999958590151655	WITHOUT_CLASSIFICATION	4.140984834404643E-6	IMPLEMENTATION
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999994898522562	WITHOUT_CLASSIFICATION	5.101477438409709E-7	IMPLEMENTATION
final String queryString,	WITHOUT_CLASSIFICATION	0.9999891627753623	WITHOUT_CLASSIFICATION	1.0837224637626375E-5	IMPLEMENTATION
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999826226	WITHOUT_CLASSIFICATION	1.7377396250978316E-11	IMPLEMENTATION
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999979359129961	WITHOUT_CLASSIFICATION	2.0640870039272E-6	IMPLEMENTATION
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999009652369	WITHOUT_CLASSIFICATION	9.903476308594613E-8	IMPLEMENTATION
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999988113146446	WITHOUT_CLASSIFICATION	1.1886853553740003E-6	IMPLEMENTATION
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999997319666614	WITHOUT_CLASSIFICATION	2.680333386862324E-7	IMPLEMENTATION
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9985449955581334	WITHOUT_CLASSIFICATION	0.0014550044418666025	IMPLEMENTATION
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999400845555	WITHOUT_CLASSIFICATION	5.991544450488E-8	IMPLEMENTATION
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999994671875239	WITHOUT_CLASSIFICATION	5.328124761506261E-7	IMPLEMENTATION
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999874296375025	WITHOUT_CLASSIFICATION	1.2570362497414039E-5	IMPLEMENTATION
handle empty collection	WITHOUT_CLASSIFICATION	0.9999526128939109	WITHOUT_CLASSIFICATION	4.738710608913206E-5	IMPLEMENTATION
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999848777793855	WITHOUT_CLASSIFICATION	1.512222061451897E-5	IMPLEMENTATION
handle empty collections	WITHOUT_CLASSIFICATION	0.9999765585541909	WITHOUT_CLASSIFICATION	2.344144580912112E-5	IMPLEMENTATION
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999990231608956	WITHOUT_CLASSIFICATION	9.768391043588297E-7	IMPLEMENTATION
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999999584237611	WITHOUT_CLASSIFICATION	4.157623890136382E-7	IMPLEMENTATION
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9913760537635674	WITHOUT_CLASSIFICATION	0.008623946236432601	IMPLEMENTATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999956842068329	WITHOUT_CLASSIFICATION	4.315793167089735E-5	IMPLEMENTATION
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999944142539	WITHOUT_CLASSIFICATION	5.585746020606185E-9	IMPLEMENTATION
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999996401974602	WITHOUT_CLASSIFICATION	3.598025397609797E-7	IMPLEMENTATION
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999524830007	WITHOUT_CLASSIFICATION	4.7516999440536626E-8	IMPLEMENTATION
do nothing	WITHOUT_CLASSIFICATION	0.9999997547057546	WITHOUT_CLASSIFICATION	2.4529424537273403E-7	IMPLEMENTATION
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999754983217674	WITHOUT_CLASSIFICATION	2.4501678232694082E-5	IMPLEMENTATION
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999971259482481	WITHOUT_CLASSIFICATION	2.8740517520189126E-6	IMPLEMENTATION
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999972696634539	WITHOUT_CLASSIFICATION	2.730336546007208E-6	IMPLEMENTATION
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998584175384457	WITHOUT_CLASSIFICATION	1.4158246155429816E-4	IMPLEMENTATION
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997433364290579	WITHOUT_CLASSIFICATION	2.566635709421621E-4	IMPLEMENTATION
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998948736930932	WITHOUT_CLASSIFICATION	1.0512630690690933E-4	IMPLEMENTATION
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9996438866423774	WITHOUT_CLASSIFICATION	3.5611335762258554E-4	IMPLEMENTATION
look for a proxy	WITHOUT_CLASSIFICATION	0.9999921536249553	WITHOUT_CLASSIFICATION	7.846375044723675E-6	IMPLEMENTATION
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9962710900560472	WITHOUT_CLASSIFICATION	0.003728909943952803	IMPLEMENTATION
its the given optional object	WITHOUT_CLASSIFICATION	0.9999987383639651	WITHOUT_CLASSIFICATION	1.2616360348470916E-6	IMPLEMENTATION
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999998804975667	WITHOUT_CLASSIFICATION	1.1950243330389323E-7	IMPLEMENTATION
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999583826201103	WITHOUT_CLASSIFICATION	4.1617379889727204E-5	IMPLEMENTATION
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999998535132529	WITHOUT_CLASSIFICATION	1.464867471529687E-7	IMPLEMENTATION
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999469700768	WITHOUT_CLASSIFICATION	5.302992322738994E-8	IMPLEMENTATION
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999947757978	WITHOUT_CLASSIFICATION	5.224202219735259E-9	IMPLEMENTATION
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999930168893	WITHOUT_CLASSIFICATION	6.983110700362468E-8	IMPLEMENTATION
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999486445845	WITHOUT_CLASSIFICATION	5.1355415484969186E-8	IMPLEMENTATION
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999999476126032	WITHOUT_CLASSIFICATION	5.2387396701723504E-8	IMPLEMENTATION
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999851819964	WITHOUT_CLASSIFICATION	1.4818003685069923E-8	IMPLEMENTATION
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999993269659468	WITHOUT_CLASSIFICATION	6.730340532351438E-7	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999660436441002	WITHOUT_CLASSIFICATION	3.3956355899696566E-5	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999660436441002	WITHOUT_CLASSIFICATION	3.3956355899696566E-5	IMPLEMENTATION
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998194048052	WITHOUT_CLASSIFICATION	1.8059519474145775E-7	IMPLEMENTATION
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999994388643237	WITHOUT_CLASSIFICATION	5.611356762590444E-7	IMPLEMENTATION
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999670795303	WITHOUT_CLASSIFICATION	3.292046967352371E-8	IMPLEMENTATION
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999998754442372	WITHOUT_CLASSIFICATION	1.245557627565321E-7	IMPLEMENTATION
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999972153725252	WITHOUT_CLASSIFICATION	2.784627474910927E-6	IMPLEMENTATION
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999768348749266	WITHOUT_CLASSIFICATION	2.3165125073280633E-5	IMPLEMENTATION
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999995824136686	WITHOUT_CLASSIFICATION	4.1758633150060145E-7	IMPLEMENTATION
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999998442134955	WITHOUT_CLASSIFICATION	1.5578650450179719E-7	IMPLEMENTATION
before adding to collection!	WITHOUT_CLASSIFICATION	0.99999379214336	WITHOUT_CLASSIFICATION	6.207856639941031E-6	IMPLEMENTATION
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999991501476203	WITHOUT_CLASSIFICATION	8.498523796673922E-7	IMPLEMENTATION
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999663973980751	WITHOUT_CLASSIFICATION	3.36026019248071E-5	IMPLEMENTATION
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999975451557825	WITHOUT_CLASSIFICATION	2.4548442175026857E-6	IMPLEMENTATION
a composite key	WITHOUT_CLASSIFICATION	0.9999999454402445	WITHOUT_CLASSIFICATION	5.4559755428911205E-8	IMPLEMENTATION
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999722099682	WITHOUT_CLASSIFICATION	2.7790031785123113E-8	IMPLEMENTATION
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999997228136026	WITHOUT_CLASSIFICATION	2.7718639745751226E-7	IMPLEMENTATION
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.959265737501687	WITHOUT_CLASSIFICATION	0.04073426249831313	IMPLEMENTATION
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999972165707244	WITHOUT_CLASSIFICATION	2.7834292756780646E-6	IMPLEMENTATION
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9059150483986134	WITHOUT_CLASSIFICATION	0.09408495160138666	IMPLEMENTATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.7316173009967211	WITHOUT_CLASSIFICATION	0.26838269900327894	IMPLEMENTATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.999989442391837	WITHOUT_CLASSIFICATION	1.05576081630502E-5	IMPLEMENTATION
we found it	WITHOUT_CLASSIFICATION	0.9999996857071046	WITHOUT_CLASSIFICATION	3.142928952672261E-7	IMPLEMENTATION
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999960502481886	WITHOUT_CLASSIFICATION	3.949751811385469E-6	IMPLEMENTATION
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999994666258147	WITHOUT_CLASSIFICATION	5.333741852185931E-7	IMPLEMENTATION
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9985754004974966	WITHOUT_CLASSIFICATION	0.001424599502503468	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999011105714	WITHOUT_CLASSIFICATION	9.888942861708818E-8	IMPLEMENTATION
root entity comes last	WITHOUT_CLASSIFICATION	0.9999977832409025	WITHOUT_CLASSIFICATION	2.216759097534383E-6	IMPLEMENTATION
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999981501346126	WITHOUT_CLASSIFICATION	1.8498653874871263E-6	IMPLEMENTATION
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999999925081287	WITHOUT_CLASSIFICATION	7.491871301820492E-8	IMPLEMENTATION
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999994772040046	WITHOUT_CLASSIFICATION	5.227959954560973E-7	IMPLEMENTATION
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999562407691833	WITHOUT_CLASSIFICATION	4.375923081678654E-5	IMPLEMENTATION
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999991400638559	WITHOUT_CLASSIFICATION	8.599361440109449E-7	IMPLEMENTATION
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999885372894716	WITHOUT_CLASSIFICATION	1.146271052848627E-5	IMPLEMENTATION
the criteria instance	WITHOUT_CLASSIFICATION	0.9999985998846839	WITHOUT_CLASSIFICATION	1.4001153160572383E-6	IMPLEMENTATION
the entity name	WITHOUT_CLASSIFICATION	0.9999908096385832	WITHOUT_CLASSIFICATION	9.190361416689436E-6	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9990631725459802	WITHOUT_CLASSIFICATION	9.368274540197985E-4	IMPLEMENTATION
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9990631725459802	WITHOUT_CLASSIFICATION	9.368274540197985E-4	IMPLEMENTATION
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999977946151398	WITHOUT_CLASSIFICATION	2.205384860188376E-6	IMPLEMENTATION
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999664697779498	WITHOUT_CLASSIFICATION	3.35302220502422E-5	IMPLEMENTATION
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999843889195	WITHOUT_CLASSIFICATION	1.561108055587952E-8	IMPLEMENTATION
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999901494623471	WITHOUT_CLASSIFICATION	9.850537652900384E-5	IMPLEMENTATION
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999999509807479	WITHOUT_CLASSIFICATION	4.9019252086627315E-8	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999999356565856	WITHOUT_CLASSIFICATION	6.434341439094984E-7	IMPLEMENTATION
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999999121288371	WITHOUT_CLASSIFICATION	8.787116290874096E-7	IMPLEMENTATION
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999992692867619	WITHOUT_CLASSIFICATION	7.307132380779733E-7	IMPLEMENTATION
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999960842118968	WITHOUT_CLASSIFICATION	3.915788103127689E-6	IMPLEMENTATION
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999976290168607	WITHOUT_CLASSIFICATION	2.3709831392927907E-6	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999336424168	WITHOUT_CLASSIFICATION	6.635758318763164E-7	IMPLEMENTATION
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999969907504261	WITHOUT_CLASSIFICATION	3.009249573883082E-6	IMPLEMENTATION
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9991218711487027	WITHOUT_CLASSIFICATION	8.781288512974492E-4	IMPLEMENTATION
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999907868435	WITHOUT_CLASSIFICATION	9.213156445925041E-9	IMPLEMENTATION
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996959198307676	WITHOUT_CLASSIFICATION	3.040801692324323E-4	IMPLEMENTATION
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999963363565351	WITHOUT_CLASSIFICATION	3.6636434648551726E-6	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9763724261163756	WITHOUT_CLASSIFICATION	0.02362757388362429	IMPLEMENTATION
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9763724261163756	WITHOUT_CLASSIFICATION	0.02362757388362429	IMPLEMENTATION
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999962912671554	WITHOUT_CLASSIFICATION	3.7087328447423175E-6	IMPLEMENTATION
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999993360051643	WITHOUT_CLASSIFICATION	6.639948357080846E-7	IMPLEMENTATION
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999809504273964	WITHOUT_CLASSIFICATION	1.9049572603493023E-5	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997391630603	WITHOUT_CLASSIFICATION	2.6083693972204007E-7	IMPLEMENTATION
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999963661882918	WITHOUT_CLASSIFICATION	3.6338117082151455E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998008868698771	WITHOUT_CLASSIFICATION	1.991131301228812E-4	IMPLEMENTATION
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999997786797963	WITHOUT_CLASSIFICATION	2.213202037569084E-7	IMPLEMENTATION
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999781115587	WITHOUT_CLASSIFICATION	2.1888441317101358E-8	IMPLEMENTATION
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998852024178	WITHOUT_CLASSIFICATION	1.1479758217526075E-7	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999984952023615	WITHOUT_CLASSIFICATION	1.504797638463892E-6	IMPLEMENTATION
already been processed...	WITHOUT_CLASSIFICATION	0.9999984952023615	WITHOUT_CLASSIFICATION	1.504797638463892E-6	IMPLEMENTATION
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998527224335079	WITHOUT_CLASSIFICATION	1.4727756649209105E-4	IMPLEMENTATION
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999993285862004	WITHOUT_CLASSIFICATION	6.714137995127536E-7	IMPLEMENTATION
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999859030403788	WITHOUT_CLASSIFICATION	1.409695962128948E-5	IMPLEMENTATION
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999999618587879	WITHOUT_CLASSIFICATION	3.8141212101790494E-7	IMPLEMENTATION
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999738291571746	WITHOUT_CLASSIFICATION	2.6170842825363658E-5	IMPLEMENTATION
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999968330969	WITHOUT_CLASSIFICATION	3.1669030625001587E-9	IMPLEMENTATION
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999976990783558	WITHOUT_CLASSIFICATION	2.3009216442223843E-6	IMPLEMENTATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999058532481175	WITHOUT_CLASSIFICATION	9.414675188236167E-5	IMPLEMENTATION
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9993409488500599	WITHOUT_CLASSIFICATION	6.590511499401923E-4	IMPLEMENTATION
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999244634336016	WITHOUT_CLASSIFICATION	7.553656639843323E-5	IMPLEMENTATION
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996037583098	WITHOUT_CLASSIFICATION	3.9624169023279355E-7	IMPLEMENTATION
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999849398010392	WITHOUT_CLASSIFICATION	1.5060198960713908E-5	IMPLEMENTATION
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999660078835972	WITHOUT_CLASSIFICATION	3.399211640270236E-5	IMPLEMENTATION
make a new one	WITHOUT_CLASSIFICATION	0.9999986440524226	WITHOUT_CLASSIFICATION	1.355947577352639E-6	IMPLEMENTATION
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999511326249794	WITHOUT_CLASSIFICATION	4.8867375020512086E-5	IMPLEMENTATION
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999983021442934	WITHOUT_CLASSIFICATION	1.697855706568114E-6	IMPLEMENTATION
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998773373525	WITHOUT_CLASSIFICATION	1.226626475040078E-7	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999995466749	WITHOUT_CLASSIFICATION	4.533251026005821E-9	IMPLEMENTATION
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999999141085	WITHOUT_CLASSIFICATION	8.589149911439755E-10	IMPLEMENTATION
by default	WITHOUT_CLASSIFICATION	0.999995782762011	WITHOUT_CLASSIFICATION	4.21723798905478E-6	IMPLEMENTATION
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999999296212704	WITHOUT_CLASSIFICATION	7.037872956391316E-8	IMPLEMENTATION
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9992234958227182	WITHOUT_CLASSIFICATION	7.765041772818459E-4	IMPLEMENTATION
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999995758215697	WITHOUT_CLASSIFICATION	4.2417843025199437E-7	IMPLEMENTATION
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999954862182978	WITHOUT_CLASSIFICATION	4.513781702133621E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.999998018573405	WITHOUT_CLASSIFICATION	1.9814265950721416E-6	IMPLEMENTATION
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999889661838173	WITHOUT_CLASSIFICATION	1.1033816182597542E-5	IMPLEMENTATION
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999996528476737	WITHOUT_CLASSIFICATION	3.471523262547266E-7	IMPLEMENTATION
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9989379211798503	WITHOUT_CLASSIFICATION	0.0010620788201498163	IMPLEMENTATION
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.8076081696314402	WITHOUT_CLASSIFICATION	0.19239183036855986	IMPLEMENTATION
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999919503955461	WITHOUT_CLASSIFICATION	8.049604453967956E-6	IMPLEMENTATION
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9987845063056533	WITHOUT_CLASSIFICATION	0.0012154936943466633	IMPLEMENTATION
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999998756259053	WITHOUT_CLASSIFICATION	1.2437409471748635E-7	IMPLEMENTATION
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999205691330776	WITHOUT_CLASSIFICATION	7.943086692241643E-5	IMPLEMENTATION
usually useless	WITHOUT_CLASSIFICATION	0.9999999534210491	WITHOUT_CLASSIFICATION	4.6578950886057754E-8	IMPLEMENTATION
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999987030500821	WITHOUT_CLASSIFICATION	1.2969499179018925E-6	IMPLEMENTATION
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999988558947269	WITHOUT_CLASSIFICATION	1.144105273118164E-6	IMPLEMENTATION
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999979707278948	WITHOUT_CLASSIFICATION	2.029272105291628E-6	IMPLEMENTATION
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999966846040951	WITHOUT_CLASSIFICATION	3.315395904956271E-6	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999998812524176	WITHOUT_CLASSIFICATION	1.1874758238278539E-7	IMPLEMENTATION
may be final	WITHOUT_CLASSIFICATION	0.9999998812524176	WITHOUT_CLASSIFICATION	1.1874758238278539E-7	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999998560997727	WITHOUT_CLASSIFICATION	1.439002273336565E-7	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999899349646	WITHOUT_CLASSIFICATION	1.0065035399581761E-7	IMPLEMENTATION
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999990973787637	WITHOUT_CLASSIFICATION	9.026212362657213E-7	IMPLEMENTATION
ignore it...	WITHOUT_CLASSIFICATION	0.9999909153912969	WITHOUT_CLASSIFICATION	9.08460870299756E-6	IMPLEMENTATION
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999957866835416	WITHOUT_CLASSIFICATION	4.21331645833203E-6	IMPLEMENTATION
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999999188722	WITHOUT_CLASSIFICATION	8.112773970006821E-11	IMPLEMENTATION
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999993995441	WITHOUT_CLASSIFICATION	6.004559613390956E-10	IMPLEMENTATION
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.99995354076287	WITHOUT_CLASSIFICATION	4.64592371299162E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999998560997727	WITHOUT_CLASSIFICATION	1.439002273336565E-7	IMPLEMENTATION
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999899349646	WITHOUT_CLASSIFICATION	1.0065035399581761E-7	IMPLEMENTATION
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999994351031973	WITHOUT_CLASSIFICATION	5.6489680270250525E-6	IMPLEMENTATION
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998641120419223	WITHOUT_CLASSIFICATION	1.3588795807785081E-4	IMPLEMENTATION
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998205986309	WITHOUT_CLASSIFICATION	1.794013691093643E-7	IMPLEMENTATION
index should be last column listed	WITHOUT_CLASSIFICATION	0.9996639407959473	WITHOUT_CLASSIFICATION	3.3605920405274485E-4	IMPLEMENTATION
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999990438040766	WITHOUT_CLASSIFICATION	9.56195923467873E-7	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999921918815271	WITHOUT_CLASSIFICATION	7.80811847292051E-6	IMPLEMENTATION
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999891540565066	WITHOUT_CLASSIFICATION	1.0845943493533049E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998952073484767	WITHOUT_CLASSIFICATION	1.0479265152321993E-4	IMPLEMENTATION
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999859522838032	WITHOUT_CLASSIFICATION	1.4047716196784629E-5	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.584912956564859	WITHOUT_CLASSIFICATION	0.41508704343514113	IMPLEMENTATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999919081	WITHOUT_CLASSIFICATION	8.091819099020417E-12	IMPLEMENTATION
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.584912956564859	WITHOUT_CLASSIFICATION	0.41508704343514113	IMPLEMENTATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999992834906624	WITHOUT_CLASSIFICATION	7.165093376977388E-7	IMPLEMENTATION
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999987845897976	WITHOUT_CLASSIFICATION	1.2154102023632177E-6	IMPLEMENTATION
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999993305891215	WITHOUT_CLASSIFICATION	6.694108784184E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932461804248	WITHOUT_CLASSIFICATION	6.753819575147558E-6	IMPLEMENTATION
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999732014839176	WITHOUT_CLASSIFICATION	2.679851608241875E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998952073484767	WITHOUT_CLASSIFICATION	1.0479265152321993E-4	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998952073484767	WITHOUT_CLASSIFICATION	1.0479265152321993E-4	IMPLEMENTATION
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999999862145437	WITHOUT_CLASSIFICATION	1.3785456304674578E-7	IMPLEMENTATION
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999997803485673	WITHOUT_CLASSIFICATION	2.1965143283566795E-7	IMPLEMENTATION
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999969529383996	WITHOUT_CLASSIFICATION	3.0470616002984953E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999989173438076	WITHOUT_CLASSIFICATION	1.0826561923025014E-6	IMPLEMENTATION
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.999999312832291	WITHOUT_CLASSIFICATION	6.871677088968823E-7	IMPLEMENTATION
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999999957392134	WITHOUT_CLASSIFICATION	4.2607866025669906E-8	IMPLEMENTATION
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9753079941036042	WITHOUT_CLASSIFICATION	0.024692005896395704	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.999998854189551	WITHOUT_CLASSIFICATION	1.1458104489315807E-6	IMPLEMENTATION
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999999793783228	WITHOUT_CLASSIFICATION	2.0621677196855334E-7	IMPLEMENTATION
KEY	WITHOUT_CLASSIFICATION	0.9998729858314022	WITHOUT_CLASSIFICATION	1.2701416859793284E-4	IMPLEMENTATION
columns	WITHOUT_CLASSIFICATION	0.9999962223086004	WITHOUT_CLASSIFICATION	3.7776913995279185E-6	IMPLEMENTATION
SQL statements	WITHOUT_CLASSIFICATION	0.9999997464557873	WITHOUT_CLASSIFICATION	2.535442127693363E-7	IMPLEMENTATION
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999940123039313	WITHOUT_CLASSIFICATION	5.9876960686818454E-6	IMPLEMENTATION
types	WITHOUT_CLASSIFICATION	0.999947484429648	WITHOUT_CLASSIFICATION	5.251557035207801E-5	IMPLEMENTATION
custom sql	WITHOUT_CLASSIFICATION	0.9999997606865338	WITHOUT_CLASSIFICATION	2.393134661403806E-7	IMPLEMENTATION
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996416243223405	WITHOUT_CLASSIFICATION	3.5837567765950015E-4	IMPLEMENTATION
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.99990134932562	WITHOUT_CLASSIFICATION	9.865067437997894E-5	IMPLEMENTATION
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999746181060739	WITHOUT_CLASSIFICATION	2.538189392607129E-5	IMPLEMENTATION
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998934764489522	WITHOUT_CLASSIFICATION	1.065235510478715E-4	IMPLEMENTATION
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998330178913	WITHOUT_CLASSIFICATION	1.6698210870787965E-7	IMPLEMENTATION
ELEMENT	WITHOUT_CLASSIFICATION	0.9999736778095804	WITHOUT_CLASSIFICATION	2.6322190419697517E-5	IMPLEMENTATION
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999513198864834	WITHOUT_CLASSIFICATION	4.868011351660069E-4	IMPLEMENTATION
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999535894888367	WITHOUT_CLASSIFICATION	4.6410511163285044E-5	IMPLEMENTATION
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.993593887324479	WITHOUT_CLASSIFICATION	0.006406112675521015	IMPLEMENTATION
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999187059039281	WITHOUT_CLASSIFICATION	8.12940960718862E-5	IMPLEMENTATION
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999282271744492	WITHOUT_CLASSIFICATION	7.177282555085996E-5	IMPLEMENTATION
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999967995135638	WITHOUT_CLASSIFICATION	3.20048643621031E-6	IMPLEMENTATION
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999289360072	WITHOUT_CLASSIFICATION	7.106399277394985E-8	IMPLEMENTATION
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9157616798705733	WITHOUT_CLASSIFICATION	0.08423832012942659	IMPLEMENTATION
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999855003749867	WITHOUT_CLASSIFICATION	1.4499625013295227E-4	IMPLEMENTATION
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9992827217843152	WITHOUT_CLASSIFICATION	7.172782156849024E-4	IMPLEMENTATION
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9496022945029929	WITHOUT_CLASSIFICATION	0.05039770549700719	IMPLEMENTATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9999077024914061	WITHOUT_CLASSIFICATION	9.229750859388948E-5	IMPLEMENTATION
strip leading ','	WITHOUT_CLASSIFICATION	0.999998854189551	WITHOUT_CLASSIFICATION	1.1458104489315807E-6	IMPLEMENTATION
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999896909249231	WITHOUT_CLASSIFICATION	1.030907507689122E-5	IMPLEMENTATION
needed by arrays	WITHOUT_CLASSIFICATION	0.9999468702787285	WITHOUT_CLASSIFICATION	5.312972127137921E-5	IMPLEMENTATION
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9036917030822423	WITHOUT_CLASSIFICATION	0.09630829691775768	IMPLEMENTATION
an assertion	WITHOUT_CLASSIFICATION	0.9999998799852176	WITHOUT_CLASSIFICATION	1.200147823637545E-7	IMPLEMENTATION
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999744995474611	WITHOUT_CLASSIFICATION	2.550045253889948E-4	IMPLEMENTATION
create all the new entries	WITHOUT_CLASSIFICATION	0.9999884085190628	WITHOUT_CLASSIFICATION	1.159148093727201E-5	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999989173438076	WITHOUT_CLASSIFICATION	1.0826561923025014E-6	IMPLEMENTATION
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999989173438076	WITHOUT_CLASSIFICATION	1.0826561923025014E-6	IMPLEMENTATION
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999299932571099	WITHOUT_CLASSIFICATION	7.000674289015581E-5	IMPLEMENTATION
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999676375260529	WITHOUT_CLASSIFICATION	3.2362473947148894E-5	IMPLEMENTATION
==elementType ??	WITHOUT_CLASSIFICATION	0.9999955657713708	WITHOUT_CLASSIFICATION	4.434228629085902E-6	IMPLEMENTATION
update all the modified entries	WITHOUT_CLASSIFICATION	0.999955645667768	WITHOUT_CLASSIFICATION	4.435433223202182E-5	IMPLEMENTATION
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999462101734917	WITHOUT_CLASSIFICATION	5.378982650830955E-4	IMPLEMENTATION
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999996539216319	WITHOUT_CLASSIFICATION	3.460783681265341E-7	IMPLEMENTATION
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999987792866033	WITHOUT_CLASSIFICATION	1.220713396705368E-6	IMPLEMENTATION
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999609522175	WITHOUT_CLASSIFICATION	3.904778253329662E-8	IMPLEMENTATION
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999352445134	WITHOUT_CLASSIFICATION	6.475548660065171E-8	IMPLEMENTATION
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999737591405147	WITHOUT_CLASSIFICATION	2.624085948527806E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999785624385	WITHOUT_CLASSIFICATION	2.1437561468260422E-8	IMPLEMENTATION
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999993881042749	WITHOUT_CLASSIFICATION	6.118957250968265E-6	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999616309675475	WITHOUT_CLASSIFICATION	3.8369032452493E-5	IMPLEMENTATION
Custom SQL	WITHOUT_CLASSIFICATION	0.9999998560997727	WITHOUT_CLASSIFICATION	1.439002273336565E-7	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999785624385	WITHOUT_CLASSIFICATION	2.1437561468260422E-8	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999983784228607	WITHOUT_CLASSIFICATION	1.6215771394232813E-6	IMPLEMENTATION
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999936619762594	WITHOUT_CLASSIFICATION	6.3380237405528765E-6	IMPLEMENTATION
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999991533665709	WITHOUT_CLASSIFICATION	8.466334291653297E-7	IMPLEMENTATION
TODO: check this....	WITHOUT_CLASSIFICATION	0.9632719687068338	IMPLEMENTATION	0.03672803129316612	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999616309675475	WITHOUT_CLASSIFICATION	3.8369032452493E-5	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999347864424	WITHOUT_CLASSIFICATION	6.521355756870898E-8	IMPLEMENTATION
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999865637527	WITHOUT_CLASSIFICATION	1.343624735667418E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999213504379	WITHOUT_CLASSIFICATION	7.864956208637553E-8	IMPLEMENTATION
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999985805	WITHOUT_CLASSIFICATION	1.4195548369926211E-12	IMPLEMENTATION
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999598733050038	WITHOUT_CLASSIFICATION	4.012669499627721E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999996134115376	WITHOUT_CLASSIFICATION	3.865884623794527E-7	IMPLEMENTATION
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999253270718	WITHOUT_CLASSIFICATION	7.46729282585373E-8	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999690833332917	WITHOUT_CLASSIFICATION	3.0916666708314946E-5	IMPLEMENTATION
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999845922047389	WITHOUT_CLASSIFICATION	1.540779526108376E-5	IMPLEMENTATION
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999985174049953	WITHOUT_CLASSIFICATION	1.4825950046374138E-6	IMPLEMENTATION
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999999790825028	WITHOUT_CLASSIFICATION	2.0917497171613862E-8	IMPLEMENTATION
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999853801897162	WITHOUT_CLASSIFICATION	1.4619810283812229E-5	IMPLEMENTATION
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999785624385	WITHOUT_CLASSIFICATION	2.1437561468260422E-8	IMPLEMENTATION
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999347864424	WITHOUT_CLASSIFICATION	6.521355756870898E-8	IMPLEMENTATION
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999213504379	WITHOUT_CLASSIFICATION	7.864956208637553E-8	IMPLEMENTATION
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999994867981276	WITHOUT_CLASSIFICATION	5.132018724397922E-7	IMPLEMENTATION
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999995901981845	WITHOUT_CLASSIFICATION	4.0980181548215444E-7	IMPLEMENTATION
discriminator column	WITHOUT_CLASSIFICATION	0.9999999530321392	WITHOUT_CLASSIFICATION	4.6967860895525976E-8	IMPLEMENTATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999616309675475	WITHOUT_CLASSIFICATION	3.8369032452493E-5	IMPLEMENTATION
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999935023960833	WITHOUT_CLASSIFICATION	6.4976039166874186E-6	IMPLEMENTATION
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999878820701765	WITHOUT_CLASSIFICATION	1.2117929823432045E-5	IMPLEMENTATION
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999663296315662	WITHOUT_CLASSIFICATION	3.367036843383473E-5	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999383769977587	WITHOUT_CLASSIFICATION	6.162300224134414E-5	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999690833332917	WITHOUT_CLASSIFICATION	3.0916666708314946E-5	IMPLEMENTATION
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999983784228607	WITHOUT_CLASSIFICATION	1.6215771394232813E-6	IMPLEMENTATION
JOINS	WITHOUT_CLASSIFICATION	0.9999214111026996	WITHOUT_CLASSIFICATION	7.858889730033665E-5	IMPLEMENTATION
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999997415811707	WITHOUT_CLASSIFICATION	2.584188293655303E-7	IMPLEMENTATION
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999997353069726	WITHOUT_CLASSIFICATION	2.6469302737946413E-7	IMPLEMENTATION
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999997159905367	WITHOUT_CLASSIFICATION	2.8400946330691992E-6	IMPLEMENTATION
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9935533114377956	WITHOUT_CLASSIFICATION	0.006446688562204486	IMPLEMENTATION
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998310285775568	WITHOUT_CLASSIFICATION	1.6897142244322221E-4	IMPLEMENTATION
render the SQL	WITHOUT_CLASSIFICATION	0.9999691001923746	WITHOUT_CLASSIFICATION	3.089980762538739E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932461804248	WITHOUT_CLASSIFICATION	6.753819575147558E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998874427761	WITHOUT_CLASSIFICATION	1.1255722390189864E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998360227125	WITHOUT_CLASSIFICATION	1.6397728752889306E-7	IMPLEMENTATION
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999710306583	WITHOUT_CLASSIFICATION	2.8969341674817797E-8	IMPLEMENTATION
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999999989162263	WITHOUT_CLASSIFICATION	1.0837737039107149E-8	IMPLEMENTATION
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999872850002	WITHOUT_CLASSIFICATION	1.271499991295108E-8	IMPLEMENTATION
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999906322214	WITHOUT_CLASSIFICATION	9.367778530059277E-9	IMPLEMENTATION
SQL strings	WITHOUT_CLASSIFICATION	0.9999989938720136	WITHOUT_CLASSIFICATION	1.0061279863191593E-6	IMPLEMENTATION
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999996278814509	WITHOUT_CLASSIFICATION	3.721185491370337E-7	IMPLEMENTATION
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999383769977587	WITHOUT_CLASSIFICATION	6.162300224134414E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998440440974599	WITHOUT_CLASSIFICATION	1.559559025401736E-4	IMPLEMENTATION
VERSION	WITHOUT_CLASSIFICATION	0.9999519059272753	WITHOUT_CLASSIFICATION	4.809407272471325E-5	IMPLEMENTATION
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999870390617073	WITHOUT_CLASSIFICATION	1.2960938292642903E-5	IMPLEMENTATION
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999684344291568	WITHOUT_CLASSIFICATION	3.156557084322434E-5	IMPLEMENTATION
before add :-)	WITHOUT_CLASSIFICATION	0.9999992511127163	WITHOUT_CLASSIFICATION	7.48887283792831E-7	IMPLEMENTATION
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999995607764341	WITHOUT_CLASSIFICATION	4.3922356582429657E-7	IMPLEMENTATION
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999992117191879	WITHOUT_CLASSIFICATION	7.88280812096765E-7	IMPLEMENTATION
note early exit here:	WITHOUT_CLASSIFICATION	0.9991618781665594	WITHOUT_CLASSIFICATION	8.381218334406279E-4	IMPLEMENTATION
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999974800809516	WITHOUT_CLASSIFICATION	2.5199190483886825E-6	IMPLEMENTATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9997232798488903	WITHOUT_CLASSIFICATION	2.767201511096937E-4	IMPLEMENTATION
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999995304726692	WITHOUT_CLASSIFICATION	4.6952733080940245E-7	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999950136805	WITHOUT_CLASSIFICATION	4.9863194930722254E-8	IMPLEMENTATION
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999699010297852	WITHOUT_CLASSIFICATION	3.0098970214747462E-5	IMPLEMENTATION
null owner ok??	WITHOUT_CLASSIFICATION	0.9999987438435682	WITHOUT_CLASSIFICATION	1.2561564318041282E-6	IMPLEMENTATION
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999994602525158	WITHOUT_CLASSIFICATION	5.397474841668474E-7	IMPLEMENTATION
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998986233316	WITHOUT_CLASSIFICATION	1.0137666835942948E-7	IMPLEMENTATION
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999998590761993	WITHOUT_CLASSIFICATION	1.4092380068939402E-6	IMPLEMENTATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999998756115411	WITHOUT_CLASSIFICATION	1.243884589335349E-7	IMPLEMENTATION
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999998847467022	WITHOUT_CLASSIFICATION	1.1525329780582782E-6	IMPLEMENTATION
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999998749000971	WITHOUT_CLASSIFICATION	1.2509990286402413E-7	IMPLEMENTATION
ALIASES	WITHOUT_CLASSIFICATION	0.9998631156046259	WITHOUT_CLASSIFICATION	1.3688439537417233E-4	IMPLEMENTATION
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999964048207063	WITHOUT_CLASSIFICATION	3.595179293634547E-6	IMPLEMENTATION
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996487719495	WITHOUT_CLASSIFICATION	3.5122805052922446E-7	IMPLEMENTATION
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999930068016	WITHOUT_CLASSIFICATION	6.993198352017474E-9	IMPLEMENTATION
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996711640637	WITHOUT_CLASSIFICATION	3.2883593621060643E-7	IMPLEMENTATION
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8656421088739767	WITHOUT_CLASSIFICATION	0.13435789112602328	IMPLEMENTATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9997086587611211	WITHOUT_CLASSIFICATION	2.913412388789191E-4	IMPLEMENTATION
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999621592107739	WITHOUT_CLASSIFICATION	3.78407892261427E-5	IMPLEMENTATION
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998503479865248	WITHOUT_CLASSIFICATION	1.4965201347515175E-4	IMPLEMENTATION
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9933579906552875	IMPLEMENTATION	0.006642009344712389	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999913270304	WITHOUT_CLASSIFICATION	8.672969665438443E-9	IMPLEMENTATION
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999575037968425	WITHOUT_CLASSIFICATION	4.2496203157514995E-5	IMPLEMENTATION
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999975860385037	WITHOUT_CLASSIFICATION	2.4139614962110833E-6	IMPLEMENTATION
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999822175307886	WITHOUT_CLASSIFICATION	1.7782469211427884E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999949826824	WITHOUT_CLASSIFICATION	5.017317576323499E-9	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999792020417106	WITHOUT_CLASSIFICATION	2.0797958289301875E-5	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999638151638	WITHOUT_CLASSIFICATION	3.6184836195491674E-8	IMPLEMENTATION
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.999947791469397	WITHOUT_CLASSIFICATION	5.220853060289715E-5	IMPLEMENTATION
add normal properties	WITHOUT_CLASSIFICATION	0.9999792020417106	WITHOUT_CLASSIFICATION	2.0797958289301875E-5	IMPLEMENTATION
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999949826824	WITHOUT_CLASSIFICATION	5.017317576323499E-9	IMPLEMENTATION
add the discriminator	WITHOUT_CLASSIFICATION	0.9999999638151638	WITHOUT_CLASSIFICATION	3.6184836195491674E-8	IMPLEMENTATION
add the primary key	WITHOUT_CLASSIFICATION	0.9999956008824294	WITHOUT_CLASSIFICATION	4.399117570536195E-6	IMPLEMENTATION
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996535738194	WITHOUT_CLASSIFICATION	3.4642618060426375E-7	IMPLEMENTATION
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999921381240908	WITHOUT_CLASSIFICATION	7.86187590925902E-6	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999898034577266	WITHOUT_CLASSIFICATION	1.019654227345051E-5	IMPLEMENTATION
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999999065298	WITHOUT_CLASSIFICATION	9.347017864050936E-11	IMPLEMENTATION
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5506199248386063	WITHOUT_CLASSIFICATION	0.4493800751613936	IMPLEMENTATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999988021948845	WITHOUT_CLASSIFICATION	1.1978051155047125E-5	IMPLEMENTATION
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999576750894554	WITHOUT_CLASSIFICATION	4.232491054462731E-5	IMPLEMENTATION
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999965770908854	WITHOUT_CLASSIFICATION	3.422909114655181E-6	IMPLEMENTATION
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999945098290501	WITHOUT_CLASSIFICATION	5.490170949895322E-6	IMPLEMENTATION
starting index	WITHOUT_CLASSIFICATION	0.9999951012140095	WITHOUT_CLASSIFICATION	4.898785990493061E-6	IMPLEMENTATION
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999994482672657	WITHOUT_CLASSIFICATION	5.517327343603856E-7	IMPLEMENTATION
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998471218542299	WITHOUT_CLASSIFICATION	1.5287814577005985E-4	IMPLEMENTATION
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999898034577266	WITHOUT_CLASSIFICATION	1.019654227345051E-5	IMPLEMENTATION
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999669229529672	WITHOUT_CLASSIFICATION	3.3077047032812956E-5	IMPLEMENTATION
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998434478032	WITHOUT_CLASSIFICATION	1.5655219670656053E-7	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999997582615	WITHOUT_CLASSIFICATION	2.4173849582687775E-9	IMPLEMENTATION
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997181621887	WITHOUT_CLASSIFICATION	2.8183781122025365E-7	IMPLEMENTATION
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999830171123902	WITHOUT_CLASSIFICATION	1.6982887609862215E-5	IMPLEMENTATION
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998096973399	WITHOUT_CLASSIFICATION	1.9030266000747072E-7	IMPLEMENTATION
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9921768062527502	WITHOUT_CLASSIFICATION	0.007823193747249733	IMPLEMENTATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999724232971	WITHOUT_CLASSIFICATION	2.7576702910144734E-8	IMPLEMENTATION
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999935580600141	WITHOUT_CLASSIFICATION	6.441939985926604E-6	IMPLEMENTATION
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999679816110495	WITHOUT_CLASSIFICATION	3.201838895057554E-5	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999627998682	WITHOUT_CLASSIFICATION	3.720013185308457E-8	IMPLEMENTATION
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999627998682	WITHOUT_CLASSIFICATION	3.720013185308457E-8	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999997651478	WITHOUT_CLASSIFICATION	2.3485219557508746E-9	IMPLEMENTATION
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999997651478	WITHOUT_CLASSIFICATION	2.3485219557508746E-9	IMPLEMENTATION
not supported	WITHOUT_CLASSIFICATION	0.9946194905262674	WITHOUT_CLASSIFICATION	0.005380509473732578	IMPLEMENTATION
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999999997582615	WITHOUT_CLASSIFICATION	2.4173849582687775E-9	IMPLEMENTATION
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999879211287995	WITHOUT_CLASSIFICATION	1.207887120051195E-5	IMPLEMENTATION
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999984902575353	WITHOUT_CLASSIFICATION	1.5097424647027148E-5	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998272153262	WITHOUT_CLASSIFICATION	1.7278467382731593E-7	IMPLEMENTATION
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998272153262	WITHOUT_CLASSIFICATION	1.7278467382731593E-7	IMPLEMENTATION
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999995913594449	WITHOUT_CLASSIFICATION	4.086405549877374E-7	IMPLEMENTATION
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999988900882624	WITHOUT_CLASSIFICATION	1.1099117376238223E-6	IMPLEMENTATION
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999329195226	WITHOUT_CLASSIFICATION	6.708047740988358E-8	IMPLEMENTATION
skip the driving table	WITHOUT_CLASSIFICATION	0.9999957163524515	WITHOUT_CLASSIFICATION	4.28364754849829E-6	IMPLEMENTATION
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9993579803271987	WITHOUT_CLASSIFICATION	6.420196728013101E-4	IMPLEMENTATION
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999946091031571	WITHOUT_CLASSIFICATION	5.390896842970745E-6	IMPLEMENTATION
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999992673586153	WITHOUT_CLASSIFICATION	7.326413846243783E-7	IMPLEMENTATION
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999895646541036	WITHOUT_CLASSIFICATION	1.0435345896321045E-5	IMPLEMENTATION
now render the joins	WITHOUT_CLASSIFICATION	0.9999419690212146	WITHOUT_CLASSIFICATION	5.8030978785450515E-5	IMPLEMENTATION
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999999703730796	WITHOUT_CLASSIFICATION	2.9626920280710873E-8	IMPLEMENTATION
now render the select clause	WITHOUT_CLASSIFICATION	0.9999969332855773	WITHOUT_CLASSIFICATION	3.066714422630548E-6	IMPLEMENTATION
now tie it all together	WITHOUT_CLASSIFICATION	0.999674328750923	WITHOUT_CLASSIFICATION	3.256712490770546E-4	IMPLEMENTATION
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999106104516	WITHOUT_CLASSIFICATION	8.938954845512765E-8	IMPLEMENTATION
select SQL	WITHOUT_CLASSIFICATION	0.9999992146758904	WITHOUT_CLASSIFICATION	7.853241095897154E-7	IMPLEMENTATION
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9997667516268436	WITHOUT_CLASSIFICATION	2.3324837315634849E-4	IMPLEMENTATION
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999455953199615	WITHOUT_CLASSIFICATION	5.440468003853811E-5	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858404997384	WITHOUT_CLASSIFICATION	1.4159500261670403E-5	IMPLEMENTATION
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999942176349446	WITHOUT_CLASSIFICATION	5.7823650555293175E-6	IMPLEMENTATION
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998426039643517	WITHOUT_CLASSIFICATION	1.5739603564839095E-4	IMPLEMENTATION
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999954421888	WITHOUT_CLASSIFICATION	4.557811257967147E-9	IMPLEMENTATION
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9984167667381141	WITHOUT_CLASSIFICATION	0.0015832332618858518	IMPLEMENTATION
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999997785328004	WITHOUT_CLASSIFICATION	2.214671995482655E-7	IMPLEMENTATION
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999715862379716	WITHOUT_CLASSIFICATION	2.841376202845417E-5	IMPLEMENTATION
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999988813265234	WITHOUT_CLASSIFICATION	1.1186734766202912E-6	IMPLEMENTATION
/	WITHOUT_CLASSIFICATION	0.9999027690340091	WITHOUT_CLASSIFICATION	9.723096599092498E-5	IMPLEMENTATION
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999967123051338	WITHOUT_CLASSIFICATION	3.2876948663045466E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999950136805	WITHOUT_CLASSIFICATION	4.9863194930722254E-8	IMPLEMENTATION
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999993531355623	WITHOUT_CLASSIFICATION	6.46864437681532E-7	IMPLEMENTATION
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999989157613511	WITHOUT_CLASSIFICATION	1.0842386489238937E-6	IMPLEMENTATION
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999112391304643	WITHOUT_CLASSIFICATION	8.876086953570075E-5	IMPLEMENTATION
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999020754620092	WITHOUT_CLASSIFICATION	9.792453799081434E-5	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999928287873922	WITHOUT_CLASSIFICATION	7.1712126078714535E-6	IMPLEMENTATION
cannot occur	WITHOUT_CLASSIFICATION	0.9999928287873922	WITHOUT_CLASSIFICATION	7.1712126078714535E-6	IMPLEMENTATION
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999998603867879	WITHOUT_CLASSIFICATION	1.396132121037679E-6	IMPLEMENTATION
try "get"	WITHOUT_CLASSIFICATION	0.9999974591987413	WITHOUT_CLASSIFICATION	2.540801258759918E-6	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999998696086548	WITHOUT_CLASSIFICATION	1.3039134521404507E-7	IMPLEMENTATION
do nothing...	WITHOUT_CLASSIFICATION	0.9999998696086548	WITHOUT_CLASSIFICATION	1.3039134521404507E-7	IMPLEMENTATION
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999651975823468	WITHOUT_CLASSIFICATION	3.4802417653129545E-5	IMPLEMENTATION
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999864874758325	WITHOUT_CLASSIFICATION	1.3512524167511443E-5	IMPLEMENTATION
do not do anything	WITHOUT_CLASSIFICATION	0.9999863150875884	WITHOUT_CLASSIFICATION	1.3684912411543874E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999804451168931	WITHOUT_CLASSIFICATION	1.955488310696282E-5	IMPLEMENTATION
cant instantiate	WITHOUT_CLASSIFICATION	0.9999982931794013	WITHOUT_CLASSIFICATION	1.7068205987931173E-6	IMPLEMENTATION
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999871754943	WITHOUT_CLASSIFICATION	1.2824505741700784E-8	IMPLEMENTATION
otherwise:	WITHOUT_CLASSIFICATION	0.999225482951264	WITHOUT_CLASSIFICATION	7.745170487359456E-4	IMPLEMENTATION
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999760852622629	WITHOUT_CLASSIFICATION	2.391473773708303E-5	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999825447535	WITHOUT_CLASSIFICATION	1.7455246491537387E-7	IMPLEMENTATION
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999999825447535	WITHOUT_CLASSIFICATION	1.7455246491537387E-7	IMPLEMENTATION
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999907714477884	WITHOUT_CLASSIFICATION	9.228552211680483E-6	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996658037024	WITHOUT_CLASSIFICATION	3.3419629761911367E-7	IMPLEMENTATION
while constructor is running	WITHOUT_CLASSIFICATION	0.9999996658037024	WITHOUT_CLASSIFICATION	3.3419629761911367E-7	IMPLEMENTATION
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999203950598	WITHOUT_CLASSIFICATION	7.960494017581181E-8	IMPLEMENTATION
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999999990962022	WITHOUT_CLASSIFICATION	9.037977418518696E-10	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.997755073429518	WITHOUT_CLASSIFICATION	0.0022449265704820418	IMPLEMENTATION
Get the caller	WITHOUT_CLASSIFICATION	0.999987991893079	WITHOUT_CLASSIFICATION	1.2008106921024817E-5	IMPLEMENTATION
Get the caller principals	WITHOUT_CLASSIFICATION	0.999973997328363	WITHOUT_CLASSIFICATION	2.600267163701597E-5	IMPLEMENTATION
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999942794616	WITHOUT_CLASSIFICATION	5.7205383573572575E-9	IMPLEMENTATION
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999660088717462	WITHOUT_CLASSIFICATION	3.399112825366066E-5	IMPLEMENTATION
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997512594582942	WITHOUT_CLASSIFICATION	2.487405417056956E-4	IMPLEMENTATION
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999995735654444	WITHOUT_CLASSIFICATION	4.2643455556040276E-7	IMPLEMENTATION
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999881790843659	WITHOUT_CLASSIFICATION	1.1820915634060938E-5	IMPLEMENTATION
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999977223316471	WITHOUT_CLASSIFICATION	2.277668352890627E-6	IMPLEMENTATION
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999837460530908	WITHOUT_CLASSIFICATION	1.6253946909258345E-5	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999944391134078	WITHOUT_CLASSIFICATION	5.560886592238523E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999944391134078	WITHOUT_CLASSIFICATION	5.560886592238523E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999944391134078	WITHOUT_CLASSIFICATION	5.560886592238523E-6	IMPLEMENTATION
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999944391134078	WITHOUT_CLASSIFICATION	5.560886592238523E-6	IMPLEMENTATION
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999905845638359	WITHOUT_CLASSIFICATION	9.415436164144609E-6	IMPLEMENTATION
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9998729672244467	WITHOUT_CLASSIFICATION	1.2703277555326897E-4	IMPLEMENTATION
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999977144924914	WITHOUT_CLASSIFICATION	2.285507508551478E-6	IMPLEMENTATION
for MySQL	WITHOUT_CLASSIFICATION	0.9999899000464868	WITHOUT_CLASSIFICATION	1.0099953513267471E-5	IMPLEMENTATION
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999777197604617	WITHOUT_CLASSIFICATION	2.2280239538317103E-5	IMPLEMENTATION
null caused some problems	WITHOUT_CLASSIFICATION	0.9999657428979799	WITHOUT_CLASSIFICATION	3.425710202007632E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997890423025887	WITHOUT_CLASSIFICATION	2.1095769741134136E-4	IMPLEMENTATION
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998533429929465	WITHOUT_CLASSIFICATION	1.4665700705354608E-4	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999265923820762	WITHOUT_CLASSIFICATION	7.340761792389072E-5	IMPLEMENTATION
we only release the connection	WITHOUT_CLASSIFICATION	0.9999973978737606	WITHOUT_CLASSIFICATION	2.6021262393037986E-6	IMPLEMENTATION
deprecated option...	WITHOUT_CLASSIFICATION	0.9999900897551334	WITHOUT_CLASSIFICATION	9.910244866604546E-6	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999974322014148	WITHOUT_CLASSIFICATION	2.5677985852512868E-6	IMPLEMENTATION
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999999732342143	WITHOUT_CLASSIFICATION	2.676578559632716E-8	IMPLEMENTATION
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999940788404855	WITHOUT_CLASSIFICATION	5.921159514481545E-6	IMPLEMENTATION
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999436857362856	WITHOUT_CLASSIFICATION	5.631426371439828E-5	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999974322014148	WITHOUT_CLASSIFICATION	2.5677985852512868E-6	IMPLEMENTATION
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999505658648193	WITHOUT_CLASSIFICATION	4.9434135180668954E-5	IMPLEMENTATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999925327864696	WITHOUT_CLASSIFICATION	7.467213530469471E-6	IMPLEMENTATION
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999989201917161	WITHOUT_CLASSIFICATION	1.0798082839200452E-6	IMPLEMENTATION
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999999991877338	WITHOUT_CLASSIFICATION	8.122661953272437E-9	IMPLEMENTATION
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999999940112451	WITHOUT_CLASSIFICATION	5.988754901168352E-9	IMPLEMENTATION
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999987919832549	WITHOUT_CLASSIFICATION	1.208016745010282E-6	IMPLEMENTATION
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999995982357935	WITHOUT_CLASSIFICATION	4.017642063690071E-7	IMPLEMENTATION
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999728833453128	WITHOUT_CLASSIFICATION	2.7116654687195785E-5	IMPLEMENTATION
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896370300306	WITHOUT_CLASSIFICATION	1.0362969969399883E-5	IMPLEMENTATION
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999995537339194	WITHOUT_CLASSIFICATION	4.4626608067643734E-7	IMPLEMENTATION
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999637889606	WITHOUT_CLASSIFICATION	3.621103940111829E-8	IMPLEMENTATION
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999996539094516	WITHOUT_CLASSIFICATION	3.4609054843348687E-7	IMPLEMENTATION
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999993614342142	WITHOUT_CLASSIFICATION	6.385657858078399E-6	IMPLEMENTATION
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999181767397173	WITHOUT_CLASSIFICATION	8.182326028263391E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999882052374723	WITHOUT_CLASSIFICATION	1.179476252768477E-5	IMPLEMENTATION
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999990859724383	WITHOUT_CLASSIFICATION	9.140275617285844E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999850156903	WITHOUT_CLASSIFICATION	1.4984309703076306E-8	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999984918249978	WITHOUT_CLASSIFICATION	1.508175002227351E-6	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999955416111601	WITHOUT_CLASSIFICATION	4.458388839815499E-6	IMPLEMENTATION
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999984918249978	WITHOUT_CLASSIFICATION	1.508175002227351E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999995727598905	WITHOUT_CLASSIFICATION	4.2724010951015553E-7	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999749363173	WITHOUT_CLASSIFICATION	2.5063682673456755E-8	IMPLEMENTATION
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.999937964377816	WITHOUT_CLASSIFICATION	6.203562218397128E-5	IMPLEMENTATION
cached for efficiency...	WITHOUT_CLASSIFICATION	0.999988568719575	WITHOUT_CLASSIFICATION	1.143128042495309E-5	IMPLEMENTATION
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999977466217354	WITHOUT_CLASSIFICATION	2.253378264652878E-6	IMPLEMENTATION
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999984912641644	WITHOUT_CLASSIFICATION	1.5087358355763773E-6	IMPLEMENTATION
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999998740018209	WITHOUT_CLASSIFICATION	1.2599817905893266E-7	IMPLEMENTATION
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999850156903	WITHOUT_CLASSIFICATION	1.4984309703076306E-8	IMPLEMENTATION
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999955416111601	WITHOUT_CLASSIFICATION	4.458388839815499E-6	IMPLEMENTATION
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999995727598905	WITHOUT_CLASSIFICATION	4.2724010951015553E-7	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999976823588473	WITHOUT_CLASSIFICATION	2.3176411526252508E-6	IMPLEMENTATION
return currentId;	WITHOUT_CLASSIFICATION	0.9999863712712778	WITHOUT_CLASSIFICATION	1.3628728722158829E-5	IMPLEMENTATION
reset the id	WITHOUT_CLASSIFICATION	0.9998889323957273	WITHOUT_CLASSIFICATION	1.1106760427270917E-4	IMPLEMENTATION
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999428808786	WITHOUT_CLASSIFICATION	5.7119121344221655E-8	IMPLEMENTATION
reset the version	WITHOUT_CLASSIFICATION	0.9999556469121149	WITHOUT_CLASSIFICATION	4.435308788519564E-5	IMPLEMENTATION
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999283440592441	WITHOUT_CLASSIFICATION	7.165594075586228E-5	IMPLEMENTATION
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999978600981686	WITHOUT_CLASSIFICATION	2.1399018314560794E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858404997384	WITHOUT_CLASSIFICATION	1.4159500261670403E-5	IMPLEMENTATION
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999749363173	WITHOUT_CLASSIFICATION	2.5063682673456755E-8	IMPLEMENTATION
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999299838638	WITHOUT_CLASSIFICATION	7.001613621209386E-8	IMPLEMENTATION
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999998291155664	WITHOUT_CLASSIFICATION	1.708844336715185E-7	IMPLEMENTATION
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999784153408378	WITHOUT_CLASSIFICATION	2.158465916219736E-4	IMPLEMENTATION
superclass entity-name	WITHOUT_CLASSIFICATION	0.999999979487123	WITHOUT_CLASSIFICATION	2.0512876959002676E-8	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858404997384	WITHOUT_CLASSIFICATION	1.4159500261670403E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999961383680254	WITHOUT_CLASSIFICATION	3.861631974591514E-6	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858404997384	WITHOUT_CLASSIFICATION	1.4159500261670403E-5	IMPLEMENTATION
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999975147884848	WITHOUT_CLASSIFICATION	2.4852115152114083E-6	IMPLEMENTATION
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999988224027544	WITHOUT_CLASSIFICATION	1.1775972456076304E-5	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999852542380405	WITHOUT_CLASSIFICATION	1.4745761959379386E-5	IMPLEMENTATION
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999710410500516	WITHOUT_CLASSIFICATION	2.8958949948321532E-5	IMPLEMENTATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999045494233	WITHOUT_CLASSIFICATION	9.545057656712135E-8	IMPLEMENTATION
Collection Types:	WITHOUT_CLASSIFICATION	0.9999947197025303	WITHOUT_CLASSIFICATION	5.280297469683106E-6	IMPLEMENTATION
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999998598659757	WITHOUT_CLASSIFICATION	1.4013402417831866E-7	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999960473852921	WITHOUT_CLASSIFICATION	3.952614707896126E-6	IMPLEMENTATION
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997319240476	WITHOUT_CLASSIFICATION	2.6807595247969793E-7	IMPLEMENTATION
value is the entity name	WITHOUT_CLASSIFICATION	0.9999984942377785	WITHOUT_CLASSIFICATION	1.5057622214290795E-6	IMPLEMENTATION
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999660436441002	WITHOUT_CLASSIFICATION	3.3956355899696566E-5	IMPLEMENTATION
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999998261413381	WITHOUT_CLASSIFICATION	1.7385866192927218E-7	IMPLEMENTATION
TODO!	WITHOUT_CLASSIFICATION	0.997755073429518	WITHOUT_CLASSIFICATION	0.0022449265704820418	IMPLEMENTATION
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999990324919174	WITHOUT_CLASSIFICATION	9.675080826233444E-7	IMPLEMENTATION
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999566315624495	WITHOUT_CLASSIFICATION	4.336843755036464E-5	IMPLEMENTATION
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999999063973019	WITHOUT_CLASSIFICATION	9.360269816666739E-8	IMPLEMENTATION
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999998982864822	WITHOUT_CLASSIFICATION	1.0171351789036022E-7	IMPLEMENTATION
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999986664779	WITHOUT_CLASSIFICATION	1.333522074599596E-9	IMPLEMENTATION
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999625929359475	WITHOUT_CLASSIFICATION	3.74070640526179E-5	IMPLEMENTATION
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999441420525834	WITHOUT_CLASSIFICATION	5.5857947416553234E-5	IMPLEMENTATION
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999951408759378	WITHOUT_CLASSIFICATION	4.859124062238028E-6	IMPLEMENTATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999473182374	WITHOUT_CLASSIFICATION	5.2681762694287296E-8	IMPLEMENTATION
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999999974744478	WITHOUT_CLASSIFICATION	2.5255522659085478E-9	IMPLEMENTATION
TODO!!!	WITHOUT_CLASSIFICATION	0.9979811470088134	WITHOUT_CLASSIFICATION	0.0020188529911866026	IMPLEMENTATION
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999833073405174	WITHOUT_CLASSIFICATION	1.6692659482602254E-5	IMPLEMENTATION
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999993157084787	WITHOUT_CLASSIFICATION	6.842915213106833E-6	IMPLEMENTATION
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999995180778105	WITHOUT_CLASSIFICATION	4.819221894808921E-7	IMPLEMENTATION
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999861367273262	WITHOUT_CLASSIFICATION	1.386327267381632E-5	IMPLEMENTATION
noop	WITHOUT_CLASSIFICATION	0.9998858209845666	WITHOUT_CLASSIFICATION	1.1417901543343771E-4	IMPLEMENTATION
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999969715235766	WITHOUT_CLASSIFICATION	3.0284764233700564E-6	IMPLEMENTATION
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9984527393630288	WITHOUT_CLASSIFICATION	0.0015472606369712394	IMPLEMENTATION
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999696722236235	WITHOUT_CLASSIFICATION	3.0327776376418974E-5	IMPLEMENTATION
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999947867277528	WITHOUT_CLASSIFICATION	5.213272247297957E-6	IMPLEMENTATION
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999986121256811	WITHOUT_CLASSIFICATION	1.3878743188488368E-6	IMPLEMENTATION
TODO	WITHOUT_CLASSIFICATION	0.9945122520272315	WITHOUT_CLASSIFICATION	0.005487747972768494	IMPLEMENTATION
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999979788538876	WITHOUT_CLASSIFICATION	2.0211461124449176E-6	IMPLEMENTATION
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999996871937713	WITHOUT_CLASSIFICATION	3.128062287308926E-7	IMPLEMENTATION
cache this	WITHOUT_CLASSIFICATION	0.9999956871226081	WITHOUT_CLASSIFICATION	4.312877391829967E-6	IMPLEMENTATION
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.999879773093329	WITHOUT_CLASSIFICATION	1.2022690667102967E-4	IMPLEMENTATION
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999999859169199	WITHOUT_CLASSIFICATION	1.4083080143537523E-8	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.99872322367138	WITHOUT_CLASSIFICATION	0.0012767763286199913	IMPLEMENTATION
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998497154637894	WITHOUT_CLASSIFICATION	1.5028453621051272E-4	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999886552526001	WITHOUT_CLASSIFICATION	1.1344747399925978E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999057995742147	WITHOUT_CLASSIFICATION	9.420042578526231E-5	IMPLEMENTATION
nothing to do	WITHOUT_CLASSIFICATION	0.9999057995742147	WITHOUT_CLASSIFICATION	9.420042578526231E-5	IMPLEMENTATION
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9993269594808656	WITHOUT_CLASSIFICATION	6.730405191344777E-4	IMPLEMENTATION
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999960473852921	WITHOUT_CLASSIFICATION	3.952614707896126E-6	IMPLEMENTATION
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9990526254193445	WITHOUT_CLASSIFICATION	9.473745806555263E-4	IMPLEMENTATION
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999999980288268	WITHOUT_CLASSIFICATION	1.971173202486592E-8	IMPLEMENTATION
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999989456445852	WITHOUT_CLASSIFICATION	1.0543554148371149E-6	IMPLEMENTATION
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999964727826209	WITHOUT_CLASSIFICATION	3.527217379097034E-5	IMPLEMENTATION
remember the uk value	WITHOUT_CLASSIFICATION	0.9999763403465414	WITHOUT_CLASSIFICATION	2.3659653458655318E-5	IMPLEMENTATION
NOOP	WITHOUT_CLASSIFICATION	0.9999584862630184	WITHOUT_CLASSIFICATION	4.1513736981698664E-5	IMPLEMENTATION
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999999313652	WITHOUT_CLASSIFICATION	6.863484358939648E-11	IMPLEMENTATION
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999992354494	WITHOUT_CLASSIFICATION	7.645507167291742E-10	IMPLEMENTATION
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999461312729895	WITHOUT_CLASSIFICATION	5.386872701061982E-5	IMPLEMENTATION
return false;	WITHOUT_CLASSIFICATION	0.9999998430382999	WITHOUT_CLASSIFICATION	1.5696170020495786E-7	IMPLEMENTATION
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999991935279229	WITHOUT_CLASSIFICATION	8.064720770672875E-7	IMPLEMENTATION
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999985004057	WITHOUT_CLASSIFICATION	1.4995943128112295E-9	IMPLEMENTATION
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999937960427	WITHOUT_CLASSIFICATION	6.203957301163418E-9	IMPLEMENTATION
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9996650648225955	WITHOUT_CLASSIFICATION	3.3493517740454734E-4	IMPLEMENTATION
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999310060361	WITHOUT_CLASSIFICATION	6.89939638430295E-8	IMPLEMENTATION
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999861396291	WITHOUT_CLASSIFICATION	1.386037087166432E-8	IMPLEMENTATION
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999774499543	WITHOUT_CLASSIFICATION	2.2550045745514465E-8	IMPLEMENTATION
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9995314599362144	WITHOUT_CLASSIFICATION	4.685400637856906E-4	IMPLEMENTATION
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999976923597296	WITHOUT_CLASSIFICATION	2.307640270486943E-6	IMPLEMENTATION
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9985446885160877	WITHOUT_CLASSIFICATION	0.0014553114839123058	IMPLEMENTATION
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999571989978856	WITHOUT_CLASSIFICATION	4.280100211443395E-5	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998655898609	WITHOUT_CLASSIFICATION	1.3441013907867247E-7	IMPLEMENTATION
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.99872322367138	WITHOUT_CLASSIFICATION	0.0012767763286199913	IMPLEMENTATION
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999972554052854	WITHOUT_CLASSIFICATION	2.744594714694169E-6	IMPLEMENTATION
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999999952215759	WITHOUT_CLASSIFICATION	4.778424128639618E-9	IMPLEMENTATION
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999952524617	WITHOUT_CLASSIFICATION	4.747538284676171E-9	IMPLEMENTATION
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999997878738781	WITHOUT_CLASSIFICATION	2.1212612182701713E-7	IMPLEMENTATION
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9961131258847808	WITHOUT_CLASSIFICATION	0.0038868741152191595	IMPLEMENTATION
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999915452352872	WITHOUT_CLASSIFICATION	8.454764712792102E-5	IMPLEMENTATION
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999998828163762	WITHOUT_CLASSIFICATION	1.1718362387624294E-7	IMPLEMENTATION
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999973507002673	WITHOUT_CLASSIFICATION	2.649299732725463E-6	IMPLEMENTATION
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999954036313657	WITHOUT_CLASSIFICATION	4.59636863422022E-6	IMPLEMENTATION
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999983456742	WITHOUT_CLASSIFICATION	1.6543257823891987E-9	IMPLEMENTATION
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999973833653906	WITHOUT_CLASSIFICATION	2.6166346094677025E-6	IMPLEMENTATION
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999930791964158	WITHOUT_CLASSIFICATION	6.920803584220474E-6	IMPLEMENTATION
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999975546438966	WITHOUT_CLASSIFICATION	2.44535610332489E-6	IMPLEMENTATION
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999997028960901	WITHOUT_CLASSIFICATION	2.971039098782321E-7	IMPLEMENTATION
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999999935582249	WITHOUT_CLASSIFICATION	6.441775179328561E-9	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999562422289396	WITHOUT_CLASSIFICATION	4.3757771060315174E-5	IMPLEMENTATION
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999562422289396	WITHOUT_CLASSIFICATION	4.3757771060315174E-5	IMPLEMENTATION
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999730466576101	WITHOUT_CLASSIFICATION	2.695334238986698E-5	IMPLEMENTATION
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996928093603316	WITHOUT_CLASSIFICATION	3.0719063966843204E-4	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999590575394	WITHOUT_CLASSIFICATION	4.094246074425002E-8	IMPLEMENTATION
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999590575394	WITHOUT_CLASSIFICATION	4.094246074425002E-8	IMPLEMENTATION
use default behavior	WITHOUT_CLASSIFICATION	0.9999999335971503	WITHOUT_CLASSIFICATION	6.640284964659411E-8	IMPLEMENTATION
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999978199135605	WITHOUT_CLASSIFICATION	2.1800864394487425E-6	IMPLEMENTATION
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9988574374338199	WITHOUT_CLASSIFICATION	0.0011425625661801047	IMPLEMENTATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999950828674	WITHOUT_CLASSIFICATION	4.917132481532673E-9	IMPLEMENTATION
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999979565050433	WITHOUT_CLASSIFICATION	2.043494956694639E-6	IMPLEMENTATION
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999677536716555	WITHOUT_CLASSIFICATION	3.224632834460029E-5	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999984932543	WITHOUT_CLASSIFICATION	1.5067457749047806E-9	IMPLEMENTATION
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999984932543	WITHOUT_CLASSIFICATION	1.5067457749047806E-9	IMPLEMENTATION
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999602665009547	WITHOUT_CLASSIFICATION	3.973349904531251E-5	IMPLEMENTATION
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999985013023929	WITHOUT_CLASSIFICATION	1.4986976071565309E-6	IMPLEMENTATION
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999999231349653	WITHOUT_CLASSIFICATION	7.686503467985739E-8	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999996703100984	WITHOUT_CLASSIFICATION	3.296899016699265E-7	IMPLEMENTATION
returnign null!	WITHOUT_CLASSIFICATION	0.9999996703100984	WITHOUT_CLASSIFICATION	3.296899016699265E-7	IMPLEMENTATION
includes last '.'	WITHOUT_CLASSIFICATION	0.9999999838308538	WITHOUT_CLASSIFICATION	1.616914618034584E-8	IMPLEMENTATION
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999991324768245	WITHOUT_CLASSIFICATION	8.675231755023952E-6	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999988423737506	WITHOUT_CLASSIFICATION	1.15762624945921E-6	IMPLEMENTATION
first time we find match!	WITHOUT_CLASSIFICATION	0.9999998033615197	WITHOUT_CLASSIFICATION	1.9663848027534853E-7	IMPLEMENTATION
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999339785118	WITHOUT_CLASSIFICATION	6.602148819108787E-8	IMPLEMENTATION
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999209970649	WITHOUT_CLASSIFICATION	7.900293502914381E-8	IMPLEMENTATION
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999996980916039	WITHOUT_CLASSIFICATION	3.0190839610395396E-7	IMPLEMENTATION
the current iterator	WITHOUT_CLASSIFICATION	0.9999979425733971	WITHOUT_CLASSIFICATION	2.057426602847608E-6	IMPLEMENTATION
the last used iterator	WITHOUT_CLASSIFICATION	0.9999999757918194	WITHOUT_CLASSIFICATION	2.420818055919149E-8	IMPLEMENTATION
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999997246631174	WITHOUT_CLASSIFICATION	2.753368827039191E-7	IMPLEMENTATION
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999999987538537	WITHOUT_CLASSIFICATION	1.2461462761304061E-9	IMPLEMENTATION
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9993978683025211	WITHOUT_CLASSIFICATION	6.021316974789746E-4	IMPLEMENTATION
doable if needed	WITHOUT_CLASSIFICATION	0.999434353540029	WITHOUT_CLASSIFICATION	5.65646459971074E-4	IMPLEMENTATION
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999395657380413	WITHOUT_CLASSIFICATION	6.043426195860734E-5	IMPLEMENTATION
peek ahead	WITHOUT_CLASSIFICATION	0.9999788071119128	WITHOUT_CLASSIFICATION	2.1192888087260174E-5	IMPLEMENTATION
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999202861081	WITHOUT_CLASSIFICATION	7.97138919267101E-8	IMPLEMENTATION
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998656591564866	WITHOUT_CLASSIFICATION	1.3434084351330236E-4	IMPLEMENTATION
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999963520983974	WITHOUT_CLASSIFICATION	3.647901602538332E-6	IMPLEMENTATION
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.999996303285442	WITHOUT_CLASSIFICATION	3.6967145579926213E-6	IMPLEMENTATION
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999990644618127	WITHOUT_CLASSIFICATION	9.355381872644897E-7	IMPLEMENTATION
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999991789527065	WITHOUT_CLASSIFICATION	8.21047293553661E-7	IMPLEMENTATION
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999755703601009	WITHOUT_CLASSIFICATION	2.4429639899138888E-5	IMPLEMENTATION
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9994126575318016	WITHOUT_CLASSIFICATION	5.873424681983854E-4	IMPLEMENTATION
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999996817026366	WITHOUT_CLASSIFICATION	3.1829736326915637E-7	IMPLEMENTATION
faster?	WITHOUT_CLASSIFICATION	0.9999974526684016	WITHOUT_CLASSIFICATION	2.5473315983712323E-6	IMPLEMENTATION
the name of a class	WITHOUT_CLASSIFICATION	0.9999999980849605	WITHOUT_CLASSIFICATION	1.915039477600516E-9	IMPLEMENTATION
Its the listener class name	WITHOUT_CLASSIFICATION	0.999999820227677	WITHOUT_CLASSIFICATION	1.7977232305913307E-7	IMPLEMENTATION
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.99997723787656	WITHOUT_CLASSIFICATION	2.2762123440049283E-5	IMPLEMENTATION
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999150651299	WITHOUT_CLASSIFICATION	8.493487009361564E-7	IMPLEMENTATION
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999997527763788	WITHOUT_CLASSIFICATION	2.472236211991345E-6	IMPLEMENTATION
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999903027981887	WITHOUT_CLASSIFICATION	9.697201811302995E-5	IMPLEMENTATION
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999262082345	WITHOUT_CLASSIFICATION	7.379176555661024E-8	IMPLEMENTATION
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999973128142127	WITHOUT_CLASSIFICATION	2.6871857873586194E-6	IMPLEMENTATION
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999979783040245	WITHOUT_CLASSIFICATION	2.0216959755352862E-6	IMPLEMENTATION
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999978121643696	WITHOUT_CLASSIFICATION	2.1878356303632606E-6	IMPLEMENTATION
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999954104732017	WITHOUT_CLASSIFICATION	4.589526798286118E-6	IMPLEMENTATION
readResolveObject	WITHOUT_CLASSIFICATION	0.9999977689652682	WITHOUT_CLASSIFICATION	2.2310347317742887E-6	IMPLEMENTATION
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999954965355	WITHOUT_CLASSIFICATION	4.5034644789298866E-9	IMPLEMENTATION
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999959935183111	WITHOUT_CLASSIFICATION	4.006481688823513E-6	IMPLEMENTATION
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999927854294	WITHOUT_CLASSIFICATION	7.214570660563033E-9	IMPLEMENTATION
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999569467544	WITHOUT_CLASSIFICATION	4.3053245673625375E-8	IMPLEMENTATION
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999997198061139	WITHOUT_CLASSIFICATION	2.8019388617052153E-7	IMPLEMENTATION
Write HTML header	WITHOUT_CLASSIFICATION	0.999997632604317	WITHOUT_CLASSIFICATION	2.3673956829215386E-6	IMPLEMENTATION
Handle actions	WITHOUT_CLASSIFICATION	0.9999978174509793	WITHOUT_CLASSIFICATION	2.1825490206325128E-6	IMPLEMENTATION
Print page	WITHOUT_CLASSIFICATION	0.9999956810188653	WITHOUT_CLASSIFICATION	4.318981134644242E-6	IMPLEMENTATION
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999993174535388	WITHOUT_CLASSIFICATION	6.825464612644997E-7	IMPLEMENTATION
End unit of work	WITHOUT_CLASSIFICATION	0.9999991044950413	WITHOUT_CLASSIFICATION	8.955049587448684E-7	IMPLEMENTATION
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999952394992454	WITHOUT_CLASSIFICATION	4.760500754681916E-6	IMPLEMENTATION
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999989593141982	WITHOUT_CLASSIFICATION	1.0406858017441478E-6	IMPLEMENTATION
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999999698484927	WITHOUT_CLASSIFICATION	3.0151507300694105E-7	IMPLEMENTATION
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999669863381611	WITHOUT_CLASSIFICATION	3.3013661838915294E-5	IMPLEMENTATION
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9975200765386685	WITHOUT_CLASSIFICATION	0.0024799234613314884	IMPLEMENTATION
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9942453799325097	WITHOUT_CLASSIFICATION	0.005754620067490278	IMPLEMENTATION
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999913066776009	WITHOUT_CLASSIFICATION	8.693322399095142E-6	IMPLEMENTATION
End of first unit of work	WITHOUT_CLASSIFICATION	0.999999123810771	WITHOUT_CLASSIFICATION	8.761892290032151E-7	IMPLEMENTATION
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.997816926178366	WITHOUT_CLASSIFICATION	0.0021830738216340718	IMPLEMENTATION
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999992301897377	WITHOUT_CLASSIFICATION	7.698102623674401E-7	IMPLEMENTATION
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999993755051009	WITHOUT_CLASSIFICATION	6.244948991303175E-7	IMPLEMENTATION
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999730720149616	WITHOUT_CLASSIFICATION	2.6927985038366848E-5	IMPLEMENTATION
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999999220811466	WITHOUT_CLASSIFICATION	7.791885341474557E-7	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999473784532471	WITHOUT_CLASSIFICATION	5.262154675277586E-5	IMPLEMENTATION
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999473784532471	WITHOUT_CLASSIFICATION	5.262154675277586E-5	IMPLEMENTATION
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999813409	WITHOUT_CLASSIFICATION	1.8659141082083237E-11	IMPLEMENTATION
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999726982770313	WITHOUT_CLASSIFICATION	2.7301722968719754E-5	IMPLEMENTATION
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999977327426	WITHOUT_CLASSIFICATION	2.267257412952784E-9	IMPLEMENTATION
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999467685574	WITHOUT_CLASSIFICATION	5.323144256566377E-8	IMPLEMENTATION
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999997894852221	WITHOUT_CLASSIFICATION	2.1051477781284213E-7	IMPLEMENTATION
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999898726874148	WITHOUT_CLASSIFICATION	1.0127312585229507E-5	IMPLEMENTATION
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999999996247444	WITHOUT_CLASSIFICATION	3.75255609693043E-9	IMPLEMENTATION
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999905036395962	WITHOUT_CLASSIFICATION	9.496360403811274E-6	IMPLEMENTATION
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999997757366125	WITHOUT_CLASSIFICATION	2.2426338758054678E-7	IMPLEMENTATION
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999999631746992	WITHOUT_CLASSIFICATION	3.682530082628788E-8	IMPLEMENTATION
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999999902009349	WITHOUT_CLASSIFICATION	9.799065100384173E-8	IMPLEMENTATION
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999981479388648	WITHOUT_CLASSIFICATION	1.852061135154618E-6	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998152499762	WITHOUT_CLASSIFICATION	1.8475002386589766E-7	IMPLEMENTATION
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999110093715455	WITHOUT_CLASSIFICATION	8.89906284545017E-5	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999987406821793	WITHOUT_CLASSIFICATION	1.2593178206362778E-6	IMPLEMENTATION
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999987406821793	WITHOUT_CLASSIFICATION	1.2593178206362778E-6	IMPLEMENTATION
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999998380461	WITHOUT_CLASSIFICATION	1.61953860623345E-10	IMPLEMENTATION
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.998896620013484	WITHOUT_CLASSIFICATION	0.001103379986515955	IMPLEMENTATION
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999523475844	WITHOUT_CLASSIFICATION	4.7652415439370514E-8	IMPLEMENTATION
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998662160187	WITHOUT_CLASSIFICATION	1.337839813552423E-7	IMPLEMENTATION
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999976680849431	WITHOUT_CLASSIFICATION	2.3319150569913424E-6	IMPLEMENTATION
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999968966288237	WITHOUT_CLASSIFICATION	3.103371176305915E-5	IMPLEMENTATION
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999989206352426	WITHOUT_CLASSIFICATION	1.0793647574015715E-6	IMPLEMENTATION
element index -> id	WITHOUT_CLASSIFICATION	0.9999840386961072	WITHOUT_CLASSIFICATION	1.5961303892763816E-5	IMPLEMENTATION
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9118864447420996	WITHOUT_CLASSIFICATION	0.08811355525790043	IMPLEMENTATION
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999997483599654	WITHOUT_CLASSIFICATION	2.516400345754561E-7	IMPLEMENTATION
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9992238089846318	WITHOUT_CLASSIFICATION	7.761910153681427E-4	IMPLEMENTATION
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999997409106924	WITHOUT_CLASSIFICATION	2.5908930754393925E-7	IMPLEMENTATION
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999837939914	WITHOUT_CLASSIFICATION	1.620600860145644E-7	IMPLEMENTATION
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999981092482	WITHOUT_CLASSIFICATION	1.8907517779074357E-9	IMPLEMENTATION
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999997806298424	WITHOUT_CLASSIFICATION	2.1937015767169215E-7	IMPLEMENTATION
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999998155159409	WITHOUT_CLASSIFICATION	1.8448405925134676E-7	IMPLEMENTATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999998352550756	WITHOUT_CLASSIFICATION	1.6474492445376238E-7	IMPLEMENTATION
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999432674079	WITHOUT_CLASSIFICATION	5.673259199992518E-8	IMPLEMENTATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999995850607524	WITHOUT_CLASSIFICATION	4.149392476287888E-7	IMPLEMENTATION
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999997614258	WITHOUT_CLASSIFICATION	2.385740826381909E-10	IMPLEMENTATION
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999999998191796	WITHOUT_CLASSIFICATION	1.8082047532194818E-10	IMPLEMENTATION
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999998584052	WITHOUT_CLASSIFICATION	1.415947870296997E-10	IMPLEMENTATION
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999999091366479	WITHOUT_CLASSIFICATION	9.08633521353849E-8	IMPLEMENTATION
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996500717584	WITHOUT_CLASSIFICATION	3.4992824151652094E-7	IMPLEMENTATION
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999343484867	WITHOUT_CLASSIFICATION	6.565151336217971E-8	IMPLEMENTATION
Named Queries:	WITHOUT_CLASSIFICATION	0.999998977738108	WITHOUT_CLASSIFICATION	1.0222618921054814E-6	IMPLEMENTATION
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999931077212068	WITHOUT_CLASSIFICATION	6.892278793204267E-6	IMPLEMENTATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999992573710835	WITHOUT_CLASSIFICATION	7.426289164959106E-6	IMPLEMENTATION
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999979393396172	WITHOUT_CLASSIFICATION	2.0606603826928735E-6	IMPLEMENTATION
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9994295735160704	WITHOUT_CLASSIFICATION	5.704264839295916E-4	IMPLEMENTATION
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999909185310624	WITHOUT_CLASSIFICATION	9.08146893763427E-6	IMPLEMENTATION
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999344336131	WITHOUT_CLASSIFICATION	6.556638686837602E-8	IMPLEMENTATION
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9999997028775821	WITHOUT_CLASSIFICATION	2.971224178589377E-7	IMPLEMENTATION
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999984535002041	WITHOUT_CLASSIFICATION	1.5464997958234883E-6	IMPLEMENTATION
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999999629188277	WITHOUT_CLASSIFICATION	3.708117229796813E-7	IMPLEMENTATION
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999399249338095	WITHOUT_CLASSIFICATION	6.0075066190569474E-5	IMPLEMENTATION
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9952346710009277	WITHOUT_CLASSIFICATION	0.004765328999072367	IMPLEMENTATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999996707458665	WITHOUT_CLASSIFICATION	3.292541334904635E-7	IMPLEMENTATION
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998276799322	WITHOUT_CLASSIFICATION	1.723200678546568E-7	IMPLEMENTATION
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999949125877	WITHOUT_CLASSIFICATION	5.087412295000389E-9	IMPLEMENTATION
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9994893387686155	WITHOUT_CLASSIFICATION	5.106612313844739E-4	IMPLEMENTATION
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999993558621412	WITHOUT_CLASSIFICATION	6.441378587185101E-7	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996391745595924	WITHOUT_CLASSIFICATION	3.6082544040748853E-4	IMPLEMENTATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996391745595924	WITHOUT_CLASSIFICATION	3.6082544040748853E-4	IMPLEMENTATION
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999992475802322	WITHOUT_CLASSIFICATION	7.524197677723155E-7	IMPLEMENTATION
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999857496886	WITHOUT_CLASSIFICATION	1.4250311474435717E-8	IMPLEMENTATION
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9996734490543793	WITHOUT_CLASSIFICATION	3.2655094562082464E-4	IMPLEMENTATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999952894501479	WITHOUT_CLASSIFICATION	4.7105498521046333E-5	IMPLEMENTATION
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999998584915623	WITHOUT_CLASSIFICATION	1.4150843781949288E-7	IMPLEMENTATION
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999999298549225	WITHOUT_CLASSIFICATION	7.014507743069254E-8	IMPLEMENTATION
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998189192594602	WITHOUT_CLASSIFICATION	1.810807405397439E-4	IMPLEMENTATION
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999999920894646	WITHOUT_CLASSIFICATION	7.910535407758617E-8	IMPLEMENTATION
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999993418171398	WITHOUT_CLASSIFICATION	6.58182860270122E-7	IMPLEMENTATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987452982587	WITHOUT_CLASSIFICATION	1.2547017412932274E-6	IMPLEMENTATION
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975499698577	WITHOUT_CLASSIFICATION	2.45003014221133E-6	IMPLEMENTATION
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999997318650193	WITHOUT_CLASSIFICATION	2.681349806356897E-7	IMPLEMENTATION
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999999669830829	WITHOUT_CLASSIFICATION	3.301691711142947E-7	IMPLEMENTATION
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.999998057438679	WITHOUT_CLASSIFICATION	1.942561321066324E-6	IMPLEMENTATION
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999908170647263	WITHOUT_CLASSIFICATION	9.182935273738972E-6	IMPLEMENTATION
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.999852651483626	WITHOUT_CLASSIFICATION	1.4734851637395344E-4	IMPLEMENTATION
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999913649225	WITHOUT_CLASSIFICATION	8.635077549945436E-9	IMPLEMENTATION
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999979800928	WITHOUT_CLASSIFICATION	2.019907196116966E-9	IMPLEMENTATION
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999947695538	WITHOUT_CLASSIFICATION	5.23044624484191E-9	IMPLEMENTATION
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9973047096969163	WITHOUT_CLASSIFICATION	0.0026952903030836427	IMPLEMENTATION
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999954325412779	WITHOUT_CLASSIFICATION	4.567458722129043E-6	IMPLEMENTATION
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999761064923	WITHOUT_CLASSIFICATION	2.389350776295474E-8	IMPLEMENTATION
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999940592629831	WITHOUT_CLASSIFICATION	5.940737016798792E-6	IMPLEMENTATION
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999957897492757	WITHOUT_CLASSIFICATION	4.210250724377661E-6	IMPLEMENTATION
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999999562060374	WITHOUT_CLASSIFICATION	4.37939625881176E-8	IMPLEMENTATION
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997607493529609	WITHOUT_CLASSIFICATION	2.392506470392047E-4	IMPLEMENTATION
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999227142816117	WITHOUT_CLASSIFICATION	7.728571838828659E-5	IMPLEMENTATION
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999733635517	WITHOUT_CLASSIFICATION	2.6636448316596357E-8	IMPLEMENTATION
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999939051282836	WITHOUT_CLASSIFICATION	6.094871716416145E-6	IMPLEMENTATION
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999922677893907	WITHOUT_CLASSIFICATION	7.732210609273805E-6	IMPLEMENTATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9997892704954173	WITHOUT_CLASSIFICATION	2.107295045827897E-4	IMPLEMENTATION
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999890809848672	WITHOUT_CLASSIFICATION	1.0919015132802092E-5	IMPLEMENTATION
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999877907776115	WITHOUT_CLASSIFICATION	1.22092223885059E-5	IMPLEMENTATION
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999999764268301	WITHOUT_CLASSIFICATION	2.357316982203423E-8	IMPLEMENTATION
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999886770684	WITHOUT_CLASSIFICATION	1.1322931599959057E-8	IMPLEMENTATION
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999995007347	WITHOUT_CLASSIFICATION	4.992652726480899E-10	IMPLEMENTATION
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999940346741379	WITHOUT_CLASSIFICATION	5.965325862008167E-6	IMPLEMENTATION
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999937751654	WITHOUT_CLASSIFICATION	6.2248346881257724E-9	IMPLEMENTATION
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999938512775972	WITHOUT_CLASSIFICATION	6.14872240281434E-6	IMPLEMENTATION
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999915420913	WITHOUT_CLASSIFICATION	8.457908712762395E-9	IMPLEMENTATION
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999977239149599	WITHOUT_CLASSIFICATION	2.2760850400902963E-6	IMPLEMENTATION
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999802265638	WITHOUT_CLASSIFICATION	1.9773436204918017E-8	IMPLEMENTATION
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999853808281028	WITHOUT_CLASSIFICATION	1.4619171897197013E-5	IMPLEMENTATION
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999999798424485	WITHOUT_CLASSIFICATION	2.0157551519742937E-8	IMPLEMENTATION
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999667485443	WITHOUT_CLASSIFICATION	3.325145560390925E-8	IMPLEMENTATION
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999987972723	WITHOUT_CLASSIFICATION	1.2027277675117762E-9	IMPLEMENTATION
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999980166483518	WITHOUT_CLASSIFICATION	1.9833516482418155E-6	IMPLEMENTATION
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9999977948366099	WITHOUT_CLASSIFICATION	2.205163390109341E-6	IMPLEMENTATION
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999996139131839	WITHOUT_CLASSIFICATION	3.860868160642198E-7	IMPLEMENTATION
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998152499762	WITHOUT_CLASSIFICATION	1.8475002386589766E-7	IMPLEMENTATION
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999985998383	WITHOUT_CLASSIFICATION	1.4001617110557404E-9	IMPLEMENTATION
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999933582956	WITHOUT_CLASSIFICATION	6.64170438588812E-9	IMPLEMENTATION
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999941864460787	WITHOUT_CLASSIFICATION	5.813553921324119E-6	IMPLEMENTATION
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999892473157134	WITHOUT_CLASSIFICATION	1.0752684286653003E-5	IMPLEMENTATION
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999987342946	WITHOUT_CLASSIFICATION	1.2657053935334359E-9	IMPLEMENTATION
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997936146094514	WITHOUT_CLASSIFICATION	2.063853905486638E-4	IMPLEMENTATION
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9477970724191873	WITHOUT_CLASSIFICATION	0.052202927580812665	IMPLEMENTATION
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999916337035802	WITHOUT_CLASSIFICATION	8.366296419817134E-6	IMPLEMENTATION
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999983358377	WITHOUT_CLASSIFICATION	1.664162256360038E-9	IMPLEMENTATION
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9983858971996286	WITHOUT_CLASSIFICATION	0.0016141028003713984	IMPLEMENTATION
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999972435937329	WITHOUT_CLASSIFICATION	2.756406267172086E-6	IMPLEMENTATION
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999967317545298	WITHOUT_CLASSIFICATION	3.268245470191898E-5	IMPLEMENTATION
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999999818537382	WITHOUT_CLASSIFICATION	1.814626174248688E-8	IMPLEMENTATION
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999136254646	WITHOUT_CLASSIFICATION	8.637453543010297E-8	IMPLEMENTATION
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999990861420082	WITHOUT_CLASSIFICATION	9.138579919092075E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916824425912	WITHOUT_CLASSIFICATION	8.317557408806109E-6	IMPLEMENTATION
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9996806858370302	WITHOUT_CLASSIFICATION	3.193141629698228E-4	IMPLEMENTATION
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999195644674	WITHOUT_CLASSIFICATION	8.043553252276261E-8	IMPLEMENTATION
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999706690366956	WITHOUT_CLASSIFICATION	2.933096330446101E-5	IMPLEMENTATION
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999999929570208	WITHOUT_CLASSIFICATION	7.04297920868373E-8	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916824425912	WITHOUT_CLASSIFICATION	8.317557408806109E-6	IMPLEMENTATION
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999958901023728	WITHOUT_CLASSIFICATION	4.109897627175345E-6	IMPLEMENTATION
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999740183318	WITHOUT_CLASSIFICATION	2.5981668159122664E-8	IMPLEMENTATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999916930317079	WITHOUT_CLASSIFICATION	8.306968292115344E-6	IMPLEMENTATION
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999995754431464	WITHOUT_CLASSIFICATION	4.245568536303225E-7	IMPLEMENTATION
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999999608507973	WITHOUT_CLASSIFICATION	3.914920269598349E-7	IMPLEMENTATION
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999988975729	WITHOUT_CLASSIFICATION	1.1024271917144544E-9	IMPLEMENTATION
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999996303494	WITHOUT_CLASSIFICATION	3.696506416562168E-10	IMPLEMENTATION
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998467980680189	WITHOUT_CLASSIFICATION	1.532019319811256E-4	IMPLEMENTATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999857293072	WITHOUT_CLASSIFICATION	1.4270692760765347E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999879892740737	WITHOUT_CLASSIFICATION	1.2010725926296619E-4	IMPLEMENTATION
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9994677761158435	WITHOUT_CLASSIFICATION	5.322238841564846E-4	IMPLEMENTATION
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999957593936623	WITHOUT_CLASSIFICATION	4.240606337722074E-6	IMPLEMENTATION
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999955359916387	WITHOUT_CLASSIFICATION	4.464008361308647E-5	IMPLEMENTATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9780430284194287	WITHOUT_CLASSIFICATION	0.02195697158057131	IMPLEMENTATION
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999852305857603	WITHOUT_CLASSIFICATION	1.4769414239629156E-5	IMPLEMENTATION
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999999905375415	WITHOUT_CLASSIFICATION	9.462458490760281E-9	IMPLEMENTATION
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999998655898609	WITHOUT_CLASSIFICATION	1.3441013907867247E-7	IMPLEMENTATION
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999989501841575	WITHOUT_CLASSIFICATION	1.0498158423926292E-6	IMPLEMENTATION
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999392315455	WITHOUT_CLASSIFICATION	6.076845444743433E-8	IMPLEMENTATION
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9393708979324753	WITHOUT_CLASSIFICATION	0.06062910206752471	IMPLEMENTATION
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9999884017115958	WITHOUT_CLASSIFICATION	1.1598288404315666E-5	IMPLEMENTATION
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9907675923611241	WITHOUT_CLASSIFICATION	0.00923240763887599	IMPLEMENTATION
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999781672238162	WITHOUT_CLASSIFICATION	2.1832776183867796E-5	IMPLEMENTATION
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999985064930889	WITHOUT_CLASSIFICATION	1.4935069110733113E-6	IMPLEMENTATION
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999985221792	WITHOUT_CLASSIFICATION	1.4778208192377724E-9	IMPLEMENTATION
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999965656649	WITHOUT_CLASSIFICATION	3.43433522222702E-9	IMPLEMENTATION
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999870693821	WITHOUT_CLASSIFICATION	1.2930617965311816E-8	IMPLEMENTATION
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999060515258829	WITHOUT_CLASSIFICATION	9.394847411716893E-5	IMPLEMENTATION
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992742445077	WITHOUT_CLASSIFICATION	7.257554921500887E-7	IMPLEMENTATION
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9783456241458341	WITHOUT_CLASSIFICATION	0.021654375854165842	IMPLEMENTATION
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.7517541971154136	IMPLEMENTATION	0.2482458028845865	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999998466771275	WITHOUT_CLASSIFICATION	1.5332287260772667E-7	IMPLEMENTATION
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998310340910498	WITHOUT_CLASSIFICATION	1.6896590895018317E-4	IMPLEMENTATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999929708489289	WITHOUT_CLASSIFICATION	7.029151071074088E-6	IMPLEMENTATION
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999996393116085	WITHOUT_CLASSIFICATION	3.606883915159014E-7	IMPLEMENTATION
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999995783532485	WITHOUT_CLASSIFICATION	4.2164675149565836E-7	IMPLEMENTATION
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999990822104	WITHOUT_CLASSIFICATION	9.177895867217338E-10	IMPLEMENTATION
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999999999974909	WITHOUT_CLASSIFICATION	2.509105223301071E-11	IMPLEMENTATION
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999992985850991	WITHOUT_CLASSIFICATION	7.014149009611519E-7	IMPLEMENTATION
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999966832506	WITHOUT_CLASSIFICATION	3.31674932832882E-9	IMPLEMENTATION
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999011105714	WITHOUT_CLASSIFICATION	9.888942861708818E-8	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9987922416607797	WITHOUT_CLASSIFICATION	0.001207758339220259	IMPLEMENTATION
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9987922416607797	WITHOUT_CLASSIFICATION	0.001207758339220259	IMPLEMENTATION
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999999356565856	WITHOUT_CLASSIFICATION	6.434341439094984E-7	IMPLEMENTATION
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999336424168	WITHOUT_CLASSIFICATION	6.635758318763164E-7	IMPLEMENTATION
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999997391630603	WITHOUT_CLASSIFICATION	2.6083693972204007E-7	IMPLEMENTATION
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999999982924545	WITHOUT_CLASSIFICATION	1.7075455582047877E-9	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999804451168931	WITHOUT_CLASSIFICATION	1.955488310696282E-5	IMPLEMENTATION
ignore	WITHOUT_CLASSIFICATION	0.9999804451168931	WITHOUT_CLASSIFICATION	1.955488310696282E-5	IMPLEMENTATION
}	WITHOUT_CLASSIFICATION	0.9998952073484767	WITHOUT_CLASSIFICATION	1.0479265152321993E-4	IMPLEMENTATION
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999999908227661	WITHOUT_CLASSIFICATION	9.177233803219314E-9	IMPLEMENTATION
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999999999974552	WITHOUT_CLASSIFICATION	2.5447941422791305E-11	IMPLEMENTATION
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999995466749	WITHOUT_CLASSIFICATION	4.533251026005821E-9	IMPLEMENTATION
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999998900130306	WITHOUT_CLASSIFICATION	1.0998696940531198E-6	IMPLEMENTATION
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.999998018573405	WITHOUT_CLASSIFICATION	1.9814265950721416E-6	IMPLEMENTATION
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999907265519417	WITHOUT_CLASSIFICATION	9.273448058252924E-6	IMPLEMENTATION
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999984048976984	WITHOUT_CLASSIFICATION	1.5951023015528687E-6	IMPLEMENTATION
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999995999617268	WITHOUT_CLASSIFICATION	4.0003827319610775E-6	IMPLEMENTATION
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.999998690993946	WITHOUT_CLASSIFICATION	1.309006054065629E-6	IMPLEMENTATION
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999981245264777	WITHOUT_CLASSIFICATION	1.8754735222239462E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984479272933	WITHOUT_CLASSIFICATION	1.5520727067363529E-6	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984479272933	WITHOUT_CLASSIFICATION	1.5520727067363529E-6	IMPLEMENTATION
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999999680763	WITHOUT_CLASSIFICATION	3.192364730914179E-11	IMPLEMENTATION
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999690833332917	WITHOUT_CLASSIFICATION	3.0916666708314946E-5	IMPLEMENTATION
Custom sql	WITHOUT_CLASSIFICATION	0.9999996134115376	WITHOUT_CLASSIFICATION	3.865884623794527E-7	IMPLEMENTATION
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.999999845386187	WITHOUT_CLASSIFICATION	1.5461381300154795E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999981284578472	WITHOUT_CLASSIFICATION	1.8715421528508357E-6	IMPLEMENTATION
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998874427761	WITHOUT_CLASSIFICATION	1.1255722390189864E-7	IMPLEMENTATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990557178238557	WITHOUT_CLASSIFICATION	9.442821761442654E-4	IMPLEMENTATION
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999931689229598	WITHOUT_CLASSIFICATION	6.831077040286752E-6	IMPLEMENTATION
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999999137470524	WITHOUT_CLASSIFICATION	8.625294761640761E-8	IMPLEMENTATION
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999998476206228	WITHOUT_CLASSIFICATION	1.5237937728500375E-7	IMPLEMENTATION
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999079647683	WITHOUT_CLASSIFICATION	9.203523167594528E-8	IMPLEMENTATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.999879892740737	WITHOUT_CLASSIFICATION	1.2010725926296619E-4	IMPLEMENTATION
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999999555135506	WITHOUT_CLASSIFICATION	4.4486449312246917E-8	IMPLEMENTATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999940463352036	WITHOUT_CLASSIFICATION	5.953664796376941E-6	IMPLEMENTATION
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999719309742439	WITHOUT_CLASSIFICATION	2.8069025756109622E-5	IMPLEMENTATION
use the id column alias	WITHOUT_CLASSIFICATION	0.9999945731171332	WITHOUT_CLASSIFICATION	5.42688286668087E-6	IMPLEMENTATION
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999957278980293	WITHOUT_CLASSIFICATION	4.272101970784027E-6	IMPLEMENTATION
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999920207554454	WITHOUT_CLASSIFICATION	7.979244554767717E-6	IMPLEMENTATION
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999999666846562	WITHOUT_CLASSIFICATION	3.33153439075821E-8	IMPLEMENTATION
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999914286665553	WITHOUT_CLASSIFICATION	8.571333444591425E-6	IMPLEMENTATION
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999012206233	WITHOUT_CLASSIFICATION	9.877937663612525E-8	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992362696942049	WITHOUT_CLASSIFICATION	7.637303057951251E-4	IMPLEMENTATION
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9992362696942049	WITHOUT_CLASSIFICATION	7.637303057951251E-4	IMPLEMENTATION
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999974322014148	WITHOUT_CLASSIFICATION	2.5677985852512868E-6	IMPLEMENTATION
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999535827025388	WITHOUT_CLASSIFICATION	4.641729746120283E-5	IMPLEMENTATION
package	WITHOUT_CLASSIFICATION	0.9999912187596777	WITHOUT_CLASSIFICATION	8.781240322437099E-6	IMPLEMENTATION
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999898152715139	WITHOUT_CLASSIFICATION	1.0184728486115882E-5	IMPLEMENTATION
ignore it	WITHOUT_CLASSIFICATION	0.9999919308229513	WITHOUT_CLASSIFICATION	8.069177048671426E-6	IMPLEMENTATION
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999872969427871	WITHOUT_CLASSIFICATION	1.2703057212845616E-5	IMPLEMENTATION
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999882052374723	WITHOUT_CLASSIFICATION	1.179476252768477E-5	IMPLEMENTATION
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999998977814	WITHOUT_CLASSIFICATION	1.0221850198337835E-10	IMPLEMENTATION
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999976823588473	WITHOUT_CLASSIFICATION	2.3176411526252508E-6	IMPLEMENTATION
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9988357337901208	WITHOUT_CLASSIFICATION	0.0011642662098791969	IMPLEMENTATION
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858404997384	WITHOUT_CLASSIFICATION	1.4159500261670403E-5	IMPLEMENTATION
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9990443358643164	WITHOUT_CLASSIFICATION	9.556641356835927E-4	IMPLEMENTATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999324512211538	WITHOUT_CLASSIFICATION	6.754877884616929E-5	IMPLEMENTATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999984188415	WITHOUT_CLASSIFICATION	1.5811585025643359E-9	IMPLEMENTATION
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999994415142	WITHOUT_CLASSIFICATION	5.584858682686603E-10	IMPLEMENTATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999985165602783	WITHOUT_CLASSIFICATION	1.4834397216793954E-6	IMPLEMENTATION
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999998449575956	WITHOUT_CLASSIFICATION	1.5504240440841343E-6	IMPLEMENTATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999954501483407	WITHOUT_CLASSIFICATION	4.5498516592759705E-6	IMPLEMENTATION
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998939861929873	WITHOUT_CLASSIFICATION	1.0601380701258002E-4	IMPLEMENTATION
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999999999995667	WITHOUT_CLASSIFICATION	4.3330153080055995E-12	IMPLEMENTATION
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999563459	WITHOUT_CLASSIFICATION	4.3654063756188914E-11	IMPLEMENTATION
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.999999996585493	WITHOUT_CLASSIFICATION	3.4145071031195226E-9	IMPLEMENTATION
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999988423737506	WITHOUT_CLASSIFICATION	1.15762624945921E-6	IMPLEMENTATION
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999998885	WITHOUT_CLASSIFICATION	1.1134704886525429E-13	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990446205419	WITHOUT_CLASSIFICATION	9.55379458039187E-7	IMPLEMENTATION
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990446205419	WITHOUT_CLASSIFICATION	9.55379458039187E-7	IMPLEMENTATION
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9988218580544296	WITHOUT_CLASSIFICATION	0.0011781419455703464	IMPLEMENTATION
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9970717569021125	WITHOUT_CLASSIFICATION	0.0029282430978876304	IMPLEMENTATION
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999968353046168	WITHOUT_CLASSIFICATION	3.1646953831553016E-6	IMPLEMENTATION
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999987245342564	WITHOUT_CLASSIFICATION	1.2754657435613997E-6	IMPLEMENTATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999996795631863	WITHOUT_CLASSIFICATION	3.2043681377553983E-7	IMPLEMENTATION
