// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9993211058337407	WITHOUT_CLASSIFICATION	6.788941662591977E-4	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9993211058337407	WITHOUT_CLASSIFICATION	6.788941662591977E-4	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9997577499651215	WITHOUT_CLASSIFICATION	2.4225003487857562E-4	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9775423048021048	WITHOUT_CLASSIFICATION	0.022457695197895276	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9852449415241354	WITHOUT_CLASSIFICATION	0.014755058475864637	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.9606818776982113	IMPLEMENTATION	0.039318122301788716	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9941809865570463	WITHOUT_CLASSIFICATION	0.005819013442953713	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.9342752950674246	WITHOUT_CLASSIFICATION	0.0657247049325754	IMPLEMENTATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9940757078028197	WITHOUT_CLASSIFICATION	0.005924292197180334	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9356839349800208	WITHOUT_CLASSIFICATION	0.06431606501997916	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9972531015705123	WITHOUT_CLASSIFICATION	0.002746898429487759	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.6197089645749746	IMPLEMENTATION	0.38029103542502546	WITHOUT_CLASSIFICATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9755085223215146	WITHOUT_CLASSIFICATION	0.02449147767848532	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.9755085223215146	WITHOUT_CLASSIFICATION	0.02449147767848532	IMPLEMENTATION
/**	IMPLEMENTATION	0.7292834616469833	IMPLEMENTATION	0.27071653835301673	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.7890905075524608	IMPLEMENTATION	0.21090949244753912	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.995879577517112	IMPLEMENTATION	0.0041204224828880415	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.9972171839931205	WITHOUT_CLASSIFICATION	0.00278281600687952	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999999996300484	WITHOUT_CLASSIFICATION	3.699516208590556E-10	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.8728544612335312	WITHOUT_CLASSIFICATION	0.12714553876646875	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.9117822154680462	WITHOUT_CLASSIFICATION	0.08821778453195393	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9999864495908741	WITHOUT_CLASSIFICATION	1.3550409125854737E-5	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.8535170995157687	WITHOUT_CLASSIFICATION	0.14648290048423124	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8513793077563894	IMPLEMENTATION	0.1486206922436106	WITHOUT_CLASSIFICATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.8513793077563894	IMPLEMENTATION	0.1486206922436106	WITHOUT_CLASSIFICATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.9992010738485654	IMPLEMENTATION	7.989261514345827E-4	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9001276379657626	WITHOUT_CLASSIFICATION	0.09987236203423742	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.9985944936712031	IMPLEMENTATION	0.00140550632879697	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.7786852424647303	IMPLEMENTATION	0.22131475753526964	WITHOUT_CLASSIFICATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.7406080513528864	IMPLEMENTATION	0.25939194864711357	WITHOUT_CLASSIFICATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.8887067114163001	WITHOUT_CLASSIFICATION	0.1112932885836999	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.7401382830449341	WITHOUT_CLASSIFICATION	0.2598617169550659	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9998838382941192	WITHOUT_CLASSIFICATION	1.1616170588075111E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.957427651668592	WITHOUT_CLASSIFICATION	0.04257234833140794	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.8124093606127194	IMPLEMENTATION	0.1875906393872806	WITHOUT_CLASSIFICATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9991150181523603	WITHOUT_CLASSIFICATION	8.849818476397731E-4	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9179538754956321	IMPLEMENTATION	0.08204612450436788	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9220740055467007	WITHOUT_CLASSIFICATION	0.0779259944532993	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9738541280142361	WITHOUT_CLASSIFICATION	0.026145871985764013	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9993484051410183	IMPLEMENTATION	6.515948589816485E-4	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9993484051410183	IMPLEMENTATION	6.515948589816485E-4	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.7916881199519206	IMPLEMENTATION	0.20831188004807946	WITHOUT_CLASSIFICATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9995692704688007	WITHOUT_CLASSIFICATION	4.307295311992778E-4	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9370786824170945	WITHOUT_CLASSIFICATION	0.06292131758290555	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9995728315368617	IMPLEMENTATION	4.271684631383484E-4	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9424126018648478	WITHOUT_CLASSIFICATION	0.05758739813515227	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.999446511472937	WITHOUT_CLASSIFICATION	5.534885270631044E-4	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9316345486861226	WITHOUT_CLASSIFICATION	0.06836545131387742	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9999957675022737	WITHOUT_CLASSIFICATION	4.23249772619734E-6	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.5256651949467283	IMPLEMENTATION	0.4743348050532718	WITHOUT_CLASSIFICATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.9981466163144571	WITHOUT_CLASSIFICATION	0.0018533836855428327	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.9834786276927384	IMPLEMENTATION	0.016521372307261542	WITHOUT_CLASSIFICATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.7218792634733955	WITHOUT_CLASSIFICATION	0.2781207365266044	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9904970194579509	WITHOUT_CLASSIFICATION	0.009502980542049023	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.8439756949413358	WITHOUT_CLASSIFICATION	0.15602430505866416	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9776206988650062	IMPLEMENTATION	0.02237930113499375	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8439756949413358	WITHOUT_CLASSIFICATION	0.15602430505866416	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9999961746930714	IMPLEMENTATION	3.825306928505401E-6	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.9973146464683142	IMPLEMENTATION	0.0026853535316858066	WITHOUT_CLASSIFICATION
//TODO: proxies!	IMPLEMENTATION	0.8439756949413358	WITHOUT_CLASSIFICATION	0.15602430505866416	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999891451977	WITHOUT_CLASSIFICATION	1.0854802420517722E-8	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999999926182485	WITHOUT_CLASSIFICATION	7.38175143120885E-9	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9998284598959574	IMPLEMENTATION	1.715401040427016E-4	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9999956874094632	WITHOUT_CLASSIFICATION	4.312590536835589E-6	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998923839003621	WITHOUT_CLASSIFICATION	1.0761609963785144E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998146558596	WITHOUT_CLASSIFICATION	1.8534414027662902E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998146558596	WITHOUT_CLASSIFICATION	1.8534414027662902E-7	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999989982223236	WITHOUT_CLASSIFICATION	1.0017776763594145E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998600973061	WITHOUT_CLASSIFICATION	1.399026938858437E-7	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.99999978609178	WITHOUT_CLASSIFICATION	2.1390822005099688E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998821735888	WITHOUT_CLASSIFICATION	1.1782641113397148E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998821735888	WITHOUT_CLASSIFICATION	1.1782641113397148E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999767909911	WITHOUT_CLASSIFICATION	2.3209008957943017E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997634284669	WITHOUT_CLASSIFICATION	2.3657153300120277E-7	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999999576926463	WITHOUT_CLASSIFICATION	4.230735369382715E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999995921603468	WITHOUT_CLASSIFICATION	4.078396532136967E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999853917132	WITHOUT_CLASSIFICATION	1.4608286757687193E-8	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999853917132	WITHOUT_CLASSIFICATION	1.4608286757687193E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998694399194	WITHOUT_CLASSIFICATION	1.3056008067897737E-7	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9990921808765906	WITHOUT_CLASSIFICATION	9.078191234095032E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.999998526877338	WITHOUT_CLASSIFICATION	1.4731226618683026E-6	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999998209373419	WITHOUT_CLASSIFICATION	1.7906265803940288E-7	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998253248	WITHOUT_CLASSIFICATION	1.7467520974501005E-10	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983435739	WITHOUT_CLASSIFICATION	1.6564261195561129E-9	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.9999976705952411	WITHOUT_CLASSIFICATION	2.329404758927371E-6	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999999734752353	WITHOUT_CLASSIFICATION	2.6524764699264787E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999976250571333	WITHOUT_CLASSIFICATION	2.374942866709162E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981255403895656	WITHOUT_CLASSIFICATION	0.0018744596104344471	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999909501884895	WITHOUT_CLASSIFICATION	9.049811510532174E-6	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999985595240031	WITHOUT_CLASSIFICATION	1.4404759969063854E-6	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999828139	WITHOUT_CLASSIFICATION	1.7186174262715696E-11	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985728510765	WITHOUT_CLASSIFICATION	1.4271489235711107E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985728510765	WITHOUT_CLASSIFICATION	1.4271489235711107E-6	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999999655792564	WITHOUT_CLASSIFICATION	3.442074354282606E-8	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999995883128207	WITHOUT_CLASSIFICATION	4.116871793083288E-7	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999999791123623	WITHOUT_CLASSIFICATION	2.0887637691445715E-7	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999966573558656	WITHOUT_CLASSIFICATION	3.342644134313486E-6	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999381470807437	WITHOUT_CLASSIFICATION	6.185291925629504E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7292834616469833	IMPLEMENTATION	0.27071653835301673	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7292834616469833	IMPLEMENTATION	0.27071653835301673	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999996843337069	WITHOUT_CLASSIFICATION	3.1566629306811724E-7	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999984703484	WITHOUT_CLASSIFICATION	1.5296515714635252E-9	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999985949026	WITHOUT_CLASSIFICATION	1.4050973635922697E-9	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999832601566491	WITHOUT_CLASSIFICATION	1.6739843350960366E-5	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999996280963216	WITHOUT_CLASSIFICATION	3.7190367841696154E-7	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986948797491	WITHOUT_CLASSIFICATION	1.305120250904666E-6	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997046172555	WITHOUT_CLASSIFICATION	2.953827444905333E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999263557858	WITHOUT_CLASSIFICATION	7.364421418249952E-8	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999843624837699	WITHOUT_CLASSIFICATION	1.5637516230110267E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999990126731002	WITHOUT_CLASSIFICATION	9.873268997351104E-7	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999993416854625	WITHOUT_CLASSIFICATION	6.583145375065027E-6	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.9999843624837699	WITHOUT_CLASSIFICATION	1.5637516230110267E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.999993416854625	WITHOUT_CLASSIFICATION	6.583145375065027E-6	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999999145735894	WITHOUT_CLASSIFICATION	8.542641057335006E-8	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999865079678223	WITHOUT_CLASSIFICATION	1.3492032177588484E-5	IMPLEMENTATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999940066753964	WITHOUT_CLASSIFICATION	5.993324603556478E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997508715454434	WITHOUT_CLASSIFICATION	2.4912845455654837E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999984751899	WITHOUT_CLASSIFICATION	1.524810052146089E-9	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999996302597	WITHOUT_CLASSIFICATION	3.6974037013174873E-10	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9995689465117986	WITHOUT_CLASSIFICATION	4.310534882013933E-4	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9972059714952509	WITHOUT_CLASSIFICATION	0.0027940285047490616	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9992688760682861	WITHOUT_CLASSIFICATION	7.311239317139927E-4	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999711701233606	WITHOUT_CLASSIFICATION	2.8829876639407483E-5	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999735456674433	WITHOUT_CLASSIFICATION	2.6454332556582252E-5	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999993265341872	WITHOUT_CLASSIFICATION	6.734658128381885E-7	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999829366851	WITHOUT_CLASSIFICATION	1.7063314890360856E-8	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9996877105488168	WITHOUT_CLASSIFICATION	3.1228945118323367E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999996954133215	WITHOUT_CLASSIFICATION	3.045866784472664E-7	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999992604448	WITHOUT_CLASSIFICATION	7.395550993316369E-10	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999439706395	WITHOUT_CLASSIFICATION	5.602936057566018E-8	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999141654913305	WITHOUT_CLASSIFICATION	8.583450866948142E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999977874266831	WITHOUT_CLASSIFICATION	2.212573316793209E-6	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999070958714	WITHOUT_CLASSIFICATION	9.290412865267266E-8	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999911941669257	WITHOUT_CLASSIFICATION	8.805833074349308E-6	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999978994469	WITHOUT_CLASSIFICATION	2.1005530461075175E-9	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999972425822049	WITHOUT_CLASSIFICATION	2.7574177950172616E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998395671991	WITHOUT_CLASSIFICATION	1.6043280089686245E-7	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9950116924494032	WITHOUT_CLASSIFICATION	0.0049883075505967305	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999993604915993	WITHOUT_CLASSIFICATION	6.395084006871213E-7	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999304561059	WITHOUT_CLASSIFICATION	6.954389411505877E-8	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.931960624421972	WITHOUT_CLASSIFICATION	0.06803937557802799	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999862965123	WITHOUT_CLASSIFICATION	1.370348777349588E-8	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999716853525	WITHOUT_CLASSIFICATION	2.8314647534068867E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999996952785623	WITHOUT_CLASSIFICATION	3.047214377973274E-7	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999998342161729	WITHOUT_CLASSIFICATION	1.6578382712374593E-7	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999999775450534	WITHOUT_CLASSIFICATION	2.2454946558296973E-8	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999973125584	WITHOUT_CLASSIFICATION	2.687441538726931E-9	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999213392395	WITHOUT_CLASSIFICATION	7.866076043819382E-8	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999362283	WITHOUT_CLASSIFICATION	6.377166585327307E-11	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999973125584	WITHOUT_CLASSIFICATION	2.687441538726931E-9	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997796164269	WITHOUT_CLASSIFICATION	2.2038357301767835E-7	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999996705197546	WITHOUT_CLASSIFICATION	3.29480245482199E-7	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999994078705721	WITHOUT_CLASSIFICATION	5.921294279985089E-7	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999985925184299	WITHOUT_CLASSIFICATION	1.4074815700573265E-6	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.999998609035321	WITHOUT_CLASSIFICATION	1.3909646789564104E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999602070418	WITHOUT_CLASSIFICATION	3.979295819190441E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999602070418	WITHOUT_CLASSIFICATION	3.979295819190441E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999964374535474	WITHOUT_CLASSIFICATION	3.5625464526287125E-6	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999999865086348	WITHOUT_CLASSIFICATION	1.3491365266107962E-8	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9997210549246001	WITHOUT_CLASSIFICATION	2.789450754000108E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999999280894	WITHOUT_CLASSIFICATION	7.19105668595027E-11	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999995516082891	WITHOUT_CLASSIFICATION	4.4839171086562084E-7	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999813069750876	WITHOUT_CLASSIFICATION	1.8693024912427043E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999996819540431	WITHOUT_CLASSIFICATION	3.180459569344876E-7	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9999849048141813	WITHOUT_CLASSIFICATION	1.5095185818620923E-5	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999988653212486	WITHOUT_CLASSIFICATION	1.1346787513393775E-6	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999984138682	WITHOUT_CLASSIFICATION	1.5861317863515633E-9	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997858172479	WITHOUT_CLASSIFICATION	2.1418275205268932E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997858172479	WITHOUT_CLASSIFICATION	2.1418275205268932E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999500775189186	WITHOUT_CLASSIFICATION	4.992248108137403E-5	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998809564733	WITHOUT_CLASSIFICATION	1.1904352659792662E-7	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999998066473876	WITHOUT_CLASSIFICATION	1.9335261235941442E-7	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999997858172479	WITHOUT_CLASSIFICATION	2.1418275205268932E-7	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999500775189186	WITHOUT_CLASSIFICATION	4.992248108137403E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999500775189186	WITHOUT_CLASSIFICATION	4.992248108137403E-5	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999468951423	WITHOUT_CLASSIFICATION	5.310485766862808E-8	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999865342727611	WITHOUT_CLASSIFICATION	1.3465727238826143E-5	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999940324047	WITHOUT_CLASSIFICATION	5.967595226864892E-9	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999998232098088	WITHOUT_CLASSIFICATION	1.767901912717015E-7	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999935982620336	WITHOUT_CLASSIFICATION	6.4017379663299955E-6	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999935982620336	WITHOUT_CLASSIFICATION	6.4017379663299955E-6	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999993929421621	WITHOUT_CLASSIFICATION	6.070578378938552E-6	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999999939234309	WITHOUT_CLASSIFICATION	6.076569110579867E-9	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.999999964490556	WITHOUT_CLASSIFICATION	3.550944417483976E-8	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999958224075	WITHOUT_CLASSIFICATION	4.177592574608843E-9	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999999958224075	WITHOUT_CLASSIFICATION	4.177592574608843E-9	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999995331826167	WITHOUT_CLASSIFICATION	4.6681738333618577E-7	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999989202658932	WITHOUT_CLASSIFICATION	1.0797341067447616E-6	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999935375542766	WITHOUT_CLASSIFICATION	6.462445723454593E-6	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999990104322	WITHOUT_CLASSIFICATION	9.895677811437184E-10	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.999999999898082	WITHOUT_CLASSIFICATION	1.0191802294477494E-10	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999891958963	WITHOUT_CLASSIFICATION	1.0804103813042003E-8	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998926813748978	WITHOUT_CLASSIFICATION	1.0731862510217424E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999923155999508	WITHOUT_CLASSIFICATION	7.684400049254744E-6	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999838493877213	WITHOUT_CLASSIFICATION	1.6150612278728E-5	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999935375542766	WITHOUT_CLASSIFICATION	6.462445723454593E-6	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9999732838834964	WITHOUT_CLASSIFICATION	2.6716116503635298E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999932274673806	WITHOUT_CLASSIFICATION	6.772532619399688E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999932274673806	WITHOUT_CLASSIFICATION	6.772532619399688E-5	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999997772175412	WITHOUT_CLASSIFICATION	2.227824586908775E-7	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999907697650618	WITHOUT_CLASSIFICATION	9.230234938203777E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998378508344402	WITHOUT_CLASSIFICATION	1.6214916555982528E-4	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999998025986678	WITHOUT_CLASSIFICATION	1.9740133212675755E-7	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999156538495363	WITHOUT_CLASSIFICATION	8.434615046372756E-5	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9998131124900608	WITHOUT_CLASSIFICATION	1.8688750993925722E-4	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.999999647842724	WITHOUT_CLASSIFICATION	3.521572760389916E-7	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999982293182598	WITHOUT_CLASSIFICATION	1.7706817401889011E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999997867326	WITHOUT_CLASSIFICATION	2.1326750412998705E-10	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999997867326	WITHOUT_CLASSIFICATION	2.1326750412998705E-10	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999503116139	WITHOUT_CLASSIFICATION	4.968838600597812E-8	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998923839003621	WITHOUT_CLASSIFICATION	1.0761609963785144E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999999877933059	WITHOUT_CLASSIFICATION	1.2206694135394294E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9999999055125135	WITHOUT_CLASSIFICATION	9.44874865091549E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998146558596	WITHOUT_CLASSIFICATION	1.8534414027662902E-7	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999998338238351	WITHOUT_CLASSIFICATION	1.6617616506765028E-7	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999584200817	WITHOUT_CLASSIFICATION	4.15799181784926E-8	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999766679383	WITHOUT_CLASSIFICATION	2.3332061765489803E-8	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999996456946865	WITHOUT_CLASSIFICATION	3.543053134810046E-7	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999999648068192	WITHOUT_CLASSIFICATION	3.519318081108507E-7	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999994680719413	WITHOUT_CLASSIFICATION	5.319280586902026E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999999951467517	WITHOUT_CLASSIFICATION	4.853248294047385E-8	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999986605658735	WITHOUT_CLASSIFICATION	1.3394341265534263E-6	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998600973061	WITHOUT_CLASSIFICATION	1.399026938858437E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996436344764	WITHOUT_CLASSIFICATION	3.5636552369687E-7	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996436344764	WITHOUT_CLASSIFICATION	3.5636552369687E-7	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998816478981	WITHOUT_CLASSIFICATION	1.1835210197564297E-7	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999988845252833	WITHOUT_CLASSIFICATION	1.1154747167106853E-6	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999999950363688	WITHOUT_CLASSIFICATION	4.9636311448065735E-9	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999999546635487	WITHOUT_CLASSIFICATION	4.533645121429838E-8	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999994468547887	WITHOUT_CLASSIFICATION	5.531452113178155E-7	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999992024480275	WITHOUT_CLASSIFICATION	7.975519723560793E-7	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998821735888	WITHOUT_CLASSIFICATION	1.1782641113397148E-7	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998111471949	WITHOUT_CLASSIFICATION	1.8885280494608954E-7	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999996542761814	WITHOUT_CLASSIFICATION	3.4572381854926734E-7	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999985392379915	WITHOUT_CLASSIFICATION	1.4607620084675428E-6	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998926604523	WITHOUT_CLASSIFICATION	1.0733954767657287E-7	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9999977411081892	WITHOUT_CLASSIFICATION	2.258891810842603E-6	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999989662956681	WITHOUT_CLASSIFICATION	1.0337043319395756E-6	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996095226854	WITHOUT_CLASSIFICATION	3.9047731471642347E-7	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999997959440533	WITHOUT_CLASSIFICATION	2.0405594662418604E-7	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999823104947264	WITHOUT_CLASSIFICATION	1.7689505273506747E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999992891017553	WITHOUT_CLASSIFICATION	7.108982447494677E-7	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999985521820162	WITHOUT_CLASSIFICATION	1.4478179839202332E-6	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999999111475677	WITHOUT_CLASSIFICATION	8.885243230935762E-8	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999998607323441	WITHOUT_CLASSIFICATION	1.392676558783637E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998146558596	WITHOUT_CLASSIFICATION	1.8534414027662902E-7	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998146558596	WITHOUT_CLASSIFICATION	1.8534414027662902E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999999951467517	WITHOUT_CLASSIFICATION	4.853248294047385E-8	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996436344764	WITHOUT_CLASSIFICATION	3.5636552369687E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996095226854	WITHOUT_CLASSIFICATION	3.9047731471642347E-7	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999767909911	WITHOUT_CLASSIFICATION	2.3209008957943017E-8	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999999985114263	WITHOUT_CLASSIFICATION	1.4885735920828425E-9	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999999301541665	WITHOUT_CLASSIFICATION	6.984583349106962E-8	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999999707009978	WITHOUT_CLASSIFICATION	2.929900213733513E-8	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999993918432943	WITHOUT_CLASSIFICATION	6.081567055915813E-7	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999820935889	WITHOUT_CLASSIFICATION	1.790641118338845E-8	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999998481419554	WITHOUT_CLASSIFICATION	1.5185804449964868E-7	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999998761586564	WITHOUT_CLASSIFICATION	1.238413436672533E-7	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.999974720820103	WITHOUT_CLASSIFICATION	2.5279179896950777E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999994879438897	WITHOUT_CLASSIFICATION	5.120561103301946E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999991778768683	WITHOUT_CLASSIFICATION	8.221231315862151E-7	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999991778768683	WITHOUT_CLASSIFICATION	8.221231315862151E-7	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999998865892	WITHOUT_CLASSIFICATION	1.1341086514768714E-10	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999995972518168	WITHOUT_CLASSIFICATION	4.0274818324306807E-7	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.999988177163129	WITHOUT_CLASSIFICATION	1.1822836870964521E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999978840270516	WITHOUT_CLASSIFICATION	2.1159729483768906E-6	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999993544046	WITHOUT_CLASSIFICATION	6.455953457202866E-10	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999995136040801	WITHOUT_CLASSIFICATION	4.863959198624208E-7	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999999987444783	WITHOUT_CLASSIFICATION	1.2555217027212874E-8	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999997634284669	WITHOUT_CLASSIFICATION	2.3657153300120277E-7	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999990701080315	WITHOUT_CLASSIFICATION	9.298919684254741E-7	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999652707303	WITHOUT_CLASSIFICATION	3.472926975553975E-8	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999999652707303	WITHOUT_CLASSIFICATION	3.472926975553975E-8	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999641405112	WITHOUT_CLASSIFICATION	3.5859488789174966E-8	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999998089276719	WITHOUT_CLASSIFICATION	1.9107232795508836E-7	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999997630185524	WITHOUT_CLASSIFICATION	2.3698144756884552E-7	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998470753545	WITHOUT_CLASSIFICATION	1.529246455111625E-7	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999999573566756	WITHOUT_CLASSIFICATION	4.2643324397584266E-8	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999998146558596	WITHOUT_CLASSIFICATION	1.8534414027662902E-7	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.999999951467517	WITHOUT_CLASSIFICATION	4.853248294047385E-8	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999998600973061	WITHOUT_CLASSIFICATION	1.399026938858437E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996095226854	WITHOUT_CLASSIFICATION	3.9047731471642347E-7	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9999996095226854	WITHOUT_CLASSIFICATION	3.9047731471642347E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998167626937	WITHOUT_CLASSIFICATION	1.8323730637656418E-7	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998167626937	WITHOUT_CLASSIFICATION	1.8323730637656418E-7	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999994443140615	WITHOUT_CLASSIFICATION	5.556859385669502E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999996912307724	WITHOUT_CLASSIFICATION	3.0876922755024227E-7	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999996912307724	WITHOUT_CLASSIFICATION	3.0876922755024227E-7	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9999979095969785	WITHOUT_CLASSIFICATION	2.0904030214611834E-6	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.999999525483405	WITHOUT_CLASSIFICATION	4.745165949299528E-7	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999579409836	WITHOUT_CLASSIFICATION	4.205901626590695E-8	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999999831774471	WITHOUT_CLASSIFICATION	1.6822552883008068E-8	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999997954208925	WITHOUT_CLASSIFICATION	2.0457910747245874E-7	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999995921603468	WITHOUT_CLASSIFICATION	4.078396532136967E-6	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999995921603468	WITHOUT_CLASSIFICATION	4.078396532136967E-6	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9997468064377417	WITHOUT_CLASSIFICATION	2.531935622582446E-4	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999972364975783	WITHOUT_CLASSIFICATION	2.76350242163262E-6	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.9999999868152883	WITHOUT_CLASSIFICATION	1.318471178809754E-8	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999996113924194	WITHOUT_CLASSIFICATION	3.886075805057275E-7	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999999964652795	WITHOUT_CLASSIFICATION	3.5347205116792535E-9	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.9999996319274013	WITHOUT_CLASSIFICATION	3.6807259876318567E-7	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999853917132	WITHOUT_CLASSIFICATION	1.4608286757687193E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999477488296	WITHOUT_CLASSIFICATION	5.225117038056406E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999477488296	WITHOUT_CLASSIFICATION	5.225117038056406E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998694399194	WITHOUT_CLASSIFICATION	1.3056008067897737E-7	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998694399194	WITHOUT_CLASSIFICATION	1.3056008067897737E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999864077038619	WITHOUT_CLASSIFICATION	1.3592296138023307E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999864077038619	WITHOUT_CLASSIFICATION	1.3592296138023307E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999972795012	WITHOUT_CLASSIFICATION	2.7204988231573314E-9	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999972795012	WITHOUT_CLASSIFICATION	2.7204988231573314E-9	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.999995921603468	WITHOUT_CLASSIFICATION	4.078396532136967E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999999853917132	WITHOUT_CLASSIFICATION	1.4608286757687193E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999477488296	WITHOUT_CLASSIFICATION	5.225117038056406E-8	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999999477488296	WITHOUT_CLASSIFICATION	5.225117038056406E-8	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999998694399194	WITHOUT_CLASSIFICATION	1.3056008067897737E-7	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999864077038619	WITHOUT_CLASSIFICATION	1.3592296138023307E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9999864077038619	WITHOUT_CLASSIFICATION	1.3592296138023307E-5	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999972795012	WITHOUT_CLASSIFICATION	2.7204988231573314E-9	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999959730509482	WITHOUT_CLASSIFICATION	4.0269490518364955E-6	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999988508400387	WITHOUT_CLASSIFICATION	1.149159961309243E-6	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998724738572021	WITHOUT_CLASSIFICATION	1.2752614279787898E-4	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999669092613122	WITHOUT_CLASSIFICATION	3.309073868784586E-5	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999976119354691	WITHOUT_CLASSIFICATION	2.3880645309112083E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999987798084645	WITHOUT_CLASSIFICATION	1.2201915354238717E-6	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999984755441547	WITHOUT_CLASSIFICATION	1.5244558453492965E-6	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999999542476825	WITHOUT_CLASSIFICATION	4.575231740065451E-8	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999940144579291	WITHOUT_CLASSIFICATION	5.985542070873801E-6	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999474068668	WITHOUT_CLASSIFICATION	5.2593133276065004E-8	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999994549379742	WITHOUT_CLASSIFICATION	5.450620259529576E-7	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999840227952	WITHOUT_CLASSIFICATION	1.5977204843894085E-8	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999964374535474	WITHOUT_CLASSIFICATION	3.5625464526287125E-6	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999987798084645	WITHOUT_CLASSIFICATION	1.2201915354238717E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999870949662782	WITHOUT_CLASSIFICATION	1.290503372161291E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999870949662782	WITHOUT_CLASSIFICATION	1.290503372161291E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999999756598679	WITHOUT_CLASSIFICATION	2.4340132129484283E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999809668043	WITHOUT_CLASSIFICATION	1.9033195669008765E-8	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999809668043	WITHOUT_CLASSIFICATION	1.9033195669008765E-8	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999999910610521	WITHOUT_CLASSIFICATION	8.938947861791333E-9	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999999355729083	WITHOUT_CLASSIFICATION	6.442709170938374E-8	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999876363603	WITHOUT_CLASSIFICATION	1.2363639634906446E-8	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999993707221805	WITHOUT_CLASSIFICATION	6.2927781949425635E-6	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999993707221805	WITHOUT_CLASSIFICATION	6.2927781949425635E-6	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999998253248	WITHOUT_CLASSIFICATION	1.7467520974501005E-10	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999989149077997	WITHOUT_CLASSIFICATION	1.0850922002851857E-6	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999989149077997	WITHOUT_CLASSIFICATION	1.0850922002851857E-6	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999999294164489	WITHOUT_CLASSIFICATION	7.058355116992724E-8	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999999945608439	WITHOUT_CLASSIFICATION	5.439156196238195E-9	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999999999259693	WITHOUT_CLASSIFICATION	7.403071105534477E-11	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999984413584438	WITHOUT_CLASSIFICATION	1.5586415560741293E-6	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999999838250853	WITHOUT_CLASSIFICATION	1.61749146872044E-8	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999999730382715	WITHOUT_CLASSIFICATION	2.6961728575932233E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983435739	WITHOUT_CLASSIFICATION	1.6564261195561129E-9	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999984571283437	WITHOUT_CLASSIFICATION	1.5428716563958432E-6	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.98907528734364	WITHOUT_CLASSIFICATION	0.010924712656359942	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999989284417948	WITHOUT_CLASSIFICATION	1.07155820513721E-6	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999999712290619	WITHOUT_CLASSIFICATION	2.8770938102212604E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999976250571333	WITHOUT_CLASSIFICATION	2.374942866709162E-5	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999999972279895	WITHOUT_CLASSIFICATION	2.772010500006151E-8	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999993689532587	WITHOUT_CLASSIFICATION	6.310467413356166E-7	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999970531221	WITHOUT_CLASSIFICATION	2.9468779875482396E-9	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999976250571333	WITHOUT_CLASSIFICATION	2.374942866709162E-5	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999999829673438	WITHOUT_CLASSIFICATION	1.703265616963645E-8	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.999999511990873	WITHOUT_CLASSIFICATION	4.88009127044036E-7	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999939022709528	WITHOUT_CLASSIFICATION	6.097729047191523E-6	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.9999995706487429	WITHOUT_CLASSIFICATION	4.293512570337665E-7	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999995944795003	WITHOUT_CLASSIFICATION	4.0552049979433326E-7	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999998316650358	WITHOUT_CLASSIFICATION	1.6833496414407033E-7	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999999132356082	WITHOUT_CLASSIFICATION	8.676439178455549E-8	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999985595240031	WITHOUT_CLASSIFICATION	1.4404759969063854E-6	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999568490813	WITHOUT_CLASSIFICATION	4.3150918779722866E-8	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999999999828139	WITHOUT_CLASSIFICATION	1.7186174262715696E-11	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999983476037668	WITHOUT_CLASSIFICATION	1.6523962330895412E-6	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.99999999770573	WITHOUT_CLASSIFICATION	2.2942700494840955E-9	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999429569775	WITHOUT_CLASSIFICATION	5.704302260571578E-8	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999999983435739	WITHOUT_CLASSIFICATION	1.6564261195561129E-9	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999568490813	WITHOUT_CLASSIFICATION	4.3150918779722866E-8	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9999983476037668	WITHOUT_CLASSIFICATION	1.6523962330895412E-6	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999429569775	WITHOUT_CLASSIFICATION	5.704302260571578E-8	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996874524156	WITHOUT_CLASSIFICATION	3.125475844075159E-7	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.999995971357388	WITHOUT_CLASSIFICATION	4.028642611914056E-6	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998614316798	WITHOUT_CLASSIFICATION	1.3856832026560245E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985728510765	WITHOUT_CLASSIFICATION	1.4271489235711107E-6	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999998671565925	WITHOUT_CLASSIFICATION	1.328434075916161E-7	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9999820584061758	WITHOUT_CLASSIFICATION	1.794159382418941E-5	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9999979638171725	WITHOUT_CLASSIFICATION	2.03618282741271E-6	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999995203922209	WITHOUT_CLASSIFICATION	4.7960777910579075E-6	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999998607232945	WITHOUT_CLASSIFICATION	1.3927670547815957E-7	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999959836127	WITHOUT_CLASSIFICATION	4.0163872978991866E-8	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998874775975	WITHOUT_CLASSIFICATION	1.1252240261722406E-7	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999995109830865	WITHOUT_CLASSIFICATION	4.890169134721216E-7	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999996956137012	WITHOUT_CLASSIFICATION	3.043862988414089E-7	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999455338115	WITHOUT_CLASSIFICATION	5.446618850636109E-7	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999993403492886	WITHOUT_CLASSIFICATION	6.596507114278899E-7	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999991983366161	WITHOUT_CLASSIFICATION	8.01663383963737E-7	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999995883128207	WITHOUT_CLASSIFICATION	4.116871793083288E-7	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999828462132	WITHOUT_CLASSIFICATION	1.7153786737396722E-8	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999998313003808	WITHOUT_CLASSIFICATION	1.6869961911557456E-7	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999999568490813	WITHOUT_CLASSIFICATION	4.3150918779722866E-8	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999421602722	WITHOUT_CLASSIFICATION	5.7839727831585114E-8	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999972113001178	WITHOUT_CLASSIFICATION	2.788699882122797E-6	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999996012823695	WITHOUT_CLASSIFICATION	3.987176304226607E-7	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999964885500814	WITHOUT_CLASSIFICATION	3.511449918469449E-6	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999999426309272	WITHOUT_CLASSIFICATION	5.7369072928575187E-8	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999998024795616	WITHOUT_CLASSIFICATION	1.9752043843560878E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999998972636491	WITHOUT_CLASSIFICATION	1.0273635092178079E-7	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999483004995	WITHOUT_CLASSIFICATION	5.169950038313519E-8	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999967290948788	WITHOUT_CLASSIFICATION	3.2709051211697917E-6	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999992999633914	WITHOUT_CLASSIFICATION	7.000366086023584E-7	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999994165372205	WITHOUT_CLASSIFICATION	5.834627795138079E-6	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999999487594855	WITHOUT_CLASSIFICATION	5.124051448897181E-7	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9988729414187435	WITHOUT_CLASSIFICATION	0.001127058581256548	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999966573558656	WITHOUT_CLASSIFICATION	3.342644134313486E-6	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998529040969	WITHOUT_CLASSIFICATION	1.4709590313336523E-7	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999855119036577	WITHOUT_CLASSIFICATION	1.448809634238655E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.9999562254001424	WITHOUT_CLASSIFICATION	4.377459985755612E-5	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999830263884688	WITHOUT_CLASSIFICATION	1.6973611531145064E-5	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999767948270638	WITHOUT_CLASSIFICATION	2.320517293618078E-5	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999970964629371	WITHOUT_CLASSIFICATION	2.9035370628771507E-6	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999504361933	WITHOUT_CLASSIFICATION	4.956380677904514E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999975587555737	WITHOUT_CLASSIFICATION	2.44124442623535E-6	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999981102331823	WITHOUT_CLASSIFICATION	1.889766817664979E-6	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.999999176930685	WITHOUT_CLASSIFICATION	8.230693149829109E-7	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999798560195302	WITHOUT_CLASSIFICATION	2.014398046981024E-5	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999798560195302	WITHOUT_CLASSIFICATION	2.014398046981024E-5	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999202720577444	WITHOUT_CLASSIFICATION	7.972794225559811E-5	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999572990940054	WITHOUT_CLASSIFICATION	4.2700905994536894E-5	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999886784656623	WITHOUT_CLASSIFICATION	1.1321534337840207E-5	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999997594131569	WITHOUT_CLASSIFICATION	2.4058684313402766E-7	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999999822044712	WITHOUT_CLASSIFICATION	1.77955288320039E-8	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999999895299467	WITHOUT_CLASSIFICATION	1.0470053258697278E-8	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999989966988237	WITHOUT_CLASSIFICATION	1.0033011762322988E-6	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999992774679913	WITHOUT_CLASSIFICATION	7.225320087017792E-7	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999997979865212	WITHOUT_CLASSIFICATION	2.0201347873696267E-7	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999998379231869	WITHOUT_CLASSIFICATION	1.620768131215574E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9999941532682894	WITHOUT_CLASSIFICATION	5.8467317105361984E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999981510351587	WITHOUT_CLASSIFICATION	1.8489648413473727E-6	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999999969330441	WITHOUT_CLASSIFICATION	3.066955836998178E-9	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999941505244374	WITHOUT_CLASSIFICATION	5.84947556264373E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999986090015	WITHOUT_CLASSIFICATION	1.3909985382065132E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981733352641	WITHOUT_CLASSIFICATION	1.8266647358216716E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999993010683365	WITHOUT_CLASSIFICATION	6.989316636156142E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999996716966	WITHOUT_CLASSIFICATION	3.2830346311227714E-10	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999995243768048	WITHOUT_CLASSIFICATION	4.7562319516761084E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998609037060819	WITHOUT_CLASSIFICATION	1.3909629391814824E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999996044207331	WITHOUT_CLASSIFICATION	3.955792669751895E-7	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999996044207331	WITHOUT_CLASSIFICATION	3.955792669751895E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999993314342533	WITHOUT_CLASSIFICATION	6.685657466334275E-7	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.9999993314342533	WITHOUT_CLASSIFICATION	6.685657466334275E-7	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999981102331823	WITHOUT_CLASSIFICATION	1.889766817664979E-6	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999994565873975	WITHOUT_CLASSIFICATION	5.434126025075456E-6	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9990114223284994	WITHOUT_CLASSIFICATION	9.885776715006266E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999986841851385	WITHOUT_CLASSIFICATION	1.3158148615123073E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999503116139	WITHOUT_CLASSIFICATION	4.968838600597812E-8	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9990114223284994	WITHOUT_CLASSIFICATION	9.885776715006266E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999986841851385	WITHOUT_CLASSIFICATION	1.3158148615123073E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999527429687436	WITHOUT_CLASSIFICATION	4.725703125640129E-5	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999958299812	WITHOUT_CLASSIFICATION	4.170018757506552E-9	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999999459433787	WITHOUT_CLASSIFICATION	5.405662122960125E-8	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998046905371	WITHOUT_CLASSIFICATION	1.9530946298276204E-7	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9992488329675226	WITHOUT_CLASSIFICATION	7.51167032477411E-4	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9982326274897525	WITHOUT_CLASSIFICATION	0.0017673725102475045	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999999843100892	WITHOUT_CLASSIFICATION	1.5689910867048628E-8	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999997522135419	WITHOUT_CLASSIFICATION	2.4778645820964784E-7	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999999423498062	WITHOUT_CLASSIFICATION	5.765019389357709E-8	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999991404802	WITHOUT_CLASSIFICATION	8.595198003965023E-9	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999971222680688	WITHOUT_CLASSIFICATION	2.8777319312364987E-6	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999870730528	WITHOUT_CLASSIFICATION	1.2926947110240377E-8	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998891202833	WITHOUT_CLASSIFICATION	1.1087971677954365E-7	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999781231833045	WITHOUT_CLASSIFICATION	2.1876816695494607E-5	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999503116139	WITHOUT_CLASSIFICATION	4.968838600597812E-8	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999995557467137	WITHOUT_CLASSIFICATION	4.442532863073314E-6	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999566489522	WITHOUT_CLASSIFICATION	4.335104782015781E-8	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999566489522	WITHOUT_CLASSIFICATION	4.335104782015781E-8	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999995793728086	WITHOUT_CLASSIFICATION	4.206271914063768E-7	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999527429687436	WITHOUT_CLASSIFICATION	4.725703125640129E-5	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999949943931248	WITHOUT_CLASSIFICATION	5.005606875176723E-6	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999224102554624	WITHOUT_CLASSIFICATION	7.75897445377219E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999615232603946	WITHOUT_CLASSIFICATION	3.8476739605391964E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997228910238	WITHOUT_CLASSIFICATION	2.771089762205026E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995475802866423	WITHOUT_CLASSIFICATION	4.524197133577491E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999527429687436	WITHOUT_CLASSIFICATION	4.725703125640129E-5	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997228910238	WITHOUT_CLASSIFICATION	2.771089762205026E-7	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9995475802866423	WITHOUT_CLASSIFICATION	4.524197133577491E-4	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998189223576549	WITHOUT_CLASSIFICATION	1.8107764234517247E-4	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999993071506685	WITHOUT_CLASSIFICATION	6.928493315227245E-7	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999962768229479	WITHOUT_CLASSIFICATION	3.7231770520189278E-6	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999527429687436	WITHOUT_CLASSIFICATION	4.725703125640129E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999527429687436	WITHOUT_CLASSIFICATION	4.725703125640129E-5	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9999998826893519	WITHOUT_CLASSIFICATION	1.1731064806000088E-7	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999996523013829	WITHOUT_CLASSIFICATION	3.4769861710682487E-7	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9999969045597056	WITHOUT_CLASSIFICATION	3.0954402944621555E-6	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999977066406684	WITHOUT_CLASSIFICATION	2.293359331456672E-6	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.99999982881642	WITHOUT_CLASSIFICATION	1.7118357998065532E-7	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999984442972	WITHOUT_CLASSIFICATION	1.5557028399439504E-9	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999928865165393	WITHOUT_CLASSIFICATION	7.11348346083305E-6	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999998770132366	WITHOUT_CLASSIFICATION	1.229867634026783E-7	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999996667527137	WITHOUT_CLASSIFICATION	3.3324728631819385E-7	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9999993659869245	WITHOUT_CLASSIFICATION	6.340130755055914E-7	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999971096946398	WITHOUT_CLASSIFICATION	2.8903053601209775E-6	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999983615111367	WITHOUT_CLASSIFICATION	1.6384888631889337E-6	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999999990449864	WITHOUT_CLASSIFICATION	9.55013705345337E-10	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999936660356535	WITHOUT_CLASSIFICATION	6.333964346392222E-6	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999443006283	WITHOUT_CLASSIFICATION	5.569937167426246E-8	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999904600655	WITHOUT_CLASSIFICATION	9.539934529102921E-9	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999832601566491	WITHOUT_CLASSIFICATION	1.6739843350960366E-5	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999989738428737	WITHOUT_CLASSIFICATION	1.0261571262315489E-6	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9994636903006807	WITHOUT_CLASSIFICATION	5.363096993192447E-4	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999997189390198	WITHOUT_CLASSIFICATION	2.810609800989041E-7	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999823866869828	WITHOUT_CLASSIFICATION	1.7613313017166324E-5	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9953499855505021	WITHOUT_CLASSIFICATION	0.004650014449497907	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9953499855505021	WITHOUT_CLASSIFICATION	0.004650014449497907	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999832601566491	WITHOUT_CLASSIFICATION	1.6739843350960366E-5	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999989822635974	WITHOUT_CLASSIFICATION	1.017736402608729E-6	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999999453351868	WITHOUT_CLASSIFICATION	5.4664813172485233E-8	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.985532856503496	WITHOUT_CLASSIFICATION	0.014467143496503989	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999399438764	WITHOUT_CLASSIFICATION	6.005612359699504E-8	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999941189598662	WITHOUT_CLASSIFICATION	5.881040133721087E-6	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997017394159	WITHOUT_CLASSIFICATION	2.9826058410796883E-7	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999998632683623	WITHOUT_CLASSIFICATION	1.3673163767839966E-7	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999992961849546	WITHOUT_CLASSIFICATION	7.038150454699912E-7	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999677888232	WITHOUT_CLASSIFICATION	3.2211176815329576E-8	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999999859349295	WITHOUT_CLASSIFICATION	1.406507050593953E-7	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998806754268	WITHOUT_CLASSIFICATION	1.1932457319869458E-7	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999974340701258	WITHOUT_CLASSIFICATION	2.565929874265331E-6	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999901480560281	WITHOUT_CLASSIFICATION	9.851943971768465E-6	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999980871641653	WITHOUT_CLASSIFICATION	1.912835834690946E-6	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998842794505	WITHOUT_CLASSIFICATION	1.1572054949093135E-7	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999999771443392	WITHOUT_CLASSIFICATION	2.285566080527258E-8	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999998358149795	WITHOUT_CLASSIFICATION	1.641850205598483E-7	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999939915944553	WITHOUT_CLASSIFICATION	6.00840554459487E-6	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996331108676	WITHOUT_CLASSIFICATION	3.668891324796939E-7	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999999861072285	WITHOUT_CLASSIFICATION	1.3892771427074108E-8	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997455327403083	WITHOUT_CLASSIFICATION	2.5446725969172074E-4	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999772571948935	WITHOUT_CLASSIFICATION	2.274280510652512E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984248428871	WITHOUT_CLASSIFICATION	1.575157112898152E-5	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994881917113366	WITHOUT_CLASSIFICATION	5.11808288663339E-4	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931662000827	WITHOUT_CLASSIFICATION	6.833799917216491E-6	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927582814828	WITHOUT_CLASSIFICATION	7.241718517102308E-6	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998052639690845	WITHOUT_CLASSIFICATION	1.947360309155134E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841034367093	WITHOUT_CLASSIFICATION	1.5896563290708696E-5	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998418660116218	WITHOUT_CLASSIFICATION	1.5813398837826215E-4	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976523316342	WITHOUT_CLASSIFICATION	2.3476683656966968E-6	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999958622399965	WITHOUT_CLASSIFICATION	4.137760003414395E-6	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999971010958001	WITHOUT_CLASSIFICATION	2.8989041999128847E-6	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975454010536	WITHOUT_CLASSIFICATION	2.4545989464490583E-6	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991641188359	WITHOUT_CLASSIFICATION	8.358811640735903E-7	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752826128052	WITHOUT_CLASSIFICATION	2.471738719478823E-5	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909618715927	WITHOUT_CLASSIFICATION	1.0903812840725906E-4	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979587895647	WITHOUT_CLASSIFICATION	2.0412104352438594E-6	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978803646493	WITHOUT_CLASSIFICATION	2.119635350692983E-6	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495593777331	WITHOUT_CLASSIFICATION	5.044062226685811E-5	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341564392803	WITHOUT_CLASSIFICATION	6.584356071979948E-5	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999998818021072	WITHOUT_CLASSIFICATION	1.1819789280596022E-7	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893240802437	WITHOUT_CLASSIFICATION	1.0675919756299035E-5	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9993166734157859	WITHOUT_CLASSIFICATION	6.833265842142078E-4	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998715864932	WITHOUT_CLASSIFICATION	1.2841350684471857E-7	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999573321405	WITHOUT_CLASSIFICATION	4.26678594462274E-8	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998292727185	WITHOUT_CLASSIFICATION	1.707272816406562E-7	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.999997997395896	WITHOUT_CLASSIFICATION	2.0026041039252737E-6	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999969735983766	WITHOUT_CLASSIFICATION	3.0264016235254743E-6	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.999999525940651	WITHOUT_CLASSIFICATION	4.7405934894973867E-7	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999999869257282	WITHOUT_CLASSIFICATION	1.3074271831889476E-8	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999969968545492	WITHOUT_CLASSIFICATION	3.003145450671678E-6	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999977106375622	WITHOUT_CLASSIFICATION	2.2893624378628835E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999996633478302	WITHOUT_CLASSIFICATION	3.366521698231107E-7	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999997951914662	WITHOUT_CLASSIFICATION	2.0480853389571208E-7	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999187115308	WITHOUT_CLASSIFICATION	8.128846911417729E-8	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999999981617353	WITHOUT_CLASSIFICATION	1.8382647531126743E-9	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999990917302621	WITHOUT_CLASSIFICATION	9.082697379391982E-7	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999999720080276	WITHOUT_CLASSIFICATION	2.7991972389427267E-8	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999993907595565	WITHOUT_CLASSIFICATION	6.09240443598378E-7	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776428678097	WITHOUT_CLASSIFICATION	2.235713219034959E-5	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985205371793	WITHOUT_CLASSIFICATION	1.4794628207330337E-6	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999585223884588	WITHOUT_CLASSIFICATION	4.147761154119266E-5	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995436922334	WITHOUT_CLASSIFICATION	4.563077666105004E-6	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999037208682364	WITHOUT_CLASSIFICATION	9.627913176348374E-5	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999998296406566	WITHOUT_CLASSIFICATION	1.7035934335783494E-7	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9923019092033805	WITHOUT_CLASSIFICATION	0.0076980907966195675	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9996219052084668	WITHOUT_CLASSIFICATION	3.780947915331727E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999581956915421	WITHOUT_CLASSIFICATION	4.1804308457817375E-5	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999711334427	WITHOUT_CLASSIFICATION	2.8866557213253555E-8	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999998825238746	WITHOUT_CLASSIFICATION	1.1747612534132356E-7	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999999420796075	WITHOUT_CLASSIFICATION	5.792039235351648E-8	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999941480788	WITHOUT_CLASSIFICATION	5.851921180076574E-9	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999689558182271	WITHOUT_CLASSIFICATION	3.104418177298309E-5	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999888746701576	WITHOUT_CLASSIFICATION	1.1125329842317612E-5	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999999979750025	WITHOUT_CLASSIFICATION	2.024997462150068E-9	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999987728480765	WITHOUT_CLASSIFICATION	1.2271519234477696E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998292727185	WITHOUT_CLASSIFICATION	1.707272816406562E-7	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999355324116	WITHOUT_CLASSIFICATION	6.446758840654955E-8	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999910354118426	WITHOUT_CLASSIFICATION	8.964588157350632E-6	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999811928552552	WITHOUT_CLASSIFICATION	1.880714474477377E-5	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999990890154377	WITHOUT_CLASSIFICATION	9.1098456228904E-7	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999999729160368	WITHOUT_CLASSIFICATION	2.7083963082900714E-8	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.999999889093919	WITHOUT_CLASSIFICATION	1.1090608095020403E-7	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999568875108974	WITHOUT_CLASSIFICATION	4.31124891026781E-5	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999999048297424	WITHOUT_CLASSIFICATION	9.517025760325468E-8	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999972465909388	WITHOUT_CLASSIFICATION	2.7534090611342665E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999906549983	WITHOUT_CLASSIFICATION	9.345001736937427E-9	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999997289521085	WITHOUT_CLASSIFICATION	2.7104789151696386E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999855139523	WITHOUT_CLASSIFICATION	1.4486047698406483E-8	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999905047494	WITHOUT_CLASSIFICATION	9.495250623536301E-9	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999997341683949	WITHOUT_CLASSIFICATION	2.6583160505970464E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999999895329669	WITHOUT_CLASSIFICATION	1.0467033144272304E-8	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999990408593896	WITHOUT_CLASSIFICATION	9.591406103236506E-7	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999970272912542	WITHOUT_CLASSIFICATION	2.972708745794161E-5	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999873436970241	WITHOUT_CLASSIFICATION	1.265630297583006E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999988271987933	WITHOUT_CLASSIFICATION	1.1728012067434683E-6	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.999997282080359	WITHOUT_CLASSIFICATION	2.7179196409872367E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999990184109447	WITHOUT_CLASSIFICATION	9.8158905528303E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999950281016424	WITHOUT_CLASSIFICATION	4.9718983575125325E-6	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999981855560233	WITHOUT_CLASSIFICATION	1.8144439767905102E-6	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997964136302178	WITHOUT_CLASSIFICATION	2.0358636978219725E-4	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999995243196739	WITHOUT_CLASSIFICATION	4.756803260915216E-6	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999554751736	WITHOUT_CLASSIFICATION	4.452482646359269E-8	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981255403895656	WITHOUT_CLASSIFICATION	0.0018744596104344471	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999978768958461	WITHOUT_CLASSIFICATION	2.1231041539571483E-6	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999999249736319	WITHOUT_CLASSIFICATION	7.502636808751882E-7	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999998569326393	WITHOUT_CLASSIFICATION	1.430673607403117E-7	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998292727185	WITHOUT_CLASSIFICATION	1.707272816406562E-7	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999914339257712	WITHOUT_CLASSIFICATION	8.566074228869544E-6	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.999999866752715	WITHOUT_CLASSIFICATION	1.332472850122918E-7	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999539241455	WITHOUT_CLASSIFICATION	4.6075854376035964E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998292727185	WITHOUT_CLASSIFICATION	1.707272816406562E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997273701021	WITHOUT_CLASSIFICATION	2.726298977966995E-7	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999990184109447	WITHOUT_CLASSIFICATION	9.8158905528303E-7	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999382465134902	WITHOUT_CLASSIFICATION	6.175348650981921E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999963628390531	WITHOUT_CLASSIFICATION	3.637160946896307E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968607866997	WITHOUT_CLASSIFICATION	3.1392133004106144E-6	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999999906549983	WITHOUT_CLASSIFICATION	9.345001736937427E-9	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999997289521085	WITHOUT_CLASSIFICATION	2.7104789151696386E-7	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999999855139523	WITHOUT_CLASSIFICATION	1.4486047698406483E-8	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999977152972	WITHOUT_CLASSIFICATION	2.284702824410642E-9	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.999999866065207	WITHOUT_CLASSIFICATION	1.339347929256812E-7	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999979519463201	WITHOUT_CLASSIFICATION	2.048053679799675E-6	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999998973428139	WITHOUT_CLASSIFICATION	1.0265718604637684E-7	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999999285907	WITHOUT_CLASSIFICATION	7.140929049493814E-11	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999998292727185	WITHOUT_CLASSIFICATION	1.707272816406562E-7	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999905047494	WITHOUT_CLASSIFICATION	9.495250623536301E-9	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999997341683949	WITHOUT_CLASSIFICATION	2.6583160505970464E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999883427387	WITHOUT_CLASSIFICATION	1.1657261255252337E-8	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999631647832	WITHOUT_CLASSIFICATION	3.683521669093572E-8	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999989105769	WITHOUT_CLASSIFICATION	1.0894230586140572E-9	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999938761948	WITHOUT_CLASSIFICATION	6.123805294790429E-9	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999998817322134	WITHOUT_CLASSIFICATION	1.1826778663371456E-7	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.999999977112877	WITHOUT_CLASSIFICATION	2.2887122945044682E-8	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999341564392803	WITHOUT_CLASSIFICATION	6.584356071979948E-5	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999999606976454	WITHOUT_CLASSIFICATION	3.930235458537974E-8	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9992955612165455	WITHOUT_CLASSIFICATION	7.044387834545252E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999996542952759	WITHOUT_CLASSIFICATION	3.4570472412757885E-7	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999997331412557	WITHOUT_CLASSIFICATION	2.6685874430749524E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999287857617	WITHOUT_CLASSIFICATION	7.121423829444699E-8	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998052639690845	WITHOUT_CLASSIFICATION	1.947360309155134E-4	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841034367093	WITHOUT_CLASSIFICATION	1.5896563290708696E-5	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991641188359	WITHOUT_CLASSIFICATION	8.358811640735903E-7	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999287857617	WITHOUT_CLASSIFICATION	7.121423829444699E-8	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999951555940068	WITHOUT_CLASSIFICATION	4.844405993331248E-6	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999339118153	WITHOUT_CLASSIFICATION	6.608818473486647E-8	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998343166375289	WITHOUT_CLASSIFICATION	1.6568336247110266E-4	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999136832259989	WITHOUT_CLASSIFICATION	8.631677400102699E-5	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999896906485224	WITHOUT_CLASSIFICATION	1.0309351477613011E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998751251912704	WITHOUT_CLASSIFICATION	1.2487480872957856E-4	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752826128052	WITHOUT_CLASSIFICATION	2.471738719478823E-5	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978803646493	WITHOUT_CLASSIFICATION	2.119635350692983E-6	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999941480788	WITHOUT_CLASSIFICATION	5.851921180076574E-9	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.999999965872438	WITHOUT_CLASSIFICATION	3.412756212500889E-8	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999986091944474	WITHOUT_CLASSIFICATION	1.3908055526341766E-6	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999742007049	WITHOUT_CLASSIFICATION	2.5799295204438793E-8	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999999833056671	WITHOUT_CLASSIFICATION	1.669433290064996E-7	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999991928432693	WITHOUT_CLASSIFICATION	8.071567306784059E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999996424217301	WITHOUT_CLASSIFICATION	3.575782699631052E-7	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999908895272539	WITHOUT_CLASSIFICATION	9.110472746119956E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999677888232	WITHOUT_CLASSIFICATION	3.2211176815329576E-8	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999220827178795	WITHOUT_CLASSIFICATION	7.791728212049527E-5	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999957760324248	WITHOUT_CLASSIFICATION	4.223967575071609E-6	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999917058674942	WITHOUT_CLASSIFICATION	8.294132505778794E-6	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999998024573021	WITHOUT_CLASSIFICATION	1.9754269792972046E-7	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998594521509	WITHOUT_CLASSIFICATION	1.4054784918014642E-7	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999517095708423	WITHOUT_CLASSIFICATION	4.829042915757983E-5	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894045244779	WITHOUT_CLASSIFICATION	1.0595475522036567E-5	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996107319964113	WITHOUT_CLASSIFICATION	3.892680035886218E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997854353573	WITHOUT_CLASSIFICATION	2.1456464266101714E-7	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999993907507009	WITHOUT_CLASSIFICATION	6.092492991648836E-7	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999887032043032	WITHOUT_CLASSIFICATION	1.1296795696792953E-5	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999966616263563	WITHOUT_CLASSIFICATION	3.338373643691428E-6	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988994949861	WITHOUT_CLASSIFICATION	1.1005050137851417E-6	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999586268769	WITHOUT_CLASSIFICATION	4.1373123103094275E-7	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995009928082	WITHOUT_CLASSIFICATION	4.990071918742665E-7	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999998192066892	WITHOUT_CLASSIFICATION	1.8079331082930982E-7	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999998912566247	WITHOUT_CLASSIFICATION	1.0874337529149042E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998116624317	WITHOUT_CLASSIFICATION	1.883375684092589E-7	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999800042583902	WITHOUT_CLASSIFICATION	1.9995741609769906E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999795701306	WITHOUT_CLASSIFICATION	2.042986940298063E-7	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996798077667	WITHOUT_CLASSIFICATION	3.20192233276848E-7	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999998543680236	WITHOUT_CLASSIFICATION	1.456319764062943E-6	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999532711462	WITHOUT_CLASSIFICATION	4.6728853803240666E-8	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996098897778	WITHOUT_CLASSIFICATION	3.9011022224533695E-7	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.999999336919103	WITHOUT_CLASSIFICATION	6.630808969566384E-7	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998714264141879	WITHOUT_CLASSIFICATION	1.285735858121959E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998878962875609	WITHOUT_CLASSIFICATION	1.121037124391652E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999998804641891	WITHOUT_CLASSIFICATION	1.1953581084211477E-7	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999996061016793	WITHOUT_CLASSIFICATION	3.93898320707829E-7	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999966426997264	WITHOUT_CLASSIFICATION	3.357300273599164E-6	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999414374856923	WITHOUT_CLASSIFICATION	5.856251430758358E-5	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999999684685558	WITHOUT_CLASSIFICATION	3.153144420172639E-8	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9988466788668474	WITHOUT_CLASSIFICATION	0.0011533211331525594	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999970974472	WITHOUT_CLASSIFICATION	2.902552749116087E-9	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999948210326524	WITHOUT_CLASSIFICATION	5.1789673476337874E-6	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999995535780345	WITHOUT_CLASSIFICATION	4.464219655499659E-7	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.999999989734985	WITHOUT_CLASSIFICATION	1.0265014901772406E-8	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999994177358612	WITHOUT_CLASSIFICATION	5.822641387291074E-7	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999998216591992	WITHOUT_CLASSIFICATION	1.7834080082178206E-7	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999997745339404	WITHOUT_CLASSIFICATION	2.2546605961136608E-7	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9982783562130301	WITHOUT_CLASSIFICATION	0.0017216437869699236	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9997855351017283	WITHOUT_CLASSIFICATION	2.1446489827165596E-4	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999993190320878	WITHOUT_CLASSIFICATION	6.809679121136609E-7	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999916371656	WITHOUT_CLASSIFICATION	8.362834479233744E-9	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998991558218558	WITHOUT_CLASSIFICATION	1.008441781441374E-4	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999919135148093	WITHOUT_CLASSIFICATION	8.086485190700956E-6	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999681983966	WITHOUT_CLASSIFICATION	3.180160338155285E-8	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999994521659081	WITHOUT_CLASSIFICATION	5.4783409189248246E-6	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999996458960094	WITHOUT_CLASSIFICATION	3.5410399062117325E-7	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.99991273578313	WITHOUT_CLASSIFICATION	8.726421686996904E-5	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999926864223044	WITHOUT_CLASSIFICATION	7.313577695492602E-6	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999999994967389	WITHOUT_CLASSIFICATION	5.032611678395103E-10	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999998868055213	WITHOUT_CLASSIFICATION	1.1319447865970298E-7	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999294922948	WITHOUT_CLASSIFICATION	7.050770517579863E-8	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999988367611004	WITHOUT_CLASSIFICATION	1.163238899637153E-6	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.999080167130809	WITHOUT_CLASSIFICATION	9.198328691908453E-4	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999804338581091	WITHOUT_CLASSIFICATION	1.9566141890932796E-5	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999993289833199	WITHOUT_CLASSIFICATION	6.710166801011218E-6	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999981085048938	WITHOUT_CLASSIFICATION	1.8914951061822307E-6	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999996963124997	WITHOUT_CLASSIFICATION	3.036875002387091E-7	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.999958378109478	WITHOUT_CLASSIFICATION	4.162189052208432E-5	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999949714720634	WITHOUT_CLASSIFICATION	5.0285279366817395E-6	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9999997889182347	WITHOUT_CLASSIFICATION	2.1108176530838223E-7	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999928336375655	WITHOUT_CLASSIFICATION	7.166362434496898E-5	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997019209011355	WITHOUT_CLASSIFICATION	2.9807909886448054E-4	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999996532362229	WITHOUT_CLASSIFICATION	3.467637771913382E-7	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999996782017843	WITHOUT_CLASSIFICATION	3.2179821569640578E-6	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999927562723517	WITHOUT_CLASSIFICATION	7.243727648308342E-6	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999996279140425	WITHOUT_CLASSIFICATION	3.720859574601463E-7	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999999205327537	WITHOUT_CLASSIFICATION	7.946724629572886E-7	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999834573351406	WITHOUT_CLASSIFICATION	1.654266485939327E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999985623997	WITHOUT_CLASSIFICATION	1.4376003657135123E-9	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999990373686757	WITHOUT_CLASSIFICATION	9.626313243077373E-6	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999865318144	WITHOUT_CLASSIFICATION	1.34681855085E-8	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999951684068107	WITHOUT_CLASSIFICATION	4.831593189235906E-6	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999991689389247	WITHOUT_CLASSIFICATION	8.310610751940142E-7	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999999964698522	WITHOUT_CLASSIFICATION	3.5301478074634707E-9	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999995157723318	WITHOUT_CLASSIFICATION	4.842276681569242E-7	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999999993823	WITHOUT_CLASSIFICATION	6.176931913681344E-13	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999823942155344	WITHOUT_CLASSIFICATION	1.760578446560811E-5	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999409573957649	WITHOUT_CLASSIFICATION	5.904260423499744E-5	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998894406146	WITHOUT_CLASSIFICATION	1.1055938536943448E-7	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999996749237052	WITHOUT_CLASSIFICATION	3.2507629476291733E-7	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999676002311019	WITHOUT_CLASSIFICATION	3.239976889815308E-5	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999998258881694	WITHOUT_CLASSIFICATION	1.74111830707198E-7	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998745964327073	WITHOUT_CLASSIFICATION	1.254035672927116E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999928747062239	WITHOUT_CLASSIFICATION	7.125293776118939E-6	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999359375719029	WITHOUT_CLASSIFICATION	6.406242809713223E-5	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999963005558348	WITHOUT_CLASSIFICATION	3.699444165219608E-6	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.999999990977445	WITHOUT_CLASSIFICATION	9.022555155455007E-9	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999948341656089	WITHOUT_CLASSIFICATION	5.165834391068441E-6	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.9999984676545158	WITHOUT_CLASSIFICATION	1.5323454842011478E-6	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999999834083125	WITHOUT_CLASSIFICATION	1.6591687535729278E-8	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9999948341656089	WITHOUT_CLASSIFICATION	5.165834391068441E-6	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999960993764	WITHOUT_CLASSIFICATION	3.9006236650088535E-9	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999459637356	WITHOUT_CLASSIFICATION	5.403626426086823E-8	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999841231409916	WITHOUT_CLASSIFICATION	1.5876859008466753E-5	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999113685042325	WITHOUT_CLASSIFICATION	8.86314957674988E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998752229939	WITHOUT_CLASSIFICATION	1.2477700604550507E-7	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999244082017	WITHOUT_CLASSIFICATION	7.559179820396322E-8	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999882331397288	WITHOUT_CLASSIFICATION	1.1766860271076103E-5	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999997573019918	WITHOUT_CLASSIFICATION	2.4269800822612264E-7	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998894123850532	WITHOUT_CLASSIFICATION	1.1058761494676684E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999979330663982	WITHOUT_CLASSIFICATION	2.06693360189874E-6	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999992861421	WITHOUT_CLASSIFICATION	7.138579528432421E-10	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999996727132986	WITHOUT_CLASSIFICATION	3.2728670147188365E-7	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999960236172667	WITHOUT_CLASSIFICATION	3.976382733353002E-6	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999973594783	WITHOUT_CLASSIFICATION	2.6405217255063235E-9	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983032623841	WITHOUT_CLASSIFICATION	1.6967376157784724E-6	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999942320509794	WITHOUT_CLASSIFICATION	5.767949020601053E-6	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9967838162371282	WITHOUT_CLASSIFICATION	0.003216183762871783	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9967838162371282	WITHOUT_CLASSIFICATION	0.003216183762871783	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999977340377174	WITHOUT_CLASSIFICATION	2.265962282651872E-6	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.999961716668659	WITHOUT_CLASSIFICATION	3.828333134097579E-5	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999995109891867	WITHOUT_CLASSIFICATION	4.890108132893854E-7	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999146915978696	WITHOUT_CLASSIFICATION	8.53084021304213E-5	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999990010914473	WITHOUT_CLASSIFICATION	9.989085525863077E-7	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9999802060471707	WITHOUT_CLASSIFICATION	1.9793952829247982E-5	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999969285628622	WITHOUT_CLASSIFICATION	3.071437137897644E-6	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999899661346	WITHOUT_CLASSIFICATION	1.0033865411693443E-8	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999867226559	WITHOUT_CLASSIFICATION	1.3277344096993407E-7	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998814416951226	WITHOUT_CLASSIFICATION	1.185583048772989E-4	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999980680899027	WITHOUT_CLASSIFICATION	1.93191009742706E-6	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999976010629	WITHOUT_CLASSIFICATION	2.3989371020918315E-8	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999989251853546	WITHOUT_CLASSIFICATION	1.0748146453946214E-6	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.999992154623079	WITHOUT_CLASSIFICATION	7.845376920962615E-6	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999731405388	WITHOUT_CLASSIFICATION	2.6859461161867997E-8	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999517095708423	WITHOUT_CLASSIFICATION	4.829042915757983E-5	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.999996791772223	WITHOUT_CLASSIFICATION	3.208227776964854E-6	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999990431711764	WITHOUT_CLASSIFICATION	9.568288236264568E-7	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9976379560664106	WITHOUT_CLASSIFICATION	0.0023620439335893216	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.9999892548535533	WITHOUT_CLASSIFICATION	1.0745146446805362E-5	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999974129712	WITHOUT_CLASSIFICATION	2.5870287438615286E-9	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9999970109791813	WITHOUT_CLASSIFICATION	2.9890208186890296E-6	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999999295325	WITHOUT_CLASSIFICATION	7.046745835505602E-11	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999860906016	WITHOUT_CLASSIFICATION	1.3909398324203555E-8	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999959868940453	WITHOUT_CLASSIFICATION	4.0131059546765675E-6	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999932189120463	WITHOUT_CLASSIFICATION	6.781087953786181E-6	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999999346121	WITHOUT_CLASSIFICATION	6.538793443264957E-11	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999904649064442	WITHOUT_CLASSIFICATION	9.535093555812106E-6	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999771573220817	WITHOUT_CLASSIFICATION	2.284267791824722E-5	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999979688350278	WITHOUT_CLASSIFICATION	2.0311649722225254E-6	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999918282801642	WITHOUT_CLASSIFICATION	8.17171983575147E-6	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999988543702899	WITHOUT_CLASSIFICATION	1.1456297100871678E-6	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.9999917418956341	WITHOUT_CLASSIFICATION	8.258104365902621E-6	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999883496818842	WITHOUT_CLASSIFICATION	1.1650318115821806E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999996318308853	WITHOUT_CLASSIFICATION	3.6816911467908066E-6	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999323110486353	WITHOUT_CLASSIFICATION	6.76889513647533E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9998704036621209	WITHOUT_CLASSIFICATION	1.2959633787917974E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999700128697173	WITHOUT_CLASSIFICATION	2.998713028260079E-5	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999996967218355	WITHOUT_CLASSIFICATION	3.032781643919099E-7	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999994290740442	WITHOUT_CLASSIFICATION	5.709259558394818E-7	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.999996492980988	WITHOUT_CLASSIFICATION	3.507019011986685E-6	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9999974852183231	WITHOUT_CLASSIFICATION	2.5147816768848187E-6	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999999285967138	WITHOUT_CLASSIFICATION	7.14032862590702E-8	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998837315123	WITHOUT_CLASSIFICATION	1.1626848775170606E-7	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999841293129	WITHOUT_CLASSIFICATION	1.5870687068090265E-8	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999981689722041	WITHOUT_CLASSIFICATION	1.8310277959283903E-6	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970036381072	WITHOUT_CLASSIFICATION	2.9963618928999425E-6	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999581853675	WITHOUT_CLASSIFICATION	4.1814632502241686E-7	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995414057506	WITHOUT_CLASSIFICATION	4.5859424940992444E-7	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999303579775	WITHOUT_CLASSIFICATION	6.964202250197732E-8	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999997060905018	WITHOUT_CLASSIFICATION	2.9390949824656964E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995512721391	WITHOUT_CLASSIFICATION	4.4872786092598255E-7	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999373932639	WITHOUT_CLASSIFICATION	6.260673611405886E-8	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999967710419776	WITHOUT_CLASSIFICATION	3.2289580224387494E-6	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999752433991256	WITHOUT_CLASSIFICATION	2.4756600874406114E-5	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9999967710419776	WITHOUT_CLASSIFICATION	3.2289580224387494E-6	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999807643386448	WITHOUT_CLASSIFICATION	1.923566135512111E-5	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999998943748759	WITHOUT_CLASSIFICATION	1.0562512404905824E-7	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9999978767752836	WITHOUT_CLASSIFICATION	2.1232247162946376E-6	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999996399181149	WITHOUT_CLASSIFICATION	3.6008188506746463E-7	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999999446043275	WITHOUT_CLASSIFICATION	5.539567248333089E-8	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999960883341	WITHOUT_CLASSIFICATION	3.911665941935207E-9	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998832660053	WITHOUT_CLASSIFICATION	1.1673399461612391E-7	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999831564595	WITHOUT_CLASSIFICATION	1.6843540456640293E-8	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999990967179816	WITHOUT_CLASSIFICATION	9.032820183083844E-7	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9996896844072994	WITHOUT_CLASSIFICATION	3.1031559270060005E-4	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.999999324840007	WITHOUT_CLASSIFICATION	6.751599931308465E-7	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999745649503	WITHOUT_CLASSIFICATION	2.5435049812962074E-8	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999997581376077	WITHOUT_CLASSIFICATION	2.418623923596695E-7	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999999857149995	WITHOUT_CLASSIFICATION	1.4285000373349849E-8	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999410377052538	WITHOUT_CLASSIFICATION	5.89622947462889E-5	IMPLEMENTATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999983963274	WITHOUT_CLASSIFICATION	1.603672743479683E-9	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999979458638218	WITHOUT_CLASSIFICATION	2.0541361781775247E-6	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999979458638218	WITHOUT_CLASSIFICATION	2.0541361781775247E-6	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999984726077373	WITHOUT_CLASSIFICATION	1.5273922626209589E-6	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999907213649	WITHOUT_CLASSIFICATION	9.278635052117521E-9	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999975697819	WITHOUT_CLASSIFICATION	2.430218067259996E-9	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999183666007488	WITHOUT_CLASSIFICATION	8.163339925112876E-5	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999995811076	WITHOUT_CLASSIFICATION	4.1889229685230924E-10	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999425128424	WITHOUT_CLASSIFICATION	5.7487157479690035E-8	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997014493054986	WITHOUT_CLASSIFICATION	2.985506945013133E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999600083268237	WITHOUT_CLASSIFICATION	3.99916731762126E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999481159877	WITHOUT_CLASSIFICATION	5.188401239042723E-8	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999996355508817	WITHOUT_CLASSIFICATION	3.64449118405421E-7	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999962492969	WITHOUT_CLASSIFICATION	3.750703114973658E-9	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999998619188609	WITHOUT_CLASSIFICATION	1.380811390761805E-7	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999948446332562	WITHOUT_CLASSIFICATION	5.155366743833648E-6	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999999666438479	WITHOUT_CLASSIFICATION	3.3356152042674334E-8	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999976263543972	WITHOUT_CLASSIFICATION	2.373645602797676E-6	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999999348155	WITHOUT_CLASSIFICATION	6.518455969705886E-11	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999922896910683	WITHOUT_CLASSIFICATION	7.71030893171097E-6	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9994093102633707	WITHOUT_CLASSIFICATION	5.906897366292936E-4	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9999717444217606	WITHOUT_CLASSIFICATION	2.825557823934855E-5	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997545537258	WITHOUT_CLASSIFICATION	2.4544627427355056E-7	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998277371492	WITHOUT_CLASSIFICATION	1.7226285067479637E-7	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999899887880351	WITHOUT_CLASSIFICATION	1.0011211964750427E-5	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999972268488547	WITHOUT_CLASSIFICATION	2.773151145323369E-6	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.999720576979823	WITHOUT_CLASSIFICATION	2.7942302017701717E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9999989042611949	WITHOUT_CLASSIFICATION	1.0957388050366363E-6	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999999897966182	WITHOUT_CLASSIFICATION	1.0203381833064657E-8	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999604959114	WITHOUT_CLASSIFICATION	3.950408851684983E-8	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9999028923593574	WITHOUT_CLASSIFICATION	9.710764064258385E-5	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999998982889353	WITHOUT_CLASSIFICATION	1.0171106475341198E-7	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999999818423193	WITHOUT_CLASSIFICATION	1.8157680784567672E-8	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999998703123731	WITHOUT_CLASSIFICATION	1.2968762684199062E-7	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999993786566167	WITHOUT_CLASSIFICATION	6.213433832414697E-7	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997767603087635	WITHOUT_CLASSIFICATION	2.2323969123641524E-4	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999991189390247	WITHOUT_CLASSIFICATION	8.810609753014937E-7	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9983386462232096	WITHOUT_CLASSIFICATION	0.0016613537767904338	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999984068126506	WITHOUT_CLASSIFICATION	1.5931873494350418E-6	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999110297303	WITHOUT_CLASSIFICATION	8.897026963032998E-8	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999945468120348	WITHOUT_CLASSIFICATION	5.453187965171187E-6	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999999770924141	WITHOUT_CLASSIFICATION	2.2907585992234037E-8	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999990219955724	WITHOUT_CLASSIFICATION	9.780044276393734E-7	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999999551843	WITHOUT_CLASSIFICATION	4.481564295193415E-11	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999504514359	WITHOUT_CLASSIFICATION	4.9548564094988104E-8	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9999908757742557	WITHOUT_CLASSIFICATION	9.124225744328334E-6	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.8151276235002499	WITHOUT_CLASSIFICATION	0.1848723764997502	IMPLEMENTATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999972064252904	WITHOUT_CLASSIFICATION	2.793574709513122E-6	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9995741435635106	WITHOUT_CLASSIFICATION	4.2585643648951246E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.5373658420105241	IMPLEMENTATION	0.462634157989476	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999955260178	WITHOUT_CLASSIFICATION	4.473982165204543E-9	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999977904239161	WITHOUT_CLASSIFICATION	2.209576083795412E-6	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999999349169743	WITHOUT_CLASSIFICATION	6.508302568789643E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999919332664	WITHOUT_CLASSIFICATION	8.066733608885379E-8	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999580803083	WITHOUT_CLASSIFICATION	4.191969170932335E-8	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999972371958	WITHOUT_CLASSIFICATION	2.7628042398034783E-9	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999825015020689	WITHOUT_CLASSIFICATION	1.7498497931138376E-5	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999879143698589	WITHOUT_CLASSIFICATION	1.2085630141010593E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997273701021	WITHOUT_CLASSIFICATION	2.726298977966995E-7	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999997273701021	WITHOUT_CLASSIFICATION	2.726298977966995E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999953039465	WITHOUT_CLASSIFICATION	4.6960535704887336E-9	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999967491356269	WITHOUT_CLASSIFICATION	3.2508643731622897E-6	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999987434639106	WITHOUT_CLASSIFICATION	1.2565360893256523E-6	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999997418975236	WITHOUT_CLASSIFICATION	2.5810247634687216E-7	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998843526926	WITHOUT_CLASSIFICATION	1.156473073802898E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9986687392903065	WITHOUT_CLASSIFICATION	0.001331260709693441	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998803039046059	WITHOUT_CLASSIFICATION	1.1969609539403318E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999993644974342	WITHOUT_CLASSIFICATION	6.355025657383687E-7	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999999963296825	WITHOUT_CLASSIFICATION	3.6703175385052784E-9	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998798947516	WITHOUT_CLASSIFICATION	1.2010524839016956E-7	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999989967353226	WITHOUT_CLASSIFICATION	1.0032646775436601E-6	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999939699815321	WITHOUT_CLASSIFICATION	6.0300184678800825E-6	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999988449964454	WITHOUT_CLASSIFICATION	1.1550035545138578E-6	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999760114006	WITHOUT_CLASSIFICATION	2.398859947865313E-8	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999998985026777	WITHOUT_CLASSIFICATION	1.0149732222183814E-7	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999983500200234	WITHOUT_CLASSIFICATION	1.649979976585908E-6	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998874955289	WITHOUT_CLASSIFICATION	1.1250447101336142E-7	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.999982944344995	WITHOUT_CLASSIFICATION	1.705565500499552E-5	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999999356526532	WITHOUT_CLASSIFICATION	6.434734684075341E-8	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999685642012818	WITHOUT_CLASSIFICATION	3.143579871825047E-5	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999994369936	WITHOUT_CLASSIFICATION	5.630063185421204E-10	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999992426536741	WITHOUT_CLASSIFICATION	7.573463258960148E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999837823616687	WITHOUT_CLASSIFICATION	1.6217638331286203E-5	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999052347569691	WITHOUT_CLASSIFICATION	9.476524303085902E-5	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9998004169905672	WITHOUT_CLASSIFICATION	1.9958300943270893E-4	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9916997924660935	WITHOUT_CLASSIFICATION	0.00830020753390657	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.989430258023283	WITHOUT_CLASSIFICATION	0.01056974197671696	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997999711835381	WITHOUT_CLASSIFICATION	2.0002881646177649E-4	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999992416978132	WITHOUT_CLASSIFICATION	7.583021867952701E-6	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999837823616687	WITHOUT_CLASSIFICATION	1.6217638331286203E-5	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999999267022973	WITHOUT_CLASSIFICATION	7.329770269966583E-8	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999999618145	WITHOUT_CLASSIFICATION	3.8185371523608736E-11	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.9999948262197238	WITHOUT_CLASSIFICATION	5.1737802762919015E-6	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999936760695693	WITHOUT_CLASSIFICATION	6.323930430696838E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999463147207	WITHOUT_CLASSIFICATION	5.368527932967782E-8	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999975629722768	WITHOUT_CLASSIFICATION	2.4370277232111403E-6	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999948791704085	WITHOUT_CLASSIFICATION	5.1208295914396216E-6	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999601788815	WITHOUT_CLASSIFICATION	3.982111856569813E-8	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993141596264628	WITHOUT_CLASSIFICATION	6.858403735373848E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9999936760695693	WITHOUT_CLASSIFICATION	6.323930430696838E-6	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999977698828	WITHOUT_CLASSIFICATION	2.2301172477095548E-9	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999631828148	WITHOUT_CLASSIFICATION	3.681718519565096E-8	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999693533568877	WITHOUT_CLASSIFICATION	3.064664311231024E-5	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999736371451903	WITHOUT_CLASSIFICATION	2.6362854809642083E-5	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999958429307855	WITHOUT_CLASSIFICATION	4.157069214588527E-6	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999962492969	WITHOUT_CLASSIFICATION	3.750703114973658E-9	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999664279903	WITHOUT_CLASSIFICATION	3.357200971285591E-8	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999998104415081	WITHOUT_CLASSIFICATION	1.8955849190164233E-6	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999998790400467	WITHOUT_CLASSIFICATION	1.209599532840056E-7	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.998493713654587	WITHOUT_CLASSIFICATION	0.0015062863454130293	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999986413086	WITHOUT_CLASSIFICATION	1.3586913365034198E-9	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999998434056504	WITHOUT_CLASSIFICATION	1.565943496260226E-7	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999984564757534	WITHOUT_CLASSIFICATION	1.5435242467454853E-6	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999999898188465	WITHOUT_CLASSIFICATION	1.0181153602530621E-8	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998385344778	WITHOUT_CLASSIFICATION	1.6146552220351516E-7	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999921755710875	WITHOUT_CLASSIFICATION	7.824428912388955E-6	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999830198975088	WITHOUT_CLASSIFICATION	1.6980102491182906E-5	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999384753022	WITHOUT_CLASSIFICATION	6.152469777449535E-8	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999978881121219	WITHOUT_CLASSIFICATION	2.1118878780333307E-6	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.999994561813667	WITHOUT_CLASSIFICATION	5.438186333047654E-6	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999983593841189	WITHOUT_CLASSIFICATION	1.640615881103358E-6	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999920186265892	WITHOUT_CLASSIFICATION	7.981373410815786E-6	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999996051007397	WITHOUT_CLASSIFICATION	3.948992603365888E-7	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999997365075253	WITHOUT_CLASSIFICATION	2.634924746345776E-7	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999989880230246	WITHOUT_CLASSIFICATION	1.0119769755256278E-6	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999993560641455	WITHOUT_CLASSIFICATION	6.439358544361231E-7	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999996404072573	WITHOUT_CLASSIFICATION	3.595927427082946E-6	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999904674418302	WITHOUT_CLASSIFICATION	9.532558169846162E-6	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999982541593104	WITHOUT_CLASSIFICATION	1.7458406895132742E-6	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999999918412	WITHOUT_CLASSIFICATION	8.158771214284969E-12	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9998145362493527	WITHOUT_CLASSIFICATION	1.85463750647261E-4	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9999227764116625	WITHOUT_CLASSIFICATION	7.72235883375043E-5	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999997672231934	WITHOUT_CLASSIFICATION	2.3277680666088084E-7	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550113775019	WITHOUT_CLASSIFICATION	4.498862249807501E-5	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973475530665	WITHOUT_CLASSIFICATION	2.652446933438789E-6	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999842010858172	WITHOUT_CLASSIFICATION	1.579891418275542E-5	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998855525611976	WITHOUT_CLASSIFICATION	1.1444743880242469E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999997172985109	WITHOUT_CLASSIFICATION	2.8270148908875806E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977468267351	WITHOUT_CLASSIFICATION	2.253173264883052E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977468267351	WITHOUT_CLASSIFICATION	2.253173264883052E-6	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999929763502	WITHOUT_CLASSIFICATION	7.02364965447708E-9	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9994673644142601	WITHOUT_CLASSIFICATION	5.32635585739941E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999513788832682	WITHOUT_CLASSIFICATION	4.862111673180669E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999975800026862	WITHOUT_CLASSIFICATION	2.4199973137963627E-5	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999991778338329	WITHOUT_CLASSIFICATION	8.221661670889651E-7	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999968190132451	WITHOUT_CLASSIFICATION	3.1809867548909246E-6	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999997816879005	WITHOUT_CLASSIFICATION	2.1831209956148286E-7	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999997373065405	WITHOUT_CLASSIFICATION	2.6269345956195875E-7	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999878108868	WITHOUT_CLASSIFICATION	1.2189113100873814E-8	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999737261883	WITHOUT_CLASSIFICATION	2.627381170340151E-8	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999988691306495	WITHOUT_CLASSIFICATION	1.1308693504993137E-6	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997056145883	WITHOUT_CLASSIFICATION	2.9438541174437886E-7	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999945390661482	WITHOUT_CLASSIFICATION	5.4609338518272E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977468267351	WITHOUT_CLASSIFICATION	2.253173264883052E-6	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999993237282183	WITHOUT_CLASSIFICATION	6.762717815935896E-7	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.99999768565758	WITHOUT_CLASSIFICATION	2.314342419991061E-6	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9822058270560077	WITHOUT_CLASSIFICATION	0.017794172943992364	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999989993586719	WITHOUT_CLASSIFICATION	1.0006413281698602E-6	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999997436108342	WITHOUT_CLASSIFICATION	2.563891657199471E-7	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999979810980509	WITHOUT_CLASSIFICATION	2.018901949120602E-6	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9974845773574017	WITHOUT_CLASSIFICATION	0.0025154226425982756	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999615548614809	WITHOUT_CLASSIFICATION	3.844513851912039E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999995557516479	WITHOUT_CLASSIFICATION	4.442483521643537E-7	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999933530534004	WITHOUT_CLASSIFICATION	6.646946599574574E-6	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999599519430611	WITHOUT_CLASSIFICATION	4.0048056938925255E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550113775019	WITHOUT_CLASSIFICATION	4.498862249807501E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977468267351	WITHOUT_CLASSIFICATION	2.253173264883052E-6	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999998583756678	WITHOUT_CLASSIFICATION	1.416243321356624E-7	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998955264124	WITHOUT_CLASSIFICATION	1.0447358765925506E-7	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.9999999725402525	WITHOUT_CLASSIFICATION	2.7459747426475416E-8	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999993232261312	WITHOUT_CLASSIFICATION	6.767738687988747E-6	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999513693869524	WITHOUT_CLASSIFICATION	4.8630613047655893E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999980606690961	WITHOUT_CLASSIFICATION	1.9393309038770706E-6	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999537671483	WITHOUT_CLASSIFICATION	4.623285158369508E-8	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999954653854	WITHOUT_CLASSIFICATION	4.534614533226611E-9	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999969259926	WITHOUT_CLASSIFICATION	3.0740073351789022E-9	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999996106739496	WITHOUT_CLASSIFICATION	3.8932605031230827E-7	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998302369777	WITHOUT_CLASSIFICATION	1.697630223849708E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999926197438306	WITHOUT_CLASSIFICATION	7.38025616937437E-6	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999999964985571	WITHOUT_CLASSIFICATION	3.5014428964136704E-8	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999997782912459	WITHOUT_CLASSIFICATION	2.2170875414071456E-7	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999807643386448	WITHOUT_CLASSIFICATION	1.923566135512111E-5	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999996940756	WITHOUT_CLASSIFICATION	3.0592436766183306E-10	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999906943118	WITHOUT_CLASSIFICATION	9.305688250263877E-9	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999999981108325	WITHOUT_CLASSIFICATION	1.8891674568345285E-9	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9999998233454521	WITHOUT_CLASSIFICATION	1.7665454786926151E-7	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999998608446964	WITHOUT_CLASSIFICATION	1.3915530352718814E-7	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999565167716485	WITHOUT_CLASSIFICATION	4.3483228351466436E-5	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999565167716485	WITHOUT_CLASSIFICATION	4.3483228351466436E-5	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999953396367206	WITHOUT_CLASSIFICATION	4.6603632794092E-6	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999919316416	WITHOUT_CLASSIFICATION	8.068358376877908E-9	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9994805874014412	WITHOUT_CLASSIFICATION	5.194125985589294E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9997153791159279	WITHOUT_CLASSIFICATION	2.846208840721738E-4	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999999022000015	WITHOUT_CLASSIFICATION	9.779999849644687E-7	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999996274571525	WITHOUT_CLASSIFICATION	3.7254284744768087E-7	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999951066153719	WITHOUT_CLASSIFICATION	4.893384628057179E-6	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999938509417	WITHOUT_CLASSIFICATION	6.149058231856493E-9	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999938509417	WITHOUT_CLASSIFICATION	6.149058231856493E-9	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999994476922077	WITHOUT_CLASSIFICATION	5.523077922622124E-7	IMPLEMENTATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999996017474333	WITHOUT_CLASSIFICATION	3.982525666984228E-6	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999999137688526	WITHOUT_CLASSIFICATION	8.623114751639687E-8	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999990151345235	WITHOUT_CLASSIFICATION	9.848654766023395E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999990151345235	WITHOUT_CLASSIFICATION	9.848654766023395E-7	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999990151345235	WITHOUT_CLASSIFICATION	9.848654766023395E-7	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999829725265466	WITHOUT_CLASSIFICATION	1.7027473453496526E-5	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998694059211	WITHOUT_CLASSIFICATION	1.305940787789063E-7	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9097269738739239	WITHOUT_CLASSIFICATION	0.09027302612607613	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998026386090042	WITHOUT_CLASSIFICATION	1.9736139099576288E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999999105398129	WITHOUT_CLASSIFICATION	8.946018716531537E-8	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977468267351	WITHOUT_CLASSIFICATION	2.253173264883052E-6	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977468267351	WITHOUT_CLASSIFICATION	2.253173264883052E-6	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999997873101029	WITHOUT_CLASSIFICATION	2.1268989710414696E-6	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999958302935519	WITHOUT_CLASSIFICATION	4.169706448161939E-6	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9992563102461013	WITHOUT_CLASSIFICATION	7.436897538987578E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999732032864	WITHOUT_CLASSIFICATION	2.6796713528887703E-8	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9999964260345781	WITHOUT_CLASSIFICATION	3.5739654219652693E-6	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999996953627895	WITHOUT_CLASSIFICATION	3.0463721036792787E-7	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999974338733665	WITHOUT_CLASSIFICATION	2.5661266336410903E-6	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999997568474918	WITHOUT_CLASSIFICATION	2.4315250830666335E-7	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999564867635	WITHOUT_CLASSIFICATION	4.351323647033583E-8	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999656429213	WITHOUT_CLASSIFICATION	3.43570786623082E-8	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999981988798887	WITHOUT_CLASSIFICATION	1.8011201112738242E-6	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999999612135735	WITHOUT_CLASSIFICATION	3.8786426503618564E-8	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999999612135735	WITHOUT_CLASSIFICATION	3.8786426503618564E-8	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999999703187207	WITHOUT_CLASSIFICATION	2.9681279317409906E-8	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999999703187207	WITHOUT_CLASSIFICATION	2.9681279317409906E-8	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999999704063475	WITHOUT_CLASSIFICATION	2.9593652428243806E-8	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998954793796	WITHOUT_CLASSIFICATION	1.0452062041984873E-7	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999998954793796	WITHOUT_CLASSIFICATION	1.0452062041984873E-7	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998213864826	WITHOUT_CLASSIFICATION	1.786135174667385E-7	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999999081505424	WITHOUT_CLASSIFICATION	9.184945764997576E-8	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998158723657464	WITHOUT_CLASSIFICATION	1.8412763425356386E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999565167716485	WITHOUT_CLASSIFICATION	4.3483228351466436E-5	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999870261091486	WITHOUT_CLASSIFICATION	1.2973890851281735E-5	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999999081505424	WITHOUT_CLASSIFICATION	9.184945764997576E-8	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998296072037464	WITHOUT_CLASSIFICATION	1.7039279625362361E-4	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999733043740162	WITHOUT_CLASSIFICATION	2.6695625983798242E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999569775183	WITHOUT_CLASSIFICATION	4.302248176654607E-8	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999151159928	WITHOUT_CLASSIFICATION	8.488400719869604E-8	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999988220588854	WITHOUT_CLASSIFICATION	1.1779411146771989E-6	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999902410024922	WITHOUT_CLASSIFICATION	9.758997507837768E-6	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999985135021062	WITHOUT_CLASSIFICATION	1.4864978937510442E-6	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999997963240587	WITHOUT_CLASSIFICATION	2.036759413102408E-7	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999996956386487	WITHOUT_CLASSIFICATION	3.043613513037547E-7	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999999927233435	WITHOUT_CLASSIFICATION	7.276656488094339E-9	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999997331617	WITHOUT_CLASSIFICATION	2.66838255967151E-10	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.999999698224392	WITHOUT_CLASSIFICATION	3.0177560802357467E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993914091092	WITHOUT_CLASSIFICATION	6.085908908545689E-7	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999526134864	WITHOUT_CLASSIFICATION	4.7386513623079997E-8	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999506939996443	WITHOUT_CLASSIFICATION	4.930600035568794E-5	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999975428262943	WITHOUT_CLASSIFICATION	2.457173705814528E-6	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999996434186368	WITHOUT_CLASSIFICATION	3.5658136322764477E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998574415089	WITHOUT_CLASSIFICATION	1.4255849121091976E-7	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998574415089	WITHOUT_CLASSIFICATION	1.4255849121091976E-7	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998579696152	WITHOUT_CLASSIFICATION	1.4203038475509358E-7	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999026426741	WITHOUT_CLASSIFICATION	9.73573259080904E-8	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999997263530757	WITHOUT_CLASSIFICATION	2.73646924412339E-7	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998913465455177	WITHOUT_CLASSIFICATION	1.086534544822718E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999999743209309	WITHOUT_CLASSIFICATION	2.5679069106023275E-7	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999451470799041	WITHOUT_CLASSIFICATION	5.4852920095825026E-5	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999947755135876	WITHOUT_CLASSIFICATION	5.224486412390639E-6	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999999419460568	WITHOUT_CLASSIFICATION	5.8053943206316E-7	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999982689864466	WITHOUT_CLASSIFICATION	1.7310135534363397E-6	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999999973073429	WITHOUT_CLASSIFICATION	2.6926570979920514E-8	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999916104245	WITHOUT_CLASSIFICATION	8.389575504752948E-8	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999926197438306	WITHOUT_CLASSIFICATION	7.38025616937437E-6	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998549691256	WITHOUT_CLASSIFICATION	1.4503087443050806E-7	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999869010373215	WITHOUT_CLASSIFICATION	1.309896267855389E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999141494945064	WITHOUT_CLASSIFICATION	8.585050549361665E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999852900091821	WITHOUT_CLASSIFICATION	1.4709990817787372E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999445754417	WITHOUT_CLASSIFICATION	5.542455822759443E-8	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999445754417	WITHOUT_CLASSIFICATION	5.542455822759443E-8	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999657680866685	WITHOUT_CLASSIFICATION	3.4231913331441616E-5	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999984638771569	WITHOUT_CLASSIFICATION	1.5361228431856778E-6	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999598828449245	WITHOUT_CLASSIFICATION	4.0117155075422686E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999955529765494	WITHOUT_CLASSIFICATION	4.447023450529542E-6	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999987513288064	WITHOUT_CLASSIFICATION	1.2486711936432108E-6	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999987458639242	WITHOUT_CLASSIFICATION	1.2541360757462454E-6	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998888677625478	WITHOUT_CLASSIFICATION	1.1113223745218695E-4	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998928659383	WITHOUT_CLASSIFICATION	1.0713406172567909E-7	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99990306948196	WITHOUT_CLASSIFICATION	9.693051804007806E-5	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999808230972	WITHOUT_CLASSIFICATION	1.91769028344055E-8	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999869029835	WITHOUT_CLASSIFICATION	1.3097016544924095E-8	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999998928659383	WITHOUT_CLASSIFICATION	1.0713406172567909E-7	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999994619327892	WITHOUT_CLASSIFICATION	5.380672108418518E-7	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999968210152611	WITHOUT_CLASSIFICATION	3.1789847389492087E-6	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999999939630507	WITHOUT_CLASSIFICATION	6.036949233271125E-9	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999999947932867	WITHOUT_CLASSIFICATION	5.206713224262455E-9	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998836839443	WITHOUT_CLASSIFICATION	1.1631605560464372E-7	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999444202966	WITHOUT_CLASSIFICATION	5.557970332690451E-8	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999926193579586	WITHOUT_CLASSIFICATION	7.3806420414100474E-6	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999993477563194	WITHOUT_CLASSIFICATION	6.522436805947841E-7	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999985045882	WITHOUT_CLASSIFICATION	1.4954118417410272E-9	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998756995908461	WITHOUT_CLASSIFICATION	1.2430040915390573E-4	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9982851094411188	WITHOUT_CLASSIFICATION	0.0017148905588813105	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999944392347	WITHOUT_CLASSIFICATION	5.5607652817785484E-9	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999996546123541	WITHOUT_CLASSIFICATION	3.453876460213838E-7	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999935687180994	WITHOUT_CLASSIFICATION	6.431281900544205E-6	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999046971924452	WITHOUT_CLASSIFICATION	9.530280755476338E-5	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999999719582461	WITHOUT_CLASSIFICATION	2.80417538999407E-7	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999992899661	WITHOUT_CLASSIFICATION	7.100338992396292E-9	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999717527760745	WITHOUT_CLASSIFICATION	2.824722392546648E-5	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999941400334765	WITHOUT_CLASSIFICATION	5.859966523419252E-6	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999879961233836	WITHOUT_CLASSIFICATION	1.2003876616392636E-5	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999999334677194	WITHOUT_CLASSIFICATION	6.653228058854884E-7	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999993809790477	WITHOUT_CLASSIFICATION	6.190209522023757E-7	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999868380199207	WITHOUT_CLASSIFICATION	1.3161980079272476E-5	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999999552575927	WITHOUT_CLASSIFICATION	4.474240728715695E-8	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999554809857	WITHOUT_CLASSIFICATION	4.451901416211735E-8	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.999932274673806	WITHOUT_CLASSIFICATION	6.772532619399688E-5	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999986266715305	WITHOUT_CLASSIFICATION	1.3733284694820273E-6	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999877016285271	WITHOUT_CLASSIFICATION	1.2298371472890112E-5	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998648977441	WITHOUT_CLASSIFICATION	1.3510225598996506E-7	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999877453117767	WITHOUT_CLASSIFICATION	1.2254688223407234E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999992366622946	WITHOUT_CLASSIFICATION	7.633377054962085E-7	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999982771953163	WITHOUT_CLASSIFICATION	1.722804683799801E-6	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999650151760101	WITHOUT_CLASSIFICATION	3.4984823989793216E-5	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999994383811	WITHOUT_CLASSIFICATION	5.616188693009843E-10	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999278933399	WITHOUT_CLASSIFICATION	7.210666013207324E-8	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999999503899998	WITHOUT_CLASSIFICATION	4.961000019843039E-7	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999193111961	WITHOUT_CLASSIFICATION	8.068880388066814E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999892121062	WITHOUT_CLASSIFICATION	1.0787893761036448E-8	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998988133426	WITHOUT_CLASSIFICATION	1.0118665734088881E-7	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999963611078988	WITHOUT_CLASSIFICATION	3.638892101174279E-6	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999910195645821	WITHOUT_CLASSIFICATION	8.980435417879746E-6	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999990620718525	WITHOUT_CLASSIFICATION	9.379281476279026E-7	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999937581485917	WITHOUT_CLASSIFICATION	6.2418514083234686E-6	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999373207007	WITHOUT_CLASSIFICATION	6.267929929999848E-8	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999999847509892	WITHOUT_CLASSIFICATION	1.524901079788664E-8	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999999982801952	WITHOUT_CLASSIFICATION	1.7198047970303546E-8	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999999925113477	WITHOUT_CLASSIFICATION	7.4886522199102E-9	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999991028360102	WITHOUT_CLASSIFICATION	8.971639897444618E-7	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999999429996093	WITHOUT_CLASSIFICATION	5.700039064278297E-8	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999993024875348	WITHOUT_CLASSIFICATION	6.975124651196316E-7	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818798582379	WITHOUT_CLASSIFICATION	1.8120141762070645E-5	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999997229737954	WITHOUT_CLASSIFICATION	2.7702620464234165E-7	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999999998462972	WITHOUT_CLASSIFICATION	1.5370279738354618E-9	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999992354047	WITHOUT_CLASSIFICATION	7.645951959845147E-10	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998767317299	WITHOUT_CLASSIFICATION	1.2326827008982045E-7	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999989471610046	WITHOUT_CLASSIFICATION	1.052838995363406E-6	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999547761565506	WITHOUT_CLASSIFICATION	4.522384344948327E-5	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999966152145232	WITHOUT_CLASSIFICATION	3.3847854768652133E-6	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999998154863826	WITHOUT_CLASSIFICATION	1.8451361729596135E-7	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999986621697	WITHOUT_CLASSIFICATION	1.3378302390026137E-9	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999995055962252	WITHOUT_CLASSIFICATION	4.944037747743677E-7	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999428648404487	WITHOUT_CLASSIFICATION	5.7135159551272816E-5	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999647451035635	WITHOUT_CLASSIFICATION	3.5254896436492764E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999999999618264	WITHOUT_CLASSIFICATION	3.8173558119233195E-11	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999999503902692	WITHOUT_CLASSIFICATION	4.960973069940039E-8	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999967372726031	WITHOUT_CLASSIFICATION	3.262727396992402E-6	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818798582379	WITHOUT_CLASSIFICATION	1.8120141762070645E-5	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999997563970259	WITHOUT_CLASSIFICATION	2.4360297409860293E-6	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999995131113451	WITHOUT_CLASSIFICATION	4.868886549004617E-6	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999685091623	WITHOUT_CLASSIFICATION	3.1490837626563637E-8	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999992112787568	WITHOUT_CLASSIFICATION	7.887212432547844E-7	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999861446959978	WITHOUT_CLASSIFICATION	1.385530400218572E-5	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999999256133694	WITHOUT_CLASSIFICATION	7.438663073461276E-8	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99990306948196	WITHOUT_CLASSIFICATION	9.693051804007806E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996862900538861	WITHOUT_CLASSIFICATION	3.137099461138769E-4	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999278933399	WITHOUT_CLASSIFICATION	7.210666013207324E-8	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999800719159285	WITHOUT_CLASSIFICATION	1.9928084071475204E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998868569366	WITHOUT_CLASSIFICATION	1.1314306337511185E-7	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999984446962	WITHOUT_CLASSIFICATION	1.555303787768749E-9	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999917441311	WITHOUT_CLASSIFICATION	8.25586892313087E-9	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.99999885636695	WITHOUT_CLASSIFICATION	1.1436330500393942E-6	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999953106892789	WITHOUT_CLASSIFICATION	4.6893107210576E-6	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999633291323	WITHOUT_CLASSIFICATION	3.6670867575446304E-8	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999783731927	WITHOUT_CLASSIFICATION	2.162680730653441E-8	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999935597903257	WITHOUT_CLASSIFICATION	6.440209674279726E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999993304082	WITHOUT_CLASSIFICATION	6.695918221936523E-10	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999950932699685	WITHOUT_CLASSIFICATION	4.9067300314476994E-6	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999606366878766	WITHOUT_CLASSIFICATION	3.93633121234718E-5	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999886694613	WITHOUT_CLASSIFICATION	1.1330538696799793E-8	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999886694613	WITHOUT_CLASSIFICATION	1.1330538696799793E-8	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999851058434	WITHOUT_CLASSIFICATION	1.4894156586868532E-8	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999957994185432	WITHOUT_CLASSIFICATION	4.20058145679632E-6	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999997294197	WITHOUT_CLASSIFICATION	2.7058034428991207E-10	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999952280804	WITHOUT_CLASSIFICATION	4.771919654777961E-9	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999979114975	WITHOUT_CLASSIFICATION	2.0885025037562274E-8	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999995789233108	WITHOUT_CLASSIFICATION	4.210766891748047E-7	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999999989758602	WITHOUT_CLASSIFICATION	1.0241397228203516E-9	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999995322699842	WITHOUT_CLASSIFICATION	4.6773001582512997E-7	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999119161261	WITHOUT_CLASSIFICATION	8.808387386005495E-8	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999800256888	WITHOUT_CLASSIFICATION	1.997431117425463E-8	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999950674635251	WITHOUT_CLASSIFICATION	4.932536474878895E-6	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999949600771859	WITHOUT_CLASSIFICATION	5.0399228140771365E-6	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999985451492256	WITHOUT_CLASSIFICATION	1.454850774393497E-6	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999679175785	WITHOUT_CLASSIFICATION	3.208242148453723E-8	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999515554798245	WITHOUT_CLASSIFICATION	4.844452017537547E-5	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999998209528026	WITHOUT_CLASSIFICATION	1.7904719727854512E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999999541018088	WITHOUT_CLASSIFICATION	4.589819130316392E-8	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999944296919	WITHOUT_CLASSIFICATION	5.5703081660236095E-9	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999997824858025	WITHOUT_CLASSIFICATION	2.175141976537306E-7	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999999645922336	WITHOUT_CLASSIFICATION	3.540776629586658E-8	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999987357841084	WITHOUT_CLASSIFICATION	1.264215891624292E-6	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999974291078	WITHOUT_CLASSIFICATION	2.5708921036664126E-9	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999992317439683	WITHOUT_CLASSIFICATION	7.68256031760482E-7	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9984550037363566	WITHOUT_CLASSIFICATION	0.0015449962636433744	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.997968007596821	WITHOUT_CLASSIFICATION	0.002031992403178949	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992929583929	WITHOUT_CLASSIFICATION	7.070416070995705E-6	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998806754268	WITHOUT_CLASSIFICATION	1.1932457319869458E-7	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999995557875725	WITHOUT_CLASSIFICATION	4.442124275423175E-7	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998963203784	WITHOUT_CLASSIFICATION	1.0367962152833323E-7	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999994257092619	WITHOUT_CLASSIFICATION	5.742907380969965E-7	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9981255403895656	WITHOUT_CLASSIFICATION	0.0018744596104344471	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999989279746465	WITHOUT_CLASSIFICATION	1.0720253535594604E-6	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999988470813583	WITHOUT_CLASSIFICATION	1.1529186416163992E-6	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9911255337914278	WITHOUT_CLASSIFICATION	0.008874466208572296	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999997527465085	WITHOUT_CLASSIFICATION	2.4725349149908226E-6	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999076866443	WITHOUT_CLASSIFICATION	9.231335570050903E-7	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999967096816537	WITHOUT_CLASSIFICATION	3.290318346311799E-6	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9995040433710073	WITHOUT_CLASSIFICATION	4.959566289927278E-4	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.999999802950691	WITHOUT_CLASSIFICATION	1.9704930903646185E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998057323621	WITHOUT_CLASSIFICATION	1.9426763786747956E-7	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999931640221391	WITHOUT_CLASSIFICATION	6.835977860896902E-5	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999996184703227	WITHOUT_CLASSIFICATION	3.815296773066467E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999972555395759	WITHOUT_CLASSIFICATION	2.7444604241052474E-6	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999978291442088	WITHOUT_CLASSIFICATION	2.170855791209325E-6	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999985230852966	WITHOUT_CLASSIFICATION	1.4769147034733998E-6	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998343166375289	WITHOUT_CLASSIFICATION	1.6568336247110266E-4	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9993640282482426	WITHOUT_CLASSIFICATION	6.359717517575274E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999971474631963	WITHOUT_CLASSIFICATION	2.85253680365904E-6	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999853492510081	WITHOUT_CLASSIFICATION	1.4650748991882132E-5	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999460185358248	WITHOUT_CLASSIFICATION	5.3981464175208175E-5	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991516156281	WITHOUT_CLASSIFICATION	8.483843719002364E-7	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9996008489794361	WITHOUT_CLASSIFICATION	3.99151020563916E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999857809222	WITHOUT_CLASSIFICATION	1.421907781933518E-8	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999998693197461	WITHOUT_CLASSIFICATION	1.306802538896862E-6	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999974524322581	WITHOUT_CLASSIFICATION	2.5475677417923817E-6	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999995901292522	WITHOUT_CLASSIFICATION	4.0987074775567363E-7	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999252228202	WITHOUT_CLASSIFICATION	7.477717978590144E-8	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999687499034763	WITHOUT_CLASSIFICATION	3.125009652372021E-5	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9999979493339801	WITHOUT_CLASSIFICATION	2.0506660198777317E-6	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999999848964438	WITHOUT_CLASSIFICATION	1.5103556181203884E-7	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999997760606876	WITHOUT_CLASSIFICATION	2.2393931231481925E-7	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999999824438878	WITHOUT_CLASSIFICATION	1.7556112158265887E-8	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999977026674071	WITHOUT_CLASSIFICATION	2.297332592895004E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999976437482154	WITHOUT_CLASSIFICATION	2.3562517847108286E-6	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999999883252185	WITHOUT_CLASSIFICATION	1.1674781502156768E-7	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999999998782377	WITHOUT_CLASSIFICATION	1.217622959913155E-9	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999398351187	WITHOUT_CLASSIFICATION	6.016488132088001E-8	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999996896405607	WITHOUT_CLASSIFICATION	3.103594393092922E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999913568937864	WITHOUT_CLASSIFICATION	8.643106213544773E-6	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999986366229617	WITHOUT_CLASSIFICATION	1.3633770382699831E-6	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999913568937864	WITHOUT_CLASSIFICATION	8.643106213544773E-6	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999838813057	WITHOUT_CLASSIFICATION	1.6118694242709607E-8	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999991259778032	WITHOUT_CLASSIFICATION	8.740221968812003E-7	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999656810476916	WITHOUT_CLASSIFICATION	3.4318952308527506E-5	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999833135870585	WITHOUT_CLASSIFICATION	1.6686412941537666E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999982400147175	WITHOUT_CLASSIFICATION	1.7599852825744445E-6	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999922265816075	WITHOUT_CLASSIFICATION	7.773418392454481E-6	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999999847846736	WITHOUT_CLASSIFICATION	1.5215326462502818E-8	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999949048552	WITHOUT_CLASSIFICATION	5.095144758943377E-9	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999998951430812	WITHOUT_CLASSIFICATION	1.0485691873650807E-7	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999975692730947	WITHOUT_CLASSIFICATION	2.4307269052477643E-6	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998139677633	WITHOUT_CLASSIFICATION	1.860322367291074E-7	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999999917858825	WITHOUT_CLASSIFICATION	8.214117498370182E-8	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999419335988	WITHOUT_CLASSIFICATION	5.806640131760279E-8	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999977594072406	WITHOUT_CLASSIFICATION	2.2405927593284695E-6	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9998442353171482	WITHOUT_CLASSIFICATION	1.5576468285184302E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999996914884209	WITHOUT_CLASSIFICATION	3.0851157905866816E-7	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999994676845402	WITHOUT_CLASSIFICATION	5.323154598633801E-7	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999854664218	WITHOUT_CLASSIFICATION	1.4533578224257706E-8	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998727988368	WITHOUT_CLASSIFICATION	1.2720116315403523E-7	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999356668913	WITHOUT_CLASSIFICATION	6.433310865377902E-8	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999824027718	WITHOUT_CLASSIFICATION	1.7597228204704598E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999052488673161	WITHOUT_CLASSIFICATION	9.475113268392326E-5	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9993682455810508	WITHOUT_CLASSIFICATION	6.317544189492448E-4	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998833027384911	WITHOUT_CLASSIFICATION	1.1669726150877346E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999934842499589	WITHOUT_CLASSIFICATION	6.515750041187126E-6	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999768983245	WITHOUT_CLASSIFICATION	2.310167544236933E-8	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.999997878930671	WITHOUT_CLASSIFICATION	2.121069328964564E-6	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9999941753327567	WITHOUT_CLASSIFICATION	5.82466724339089E-6	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999415893125	WITHOUT_CLASSIFICATION	5.841068749828097E-7	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999943283843391	WITHOUT_CLASSIFICATION	5.671615660903908E-6	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9999985119404173	WITHOUT_CLASSIFICATION	1.4880595826050544E-6	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999965978795794	WITHOUT_CLASSIFICATION	3.4021204207241924E-6	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999998190376	WITHOUT_CLASSIFICATION	1.8096229376431265E-10	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999997948149215	WITHOUT_CLASSIFICATION	2.0518507847436911E-7	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999866150514728	WITHOUT_CLASSIFICATION	1.3384948527119856E-5	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9999983531032851	WITHOUT_CLASSIFICATION	1.6468967148415372E-6	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999970200694482	WITHOUT_CLASSIFICATION	2.9799305516762165E-6	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997090214371	WITHOUT_CLASSIFICATION	2.909785629709883E-7	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9999419363838621	WITHOUT_CLASSIFICATION	5.806361613779171E-5	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999999430840317	WITHOUT_CLASSIFICATION	5.691596832157599E-8	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9999999927995044	WITHOUT_CLASSIFICATION	7.2004957409032524E-9	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999521011375337	WITHOUT_CLASSIFICATION	4.789886246626705E-5	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999999539241455	WITHOUT_CLASSIFICATION	4.6075854376035964E-8	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999999768983245	WITHOUT_CLASSIFICATION	2.310167544236933E-8	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999333118212098	WITHOUT_CLASSIFICATION	6.668817879025441E-5	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.9999997292585449	WITHOUT_CLASSIFICATION	2.7074145513704753E-7	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999874835387057	WITHOUT_CLASSIFICATION	1.2516461294297851E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999936713413	WITHOUT_CLASSIFICATION	6.3286586678845576E-9	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9999955866377567	WITHOUT_CLASSIFICATION	4.41336224330037E-6	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999999904479836	WITHOUT_CLASSIFICATION	9.5520163879094E-9	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999977424774923	WITHOUT_CLASSIFICATION	2.257522507680542E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999095437326107	WITHOUT_CLASSIFICATION	9.045626738923768E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999958282274474	WITHOUT_CLASSIFICATION	4.171772552607803E-6	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999999369441172	WITHOUT_CLASSIFICATION	6.305588283153897E-8	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9997375160356655	WITHOUT_CLASSIFICATION	2.624839643344013E-4	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999722849144	WITHOUT_CLASSIFICATION	2.771508559226045E-8	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999957890348143	WITHOUT_CLASSIFICATION	4.210965185729347E-6	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999964673974248	WITHOUT_CLASSIFICATION	3.53260257528881E-6	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999999916727944	WITHOUT_CLASSIFICATION	8.327205510779166E-9	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999955243943	WITHOUT_CLASSIFICATION	4.4756056930347735E-9	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999447386372	WITHOUT_CLASSIFICATION	5.526136272533706E-8	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998545088262	WITHOUT_CLASSIFICATION	1.4549117377245176E-7	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999955485990116	WITHOUT_CLASSIFICATION	4.4514009883446035E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9999333118212098	WITHOUT_CLASSIFICATION	6.668817879025441E-5	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999911538832912	WITHOUT_CLASSIFICATION	8.84611670879648E-6	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999999959806959	WITHOUT_CLASSIFICATION	4.0193040893784674E-8	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999996767073346	WITHOUT_CLASSIFICATION	3.23292665463999E-7	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997135826135	WITHOUT_CLASSIFICATION	2.864173864698242E-7	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999999947619626	WITHOUT_CLASSIFICATION	5.238037426127138E-9	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.980539738138065	WITHOUT_CLASSIFICATION	0.01946026186193493	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.980539738138065	WITHOUT_CLASSIFICATION	0.01946026186193493	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999991774680649	WITHOUT_CLASSIFICATION	8.225319352146193E-7	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.980539738138065	WITHOUT_CLASSIFICATION	0.01946026186193493	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.980539738138065	WITHOUT_CLASSIFICATION	0.01946026186193493	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999606578128363	WITHOUT_CLASSIFICATION	3.934218716376943E-5	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999818281578	WITHOUT_CLASSIFICATION	1.8171842209398371E-7	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999999843389261	WITHOUT_CLASSIFICATION	1.5661073908092233E-7	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999966913334986	WITHOUT_CLASSIFICATION	3.308666501404711E-6	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997071630405	WITHOUT_CLASSIFICATION	2.9283695940046717E-7	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999220624511798	WITHOUT_CLASSIFICATION	7.793754882022315E-5	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996981257840091	WITHOUT_CLASSIFICATION	3.018742159909442E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999996445962843	WITHOUT_CLASSIFICATION	3.554037157871767E-7	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999864016469342	WITHOUT_CLASSIFICATION	1.359835306581417E-5	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999431759433722	WITHOUT_CLASSIFICATION	5.682405662782181E-5	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999707177745246	WITHOUT_CLASSIFICATION	2.9282225475350225E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999840697977326	WITHOUT_CLASSIFICATION	1.5930202267361346E-5	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999996621057193	WITHOUT_CLASSIFICATION	3.37894280697431E-7	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999683948857236	WITHOUT_CLASSIFICATION	3.16051142763784E-5	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999997255805879	WITHOUT_CLASSIFICATION	2.744194120785328E-7	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999578229138092	WITHOUT_CLASSIFICATION	4.217708619070016E-5	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995512721391	WITHOUT_CLASSIFICATION	4.4872786092598255E-7	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999976442529356	WITHOUT_CLASSIFICATION	2.355747064386364E-6	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999223508096089	WITHOUT_CLASSIFICATION	7.764919039104809E-5	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999682822536474	WITHOUT_CLASSIFICATION	3.1717746352646896E-5	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999636149550405	WITHOUT_CLASSIFICATION	3.638504495953564E-5	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9999987442571008	WITHOUT_CLASSIFICATION	1.2557428991967145E-6	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999995512721391	WITHOUT_CLASSIFICATION	4.4872786092598255E-7	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.999997878930671	WITHOUT_CLASSIFICATION	2.121069328964564E-6	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9998279000557891	WITHOUT_CLASSIFICATION	1.7209994421082063E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995009928082	WITHOUT_CLASSIFICATION	4.990071918742665E-7	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998116624317	WITHOUT_CLASSIFICATION	1.883375684092589E-7	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9999852659411728	WITHOUT_CLASSIFICATION	1.4734058827140274E-5	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999957371038418	WITHOUT_CLASSIFICATION	4.262896158219872E-6	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9999997702359174	WITHOUT_CLASSIFICATION	2.2976408263830354E-7	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9911270144901778	WITHOUT_CLASSIFICATION	0.008872985509822157	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999990925751221	WITHOUT_CLASSIFICATION	9.074248779134395E-6	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999989039544	WITHOUT_CLASSIFICATION	1.0960456000076713E-5	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998806244360325	WITHOUT_CLASSIFICATION	1.1937556396747624E-4	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999999350542	WITHOUT_CLASSIFICATION	6.494582418809134E-11	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999999315372472	WITHOUT_CLASSIFICATION	6.846275276248004E-8	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999991090498783	WITHOUT_CLASSIFICATION	8.909501215847967E-7	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999403909725043	WITHOUT_CLASSIFICATION	5.960902749571968E-5	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999992273525	WITHOUT_CLASSIFICATION	7.726474093536139E-10	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999999484351892	WITHOUT_CLASSIFICATION	5.1564810781519056E-8	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998493020280832	WITHOUT_CLASSIFICATION	1.506979719168488E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999995548493	WITHOUT_CLASSIFICATION	4.451507126517347E-9	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999986532421499	WITHOUT_CLASSIFICATION	1.3467578500176178E-6	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9996745983843591	WITHOUT_CLASSIFICATION	3.2540161564081845E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999928718324421	WITHOUT_CLASSIFICATION	7.128167557943936E-6	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999994009193127	WITHOUT_CLASSIFICATION	5.990806873552527E-7	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999990925751221	WITHOUT_CLASSIFICATION	9.074248779134395E-6	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999933845610088	WITHOUT_CLASSIFICATION	6.615438991165145E-6	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9999898750127276	WITHOUT_CLASSIFICATION	1.0124987272384866E-5	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9995239676485548	WITHOUT_CLASSIFICATION	4.7603235144522826E-4	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999996196385017	WITHOUT_CLASSIFICATION	3.803614982835252E-7	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985979584907	WITHOUT_CLASSIFICATION	1.4020415092721013E-6	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9999921900946261	WITHOUT_CLASSIFICATION	7.809905373849875E-6	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.999998711359114	WITHOUT_CLASSIFICATION	1.2886408860567719E-6	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.9999996634755037	WITHOUT_CLASSIFICATION	3.365244962450121E-7	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.9999990529330993	WITHOUT_CLASSIFICATION	9.470669007291177E-7	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9997967922874814	WITHOUT_CLASSIFICATION	2.032077125185932E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999980931999325	WITHOUT_CLASSIFICATION	1.906800067469479E-6	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999014882188	WITHOUT_CLASSIFICATION	9.85117812125075E-8	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9996054254235767	WITHOUT_CLASSIFICATION	3.945745764233817E-4	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999925346066	WITHOUT_CLASSIFICATION	7.465393362909015E-9	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999503116139	WITHOUT_CLASSIFICATION	4.968838600597812E-8	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999999356768634	WITHOUT_CLASSIFICATION	6.43231366035873E-8	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999972359580414	WITHOUT_CLASSIFICATION	2.764041958637675E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999980931999325	WITHOUT_CLASSIFICATION	1.906800067469479E-6	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999996587076	WITHOUT_CLASSIFICATION	3.412924104429335E-10	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999987554162774	WITHOUT_CLASSIFICATION	1.2445837227179993E-6	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999999663531256	WITHOUT_CLASSIFICATION	3.3646874336603604E-8	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999844501765017	WITHOUT_CLASSIFICATION	1.5549823498295837E-5	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9999996404197271	WITHOUT_CLASSIFICATION	3.595802729194653E-7	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999989405085248	WITHOUT_CLASSIFICATION	1.0594914752242864E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999503116139	WITHOUT_CLASSIFICATION	4.968838600597812E-8	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999981142100292	WITHOUT_CLASSIFICATION	1.8857899707601111E-6	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997259336034	WITHOUT_CLASSIFICATION	2.740663966476693E-7	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999102424197	WITHOUT_CLASSIFICATION	8.97575801847928E-8	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964307652885483	WITHOUT_CLASSIFICATION	0.0035692347114517414	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9691590703858216	WITHOUT_CLASSIFICATION	0.03084092961417834	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9853486469732735	WITHOUT_CLASSIFICATION	0.014651353026726481	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998455829353	WITHOUT_CLASSIFICATION	1.5441706472326552E-7	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998455829353	WITHOUT_CLASSIFICATION	1.5441706472326552E-7	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.99999994359959	WITHOUT_CLASSIFICATION	5.6400409907399215E-8	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999998227412812	WITHOUT_CLASSIFICATION	1.7725871880977178E-7	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999997195432464	WITHOUT_CLASSIFICATION	2.80456753583465E-7	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9999997151568942	WITHOUT_CLASSIFICATION	2.8484310576313824E-7	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999939457485274	WITHOUT_CLASSIFICATION	6.054251472509182E-6	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999660452266	WITHOUT_CLASSIFICATION	3.395477351160384E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996487411386	WITHOUT_CLASSIFICATION	3.512588614527153E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991956441147	WITHOUT_CLASSIFICATION	8.043558853865569E-7	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999997643666245	WITHOUT_CLASSIFICATION	2.3563337551339595E-7	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999956720307	WITHOUT_CLASSIFICATION	4.327969309017786E-8	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999660452266	WITHOUT_CLASSIFICATION	3.395477351160384E-8	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996487411386	WITHOUT_CLASSIFICATION	3.512588614527153E-7	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991956441147	WITHOUT_CLASSIFICATION	8.043558853865569E-7	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.999999996831135	WITHOUT_CLASSIFICATION	3.168864861126159E-9	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9999117863933495	WITHOUT_CLASSIFICATION	8.821360665044818E-5	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999978999796	WITHOUT_CLASSIFICATION	2.100020487876888E-9	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999982930053621	WITHOUT_CLASSIFICATION	1.7069946377739624E-6	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999272445963	WITHOUT_CLASSIFICATION	7.275540374434177E-8	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999999959373284	WITHOUT_CLASSIFICATION	4.06267159993683E-8	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999969713832373	WITHOUT_CLASSIFICATION	3.0286167626399932E-6	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999979327159649	WITHOUT_CLASSIFICATION	2.0672840350830934E-6	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.9999973898702827	WITHOUT_CLASSIFICATION	2.6101297172566073E-6	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999937224029115	WITHOUT_CLASSIFICATION	6.277597088501742E-6	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999963225099	WITHOUT_CLASSIFICATION	3.677489984182986E-9	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999963967084002	WITHOUT_CLASSIFICATION	3.6032915998744984E-6	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999955070446391	WITHOUT_CLASSIFICATION	4.492955360797686E-6	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999403635302	WITHOUT_CLASSIFICATION	5.963646976626252E-8	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999975837845407	WITHOUT_CLASSIFICATION	2.416215459223402E-6	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999998725294097	WITHOUT_CLASSIFICATION	1.2747059027669767E-7	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999968424003227	WITHOUT_CLASSIFICATION	3.1575996773095055E-6	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999723977219145	WITHOUT_CLASSIFICATION	2.7602278085533368E-5	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999998773941705	WITHOUT_CLASSIFICATION	1.2260582953402857E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999983438865577	WITHOUT_CLASSIFICATION	1.656113442190464E-6	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999999755298177	WITHOUT_CLASSIFICATION	2.447018236296095E-8	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.988169005270493	WITHOUT_CLASSIFICATION	0.011830994729507029	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999857156426499	WITHOUT_CLASSIFICATION	1.4284357350077615E-5	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999989925667384	WITHOUT_CLASSIFICATION	1.0074332616013703E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999997291472	WITHOUT_CLASSIFICATION	2.7085287033545345E-10	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9985537631457457	WITHOUT_CLASSIFICATION	0.001446236854254209	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999937210983	WITHOUT_CLASSIFICATION	6.278901698027871E-8	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989493169584	WITHOUT_CLASSIFICATION	1.0506830415793984E-6	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999942722082	WITHOUT_CLASSIFICATION	5.727791758435014E-9	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998514717857	WITHOUT_CLASSIFICATION	1.4852821435882415E-7	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999964123683	WITHOUT_CLASSIFICATION	3.587631698887468E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998894406146	WITHOUT_CLASSIFICATION	1.1055938536943448E-7	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998894406146	WITHOUT_CLASSIFICATION	1.1055938536943448E-7	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999997929964	WITHOUT_CLASSIFICATION	2.07003562065948E-10	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999997015048	WITHOUT_CLASSIFICATION	2.984951642592938E-10	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999955168001654	WITHOUT_CLASSIFICATION	4.48319983459865E-5	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999926197438306	WITHOUT_CLASSIFICATION	7.38025616937437E-6	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999395231793283	WITHOUT_CLASSIFICATION	6.0476820671703366E-5	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999999826899023	WITHOUT_CLASSIFICATION	1.7310097662534827E-8	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999982570844519	WITHOUT_CLASSIFICATION	1.7429155480820361E-6	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9999966422000234	WITHOUT_CLASSIFICATION	3.3577999765927284E-6	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9999963005558348	WITHOUT_CLASSIFICATION	3.699444165219608E-6	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999611679835	WITHOUT_CLASSIFICATION	3.8832016521877194E-8	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999068905956	WITHOUT_CLASSIFICATION	9.310940441705944E-8	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999533619887	WITHOUT_CLASSIFICATION	4.6638011328978694E-8	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999487642192	WITHOUT_CLASSIFICATION	5.1235780738518794E-8	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999865705426	WITHOUT_CLASSIFICATION	1.3429457433996618E-8	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999573044669	WITHOUT_CLASSIFICATION	4.269553303572682E-8	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999964270016	WITHOUT_CLASSIFICATION	3.5729983987017325E-8	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997498294104	WITHOUT_CLASSIFICATION	2.50170589604221E-7	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999359668239	WITHOUT_CLASSIFICATION	6.403317611803162E-8	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997526240502	WITHOUT_CLASSIFICATION	2.4737594980676723E-7	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999546746918	WITHOUT_CLASSIFICATION	4.532530821997221E-8	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999982050216324	WITHOUT_CLASSIFICATION	1.7949783675748933E-6	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.99999840207031	WITHOUT_CLASSIFICATION	1.5979296900622951E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999963469932736	WITHOUT_CLASSIFICATION	3.6530067264883328E-6	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999979856769895	WITHOUT_CLASSIFICATION	2.014323010551427E-6	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999724032381	WITHOUT_CLASSIFICATION	2.7596761833793867E-8	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999821578547916	WITHOUT_CLASSIFICATION	1.7842145208416986E-5	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999998537159231	WITHOUT_CLASSIFICATION	1.462840767615468E-7	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9984630240108259	WITHOUT_CLASSIFICATION	0.0015369759891741103	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999963469932736	WITHOUT_CLASSIFICATION	3.6530067264883328E-6	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999963469932736	WITHOUT_CLASSIFICATION	3.6530067264883328E-6	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9997583554231431	WITHOUT_CLASSIFICATION	2.4164457685701572E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999987648264445	WITHOUT_CLASSIFICATION	1.2351735556200001E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999993721678	WITHOUT_CLASSIFICATION	6.278322061330656E-9	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999964250023529	WITHOUT_CLASSIFICATION	3.5749976471244335E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993914091092	WITHOUT_CLASSIFICATION	6.085908908545689E-7	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999983438865577	WITHOUT_CLASSIFICATION	1.656113442190464E-6	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999997505128715	WITHOUT_CLASSIFICATION	2.494871284943721E-7	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999981873253524	WITHOUT_CLASSIFICATION	1.812674647700182E-6	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999999937359623	WITHOUT_CLASSIFICATION	6.2640377977296816E-9	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890997397379	WITHOUT_CLASSIFICATION	1.0900260262011152E-5	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9988510796906687	WITHOUT_CLASSIFICATION	0.0011489203093313386	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978698377162	WITHOUT_CLASSIFICATION	2.1301622837990376E-6	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997667727906	WITHOUT_CLASSIFICATION	2.33227209445736E-7	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999997667727906	WITHOUT_CLASSIFICATION	2.33227209445736E-7	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999637026189	WITHOUT_CLASSIFICATION	3.629738111379179E-8	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999637026189	WITHOUT_CLASSIFICATION	3.629738111379179E-8	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999610231611446	WITHOUT_CLASSIFICATION	3.897683885539877E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999983548215	WITHOUT_CLASSIFICATION	1.6451785187909613E-9	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999998704450652	WITHOUT_CLASSIFICATION	1.2955493467434701E-7	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998588907360199	WITHOUT_CLASSIFICATION	1.4110926398007147E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999981107584444	WITHOUT_CLASSIFICATION	1.8892415556411609E-6	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999937254595335	WITHOUT_CLASSIFICATION	6.274540466567583E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969931384721	WITHOUT_CLASSIFICATION	3.0068615278659708E-6	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999824912195	WITHOUT_CLASSIFICATION	1.750878050052807E-7	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999999996361349	WITHOUT_CLASSIFICATION	3.6386509285291383E-9	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999884463271	WITHOUT_CLASSIFICATION	1.1553672938464355E-8	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999989983154	WITHOUT_CLASSIFICATION	1.0016846208891266E-9	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999985541587303	WITHOUT_CLASSIFICATION	1.4458412696979619E-5	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9992654744565889	WITHOUT_CLASSIFICATION	7.345255434110857E-4	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998849978873	WITHOUT_CLASSIFICATION	1.1500211274853138E-7	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9999946188173084	WITHOUT_CLASSIFICATION	5.3811826916369885E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999978009046617	WITHOUT_CLASSIFICATION	2.1990953381829325E-6	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9999978009046617	WITHOUT_CLASSIFICATION	2.1990953381829325E-6	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999992516805829	WITHOUT_CLASSIFICATION	7.48319417050402E-7	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999999907756025	WITHOUT_CLASSIFICATION	9.22439750365105E-9	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999999999971082	WITHOUT_CLASSIFICATION	2.89179211914955E-11	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999967492479653	WITHOUT_CLASSIFICATION	3.2507520346831763E-6	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933636554098	WITHOUT_CLASSIFICATION	6.636344590185433E-6	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993928538088	WITHOUT_CLASSIFICATION	6.0714619120649455E-6	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999982341381629	WITHOUT_CLASSIFICATION	1.7658618371108676E-6	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.991537013310921	WITHOUT_CLASSIFICATION	0.008462986689078881	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9765911174408936	WITHOUT_CLASSIFICATION	0.023408882559106493	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999376553698	WITHOUT_CLASSIFICATION	6.234463016781192E-8	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999986755938587	WITHOUT_CLASSIFICATION	1.3244061414019738E-6	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999529909560829	WITHOUT_CLASSIFICATION	4.70090439169926E-5	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999443006283	WITHOUT_CLASSIFICATION	5.569937167426246E-8	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999996685158145	WITHOUT_CLASSIFICATION	3.3148418552591443E-7	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999971385662881	WITHOUT_CLASSIFICATION	2.8614337118961135E-5	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999980345606175	WITHOUT_CLASSIFICATION	1.9654393824661076E-6	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999960557471	WITHOUT_CLASSIFICATION	3.944252899828396E-8	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999951536669901	WITHOUT_CLASSIFICATION	4.84633300995113E-6	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999930194558913	WITHOUT_CLASSIFICATION	6.980544108738398E-6	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999131131783	WITHOUT_CLASSIFICATION	8.688682176072496E-8	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999940656	WITHOUT_CLASSIFICATION	5.934441894979209E-12	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999849858997	WITHOUT_CLASSIFICATION	1.501410030667078E-8	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999981008720076	WITHOUT_CLASSIFICATION	1.899127992338086E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999998462761182	WITHOUT_CLASSIFICATION	1.5372388190240503E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999985983485027	WITHOUT_CLASSIFICATION	1.4016514972525185E-6	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999979521167183	WITHOUT_CLASSIFICATION	2.0478832816993237E-6	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999996253712826	WITHOUT_CLASSIFICATION	3.7462871744364893E-7	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999999358525817	WITHOUT_CLASSIFICATION	6.414741822511063E-8	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999999932532	WITHOUT_CLASSIFICATION	6.746782526163418E-12	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999883496818842	WITHOUT_CLASSIFICATION	1.1650318115821806E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999999978915	WITHOUT_CLASSIFICATION	2.10852535158718E-12	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999993711005601	WITHOUT_CLASSIFICATION	6.288994398754631E-7	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999983755738837	WITHOUT_CLASSIFICATION	1.6244261162858592E-6	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9984674721645311	WITHOUT_CLASSIFICATION	0.0015325278354688518	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999999692102701	WITHOUT_CLASSIFICATION	3.078972994440159E-8	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999995307417943	WITHOUT_CLASSIFICATION	4.692582056690082E-7	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998874955289	WITHOUT_CLASSIFICATION	1.1250447101336142E-7	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999462274575218	WITHOUT_CLASSIFICATION	5.377254247823974E-5	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999822433618	WITHOUT_CLASSIFICATION	1.7756638174604158E-8	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999039963255903	WITHOUT_CLASSIFICATION	9.600367440961643E-5	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999999985647115	WITHOUT_CLASSIFICATION	1.4352885002792467E-8	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999987579521045	WITHOUT_CLASSIFICATION	1.2420478955629302E-6	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9992042305181323	WITHOUT_CLASSIFICATION	7.957694818675757E-4	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999939652639541	WITHOUT_CLASSIFICATION	6.034736045766755E-6	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999999926971989	WITHOUT_CLASSIFICATION	7.302801048948919E-9	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999969629078811	WITHOUT_CLASSIFICATION	3.0370921188242635E-6	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999996296751362	WITHOUT_CLASSIFICATION	3.703248637495852E-7	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9999979458638218	WITHOUT_CLASSIFICATION	2.0541361781775247E-6	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999988776532814	WITHOUT_CLASSIFICATION	1.1223467186050438E-6	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999984122922881	WITHOUT_CLASSIFICATION	1.587707711948414E-6	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999262280093186	WITHOUT_CLASSIFICATION	7.37719906814481E-5	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998244735196684	WITHOUT_CLASSIFICATION	1.7552648033156121E-4	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999950227500968	WITHOUT_CLASSIFICATION	4.977249903198005E-5	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999067939968083	WITHOUT_CLASSIFICATION	9.320600319174499E-5	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999328882295148	WITHOUT_CLASSIFICATION	6.711177048524532E-5	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999984625899233	WITHOUT_CLASSIFICATION	1.5374100767008802E-6	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9936612054739724	WITHOUT_CLASSIFICATION	0.006338794526027524	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999976397740442	WITHOUT_CLASSIFICATION	2.3602259557691454E-6	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999999994187989	WITHOUT_CLASSIFICATION	5.812011036395876E-9	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9996931345238509	WITHOUT_CLASSIFICATION	3.0686547614905966E-4	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999999695044561	WITHOUT_CLASSIFICATION	3.049554387641065E-8	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999994760751487	WITHOUT_CLASSIFICATION	5.239248512083628E-7	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.999999999885332	WITHOUT_CLASSIFICATION	1.1466797532052197E-10	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999999490950983	WITHOUT_CLASSIFICATION	5.090490167441261E-8	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999983131699	WITHOUT_CLASSIFICATION	1.6868300597288344E-9	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999996310966963	WITHOUT_CLASSIFICATION	3.689033036564941E-7	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999210556371	WITHOUT_CLASSIFICATION	7.894436301600217E-8	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999994215361157	WITHOUT_CLASSIFICATION	5.784638843096102E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999837823616687	WITHOUT_CLASSIFICATION	1.6217638331286203E-5	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999837823616687	WITHOUT_CLASSIFICATION	1.6217638331286203E-5	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997122888042	WITHOUT_CLASSIFICATION	2.877111957414136E-7	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999595424062	WITHOUT_CLASSIFICATION	4.0457593868620174E-8	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999936116452	WITHOUT_CLASSIFICATION	6.3883548651820255E-9	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999976419641634	WITHOUT_CLASSIFICATION	2.3580358366793904E-6	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999352555816	WITHOUT_CLASSIFICATION	6.474441833420833E-8	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998774213012929	WITHOUT_CLASSIFICATION	1.2257869870706863E-4	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999821527382	WITHOUT_CLASSIFICATION	1.7847261700492063E-8	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999988958574	WITHOUT_CLASSIFICATION	1.1041426176074795E-9	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999875598264371	WITHOUT_CLASSIFICATION	1.2440173562980936E-5	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999872337165	WITHOUT_CLASSIFICATION	1.276628344500607E-8	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999967254285309	WITHOUT_CLASSIFICATION	3.2745714690490107E-6	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999970151033147	WITHOUT_CLASSIFICATION	2.9848966852409823E-6	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.9999995638726841	WITHOUT_CLASSIFICATION	4.361273159311689E-7	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999992097923	WITHOUT_CLASSIFICATION	7.902075802988559E-10	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999976393611848	WITHOUT_CLASSIFICATION	2.360638815263501E-6	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9969647168653595	WITHOUT_CLASSIFICATION	0.0030352831346406022	IMPLEMENTATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.99996710343211	WITHOUT_CLASSIFICATION	3.289656788998716E-5	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.99867286876884	WITHOUT_CLASSIFICATION	0.0013271312311601113	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9997527643312276	WITHOUT_CLASSIFICATION	2.4723566877238735E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999996194002047	WITHOUT_CLASSIFICATION	3.805997954495233E-7	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9999997644726196	WITHOUT_CLASSIFICATION	2.3552738042154277E-7	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999970952178141	WITHOUT_CLASSIFICATION	2.904782185904747E-6	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999974443442877	WITHOUT_CLASSIFICATION	2.5556557122531106E-6	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998269209659262	WITHOUT_CLASSIFICATION	1.730790340738025E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999992536229501	WITHOUT_CLASSIFICATION	7.463770499209267E-7	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999720417329123	WITHOUT_CLASSIFICATION	2.7958267087673652E-5	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999740092524918	WITHOUT_CLASSIFICATION	2.599074750811355E-5	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999999856692426	WITHOUT_CLASSIFICATION	1.4330757382300912E-8	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999999747841241	WITHOUT_CLASSIFICATION	2.5215875897230017E-7	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999886020603935	WITHOUT_CLASSIFICATION	1.1397939606504577E-5	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.99999931191311	WITHOUT_CLASSIFICATION	6.880868900105788E-7	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999938397592987	WITHOUT_CLASSIFICATION	6.160240701284986E-6	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999992729076982	WITHOUT_CLASSIFICATION	7.27092301807271E-7	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9999969701381182	WITHOUT_CLASSIFICATION	3.0298618818614534E-6	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998502628355025	WITHOUT_CLASSIFICATION	1.497371644975629E-4	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998502628355025	WITHOUT_CLASSIFICATION	1.497371644975629E-4	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999959183873618	WITHOUT_CLASSIFICATION	4.0816126383054345E-6	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998578296260112	WITHOUT_CLASSIFICATION	1.4217037398884513E-4	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999999887523584	WITHOUT_CLASSIFICATION	1.124764156779933E-8	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999927320171071	WITHOUT_CLASSIFICATION	7.267982892866578E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999985308075	WITHOUT_CLASSIFICATION	1.4691925337791683E-9	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999996352874425	WITHOUT_CLASSIFICATION	3.647125575230906E-7	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999998141280212	WITHOUT_CLASSIFICATION	1.8587197887908958E-7	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999768117882	WITHOUT_CLASSIFICATION	2.3188211842400365E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999999645449441	WITHOUT_CLASSIFICATION	3.545505591000913E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999917766516	WITHOUT_CLASSIFICATION	8.223348456637373E-9	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999092977020325	WITHOUT_CLASSIFICATION	9.070229796758686E-5	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999744448105484	WITHOUT_CLASSIFICATION	2.5555189451466286E-5	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999999974168019	WITHOUT_CLASSIFICATION	2.583198020953961E-9	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999792402774691	WITHOUT_CLASSIFICATION	2.075972253092358E-5	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998202684788	WITHOUT_CLASSIFICATION	1.7973152125105124E-7	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994406744822587	WITHOUT_CLASSIFICATION	5.593255177413474E-4	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994406744822587	WITHOUT_CLASSIFICATION	5.593255177413474E-4	IMPLEMENTATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999987373744583	WITHOUT_CLASSIFICATION	1.2626255417106522E-6	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999999909407289	WITHOUT_CLASSIFICATION	9.059271094511816E-8	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999937118028368	WITHOUT_CLASSIFICATION	6.288197163290357E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999944500385	WITHOUT_CLASSIFICATION	5.5499614994440936E-8	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997999711835381	WITHOUT_CLASSIFICATION	2.0002881646177649E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999999788127207	WITHOUT_CLASSIFICATION	2.118727930460948E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999999966008474	WITHOUT_CLASSIFICATION	3.399152599723157E-8	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999999966008474	WITHOUT_CLASSIFICATION	3.399152599723157E-8	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999955290900452	WITHOUT_CLASSIFICATION	4.470909954814647E-6	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999994871137287	WITHOUT_CLASSIFICATION	5.128862713652847E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999987988346457	WITHOUT_CLASSIFICATION	1.2011653542997043E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999992826701	WITHOUT_CLASSIFICATION	7.173298937569427E-9	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999988490169134	WITHOUT_CLASSIFICATION	1.1509830865731376E-6	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999736371451903	WITHOUT_CLASSIFICATION	2.6362854809642083E-5	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999906499341293	WITHOUT_CLASSIFICATION	9.350065870696684E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9998158723657464	WITHOUT_CLASSIFICATION	1.8412763425356386E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999977468267351	WITHOUT_CLASSIFICATION	2.253173264883052E-6	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999945824468446	WITHOUT_CLASSIFICATION	5.417553155394949E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9822058270560077	WITHOUT_CLASSIFICATION	0.017794172943992364	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.999993232261312	WITHOUT_CLASSIFICATION	6.767738687988747E-6	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999999984879005	WITHOUT_CLASSIFICATION	1.512099497677015E-8	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999999704063475	WITHOUT_CLASSIFICATION	2.9593652428243806E-8	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999998963203784	WITHOUT_CLASSIFICATION	1.0367962152833323E-7	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999912670171	WITHOUT_CLASSIFICATION	8.7329827923097E-9	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999996128596	WITHOUT_CLASSIFICATION	3.8714038973388183E-10	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9999979981457138	WITHOUT_CLASSIFICATION	2.0018542862248346E-6	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999798321269358	WITHOUT_CLASSIFICATION	2.016787306417368E-5	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999441954024603	WITHOUT_CLASSIFICATION	5.580459753978358E-5	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999814916475	WITHOUT_CLASSIFICATION	1.850835245426448E-8	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999998213864826	WITHOUT_CLASSIFICATION	1.786135174667385E-7	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999902632763454	WITHOUT_CLASSIFICATION	9.7367236544936E-6	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999991284104118	WITHOUT_CLASSIFICATION	8.715895881364574E-7	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999997546342904	WITHOUT_CLASSIFICATION	2.453657096752783E-7	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999676890677704	WITHOUT_CLASSIFICATION	3.231093222955316E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999331874968124	WITHOUT_CLASSIFICATION	6.681250318757476E-5	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9998908741853847	WITHOUT_CLASSIFICATION	1.0912581461536873E-4	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9996224945066187	WITHOUT_CLASSIFICATION	3.775054933813239E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999445754417	WITHOUT_CLASSIFICATION	5.542455822759443E-8	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999334589311667	WITHOUT_CLASSIFICATION	6.654106883329151E-5	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9999999417920418	WITHOUT_CLASSIFICATION	5.8207958148357146E-8	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999995607788063	WITHOUT_CLASSIFICATION	4.392211937848735E-7	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999994282333518	WITHOUT_CLASSIFICATION	5.717666482865609E-7	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999823613420618	WITHOUT_CLASSIFICATION	1.7638657938263024E-5	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999999713098805	WITHOUT_CLASSIFICATION	2.8690119519145956E-8	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9999998914927144	WITHOUT_CLASSIFICATION	1.0850728560955107E-7	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9999999868277012	WITHOUT_CLASSIFICATION	1.317229883270536E-8	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999940848389	WITHOUT_CLASSIFICATION	5.915161207541635E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999023341521	WITHOUT_CLASSIFICATION	9.766584796068806E-8	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999988461307	WITHOUT_CLASSIFICATION	1.1538693051304529E-8	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9999979894357782	WITHOUT_CLASSIFICATION	2.0105642217847917E-6	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999975155936023	WITHOUT_CLASSIFICATION	2.4844063977635774E-6	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999176043162	WITHOUT_CLASSIFICATION	8.239568381742273E-8	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999727419	WITHOUT_CLASSIFICATION	2.7258089723523524E-11	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9996697161907749	WITHOUT_CLASSIFICATION	3.302838092250237E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999940848389	WITHOUT_CLASSIFICATION	5.915161207541635E-9	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999023341521	WITHOUT_CLASSIFICATION	9.766584796068806E-8	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999877777018569	WITHOUT_CLASSIFICATION	1.222229814321278E-5	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998831719912317	WITHOUT_CLASSIFICATION	1.1682800876824535E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999999991538766	WITHOUT_CLASSIFICATION	8.46123345531166E-10	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9994967938275334	WITHOUT_CLASSIFICATION	5.032061724666109E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999993865331578	WITHOUT_CLASSIFICATION	6.134668422227233E-7	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999999112474623	WITHOUT_CLASSIFICATION	8.875253755186302E-8	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9930770018571848	WITHOUT_CLASSIFICATION	0.0069229981428150685	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999998629682562	WITHOUT_CLASSIFICATION	1.3703174392226287E-7	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999935193908215	WITHOUT_CLASSIFICATION	6.480609178478498E-6	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9209380923097114	WITHOUT_CLASSIFICATION	0.07906190769028872	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998097711	WITHOUT_CLASSIFICATION	1.9022903253789367E-10	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9209380923097114	WITHOUT_CLASSIFICATION	0.07906190769028872	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999996557867737	WITHOUT_CLASSIFICATION	3.4421322626659413E-7	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999987697147238	WITHOUT_CLASSIFICATION	1.230285276190634E-6	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999050868955	WITHOUT_CLASSIFICATION	9.491310456671624E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998816311055	WITHOUT_CLASSIFICATION	1.1836889443924874E-7	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999997575736059	WITHOUT_CLASSIFICATION	2.424263940589992E-7	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999905050287566	WITHOUT_CLASSIFICATION	9.49497124342971E-6	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999905050287566	WITHOUT_CLASSIFICATION	9.49497124342971E-6	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999999365353254	WITHOUT_CLASSIFICATION	6.346467468669125E-8	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999998233712646	WITHOUT_CLASSIFICATION	1.7662873546074021E-7	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999995283354757	WITHOUT_CLASSIFICATION	4.7166452424683776E-7	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999860328236695	WITHOUT_CLASSIFICATION	1.3967176330425301E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999998215770184	WITHOUT_CLASSIFICATION	1.784229815842579E-7	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999896919826301	WITHOUT_CLASSIFICATION	1.0308017369882068E-5	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999990854485592	WITHOUT_CLASSIFICATION	9.145514407817916E-7	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999875189445	WITHOUT_CLASSIFICATION	1.2481055591949007E-8	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999999429569775	WITHOUT_CLASSIFICATION	5.704302260571578E-8	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.9999977677404418	WITHOUT_CLASSIFICATION	2.2322595581636745E-6	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9999998469286459	WITHOUT_CLASSIFICATION	1.53071354091374E-7	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999971438112041	WITHOUT_CLASSIFICATION	2.856188795903626E-5	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.999979790691709	WITHOUT_CLASSIFICATION	2.0209308291004856E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9999999159980082	WITHOUT_CLASSIFICATION	8.400199180909774E-8	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999854747121132	WITHOUT_CLASSIFICATION	1.452528788669043E-5	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999993979556386	WITHOUT_CLASSIFICATION	6.020443613906568E-7	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999997887691218	WITHOUT_CLASSIFICATION	2.1123087819092857E-6	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999914219433632	WITHOUT_CLASSIFICATION	8.57805663680804E-6	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.99999996514884	WITHOUT_CLASSIFICATION	3.48511599263531E-8	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.999995973119109	WITHOUT_CLASSIFICATION	4.0268808909841865E-6	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999835833207205	WITHOUT_CLASSIFICATION	1.6416679279433124E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999954019321775	WITHOUT_CLASSIFICATION	4.598067822521666E-6	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999833999903889	WITHOUT_CLASSIFICATION	1.66000096111114E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999635614464008	WITHOUT_CLASSIFICATION	3.6438553599178413E-5	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999784627154831	WITHOUT_CLASSIFICATION	2.153728451694535E-5	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999993786646664	WITHOUT_CLASSIFICATION	6.213353336510037E-7	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999988271318142	WITHOUT_CLASSIFICATION	1.1728681858109656E-6	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996246181252456	WITHOUT_CLASSIFICATION	3.7538187475441375E-4	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9989862916377086	WITHOUT_CLASSIFICATION	0.0010137083622913385	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.998558766937061	WITHOUT_CLASSIFICATION	0.0014412330629389048	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9980645872414111	WITHOUT_CLASSIFICATION	0.0019354127585889049	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9997549447753965	WITHOUT_CLASSIFICATION	2.450552246035797E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999990854485592	WITHOUT_CLASSIFICATION	9.145514407817916E-7	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999994550350441	WITHOUT_CLASSIFICATION	5.449649560206559E-7	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998939488125791	WITHOUT_CLASSIFICATION	1.0605118742082568E-4	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9985810996531079	WITHOUT_CLASSIFICATION	0.0014189003468920546	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999995184128805	WITHOUT_CLASSIFICATION	4.815871194921634E-7	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999122194538886	WITHOUT_CLASSIFICATION	8.778054611130481E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999973288143671	WITHOUT_CLASSIFICATION	2.67118563295292E-6	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999860328236695	WITHOUT_CLASSIFICATION	1.3967176330425301E-5	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999860328236695	WITHOUT_CLASSIFICATION	1.3967176330425301E-5	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999538431209268	WITHOUT_CLASSIFICATION	4.615687907308236E-5	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.999989265549151	WITHOUT_CLASSIFICATION	1.0734450848961586E-5	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999983273799397	WITHOUT_CLASSIFICATION	1.6726200603420571E-6	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999609347131414	WITHOUT_CLASSIFICATION	3.906528685864142E-5	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9994535487274349	WITHOUT_CLASSIFICATION	5.464512725652173E-4	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999993966491438	WITHOUT_CLASSIFICATION	6.033508560485394E-7	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999999838753922	WITHOUT_CLASSIFICATION	1.61246078385647E-8	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999999872384678	WITHOUT_CLASSIFICATION	1.276153219499074E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999767498020588	WITHOUT_CLASSIFICATION	2.3250197941256606E-5	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999939439369	WITHOUT_CLASSIFICATION	6.0560630692657636E-9	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999945424791241	WITHOUT_CLASSIFICATION	5.457520875946408E-6	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998817497324606	WITHOUT_CLASSIFICATION	1.1825026753950458E-4	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999997849738244	WITHOUT_CLASSIFICATION	2.1502617575331397E-7	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999939439369	WITHOUT_CLASSIFICATION	6.0560630692657636E-9	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998265724973	WITHOUT_CLASSIFICATION	1.7342750270102175E-7	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998224556899766	WITHOUT_CLASSIFICATION	1.7754431002330273E-4	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999983213141196	WITHOUT_CLASSIFICATION	1.6786858804219562E-6	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8938551065227698	WITHOUT_CLASSIFICATION	0.10614489347723023	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998817497324606	WITHOUT_CLASSIFICATION	1.1825026753950458E-4	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999761497391	WITHOUT_CLASSIFICATION	2.385026083774177E-8	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999931811623	WITHOUT_CLASSIFICATION	6.818837729874035E-9	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999984823658	WITHOUT_CLASSIFICATION	1.517634197937644E-8	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999999999375	WITHOUT_CLASSIFICATION	6.255495217917663E-14	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999667351975029	WITHOUT_CLASSIFICATION	3.326480249710079E-5	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999859047234	WITHOUT_CLASSIFICATION	1.409527648894037E-8	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999990330074	WITHOUT_CLASSIFICATION	9.669925386132668E-10	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997860814342	WITHOUT_CLASSIFICATION	2.139185657511472E-7	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999096958770642	WITHOUT_CLASSIFICATION	9.030412293573923E-5	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999952053903599	WITHOUT_CLASSIFICATION	4.794609640070414E-6	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999998959424636	WITHOUT_CLASSIFICATION	1.0405753634007861E-7	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999962237794457	WITHOUT_CLASSIFICATION	3.776220554167044E-6	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999939439369	WITHOUT_CLASSIFICATION	6.0560630692657636E-9	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999999761497391	WITHOUT_CLASSIFICATION	2.385026083774177E-8	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999999984823658	WITHOUT_CLASSIFICATION	1.517634197937644E-8	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999993614191506	WITHOUT_CLASSIFICATION	6.385808494788024E-7	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999993597197077	WITHOUT_CLASSIFICATION	6.402802922513087E-7	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999967117557	WITHOUT_CLASSIFICATION	3.2882442714525953E-9	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998817497324606	WITHOUT_CLASSIFICATION	1.1825026753950458E-4	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999953415045809	WITHOUT_CLASSIFICATION	4.658495419124408E-6	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999231845976	WITHOUT_CLASSIFICATION	7.681540236448307E-8	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999976250571333	WITHOUT_CLASSIFICATION	2.374942866709162E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985728510765	WITHOUT_CLASSIFICATION	1.4271489235711107E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997860814342	WITHOUT_CLASSIFICATION	2.139185657511472E-7	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999998265724973	WITHOUT_CLASSIFICATION	1.7342750270102175E-7	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999996296852756	WITHOUT_CLASSIFICATION	3.703147244466826E-7	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999985511181505	WITHOUT_CLASSIFICATION	1.4488818494648853E-6	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999995887119205	WITHOUT_CLASSIFICATION	4.1128807956069033E-7	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999698567806586	WITHOUT_CLASSIFICATION	3.0143219341346304E-5	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.8158398581431282	WITHOUT_CLASSIFICATION	0.1841601418568718	IMPLEMENTATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9928870399788254	WITHOUT_CLASSIFICATION	0.0071129600211745315	IMPLEMENTATION
//render the SQL	WITHOUT_CLASSIFICATION	0.9999666475902385	WITHOUT_CLASSIFICATION	3.335240976150982E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998816311055	WITHOUT_CLASSIFICATION	1.1836889443924874E-7	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999452693537	WITHOUT_CLASSIFICATION	5.4730646479798E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996815383992	WITHOUT_CLASSIFICATION	3.1846160070091234E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999999378378581	WITHOUT_CLASSIFICATION	6.216214181184357E-8	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999778072517	WITHOUT_CLASSIFICATION	2.219274828899546E-8	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999825310716	WITHOUT_CLASSIFICATION	1.7468928341401982E-8	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999922304682	WITHOUT_CLASSIFICATION	7.769531724143654E-9	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999626522177	WITHOUT_CLASSIFICATION	3.7347782343254584E-8	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999992897371699	WITHOUT_CLASSIFICATION	7.102628300945233E-7	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985728510765	WITHOUT_CLASSIFICATION	1.4271489235711107E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999921661661584	WITHOUT_CLASSIFICATION	7.833833841626346E-6	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999997825761479	WITHOUT_CLASSIFICATION	2.1742385209145605E-7	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999931823440134	WITHOUT_CLASSIFICATION	6.817655986698153E-6	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999997805176198	WITHOUT_CLASSIFICATION	2.1948238018230394E-7	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.9999928218062383	WITHOUT_CLASSIFICATION	7.178193761686493E-6	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999990765089318	WITHOUT_CLASSIFICATION	9.23491068235094E-7	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999999403850396	WITHOUT_CLASSIFICATION	5.96149603972498E-7	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9993415985301743	WITHOUT_CLASSIFICATION	6.584014698256771E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999999342165231	WITHOUT_CLASSIFICATION	6.578347695482437E-8	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999985803075583	WITHOUT_CLASSIFICATION	1.419692441781512E-6	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997539639451	WITHOUT_CLASSIFICATION	2.460360548146681E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999989079228	WITHOUT_CLASSIFICATION	1.092077204268963E-8	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9997751469495822	WITHOUT_CLASSIFICATION	2.2485305041777427E-4	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999961519786764	WITHOUT_CLASSIFICATION	3.848021323522668E-6	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999999558742223	WITHOUT_CLASSIFICATION	4.412577770701967E-8	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999307764856	WITHOUT_CLASSIFICATION	6.922351428368955E-8	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999999448031617	WITHOUT_CLASSIFICATION	5.519683842229968E-8	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999999947120855	WITHOUT_CLASSIFICATION	5.287914485480975E-8	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999998288753185	WITHOUT_CLASSIFICATION	1.7112468153772772E-7	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999949077617931	WITHOUT_CLASSIFICATION	5.092238206845475E-6	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999998436107005	WITHOUT_CLASSIFICATION	1.563892994761778E-7	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999998717199524	WITHOUT_CLASSIFICATION	1.2828004752904955E-7	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999601342573	WITHOUT_CLASSIFICATION	3.9865742733939694E-8	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999952069176	WITHOUT_CLASSIFICATION	4.79308227051173E-9	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999913684007	WITHOUT_CLASSIFICATION	8.631599317804585E-9	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7152289394086887	WITHOUT_CLASSIFICATION	0.28477106059131124	IMPLEMENTATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9987693111086797	WITHOUT_CLASSIFICATION	0.0012306888913202212	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999946854894837	WITHOUT_CLASSIFICATION	5.3145105163307386E-6	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999991610672609	WITHOUT_CLASSIFICATION	8.38932738948291E-7	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5741773655531828	IMPLEMENTATION	0.42582263444681717	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999999986374989	WITHOUT_CLASSIFICATION	1.3625011009010531E-8	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998756995908461	WITHOUT_CLASSIFICATION	1.2430040915390573E-4	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999769362622	WITHOUT_CLASSIFICATION	2.3063737881303615E-8	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9996862900538861	WITHOUT_CLASSIFICATION	3.137099461138769E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999943799781	WITHOUT_CLASSIFICATION	5.620021913889091E-9	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999996256769369	WITHOUT_CLASSIFICATION	3.743230631155324E-7	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999975015257	WITHOUT_CLASSIFICATION	2.4984743030074485E-9	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999969538413787	WITHOUT_CLASSIFICATION	3.0461586213087675E-6	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9999996256769369	WITHOUT_CLASSIFICATION	3.743230631155324E-7	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999999943799781	WITHOUT_CLASSIFICATION	5.620021913889091E-9	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999975015257	WITHOUT_CLASSIFICATION	2.4984743030074485E-9	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999991705433325	WITHOUT_CLASSIFICATION	8.294566675115691E-7	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999999611025499	WITHOUT_CLASSIFICATION	3.8897450108521283E-7	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999410824404	WITHOUT_CLASSIFICATION	5.891755957859598E-8	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999992488716574	WITHOUT_CLASSIFICATION	7.511283426784135E-7	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999868862682	WITHOUT_CLASSIFICATION	1.311373181159385E-8	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9184984354022063	IMPLEMENTATION	0.0815015645977937	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9997244493403705	WITHOUT_CLASSIFICATION	2.7555065962947973E-4	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997154317238249	WITHOUT_CLASSIFICATION	2.8456827617507306E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999939255499025	WITHOUT_CLASSIFICATION	6.074450097393002E-6	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999988498931771	WITHOUT_CLASSIFICATION	1.1501068229386074E-6	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.999999758499249	WITHOUT_CLASSIFICATION	2.415007509157367E-7	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999911827221261	WITHOUT_CLASSIFICATION	8.81727787391737E-6	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998465436771399	WITHOUT_CLASSIFICATION	1.5345632286008605E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999943792378716	WITHOUT_CLASSIFICATION	5.620762128416863E-6	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.997807945470848	WITHOUT_CLASSIFICATION	0.00219205452915211	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999508184523	WITHOUT_CLASSIFICATION	4.9181547818834375E-8	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999986678059	WITHOUT_CLASSIFICATION	1.3321940663346368E-9	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999940571357	WITHOUT_CLASSIFICATION	5.9428642200214075E-9	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999999964959169	WITHOUT_CLASSIFICATION	3.504083094777756E-8	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998302496464	WITHOUT_CLASSIFICATION	1.6975035351541135E-7	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9959788750997087	WITHOUT_CLASSIFICATION	0.004021124900291348	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999964987673	WITHOUT_CLASSIFICATION	3.5012327230854495E-9	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999999544791042	WITHOUT_CLASSIFICATION	4.552089579441338E-7	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999992516078664	WITHOUT_CLASSIFICATION	7.483921336827045E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998729653204	WITHOUT_CLASSIFICATION	1.2703467955430953E-7	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998729653204	WITHOUT_CLASSIFICATION	1.2703467955430953E-7	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968933356	WITHOUT_CLASSIFICATION	3.1066644587279303E-9	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968933356	WITHOUT_CLASSIFICATION	3.1066644587279303E-9	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9935690770954217	WITHOUT_CLASSIFICATION	0.0064309229045781706	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999986678059	WITHOUT_CLASSIFICATION	1.3321940663346368E-9	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.999999439708344	WITHOUT_CLASSIFICATION	5.60291655986068E-7	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999916652813108	WITHOUT_CLASSIFICATION	8.334718689307651E-6	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999991380796468	WITHOUT_CLASSIFICATION	8.619203532649977E-7	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999991380796468	WITHOUT_CLASSIFICATION	8.619203532649977E-7	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999828037151781	WITHOUT_CLASSIFICATION	1.7196284821897715E-5	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999953339816452	WITHOUT_CLASSIFICATION	4.666018354844032E-6	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999739863948	WITHOUT_CLASSIFICATION	2.6013605224753248E-8	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999851118385232	WITHOUT_CLASSIFICATION	1.4888161476690641E-5	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999160918034711	WITHOUT_CLASSIFICATION	8.390819652896107E-5	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999987723862277	WITHOUT_CLASSIFICATION	1.2276137723627782E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999966669132078	WITHOUT_CLASSIFICATION	3.333086792103528E-6	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999832834423451	WITHOUT_CLASSIFICATION	1.6716557654873526E-5	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9999091468599656	WITHOUT_CLASSIFICATION	9.085314003443354E-5	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999977401605049	WITHOUT_CLASSIFICATION	2.2598394951183235E-6	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999946850350249	WITHOUT_CLASSIFICATION	5.31496497518547E-6	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998322729980098	WITHOUT_CLASSIFICATION	1.6772700199020477E-4	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999999536438872	WITHOUT_CLASSIFICATION	4.6356112834075975E-8	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9999994018254875	WITHOUT_CLASSIFICATION	5.981745124471274E-7	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999607330409002	WITHOUT_CLASSIFICATION	3.926695909979381E-5	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999924905744519	WITHOUT_CLASSIFICATION	7.509425548131432E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999544055312	WITHOUT_CLASSIFICATION	4.55944687953856E-7	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999952910784625	WITHOUT_CLASSIFICATION	4.70892153748858E-5	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9997216705071609	WITHOUT_CLASSIFICATION	2.7832949283919216E-4	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999109900326	WITHOUT_CLASSIFICATION	8.900996746336027E-8	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9996730163712302	WITHOUT_CLASSIFICATION	3.269836287698137E-4	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999790884903	WITHOUT_CLASSIFICATION	2.091150974399448E-8	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999987572881208	WITHOUT_CLASSIFICATION	1.242711879133494E-6	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999995344210454	WITHOUT_CLASSIFICATION	4.655789545223646E-7	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999926197438306	WITHOUT_CLASSIFICATION	7.38025616937437E-6	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999995694606028	WITHOUT_CLASSIFICATION	4.305393971711115E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999989079228	WITHOUT_CLASSIFICATION	1.092077204268963E-8	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999972130182684	WITHOUT_CLASSIFICATION	2.7869817317241827E-6	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.99999853342087	WITHOUT_CLASSIFICATION	1.4665791300150306E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996504520088	WITHOUT_CLASSIFICATION	3.49547991214293E-7	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999821954437679	WITHOUT_CLASSIFICATION	1.7804556232099115E-5	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999951778394781	WITHOUT_CLASSIFICATION	4.822160521855061E-6	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.9999951778394781	WITHOUT_CLASSIFICATION	4.822160521855061E-6	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999997727960528	WITHOUT_CLASSIFICATION	2.2720394710494883E-7	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9999998218123471	WITHOUT_CLASSIFICATION	1.7818765278799447E-7	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999563582642	WITHOUT_CLASSIFICATION	4.36417357953984E-8	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9999999563582642	WITHOUT_CLASSIFICATION	4.36417357953984E-8	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999547761565506	WITHOUT_CLASSIFICATION	4.522384344948327E-5	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999936214695522	WITHOUT_CLASSIFICATION	6.378530447725804E-6	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9999979591123717	WITHOUT_CLASSIFICATION	2.040887628360752E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993914091092	WITHOUT_CLASSIFICATION	6.085908908545689E-7	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999950938665476	WITHOUT_CLASSIFICATION	4.906133452333392E-6	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999999286192047	WITHOUT_CLASSIFICATION	7.13807952498926E-8	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9998959273929847	WITHOUT_CLASSIFICATION	1.0407260701536227E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999959730509482	WITHOUT_CLASSIFICATION	4.0269490518364955E-6	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999259449792	WITHOUT_CLASSIFICATION	7.405502073663405E-8	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999259449792	WITHOUT_CLASSIFICATION	7.405502073663405E-8	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999832543646235	WITHOUT_CLASSIFICATION	1.6745635376405477E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999533906073	WITHOUT_CLASSIFICATION	4.6609392667832304E-8	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999533906073	WITHOUT_CLASSIFICATION	4.6609392667832304E-8	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999999603741537	WITHOUT_CLASSIFICATION	3.962584637243372E-8	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999999499115	WITHOUT_CLASSIFICATION	5.0088398070423415E-11	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.999228295558446	WITHOUT_CLASSIFICATION	7.717044415540352E-4	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.999999666217514	WITHOUT_CLASSIFICATION	3.3378248604708787E-7	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997622351765	WITHOUT_CLASSIFICATION	2.3776482360856263E-7	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999963955214	WITHOUT_CLASSIFICATION	3.6044786205983084E-9	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999927073484386	WITHOUT_CLASSIFICATION	7.292651561393662E-5	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999445013314545	WITHOUT_CLASSIFICATION	5.5498668545515385E-5	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999998291686449	WITHOUT_CLASSIFICATION	1.7083135509242608E-6	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995219492562466	WITHOUT_CLASSIFICATION	4.7805074375335664E-4	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999997254191154	WITHOUT_CLASSIFICATION	2.745808845487841E-7	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998588846254347	WITHOUT_CLASSIFICATION	1.4111537456522704E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999941189598662	WITHOUT_CLASSIFICATION	5.881040133721087E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999941189598662	WITHOUT_CLASSIFICATION	5.881040133721087E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999941189598662	WITHOUT_CLASSIFICATION	5.881040133721087E-6	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999941189598662	WITHOUT_CLASSIFICATION	5.881040133721087E-6	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999992876746283	WITHOUT_CLASSIFICATION	7.123253715602954E-7	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999971543965416	WITHOUT_CLASSIFICATION	2.8456034583840388E-6	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999987736969774	WITHOUT_CLASSIFICATION	1.2263030225981099E-5	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9999947671910859	WITHOUT_CLASSIFICATION	5.232808914002136E-6	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999972996391	WITHOUT_CLASSIFICATION	2.7003608998982625E-6	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999821197725939	WITHOUT_CLASSIFICATION	1.7880227406075258E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999998000508679	WITHOUT_CLASSIFICATION	1.999491320650205E-7	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999787209911984	WITHOUT_CLASSIFICATION	2.127900880158675E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999216583197952	WITHOUT_CLASSIFICATION	7.834168020480133E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998883696447	WITHOUT_CLASSIFICATION	1.1163035525136893E-7	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999972445425687	WITHOUT_CLASSIFICATION	2.7554574312595584E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983729049516	WITHOUT_CLASSIFICATION	1.6270950483682813E-6	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999996777141213	WITHOUT_CLASSIFICATION	3.222858786805007E-7	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999996083747693	WITHOUT_CLASSIFICATION	3.9162523060335144E-7	IMPLEMENTATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999725910916949	WITHOUT_CLASSIFICATION	2.7408908305056723E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983729049516	WITHOUT_CLASSIFICATION	1.6270950483682813E-6	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999950601022871	WITHOUT_CLASSIFICATION	4.939897712899036E-5	IMPLEMENTATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999948611761523	WITHOUT_CLASSIFICATION	5.1388238475891136E-6	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999990963932678	WITHOUT_CLASSIFICATION	9.036067322157184E-7	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999999941334244	WITHOUT_CLASSIFICATION	5.866575537767114E-9	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.999999980960484	WITHOUT_CLASSIFICATION	1.9039515947036276E-8	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999998200090509	WITHOUT_CLASSIFICATION	1.7999094919047157E-7	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999913307256	WITHOUT_CLASSIFICATION	8.669274357456802E-9	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9984545755816021	WITHOUT_CLASSIFICATION	0.0015454244183979212	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997294850493	WITHOUT_CLASSIFICATION	2.7051495062782274E-7	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998768786678	WITHOUT_CLASSIFICATION	1.231213322660404E-7	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999989443268	WITHOUT_CLASSIFICATION	1.0556731913299146E-8	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999999944548664	WITHOUT_CLASSIFICATION	5.545133603257889E-8	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999998993537976	WITHOUT_CLASSIFICATION	1.006462023969581E-6	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996417232436338	WITHOUT_CLASSIFICATION	3.582767563662768E-4	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999859377949305	WITHOUT_CLASSIFICATION	1.4062205069471726E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999999626852443	WITHOUT_CLASSIFICATION	3.7314755678289464E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999976039303	WITHOUT_CLASSIFICATION	2.3960697053202163E-9	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998711369555	WITHOUT_CLASSIFICATION	1.2886304449011336E-7	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999967284699247	WITHOUT_CLASSIFICATION	3.2715300751933415E-6	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999998711369555	WITHOUT_CLASSIFICATION	1.2886304449011336E-7	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999756112539	WITHOUT_CLASSIFICATION	2.4388746153037098E-8	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999997281382	WITHOUT_CLASSIFICATION	2.7186183238965517E-10	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999987956283495	WITHOUT_CLASSIFICATION	1.2043716504855546E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999999719103636	WITHOUT_CLASSIFICATION	2.8089636461435755E-8	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999976039303	WITHOUT_CLASSIFICATION	2.3960697053202163E-9	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999967284699247	WITHOUT_CLASSIFICATION	3.2715300751933415E-6	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999756112539	WITHOUT_CLASSIFICATION	2.4388746153037098E-8	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999987151415011	WITHOUT_CLASSIFICATION	1.2848584989398065E-6	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9999635235848897	WITHOUT_CLASSIFICATION	3.6476415110173904E-5	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9997981119377165	WITHOUT_CLASSIFICATION	2.0188806228340755E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9997368308714271	WITHOUT_CLASSIFICATION	2.6316912857294466E-4	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999947513290042	WITHOUT_CLASSIFICATION	5.248670995813438E-6	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999979732292983	WITHOUT_CLASSIFICATION	2.0267707017330902E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999544055312	WITHOUT_CLASSIFICATION	4.55944687953856E-7	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999999997281382	WITHOUT_CLASSIFICATION	2.7186183238965517E-10	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999999999616427	WITHOUT_CLASSIFICATION	3.835740313394031E-11	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999851682161378	WITHOUT_CLASSIFICATION	1.4831783862265926E-5	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999922438186	WITHOUT_CLASSIFICATION	7.756181333257703E-9	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999544055312	WITHOUT_CLASSIFICATION	4.55944687953856E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999903450005283	WITHOUT_CLASSIFICATION	9.654999471814301E-6	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999544055312	WITHOUT_CLASSIFICATION	4.55944687953856E-7	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999993385066683	WITHOUT_CLASSIFICATION	6.614933316895027E-7	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998057323621	WITHOUT_CLASSIFICATION	1.9426763786747956E-7	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999933112220049	WITHOUT_CLASSIFICATION	6.688777995107486E-5	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999628767909412	WITHOUT_CLASSIFICATION	3.712320905882176E-5	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999971474631963	WITHOUT_CLASSIFICATION	2.85253680365904E-6	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999994968892686	WITHOUT_CLASSIFICATION	5.031107313538617E-7	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999978639090755	WITHOUT_CLASSIFICATION	2.1360909244273966E-6	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999943593850301	WITHOUT_CLASSIFICATION	5.6406149698054346E-6	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999977313024422	WITHOUT_CLASSIFICATION	2.2686975578331174E-6	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999994983836684	WITHOUT_CLASSIFICATION	5.016163315588798E-7	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999837823616687	WITHOUT_CLASSIFICATION	1.6217638331286203E-5	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999748574454	WITHOUT_CLASSIFICATION	2.5142554677683733E-8	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.999228295558446	WITHOUT_CLASSIFICATION	7.717044415540352E-4	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999994889080112	WITHOUT_CLASSIFICATION	5.110919888241836E-7	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999951381161248	WITHOUT_CLASSIFICATION	4.861883875187577E-5	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999993621272858	WITHOUT_CLASSIFICATION	6.378727141068878E-7	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999972555395759	WITHOUT_CLASSIFICATION	2.7444604241052474E-6	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999999999419311	WITHOUT_CLASSIFICATION	5.806891148564869E-11	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999967812858128	WITHOUT_CLASSIFICATION	3.218714187124823E-6	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999740452121099	WITHOUT_CLASSIFICATION	2.5954787890031445E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999959076682826	WITHOUT_CLASSIFICATION	4.092331717416317E-6	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999507876285	WITHOUT_CLASSIFICATION	4.921237155536661E-8	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999999970061804	WITHOUT_CLASSIFICATION	2.993819610775918E-8	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.9992744866951465	WITHOUT_CLASSIFICATION	7.25513304853587E-4	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999987755372433	WITHOUT_CLASSIFICATION	1.22446275677234E-6	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999984011461	WITHOUT_CLASSIFICATION	1.5988538999956601E-6	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998153642928	WITHOUT_CLASSIFICATION	1.8463570710946642E-7	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999951076078093	WITHOUT_CLASSIFICATION	4.892392190718471E-6	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.9999870949662782	WITHOUT_CLASSIFICATION	1.290503372161291E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999611293325	WITHOUT_CLASSIFICATION	3.887066739494929E-8	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9991251324820528	WITHOUT_CLASSIFICATION	8.748675179473269E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999971019387917	WITHOUT_CLASSIFICATION	2.8980612082488334E-6	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999983752459108	WITHOUT_CLASSIFICATION	1.624754089170878E-6	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9995905251647449	WITHOUT_CLASSIFICATION	4.0947483525508244E-4	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9999217319205572	WITHOUT_CLASSIFICATION	7.826807944275178E-5	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999398351187	WITHOUT_CLASSIFICATION	6.016488132088001E-8	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999999850657959	WITHOUT_CLASSIFICATION	1.4934204096685185E-7	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9999751785561709	WITHOUT_CLASSIFICATION	2.4821443829094413E-5	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999916782229819	WITHOUT_CLASSIFICATION	8.3217770182106E-6	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999999929905048	WITHOUT_CLASSIFICATION	7.0094952631153365E-9	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9963151802993374	WITHOUT_CLASSIFICATION	0.0036848197006626423	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999352620581279	WITHOUT_CLASSIFICATION	6.473794187215263E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999964625682319	WITHOUT_CLASSIFICATION	3.537431768030197E-6	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999349150688448	WITHOUT_CLASSIFICATION	6.508493115520675E-5	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999349150688448	WITHOUT_CLASSIFICATION	6.508493115520675E-5	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9992829736914757	WITHOUT_CLASSIFICATION	7.170263085243258E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999943593850301	WITHOUT_CLASSIFICATION	5.6406149698054346E-6	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999973194675755	WITHOUT_CLASSIFICATION	2.6805324245132017E-5	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999550429536	WITHOUT_CLASSIFICATION	4.4957046445917807E-8	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999538688011	WITHOUT_CLASSIFICATION	4.6131198892779365E-8	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999577351584488	WITHOUT_CLASSIFICATION	4.22648415512286E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999819621671711	WITHOUT_CLASSIFICATION	1.8037832828933418E-5	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.9999923142471863	WITHOUT_CLASSIFICATION	7.685752813740206E-6	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999970470589	WITHOUT_CLASSIFICATION	2.9529411483938985E-9	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999993095722	WITHOUT_CLASSIFICATION	6.90427823875772E-10	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999697801029951	WITHOUT_CLASSIFICATION	3.021989700497401E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9999999166204229	WITHOUT_CLASSIFICATION	8.33795771843423E-8	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999821763842316	WITHOUT_CLASSIFICATION	1.7823615768364177E-5	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999822020301	WITHOUT_CLASSIFICATION	1.7797969822661856E-8	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999815328147	WITHOUT_CLASSIFICATION	1.84671853284353E-8	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998794853354	WITHOUT_CLASSIFICATION	1.2051466458407428E-7	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999610625602	WITHOUT_CLASSIFICATION	3.8937439812192746E-8	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999963711801	WITHOUT_CLASSIFICATION	3.628819895651879E-9	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999994651805	WITHOUT_CLASSIFICATION	5.348195749335296E-10	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999394636572545	WITHOUT_CLASSIFICATION	6.0536342745555175E-5	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999989354680715	WITHOUT_CLASSIFICATION	1.0645319285186234E-6	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9981554175144361	WITHOUT_CLASSIFICATION	0.0018445824855638762	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999855839413582	WITHOUT_CLASSIFICATION	1.4416058641830894E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999222747695	WITHOUT_CLASSIFICATION	7.772523051427546E-8	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9963151802993374	WITHOUT_CLASSIFICATION	0.0036848197006626423	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999999312693743	WITHOUT_CLASSIFICATION	6.873062572558629E-8	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999964776248697	WITHOUT_CLASSIFICATION	3.5223751305010307E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999975053586	WITHOUT_CLASSIFICATION	2.4946413395851633E-9	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999995026004608	WITHOUT_CLASSIFICATION	4.973995392450528E-7	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998883632352195	WITHOUT_CLASSIFICATION	1.1163676478046358E-4	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999436528594424	WITHOUT_CLASSIFICATION	5.6347140557583104E-5	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999980465059493	WITHOUT_CLASSIFICATION	1.9534940507998657E-6	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999583431313	WITHOUT_CLASSIFICATION	4.165686874856171E-8	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998625026504	WITHOUT_CLASSIFICATION	1.3749734955565396E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999999167247653	WITHOUT_CLASSIFICATION	8.327523473124598E-8	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999845124897	WITHOUT_CLASSIFICATION	1.5487510337775112E-8	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999497755543	WITHOUT_CLASSIFICATION	5.0224445762560515E-8	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999998430134112	WITHOUT_CLASSIFICATION	1.569865887908836E-7	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999999388062804	WITHOUT_CLASSIFICATION	6.119371959728791E-7	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999799959072432	WITHOUT_CLASSIFICATION	2.0004092756857933E-5	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999799959072432	WITHOUT_CLASSIFICATION	2.0004092756857933E-5	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999997325430745	WITHOUT_CLASSIFICATION	2.6745692544809367E-7	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999895750591785	WITHOUT_CLASSIFICATION	1.0424940821509532E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999308404875	WITHOUT_CLASSIFICATION	6.915951239169856E-8	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999999308404875	WITHOUT_CLASSIFICATION	6.915951239169856E-8	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999838339445	WITHOUT_CLASSIFICATION	1.6166055519411947E-8	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999840697977326	WITHOUT_CLASSIFICATION	1.5930202267361346E-5	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9804107810038446	WITHOUT_CLASSIFICATION	0.01958921899615529	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999409302162	WITHOUT_CLASSIFICATION	5.9069783817657546E-8	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999938220231	WITHOUT_CLASSIFICATION	6.177976873881941E-9	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999613695517	WITHOUT_CLASSIFICATION	3.8630448360083413E-8	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999998037146	WITHOUT_CLASSIFICATION	1.962854954989186E-10	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999998037146	WITHOUT_CLASSIFICATION	1.962854954989186E-10	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998965322016	WITHOUT_CLASSIFICATION	1.034677984015285E-7	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999996180000131	WITHOUT_CLASSIFICATION	3.819999868455766E-7	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999995530167417	WITHOUT_CLASSIFICATION	4.4698325828512115E-7	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999127811642	WITHOUT_CLASSIFICATION	8.721883572903482E-8	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9999999127811642	WITHOUT_CLASSIFICATION	8.721883572903482E-8	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999519445529	WITHOUT_CLASSIFICATION	4.8055446957504605E-8	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999955238836947	WITHOUT_CLASSIFICATION	4.476116305255631E-6	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999189233129	WITHOUT_CLASSIFICATION	8.107668713735001E-8	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999996998944422	WITHOUT_CLASSIFICATION	3.001055578335479E-7	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999998891150828	WITHOUT_CLASSIFICATION	1.1088491724990195E-7	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999832629015	WITHOUT_CLASSIFICATION	1.673709847426515E-8	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999995140218837	WITHOUT_CLASSIFICATION	4.859781162947647E-7	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9999993987880463	WITHOUT_CLASSIFICATION	6.012119537765931E-7	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999961701425	WITHOUT_CLASSIFICATION	3.829857548836614E-9	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999999580251042	WITHOUT_CLASSIFICATION	4.1974895788276105E-8	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999997678211604	WITHOUT_CLASSIFICATION	2.3217883960588267E-7	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.998177695660927	WITHOUT_CLASSIFICATION	0.0018223043390730186	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.9820139971813607	WITHOUT_CLASSIFICATION	0.017986002818639272	IMPLEMENTATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999992948095582	WITHOUT_CLASSIFICATION	7.051904417730279E-7	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9999976995385135	WITHOUT_CLASSIFICATION	2.300461486601164E-6	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999999972123635	WITHOUT_CLASSIFICATION	2.7876365047474282E-8	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999908539445528	WITHOUT_CLASSIFICATION	9.146055447164836E-6	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999997874848741	WITHOUT_CLASSIFICATION	2.1251512600831882E-7	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999922856969555	WITHOUT_CLASSIFICATION	7.714303044486387E-6	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999996973941784	WITHOUT_CLASSIFICATION	3.0260582163923736E-7	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999998459134232	WITHOUT_CLASSIFICATION	1.5408657676933633E-7	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999980573106949	WITHOUT_CLASSIFICATION	1.9426893050684747E-6	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999745273425086	WITHOUT_CLASSIFICATION	2.54726574914459E-5	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999988398993841	WITHOUT_CLASSIFICATION	1.1601006159102808E-6	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.9999994444164673	WITHOUT_CLASSIFICATION	5.55583532729651E-7	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999999820561014	WITHOUT_CLASSIFICATION	1.7943898534807122E-8	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999999254211694	WITHOUT_CLASSIFICATION	7.45788305483042E-8	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999898390916373	WITHOUT_CLASSIFICATION	1.016090836265195E-5	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999905862308	WITHOUT_CLASSIFICATION	9.41376908038502E-9	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999975837845407	WITHOUT_CLASSIFICATION	2.416215459223402E-6	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.988169005270493	WITHOUT_CLASSIFICATION	0.011830994729507029	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999807981895	WITHOUT_CLASSIFICATION	1.9201810490319703E-8	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999991975580553	WITHOUT_CLASSIFICATION	8.024419446758753E-7	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999915447069695	WITHOUT_CLASSIFICATION	8.455293030480302E-6	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999983409886662	WITHOUT_CLASSIFICATION	1.6590113337336297E-6	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999980330083338	WITHOUT_CLASSIFICATION	1.966991666202715E-5	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.999951144745948	WITHOUT_CLASSIFICATION	4.8855254051982135E-5	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999998312734	WITHOUT_CLASSIFICATION	1.6872659764080525E-9	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999829132607109	WITHOUT_CLASSIFICATION	1.7086739289051633E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999999875724769	WITHOUT_CLASSIFICATION	1.2427523067922678E-8	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999999727407965	WITHOUT_CLASSIFICATION	2.7259203455550096E-8	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.99999950821864	WITHOUT_CLASSIFICATION	4.917813600455537E-7	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999994559004793	WITHOUT_CLASSIFICATION	5.440995207232971E-7	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9999946613999451	WITHOUT_CLASSIFICATION	5.338600054942155E-6	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9999977415214776	WITHOUT_CLASSIFICATION	2.2584785223839828E-6	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999998557636565	WITHOUT_CLASSIFICATION	1.4423634345001372E-7	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9999987668938602	WITHOUT_CLASSIFICATION	1.2331061397593964E-6	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999999526526367	WITHOUT_CLASSIFICATION	4.734736314035813E-8	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999985281181488	WITHOUT_CLASSIFICATION	1.471881851202639E-6	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.99999993425934	WITHOUT_CLASSIFICATION	6.57406600301209E-8	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999998977326884	WITHOUT_CLASSIFICATION	1.022673115992487E-6	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999359939943257	WITHOUT_CLASSIFICATION	6.40060056743072E-4	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9997348300037331	WITHOUT_CLASSIFICATION	2.6516999626685536E-4	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999886108412	WITHOUT_CLASSIFICATION	1.1389158906361176E-8	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999999520669301	WITHOUT_CLASSIFICATION	4.793306991103197E-7	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999942518397442	WITHOUT_CLASSIFICATION	5.748160255865709E-6	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999995134735379	WITHOUT_CLASSIFICATION	4.865264621630889E-7	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999997335306711	WITHOUT_CLASSIFICATION	2.6646932899246657E-7	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999991206471964	WITHOUT_CLASSIFICATION	8.793528035959111E-6	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999999777558528	WITHOUT_CLASSIFICATION	2.224414715348466E-8	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999957583266352	WITHOUT_CLASSIFICATION	4.241673364741232E-6	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999957583266352	WITHOUT_CLASSIFICATION	4.241673364741232E-6	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999993583508	WITHOUT_CLASSIFICATION	6.416492112879888E-10	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999482619086668	WITHOUT_CLASSIFICATION	5.1738091333229315E-5	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999997745250976	WITHOUT_CLASSIFICATION	2.2547490233070304E-7	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999945449256	WITHOUT_CLASSIFICATION	5.455074371023931E-9	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999803961569	WITHOUT_CLASSIFICATION	1.9603843095691348E-8	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999944560442972	WITHOUT_CLASSIFICATION	5.543955702772518E-6	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999998637996	WITHOUT_CLASSIFICATION	1.3620043255385273E-10	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999944470789	WITHOUT_CLASSIFICATION	5.552921045028496E-9	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999999989765294	WITHOUT_CLASSIFICATION	1.023470600323009E-8	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999999956182617	WITHOUT_CLASSIFICATION	4.381738311761069E-8	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999986189008097	WITHOUT_CLASSIFICATION	1.3810991903661889E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999949526610671	WITHOUT_CLASSIFICATION	5.047338932926486E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999966604972	WITHOUT_CLASSIFICATION	3.339502680497837E-9	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999967617586827	WITHOUT_CLASSIFICATION	3.2382413173857884E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999972359580414	WITHOUT_CLASSIFICATION	2.764041958637675E-6	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999972359580414	WITHOUT_CLASSIFICATION	2.764041958637675E-6	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999999999896552	WITHOUT_CLASSIFICATION	1.0344917186256764E-11	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999793231452553	WITHOUT_CLASSIFICATION	2.0676854744649072E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999867632927	WITHOUT_CLASSIFICATION	1.3236707294798152E-7	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999961920856	WITHOUT_CLASSIFICATION	3.807914516506365E-9	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999980931999325	WITHOUT_CLASSIFICATION	1.906800067469479E-6	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997539778708	WITHOUT_CLASSIFICATION	2.460221291698812E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999963140815569	WITHOUT_CLASSIFICATION	3.6859184432375587E-6	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.999751093423198	WITHOUT_CLASSIFICATION	2.489065768019482E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999203459327	WITHOUT_CLASSIFICATION	7.965406732268759E-8	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999991710041463	WITHOUT_CLASSIFICATION	8.289958536747394E-7	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999989898787399	WITHOUT_CLASSIFICATION	1.0101212600194554E-6	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999863865573	WITHOUT_CLASSIFICATION	1.3613442705811036E-8	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999999776036	WITHOUT_CLASSIFICATION	2.239636839143244E-11	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999789494987	WITHOUT_CLASSIFICATION	2.105050140202116E-8	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999999461468264	WITHOUT_CLASSIFICATION	5.385317352771004E-8	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999999355324116	WITHOUT_CLASSIFICATION	6.446758840654955E-8	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999968607866997	WITHOUT_CLASSIFICATION	3.1392133004106144E-6	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999999950923352	WITHOUT_CLASSIFICATION	4.907664819748493E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999975862948	WITHOUT_CLASSIFICATION	2.4137052509259138E-9	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999644843924	WITHOUT_CLASSIFICATION	3.551560751786144E-8	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999999782730244	WITHOUT_CLASSIFICATION	2.17269754777845E-8	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.99999996345891	WITHOUT_CLASSIFICATION	3.6541090054285645E-8	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999567086754	WITHOUT_CLASSIFICATION	4.3291324741009785E-8	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999988222197871	WITHOUT_CLASSIFICATION	1.1777802129163893E-6	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999963967084002	WITHOUT_CLASSIFICATION	3.6032915998744984E-6	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999982084585346	WITHOUT_CLASSIFICATION	1.7915414654793278E-6	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999917829210918	WITHOUT_CLASSIFICATION	8.217078908172664E-6	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9996969710426459	WITHOUT_CLASSIFICATION	3.030289573541851E-4	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999994020694075	WITHOUT_CLASSIFICATION	5.97930592414919E-7	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999999910720986	WITHOUT_CLASSIFICATION	8.927901360667328E-9	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999997956543571	WITHOUT_CLASSIFICATION	2.0434564281753547E-7	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999440668099	WITHOUT_CLASSIFICATION	5.5933190052794984E-8	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999898483382	WITHOUT_CLASSIFICATION	1.015166193400663E-8	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999996282521211	WITHOUT_CLASSIFICATION	3.7174787890528506E-6	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9986060022869281	WITHOUT_CLASSIFICATION	0.0013939977130719271	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999456446509	WITHOUT_CLASSIFICATION	5.43553490496458E-8	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999427592132	WITHOUT_CLASSIFICATION	5.724078680948565E-8	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999943651682	WITHOUT_CLASSIFICATION	5.634831780460916E-9	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999998316404768	WITHOUT_CLASSIFICATION	1.6835952319425546E-7	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999998938097511	WITHOUT_CLASSIFICATION	1.0619024898506348E-7	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998711852529856	WITHOUT_CLASSIFICATION	1.2881474701446544E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998711852529856	WITHOUT_CLASSIFICATION	1.2881474701446544E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999947073264	WITHOUT_CLASSIFICATION	5.292673743642339E-9	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996193552896	WITHOUT_CLASSIFICATION	3.806447103830325E-7	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.999532562706745	WITHOUT_CLASSIFICATION	4.674372932551025E-4	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999993327492435	WITHOUT_CLASSIFICATION	6.672507564192893E-7	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999928418948522	WITHOUT_CLASSIFICATION	7.158105147836285E-6	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998442964478	WITHOUT_CLASSIFICATION	1.557035522466898E-7	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999942885084918	WITHOUT_CLASSIFICATION	5.7114915080822075E-6	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997872846125	WITHOUT_CLASSIFICATION	2.1271538756677016E-7	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999414376857567	WITHOUT_CLASSIFICATION	5.856231424331336E-5	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999514593575	WITHOUT_CLASSIFICATION	4.8540642420277905E-8	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999650836988	WITHOUT_CLASSIFICATION	3.49163011468169E-8	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999963469932736	WITHOUT_CLASSIFICATION	3.6530067264883328E-6	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999997416063764	WITHOUT_CLASSIFICATION	2.583936235947189E-7	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999743867041	WITHOUT_CLASSIFICATION	2.5613295885211803E-8	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999638705161791	WITHOUT_CLASSIFICATION	3.612948382084897E-5	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999687192475366	WITHOUT_CLASSIFICATION	3.1280752463298984E-5	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999999701598528	WITHOUT_CLASSIFICATION	2.9840147223864526E-8	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999960208653	WITHOUT_CLASSIFICATION	3.979134696348168E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999278032231228	WITHOUT_CLASSIFICATION	7.219677687727235E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999914569242	WITHOUT_CLASSIFICATION	8.54307580687583E-8	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999999860453171	WITHOUT_CLASSIFICATION	1.3954682933561179E-8	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999468837274605	WITHOUT_CLASSIFICATION	5.311627253941965E-5	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999536739360507	WITHOUT_CLASSIFICATION	4.632606394924371E-5	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999998451096585	WITHOUT_CLASSIFICATION	1.5489034150525752E-6	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999999589550685	WITHOUT_CLASSIFICATION	4.1044931504170486E-7	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995316461929168	WITHOUT_CLASSIFICATION	4.6835380708311287E-4	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999999019016412	WITHOUT_CLASSIFICATION	9.809835879133452E-8	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.99999998434165	WITHOUT_CLASSIFICATION	1.5658349922494605E-8	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999892397383793	WITHOUT_CLASSIFICATION	1.0760261620613166E-5	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999323858074256	WITHOUT_CLASSIFICATION	6.76141925743836E-5	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999989518181249	WITHOUT_CLASSIFICATION	1.0481818751211805E-6	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999945521137942	WITHOUT_CLASSIFICATION	5.447886205794852E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999865318588	WITHOUT_CLASSIFICATION	1.3468141132541402E-8	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999993304082	WITHOUT_CLASSIFICATION	6.695918221936523E-10	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999995310019	WITHOUT_CLASSIFICATION	4.689980522772414E-10	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998833027384911	WITHOUT_CLASSIFICATION	1.1669726150877346E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999928881276	WITHOUT_CLASSIFICATION	7.11187251094781E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999851969735	WITHOUT_CLASSIFICATION	1.4803026390685771E-8	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999953394991711	WITHOUT_CLASSIFICATION	4.66050082896178E-6	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999988201882468	WITHOUT_CLASSIFICATION	1.1798117532368513E-6	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999463713348862	WITHOUT_CLASSIFICATION	5.362866511389599E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999937586943	WITHOUT_CLASSIFICATION	6.241305696148572E-8	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999956150173	WITHOUT_CLASSIFICATION	4.384982791852568E-9	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999969729	WITHOUT_CLASSIFICATION	3.0271928036775672E-12	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999938243409291	WITHOUT_CLASSIFICATION	6.175659070896611E-6	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999996206855348	WITHOUT_CLASSIFICATION	3.7931446527143395E-7	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999995968640025	WITHOUT_CLASSIFICATION	4.031359975182536E-7	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999966604972	WITHOUT_CLASSIFICATION	3.339502680497837E-9	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999999902385	WITHOUT_CLASSIFICATION	9.761510847415214E-12	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999999752458	WITHOUT_CLASSIFICATION	2.475419639064639E-10	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9997152505777528	WITHOUT_CLASSIFICATION	2.847494222472152E-4	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9967958266544226	WITHOUT_CLASSIFICATION	0.0032041733455774705	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999951137442	WITHOUT_CLASSIFICATION	4.88625581687059E-9	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999980104029424	WITHOUT_CLASSIFICATION	1.9895970575947825E-6	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9899726546502149	WITHOUT_CLASSIFICATION	0.010027345349785095	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999930105088854	WITHOUT_CLASSIFICATION	6.989491114532747E-6	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999989983154	WITHOUT_CLASSIFICATION	1.0016846208891266E-9	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999940695954776	WITHOUT_CLASSIFICATION	5.9304045224059205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999697420108	WITHOUT_CLASSIFICATION	3.025798922817319E-8	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999997135826135	WITHOUT_CLASSIFICATION	2.864173864698242E-7	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999968079335	WITHOUT_CLASSIFICATION	3.1920665414354272E-9	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999928754413	WITHOUT_CLASSIFICATION	7.1245586839699396E-9	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999592627941	WITHOUT_CLASSIFICATION	4.073720590641129E-7	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999772114280855	WITHOUT_CLASSIFICATION	2.2788571914546706E-5	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999329463042	WITHOUT_CLASSIFICATION	6.705369586790722E-8	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999986094451607	WITHOUT_CLASSIFICATION	1.3905548392722835E-6	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999973394481724	WITHOUT_CLASSIFICATION	2.660551827528931E-6	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999592627941	WITHOUT_CLASSIFICATION	4.073720590641129E-7	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999986518430404	WITHOUT_CLASSIFICATION	1.3481569596087788E-6	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999992567825	WITHOUT_CLASSIFICATION	7.432173853947635E-10	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999992110480619	WITHOUT_CLASSIFICATION	7.889519380446674E-7	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999935024475	WITHOUT_CLASSIFICATION	6.497552463951848E-9	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999969789041896	WITHOUT_CLASSIFICATION	3.02109581037209E-6	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999999986429037	WITHOUT_CLASSIFICATION	1.357096379081062E-9	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999999923083	WITHOUT_CLASSIFICATION	7.691706042112489E-11	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999920385868053	WITHOUT_CLASSIFICATION	7.961413194725797E-6	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999996423111	WITHOUT_CLASSIFICATION	3.5768887245828846E-10	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999955303988424	WITHOUT_CLASSIFICATION	4.469601157624307E-6	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997835533759125	WITHOUT_CLASSIFICATION	2.164466240875079E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998189160823693	WITHOUT_CLASSIFICATION	1.8108391763063615E-4	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999999788657971	WITHOUT_CLASSIFICATION	2.1134202989061848E-8	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998624716501409	WITHOUT_CLASSIFICATION	1.3752834985909535E-4	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999844227932602	WITHOUT_CLASSIFICATION	1.5577206739763885E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999222747695	WITHOUT_CLASSIFICATION	7.772523051427546E-8	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999636962205	WITHOUT_CLASSIFICATION	3.6303779556634515E-8	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999373524955	WITHOUT_CLASSIFICATION	6.26475044834169E-8	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995986081632751	WITHOUT_CLASSIFICATION	4.013918367249036E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999943347818108	WITHOUT_CLASSIFICATION	5.6652181891454646E-6	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999529467393427	WITHOUT_CLASSIFICATION	4.705326065729853E-5	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999960294976589	WITHOUT_CLASSIFICATION	3.970502341202452E-6	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999995704192326	WITHOUT_CLASSIFICATION	4.295807674639857E-7	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999956830472	WITHOUT_CLASSIFICATION	4.3169527549840805E-9	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999998027694	WITHOUT_CLASSIFICATION	1.972305465628359E-10	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999866525291	WITHOUT_CLASSIFICATION	1.3347470794175595E-8	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997586100967873	WITHOUT_CLASSIFICATION	2.4138990321263248E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.999999960557471	WITHOUT_CLASSIFICATION	3.944252899828396E-8	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9914254692290898	WITHOUT_CLASSIFICATION	0.008574530770910258	IMPLEMENTATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.879913146706983	WITHOUT_CLASSIFICATION	0.12008685329301703	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999999082028518	WITHOUT_CLASSIFICATION	9.17971482476788E-8	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999461352993877	WITHOUT_CLASSIFICATION	5.3864700612341123E-5	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999949466660624	WITHOUT_CLASSIFICATION	5.0533339375769024E-6	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.999999971081887	WITHOUT_CLASSIFICATION	2.8918112982428878E-8	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999132616108	WITHOUT_CLASSIFICATION	8.673838926731799E-8	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999924015227	WITHOUT_CLASSIFICATION	7.59847735102627E-9	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999999908613364	WITHOUT_CLASSIFICATION	9.138663728694217E-9	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999999071454266	WITHOUT_CLASSIFICATION	9.285457333985081E-8	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999999163678	WITHOUT_CLASSIFICATION	8.363229646011996E-11	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999992536229501	WITHOUT_CLASSIFICATION	7.463770499209267E-7	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9972849523500883	WITHOUT_CLASSIFICATION	0.0027150476499116978	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9972849523500883	WITHOUT_CLASSIFICATION	0.0027150476499116978	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999996352874425	WITHOUT_CLASSIFICATION	3.647125575230906E-7	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999917766516	WITHOUT_CLASSIFICATION	8.223348456637373E-9	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999944500385	WITHOUT_CLASSIFICATION	5.5499614994440936E-8	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.7292834616469833	IMPLEMENTATION	0.27071653835301673	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993914091092	WITHOUT_CLASSIFICATION	6.085908908545689E-7	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993914091092	WITHOUT_CLASSIFICATION	6.085908908545689E-7	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9999992387541783	WITHOUT_CLASSIFICATION	7.612458217247033E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999999912670171	WITHOUT_CLASSIFICATION	8.7329827923097E-9	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999962361870139	WITHOUT_CLASSIFICATION	3.7638129860061335E-6	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999902632763454	WITHOUT_CLASSIFICATION	9.7367236544936E-6	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.99999983824971	WITHOUT_CLASSIFICATION	1.6175028993599144E-7	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999952297250615	WITHOUT_CLASSIFICATION	4.770274938428374E-6	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999997781792633	WITHOUT_CLASSIFICATION	2.2182073672064002E-7	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999947638591	WITHOUT_CLASSIFICATION	5.236140784508014E-9	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999999999089682	WITHOUT_CLASSIFICATION	9.103180869781297E-10	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999997244061	WITHOUT_CLASSIFICATION	2.7559390013092414E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999997244061	WITHOUT_CLASSIFICATION	2.7559390013092414E-8	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999967175293571	WITHOUT_CLASSIFICATION	3.2824706428368914E-6	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999997860814342	WITHOUT_CLASSIFICATION	2.139185657511472E-7	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999859047234	WITHOUT_CLASSIFICATION	1.409527648894037E-8	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999716529076101	WITHOUT_CLASSIFICATION	2.834709238986418E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999978568154045	WITHOUT_CLASSIFICATION	2.1431845954389733E-6	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999452693537	WITHOUT_CLASSIFICATION	5.4730646479798E-8	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994378894933	WITHOUT_CLASSIFICATION	5.621105066929624E-7	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997805833032	WITHOUT_CLASSIFICATION	2.1941669688636476E-7	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999998224031534	WITHOUT_CLASSIFICATION	1.7759684669886033E-7	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999592127184864	WITHOUT_CLASSIFICATION	4.0787281513522774E-5	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999999676183148	WITHOUT_CLASSIFICATION	3.23816851840246E-8	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999955303988424	WITHOUT_CLASSIFICATION	4.469601157624307E-6	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997944234841	WITHOUT_CLASSIFICATION	2.0557651589553943E-7	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999948964024001	WITHOUT_CLASSIFICATION	5.103597599789472E-6	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999999901042016	WITHOUT_CLASSIFICATION	9.895798400835347E-8	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999910878421382	WITHOUT_CLASSIFICATION	8.912157861872802E-6	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999998711928577	WITHOUT_CLASSIFICATION	1.2880714230580152E-6	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999992681763613	WITHOUT_CLASSIFICATION	7.318236385992688E-7	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999998880347735	WITHOUT_CLASSIFICATION	1.1196522651165417E-7	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999990541397858	WITHOUT_CLASSIFICATION	9.458602141242073E-7	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999997662085859	WITHOUT_CLASSIFICATION	2.3379141409209003E-6	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99995855944341	WITHOUT_CLASSIFICATION	4.1440556589947766E-5	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.99995855944341	WITHOUT_CLASSIFICATION	4.1440556589947766E-5	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999983729049516	WITHOUT_CLASSIFICATION	1.6270950483682813E-6	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999993731355279	WITHOUT_CLASSIFICATION	6.268644721242261E-7	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9998178191619775	WITHOUT_CLASSIFICATION	1.8218083802240586E-4	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9996439541538569	WITHOUT_CLASSIFICATION	3.5604584614309405E-4	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9999985925184299	WITHOUT_CLASSIFICATION	1.4074815700573265E-6	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999999945978643	WITHOUT_CLASSIFICATION	5.402135700614285E-8	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999859377949305	WITHOUT_CLASSIFICATION	1.4062205069471726E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999989468962	WITHOUT_CLASSIFICATION	1.0531038843784255E-9	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999987151415011	WITHOUT_CLASSIFICATION	1.2848584989398065E-6	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997508715454434	WITHOUT_CLASSIFICATION	2.4912845455654837E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999544055312	WITHOUT_CLASSIFICATION	4.55944687953856E-7	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9996573014594625	WITHOUT_CLASSIFICATION	3.4269854053747085E-4	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9987677945579925	WITHOUT_CLASSIFICATION	0.0012322054420075257	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999829366851	WITHOUT_CLASSIFICATION	1.7063314890360856E-8	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999999994334129	WITHOUT_CLASSIFICATION	5.665871177901168E-10	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999972425822049	WITHOUT_CLASSIFICATION	2.7574177950172616E-6	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.999999994835064	WITHOUT_CLASSIFICATION	5.1649360570590515E-9	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999998395671991	WITHOUT_CLASSIFICATION	1.6043280089686245E-7	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999706238824679	WITHOUT_CLASSIFICATION	2.937611753207359E-5	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999999999997622	WITHOUT_CLASSIFICATION	2.378120867785251E-13	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999999689819	WITHOUT_CLASSIFICATION	3.101805348168313E-11	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999168778091	WITHOUT_CLASSIFICATION	8.312219088170499E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999999189233129	WITHOUT_CLASSIFICATION	8.107668713735001E-8	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999770998	WITHOUT_CLASSIFICATION	2.2900263399399903E-11	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999602070418	WITHOUT_CLASSIFICATION	3.979295819190441E-8	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999602070418	WITHOUT_CLASSIFICATION	3.979295819190441E-8	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999989202658932	WITHOUT_CLASSIFICATION	1.0797341067447616E-6	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9998378508344402	WITHOUT_CLASSIFICATION	1.6214916555982528E-4	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999846152762	WITHOUT_CLASSIFICATION	1.538472386950738E-8	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999701748136	WITHOUT_CLASSIFICATION	2.9825186499685975E-8	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999999503116139	WITHOUT_CLASSIFICATION	4.968838600597812E-8	IMPLEMENTATION
