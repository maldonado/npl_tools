IMPLEMENTATION	/**     * TODO: Not implemented yet. If the given ToDoItem can     * be fixed automatically, and the user wants that to happen, then do     * it. Obviously, this depends on the specific Critic and     * problem. By default this method does nothing.     *     * @param item the todo item     * @param arg the design material (?)     */
IMPLEMENTATION	// TODO: Maybe the exception strings should be internationalized
IMPLEMENTATION	/**     * Compute which critics should be active (i.e., they can be     * applied by applyAllCritics) for a given Designer. <p>     *     * Note: I am setting global data, i.e. the     * isEnabled bit in each critic, based on the needs of one designer.     * I don't really support more than one Designer.     * Which is why each designer     * (if we would support more than one designer)     * has his own Agency.     *     * TODO: should loop over simpler list of critics, not CompoundCritics     *     * @param d the designer     */
IMPLEMENTATION	/* FIX: set the application name for Mac OS X */
IMPLEMENTATION	/**     * List of ChecklistStatus:es.     *     * Indexed on the model element itself.     * TODO: Should use weak references so that this is forgotten about     * when the object is removed.     */
IMPLEMENTATION	// how to handle empty target lists? // probably the wizstep should only show an empty pane in that case
IMPLEMENTATION	// TODO: Once the default constructor is deleted we only set dirty flag
IMPLEMENTATION	// TODO: i18n
IMPLEMENTATION	// TODO: i18n
IMPLEMENTATION	/**     * Flag to indicate we are creating a new current project.     * TODO: This isn't a thread-safe way of doing mutual exclusion.     */
IMPLEMENTATION	// TODO: Placeholder implementation until support for tracking on // a per-project basis is implemented
IMPLEMENTATION	// TODO: This should only be checking for the top level package // (if anything at all)
IMPLEMENTATION	// TODO: Placeholder implementation until support for tracking on // a per-project basis is implemented //        return dirty;
IMPLEMENTATION	// If it's a jar, clean it up and make it look like a file url
IMPLEMENTATION	/* TODO: This try-catch will be needed          * once the code below is improved. */
IMPLEMENTATION	/* TODO: Is this a good way of handling nested notation?                     * The following fails the tests:                     * new TransitionNotationUml(t).parse(line);                     */
IMPLEMENTATION	// TODO: Do we want isaUMLElement here?
IMPLEMENTATION	/* TODO: Add implementation. */
IMPLEMENTATION	// ignored - it shouldn't have been in the project in the 1st place
IMPLEMENTATION	// TODO: We need the project specific diagram settings here
IMPLEMENTATION	// TODO Add all top level packages
IMPLEMENTATION	// TODO: add stereotype application (eCore AnyType?)
IMPLEMENTATION	// TODO: Can we just do this every time, no need for else - Bob
IMPLEMENTATION	// TODO: Make this more efficient for large I/Os
IMPLEMENTATION	// TODO: Reuse the offender List.
IMPLEMENTATION	// TODO: handle parse error
IMPLEMENTATION	// TODO: Shouldn't we do something here?
IMPLEMENTATION	// If we weren't given a system ID, attempt to use the URL for the // JAR that we were loaded from.  (Why? - tfm)
IMPLEMENTATION	// TODO: profile dependencies for UML2
IMPLEMENTATION	// TODO: check if it's OK to just get the first zip entry // since the zip file should contain only one xmi file - thn
IMPLEMENTATION	// TODO: Allow .zargo as profile as well?
IMPLEMENTATION	// TODO understand qualifiers
IMPLEMENTATION	// TODO support other name kinds
IMPLEMENTATION	// TODO support other name kinds
IMPLEMENTATION	// TODO: check type!
IMPLEMENTATION	// XXX: hypotheses no qualifiers (I don't know)
IMPLEMENTATION	// TODO support real types
IMPLEMENTATION	// TODO check types!
IMPLEMENTATION	// TODO support other kinds of tail
IMPLEMENTATION	// TODO: Convert this to some sensible logging
IMPLEMENTATION	// TODO is it possible to use more than one variable?
IMPLEMENTATION	// TODO implement iterate() // TODO implement sortedBy() // TODO implement subSequence()
IMPLEMENTATION	// how to handle empty target lists? // probably the TabText should only show an empty pane in that case
IMPLEMENTATION	/** * StylePanel class which provides additional parameters for changing Text * elements provided by GEF. *  TODO: i18n */
IMPLEMENTATION	// TODO: Auto-generated method stub        
IMPLEMENTATION	// TODO: This could be made more efficient by working with iterators // directly and creating a composite iterator made up of all the  // various sub iterators.
IMPLEMENTATION	// TODO: Do we want all enabled tabs to listen or // only the one that is selected/visible? - tfm
IMPLEMENTATION	// TODO: Why would this be null?
IMPLEMENTATION	// TODO: Do we want to use the Project here instead of just its name?
IMPLEMENTATION	// TODO: i18n
IMPLEMENTATION	// Hide save action during load. Otherwise we get the // * appearing in title bar and the save enabling as models are // updated // TODO: Do we still need this now the save enablement is improved?
IMPLEMENTATION	// TODO: Only fetch names and defer fetching panels until needed
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: Add a button to force garbage collection
IMPLEMENTATION	//  Empty implementation - not used.
IMPLEMENTATION	// TODO: add recent patterns
IMPLEMENTATION	// the text box containing the problem messages // TODO: This should be hidden by default, but accessible on  // via a "details" button or tab to provide more info to the user.
IMPLEMENTATION	/* TODO: Beautify the 2nd part of this string: */
IMPLEMENTATION	// reorder submenu // TODO: I think this requires I18N, but not sure - tfm
IMPLEMENTATION	// TODO: Add empty placeholder here?
IMPLEMENTATION	// TODO: Should be anything allowed by current diagram
IMPLEMENTATION	/* TODO: Replace the functioncall in the next line                 * by .requestFocusInWindow() once                 * we do not support Java 1.3 any more.                 */
IMPLEMENTATION	/* TODO: support other types of drag.         * Here you set the owner by dragging into a namespace.         * An alternative could be to drag states into composite states...         */
IMPLEMENTATION	/* TODO: The copy function is not yet                                     * completely implemented - so we will                                     * have some exceptions here and there.*/
IMPLEMENTATION	// TODO: A better implementation would be to batch events into // logical groups and update the tree one time for the entire // group, synchronizing access to the model repository so that // it stays consistent during the query.  This would likely // require doing the updates in a different thread than the // event delivery thread to prevent deadlocks, so for right now // we protect ourselves with try/catch blocks.
IMPLEMENTATION	// TODO: UML2 - what do we do here?
IMPLEMENTATION	// TODO: handle n-way Associations
IMPLEMENTATION	/**     * Returns a set (union) of all unique applicable stereotypes for a given     * collection of model elements. TODO: This is not optimized for     * performance.     *      * @param elements the given collection of model elements     * @return the set with stereotype UML objects     */
IMPLEMENTATION	// TODO: implement this - show some documentation?
IMPLEMENTATION	// TODO: consider inherited attributes?
IMPLEMENTATION	// Do we have 2 connection ends?
IMPLEMENTATION	// TODO: not implemented
IMPLEMENTATION	// TODO: not implemented
IMPLEMENTATION	// TODO: consider inherited attributes?
IMPLEMENTATION	// Don't know what to do otherwise
IMPLEMENTATION	// Don't know what to do otherwise
IMPLEMENTATION	/*     * Called after the diagram font gets changed. <p>     *     * TODO: Do we need to do anything here?     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	/**     * A specialist Selection class for FigPartitions.     * This ensures that all swimlanes are the same length (ie height).     * TODO: Make sure that all swimlanes appear side by side (UML spec     * states "separated from neighboring swimlanes by vertical solid     * lines on both sides".     * TODO: Allow drag of the west and east edge to resize both the selected     * Fig and the fig connected to that side.     * TODO: Show NorthWest and SouthWest handle only on leftmost swimlane.     * TODO: Show NorthEast and SouthEast handle only on rightmost swimlane.     * @author Bob     */
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: We need to be more specific here about what to build
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: Before adding a new region make the last region // its minimum size (smallest size that will still // contain all enclosed)
IMPLEMENTATION	// TODO: Do we really need to be listening for both of these events?
IMPLEMENTATION	// TODO: After removing a region reset the overall // size of the node.
IMPLEMENTATION	// TODO: This comparison is very suspect, it should use equals // method. The code within the block is in fact never executed. // I hesitate to change this now as it will trigger code has never been // used before and am not aware of any problems that it usage may // introduce. // I do think that we need to be able to find a different way to // implement the intent here which seems to be to correct edge drawings // that should actually not be allowed - Bob
IMPLEMENTATION	/* TODO: We may return something useful when the         * relocate() has been implemented, like         * all StateMachines that are not ActivityGraphs. */
IMPLEMENTATION	/* TODO: We may return the following when the         * relocate() has been implemented. */
IMPLEMENTATION	// TODO: Make another pass to deal with overlaps?
IMPLEMENTATION	// TODO: Do we have anything to add here?
IMPLEMENTATION	// Associations not supported, yet // TODO: Create appropriate ClassdiagramEdge
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	/** * Stylepanel which adds a checkbox to show or hide the stereotype.<p> * TODO: i18n. * * @author mvw@tigris.org */
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: for UML 2.x this is isStatic
IMPLEMENTATION	// TODO: It would be better here to continue the loop and try to // build the rest of the compartment. Hence try/catch should be // internal to the loop.
IMPLEMENTATION	// TODO: Why are these different colors? - tfm
IMPLEMENTATION	// TODO: Make this final asap.
IMPLEMENTATION	// TODO: Should we require a GraphModel in the constructor since // our implementations of setNamespace are going to try and set // the namespace on the graphmodel as well?
IMPLEMENTATION	// TODO: This must happen on the AWT thread
IMPLEMENTATION	// TODO: We need a better algorithm.
IMPLEMENTATION	// Perhaps something like the following would work instead //            Rectangle drawingArea = //                Globals.curEditor().getJComponent().getVisibleRect();
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: A more strongly typed data structure could be used here.
IMPLEMENTATION	/* TODO: how to handle changes in shadowsize         * from the project properties? */
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: ToDoItem stuff should be made an opaque extension
IMPLEMENTATION	// TODO: gone in UML 2.1
IMPLEMENTATION	// TODO: Use this event mechanism to update // the checkmark on the Presentation Tab:
IMPLEMENTATION	// TODO: Why do we need this when we can just change the font and // achieve the same effect?
IMPLEMENTATION	// TODO: work here !
IMPLEMENTATION	// TODO: Need to add FileChooser 
IMPLEMENTATION	// TODO: These have been used for most instances of new FigFoo(X0, Y0, ... // but additional work is required to extract the constant from // calculations, etc.
IMPLEMENTATION	/**     * Utility function to localize the given string with help text,     * and show it in the status bar of the ArgoUML window.     * This function is used in favour of the inline call     * to enable later improvements; e.g. it would be possible to     * show a help-balloon. TODO: Work this out.     * One matter to possibly improve: show multiple lines.     *     * @param s the given string to be localized and shown     */
IMPLEMENTATION	/* TODO: This next line prevent loading a UseCase          * with a stereotype to grow. Why? */
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// TODO: I18N required
IMPLEMENTATION	// _compileCheckBox = new JCheckBox(); // nameButton(_compileCheckBox, "checkbox.compile-generated-source"); // TODO: Implement the compile feature. For now, disable the checkbox. // _compileCheckBox.setEnabled(false); // southPanel.add(_compileCheckBox, BorderLayout.SOUTH);
IMPLEMENTATION	/**     * Save the source language in the model.     * <p>     * TODO: Support multiple languages now that we have UML 1.4 tagged values.     *     * @param node     * @param language     */
IMPLEMENTATION	/**     * Return the fully qualified name of a model element in Java (dot     * separated) format.     * <p>     * TODO: We really need a language independent format here. Perhaps the list     * of names that form the hierarchy? - tfm     */
IMPLEMENTATION	// TODO: this needs to be improved // even for nongui calling, the config panel needs to be initialized:
IMPLEMENTATION	/** * A window that shows the progress bar and a cancel button. As a convenience to * callers which may be executing on a thread other than the Swing event thread, * all methods use SwingUtilities.invokeLater() or * SwingUtilities.invokeAndWait() to make sure that Swing calls happen on the * appropriate thread. *<p> * TODO: React on the close button as if the Cancel button was pressed. */
IMPLEMENTATION	// TODO: Add Up/Down buttons to control the ordering of items
IMPLEMENTATION	// TODO: I18n
IMPLEMENTATION	/**     * The list with objects that should be shown in the combobox.     * TODO: Using a list here forces a linear search when we're trying to add     * a new element to the model which can be very slow for large models.     */
IMPLEMENTATION	/* TODO: Implement this! */
IMPLEMENTATION	// TODO: This is updating model on a per character basis as // well as unregistering/reregistering event listeners every // character - very wasteful - tfm
IMPLEMENTATION	// TODO: We should assert this never happens before removing // panels should control their own listeners
IMPLEMENTATION	/** * This class provides a text field that can be used to display * the text of all Comments associated with an annotated ModelElement. * * TODO: This could use more work.  Currently it returns all * Comment.name or Comment.body attributes concatenated together * into a single read-only document. * * @since 1 Nov 2005 * @author Tom Morris (tfmorris@gmail.com) */
IMPLEMENTATION	// TODO: Use the SVGWriter2D implementation //            cmd = new SaveSVGAction2(Translator.localize("action.save-svg"));
IMPLEMENTATION	// TODO: Rework to use UML 1.4 TagDefinitions - tfm
IMPLEMENTATION	// TODO: The project should be bound to the action when it is created?
IMPLEMENTATION	//TODO: what to do with the return value?
IMPLEMENTATION	// TODO: i18n
IMPLEMENTATION	// TODO: do we want to fire targetRemoved here or is it enough to just // stop updating the targets?
IMPLEMENTATION	// TODO: Get Project or other necessary context from source?? // e.getSource();
IMPLEMENTATION	/* TODO: Not all namespaces are useful here - any WFRs? */
IMPLEMENTATION	/** * This panel contains radio buttons that represent the Changeability * of an asssociation-end. * * @author jaap.branderhorst@xs4all.nl * @since Jan 4, 2003 *  * TODO: For UML 2.x this needs to be changed to be just ReadOnly (frozen) * or not (changeable). */
IMPLEMENTATION	// TODO: what shall we do with the exception?
IMPLEMENTATION	// TODO: If this turns out to be a performance bottleneck, we can  // probably optimize the common case by caching our iterator and current // position, assuming that the next request will be for a greater index
IMPLEMENTATION	// TODO: is this the right range here?
IMPLEMENTATION	/** * A mock ModelImplementation.<p> * * The Facade, the ModelEventPump, the Factories and Helpers are all * created as mock objects using EasyMock. For each of them, there * should also be a possibility to access their {@link MockControl} * object. * TODO: Create the rest of the getters for the control objects. * * @author Linus Tolke */
IMPLEMENTATION	/**     * The UML 1.4 model elements to test.     *      * TODO: This needs to be updated with a version for UML 2.x.     */
IMPLEMENTATION	// TODO Auto-generated constructor stub
IMPLEMENTATION	// TODO Auto-generated constructor stub
IMPLEMENTATION	// TODO Auto-generated constructor stub
IMPLEMENTATION	// TODO Auto-generated constructor stub
IMPLEMENTATION	// TODO: This is a linear search of a list that contain many // thousands of items (one for every Fig in the entire project)
IMPLEMENTATION	// For tagged values, use their containing ModelElement since they // don't have property panels of their own // TODO: May want to do this for other types too?
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: To enable models and subsystems, change this flag // Work started by Markus I believe where does this stand? - Bob.
IMPLEMENTATION	//TODO: What can we do with other kind of actions?
IMPLEMENTATION	// TODO: Do we need this? Is this the same as emptyFig.getHeight()?
IMPLEMENTATION	//TODO: What can we do with other kind of actions?
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: After removing a region reset the overall // size of the node.
IMPLEMENTATION	/**     * Builds an actor in the same namespace as the given actor. If     * the object is not and actor nothing is built.<p>     *      * TODO: This shouldn't just silently fail if it is passed a bad     * argument.  This contract will change. - tfm 20070607     *     * @param model The namespace.     * @param actor the given actor     * @return Actor the newly built actor     */
IMPLEMENTATION	// TODO: unfinished implementation
IMPLEMENTATION	// there's more to be handled, which still need to be implemented:
IMPLEMENTATION	// List<Transition> result = new ArrayList<Transition>(); // TODO: not complete - how to retrieve the transitions?
IMPLEMENTATION	// TODO: not implemented
IMPLEMENTATION	// TODO: All build/create methods need Undo support - tfm
IMPLEMENTATION	/** * Eclipse UML2 implementation of XmiWriter. *  * TODO: We need facilities for writing and reading stable IDs to/from either * xmi.id or xmi.uuid. *  * @author Tom Morris */
IMPLEMENTATION	// TODO: Bob says - how can we auto-generate this list?
IMPLEMENTATION	// TODO: gone in UML 2.1
IMPLEMENTATION	// TODO: Need UML 2.x equivalent
IMPLEMENTATION	// TODO Expression and InstanceValue (how) // If anyone have an example.
IMPLEMENTATION	// TODO: treat Message
IMPLEMENTATION	// TODO: Needs undo support
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: Needs completing - stub implementation only! - tfm
IMPLEMENTATION	// TODO: Is this removed from UML2 ?
IMPLEMENTATION	// additional cleanup needed, because // this would not be removed by ext.destroy():
IMPLEMENTATION	// TODO: Review - priority of public ID vs system ID has been reversed // from original implementation
IMPLEMENTATION	// TODO: This will need to change when we support multiple // user models.
IMPLEMENTATION	// TODO: Check if this is ok (this is literally adapted from NSUML)
IMPLEMENTATION	// TODO: Bob says - how can we auto-generate this list?
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: else : alert
IMPLEMENTATION	// TODO: Fully implement this!
IMPLEMENTATION	// TODO: Not implemented
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	/* TODO: correctly implement next function                 * in the model subsystem for                 * issue 1942: */
IMPLEMENTATION	/* TODO: correctly implement next function                 * in the model subsystem for                 * issue 1942: */
IMPLEMENTATION	/* TODO: correctly implement next function                 * in the model subsystem for                 * issue 1942: */
IMPLEMENTATION	// TODO: review the tool tips ? // stringField.setToolTipText(Translator.localize("label.body.tooltip"));
IMPLEMENTATION	/** * The panel that shows a value specification for an other UML element. * * * TODO: Do we need to implements ChangeListener If yes => ok If no => Can't be * use without *Optional class, or the *Optional don't need to ! * */
IMPLEMENTATION	/* TODO: Enhance the isValidNamespace function so         * that this never happens.         */
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// A language must be unique // So, select the current empty language. // TODO ? Alert
IMPLEMENTATION	/**     * TODO: this is not done yet. Eventually this will also     * feed the rational log.     */
IMPLEMENTATION	// TODO: maybe should stop at first, or find highest priority.
IMPLEMENTATION	// TODO: Should we be doing anything on deleted elements? // This throws an exception on remove events. - skip for now - tfm
IMPLEMENTATION	// The following debug line is now the single most memory consuming // line in the whole of ArgoUML. It allocates approximately 18% of // all memory allocated. // Suggestions for solutions: // Check if there is a LOG.log(Level.FINE,String, String) method that can // be used instead. // Use two calls. // For now I (Linus) just comment it out. // LOG.log(Level.FINE, "applying critic: " + _headline);
IMPLEMENTATION	// Now we know that this critic is still valid. What we need to // figure out is if the corresponding to-do item is still valid. // The to-do item is to be replaced if the name of some offender // has changed that affects its description or if the contents // of the list of offenders has changed. // We check that by creating a new ToDoItem and then verifying // that it looks exactly the same. // This really creates a lot of to-do items that goes to waste.
IMPLEMENTATION	/*     * TODO: Not implemented yet. The idea is that some     * problems identified by Critic's can be fixed with certain design     * manipulations (or transforms) that can be applied automatically     * to resolve the problem. This method replies true iff the given     * problem can be fixed. The fixIt() method actually does the fix.     *     * @see org.argouml.cognitive.Poster#canFixIt(org.argouml.cognitive.ToDoItem)     * Also     * @see Critic#fixIt     */
IMPLEMENTATION	/**     * Reply the ToDoItem that the designer should see iff predicate()     * returns true. By default it just fills in the fields of the     * ToDoItem from accessor methods of this Critic. Critic Subclasses     * may override this method or the accessor methods to add computed     * fields to the ToDoItem.     *     * TODO: Critic's may want to add new fields to a     * ToDoItem to make stillValid more efficent.     *     * @see Critic#critique     *     * @param dm the offender     * @param dsgr the designer     * @return ToDoItem     */
IMPLEMENTATION	//            Category.getRoot().getLoggerRepository().setThreshold(Level.OFF); // TODO: Find the proper implementation in java.util.logging API	    
IMPLEMENTATION	// TODO: Review all callers to make sure that they localize the title // In process by Harold Braun 20070912
IMPLEMENTATION	// TODO: Review all callers to make sure that they localize the title
IMPLEMENTATION	/**     * Removes a listener, eventtype pair from the listener list.     *     * TODO: replace the listener implementation with a EventListenerList     * for better performance     *     * @param event the event to which the listener will not listen any more     * @param listener the listener to be removed     */
IMPLEMENTATION	// Make a read-only copy of the listeners list so that reentrant calls // back to add/removeListener won't mess us up. // TODO: Potential performance issue, but we need the correctness - tfm
IMPLEMENTATION	/**     * Check the offenders.<p>     *     * This is called from the constructors where the offenders are given.     *     * TODO: Why do we only care about checking the first 2 offenders above?     * @param offs The offenders.     */
IMPLEMENTATION	// Apparently, this method is never called.
IMPLEMENTATION	/* TODO: These buttons for future enhancement:	buttonPanel.add(configButton);	buttonPanel.add(networkButton); */
IMPLEMENTATION	// TODO: should have an image of a wizard or some logo
IMPLEMENTATION	// TODO: This shouldn't require two passes through the list - tfm
IMPLEMENTATION	// Empty implementation.
IMPLEMENTATION	// Empty implementation.
IMPLEMENTATION	// Empty implementation.
IMPLEMENTATION	// Empty implementation.
IMPLEMENTATION	/* TODO: Indicate the direction! */
IMPLEMENTATION	// Apparently, this method is never called.
IMPLEMENTATION	// how to handle empty target lists? // probably the wizstep should only show an empty pane in that case
IMPLEMENTATION	// TODO:  Allow other configuration handlers.
IMPLEMENTATION	// TODO:  What should we do here?
IMPLEMENTATION	// TODO: This code can be removed when getCurrentProject is removed
IMPLEMENTATION	// TODO: Why is this a special case? - tfm
IMPLEMENTATION	// TODO: Why aren't we throwing an exception here? // Returning null results in NPE and no explanation why.
IMPLEMENTATION	// Use a little trick to find out where Argo is being loaded from. // TODO: Use a different resource here. ARGOINI is unused and deprecated
IMPLEMENTATION	// TODO: It is a performance drain to load all classes at startup time. // They should be lazy loaded when needed.  Instead of scanning all // classes for ones which implement our loadable module interface, we // should use a manifest entry or a special name/name pattern that we // look for to find the single main module class to load here.  - tfm
IMPLEMENTATION	// Enable it. // TODO: This by default selects all modules that are found. //       Eventually we would rather obey a default either from the //       modules themselves, from how they are found, and also //       have information on what modules are selected from the //       configuration.
IMPLEMENTATION	// TODO: Why aren't we throwing an exception here? // Returning null results in NPE and no explanation why.
IMPLEMENTATION	// TODO: Why aren't we throwing an exception here? // Returning null results in NPE and no explanation why.
IMPLEMENTATION	/**     * The constructor.     * TODO: Why does this method not handle all settings?     */
IMPLEMENTATION	// TODO: Do we have any potential consumers of the unversioned name outside // of the notation subsystem?
IMPLEMENTATION	// TODO: Do we need to control separately for attributes and operations?
IMPLEMENTATION	// TODO: These defaults need to be checked against historical ones
IMPLEMENTATION	// TODO: Mark diagram/project as dirty?
IMPLEMENTATION	// We also show tagged values for UML 1 // TODO: what to do for UML2 here?
IMPLEMENTATION	// TODO: needs I18N
IMPLEMENTATION	// Unused currently //            StringBuffer taggedValuesSb = getTaggedValues(modelElement);
IMPLEMENTATION	/**     * TODO: This name of the expression language should be     * configurable by the user. <p>     *     * According to the UML standard,     * the expression language should be the same     * for all elements in one diagram. <p>     *     * UML is not a sensible default - usually this is some pseudo-language.     *     * @return the name of the expression language     */
IMPLEMENTATION	/* TODO: This needs more work!          * We simply throw the new extension point away? */
IMPLEMENTATION	/* TODO: Can we put the static block within the init()? */
IMPLEMENTATION	// TODO: Find a better default language // TODO: We should know the notation language, since it is us
IMPLEMENTATION	/* We need to extend the ExtensionMechanismsFactory so that                  * we can replace the above deprecated call with something like this: */
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: I18N
IMPLEMENTATION	// TODO: Any special handling for null names? append will use "null"
IMPLEMENTATION	/* TODO: Is this a good way of handling nested notation? */
IMPLEMENTATION	/*TODO: In the next line, I should use buildGuard(),                 * but it doesn't show the guard on the diagram...                 * Why? (MVW)                 */
IMPLEMENTATION	// TODO: This DTD doesn't exist, so we can't tell readers to // look for it //		w.println("<!DOCTYPE profile SYSTEM \"profile.dtd\" >"); // but we need a 2nd line to make the funky UML persister work // remove this line if the above is uncommented
IMPLEMENTATION	// TODO support real numbers
IMPLEMENTATION	// TODO investigate: Abstraction.mapping is not in the Model Subsystem
IMPLEMENTATION	// TODO investigate the "unnamed opposite end"
IMPLEMENTATION	// TODO implement additional operations in 4.5.3.5
IMPLEMENTATION	// TODO check this
IMPLEMENTATION	// TODO implementation?
IMPLEMENTATION	// TODO implementationLocation??
IMPLEMENTATION	// TODO presentation??
IMPLEMENTATION	// TODO: Removed from UML 2.x
IMPLEMENTATION	// TODO how to implement this method properly?
IMPLEMENTATION	// TODO implement the difference between oclIsKindOf and oclIsTypeOf
IMPLEMENTATION	// TODO implement OCLExpression
IMPLEMENTATION	/**     * TODO: These can not simply be translated...     */
IMPLEMENTATION	// TODO: This is going to cause the color to be reset on a refresh
IMPLEMENTATION	/** * The Activity diagram.<p> * * TODO: Finish the work on subactivity states. */
IMPLEMENTATION	// TODO: All super constructors should take a GraphModel
IMPLEMENTATION	// TODO: This needs to be modified for UML 2.x
IMPLEMENTATION	// For backward compatibility everything is above and right // TODO: Do in polar domain?
IMPLEMENTATION	/* TODO: Why do I need to do this? */
IMPLEMENTATION	// TODO: Add "unnamed" or "new" or something? (Localized, of course)
IMPLEMENTATION	// let's test which situation we have. 3 Possibilities: // 1. The nodes are already on the diagram, we can use //    canAddEdge for this. // 2. One of the nodes is already on the diagram. The other //    has to be added. // 3. Both of the nodes are not yet on the diagram. // For the time being we will only implement situation 1. // TODO: implement situation 2 and 3.
IMPLEMENTATION	// TODO: i18n
IMPLEMENTATION	//assert Arrays.asList(properties).contains( //    event.getPropertyName()) //  : event.getPropertyName(); // TODO: Do we really always need to do this or only if // notationProvider is null?
IMPLEMENTATION	/*     * Perform re-routing if src/dest nodes have changed.     *     * <p>This method needs to be 'armed' by a previous mouseDragged()     * to avoid the situation where the user just clicks on the node     * then clicks on some unrelated Fig, without moving the edge...     *     * <p>TODO: improve the fig finding algorithm to find the top most fig     * in the layer. will be useful for nested states in a statechart.     *     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
IMPLEMENTATION	/**     * write TODO: Check if sections are not used within the file and     * put them as comments at the end of the file.     * Hint: use a second Map to compare with the used keys.     *    * @param filename the file name     * @param indent the current indentation     * @param outputLostSections true if lost sections are to be written     */
IMPLEMENTATION	// TODO: What does the output directory have to do with the class path? // Project p = ProjectManager.getManager().getCurrentProject(); // entries.add(p.getProjectSettings().getGenerationOutputDir());
IMPLEMENTATION	/*         * TODO: This transformation is Java specific. We need a more         * language/notation scheme for specifying qualified names.         * Possible algorithm - replace all punctuation with our         * internal separator, replace multiple separators with a single         * instance (for languages like C++).  What about I18N? - tfm         */
IMPLEMENTATION	/**     * If the property that this comboboxmodel depicts is changed in the UML     * model, this method will make sure that the changes will be     * done in the combobox-model equally. <p>     * TODO: This function is not yet completely written!     *     * {@inheritDoc}     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
IMPLEMENTATION	/**     * Generates a new unique ID and returns it as a String. The contents     * of the String is supposed to be unique with respect to all Strings     * generated by other instances of this class.     * TODO: We should consider using java.util.UUID for this instead.     *     * @return	A String with unique content.     */
IMPLEMENTATION	// TODO: with new reference resolving scheme, the model sub-system will // cache the systemId of the profile, open it and resolve the profile  // on its own. Thus, the java.util.List will be found and the return  // value will be present again... //assertNotNull(returnParamType);
IMPLEMENTATION	// TODO: Register listener for target ToDo item changes // and for new showStep() requests
IMPLEMENTATION	// TODO: Ignore and report exception until getTop // implemented.
IMPLEMENTATION	// This may not actually make any difference at present (the code // behind addTrigger needs more work).
IMPLEMENTATION	// TODO: property name will need to be updated for UML 2.x // Unfortunately we can specify two property names here
IMPLEMENTATION	// TODO: Use reflection against the test case to ensure that it // does not import non-ArgoUML classes
IMPLEMENTATION	// TODO: Maybe a return message already exists. Check first and // and if the first found has no activator then set this call // message as the activator and skip the code below.
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: why do we need to remove then add the Fig?
IMPLEMENTATION	// TODO: Auto-generated constructor stub
IMPLEMENTATION	// not implemented yet
IMPLEMENTATION	//TODO: I suspect this isn't needed call isn't needed but don't remove // till out of alpha/beta stage
IMPLEMENTATION	// TODO: Before adding a new region make the last region // its minimum size (smallest size that will still // contain all enclosed)
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: not complete
IMPLEMENTATION	// TODO: implement remaining supported types
IMPLEMENTATION	// TODO: Implement
IMPLEMENTATION	// TODO: Is it removed from UML2 ?
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO: not implemented
IMPLEMENTATION	// TODO: Is it removed from UML2 ?
IMPLEMENTATION	// TODO: Is it removed from UML2 ?
IMPLEMENTATION	// TODO: We expect an association end here -  // check more carefully? - tfm
IMPLEMENTATION	// TODO: We expect an association end here -  // check more carefully? - tfm
IMPLEMENTATION	// TODO: Count/report unresolved references
IMPLEMENTATION	// TODO: We failed to resolve URL - signal error
IMPLEMENTATION	// TODO: Implement support for multiple TaggedValues
IMPLEMENTATION	// TODO: 2nd next() for single hasNext()
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	/** * TODO: For UML 2.x, powertypes are accessed indirectly through the  * GeneralizationSets that contain a Generalization. *  * @since Nov 3, 2002 * @author jaap.branderhorst@xs4all.nl */
IMPLEMENTATION	// TODO: Why is this disabled always?
IMPLEMENTATION	// TODO: This is updating model on a per character basis as // well as unregistering/reregistering event listeners every // character - very wasteful - tfm
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	/**         * Identifier for addonly changeability.         * TODO: Note this should not be in UML2 version         */
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// TODO: First implementation will be to call buildPopop // and extract all the contained actions. The toolbar will // be built to the same structure. // The toolbar will be displayed to the left of the JList // under the label.
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	// TODO: Auto-generated catch block
IMPLEMENTATION	/**     * If the property that this comboboxmodel depicts is changed in the UML     * model, this method will make sure that the changes will be     * done in the combobox-model equally. <p>     * TODO: This function is not yet completely written!     *     * {@inheritDoc}     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Need UML 2.x equivalent
IMPLEMENTATION	// TODO: Need UML 2.x equivalent
IMPLEMENTATION	// TODO: Need UML 2.x equivalent
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Need UML 2.x equivalent
IMPLEMENTATION	// TODO: Implement following WFR for GeneralizableElements // [4] The parent must be included in the Namespace of the //     GeneralizableElement. //       self.generalization->forAll(g | //           self.namespace.allContents->includes(g.parent) ) //        return ModelManagementHelperMDRImpl.getContents(ns).contains( //                gen.getParent());
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Before allowing this, we should really check that // TemplateParameter.defaultElement is defined
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO Expression and InstanceValue (how) // If anyone have an example.
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: implement remaining supported types
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO: implement
IMPLEMENTATION	// TODO: not implemented
IMPLEMENTATION	// TODO: treat Message
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO: Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	/**     * Get the innermost containing Model of a ModelElement.     * <p>     * If no containing Model can be found, the outermost containing     * ModelElement is returned (which could be the original element itself if     * it has no owner).     * <p>     * This method is intended to return the innermost     * containing Model, but there are circumstances where one may     * really expect the outermost containing Model or root package to     * be returned (e.g. where     * it's being used to test if two elements are from disjoint namespace     * hierarchies). Hence, there are two separate methods     * with different semantics. The method {@link #getRoot(Object)}     * returns the outermost containing object.      * <p>     * TODO: Note also that some code uses     * org.argouml.kernel.Project#getRoot() to navigate down from the top     * instead of up from the bottom. We need to use a consistent algorithm for     * this. - tfm 20070724     *      * @param handle     *                to the model element.     * @return model for the model element.     */
IMPLEMENTATION	// TODO: This work should be deferred until actually  // needed for display
IMPLEMENTATION	// TODO: This work should be deferred until actually  // needed for display
IMPLEMENTATION	// TODO: This is a linear search of a list that contain many // thousands of items (one for every Fig in the entire project)
IMPLEMENTATION	// TODO: Tentative implementation. Do we want something that updates // the list of open projects or just simple open and close events? -tfm
IMPLEMENTATION	// TODO: Why aren't we throwing an exception here? // Returning null results in NPE and no explanation why.
IMPLEMENTATION	// TODO: Why aren't we throwing an exception here? // Returning null results in NPE and no explanation why.
IMPLEMENTATION	// TODO: Why aren't we throwing an exception here? // Returning null results in NPE and no explanation why.
IMPLEMENTATION	// TODO: Mark diagram/project as dirty?
IMPLEMENTATION	// TODO is it possible to use more than one variable?
IMPLEMENTATION	// TODO is it possible to use more than one variable?
IMPLEMENTATION	// TODO: This should really be coded the other way round, // to only act on associations which are important for // representing the current perspective (and to only act // on a single end of the association) - tfm
IMPLEMENTATION	/**     * The drag gesture listener is notified of drag gestures by a recognizer.     * The typical response is to initiate a drag by invoking     * DragSource.startDrag().     * <p>     *     * TODO: find a way to show a different image when multiple elements are     * dragged.     *     * @param dragGestureEvent     *            the DragGestureEvent describing the gesture that has just     *            occurred     * @see java.awt.dnd.DragGestureListener#dragGestureRecognized(java.awt.dnd.DragGestureEvent)     */
IMPLEMENTATION	/**     * The list with objects that should be shown in the combobox.     * TODO: Using a list here forces a linear search when we're trying to add     * a new element to the model which can be very slow for large models.     */
IMPLEMENTATION	// TODO: It would be better to defer this initialization until the panel // actually needs to be displayed. Perhaps optimistically always return // true and figure out later if we've got something to display - tfm - // 20070110
IMPLEMENTATION	/**     * Finds the operation to which a CallEvent refers, based on the given      * transition. This function determines the context of the statemachine      * that contains the given transition. If the context is a Classifier, then      * all operations of this classifier are candidates. If the context is a      * BehavioralFeature, then all operations of the owner Classifier are      * candidates. The first operation of which the name matches is the result.     * For Activity diagrams: If the context is a Package, then     * all Operations of all Classifiers in the package are candidates.     * TODO: This function works for the most normal cases,     * but needs some testing for rare cases, e.g. internal transitions,...     * TODO: The Parameters of the candidates are ignored. Maybe this      * method should return a set of matching operations.     *     * @author MVW     * @param trans Object of type Transition     * @param opname the name of the operation sought     * @return Object the operation with the given name, or null     */
IMPLEMENTATION	// TODO: We need a way to set the line color and width here, but // TestDependencies thinks this creates a dependency cycle //        Fig line = new ArgoFigLine(snapX, snapY, snapX, snapY,  //                ArgoFig.LINE_COLOR); //        line.setLineWidth(ArgoFig.LINE_WIDTH);
IMPLEMENTATION	// TODO is it possible to use more than one variable?
IMPLEMENTATION	// TODO is it possible to use more than one variable?
IMPLEMENTATION	// TODO is it possible to use more than one variable?
IMPLEMENTATION	// TODO is it possible to use more than one variable?
IMPLEMENTATION	// TODO check this
IMPLEMENTATION	/* TODO: Why do I need to do this? */
IMPLEMENTATION	/**          * TODO: minimum height should not be calculated every time, but only           * when an FigMessage has been added or removed.          * Currently doing that doesn't work because of an unknown problem.           * How to test: create only two CRs and a create message between them.           * Then move the create message to the bottom!          * Until that is fixed the workaround is to call updateMinimumHeight()          * every time the minimum size is needed          */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * Is this item a copy?     *     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// once one criticism is found, exit
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user interface
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolutions
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // design feedback
WITHOUT_CLASSIFICATION	// the critiquing thread should wait if disabled.
WITHOUT_CLASSIFICATION	// why?
WITHOUT_CLASSIFICATION	/*     * Performs critique asap.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor and singeton methods
WITHOUT_CLASSIFICATION	// why?
WITHOUT_CLASSIFICATION	//                      && getAutoCritique()
WITHOUT_CLASSIFICATION	/* Don't clear everything here, breaks loading! */
WITHOUT_CLASSIFICATION	//v71
WITHOUT_CLASSIFICATION	// Don't let a transient error kill the thread
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	//clear out queues! @@@
WITHOUT_CLASSIFICATION	//decision model listener
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* end class ChildGenDMElements */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user interface
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolution
WITHOUT_CLASSIFICATION	//TODO: This should be the name of the designer that created //      the todoitem, not the current username!
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, "predicate() returned true, creating ToDoItem");
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // corrective automations, wizards
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	/* TODO: Make use of the constants defined in the ToDoItem class! */
WITHOUT_CLASSIFICATION	// if wizClass is not a subclass of Wizard, print a warning
WITHOUT_CLASSIFICATION	//return getCriticName();
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // design feedback
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolution
WITHOUT_CLASSIFICATION	/* end interface Poster */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, //         "Adding resolution for: " + c.getClass() + " " + canCreate);
WITHOUT_CLASSIFICATION	// Use this for fast fail instead. // Sacrificed for complete fail. d00mst //throw new UnresolvableException( //	"Unable to create ItemUID for class: " //	+ obj.getClass());
WITHOUT_CLASSIFICATION	// TODO: values
WITHOUT_CLASSIFICATION	/* end class Goal */
WITHOUT_CLASSIFICATION	// check if we are using a supported java version
WITHOUT_CLASSIFICATION	//implements java.io.Serialization
WITHOUT_CLASSIFICATION	// end class CurDecisionCM
WITHOUT_CLASSIFICATION	/* end class StandardCM */
WITHOUT_CLASSIFICATION	// end class CompositeCM
WITHOUT_CLASSIFICATION	// end class EnabledCM
WITHOUT_CLASSIFICATION	// end class NotSnoozedCM
WITHOUT_CLASSIFICATION	// end class AndCM
WITHOUT_CLASSIFICATION	// end class DesignGoalsCM
WITHOUT_CLASSIFICATION	// end class OrCM
WITHOUT_CLASSIFICATION	// Register our last chance exception handler
WITHOUT_CLASSIFICATION	// Get the splash screen up as early as possible
WITHOUT_CLASSIFICATION	// We have to do this to set the LAF for the splash screen
WITHOUT_CLASSIFICATION	// main initialization happens here
WITHOUT_CLASSIFICATION	//ToolTipManager.sharedInstance().setInitialDelay(500);
WITHOUT_CLASSIFICATION	// Force the configuration to load
WITHOUT_CLASSIFICATION	// Synchronize the startup directory
WITHOUT_CLASSIFICATION	// then, print out some version info for debuggers...
WITHOUT_CLASSIFICATION	// Set the i18n locale
WITHOUT_CLASSIFICATION	/* set properties for application behaviour */
WITHOUT_CLASSIFICATION	// now, let's print it
WITHOUT_CLASSIFICATION	// nothing else to do (?)
WITHOUT_CLASSIFICATION	// We MUST have a project open before continuing. Create if necessary
WITHOUT_CLASSIFICATION	//        initPreinitialize(); //        initializeSubsystems(new SimpleTimer(), null); //        ArgoFrame.getInstance().setVisible(true);
WITHOUT_CLASSIFICATION	// Perform one command.
WITHOUT_CLASSIFICATION	// Now create a new object.
WITHOUT_CLASSIFICATION	// initLogging();
WITHOUT_CLASSIFICATION	// On uniprocessors wait until we're sure the splash screen // has been painted so that we aren't competing for resources
WITHOUT_CLASSIFICATION	// make the projectbrowser
WITHOUT_CLASSIFICATION	/* end Class Main */
WITHOUT_CLASSIFICATION	/* end class PostLoad */
WITHOUT_CLASSIFICATION	/* We don't care if optional modules aren't found. */
WITHOUT_CLASSIFICATION	/* We don't care if optional modules aren't found. */
WITHOUT_CLASSIFICATION	/* end class LoadModules */
WITHOUT_CLASSIFICATION	/* All tabs are added at the end, except a TabToDoTarget: */
WITHOUT_CLASSIFICATION	/* End interface GUISettingsTabInterface */
WITHOUT_CLASSIFICATION	// skip pos, we know it's not a valid char from above
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Store in the user configuration, and // let gef know also.
WITHOUT_CLASSIFICATION	// Use the configuration if it exists, otherwise // use what gef thinks.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // actions
WITHOUT_CLASSIFICATION	//failed to clone
WITHOUT_CLASSIFICATION	/* Remark: The code in             * ProjectSettings.init() currently presumes             * that nobody is using this event. */
WITHOUT_CLASSIFICATION	// NOTE: This is package scope to force callers to use ResourceLoaderWrapper
WITHOUT_CLASSIFICATION	/*     * Strip all characters out of <var>s</var> that could not be part of a     * valid Java identifier. Return either the given string (if all characters     * were valid), or a new string with all invalid characters stripped out.     * This allows automatic conversion of strings containing punctuation and     * spaces to a resource name that can be looked up.     */
WITHOUT_CLASSIFICATION	/* end class ResourceLoader */
WITHOUT_CLASSIFICATION	// the validity checking thread should wait if disabled.
WITHOUT_CLASSIFICATION	// If element has been deleted, it's no longer valid
WITHOUT_CLASSIFICATION	// History.TheHistory.addItemResolution(item, // "no longer valid"); // ((ToDoItem)item).resolve("no longer valid"); // notifyObservers("removeElement", item);
WITHOUT_CLASSIFICATION	// ////////////////////////////////////////////////////////////// // Notifications and Updates
WITHOUT_CLASSIFICATION	/* skip any identical items already on the list */
WITHOUT_CLASSIFICATION	// cat.debug("Checking for inhibitors " + rc);
WITHOUT_CLASSIFICATION	// History.TheHistory.addItemResolution(item, reason);
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	/* end class ArgoJMenu */
WITHOUT_CLASSIFICATION	// Block added by BobTarling 8-Jan-2002 Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true in order // to remain compatible with previous versions of this code.
WITHOUT_CLASSIFICATION	// EventListenerList.add() is synchronized, so we don't need to // synchronize ourselves
WITHOUT_CLASSIFICATION	// End of block
WITHOUT_CLASSIFICATION	/* end interface Clarifier */
WITHOUT_CLASSIFICATION	// Set the checkbox on or // off according to the SELECTED value of the action.  If no // SELECTED value is found then this defaults to true.
WITHOUT_CLASSIFICATION	// Extra care to be taken since allOffenders can be reset while // this method is running.
WITHOUT_CLASSIFICATION	// these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	// Cached expansions
WITHOUT_CLASSIFICATION	// these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	// Extra care to be taken since allPosters can be reset while // this method is running.
WITHOUT_CLASSIFICATION	// set the icon for this poster
WITHOUT_CLASSIFICATION	// EventListenerList.remove() is synchronized, so we don't need to // synchronize ourselves
WITHOUT_CLASSIFICATION	//MVW
WITHOUT_CLASSIFICATION	// ////////////////////////////////////////////////////////////// // event related stuff
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Enable buttons when selection made.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	/* end class CheckManager */
WITHOUT_CLASSIFICATION	// Now lets search
WITHOUT_CLASSIFICATION	/* end class TabChecklist */
WITHOUT_CLASSIFICATION	// We found it!
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	// Enter the class to speed up the next search.
WITHOUT_CLASSIFICATION	// Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	//////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////// // instance varables
WITHOUT_CLASSIFICATION	//////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////// // TableModel implemetation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // criticism control
WITHOUT_CLASSIFICATION	//////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static accessors
WITHOUT_CLASSIFICATION	//////////////// // instance varables
WITHOUT_CLASSIFICATION	//////////////// // constructor
WITHOUT_CLASSIFICATION	//////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////// // TableModel implemetation
WITHOUT_CLASSIFICATION	/* in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT. */
WITHOUT_CLASSIFICATION	/* in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT. */
WITHOUT_CLASSIFICATION	/* by default, double the snooze interval each time */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* end class SnoozeOrder */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // wizard actions
WITHOUT_CLASSIFICATION	/* This changes the complete structure of the table,          * so we need to set the column widths again. */
WITHOUT_CLASSIFICATION	// TODO: do all following steps // TODO: resolve item from ToDoList
WITHOUT_CLASSIFICATION	/* end class ActionOpenCritics */
WITHOUT_CLASSIFICATION	/** * Dialog box to list all critics and allow editing of some of their * properties. <p> * * TODO: supported goals, critic network. */
WITHOUT_CLASSIFICATION	// Set initial sorting on Critic Headline
WITHOUT_CLASSIFICATION	// Critics Table
WITHOUT_CLASSIFICATION	// instead of making a new list, decrement index, return when // found and index == 0
WITHOUT_CLASSIFICATION	// Critic Details panel
WITHOUT_CLASSIFICATION	// case 2
WITHOUT_CLASSIFICATION	//  TableModel implemetation
WITHOUT_CLASSIFICATION	//TODO:
WITHOUT_CLASSIFICATION	// no maximum set, so it will stretch...
WITHOUT_CLASSIFICATION	/* and for advanced mode: */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	// Set tableSP's preferred height to 0 so that details height // is used in pack()
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 0; //     JLabel priLabel = new JLabel("Priority:"); //     gb.setConstraints(priLabel, c); //     _mainPanel.add(priLabel);
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 1; //     JLabel offLabel = new JLabel("Off"); //     gb.setConstraints(offLabel, c); //     _mainPanel.add(offLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 2; //     JLabel lowLabel = new JLabel("Low"); //     gb.setConstraints(lowLabel, c); //     _mainPanel.add(lowLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 3; //     JLabel twoLabel = new JLabel("ad"); //     gb.setConstraints(twoLabel, c); //     _mainPanel.add(twoLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 4; //     JLabel threeLabel = new JLabel("asd"); //     gb.setConstraints(threeLabel, c); //     _mainPanel.add(threeLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 5; //     JLabel fourLabel = new JLabel("asd"); //     gb.setConstraints(fourLabel, c); //     _mainPanel.add(fourLabel);
WITHOUT_CLASSIFICATION	//     c.gridy = 0; //     c.gridx = 6; //     JLabel highLabel = new JLabel("High"); //     gb.setConstraints(highLabel, c); //     _mainPanel.add(highLabel);
WITHOUT_CLASSIFICATION	// ------------ other methods ------------
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     * javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     * boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation - todo specific stuff
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // class variables
WITHOUT_CLASSIFICATION	// general icons for poster
WITHOUT_CLASSIFICATION	// specialised icons for designer
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeCellRenderer implementation
WITHOUT_CLASSIFICATION	/* end class ToDoTreeRenderer */
WITHOUT_CLASSIFICATION	//   public static Decision decisionUNCATEGORIZED = //   new Decision("Uncategorized", 1);
WITHOUT_CLASSIFICATION	/* end class ToDoByDecision */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	// instead of making a new list, decrement index, return when // found and index == 0
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	//     c.gridx = 1; //     c.gridy = 3; //     c.gridheight = GridBagConstraints.REMAINDER; //     SpacerPanel spacer2 = new SpacerPanel(); //     gb.setConstraints(spacer2, c); //     _mainPanel.add(spacer2);
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	/* end class WizStepTextField */
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	/* end class WizDescription */
WITHOUT_CLASSIFICATION	/* end class WizStepCue */
WITHOUT_CLASSIFICATION	// stop/start creating more critics
WITHOUT_CLASSIFICATION	/* end class ActionGoToCritique */
WITHOUT_CLASSIFICATION	/* Correct lazy initialization of static field              * without further updates: */
WITHOUT_CLASSIFICATION	// does nothing
WITHOUT_CLASSIFICATION	/* end class ActionAutoCritique */
WITHOUT_CLASSIFICATION	// stop/start cleaning up invalid TodoItems.
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//otherwise parent must be an offending design material
WITHOUT_CLASSIFICATION	/* end class ActionOpenGoals */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//? inform()
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	// Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	// instead of making a new list, decrement index, return when // found and index == 0
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	// the target of description will always be set directly by tabtodo
WITHOUT_CLASSIFICATION	// Request that we be made visible if we're not? // topLevelTabbedPane.setSelectedComponent(t);
WITHOUT_CLASSIFICATION	// ------------- MouseListener implementation ---------------
WITHOUT_CLASSIFICATION	/* end class WizStepConfirm */
WITHOUT_CLASSIFICATION	// next line coming from projectbrowser
WITHOUT_CLASSIFICATION	// ------------ ItemListener implementation ----------------------
WITHOUT_CLASSIFICATION	// -------------TreeSelectionListener implementation -----------
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// not needed in UML 1.x
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * Prepare for typing in rationale field when window is opened.     *     * @see java.awt.Component#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	// keep nagging until the user solves the problem: // This seems a nice way to nag:
WITHOUT_CLASSIFICATION	// Only interrupt for one todoitem
WITHOUT_CLASSIFICATION	/* end class ActionOpenDecisions */
WITHOUT_CLASSIFICATION	// blinks?
WITHOUT_CLASSIFICATION	/* end class ToDoByOffender */
WITHOUT_CLASSIFICATION	// add the perspectives to a list for the combobox
WITHOUT_CLASSIFICATION	// decSlide.setPaintLabels(true);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants //////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	// TODO: This looks O(n^2)
WITHOUT_CLASSIFICATION	//TODO: make a new history item
WITHOUT_CLASSIFICATION	//cat.debug("bad decision");
WITHOUT_CLASSIFICATION	//cat.debug("bad goal");
WITHOUT_CLASSIFICATION	/* end class DismissToDoItemDialog */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	// finally, apply profile configuration to the model
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	// store wizard?
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	//fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	//image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	//otherwise parent must be an offending design material
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* end class WizStep */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // actions
WITHOUT_CLASSIFICATION	// This is done for compatibility with previous version: // Move the argo.user.properties // written before 0.25.4 to the new location, if it exists.
WITHOUT_CLASSIFICATION	// Don't allow instantiation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ActionListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // DocumentListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TargetListener implementation
WITHOUT_CLASSIFICATION	// copy to new file and let the regular load code // do the actual load
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Instance variables
WITHOUT_CLASSIFICATION	/* end class ConfigurationFactory */
WITHOUT_CLASSIFICATION	// LOG.log(Level.INFO, "Configuration saved to {0}\n", url);
WITHOUT_CLASSIFICATION	// check for the older properties file and // copy it over if possible
WITHOUT_CLASSIFICATION	// Only allow one load
WITHOUT_CLASSIFICATION	// add the first point twice
WITHOUT_CLASSIFICATION	// add the first point twice
WITHOUT_CLASSIFICATION	// Scale everything up
WITHOUT_CLASSIFICATION	// Initialize band buffer bounds
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE, "getData Rectangle = " + clip);
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE, "getData returning raster = " + translatedRaster);
WITHOUT_CLASSIFICATION	// Create a new graphics context so we start with fresh transforms
WITHOUT_CLASSIFICATION	// Fill with our background color
WITHOUT_CLASSIFICATION	// Translate & clip graphic to match region of interest
WITHOUT_CLASSIFICATION	// Ask GEF to print a band of the diagram (translated & clipped)
WITHOUT_CLASSIFICATION	// Make sure it isn't caching anything that should be written
WITHOUT_CLASSIFICATION	//        assert !initialized; // GUITestActionOpenProject fails over this...
WITHOUT_CLASSIFICATION	// Retain the original one:
WITHOUT_CLASSIFICATION	// Retain the original one:
WITHOUT_CLASSIFICATION	/*     * Internal initialization method.  Handles initialization which     * is common to both public methods.     */
WITHOUT_CLASSIFICATION	/* This is needed for the JUnit tests.         * Otherwise a "assert initialized" would suffice. */
WITHOUT_CLASSIFICATION	/* This is needed for the JUnit tests.         * Otherwise a "assert initialized" would suffice. */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Flag the command as to whether it is first in a chain
WITHOUT_CLASSIFICATION	/* end class DelayedChangeNotify */
WITHOUT_CLASSIFICATION	// Default diagram settings
WITHOUT_CLASSIFICATION	// Default notation settings
WITHOUT_CLASSIFICATION	/* Generation preferences: */
WITHOUT_CLASSIFICATION	/*         * The next one defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */
WITHOUT_CLASSIFICATION	/*         * The next ones defaults to TRUE, to stay compatible with older         * ArgoUML versions that did not have this setting:         */
WITHOUT_CLASSIFICATION	/* This Notation is not available! */
WITHOUT_CLASSIFICATION	// Always put the model at the top
WITHOUT_CLASSIFICATION	// otherwise add the diagram at the start
WITHOUT_CLASSIFICATION	// otherwise add the diagram at the start
WITHOUT_CLASSIFICATION	// finally, apply profile configuration to the model
WITHOUT_CLASSIFICATION	//        uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri);
WITHOUT_CLASSIFICATION	// Register with the save action with other subsystems so that // any changes in those subsystems will enable the // save button/menu item etc.
WITHOUT_CLASSIFICATION	// not needed in UML 1.x
WITHOUT_CLASSIFICATION	/* end interface DelayedVChangeListener */
WITHOUT_CLASSIFICATION	// a profile initially has no applied profiles, we go bottom-up
WITHOUT_CLASSIFICATION	/* Skip leading underscores: */
WITHOUT_CLASSIFICATION	/**     * TODO: should just be the directory to write.     */
WITHOUT_CLASSIFICATION	/* The preferences with project-scope: */
WITHOUT_CLASSIFICATION	/* The ArgoUML version with which this project was last saved: */
WITHOUT_CLASSIFICATION	// if diagram added successfully, add the member too
WITHOUT_CLASSIFICATION	// Adding a todo member removes any existing one.
WITHOUT_CLASSIFICATION	// got past the veto, add the member
WITHOUT_CLASSIFICATION	// send indeterminate new value instead of making copy of vector
WITHOUT_CLASSIFICATION	/* Remove the dependent         * modelelements, such as the statemachine         * for a statechartdiagram:         */
WITHOUT_CLASSIFICATION	/* Hence, a diagram name was saved in the project             * that we are loading. So, we use this name             * to retrieve any matching diagram. */
WITHOUT_CLASSIFICATION	/* Use the first diagram. */
WITHOUT_CLASSIFICATION	/* If there was no diagram at all,             * then use the (first) UML model. */
WITHOUT_CLASSIFICATION	// we don't need this HashMap anymore so free up the memory
WITHOUT_CLASSIFICATION	//Can not delete the model
WITHOUT_CLASSIFICATION	//Can not delete the profile
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#finalize()     */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getColumnCount()	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getColumnName(int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getRowCount()	 */
WITHOUT_CLASSIFICATION	// Make the topmost diagram (that is not the one being deleted) // current.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // trash related methods
WITHOUT_CLASSIFICATION	// Fire an event some anyone who cares about diagrams being // removed can listen for it
WITHOUT_CLASSIFICATION	// If we delete a FigEdge // or FigNode we actually call this method with the owner not // the Fig itself. However, this method // is called by ActionDeleteModelElements // for primitive Figs (without owner).
WITHOUT_CLASSIFICATION	// there's just one ProfileConfiguration in a project // and there's no other way to add another one
WITHOUT_CLASSIFICATION	/** * Tab for the settings dialog that makes it possible to * select the modules that are to be enabled. * * TODO: Header for the table. * * @author Linus Tolke */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// Access methods for program infrastructure.
WITHOUT_CLASSIFICATION	/*	 * @see java.io.FileFilter#accept(java.io.File)	 */
WITHOUT_CLASSIFICATION	// The creation of the actual GUI elements is deferred until // they are actually needed. Otherwize we have problems // with the initialization.
WITHOUT_CLASSIFICATION	// Do nothing! // The next time we refresh, we will fetch the values again.
WITHOUT_CLASSIFICATION	// Access methods for modules that need to query about the status of // other modules.
WITHOUT_CLASSIFICATION	// Access methods for the GUI that the user uses to enable and disable // modules.
WITHOUT_CLASSIFICATION	// Access methods for the program infrastructure
WITHOUT_CLASSIFICATION	// Catch all exceptions and errors, however severe
WITHOUT_CLASSIFICATION	// TODO: huntForModulesFromJavaWebStart();
WITHOUT_CLASSIFICATION	// Load modules specified by a System property. // Modules specified by a system property is for // running modules from within Eclipse and running // from Java Web Start.
WITHOUT_CLASSIFICATION	// Try-catch only the JarFile instantiation so we // don't accidentally mask anything in ArgoJarClassLoader // or processJarFile.
WITHOUT_CLASSIFICATION	// We expect all extensions to have a manifest even though we // can operate without one if necessary.
WITHOUT_CLASSIFICATION	// Look for our specification
WITHOUT_CLASSIFICATION	// Add this to search list for I18N properties // (Done for both modules & localized property file sets)
WITHOUT_CLASSIFICATION	// We havn't found it. Add it.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * Utility function to unregister all listeners     * registered through addElementListener.     *     * @see #addElementListener(Object, String)     */
WITHOUT_CLASSIFICATION	/*     * Called after the notation default property gets changed.     *     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// e.g. for an operation: // if pce.getSource() == modelElement // && event.propertyName = "parameter" //     if event instanceof AddAssociationEvent //         Get the parameter instance from event.newValue //         Call model to add listener on parameter on change //             of "name", "type" //     else if event instanceof RemoveAssociationEvent //         Get the parameter instance from event.oldValue //         Call model to remove listener on parameter on change //             of "name", "type" //     end if // end if
WITHOUT_CLASSIFICATION	// The following check should have been satisfied before we // instantiated the module, but double check again
WITHOUT_CLASSIFICATION	// If it didn't have a loadable module class and it doesn't look like // a localized property set, warn the user that something funny is in // their extension directory
WITHOUT_CLASSIFICATION	// Since there is no way to compare the objects as equal, // we have to search through the list at this point.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * Remark:     * There is also a java-like notation, which is also     * part of ArgoUML core distribution.     */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/* This Notation is not available! */
WITHOUT_CLASSIFICATION	// This is needed for the case when the default notation is // not loaded at this point.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // class accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Static workers for dealing with notation names.
WITHOUT_CLASSIFICATION	// No valid field for above notationLanguage.  It's valid if not null.
WITHOUT_CLASSIFICATION	// We also show stereotypes
WITHOUT_CLASSIFICATION	// We also show stereotypes
WITHOUT_CLASSIFICATION	// We also show the type (of which e.g. the name may change)
WITHOUT_CLASSIFICATION	// We also show the type (of which e.g. the name may change)
WITHOUT_CLASSIFICATION	// We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	// We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	// and when the Operation is replaced:
WITHOUT_CLASSIFICATION	// and when the class changes name:
WITHOUT_CLASSIFICATION	/* mvw: Indeed. The intention of the constructor parameter is to prove         * that there is a valid UML object to bind the notation to.          * So, the next statement should fail on a null parameter,          * and on anything that is not an object of which          * we can retrieve the multiplicity. */
WITHOUT_CLASSIFICATION	/* We are not interested in the name. */
WITHOUT_CLASSIFICATION	/* And the parameter names and values: */
WITHOUT_CLASSIFICATION	/* And the arguments: */
WITHOUT_CLASSIFICATION	// We also show parameters
WITHOUT_CLASSIFICATION	//  We also show types of parameters
WITHOUT_CLASSIFICATION	/* Listen to the modelelement itself: */
WITHOUT_CLASSIFICATION	// We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	// If this fails, then there is a problem... // dthompson 29/12/2008: It seems that the returned value is  // irrelevant here, so I assume that the purpose of this call // is just to throw an exception in case of a problem.
WITHOUT_CLASSIFICATION	// register for events from all modelelements // that change the name and body text // i.e. when the CallAction is replaced:
WITHOUT_CLASSIFICATION	// and when the owner is replaced (unlikely for operations), // and when the operation changes name:
WITHOUT_CLASSIFICATION	/* Listen to the modelelement itself: */
WITHOUT_CLASSIFICATION	// removed stereotype
WITHOUT_CLASSIFICATION	// register for events from all modelelements // that change the text // i.e. when the Transition is replaced:
WITHOUT_CLASSIFICATION	// new stereotype
WITHOUT_CLASSIFICATION	/* Listen to name changes in the path (useful for e.g. Package): */
WITHOUT_CLASSIFICATION	// register for the doActivity etc.
WITHOUT_CLASSIFICATION	// register for internal transitions:
WITHOUT_CLASSIFICATION	//        return "parsing.java.help.attribute";
WITHOUT_CLASSIFICATION	// TODO: The src_visibility tag doesn't appear to be created // anywhere by ArgoUML currently
WITHOUT_CLASSIFICATION	//        return "parsing.help.fig-association-end-name";
WITHOUT_CLASSIFICATION	//TODO: initial value
WITHOUT_CLASSIFICATION	/* skip spaces */
WITHOUT_CLASSIFICATION	// the name itself
WITHOUT_CLASSIFICATION	/* Check the name for validity: */
WITHOUT_CLASSIFICATION	/* TODO: Check the name for validity. */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// pick out return type
WITHOUT_CLASSIFICATION	// handle multiplicity here since we need the type // actually the API of generator is buggy since to generate // multiplicity correctly we need the attribute too
WITHOUT_CLASSIFICATION	// Build the final string
WITHOUT_CLASSIFICATION	//TODO: qualifiers (e.g., const) //TODO: stereotypes...
WITHOUT_CLASSIFICATION	// name and params
WITHOUT_CLASSIFICATION	/* Do nothing. */
WITHOUT_CLASSIFICATION	// constructor
WITHOUT_CLASSIFICATION	// check for more attributes (';' separated):
WITHOUT_CLASSIFICATION	/*     * For Java notation, we also need to listen to "leaf" changes,      * since they are shown as "final" on the diagram.     */
WITHOUT_CLASSIFICATION	// Remove bases that aren't there anymore
WITHOUT_CLASSIFICATION	/*Notation.findNotation("Java");*/
WITHOUT_CLASSIFICATION	/* Initialize the NotationUtilityUml: */
WITHOUT_CLASSIFICATION	// copy - can't iterate modify live collection while iterating it
WITHOUT_CLASSIFICATION	/* When nothing is generated: omit the space. */
WITHOUT_CLASSIFICATION	// Loop through all base classes, building a comma separated list
WITHOUT_CLASSIFICATION	// yes, there are more:
WITHOUT_CLASSIFICATION	//no text? remove attr!
WITHOUT_CLASSIFICATION	//no non-whitechars in text? remove attr!
WITHOUT_CLASSIFICATION	/* We need to set the namespace/owner                     * of the new attribute before parsing: */
WITHOUT_CLASSIFICATION	/* If the 1st attribute is static,                         * then the new ones, too. */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// yes, there are more:
WITHOUT_CLASSIFICATION	/*     * Generates a string representation for the provided     * attribute. The string representation will be of the form:     *          visibility name [multiplicity] : type-expression =     *                          initial-value {property-string}     * Depending on settings in Notation, visibility, multiplicity,     * type-expression, initial value and properties are shown/not shown.     */
WITHOUT_CLASSIFICATION	/* Handle Derived: */
WITHOUT_CLASSIFICATION	/* Handle Derived: */
WITHOUT_CLASSIFICATION	/* Handle Visibility: */
WITHOUT_CLASSIFICATION	// fix for loading bad projects
WITHOUT_CLASSIFICATION	/*                     * The "show types" defaults to TRUE, to stay compatible                     * with older ArgoUML versions that did not have this                     * setting:                     */
WITHOUT_CLASSIFICATION	// The element was deleted while we were processing it
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	// construct bases string (comma separated)
WITHOUT_CLASSIFICATION	//no text? remove op!
WITHOUT_CLASSIFICATION	//no non-whitechars in text? remove op!
WITHOUT_CLASSIFICATION	// check for more operations (';' separated):
WITHOUT_CLASSIFICATION	// end while loop
WITHOUT_CLASSIFICATION	// parameterlist is guaranteed to contain at least "("
WITHOUT_CLASSIFICATION	// Don't create a stereotype for <<signal>> on a Reception // but create any other parsed stereotypes as needed
WITHOUT_CLASSIFICATION	// lets concatenate it to the resulting string (genStr)
WITHOUT_CLASSIFICATION	/* The "show types" defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting: */
WITHOUT_CLASSIFICATION	// the parameters
WITHOUT_CLASSIFICATION	// the returnparameters
WITHOUT_CLASSIFICATION	// The model element was deleted while we were working on it
WITHOUT_CLASSIFICATION	// else: we remove only the extra ","
WITHOUT_CLASSIFICATION	// the query state
WITHOUT_CLASSIFICATION	/*         * Although Operation and Signal are peers in the UML type          * hierarchy they share the attributes isRoot, isLeaf,          * isAbstract, and  specification. Concurrency is *not*          * shared and is specific to Operation.         */
WITHOUT_CLASSIFICATION	// remove last ,
WITHOUT_CLASSIFICATION	// end of block
WITHOUT_CLASSIFICATION	// A string of the form "name:"
WITHOUT_CLASSIFICATION	// this is a Message UML object
WITHOUT_CLASSIFICATION	/* Supported format:         *     predecessors number ":" action         * The 3 parts of the string to generate: */
WITHOUT_CLASSIFICATION	/*(MMessage)*/
WITHOUT_CLASSIFICATION	// This may return null:
WITHOUT_CLASSIFICATION	// activatorIntNo is now guaranteed not null
WITHOUT_CLASSIFICATION	//        List<String> args = null;
WITHOUT_CLASSIFICATION	// get the ordered list of immediate successors:
WITHOUT_CLASSIFICATION	// the condition or iteration expression (recurrence):
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* Now apply the changes to the model: */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	// If there are more than one suitable operation, // then we pick the first one.
WITHOUT_CLASSIFICATION	/* Disconnect the message from the call graph                 * Make copies of returned live collections                 * since we're modifying                 */
WITHOUT_CLASSIFICATION	// Find the preceding message, if any, on either end of the // association.
WITHOUT_CLASSIFICATION	/* MClassifierRole */
WITHOUT_CLASSIFICATION	// Connect the message at a new spot
WITHOUT_CLASSIFICATION	// case 3 & 4
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* MClassifierRole */
WITHOUT_CLASSIFICATION	/* If no variable name was given, then retain the one in the model. */
WITHOUT_CLASSIFICATION	/* If no function-name was given, then retain the one in the model. */
WITHOUT_CLASSIFICATION	/* Store the guard, i.e. condition or iteration expression,         * in the recurrence field of the Action: */
WITHOUT_CLASSIFICATION	/* If there was no Action yet, create a CallAction: */
WITHOUT_CLASSIFICATION	// Things are strange if there are more than one candidate root, // it has no obvious interpretation in terms of a call tree.
WITHOUT_CLASSIFICATION	/*MMessage*/
WITHOUT_CLASSIFICATION	/*MMessage*/
WITHOUT_CLASSIFICATION	// Jaap Branderhorst 2002-23-09 added next lines to link // parameters and operations to the figs that represent // them
WITHOUT_CLASSIFICATION	// We can do nothing if we don't have both the use case and extension // point.
WITHOUT_CLASSIFICATION	// Parse the string to creat a new extension point.
WITHOUT_CLASSIFICATION	// If we got back null we interpret this as meaning delete the // reference to the extension point from the use case, otherwise we set // the fields of the extension point to the values in newEp.
WITHOUT_CLASSIFICATION	// Build a new extension point
WITHOUT_CLASSIFICATION	// The empty string. Return null
WITHOUT_CLASSIFICATION	/* Handle Derived: */
WITHOUT_CLASSIFICATION	// If we are given the null string, return immediately,  // so that the extensionpoint is removed.
WITHOUT_CLASSIFICATION	// A string of the form "location". This will be confused by the // string ":", so we pick this out as an instruction to clear both // name and location.
WITHOUT_CLASSIFICATION	// A string of the form "name:location". Discard the middle token // (":")
WITHOUT_CLASSIFICATION	// Read past the colon.
WITHOUT_CLASSIFICATION	// The string to build
WITHOUT_CLASSIFICATION	// Get the fields we want
WITHOUT_CLASSIFICATION	// Put in the name field if it's there
WITHOUT_CLASSIFICATION	// Put in the location field if it's there
WITHOUT_CLASSIFICATION	/* First we decode the string: */
WITHOUT_CLASSIFICATION	/* Secondly we check the previous model structure: */
WITHOUT_CLASSIFICATION	/* And 3rd, we adapt the model: */
WITHOUT_CLASSIFICATION	// Same class, other operation
WITHOUT_CLASSIFICATION	// Other class
WITHOUT_CLASSIFICATION	// We found the classifier, now go find the operation:
WITHOUT_CLASSIFICATION	/* Here we located the new classifier                          * with its operation. */
WITHOUT_CLASSIFICATION	/* the text was: {frozen} */
WITHOUT_CLASSIFICATION	/* the text was: {frozen = false} */
WITHOUT_CLASSIFICATION	/* the text was: {frozen = true} */
WITHOUT_CLASSIFICATION	// Copy returned parameters because it will be a live collection for MDR
WITHOUT_CLASSIFICATION	// Should we be getting this from the GUI? BT 11 aug 2002
WITHOUT_CLASSIFICATION	// no type defined yet
WITHOUT_CLASSIFICATION	/* If the current property occurs a second time             * in the given list of properties, then skip it: */
WITHOUT_CLASSIFICATION	/* This automatically pulls in a TagDefinition from the profile: */
WITHOUT_CLASSIFICATION	/* The TV existed, but maybe it was not "true": */
WITHOUT_CLASSIFICATION	/* TODO: For UML2: Check if the type of the TV is String. */
WITHOUT_CLASSIFICATION	/* Generate all the existing internal transitions,         * so that we can compare them as text with the newly entered ones.         */
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	/* This would be solution (1):                  * Model.getExtensionMechanismsHelper().setDataValues(                 *      taggedValue, new String[] {"false"});                 */
WITHOUT_CLASSIFICATION	/* There are 2 possibilities: either (1) we follow the traditional notation                  * philosophy, and set the tagged value to false, or (2) we restore to                  * the pristine situation and delete the taggedValue (whatever the                  * value was). I chose the latter (mvw).*/
WITHOUT_CLASSIFICATION	// Allow concatenation order and separator to be localized
WITHOUT_CLASSIFICATION	/*Parameter etc.*/
WITHOUT_CLASSIFICATION	/* "in" is the default */
WITHOUT_CLASSIFICATION	/*"in"*/
WITHOUT_CLASSIFICATION	// return nothing
WITHOUT_CLASSIFICATION	// it can still be null if the UML element  // did not have a multiplicity defined.
WITHOUT_CLASSIFICATION	/* Let's not be picky about the brackets - just remove them: */
WITHOUT_CLASSIFICATION	// get the // classifier
WITHOUT_CLASSIFICATION	// the State of a ClassifierInState is removed, // so let's reduce it to a Classifier.
WITHOUT_CLASSIFICATION	// the model is changed - job done
WITHOUT_CLASSIFICATION	// Strings
WITHOUT_CLASSIFICATION	/* Remove the states that did not match. */
WITHOUT_CLASSIFICATION	/*                     * Now we have to see if any state in any statemachine of                     * classifier is named [name]. If so, then we only have to                     * link the state to c.                     */
WITHOUT_CLASSIFICATION	// the model is changed - our job is done
WITHOUT_CLASSIFICATION	// the model is changed - our job is done
WITHOUT_CLASSIFICATION	// no state named s is found, so we have to // reject the user's input
WITHOUT_CLASSIFICATION	/* Finally, do the adaptations: */
WITHOUT_CLASSIFICATION	// then c is a "normal" Classifier // UML states
WITHOUT_CLASSIFICATION	// let's create a new ClassifierInState with the correct links
WITHOUT_CLASSIFICATION	/* This updates the diagram - hence as last statement: */
WITHOUT_CLASSIFICATION	// case 2
WITHOUT_CLASSIFICATION	// case 3
WITHOUT_CLASSIFICATION	/*         * We can distinguish between 4 cases:         * 1. A trigger is given. None exists yet.         * 2. The trigger was present, and it is the same type,         * or a different type, and its text is changed, or the same.         * 3. A trigger is not given. None exists yet.         * 4. The name of the trigger was present, but is removed.         * The reaction in these cases should be:         * 1. Find the referred trigger (issue 5988) or create a new one, and hook it to the transition.         * 2. Rename the trigger.         * 3. Nop.         * 4. Unhook and erase the existing trigger.         */
WITHOUT_CLASSIFICATION	// if no classifier has been set, then entering a state is // not useful, so the user's input has to be rejected.
WITHOUT_CLASSIFICATION	/* TODO: If the next line trows an exception, then what                     * do we do with the remainder of the                     * parsed/to be parsed lines?                     */
WITHOUT_CLASSIFICATION	/* Add this new one, and mark it to be retained: */
WITHOUT_CLASSIFICATION	/* Process the final list of internal transitions,         * and hook it to the state:         */
WITHOUT_CLASSIFICATION	// don't forget to remove old internals!
WITHOUT_CLASSIFICATION	// Make next accesses to this instance predictable:
WITHOUT_CLASSIFICATION	// and hook in the new ones:
WITHOUT_CLASSIFICATION	// the ActionExpression
WITHOUT_CLASSIFICATION	// let's look for a TimeEvent, ChangeEvent, CallEvent or SignalEvent
WITHOUT_CLASSIFICATION	// operation(paramlist)
WITHOUT_CLASSIFICATION	// the part after the || is for when there's nothing between the ()
WITHOUT_CLASSIFICATION	/* It is safe to give a null to the next function,         * since a statemachine is always composed by a model anyhow. */
WITHOUT_CLASSIFICATION	// else the empty s will do
WITHOUT_CLASSIFICATION	// case 1 and 2
WITHOUT_CLASSIFICATION	/*language*/
WITHOUT_CLASSIFICATION	/* Do not set the name. */
WITHOUT_CLASSIFICATION	/* Do not set the name. */
WITHOUT_CLASSIFICATION	/* This case is a bit different, because of the parameters.                      * If the event already exists, the parameters are ignored. */
WITHOUT_CLASSIFICATION	// when(...)
WITHOUT_CLASSIFICATION	// signalname
WITHOUT_CLASSIFICATION	// and parse the parameter list
WITHOUT_CLASSIFICATION	/* And hook it to the transition immediately,                 * so that an exception can not cause it to remain dangling: */
WITHOUT_CLASSIFICATION	/* Do nothing. */
WITHOUT_CLASSIFICATION	// yes, there are more:
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	/*Parameter etc.*/
WITHOUT_CLASSIFICATION	/* "in" is the default */
WITHOUT_CLASSIFICATION	/*"in"*/
WITHOUT_CLASSIFICATION	// return nothing
WITHOUT_CLASSIFICATION	// and parse the parameter list
WITHOUT_CLASSIFICATION	// case 2
WITHOUT_CLASSIFICATION	/* Just change the time expression */
WITHOUT_CLASSIFICATION	// we have an event without expression
WITHOUT_CLASSIFICATION	/* It's a time-event now,                         * but was of another type before! */
WITHOUT_CLASSIFICATION	/* Just change the ChangeExpression */
WITHOUT_CLASSIFICATION	/* Create a new expression: */
WITHOUT_CLASSIFICATION	/* The parsed text describes a change-event,                         * but the model contains another type! */
WITHOUT_CLASSIFICATION	/* Just change the Name and linked operation */
WITHOUT_CLASSIFICATION	/* TODO: Change the linked operation. */
WITHOUT_CLASSIFICATION	/* Just change the Name and linked signal */
WITHOUT_CLASSIFICATION	// case 3 and 4
WITHOUT_CLASSIFICATION	/* case 3 */
WITHOUT_CLASSIFICATION	/* case 3 */
WITHOUT_CLASSIFICATION	// case 4 // erase it
WITHOUT_CLASSIFICATION	// case 4 // erase it
WITHOUT_CLASSIFICATION	/* Do not check if the parameters match. */
WITHOUT_CLASSIFICATION	// case 1
WITHOUT_CLASSIFICATION	// NSUML does this (?) // Model.getFacade().setGuard(trans, g);
WITHOUT_CLASSIFICATION	/* No text. We may remove the literal. */
WITHOUT_CLASSIFICATION	/* No non-white chars in text? remove literal! */
WITHOUT_CLASSIFICATION	/* Heuristic algorithm: do not show stereotypes if there is no name. */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JComponent#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// strip any trailing semi-colons
WITHOUT_CLASSIFICATION	// construct bases string (comma separated)
WITHOUT_CLASSIFICATION	/* Great! The class already existed - just use it. */
WITHOUT_CLASSIFICATION	/* If no base was typed, then only set the name: */
WITHOUT_CLASSIFICATION	/* Only set the name if the base was found: */
WITHOUT_CLASSIFICATION	/* If the base was not changed, then only set the name: */
WITHOUT_CLASSIFICATION	//get the associationRole name
WITHOUT_CLASSIFICATION	/* Let's create a class with the given name, otherwise         * the user will not understand why we refuse his input! */
WITHOUT_CLASSIFICATION	// Only instantiate when we need it.
WITHOUT_CLASSIFICATION	/* If the base is already set to this assoc,                      * then do not set it again.                     * This check is needed, otherwise the setbase()                     *  below gives an exception.*/
WITHOUT_CLASSIFICATION	// 2002-07-31 // Jaap Branderhorst // from here made visibility etc. configurable
WITHOUT_CLASSIFICATION	//get the base association name
WITHOUT_CLASSIFICATION	// no instantiations
WITHOUT_CLASSIFICATION	/*             * The next one defaults to TRUE, to stay compatible with older             * ArgoUML versions that did not have this setting:             */
WITHOUT_CLASSIFICATION	// end of OCLEvaluator
WITHOUT_CLASSIFICATION	// look for associations
WITHOUT_CLASSIFICATION	// look for associations
WITHOUT_CLASSIFICATION	//MAssociationEnd
WITHOUT_CLASSIFICATION	//MParameter
WITHOUT_CLASSIFICATION	//MAssociationEnd
WITHOUT_CLASSIFICATION	// The ocl toolkit does not like void return types
WITHOUT_CLASSIFICATION	// MClassifiers // cannot be Bag
WITHOUT_CLASSIFICATION	//MClassifier
WITHOUT_CLASSIFICATION	// first search for appropriate attributes
WITHOUT_CLASSIFICATION	// first search for appropriate attributes
WITHOUT_CLASSIFICATION	//MClassifier
WITHOUT_CLASSIFICATION	//MOperation
WITHOUT_CLASSIFICATION	//MOperation
WITHOUT_CLASSIFICATION	// ... and not incompletely imported
WITHOUT_CLASSIFICATION	/* Query checking added 05/21/01, sz9 */
WITHOUT_CLASSIFICATION	/* Query checking added 05/21/01, sz9 */
WITHOUT_CLASSIFICATION	/* end class OCLExpander */
WITHOUT_CLASSIFICATION	// skip first parameter == return type
WITHOUT_CLASSIFICATION	// skip first parameter == return type
WITHOUT_CLASSIFICATION	// Only look at classes...
WITHOUT_CLASSIFICATION	// abstract classes are hardly ever singletons
WITHOUT_CLASSIFICATION	// and not association classes
WITHOUT_CLASSIFICATION	// with a name...
WITHOUT_CLASSIFICATION	// If there is an attribute which is not static => no problem
WITHOUT_CLASSIFICATION	// If there is an outgoing association => no problem
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// Only look at classes
WITHOUT_CLASSIFICATION	// Only look at classes
WITHOUT_CLASSIFICATION	// Check for Singleton stereotype, uninitialised instance variables and // outgoing associations, as per JavaDoc above.
WITHOUT_CLASSIFICATION	// Found no such attribute
WITHOUT_CLASSIFICATION	// We only look at singletons
WITHOUT_CLASSIFICATION	// We only look at singletons
WITHOUT_CLASSIFICATION	/* end class CrSingletonViolatedOnlyPrivateConstructors */
WITHOUT_CLASSIFICATION	// NOTE: For historical reasons true == hide, so we need to invert // the sense of this
WITHOUT_CLASSIFICATION	/* end class CrEmptyPackage */
WITHOUT_CLASSIFICATION	/* At this stage during loading, the diagrams are         * not created yet - so we have to store this name for later use. */
WITHOUT_CLASSIFICATION	//            pw.close();
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	//project.setFile(file);
WITHOUT_CLASSIFICATION	// for AndroMDA profiles
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	// Give the parser a map of model elements // keyed by their UUID. This is used to allocate // figs to their owner using the "href" attribute // in PGML.
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// If we get a 2nd error, just ignore it
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Should never happen - something's really wrong
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main parsing methods
WITHOUT_CLASSIFICATION	/*         * @see java.io.InputStream#close()         */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read()     */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read(byte[], int, int)     */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	//boolean upgradeRequired = !checkVersion(fileVersion, releaseVersion)
WITHOUT_CLASSIFICATION	// Upgrade is in the way for UML2 projects, so we turn it off in that case:
WITHOUT_CLASSIFICATION	// Load .argo project descriptor
WITHOUT_CLASSIFICATION	// Load the rest
WITHOUT_CLASSIFICATION	// Copy the todo items after the model and diagrams so that // any model elements or figs that the todo items refer to // will exist before creating critics.
WITHOUT_CLASSIFICATION	// first read the .argo file from Zip
WITHOUT_CLASSIFICATION	// Keep reading till we hit the <argo> tag
WITHOUT_CLASSIFICATION	// Get the version from the tag.
WITHOUT_CLASSIFICATION	// Skip 1 lines
WITHOUT_CLASSIFICATION	// Loop round loading the diagrams
WITHOUT_CLASSIFICATION	//private EventListenerList listenerList = new EventListenerList();
WITHOUT_CLASSIFICATION	// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE todo SYSTEM "todo.dtd" >
WITHOUT_CLASSIFICATION	// Keep reading till we get the left bracket of an opening tag
WITHOUT_CLASSIFICATION	// Compare each following character to see // that it matches the tag we want
WITHOUT_CLASSIFICATION	// We also want to match with the right bracket of the tag or // some other terminator
WITHOUT_CLASSIFICATION	// We've found the matching tag but do we have // the correct instance with matching attributes?
WITHOUT_CLASSIFICATION	// Read the name of the child tag // and then reset read position // back to that child tag.
WITHOUT_CLASSIFICATION	// Skip any whitespace till we should be on an equals sign.
WITHOUT_CLASSIFICATION	// Skip any whitespace till we should be on a quote symbol.
WITHOUT_CLASSIFICATION	// No other uses of string in PGMLHandler
WITHOUT_CLASSIFICATION	// Handle other uses of <private> contents
WITHOUT_CLASSIFICATION	// Sanity check - the returned path item placement // strategy should match the one in the UML. // If it doesn't, it could be that the UML was // created with an older argo version, and the new // argo version use a different placement strategy. // If they don't match, just use the default.
WITHOUT_CLASSIFICATION	// If any of the values are null, ignore the element.
WITHOUT_CLASSIFICATION	// If the PathItemPlacement was unknown, leave the // diagram with the default settings.
WITHOUT_CLASSIFICATION	// For a match to be found, it has to have the same // owner, and the same long class name.
WITHOUT_CLASSIFICATION	///** // * A list of the path item attributes for this container. // * The list is populated during parsing, them processed at endElement() // */ //private List<Hashtable<String, String>> pathItemAttrs = //    new ArrayList<Hashtable<String, String>>();
WITHOUT_CLASSIFICATION	// This code has to go within the startElement block after the strings // have been matched.
WITHOUT_CLASSIFICATION	//// Method 1: //// (collect data and assign later in endElement() method). //Hashtable<String, String> ht = //    new Hashtable<String, String>(); //ht.put("classname", classname); //ht.put("figclassname", figclassname); //ht.put("ownerhref", ownerhref); //ht.put("angle", angle); //ht.put("offset", offset); //pathItemAttrs.add(ht);
WITHOUT_CLASSIFICATION	// Create a new diagram wide settings block which is backed by // the project-wide defaults that we were passed
WITHOUT_CLASSIFICATION	// Ignore non-private elements within FigNode groups
WITHOUT_CLASSIFICATION	// Handle ItemUID in container contents
WITHOUT_CLASSIFICATION	// Discard class name, x y w h
WITHOUT_CLASSIFICATION	// The owner should always have already been set in the constructor
WITHOUT_CLASSIFICATION	// happens when 'is' comes from a zip file
WITHOUT_CLASSIFICATION	// continue with null stream, readDiagram(...) will take care of // it
WITHOUT_CLASSIFICATION	// TODO: Localize these
WITHOUT_CLASSIFICATION	// If the id does not look like a top-level Fig then we can assume // that this is an id of a FigEdgePort inside some FigEdge. // So extract the FigEdgePort from the FigEdge and return that as // the FigNode.
WITHOUT_CLASSIFICATION	// If there is no dot then this must be a top level Fig and can be // assumed to be a FigNode.
WITHOUT_CLASSIFICATION	// We are looking first to match with 3 different constructor // types. We would not expect a Fig to have any mix of these. // Any constructor other than these should be deprecated so we // look for these first. // Fig(DiagramEdgeSettings, DiagramSettings) // Fig(Object, Rectangle, DiagramSettings) // Fig(Rectangle, DiagramSettings)
WITHOUT_CLASSIFICATION	// FigNodeModelElements should match here
WITHOUT_CLASSIFICATION	// FigEdgeModelElements should match here (they have no // bounds)
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// Fall back to GEF's handling if we couldn't find an appropriate // constructor
WITHOUT_CLASSIFICATION	//myWriter,
WITHOUT_CLASSIFICATION	// Empty constructor
WITHOUT_CLASSIFICATION	// Empty constructor
WITHOUT_CLASSIFICATION	// for compatibility with older format
WITHOUT_CLASSIFICATION	// <model> is not used in current implementation
WITHOUT_CLASSIFICATION	// <model> is not used in current implementation
WITHOUT_CLASSIFICATION	/* || model == null */
WITHOUT_CLASSIFICATION	/* || model == null */
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system // to unsaved!
WITHOUT_CLASSIFICATION	// Write out header section
WITHOUT_CLASSIFICATION	// Note we assume members are ordered correctly already
WITHOUT_CLASSIFICATION	// let's initialize the progressMgr
WITHOUT_CLASSIFICATION	// Run through any stylesheet upgrades
WITHOUT_CLASSIFICATION	// Don't use systemId here or it will get opened in preference // to inputStream.
WITHOUT_CLASSIFICATION	// UML 2.x files could also contain a profile model. // Try again with uml:Profile as main tag.
WITHOUT_CLASSIFICATION	// let's update the progress
WITHOUT_CLASSIFICATION	// If we're trying to load a file from a future version // complain and refuse.
WITHOUT_CLASSIFICATION	// Empty constructor
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// No more we can do here on failure
WITHOUT_CLASSIFICATION	// Buffer containing characters which have been decoded from the bytes // in inBB.
WITHOUT_CLASSIFICATION	// RegEx pattern for XML declaration and, optionally, DOCTYPE // Backslashes are doubled up - one for Java, one for Regex
WITHOUT_CLASSIFICATION	// Convert from bytes back to characters
WITHOUT_CLASSIFICATION	// rewind our character buffer
WITHOUT_CLASSIFICATION	// Remove anything that matches our pattern
WITHOUT_CLASSIFICATION	// Remove null characters at the end
WITHOUT_CLASSIFICATION	// Reencode the remaining characters as bytes again
WITHOUT_CLASSIFICATION	// and write them to our output stream
WITHOUT_CLASSIFICATION	// Skip the <?xml... first line
WITHOUT_CLASSIFICATION	//cat.debug("NOTE: TodoParser handleStartTag:" + e.getName());
WITHOUT_CLASSIFICATION	// NOP
WITHOUT_CLASSIFICATION	/* This is expected to be safe, don't add a try block here */
WITHOUT_CLASSIFICATION	//cat.debug("Added ToDoItem: " + _headline);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.ContentHandler#startElement(java.lang.String,     *         java.lang.String, java.lang.String, org.xml.sax.Attributes)     */
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.ContentHandler#endElement(java.lang.String,     *         java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.ContentHandler#characters(char[], int, int)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	/* These strings match the XML element names in the argo.tee exactly. */
WITHOUT_CLASSIFICATION	// The following is deprecated, but can never be removed to preserve  // backward compatibility with old project files
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // protected methods
WITHOUT_CLASSIFICATION	// empty constructor
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // abstract methods
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // non-abstract methods
WITHOUT_CLASSIFICATION	//e.g:org.argouml.uml.generator.ui.ClassGenerationDialog -> poseidon.jar
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // convenience methods
WITHOUT_CLASSIFICATION	/* end class SAXParserBase */
WITHOUT_CLASSIFICATION	// Stop UI interception
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	/* Retain the previous project file even when the save operation         * crashes in the middle. Also create a backup file after saving. */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	// we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	// Make sure the file doesn't exist so the user will // get prompted to choose a new name
WITHOUT_CLASSIFICATION	// possibly use the following instead //            MemberFilePersister persister = new DiagramMemberFilePersister();
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // class methods
WITHOUT_CLASSIFICATION	/* end class XMLTokenTableBase */
WITHOUT_CLASSIFICATION	// These are the file formats I know about:
WITHOUT_CLASSIFICATION	// If anything goes wrong return the stack // trace as a string so that we get some // useful feedback.
WITHOUT_CLASSIFICATION	/**     * Return just the comment edges for a specific layer.     * TODO: Document: Diagram / layer?     *     * @param diagram The diagram.     * @return a {@link List} with the edges.     */
WITHOUT_CLASSIFICATION	/* make sure this setting exists in the configuration file         * to facilitate changing: */
WITHOUT_CLASSIFICATION	// Is row at top of screen?
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // FileFilter API
WITHOUT_CLASSIFICATION	// this check for files without extension...
WITHOUT_CLASSIFICATION	//        }
WITHOUT_CLASSIFICATION	/* end class XMLElement */
WITHOUT_CLASSIFICATION	// for AndroMDA
WITHOUT_CLASSIFICATION	// For some reason, this alleged directory is a single file // This could be that there is some confusion or just // the normal, that a single file was selected and is // supposed to be imported.
WITHOUT_CLASSIFICATION	// Get the contents of the directory
WITHOUT_CLASSIFICATION	// The following test can cause trouble with // links, because links are accepted as // directories, even if they link files. Links // could also result in infinite loops. For this // reason we don't do this traversing recursively.
WITHOUT_CLASSIFICATION	// If this file is a directory
WITHOUT_CLASSIFICATION	// load profile name
WITHOUT_CLASSIFICATION	// Yes, scroll up one row
WITHOUT_CLASSIFICATION	/* Testing: Works Ok. */
WITHOUT_CLASSIFICATION	// if there is only one package in the model, // we should suppose it's the profile model, // if there is more than one, we take the ones // marked as <<profile>>
WITHOUT_CLASSIFICATION	// load profile dependencies
WITHOUT_CLASSIFICATION	/* Set up the property panels for critics: */
WITHOUT_CLASSIFICATION	/* init profiles defined in jar files */
WITHOUT_CLASSIFICATION	// We have our own UML2 profile, but it is not used. Instead, // by the following line the build-in eclipse UML2 standard // profile and primitive types implementation are used.
WITHOUT_CLASSIFICATION	// Missing WFRs
WITHOUT_CLASSIFICATION	// Association Class // 4.5.3.2 [1]
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	// 4.5.3.2 [2]
WITHOUT_CLASSIFICATION	// Behavioral Feature // 4.5.3.5 [2]
WITHOUT_CLASSIFICATION	/* TODO: Partly overlaps CrOppEndVsAttr. */
WITHOUT_CLASSIFICATION	/* Tested with fabricated XMI - OK. */
WITHOUT_CLASSIFICATION	/* Tested with fabricated XMI - OK. */
WITHOUT_CLASSIFICATION	/* Tested with fabricated XMI - OK. */
WITHOUT_CLASSIFICATION	// 4.5.3.20 [4]
WITHOUT_CLASSIFICATION	//                    + "a.allConnections->exists(r | r.type.oclIsKindOf(Actor)) and "
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAIfExpression(tudresden.ocl.parser.node.AIfExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALogicalExpressionTail(tudresden.ocl.parser.node.ALogicalExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseARelationalExpressionTail(tudresden.ocl.parser.node.ARelationalExpressionTail)     */
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [2]
WITHOUT_CLASSIFICATION	// Classifier // 4.5.3.8 [5]
WITHOUT_CLASSIFICATION	// GeneralizableElement // 4.5.3.20 [1]
WITHOUT_CLASSIFICATION	// DataType // 4.5.3.12 [1]
WITHOUT_CLASSIFICATION	// Actor // 4.11.3.1 [1]
WITHOUT_CLASSIFICATION	// Namespace // 4.5.3.26 [2]
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [1]
WITHOUT_CLASSIFICATION	// Actor // 4.11.3.1 [2]
WITHOUT_CLASSIFICATION	/* Tested OK, except in some cases, depending on the         * sequence of the EPs. Probably the implementation of         * "forAll (x, y | ..." does not cover all combinations. */
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [4]
WITHOUT_CLASSIFICATION	// UseCase // 4.11.3.5 [3]
WITHOUT_CLASSIFICATION	// ActionState // 4.13.3.2 [3] // Issue 715
WITHOUT_CLASSIFICATION	// no default type for UML2
WITHOUT_CLASSIFICATION	// the UML Profile is always present and default
WITHOUT_CLASSIFICATION	// register the built-in profiles
WITHOUT_CLASSIFICATION	// if an exception is raised file is unusable
WITHOUT_CLASSIFICATION	// if the list does not exist add the code generation and // good practices profiles as default
WITHOUT_CLASSIFICATION	// this profile could have not been loaded when // the default profile configuration // was loaded at first, so we need to do it again
WITHOUT_CLASSIFICATION	// We assume profile is contained in a single extent
WITHOUT_CLASSIFICATION	// Nothing to delete if we couldn't get the packages
WITHOUT_CLASSIFICATION	// If we found an old-style name, update it to the new package name
WITHOUT_CLASSIFICATION	// Make sure the names didn't change again
WITHOUT_CLASSIFICATION	// simply use name as it is
WITHOUT_CLASSIFICATION	// //   if element is an AssociationEnd use //      the namespace of containing association //
WITHOUT_CLASSIFICATION	// if one side is null, compare with the equality operator
WITHOUT_CLASSIFICATION	// XXX: hypotheses for AFeatureCall: fwd = op, val = head
WITHOUT_CLASSIFICATION	// hypotheses no time expression (only invariants)
WITHOUT_CLASSIFICATION	/*                 * For a iterator call we should provide: (a) the variables (b)                 * the expression to be evaluated on each step (c) the                 * lambda-evaluator to evaluate it                 */
WITHOUT_CLASSIFICATION	// XXX hypothesis: no time expression (inv)
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAConstraint(tudresden.ocl.parser.node.AConstraint)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAClassifierContext(tudresden.ocl.parser.node.AClassifierContext)     */
WITHOUT_CLASSIFICATION	// these operations are ok for lists too
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, "OCL FEATURE CALL: " + subject + ""+ type +""+ feature + "" // + parameters);
WITHOUT_CLASSIFICATION	// XXX this should be done in CollectionsModelInterpreter // but it can't trigger another invokeFeature...
WITHOUT_CLASSIFICATION	// /** //  * Logger. //  */ // private static final Logger LOG = //     Logger.getLogger(DefaultOclEvaluator.class.getName());
WITHOUT_CLASSIFICATION	//LOG.log(Level.FINE, "OCL: " + ocl);
WITHOUT_CLASSIFICATION	// propagate
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// if test fails this element should not // be in the result set
WITHOUT_CLASSIFICATION	// if test is ok this element should not // be in the result set
WITHOUT_CLASSIFICATION	// these operations are ok for bags too
WITHOUT_CLASSIFICATION	/* 4.5.2.1 Abstraction */
WITHOUT_CLASSIFICATION	/* 4.5.2.3 Association */
WITHOUT_CLASSIFICATION	// Additional Operation 4.5.3.1 [1]
WITHOUT_CLASSIFICATION	/* 4.5.2.5 AssociationEnd */
WITHOUT_CLASSIFICATION	// Additional Operation 4.5.3.3 [1]
WITHOUT_CLASSIFICATION	/* 4.5.2.6 Attribute */
WITHOUT_CLASSIFICATION	/* 4.5.2.7 BehavioralFeature */
WITHOUT_CLASSIFICATION	/* 4.5.2.8 Binding */
WITHOUT_CLASSIFICATION	/* 4.5.2.9 Class */
WITHOUT_CLASSIFICATION	/* 4.5.2.10 Classifier */
WITHOUT_CLASSIFICATION	// TODO specifiedEnd??
WITHOUT_CLASSIFICATION	/* 4.5.2.11 Comment */
WITHOUT_CLASSIFICATION	/* 4.5.2.12 Component */
WITHOUT_CLASSIFICATION	// Additional Operation in 4.5.3.9
WITHOUT_CLASSIFICATION	// No, scroll down one row
WITHOUT_CLASSIFICATION	/* 4.5.2.14 Dependency */
WITHOUT_CLASSIFICATION	/* 4.5.2.18 ElementOwnership */
WITHOUT_CLASSIFICATION	/* 4.5.2.19 Enumeration */
WITHOUT_CLASSIFICATION	/* 4.5.2.20 EnumerationLiteral */
WITHOUT_CLASSIFICATION	/* 4.5.2.21 Feature */
WITHOUT_CLASSIFICATION	/* 4.5.2.23 Generalizable Element */
WITHOUT_CLASSIFICATION	// Additional Operation in 4.5.3.20
WITHOUT_CLASSIFICATION	/* 4.5.2.26 Method */
WITHOUT_CLASSIFICATION	/* 4.5.2.27 ModelElement */
WITHOUT_CLASSIFICATION	// avoiding null names
WITHOUT_CLASSIFICATION	// As extended by 4.6.2.2
WITHOUT_CLASSIFICATION	// Additional Operations in 4.5.3.25
WITHOUT_CLASSIFICATION	// Additional Operations in 4.5.3.26
WITHOUT_CLASSIFICATION	/* 4.5.2.29 Node */
WITHOUT_CLASSIFICATION	/* 4.5.2.30 Operation */
WITHOUT_CLASSIFICATION	/* 4.5.2.31 Parameter */
WITHOUT_CLASSIFICATION	/* 4.5.2.35 ProgrammingLanguageDataType */
WITHOUT_CLASSIFICATION	// Set the icon:
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     */
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	/* 4.5.2.37 StructuralFeature */
WITHOUT_CLASSIFICATION	/* 4.5.2.38 TemplateArgument */
WITHOUT_CLASSIFICATION	/* 4.5.2.39 TemplateParameter */
WITHOUT_CLASSIFICATION	/* 4.11.3.5 UseCase */
WITHOUT_CLASSIFICATION	/*  The operation specificationPath results in a set containing                     * all surrounding Namespaces that are not instances of                     *  Package.                     *  specificationPath : Set(Namespace)                     * specificationPath = self.allSurroundingNamespaces->select(n |                     *    n.oclIsKindOf(Subsystem) or n.oclIsKindOf(Class))                     **/
WITHOUT_CLASSIFICATION	/* 4.5.3.2 AssociationClass */
WITHOUT_CLASSIFICATION	/* The operation allConnections results in the set of all                     * AssociationEnds of the AssociationClass, including all                     * connections defined by its parent (transitive closure).                     */
WITHOUT_CLASSIFICATION	/* 4.6.2.3 Stereotype */
WITHOUT_CLASSIFICATION	// stereotypeConstraint ?
WITHOUT_CLASSIFICATION	/* 4.6.2.4 TagDefinition */
WITHOUT_CLASSIFICATION	/* 4.6.2.5 TaggedValue */
WITHOUT_CLASSIFICATION	// add adapters that do nothing for keyboard and mouse actions
WITHOUT_CLASSIFICATION	// discard the event if its source is not from the correct type
WITHOUT_CLASSIFICATION	// Guard against error conditions if climb search wasn't successful
WITHOUT_CLASSIFICATION	// Sets the mouse cursor to hourglass mode
WITHOUT_CLASSIFICATION	// Start receiving all events and consume them if necessary
WITHOUT_CLASSIFICATION	// Activate the glass pane capabilities
WITHOUT_CLASSIFICATION	// Stop receiving all events
WITHOUT_CLASSIFICATION	// Deactivate the glass pane capabilities
WITHOUT_CLASSIFICATION	// Sets the mouse cursor back to the regular pointer
WITHOUT_CLASSIFICATION	// no initialization required
WITHOUT_CLASSIFICATION	/* end class SpacerPanel */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Save. Performs "Save" in all Tabs.     */
WITHOUT_CLASSIFICATION	// Climb the component hierarchy until a RootPaneContainer is found or  // until the very top
WITHOUT_CLASSIFICATION	/* end class SplashPanel */
WITHOUT_CLASSIFICATION	// Retrieve an existing GlassPane if old one already exist or  // create a new one, otherwise return null
WITHOUT_CLASSIFICATION	// Add settings from the settings registry.
WITHOUT_CLASSIFICATION	// keep track of the visible window associated w/the component // useful during event filtering
WITHOUT_CLASSIFICATION	// show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	// If a toolbar was requested, create an empty one.
WITHOUT_CLASSIFICATION	// Increase width to accommodate all tabs on one row.
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Cancel. Performs "Cancel" in all Tabs.     */
WITHOUT_CLASSIFICATION	/* end class TabText */
WITHOUT_CLASSIFICATION	// If a recursive call from setVisible(), just return
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// windowOpen state will be changed when window is activated
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	/* We have to tell the settings tab in which project                     * the settings reside: */
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// We only request focus the first time we become visible
WITHOUT_CLASSIFICATION	// Use Case
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// Handle the same as an explicit cancel
WITHOUT_CLASSIFICATION	//        savePosition(prpTodo, TabToDo.class); //        savePosition(prpProperties, TabProps.class); //        savePosition(prpDocumentation, TabDocumentation.class); //        savePosition(prpStyle, TabStyle.class); //        savePosition(prpSource, TabSrc.class); //        savePosition(prpConstraints, TabConstraints.class); //        savePosition(prpTaggedValues, TabTaggedValues.class);
WITHOUT_CLASSIFICATION	// defer work until fetched/visible
WITHOUT_CLASSIFICATION	// Actor
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	//        loadPosition(prpTodo, TabToDo.class); //        loadPosition(prpProperties, TabProps.class); //        loadPosition(prpDocumentation, TabDocumentation.class); //        loadPosition(prpStyle, TabStyle.class); //        loadPosition(prpSource, TabSrc.class); //        loadPosition(prpConstraints, TabConstraints.class); //        loadPosition(prpTaggedValues, TabTaggedValues.class);
WITHOUT_CLASSIFICATION	// ------------- Rule management --------------
WITHOUT_CLASSIFICATION	// ----------- name -------------------------
WITHOUT_CLASSIFICATION	// ------ all rules ----------
WITHOUT_CLASSIFICATION	/** TODO: factor out     *     * @param rule the rule to be added     */
WITHOUT_CLASSIFICATION	// Put the current pane in a scroll pane.
WITHOUT_CLASSIFICATION	/* end class StylePanelFigText */
WITHOUT_CLASSIFICATION	// NOTE: These must stay in this order to match rendering styles
WITHOUT_CLASSIFICATION	// The boundary box as held in the target fig, and as listed in // the // boundary box style field (null if we don't have anything // valid)
WITHOUT_CLASSIFICATION	// Only reset the text if the two are not the same (i.e the fig // has // moved, rather than we've just edited the text, when // setTargetBBox() // will have made them the same). Note that styleBounds could // be null, // so we do the test this way round.
WITHOUT_CLASSIFICATION	// Change the fill colour
WITHOUT_CLASSIFICATION	// Change the line colour
WITHOUT_CLASSIFICATION	// Can't do anything if we don't have a fig.
WITHOUT_CLASSIFICATION	// Parse the boundary box text. Null is // returned if it is empty or // invalid, which causes no change. Otherwise we tell // GEF we are making // a change, make the change and tell GEF we've // finished.
WITHOUT_CLASSIFICATION	// Get the text in the field, and don't do anything if the // field is // empty.
WITHOUT_CLASSIFICATION	// Parse the string as if // possible
WITHOUT_CLASSIFICATION	// Empty implementation - we only care about keyTyped
WITHOUT_CLASSIFICATION	// Empty implementation - we only care about keyTyped
WITHOUT_CLASSIFICATION	// ignored - will never be called
WITHOUT_CLASSIFICATION	// add preloading progress bar?
WITHOUT_CLASSIFICATION	// JasonsThemes
WITHOUT_CLASSIFICATION	// TODO - lets pass in Project as a constructor argument
WITHOUT_CLASSIFICATION	/* Make up a default */
WITHOUT_CLASSIFICATION	/*lafClass == null ||*/
WITHOUT_CLASSIFICATION	// Set to the default LAF
WITHOUT_CLASSIFICATION	/* top, left, bottom, right */
WITHOUT_CLASSIFICATION	// If LAF is Metal (either set explicitly, or as the default)
WITHOUT_CLASSIFICATION	// Set a custom LAF
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JTree#fireTreeCollapsed(javax.swing.tree.TreePath)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JTree#setModel(javax.swing.tree.TreeModel)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	/* It looks better if the height increases, too */
WITHOUT_CLASSIFICATION	// TODO: 10 and 120 were found by trial and error.  Calculate them.
WITHOUT_CLASSIFICATION	//pack();
WITHOUT_CLASSIFICATION	// Not localized:
WITHOUT_CLASSIFICATION	// Alphabetic order!
WITHOUT_CLASSIFICATION	// Alphabetic order!
WITHOUT_CLASSIFICATION	/* end class AboutBox */
WITHOUT_CLASSIFICATION	// Save project at slightly lower priority to keep UI responsive
WITHOUT_CLASSIFICATION	// saves the project
WITHOUT_CLASSIFICATION	/* MVW: We should use default font sizes as much as possible.         * BTW, this impacts only the width, and reduces readibility:         */
WITHOUT_CLASSIFICATION	//        setFont(LookAndFeelMgr.getInstance().getSmallFont());
WITHOUT_CLASSIFICATION	// This enables tooltips for tree; this one won't be shown:
WITHOUT_CLASSIFICATION	/* The default (16) puts the icons too close together: */
WITHOUT_CLASSIFICATION	// ------------ methods that override JTree methods ---------
WITHOUT_CLASSIFICATION	/*                 * If the name is too long or multi-line (e.g. for comments)                 * then we reduce to the first line or 80 chars.                 */
WITHOUT_CLASSIFICATION	// Look for stereotype
WITHOUT_CLASSIFICATION	// Use default formatting for any other type of UML element
WITHOUT_CLASSIFICATION	// ------------- other methods ------------------
WITHOUT_CLASSIFICATION	/* Labels at the left ... */
WITHOUT_CLASSIFICATION	/* ... and fields at the right. */
WITHOUT_CLASSIFICATION	/* The user's full name: */
WITHOUT_CLASSIFICATION	/* The user's email: */
WITHOUT_CLASSIFICATION	/* The project description: */
WITHOUT_CLASSIFICATION	/* This non-editable field shows          * the version of the ArgoUML          * that last saved this project: */
WITHOUT_CLASSIFICATION	/* We need to fill the whole pane,          * so that the description field can          * take all available space: */
WITHOUT_CLASSIFICATION	// There is no default description.
WITHOUT_CLASSIFICATION	// //////
WITHOUT_CLASSIFICATION	// Defer all work until we're actually needed
WITHOUT_CLASSIFICATION	// ////////////
WITHOUT_CLASSIFICATION	// //////////
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	// these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ActionListener implementation
WITHOUT_CLASSIFICATION	// //////
WITHOUT_CLASSIFICATION	// /////
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */
WITHOUT_CLASSIFICATION	//    private JCheckBox jchbBold = null;
WITHOUT_CLASSIFICATION	// find and add all subdirectories
WITHOUT_CLASSIFICATION	//    private JCheckBox jchbItalic = null;
WITHOUT_CLASSIFICATION	// Initialize font faces list
WITHOUT_CLASSIFICATION	// Most of this code originates from ActionOpenProject.
WITHOUT_CLASSIFICATION	// Initialize font sizes list
WITHOUT_CLASSIFICATION	//            jContentPane.add(getJchbBold(), gridBagConstraints2); //            jContentPane.add(getJchbItalic(), gridBagConstraints3);
WITHOUT_CLASSIFICATION	/* Try adding the extension from the chosen filter. */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MouseListener implementation
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	// these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	// these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // KeyListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ListSelectionListener implementation
WITHOUT_CLASSIFICATION	// diagrams are not placed in search results
WITHOUT_CLASSIFICATION	// Only return once per diagram so we don't, for example, find // a class as a diagram element and also as a child of a package // which is on the diagram
WITHOUT_CLASSIFICATION	// no related
WITHOUT_CLASSIFICATION	//TODO: tabs for class, state, usecase, help
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// TabResults has really large preferred height, so divide in // half to reduce size of dialog which will be sized based on // this preferred size.
WITHOUT_CLASSIFICATION	// Load project at slightly lower priority to keep UI responsive
WITHOUT_CLASSIFICATION	//JTabbedPane tabs = new JTabbedPane(); //mainPanel.add(tabs, BorderLayout.CENTER); //tabs.addTab("All Diagrams", allDiagrams);
WITHOUT_CLASSIFICATION	/* The south panel always has tabs - but they are             * added (later) elsewhere.             */
WITHOUT_CLASSIFICATION	// loads the project
WITHOUT_CLASSIFICATION	// default tab todo
WITHOUT_CLASSIFICATION	// Special case for backward compatibility
WITHOUT_CLASSIFICATION	// default tab todo
WITHOUT_CLASSIFICATION	// Select prop panel if current panel is not appropriate // for selected target
WITHOUT_CLASSIFICATION	// not visible any more - so remove as listener
WITHOUT_CLASSIFICATION	// Newly selected tab may have stale target info, so generate // a new set target event for it to refresh it
WITHOUT_CLASSIFICATION	// update the previously selected tab
WITHOUT_CLASSIFICATION	// The other tabs need to be updated depending on the selection.
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// TODO: Quick return here for target == null? - tfm
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//          Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// ---------------- listener management ----------------
WITHOUT_CLASSIFICATION	// --------------- tree nodes -------------------------
WITHOUT_CLASSIFICATION	// ------------- tree structure -----------------
WITHOUT_CLASSIFICATION	// see getValue(), setValue()
WITHOUT_CLASSIFICATION	//Create a timer.
WITHOUT_CLASSIFICATION	// Mount the glasspane on the component window
WITHOUT_CLASSIFICATION	// keep track of the glasspane as an instance variable
WITHOUT_CLASSIFICATION	// Start interception UI interactions
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/* If action comes in with *no* modifiers, it is a pure                 * keyboard event (e.g. spacebar), so do it.  Anything else                 * is probably a mouse event, so ignore it. Mouse events are                 * dealt with by mousePressed() instead (see bottom of page).                 */
WITHOUT_CLASSIFICATION	/* end class StylePanel */
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	// Make sure the correspondence that we depend on doesn't change
WITHOUT_CLASSIFICATION	//getContentPane().add(_menuBar, BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	// allows me to ask "Do you want to save first?"
WITHOUT_CLASSIFICATION	// Add listener for project changes
WITHOUT_CLASSIFICATION	// add listener to get notified when active diagram changes
WITHOUT_CLASSIFICATION	// Add a listener to focus changes. // Rationale: reset the undo manager to start a new chain.
WITHOUT_CLASSIFICATION	/* We get many many events (why?), so let's filter: */
WITHOUT_CLASSIFICATION	// create the todopane
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JFrame#getJMenuBar()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// There are various details panes all of which could hold // different tabs pages according to users settings. // Place each pane in the required border area.
WITHOUT_CLASSIFICATION	// Toolbar boundary is the area between the menu and the status // bar. It contains the workarea at centre and the toolbar // position north, south, east or west.
WITHOUT_CLASSIFICATION	// Add target listeners for details panes
WITHOUT_CLASSIFICATION	// Convenience methods to return saved width and height values
WITHOUT_CLASSIFICATION	// In theory there can be multiple details pane (work in // progress). It must first be determined which details // page contains the properties tab. Bob Tarling 7 Dec 2002
WITHOUT_CLASSIFICATION	// The trySave method results in the save taking place in another thread. // If that completes without error the ProjectBrowser.exit() method will // be called which will actually exist the system.
WITHOUT_CLASSIFICATION	/* end class WindowCloser */
WITHOUT_CLASSIFICATION	// the project changed
WITHOUT_CLASSIFICATION	//Designer.TheDesigner.getToDoList().removeAllElements();
WITHOUT_CLASSIFICATION	// update all panes
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////// // TargetListener methods implemented so notified when selected // diagram changes. Used to update the window title.
WITHOUT_CLASSIFICATION	// this method is invoked from several places, so we have to check // whether if the project uri is set or not
WITHOUT_CLASSIFICATION	// does the file really exists?
WITHOUT_CLASSIFICATION	// project file doesn't exist. let's pop up a message dialog..
WITHOUT_CLASSIFICATION	// ..and let's ask the user whether he wants to save the actual // project into a new file or not
WITHOUT_CLASSIFICATION	// save action has been cancelled
WITHOUT_CLASSIFICATION	// Attempt to save this project under a new name.
WITHOUT_CLASSIFICATION	// Prompt the user for the new name.
WITHOUT_CLASSIFICATION	// let's call the real save method
WITHOUT_CLASSIFICATION	// Repair any errors in the project
WITHOUT_CLASSIFICATION	/*             * notification of menu bar             */
WITHOUT_CLASSIFICATION	/*     * Simulate some errors to repair.     * Replace with junits - Bob     */
WITHOUT_CLASSIFICATION	// Change to true to enable testing
WITHOUT_CLASSIFICATION	// A Fig with a null owner
WITHOUT_CLASSIFICATION	// A Fig with a null layer
WITHOUT_CLASSIFICATION	// A Fig with a removed model element
WITHOUT_CLASSIFICATION	// Remove the old project first.  It's wasteful to create a temp // empty project, but too much of ArgoUML depends on having a // current project
WITHOUT_CLASSIFICATION	// Let's save this project in the mru list
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// Let's save this project as the last used one // in the configuration file
WITHOUT_CLASSIFICATION	// an error that can be corrected by the user, so no stack // trace, but instead an explanation and a hint how to fix
WITHOUT_CLASSIFICATION	// an error that can be corrected by the user, so no stack // trace, but instead an explanation and a hint how to fix
WITHOUT_CLASSIFICATION	// This is temporary. Load project // should create a new project // with its own UndoManager and so // there should be no Command
WITHOUT_CLASSIFICATION	// Make sure save action is always reinstated
WITHOUT_CLASSIFICATION	// We clear the save-required flag on the Swing event thread // in the hopes that it gets done after any other background // work (listener updates) that is being done there
WITHOUT_CLASSIFICATION	// adding project files icon
WITHOUT_CLASSIFICATION	/* end class ProjectBrowser */
WITHOUT_CLASSIFICATION	// Defer initialization until we're visible
WITHOUT_CLASSIFICATION	// Make the result inmediately visible in case of apply:
WITHOUT_CLASSIFICATION	/* Disabled since it gives various problems: e.g. the toolbar icons         * get too wide. Also the default does not give the new java 5.0 looks.        SwingUtilities.updateComponentTreeUI(SwingUtilities.getRootPane(this));        */
WITHOUT_CLASSIFICATION	//filled in later
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// Create new menu item if it doesn't exist for this class.
WITHOUT_CLASSIFICATION	// Make this change persistant
WITHOUT_CLASSIFICATION	// If menus don't containt menu item necessary for this class, create it
WITHOUT_CLASSIFICATION	// If visibility is already changed for this class, respect it.
WITHOUT_CLASSIFICATION	// If there is persistant state for this toolbar, respect it, // or add it to persistance data
WITHOUT_CLASSIFICATION	// Queue to event thread to prevent race during close
WITHOUT_CLASSIFICATION	// Add toolbar.
WITHOUT_CLASSIFICATION	// Register popup menu with toolbar.
WITHOUT_CLASSIFICATION	// these settings are needed to make the ProgressMonitor pop up early
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	// Add settings from the settings registry.
WITHOUT_CLASSIFICATION	// Increase width to accommodate all tabs on one row.
WITHOUT_CLASSIFICATION	// windowOpen state will be changed when window is activated
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Save. Performs "Save" in all Tabs.     */
WITHOUT_CLASSIFICATION	/*     * Called when the user has pressed Cancel. Performs "Cancel" in all Tabs.     */
WITHOUT_CLASSIFICATION	// We only request focus the first time we become visible
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	// Handle the same as an explicit cancel
WITHOUT_CLASSIFICATION	// File load/save gets done on a background thread, so we'll  // probably have to queue this to the Swing event thread
WITHOUT_CLASSIFICATION	// TODO: concatenate? - tfm // overwrite for now
WITHOUT_CLASSIFICATION	/* end class StylePanelFigRRect */
WITHOUT_CLASSIFICATION	// Let the parent do its refresh.
WITHOUT_CLASSIFICATION	// lets redraw the box
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getPreferredSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * Called when the user selects a tab, by clicking or otherwise.     *     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// We don't know what thread events will be delivered on, so make sure // we run Swing methods on the Swing thread
WITHOUT_CLASSIFICATION	//This instead of the label ??? //displayPane.setBorder(new TitledBorder( //    Translator.localize("Display: ")));
WITHOUT_CLASSIFICATION	// add in front of the others // add the label in front of the "pane"
WITHOUT_CLASSIFICATION	// and finally, adjust the scrollbars to show the Fig
WITHOUT_CLASSIFICATION	// % thresholds for bar color changes
WITHOUT_CLASSIFICATION	// making it possible to jump to the modelroots
WITHOUT_CLASSIFICATION	// org.argouml.ui.TabTable // TabMetrics // TabJavaSrc | TabSrc // TabUMLDisplay // TabHash
WITHOUT_CLASSIFICATION	/*     * Timer action method.  Periodically update our stats and force a repaint.     */
WITHOUT_CLASSIFICATION	// Virtual memory (heap) stats
WITHOUT_CLASSIFICATION	// Thin bar to show current allocated heap size
WITHOUT_CLASSIFICATION	// Thin bar to show current used
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	// the introducing label
WITHOUT_CLASSIFICATION	// how to handle empty target lists?  probably the // MultiEditorPane should only show an empty pane in that case
WITHOUT_CLASSIFICATION	//    private JPanel constraintsTab = new JPanel();
WITHOUT_CLASSIFICATION	//The child is sometimes not found when the tree is being updated
WITHOUT_CLASSIFICATION	//    private JTabbedPane tabs = new JTabbedPane();
WITHOUT_CLASSIFICATION	//        tabs.setMinimumSize(new Dimension(300, 250));
WITHOUT_CLASSIFICATION	//    private JPanel modifiedTab = new JPanel();
WITHOUT_CLASSIFICATION	/* The ActivityGraph. */
WITHOUT_CLASSIFICATION	//    private JPanel tagValsTab = new JPanel();
WITHOUT_CLASSIFICATION	// open space at gridy = 2;
WITHOUT_CLASSIFICATION	//        mainPanel.add(north, BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	// Any type
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     * java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// TODO: Localize
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MouseListener implementation
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	// This text is for the developers. // It doesn't need to be localized.
WITHOUT_CLASSIFICATION	// These shouldn't really be <br> instead of <p> elements, but // the lines all get run together when pasted into a browser window.
WITHOUT_CLASSIFICATION	//        JPanel north = new JPanel(); //        north.setLayout(new BorderLayout()); //        north.add(tabs, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	//        initConstraintsTab(); //        tabs.addTab(Translator.localize("tab.constraints"), //		     constraintsTab); //        tabs.setEnabledAt(3, false);
WITHOUT_CLASSIFICATION	//        initTagValsTab(); //        tabs.addTab(Translator.localize("dialog.find.tab.tagged-values"), //                tagValsTab); //        tabs.setEnabledAt(2, false);
WITHOUT_CLASSIFICATION	/* end class FindDialog */
WITHOUT_CLASSIFICATION	//name += " in " + dName;
WITHOUT_CLASSIFICATION	// Not in UML 2.x (or metatypes) //        type.addItem(PredicateMType.create( //                Model.getMetaTypes().getActivityGraph()));
WITHOUT_CLASSIFICATION	// Set the name and icon:
WITHOUT_CLASSIFICATION	//help tab is 0
WITHOUT_CLASSIFICATION	// end runGC_actionPerformed()
WITHOUT_CLASSIFICATION	/* end class PredicateMType */
WITHOUT_CLASSIFICATION	//end updateInfo()
WITHOUT_CLASSIFICATION	/* end class NavigatorPane */
WITHOUT_CLASSIFICATION	// end copy_actionPerformed()
WITHOUT_CLASSIFICATION	/* end class ActionGotoDiagram */
WITHOUT_CLASSIFICATION	/* end class SystemInfoDialog */
WITHOUT_CLASSIFICATION	// clean the history
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	/* But exclude elements that enclose others,                      * since their algorithms to calculate the minimum size                      * does not take enclosed objects into account: */
WITHOUT_CLASSIFICATION	//        super(Translator.localize("action.size-to-fit-contents"));
WITHOUT_CLASSIFICATION	// unsupported. 
WITHOUT_CLASSIFICATION	/* Only resize elements which the user would also be able             * to resize: */
WITHOUT_CLASSIFICATION	// if a default action was voided then we have to save it
WITHOUT_CLASSIFICATION	// Set the name:
WITHOUT_CLASSIFICATION	// let's load the default shortcut for every action
WITHOUT_CLASSIFICATION	/* end class ActionFind */
WITHOUT_CLASSIFICATION	// let's load the current shortcut from the configuration (as a string)
WITHOUT_CLASSIFICATION	// generate menu
WITHOUT_CLASSIFICATION	// it should never go here!
WITHOUT_CLASSIFICATION	// view menu
WITHOUT_CLASSIFICATION	// file menu
WITHOUT_CLASSIFICATION	// align submenu
WITHOUT_CLASSIFICATION	// edit menu
WITHOUT_CLASSIFICATION	// create menu
WITHOUT_CLASSIFICATION	// arrange menu
WITHOUT_CLASSIFICATION	// help menu
WITHOUT_CLASSIFICATION	// help menu
WITHOUT_CLASSIFICATION	/* This ID is used as DEFAULT_ID ! */
WITHOUT_CLASSIFICATION	/* end class ActionAboutArgoUML */
WITHOUT_CLASSIFICATION	// distribute submenu
WITHOUT_CLASSIFICATION	/* end class ActionPageSetup */
WITHOUT_CLASSIFICATION	// trap focus traversal keys also 
WITHOUT_CLASSIFICATION	// let's add the key printing logic
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	/* The "Close window" shortcut (ALT+F4) actually can't             * be registered as a shortcut,             * because it closes the configuration dialog! */
WITHOUT_CLASSIFICATION	// if a not-default current shortcut was added, then we have to // save it
WITHOUT_CLASSIFICATION	// if the actual is not going to be saved, then try to remove it // (as it could have been cancelled)
WITHOUT_CLASSIFICATION	// no modifiers - let's check if the key is valid
WITHOUT_CLASSIFICATION	// middle of shortcut 
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// add last recently used list _before_ exit menu
WITHOUT_CLASSIFICATION	// KeyStroke f7 = KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0);
WITHOUT_CLASSIFICATION	// and exit menu entry starting with separator.
WITHOUT_CLASSIFICATION	// This used to be deferred, but it's only 30-40 msec of work.
WITHOUT_CLASSIFICATION	// now, let's set up the "selected action" container
WITHOUT_CLASSIFICATION	// generate.add(Actions.GenerateWeb);
WITHOUT_CLASSIFICATION	// Add the help menu item.
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the name and icon:
WITHOUT_CLASSIFICATION	// clean the history
WITHOUT_CLASSIFICATION	// Comment out when we are ready to release undo/redo //        JMenuItem undoItem = edit.add( //                ProjectActions.getInstance().getUndoAction()); //        setMnemonic(undoItem, "Undo"); //        ShortcutMgr.assignAccelerator(undoItem, ShortcutMgr.ACTION_UNDO); // //        JMenuItem redoItem = edit.add( //                ProjectActions.getInstance().getRedoAction()); //        setMnemonic(redoItem, "Redo"); //        ShortcutMgr.assignAccelerator(redoItem, ShortcutMgr.ACTION_REDO); // //        edit.addSeparator();
WITHOUT_CLASSIFICATION	// JMenuItem cutItem = edit.add(ActionCut.getInstance()); // setMnemonic(cutItem, "Cut"); // setAccelerator(cutItem, ctrlX); // // JMenuItem copyItem = edit.add(ActionCopy.getInstance()); // setMnemonic(copyItem, "Copy"); // setAccelerator(copyItem, ctrlC); // // JMenuItem pasteItem = edit.add(ActionPaste.getInstance()); // setMnemonic(pasteItem, "Paste"); // setAccelerator(pasteItem, ctrlV); // // edit.addSeparator();
WITHOUT_CLASSIFICATION	/* Create the edit toolbar based on the Menu.             * All menuItems that have an Icon are presumed to             * be based upon an Action,             * and these Actions are used in the toolbar.  */
WITHOUT_CLASSIFICATION	// setHelpMenu(help);
WITHOUT_CLASSIFICATION	//Component or Action
WITHOUT_CLASSIFICATION	// set maximum length of menu entry
WITHOUT_CLASSIFICATION	//JMenuItem item = _fileMenu.add(new ActionReopenProject(filename));
WITHOUT_CLASSIFICATION	// the text is used by the event handler for opening the project
WITHOUT_CLASSIFICATION	// create all nessessary configuration keys for lru
WITHOUT_CLASSIFICATION	// holds file menu
WITHOUT_CLASSIFICATION	// text is short, tooltip is long
WITHOUT_CLASSIFICATION	// read existing file names from configuration
WITHOUT_CLASSIFICATION	// empty entry stops reading --> last line!
WITHOUT_CLASSIFICATION	// this is the recent count
WITHOUT_CLASSIFICATION	// delete all existing entries
WITHOUT_CLASSIFICATION	// add new entry as first entry
WITHOUT_CLASSIFICATION	// add other existing entries, but filter the just added one
WITHOUT_CLASSIFICATION	// save count
WITHOUT_CLASSIFICATION	// and store configuration props
WITHOUT_CLASSIFICATION	/* end class ActionExit */
WITHOUT_CLASSIFICATION	// box.setLocationRelativeTo(jframe);
WITHOUT_CLASSIFICATION	/* end class ActionHelp */
WITHOUT_CLASSIFICATION	// instantiation not allowed
WITHOUT_CLASSIFICATION	/* end class ActionPrint */
WITHOUT_CLASSIFICATION	// let's add the table, inside a JScrollPane
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnName(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getRowCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getValueAt(int, int)         */
WITHOUT_CLASSIFICATION	// Do nothing! // The next time we refresh, we will fetch the values again.
WITHOUT_CLASSIFICATION	// Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// init from config // read number, write result as new default and prepare keys
WITHOUT_CLASSIFICATION	// get already existing names from menu actions // real file names, not action names !
WITHOUT_CLASSIFICATION	// let's enable the radiobuttons container
WITHOUT_CLASSIFICATION	// updating the radiobuttons container's title
WITHOUT_CLASSIFICATION	// let's select the correct radio button
WITHOUT_CLASSIFICATION	// no shortcuts --> NONE
WITHOUT_CLASSIFICATION	// current shortcut == default --> DEFAULT
WITHOUT_CLASSIFICATION	// customized shortcut --> CUSTOM
WITHOUT_CLASSIFICATION	// let's reload the shortcuts
WITHOUT_CLASSIFICATION	// conflict detected: showing a warning to the user, instead of // saving shortcuts
WITHOUT_CLASSIFICATION	// saving shortcuts
WITHOUT_CLASSIFICATION	// if a shortcut has been select then we have to check if the actual // action is in conflict with other ones
WITHOUT_CLASSIFICATION	// this shortcut was already been assigned to another action; // let's pop-up a message for the user
WITHOUT_CLASSIFICATION	// blanking the old action's shortcut.. // and now refreshing the table.
WITHOUT_CLASSIFICATION	// re-selecting the old row, without changing the target - // and without throwing another ListSelectionEvent!
WITHOUT_CLASSIFICATION	// let's change the target
WITHOUT_CLASSIFICATION	// duplicate shortcut not found; let's check for duplicates
WITHOUT_CLASSIFICATION	// there's a duplicate: let's recheck if there is a conflict
WITHOUT_CLASSIFICATION	// updating the shortcut field
WITHOUT_CLASSIFICATION	// updating the table data
WITHOUT_CLASSIFICATION	// updating the actions
WITHOUT_CLASSIFICATION	// the shortcut has already been assigned to another action!
WITHOUT_CLASSIFICATION	// if the given object is a KeyStroke instance, then we ca
WITHOUT_CLASSIFICATION	// let's update also the actions array
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	/* The default nr of rows is 8,          * but since we have 9 perspectives by default now,          * setting to 9 is nicer. */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected. */
WITHOUT_CLASSIFICATION	// profile section: dealing with profiles in different states
WITHOUT_CLASSIFICATION	// 1. a noneditable applied profile
WITHOUT_CLASSIFICATION	// just no item added in this case
WITHOUT_CLASSIFICATION	// 3. the editable unapplied profile
WITHOUT_CLASSIFICATION	// end of profile section
WITHOUT_CLASSIFICATION	// Can't delete last top level model
WITHOUT_CLASSIFICATION	// Determine if only diagrams are in the target list.
WITHOUT_CLASSIFICATION	// "x nodes and x edges"
WITHOUT_CLASSIFICATION	// Check to see if all targets are classifiers // before adding an option to create an association between // them all
WITHOUT_CLASSIFICATION	// test if this element can be contained by the target
WITHOUT_CLASSIFICATION	// iterate through all possible model elements to determine which // are valid to be contained by the selected target
WITHOUT_CLASSIFICATION	/* end class ActionAddExistingRelatedNode */
WITHOUT_CLASSIFICATION	// this element can be contained add a menu item // that allows the user to take that action
WITHOUT_CLASSIFICATION	/* ... otherwise we select the item below the mousepointer. */
WITHOUT_CLASSIFICATION	/*             * We preserve the current (multiple) selection, if we are over part             * of it ...             */
WITHOUT_CLASSIFICATION	// unimplemented - we only care about expanding
WITHOUT_CLASSIFICATION	/* end class ExplorerMouseListener */
WITHOUT_CLASSIFICATION	// does nothing.
WITHOUT_CLASSIFICATION	// need to update the selection state.
WITHOUT_CLASSIFICATION	/*     * Perform recursive search of subtree rooted at 'node', selecting all nodes     * which have a userObject matching one of our targets.     */
WITHOUT_CLASSIFICATION	// get the elements
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// target may appear multiple places in the tree, so // we don't stop here (but it's expensive to search // the whole tree) - tfm - 20070904 // targets.remove(t); // break;
WITHOUT_CLASSIFICATION	// scan the visible rows for duplicates of // this elem and select them
WITHOUT_CLASSIFICATION	// check which targetmanager method to call
WITHOUT_CLASSIFICATION	// we must call the correct method on targetmanager // for each added or removed target
WITHOUT_CLASSIFICATION	// we can't remove the targets in one go, we have to // do it one by one.
WITHOUT_CLASSIFICATION	// setTargets(e.getNewTargets());
WITHOUT_CLASSIFICATION	// setTargets(e.getNewTargets());
WITHOUT_CLASSIFICATION	// at the top // right bottom // left bottom
WITHOUT_CLASSIFICATION	// the dialog is modal
WITHOUT_CLASSIFICATION	//sortJListModel(ruleLibraryList);
WITHOUT_CLASSIFICATION	//disable the buttons for now, since no selection has been made yet
WITHOUT_CLASSIFICATION	// the text will be set later
WITHOUT_CLASSIFICATION	// the text will be set later
WITHOUT_CLASSIFICATION	// remove the ones already selected (if a perspective is selected)
WITHOUT_CLASSIFICATION	// add them
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// update the label (which shows the number of rules)
WITHOUT_CLASSIFICATION	// must add an editable list of new ExplorerPerspective's // to the list model so that the original ones are not changed // in the case of a cancel action by the user.
WITHOUT_CLASSIFICATION	// set the newly selected item in the library list
WITHOUT_CLASSIFICATION	// update the label (which shows the number of rules)
WITHOUT_CLASSIFICATION	// set the newly selected item in the library list
WITHOUT_CLASSIFICATION	// remove the rule from the library list
WITHOUT_CLASSIFICATION	/* The name of the UMLDiagram                  * represented by this node has changed. */
WITHOUT_CLASSIFICATION	// uml model events
WITHOUT_CLASSIFICATION	// notation events
WITHOUT_CLASSIFICATION	// Handle remove for non-UML elements (e.g. diagrams)
WITHOUT_CLASSIFICATION	/*         * Get the selected targets (UML ModelElements)         * from the TargetManager.         */
WITHOUT_CLASSIFICATION	// project events
WITHOUT_CLASSIFICATION	// show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	// get one of the default profile dirs, if available // (as a default value for the following save dialog)
WITHOUT_CLASSIFICATION	// save profile
WITHOUT_CLASSIFICATION	// register it as a user profile
WITHOUT_CLASSIFICATION	// this is safe because getName always returns a string of some type
WITHOUT_CLASSIFICATION	// load user perspectives
WITHOUT_CLASSIFICATION	// get the perspective name
WITHOUT_CLASSIFICATION	// make sure there are some rules...
WITHOUT_CLASSIFICATION	// get the rules
WITHOUT_CLASSIFICATION	// get the rule name
WITHOUT_CLASSIFICATION	// create the rule
WITHOUT_CLASSIFICATION	// rule name but no rules
WITHOUT_CLASSIFICATION	// add the perspective
WITHOUT_CLASSIFICATION	// no user defined perspectives
WITHOUT_CLASSIFICATION	// one last check that some loaded.
WITHOUT_CLASSIFICATION	// works for both statediagram as activitygraph
WITHOUT_CLASSIFICATION	// Enter here go rules only relevant for UML 2 // empty for now
WITHOUT_CLASSIFICATION	/*         * The drag gesture recognizer fires events         * in response to drag gestures in a component.         */
WITHOUT_CLASSIFICATION	//specifies valid actions
WITHOUT_CLASSIFICATION	// Eliminates right mouse clicks as valid actions
WITHOUT_CLASSIFICATION	// First argument:  Component to associate the target with // Second argument: DropTargetListener
WITHOUT_CLASSIFICATION	/*         * Get the cell renderer (which is a JLabel)         * for the path being dragged.         */
WITHOUT_CLASSIFICATION	/* The layout manager would normally do this: */
WITHOUT_CLASSIFICATION	// Get a buffered image of the selection for dragging a ghost image
WITHOUT_CLASSIFICATION	/*         * Ask the cell renderer to paint itself into the BufferedImage.         * Make the image ghostlike.         */
WITHOUT_CLASSIFICATION	/*         * Now paint a gradient UNDER the ghosted JLabel text         * (but not under the icon if any).         */
WITHOUT_CLASSIFICATION	/* Make the gradient ghostlike: */
WITHOUT_CLASSIFICATION	/*         * Remember the path being dragged (because if it is being moved,         * we will have to delete it later).         */
WITHOUT_CLASSIFICATION	/*         * We pass our drag image just in case         * it IS supported by the platform.         */
WITHOUT_CLASSIFICATION	/* If the destination is not a NameSpace, then abort: */
WITHOUT_CLASSIFICATION	/* If the destination is a DataType, then abort: */
WITHOUT_CLASSIFICATION	/* We are sure "dest" is a Namespace now. */
WITHOUT_CLASSIFICATION	/*         * MVW: These are the WFRs for DataType:         * [1] A DataType can only contain Operations,         * which all must be queries.         * self.allFeatures->forAll(f |         *  f.oclIsKindOf(Operation) and f.oclAsType(Operation).isQuery)         * [2] A DataType cannot contain any other ModelElements.         *  self.allContents->isEmpty         *  IMHO we should enforce these WFRs here.         *  ... so it is still possible to copy or move query operations,         *  hence we should allow this.         */
WITHOUT_CLASSIFICATION	/*         * Let's check all dragged elements - if one of these         * may be dropped, then the drag is valid.         * The others will be ignored when dropping.         */
WITHOUT_CLASSIFICATION	// empty implementation - not used.
WITHOUT_CLASSIFICATION	// empty implementation - not used.
WITHOUT_CLASSIFICATION	// empty implementation - not used.
WITHOUT_CLASSIFICATION	// Figure out which row we're on.
WITHOUT_CLASSIFICATION	// If we are not on a row then ignore this autoscroll request
WITHOUT_CLASSIFICATION	/* We are sure "dest" is a Namespace now. */
WITHOUT_CLASSIFICATION	//  Autoscroll Interface... //  The following code was borrowed from the book: // 		Java Swing // 		By Robert Eckstein, Marc Loy & Dave Wood // 		Paperback - 1221 pages 1 Ed edition (September 1998) // 		O'Reilly & Associates; ISBN: 156592455X // //  The relevant chapter of which can be found at: // 		http://www.oreilly.com/catalog/jswing/chapter/dnd.beta.pdf
WITHOUT_CLASSIFICATION	// Now decide if the row is at the top of the screen or at the // bottom. We do this to make the previous row (or the next // row) visible as appropriate. If were at the absolute top or // bottom, just return the first or last row respectively.
WITHOUT_CLASSIFICATION	/* Set up a hover timer, so that a node will be             * automatically expanded or collapsed             * if the user lingers on it for more than a short time.             */
WITHOUT_CLASSIFICATION	/*isRootPath*/
WITHOUT_CLASSIFICATION	// Set timer to one-shot mode
WITHOUT_CLASSIFICATION	//            LOG.log(Level.FINE, "dragOver");
WITHOUT_CLASSIFICATION	/*             * The next condition becomes false when dragging in             * something from another application.             */
WITHOUT_CLASSIFICATION	/*                 * If a drag image is not supported by the platform,                 * then draw my own drag image.                 */
WITHOUT_CLASSIFICATION	/* Rub out the last ghost image and cue line: */
WITHOUT_CLASSIFICATION	/* And remember where we are about to draw                     * the new ghost image:                     */
WITHOUT_CLASSIFICATION	// Just rub out the last cue line
WITHOUT_CLASSIFICATION	/*             * In any case draw (over the ghost image if necessary)             * a cue line indicating where a drop will occur.             */
WITHOUT_CLASSIFICATION	// And include the cue line in the area to be rubbed out next time
WITHOUT_CLASSIFICATION	/* Testcase: drag something from another             * application into ArgoUML,             * and the explorer shows the drop icon, instead of the noDrop.             */
WITHOUT_CLASSIFICATION	// to prohibit dropping onto the drag source:
WITHOUT_CLASSIFICATION	/* If the destination is not a NameSpace, then reject: */
WITHOUT_CLASSIFICATION	/* If the destination is a DataType, then reject: */
WITHOUT_CLASSIFICATION	/* Prevent hover timer from doing an unwanted             * expandPath or collapsePath:             */
WITHOUT_CLASSIFICATION	/* Clear the ghost image: */
WITHOUT_CLASSIFICATION	//get new parent node
WITHOUT_CLASSIFICATION	//get the model elements that are being transfered.
WITHOUT_CLASSIFICATION	/* The user-DropActions are:                 * Ctrl + Shift -> ACTION_LINK                 * Ctrl         -> ACTION_COPY                 * Shift        -> ACTION_MOVE                 * (none)       -> ACTION_MOVE                 */
WITHOUT_CLASSIFICATION	// Only accept COPY or MOVE gestures (ie LINK is not supported)
WITHOUT_CLASSIFICATION	// Only accept COPY or MOVE gestures (ie LINK is not supported)
WITHOUT_CLASSIFICATION	// Do this if you want to prohibit dropping onto the drag source...
WITHOUT_CLASSIFICATION	// Do this if you want to prohibit dropping onto the drag source...
WITHOUT_CLASSIFICATION	/* end class */
WITHOUT_CLASSIFICATION	// remove references for gc
WITHOUT_CLASSIFICATION	// This should only be helpful for old garbage collectors.
WITHOUT_CLASSIFICATION	// Avoid doing this too early in the initialization process
WITHOUT_CLASSIFICATION	// Avoid recursively updating the same child
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.DefaultTreeModel#insertNodeInto(javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.DefaultTreeModel#removeNodeFromParent(javax.swing.tree.MutableTreeNode)     */
WITHOUT_CLASSIFICATION	// This is somewhat inconsistent with the design of the constructor // that receives the root object by argument. If this is okay // then there may be no need for a constructor with that argument.
WITHOUT_CLASSIFICATION	// Enumerate the current children of node to find out which now sorts // in different order, since these must be moved
WITHOUT_CLASSIFICATION	// Avoid our deinitialization here // The node will be added back to the tree again
WITHOUT_CLASSIFICATION	// For each reordered node, find it's new position among the current // children and move it there
WITHOUT_CLASSIFICATION	// Avoid our initialization here
WITHOUT_CLASSIFICATION	// Collect the current set of objects that should be children to // this node
WITHOUT_CLASSIFICATION	// Handle WeakExplorerNodes
WITHOUT_CLASSIFICATION	// Remove the node from removeSet
WITHOUT_CLASSIFICATION	// Remove obj3 from weakNodes and newChildren
WITHOUT_CLASSIFICATION	// Remember that children are not TreeNodes but UserObjects
WITHOUT_CLASSIFICATION	// Add any remaining nodes
WITHOUT_CLASSIFICATION	// it is the combo for "order"
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Order the new children, the dependencies cannot and // need not be ordered
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// Sequence diagrams are not shown as children of the // collaboration that they show but as children of the // classifier/operation the collaboration represents. // Statediagrams and activitydiagrams are shown as children // of the statemachine or activitygraph they belong to.
WITHOUT_CLASSIFICATION	//was ""
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	// the name of this instance of diagram
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	/* Also show unattached sequence diagrams: */
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// in UML2, we don't want to see element imports in profiles
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/** * Rule for Project->Root (Top level) Elements. *  * TODO: As currently implemented it returns all top level elements in  * the model repository, not just those in a given project.  Since we * only support a single project at a time currently, these are equivalent * but this will need to be enhanced with additional bookkeeping in  * Project when we support multiple open projects - tfm. * * TODO: I changed it to get the roots from the project. It was showing * the profiles that were loaded but were not applied to the current project * - maurelio1234. *  * @author Tom Morris <tfmorris@gmail.com> */
WITHOUT_CLASSIFICATION	// in UML2, some elements are not to be shown
WITHOUT_CLASSIFICATION	// don't show a profile application
WITHOUT_CLASSIFICATION	// don't show element imports in profiles
WITHOUT_CLASSIFICATION	// don't show extensions in profiles
WITHOUT_CLASSIFICATION	//&& Model.getFacade().isAProperty(o)
WITHOUT_CLASSIFICATION	// don't show base_... properties in stereotypes
WITHOUT_CLASSIFICATION	// "N/A" or "x nodes and x edges"
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// Transition
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: what?
WITHOUT_CLASSIFICATION	// Todo: What?
WITHOUT_CLASSIFICATION	// First get the collection of ElementResidence
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// TODO: What?
WITHOUT_CLASSIFICATION	// TODO: what?
WITHOUT_CLASSIFICATION	// only targets we didn't have allready count
WITHOUT_CLASSIFICATION	// If nothing selected, go to last selected target
WITHOUT_CLASSIFICATION	// Needed for Argo startup :-(
WITHOUT_CLASSIFICATION	/* Remove duplicates and take care of getOwner()         * and remove nulls: */
WITHOUT_CLASSIFICATION	/*|| !targets.contains(target)*/
WITHOUT_CLASSIFICATION	//	targets.remove(target);
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// implement set-like behaviour. The same element // may not be added more then once.
WITHOUT_CLASSIFICATION	// we put the targets 'backwards' in the history // since the first target in the addedTargets array is // the first one selected.
WITHOUT_CLASSIFICATION	// cannot break here since an object can be multiple // times in history
WITHOUT_CLASSIFICATION	// CommentEdge - the owner of a FigEdgeNote
WITHOUT_CLASSIFICATION	// check if there are new elements in the list // if the old and new list are of the same size // set the oldTargets to the correct selection
WITHOUT_CLASSIFICATION	// If not found, try the parent namespace
WITHOUT_CLASSIFICATION	// Listen for the removal of diagrams from project
WITHOUT_CLASSIFICATION	// give priority to standard documentation tag
WITHOUT_CLASSIFICATION	// Figs on a diagram without an owning model element
WITHOUT_CLASSIFICATION	/* end class DocumentationManager */
WITHOUT_CLASSIFICATION	// TODO: Needs localization
WITHOUT_CLASSIFICATION	/* end class ChildGenRelated */
WITHOUT_CLASSIFICATION	/*         * Convert the string (e.g. "aaa,bbb,ccc") into separate         * stereotype-names (e.g. "aaa", "bbb", "ccc").         */
WITHOUT_CLASSIFICATION	// adds all stereotypes defined at the top level namespaces
WITHOUT_CLASSIFICATION	// and now remove them
WITHOUT_CLASSIFICATION	// collect the to be removed stereotypes
WITHOUT_CLASSIFICATION	// the name of this type of diagram
WITHOUT_CLASSIFICATION	// add stereotypes
WITHOUT_CLASSIFICATION	// Loop through each element in the namespace, recursing.
WITHOUT_CLASSIFICATION	/* end class UUIDManager */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Instance
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // comments
WITHOUT_CLASSIFICATION	// For all other model elements, return any elements // associated in any way
WITHOUT_CLASSIFICATION	// adds all stereotypes defined at the profiles applied to the // current namespace
WITHOUT_CLASSIFICATION	// adds all stereotypes defined at the profiles applied // to the current project
WITHOUT_CLASSIFICATION	//////////////// // TableModel implementation
WITHOUT_CLASSIFICATION	// the name of this type of ModelElement
WITHOUT_CLASSIFICATION	// the name of this instance of ModelElement
WITHOUT_CLASSIFICATION	// the name of the parent diagram instance
WITHOUT_CLASSIFICATION	// the name of this type of Object
WITHOUT_CLASSIFICATION	// not safe to presume the destination is the comment
WITHOUT_CLASSIFICATION	// this also sets the target as a convenient side effect
WITHOUT_CLASSIFICATION	// This is the tooltip of a comment link
WITHOUT_CLASSIFICATION	// Class
WITHOUT_CLASSIFICATION	/* end class ProjectMemberModel */
WITHOUT_CLASSIFICATION	//??
WITHOUT_CLASSIFICATION	//??
WITHOUT_CLASSIFICATION	//??
WITHOUT_CLASSIFICATION	// Association
WITHOUT_CLASSIFICATION	// Attribute
WITHOUT_CLASSIFICATION	// State
WITHOUT_CLASSIFICATION	// Operation
WITHOUT_CLASSIFICATION	// Interface
WITHOUT_CLASSIFICATION	// Link
WITHOUT_CLASSIFICATION	// // This function will, by design, contain long lists of i18n keys. // It might be tempting to shorten these by constructing them from // the parts but please then consider that we might loose the // possibility to build tools to statically check the property files // against this file. //
WITHOUT_CLASSIFICATION	//umlReserved.add("document");
WITHOUT_CLASSIFICATION	// replace all occurances of OFFENDER with the name of the // first offender
WITHOUT_CLASSIFICATION	// check for all uppercase and/or mixed with underscores
WITHOUT_CLASSIFICATION	//umlReserved.add("file");
WITHOUT_CLASSIFICATION	//umlReserved.add("node");
WITHOUT_CLASSIFICATION	//umlReserved.add("send");
WITHOUT_CLASSIFICATION	/* The modelelement must have been                 * deleted - ignore this - it will pass. */
WITHOUT_CLASSIFICATION	// TODO: This could just work off the names in the UML profile // TODO: It doesn't look like it matches what's in the UML 1.4 spec
WITHOUT_CLASSIFICATION	//umlReserved.add("destroy");
WITHOUT_CLASSIFICATION	// self.allConnections->forAll(ar|ar.participant <> self)
WITHOUT_CLASSIFICATION	/* end class CrCircularAssocClass */
WITHOUT_CLASSIFICATION	/*(MAttribute)*/
WITHOUT_CLASSIFICATION	// If the name is only underscores
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     * int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     *      int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconHeight()     */
WITHOUT_CLASSIFICATION	//     umlReserved.add("initial"); //     umlReserved.add("final"); //     umlReserved.add("fork"); //     umlReserved.add("join"); //     umlReserved.add("history");
WITHOUT_CLASSIFICATION	//umlReserved.add("copy"); //umlReserved.add("create");
WITHOUT_CLASSIFICATION	// Types can probably have associations, but we should not nag at them // not having any. // utility is a namespace collection - also not strictly required // to have associations.
WITHOUT_CLASSIFICATION	/* end class ClAttributeCompartment */
WITHOUT_CLASSIFICATION	// check whether constant, constants are often weird and thus not a // problem
WITHOUT_CLASSIFICATION	// why are we here?
WITHOUT_CLASSIFICATION	// If the classifier does not have a name, // then no problem - the model is not finished anyhow.
WITHOUT_CLASSIFICATION	// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for attributes is drawn before drawing things // over it
WITHOUT_CLASSIFICATION	// Abstract elements do not necessarily require associations
WITHOUT_CLASSIFICATION	//TODO: different critic or special message for classes //that inherit all ops but define none of their own.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// added by Eric Lefevre 13 Mar 1999: we must check if the // FigText for operations is drawn before drawing things // over it
WITHOUT_CLASSIFICATION	// special cases for use cases // Extending use cases and use case that are being included are // not required to have associations.
WITHOUT_CLASSIFICATION	// for use cases we need to check for extend/includes // actors cannot have them, so no need to check
WITHOUT_CLASSIFICATION	// Get the ends from the association (we know there are two), and the // types associated with them.
WITHOUT_CLASSIFICATION	// The association that triggered the critic. Its just possible the // association is no longer there, in which case we return null
WITHOUT_CLASSIFICATION	/* end class ClOperationCompartment */
WITHOUT_CLASSIFICATION	// First step. Create the panel if not already done and options are // available. Otherwise it retains its default value of null.
WITHOUT_CLASSIFICATION	// Now create the five options
WITHOUT_CLASSIFICATION	// Get the names of the two ends. If there are none (i.e they are // currently anonymous), use the ArgoUML convention of "(anon)" for the // names
WITHOUT_CLASSIFICATION	// Default (any other step) is to return nothing
WITHOUT_CLASSIFICATION	// Just completed the first step where we make our choices. First // see if we have a choice. We always should, so print a rude // message if we don't
WITHOUT_CLASSIFICATION	// Set the appropriate aggregation on each end
WITHOUT_CLASSIFICATION	// It is quite possible that the cause of the problem has by now // been deleted, in which case we will throw an exception if we try // to change things. Catch this tidily.
WITHOUT_CLASSIFICATION	// Start is a composite aggregation of end
WITHOUT_CLASSIFICATION	// Start is a shared aggregation of end
WITHOUT_CLASSIFICATION	// End is a composite aggregation of start
WITHOUT_CLASSIFICATION	// End is a shared aggregation of start
WITHOUT_CLASSIFICATION	// No aggregation
WITHOUT_CLASSIFICATION	// Someone took our association away.
WITHOUT_CLASSIFICATION	// Can't finish if our parent can't
WITHOUT_CLASSIFICATION	// Can finish if it's step 0
WITHOUT_CLASSIFICATION	// Can finish if we're on step1 and have actually made a choice
WITHOUT_CLASSIFICATION	// Otherwise we can't finish
WITHOUT_CLASSIFICATION	// TODO: The WFR doesn't restrict this to Classifiers - tfm
WITHOUT_CLASSIFICATION	// TODO: The WFR doesn't restrict this to Classifiers - tfm
WITHOUT_CLASSIFICATION	/*Model.getFacade().getModelElement(*/
WITHOUT_CLASSIFICATION	/*)*/
WITHOUT_CLASSIFICATION	// replace all occurances of OFFENDER with the name of the // first offender
WITHOUT_CLASSIFICATION	// check if there is no OCL_END; if so, the critic expression // is not correct and can not be expanded
WITHOUT_CLASSIFICATION	// Get the Association and its connections. // Iterate over all the AssociationEnds and check that each connected // classifier is in the same sub-system or model
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // display related methods
WITHOUT_CLASSIFICATION	/* end class CrInterfaceAllPublic */
WITHOUT_CLASSIFICATION	// return original string if no replacements made
WITHOUT_CLASSIFICATION	// If we drop out there is no problem
WITHOUT_CLASSIFICATION	// Only look at associations
WITHOUT_CLASSIFICATION	/* end class CrCrossNamespaceAssoc */
WITHOUT_CLASSIFICATION	//TODO: different critic for packages consisting only //of references to elements of other packages?
WITHOUT_CLASSIFICATION	// The next AssociationEnd, and its classifier. Check the // classifier is in the namespace of the association. If not we // have a problem.
WITHOUT_CLASSIFICATION	// original class was not abstract
WITHOUT_CLASSIFICATION	// theStereotype.setStereotype(???);
WITHOUT_CLASSIFICATION	// found a concrete subclass
WITHOUT_CLASSIFICATION	// Nothing to do.
WITHOUT_CLASSIFICATION	// no concrete subclasses defined, this class is "useless"
WITHOUT_CLASSIFICATION	// //   see if there is already an element with the same name //
WITHOUT_CLASSIFICATION	/* end class CrClassMustBeAbstract */
WITHOUT_CLASSIFICATION	/* end class CrUselessAbstract */
WITHOUT_CLASSIFICATION	/*(MClassifier)*/
WITHOUT_CLASSIFICATION	// Only look at classes
WITHOUT_CLASSIFICATION	//TODO: different critic or special message for classes //that inherit all ops but define none of their own.
WITHOUT_CLASSIFICATION	// utility is a namespace collection - also not strictly // required to have operations.
WITHOUT_CLASSIFICATION	/* end class CrTooManyAssoc */
WITHOUT_CLASSIFICATION	/* end class CrUselessInterface */
WITHOUT_CLASSIFICATION	/* end class CrComponentInstanceWithoutClassifier */
WITHOUT_CLASSIFICATION	/* end class CrTooManyClasses */
WITHOUT_CLASSIFICATION	// We don't consider secondary stuff.
WITHOUT_CLASSIFICATION	// if the object does not have a name, // than no problem
WITHOUT_CLASSIFICATION	// types can probably contain operations, but we should not nag at them // not having any.
WITHOUT_CLASSIFICATION	// Types don't need a constructor.
WITHOUT_CLASSIFICATION	// Utilities usually do not require a constructor either
WITHOUT_CLASSIFICATION	// Check for uninitialised instance variables and // constructor.
WITHOUT_CLASSIFICATION	// Get all the features (giving up if there are none). Then loop // through finding all operations. Each time we find one, we compare // its signature with all previous (held in collection operSeen),  // and then if it doesn't match add it to the collection.
WITHOUT_CLASSIFICATION	// There is a constructor.
WITHOUT_CLASSIFICATION	/* end class CrTooManyStates */
WITHOUT_CLASSIFICATION	// We have found a non-static one that is not initialized.
WITHOUT_CLASSIFICATION	// Compare against all earlier operations. If there's a match we've // found the problem
WITHOUT_CLASSIFICATION	// Check that the parameter lists match.
WITHOUT_CLASSIFICATION	// Add to the collection and round to look at the next one
WITHOUT_CLASSIFICATION	// yeah right...we don't have an operation (and thus no
WITHOUT_CLASSIFICATION	// This pair of params where the same. Lets check the next pair.
WITHOUT_CLASSIFICATION	// Only do this for classifiers
WITHOUT_CLASSIFICATION	// Get the next non-return parameter. Null if non left.
WITHOUT_CLASSIFICATION	// If we drop out here, there was no match and we have no problem
WITHOUT_CLASSIFICATION	// Check that the names match.
WITHOUT_CLASSIFICATION	// Both lists have the same length
WITHOUT_CLASSIFICATION	// Both lists have the same length.
WITHOUT_CLASSIFICATION	// Different lengths:
WITHOUT_CLASSIFICATION	/* end class CrMultiComposite */
WITHOUT_CLASSIFICATION	// Compare the type of the parameters. If any of the types is // null, then we have a match.
WITHOUT_CLASSIFICATION	// normal model elements are not allowed to have spaces, // but for States we make an exception
WITHOUT_CLASSIFICATION	// initialize test data
WITHOUT_CLASSIFICATION	/* end class CrIllegalName */
WITHOUT_CLASSIFICATION	/* dm is a transition */
WITHOUT_CLASSIFICATION	// initialize new ToDoItem
WITHOUT_CLASSIFICATION	/* the source of the transition is a pseudostate */
WITHOUT_CLASSIFICATION	/* the source of the transition is a choice */
WITHOUT_CLASSIFICATION	/* end class CrTooManyAttr */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing API
WITHOUT_CLASSIFICATION	/* end class CrZeroLengthEdge */
WITHOUT_CLASSIFICATION	/*(MStateVertex)*/
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	// only classes with name need a constructor
WITHOUT_CLASSIFICATION	//Forks have their own outgoing transitions critic
WITHOUT_CLASSIFICATION	// types can probably have variables, but we should not nag at them // not having any.
WITHOUT_CLASSIFICATION	// code generation
WITHOUT_CLASSIFICATION	// utility is a namespace collection - also not strictly // required to have variables.
WITHOUT_CLASSIFICATION	// If we find an instance variable that is not a constant // we have succeeded
WITHOUT_CLASSIFICATION	// I am only prepared to go this far.
WITHOUT_CLASSIFICATION	/*(Classifier)*/
WITHOUT_CLASSIFICATION	// first element is e.g. the class, but we need to have its namespace // to recompute the offenders.
WITHOUT_CLASSIFICATION	// Compound critics
WITHOUT_CLASSIFICATION	// warn about inherited name conflicts, different critic?
WITHOUT_CLASSIFICATION	// warn about inherited name conflicts, different critic?
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	// Only look at Associations
WITHOUT_CLASSIFICATION	// container state / composite state
WITHOUT_CLASSIFICATION	// Iterate over all the AssociationEnds. We only have a problem if 1) // there is an end connected to an Interface and 2) an end other than // that end is navigable.
WITHOUT_CLASSIFICATION	// both ends must be classes, otherwise there is nothing to merge
WITHOUT_CLASSIFICATION	// We can give up looking if we've hit both criteria
WITHOUT_CLASSIFICATION	// both ends must be navigable, otherwise there is nothing to merge
WITHOUT_CLASSIFICATION	// End at an Interface? // Navigable other end?
WITHOUT_CLASSIFICATION	/* end class CrMergeClasses */
WITHOUT_CLASSIFICATION	// Specify design issue category and knowledge type
WITHOUT_CLASSIFICATION	// If we drop out we didn't meet both criteria, and all is well.
WITHOUT_CLASSIFICATION	// The next AssociationEnd
WITHOUT_CLASSIFICATION	// If its an interface we have an interface end, otherwise its // something else and we should see if it is navigable. We don't // check that the end is a Classifier, rather than its child // ClassifierRole, since we have effectively eliminated that // possiblity in rejecting AssociationRoles above.
WITHOUT_CLASSIFICATION	/* end class CrNavFromInterface */
WITHOUT_CLASSIFICATION	/*(MCompositeState)*/
WITHOUT_CLASSIFICATION	/* end class CrNoInitialState */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // critiquing API
WITHOUT_CLASSIFICATION	/* end class CrInstanceWithoutClassifier */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a Composite State. */
WITHOUT_CLASSIFICATION	// In DeploymentDiagrams the situation is not the // same as in other diagrams only classes, // interfaces and objects can intersect each other // while they are not the EnclosingFig, so you // have to prouve only these elements.
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a StateVertex. */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a State. */
WITHOUT_CLASSIFICATION	/* If dm is the top state of the statemachine, then it is              * not supposed to have incoming transitions. */
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	// container state / composite state
WITHOUT_CLASSIFICATION	/* end class CrInvalidSynch */
WITHOUT_CLASSIFICATION	// no good trigger
WITHOUT_CLASSIFICATION	/* end class CrConflictingComposites */
WITHOUT_CLASSIFICATION	/* end class CrAlreadyRealizes */
WITHOUT_CLASSIFICATION	/* end class CrUnnavigableAssoc */
WITHOUT_CLASSIFICATION	//TODO: GenNavigableClasses?
WITHOUT_CLASSIFICATION	/* end class CrDisambigStateName */
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	/* end class WizMEName */
WITHOUT_CLASSIFICATION	// Only for associations
WITHOUT_CLASSIFICATION	// Get the assocations and connections. No problem (there is a separate // critic) if this is not a binary association or is an association // role.
WITHOUT_CLASSIFICATION	// Loop through the associations, counting the ends with aggregations
WITHOUT_CLASSIFICATION	// A problem if we found more than 1 aggregation
WITHOUT_CLASSIFICATION	/* end class CrMultipleAgg */
WITHOUT_CLASSIFICATION	/* end class CrNameConflictAC */
WITHOUT_CLASSIFICATION	/* end class WizNavigable */
WITHOUT_CLASSIFICATION	/* end class CrFinalSubclassed */
WITHOUT_CLASSIFICATION	// no good trigger
WITHOUT_CLASSIFICATION	//TODO: AssociationRole
WITHOUT_CLASSIFICATION	//                LOG.log(Level.FINE, "Finding children for " + o.getClass());
WITHOUT_CLASSIFICATION	// argument can be an instanceof a Fig which we ignore
WITHOUT_CLASSIFICATION	// no need for trigger on "specialization"
WITHOUT_CLASSIFICATION	/* end class CrCircularInheritance */
WITHOUT_CLASSIFICATION	/* end class CrNonAggDataType */
WITHOUT_CLASSIFICATION	////////////////
WITHOUT_CLASSIFICATION	////////////////
WITHOUT_CLASSIFICATION	// test an unknown file
WITHOUT_CLASSIFICATION	// container state / composite state
WITHOUT_CLASSIFICATION	// no good trigger
WITHOUT_CLASSIFICATION	/*(MTransition)*/
WITHOUT_CLASSIFICATION	// WFR Transitions, OMG UML 1.3
WITHOUT_CLASSIFICATION	// Only work for associations
WITHOUT_CLASSIFICATION	//	 WFR Transitions, OMG UML 1.3
WITHOUT_CLASSIFICATION	// No problem if this is an association role.
WITHOUT_CLASSIFICATION	// Loop through all the ends, comparing the name against those already // seen (ignoring any with no name). // No problem if there are no connections defined, we will fall // through immediately.
WITHOUT_CLASSIFICATION	/* end class CrInterfaceOperOnly */
WITHOUT_CLASSIFICATION	// Ignore non-existent and empty names
WITHOUT_CLASSIFICATION	// Is the name already in the list of those seen, if not add it // and go on round.
WITHOUT_CLASSIFICATION	// Only work for associatins
WITHOUT_CLASSIFICATION	// If we drop out there were no clashes
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics,     * int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Icon#getIconHeight()     */
WITHOUT_CLASSIFICATION	/*(MAssociationEnd)*/
WITHOUT_CLASSIFICATION	/*(MAssociation)*/
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a StateVertex. */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a State. */
WITHOUT_CLASSIFICATION	/* Now we are sure dm is a Composite State. */
WITHOUT_CLASSIFICATION	/* end class ClClassName */
WITHOUT_CLASSIFICATION	/* If dm is the top state of the statemachine, then it is              * not supposed to have outgoing transitions. */
WITHOUT_CLASSIFICATION	/* end class CrTooManyOper */
WITHOUT_CLASSIFICATION	/* end class CrTooManyTransitions */
WITHOUT_CLASSIFICATION	// general
WITHOUT_CLASSIFICATION	// Loop through the associations, looking for one with aggregation
WITHOUT_CLASSIFICATION	// If drop out, we're OK
WITHOUT_CLASSIFICATION	/* end class CrNWayAgg.java */
WITHOUT_CLASSIFICATION	/* end class CrOppEndConflict */
WITHOUT_CLASSIFICATION	// we could check for base class of the stereotype but the // condition normally covers it all.
WITHOUT_CLASSIFICATION	// intentional: if there is nonsense in the field, // we return false
WITHOUT_CLASSIFICATION	// intentional: if there is nonsense in the field, // we do not set the value
WITHOUT_CLASSIFICATION	//	fireNodeRemoved(node);
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Diagram#setName(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#containsNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//        newEdge.setDiElement( //            GraphChangeAdapter.getInstance().createElement(gm, edge));
WITHOUT_CLASSIFICATION	/////////////////// End GEF methods ////////////////////////
WITHOUT_CLASSIFICATION	// not allowed
WITHOUT_CLASSIFICATION	// return;
WITHOUT_CLASSIFICATION	// TODO: Comments are on Element in UML 2.x
WITHOUT_CLASSIFICATION	/*     * Create a diagram.  This 4-arg version is only for internal use.  The     * 'namespace' argument is deprecated and not used in the new APIs.     */
WITHOUT_CLASSIFICATION	// This shouldn't be possible, but just in case
WITHOUT_CLASSIFICATION	// fail silently as we expect users to accidentally drop // on to wrong component
WITHOUT_CLASSIFICATION	// Create the UML connection of the given type between the // given model elements. // default aggregation (none)
WITHOUT_CLASSIFICATION	// Commentlinks for comments. Iterate over all the comment links // to find the comment and annotated elements.
WITHOUT_CLASSIFICATION	// The connection is not valid unless both nodes are // in this graph model.
WITHOUT_CLASSIFICATION	/*             * The diagram are always owned by the model             * in this first implementation.             */
WITHOUT_CLASSIFICATION	// *IMPORTANT* - These MUST remain in order!
WITHOUT_CLASSIFICATION	// singleton, no instantiation
WITHOUT_CLASSIFICATION	/*     * The special value <code>null</code> is used internally to indicate that     * the default value should be inherited from the next level of settings.     */
WITHOUT_CLASSIFICATION	// Repeat until no faults are fixed
WITHOUT_CLASSIFICATION	/* Diagram appearance settings with project scope: */
WITHOUT_CLASSIFICATION	// We can not remove this and have the application manage things directly // based on the font, since only the names should be bold.
WITHOUT_CLASSIFICATION	/* Some cached fonts based on the above settings */
WITHOUT_CLASSIFICATION	/*         * Since body ever looks         * at the type of the diagram appearance event, we can simplify from         * sending every existing event to one event only. But since there is no         * catch-all event defined, we just use one. Rationale: reduce the         * number of total refreshes of the drawing.         */
WITHOUT_CLASSIFICATION	// If we've got a local (uninherited) font name or size or if we've got // no parent to inherit from recompute our cached fonts
WITHOUT_CLASSIFICATION	/** * This class is a temporary wrapper around the GEF UndoManager. * This will be changed when GEF is modified to create commands and * provide an observer interface for ArgoUML to receive them. * <p> * TODO: How does this relate to {@link org.argouml.kernel.DefaultUndoManager}? * * @author Bob Tarling */
WITHOUT_CLASSIFICATION	// Listen for name changes so we can veto them if we don't like them
WITHOUT_CLASSIFICATION	// get all the classes from the diagram
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// The report
WITHOUT_CLASSIFICATION	// The report
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// 2. Make sure that all Figs are visible
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// TODO: These should get replaced immediately by the creating // initialization code, but make sure we've got a default just in case.
WITHOUT_CLASSIFICATION	// 1. Make sure all Figs in the Diagrams layer refer back to // that layer.
WITHOUT_CLASSIFICATION	// maybe we have a modelelement that is part of some other // fig
WITHOUT_CLASSIFICATION	// Register for notification of any global changes that would affect // our rendering
WITHOUT_CLASSIFICATION	// Add the diagram as a listener to the namespace so // that when the namespace is removed the diagram is deleted also.
WITHOUT_CLASSIFICATION	// 4. Make sure all FigNodes and FigEdges have an owner // The report
WITHOUT_CLASSIFICATION	// 3. Make sure all FigEdges are attached to a valid FigNode // The report
WITHOUT_CLASSIFICATION	// 5. Make sure all FigNodes and FigEdges have a valid owner // The report
WITHOUT_CLASSIFICATION	// 4. Make sure the only FigGroups on a diagram are also //    FigNodes // The report
WITHOUT_CLASSIFICATION	// Do nothing, override in subclass.
WITHOUT_CLASSIFICATION	// If we haven't succeeded in getting a namespace then abort
WITHOUT_CLASSIFICATION	// This should always be true, but just in case...
WITHOUT_CLASSIFICATION	/*     * The diagram to be laid out.     */
WITHOUT_CLASSIFICATION	/*     * List of objects.     *      * NOTE: This methods which read/write this don't appear to be used.     */
WITHOUT_CLASSIFICATION	/*     * Point at which to start layout (initial state goes here). The X     * coordinate must be greater than half the width of the widest figure to     * be placed (because figures are centered on this location).     */
WITHOUT_CLASSIFICATION	/*     * Amount to increment Y position by for each node placed. We pack them     * densely on the assumption that the user is going to split them into at     * least two swimlanes.     */
WITHOUT_CLASSIFICATION	/*     * FinalState element for ActivityDiagram     */
WITHOUT_CLASSIFICATION	// Find our Initial State
WITHOUT_CLASSIFICATION	// Place all the nodes
WITHOUT_CLASSIFICATION	// Place the final state last with a little separation
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// If we're trying to set the namespace to the existing value // then don't do any more work.
WITHOUT_CLASSIFICATION	/*     * Recursively place all nodes pointed to by outgoing transitions.     *      * Because of the recursive algorithm multiple outgoing transitions     * will end up very lopsided because one entire subgraph will be done     * before dealing with the other transition(s).     *      * @param seen set of nodes seen so far     * @param node the node to collect neighbors for     */
WITHOUT_CLASSIFICATION	//        figClone.seperator = (FigLine) it.next();
WITHOUT_CLASSIFICATION	//Needed for project deletion
WITHOUT_CLASSIFICATION	// we want to maintain a minimum size for the partition
WITHOUT_CLASSIFICATION	// TODO: midpoints for side handles
WITHOUT_CLASSIFICATION	/* We removed the last partition, so now remove the pool, too: */
WITHOUT_CLASSIFICATION	// no action required in case of veto on setName
WITHOUT_CLASSIFICATION	// This test needed for project deletion
WITHOUT_CLASSIFICATION	// TODO: side handles
WITHOUT_CLASSIFICATION	/* Listen to activitygraph deletion,         * delete this diagram. */
WITHOUT_CLASSIFICATION	//////////////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	// no action required
WITHOUT_CLASSIFICATION	/* The namespace of the activitygraph is changed! */
WITHOUT_CLASSIFICATION	/*getActionSubactivityState()*/
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * The space between the 2 text figs is: PADDING.     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	// we want to maintain a minimum size for the partition
WITHOUT_CLASSIFICATION	/** * Class to display graphics for a UML ObjectFlowState in a diagram.<p> * * The Fig of this modelElement may either represent the following UMLelements: * <p> * (1) an ObjectFlowState with a Classifier as type, or <p> * (2) an ObjectFlowState with a ClassifierInState as type. <p> * * In both cases (1) and (2), the Fig shows * the underlined name of the Classifier, * and in the latter case (2), it shows also the names of the states * of the ClassifierInState. <p> * * In the examples in the UML standard, this is written like<pre> *      PurchaseOrder *       [approved] * </pre> * i.e. in 2 lines. The first line is underlined, * to indicate that it is an instance (object).<p> * * The fact that the first line is underlined, and the 2nd not, is the * reason to implement them in 2 separate Figs.<p> * * TODO: Allow stereotypes to be shown. * * @author mvw */
WITHOUT_CLASSIFICATION	//      Model.getActivityGraphsHelper() //      .isAddingActivityGraphAllowed(base);
WITHOUT_CLASSIFICATION	/* TODO: We may return the following when the         * relocate() has been implemented.         */
WITHOUT_CLASSIFICATION	/* TODO: We may return something useful when the         * relocate() has been implemented. */
WITHOUT_CLASSIFICATION	// register for events from the type
WITHOUT_CLASSIFICATION	// Create a map of partitions keyed by x coordinate
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// Sort the x coordinates into order
WITHOUT_CLASSIFICATION	// the state name
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// If the layer is null, then most likely we are being deleted.
WITHOUT_CLASSIFICATION	/* Don't listen to all property names             * We only need to listen to its "type", and "remove". */
WITHOUT_CLASSIFICATION	/* the height of the blank space above and below the text figs: */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// and listen to name changes of the submachine
WITHOUT_CLASSIFICATION	// both have the same settings
WITHOUT_CLASSIFICATION	// both have the same owner
WITHOUT_CLASSIFICATION	// add them back to front
WITHOUT_CLASSIFICATION	// Let our superclass sort itself out first
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#getNewNode(int)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	/* Set up the property panels for activity diagrams: */
WITHOUT_CLASSIFICATION	// overrule the single-line name-fig created by the parent
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	//setBlinkPorts(false); //make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	/* TODO: Do we need to clone the stereotype(s)? */
WITHOUT_CLASSIFICATION	/*(MGeneralization)*/
WITHOUT_CLASSIFICATION	/* The stereoDim has height=2, even if it is empty,          * hence the -2 below: */
WITHOUT_CLASSIFICATION	// the width needs to be > the height
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	// TODO:?
WITHOUT_CLASSIFICATION	// ((MClassifier)node).setNamespace(_collab.getNamespace());
WITHOUT_CLASSIFICATION	// TODO: assumes public, user pref for default visibility?
WITHOUT_CLASSIFICATION	/*     * Add the given edge to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* TODO: We may return the following when the         * relocate() has been implemented.         */
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/*     * The NotationProvider for the ClassifierRole. <p>     *      * The syntax is for UML is:     * <pre>     * baselist := [base] [, base]*     * classifierRole := [name] [/ role] [: baselist]     * </pre></p>     *      * The <code>name</code> is the Instance name, not used currently.     * See ClassifierRoleNotationUml for details.<p>     *     * This syntax is compatible with the UML 1.4 specification.     */
WITHOUT_CLASSIFICATION	// TODO: assumes public
WITHOUT_CLASSIFICATION	// The stereotype. Width is the same as the cover, height is its default // (since the font is not yet set). The text should be centered.
WITHOUT_CLASSIFICATION	//throws PropertyVetoException
WITHOUT_CLASSIFICATION	/*(MElementImport)*/
WITHOUT_CLASSIFICATION	//getStereotypeFig().setFilled(false);
WITHOUT_CLASSIFICATION	/* end class CollabDiagramGraphModel */
WITHOUT_CLASSIFICATION	// In the rather unlikely case that we have no name, we give up.
WITHOUT_CLASSIFICATION	// The big port. Color of the big port is irrelevant
WITHOUT_CLASSIFICATION	// The name. Width is the same as the cover, height is the default. // The text of the name will be centered by // default. In the same place as the stereotype, since at this stage // the stereotype is not displayed. Being a classifier role it is // underlined
WITHOUT_CLASSIFICATION	// The cover. 
WITHOUT_CLASSIFICATION	/* At least one stereotype is visible */
WITHOUT_CLASSIFICATION	// Remember where we are at present, so we can tell GEF later. Then // check we are as big as the minimum size
WITHOUT_CLASSIFICATION	// Set the bounds of the bigPort and cover
WITHOUT_CLASSIFICATION	// Work out the padding each side, depending on whether the stereotype // is displayed and set bounds accordingly
WITHOUT_CLASSIFICATION	// Record the changes in the instance variables of our parent, tell GEF // and trigger the edges to reconsider themselves.
WITHOUT_CLASSIFICATION	// singleton
WITHOUT_CLASSIFICATION	//this one behaves differently, hence seperated:
WITHOUT_CLASSIFICATION	//this one behaves differently, hence seperated:
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	/* TODO: We may return something useful when the         * relocate() has been implemented. */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	// TODO:?
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	/* end class FigAssociationRole */
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	// TODO -> settings
WITHOUT_CLASSIFICATION	// the figs that make up this group
WITHOUT_CLASSIFICATION	// the figs that make up this group
WITHOUT_CLASSIFICATION	// _x = first.getX(); // _y = first.getY();
WITHOUT_CLASSIFICATION	// _x = first.getX(); // _y = first.getY();
WITHOUT_CLASSIFICATION	/* Set up the property panels for collaboration diagrams: */
WITHOUT_CLASSIFICATION	// this is neat...
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// TODO: assumes public
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	// TODO: assumes public, user pref for default visibility? //do I have to check the namespace here? (Toby)
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	/* Set up the property panels for deployment diagrams: */
WITHOUT_CLASSIFICATION	//////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	////////////////////////////// // Getters for plugin modules: //////////////////////////////
WITHOUT_CLASSIFICATION	// so it still looks like a cube
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	// elementOrdering(figures);
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	//_bigPort.setBounds(x+1, y+1, w-2, h-2);
WITHOUT_CLASSIFICATION	// nothing extra to do currently
WITHOUT_CLASSIFICATION	/*     * North, South, West, East, South-West     */
WITHOUT_CLASSIFICATION	/* end class PredIsStartpackage */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// If the layer is null, then most likely we are being deleted.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	//throws PropertyVetoException
WITHOUT_CLASSIFICATION	// singleton
WITHOUT_CLASSIFICATION	/* end class StateDiagramGraphModel */
WITHOUT_CLASSIFICATION	// Don't do it for comment.
WITHOUT_CLASSIFICATION	/* (MElementImport) */
WITHOUT_CLASSIFICATION	/* (MTransition) */
WITHOUT_CLASSIFICATION	// prevent no changes...
WITHOUT_CLASSIFICATION	/* If a UML object is found, you can not remove selected elms. */
WITHOUT_CLASSIFICATION	// check parameter types:
WITHOUT_CLASSIFICATION	/* If nothing is selected, then not allowed to remove it. */
WITHOUT_CLASSIFICATION	/* If only Figs without owner are selected, then you can remove them! */
WITHOUT_CLASSIFICATION	/* end class PredIsFinalState */
WITHOUT_CLASSIFICATION	/* This presumes that the layer is set after the owner: */
WITHOUT_CLASSIFICATION	/* If it is concurrent and contains concurrent regions,        the bottom region has a minimum height*/
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// The purpose of this method is not explained and it give give // NPE depending on z order of figs as they are read. For now // ignore if null but for future lets delete this.
WITHOUT_CLASSIFICATION	/* We only handle the case where a region has been removed: */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	/*If it is concurrent and contains concurrent regions,        the regions are resized*/
WITHOUT_CLASSIFICATION	/* None of the menu-items below apply         * when multiple modelelements are selected:*/
WITHOUT_CLASSIFICATION	// do we need to 
WITHOUT_CLASSIFICATION	/*     * The returned list of Figs is sorted according layout: from top to bottom.     */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * This makes dragging connected edges very smooth.     *     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//The event source is the owner stub state
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	/* end class FigCompositeState */
WITHOUT_CLASSIFICATION	/*The event source is the submachine state*/
WITHOUT_CLASSIFICATION	//        TargetManager.getInstance().addTargetListener(this);
WITHOUT_CLASSIFICATION	// ignored - fixed rendering
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Cmd API
WITHOUT_CLASSIFICATION	/* end class ActionCreatePseudostate */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	/* The submachine has got a new name*/
WITHOUT_CLASSIFICATION	// The event source is the stub state's referenced state // or one of the referenced state's path.
WITHOUT_CLASSIFICATION	// This indicates a change in association, not name - tfm
WITHOUT_CLASSIFICATION	//All states in the new reference state's path are added // as listeners
WITHOUT_CLASSIFICATION	// The source was the referenced state that has got // a new name.
WITHOUT_CLASSIFICATION	// ignored - rendering is fixed
WITHOUT_CLASSIFICATION	//The source was one of the referenced state's path which // has got a new name.
WITHOUT_CLASSIFICATION	//The old submachine container is deleted as listener
WITHOUT_CLASSIFICATION	// The Referenced State or one of his path's states has got // a new name
WITHOUT_CLASSIFICATION	//The new submachine container is added as listener
WITHOUT_CLASSIFICATION	//All states in the old reference state's path are deleted // as listeners
WITHOUT_CLASSIFICATION	// Translate any old style sequence diagrams
WITHOUT_CLASSIFICATION	// Just swap order of arguments to get to new form
WITHOUT_CLASSIFICATION	// Translate any sequence diagrams create with any previous svn // work in progress
WITHOUT_CLASSIFICATION	// Get the first existing FigNode and if it exists set the // y position and height of _pers to be the same as it.
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	// ignored - rendering is fixed
WITHOUT_CLASSIFICATION	// ignore mouse clicks
WITHOUT_CLASSIFICATION	// ignore mouse clicks
WITHOUT_CLASSIFICATION	// The Machine State has got a new name
WITHOUT_CLASSIFICATION	/* This assert fails for the TestPropertyPanels,          * file GUITestPropertyPanels.zargo: */
WITHOUT_CLASSIFICATION	//assert  w == h;
WITHOUT_CLASSIFICATION	// The Machine State has been deleted from model
WITHOUT_CLASSIFICATION	/* Ignore w and h from here on. */
WITHOUT_CLASSIFICATION	// keep d even or odd, just like the line width:
WITHOUT_CLASSIFICATION	// leave some space below the "include"
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *      org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *      java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// both have the same settings
WITHOUT_CLASSIFICATION	// both have the same owner
WITHOUT_CLASSIFICATION	// TODO -> settings
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// There are one or more regions so find the one that the //vertex was dropped in
WITHOUT_CLASSIFICATION	// The vertex was dropped onto the diagram. // Get the region as the first Region in the StateMachine. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders     * (java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */
WITHOUT_CLASSIFICATION	// _x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// noop - fixed rendering
WITHOUT_CLASSIFICATION	// There are no regions so create one and // place the vertex there.
WITHOUT_CLASSIFICATION	// Temporary start //    private static final Color[] COLOR_ARRAY = { //        Color.RED, Color.BLUE, Color.CYAN, Color.YELLOW, Color.GREEN}; //    private int nextColor = 0; // Temporary end
WITHOUT_CLASSIFICATION	//setBlinkPorts(false); //make port invisble unless mouse enters
WITHOUT_CLASSIFICATION	// there can only be one
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* We aren't able to resize neither the top bound             * from the first region nor             * the bottom bound from the last region.             */
WITHOUT_CLASSIFICATION	/*The group must be resized if a text field exceed the bounds*/
WITHOUT_CLASSIFICATION	/* if curHandle.index is 0 or 2,             * the adjacent region is the previous region             * but if it is 5 or 7, the adjacent region is the next region.             * curHandle.index show which corner of the bound we are dragging.             */
WITHOUT_CLASSIFICATION	/*         * A Concurrent region cannot have incoming or outgoing transitions so         * incoming or outgoing transitions are redirected to its concurrent         * composite state container.         */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// singleton
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////// // event handlers - MouseListener and MouseMotionListener implementation
WITHOUT_CLASSIFICATION	// or just the owner?
WITHOUT_CLASSIFICATION	/* Listen to machine deletion,         * to delete the diagram. */
WITHOUT_CLASSIFICATION	// this in case we are being deleted
WITHOUT_CLASSIFICATION	/* The namespace of the statemachine is changed! */
WITHOUT_CLASSIFICATION	// return;
WITHOUT_CLASSIFICATION	// return;
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	//throws PropertyVetoException
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	// prevent no changes...
WITHOUT_CLASSIFICATION	// check parameter types:
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//      Model.getStateMachinesHelper() //              .isAddingStatemachineAllowed(base);
WITHOUT_CLASSIFICATION	/* Set up the property panels for statechart diagrams: */
WITHOUT_CLASSIFICATION	// if location is null here the position of the new figNode is set // after in org.tigris.gef.base.ModePlace.mousePressed(MouseEvent e)
WITHOUT_CLASSIFICATION	//MModelElement modelElement = elementImport.getModelElement();
WITHOUT_CLASSIFICATION	// top of the hierarchy is ME:
WITHOUT_CLASSIFICATION	// top of the hierarchy is ME:
WITHOUT_CLASSIFICATION	// then Generalizable Element
WITHOUT_CLASSIFICATION	// then Generalizable Element
WITHOUT_CLASSIFICATION	// then Classifier & Package
WITHOUT_CLASSIFICATION	// navigable.... only want incoming
WITHOUT_CLASSIFICATION	// then Classifier
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	// cast the params
WITHOUT_CLASSIFICATION	// N.B. A node which is an Association is either a n-ary association // or the Class part of an AssociationClass
WITHOUT_CLASSIFICATION	// check param types: only some connections are legal uml connections:
WITHOUT_CLASSIFICATION	//set the new end type!
WITHOUT_CLASSIFICATION	// rerouting the destination:
WITHOUT_CLASSIFICATION	// rerouting the source:
WITHOUT_CLASSIFICATION	// empty at the moment
WITHOUT_CLASSIFICATION	// move down
WITHOUT_CLASSIFICATION	// empty at the moment
WITHOUT_CLASSIFICATION	// empty at the moment
WITHOUT_CLASSIFICATION	// move more right
WITHOUT_CLASSIFICATION	// move left
WITHOUT_CLASSIFICATION	// use left and right, up and down
WITHOUT_CLASSIFICATION	// calculate the higher and lower Figs
WITHOUT_CLASSIFICATION	// the amount of the "sidestep"
WITHOUT_CLASSIFICATION	/*         * If center points are "close enough" we just adjust the endpoints         * of the line a little bit.  Otherwise we add a jog in the middle to         * deal with the offset.         *         * TODO: Epsilon is currently fixed, but could probably be computed         * dynamically as 10% of the width of the narrowest figure or some         * other value which is visually not noticeable.         */
WITHOUT_CLASSIFICATION	// currentEdge.setBetweenNearestPoints(false);
WITHOUT_CLASSIFICATION	//LOG.debug(result + " node1: " + this + ", node2 " + node);
WITHOUT_CLASSIFICATION	// split = //     (split == null || split.isStandalone()) ? node : split;
WITHOUT_CLASSIFICATION	// (xOffset - curW) / 2;
WITHOUT_CLASSIFICATION	// Element is allowed, but only NamedElement can return nonempty list
WITHOUT_CLASSIFICATION	/* Do nothing. */
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// self associations are special cases. No need to let the maze // runner find the way.
WITHOUT_CLASSIFICATION	// Link does not exist in UML2
WITHOUT_CLASSIFICATION	// now we construct the zig zag inheritance line //getUnderlyingFig()
WITHOUT_CLASSIFICATION	/** * Class to display graphics for a UML Link in a diagram. <p> *  * The underlined association name is shown next to the middle of the path. *  * TODO: Show more notation as described in the standard: * "A rolename may be shown at each end of the link. An association  * name may be shown near the path. If present, it is underlined * to indicate an instance. Links do not have instance names,  * they take their identity from the instances that they relate. * Multiplicity is not shown for links because they are instances.  * Other association adornments (aggregation, composition,  * navigation) may be shown on the link ends." */
WITHOUT_CLASSIFICATION	/*     * Text group to contain name & stereotype     */
WITHOUT_CLASSIFICATION	/* end class FigLink */
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension          * when drawing this Fig on the diagram by pressing down          * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	/* Stereotype covers NameFig: */
WITHOUT_CLASSIFICATION	/* Compartments from top to bottom: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// by default, do not show operations nor attributes:
WITHOUT_CLASSIFICATION	// We're going to change the name immediately, so just use ""
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	//////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	// TODO: place comments near connected classes // TODO: place from middle towards outer edges? (or place largest // groups first)
WITHOUT_CLASSIFICATION	//        boolean hasPackages = false; // TODO: move "package in row" to NodeRow
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// This calls the getters to fetch actions even though the // action variables are defined is instances of this class. // This is because any number of action getters could have // been overridden in a descendant and it is the action from // that overridden method that should be returned in the array.
WITHOUT_CLASSIFICATION	// since UML2, this must appear before the isAClass clause
WITHOUT_CLASSIFICATION	// this rectangle marks the operation section; all operations // are inside it
WITHOUT_CLASSIFICATION	// 2nd compartment, so adjust Y appropriately
WITHOUT_CLASSIFICATION	// TODO: We should be able to just call renderingChanged on the child // figs here instead of doing an updateOperations...
WITHOUT_CLASSIFICATION	// TODO: We just need to get someone to re-render a single // line of text which represents the element here, but I'm // not sure how to do that. - tfm // TODO: Bob replies - we shouldn't be interested in this // event here. The FigFeature (or its notation) should be // listen for change and the FigFeature should be update // from that.
WITHOUT_CLASSIFICATION	// Collect the set of model elements that we want to listen to
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#translate(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	/* check if any stereotype is defined */
WITHOUT_CLASSIFICATION	// and the stereotypes of its features
WITHOUT_CLASSIFICATION	// and its features
WITHOUT_CLASSIFICATION	// and the parameter of its operations
WITHOUT_CLASSIFICATION	// Update the listeners to match the desired set using the minimal // update facility
WITHOUT_CLASSIFICATION	// Modifier ...
WITHOUT_CLASSIFICATION	// Create a Body that reacts to double-clicks and jumps to a diagram.
WITHOUT_CLASSIFICATION	// Add ...
WITHOUT_CLASSIFICATION	// Visibility ...
WITHOUT_CLASSIFICATION	// Set properties of the stereotype box. // Initially not set to be displayed, but this will be changed // when we try to render it, if we find we have a stereotype.
WITHOUT_CLASSIFICATION	// There are 2 boxes showing lines: the tab and the body.
WITHOUT_CLASSIFICATION	/* This populates the stereotypes area: */
WITHOUT_CLASSIFICATION	// else nothing changed
WITHOUT_CLASSIFICATION	// else nothing changed
WITHOUT_CLASSIFICATION	/* we got at least one stereotype */
WITHOUT_CLASSIFICATION	// the user wants to hide them
WITHOUT_CLASSIFICATION	// Modifier ...
WITHOUT_CLASSIFICATION	// Visibility ...
WITHOUT_CLASSIFICATION	/* The figPoly is located at the right of the name text.             * The nameFig size is increased, so that it fits its text,             * and the figPoly next to the text, all within the boundaries             * of the nameFig. */
WITHOUT_CLASSIFICATION	// If we have any number of stereotypes displayed, then allow // some space for that (only width, height is included in nameFig):
WITHOUT_CLASSIFICATION	// take into account the tab is not as wide as the body:
WITHOUT_CLASSIFICATION	// we want at least some of the package body to be displayed
WITHOUT_CLASSIFICATION	// And now aSize has the answer
WITHOUT_CLASSIFICATION	// Save our old boundaries (needed later), and get minimum size // info. "aSize" will be used to maintain a running calculation of our // size at various points.
WITHOUT_CLASSIFICATION	// The new size can not be smaller than the minimum.
WITHOUT_CLASSIFICATION	// Now resize all sub-figs, including not displayed figs. Start by the // name. We override the getMinimumSize if it is less than our view (21 // pixels hardcoded!). Add in the shared extra, plus in this case the // correction.
WITHOUT_CLASSIFICATION	// Now sort out the stereotype display. If the stereotype is displayed, // move the upper boundary of the name compartment up and set new // bounds for the name and the stereotype compartments and the // stereoLineBlinder that blanks out the line between the two
WITHOUT_CLASSIFICATION	// Advance currentY to where the start of the body box is, // remembering that it overlaps the next box by 1 pixel. Calculate the // size of the body box, and update the Y pointer past it if it is // displayed.
WITHOUT_CLASSIFICATION	// -1 for 1 pixel overlap
WITHOUT_CLASSIFICATION	// set bounds of big box
WITHOUT_CLASSIFICATION	/* The figPoly is located at the right edge of the nameFig.             * The nameFig size is such that it at least fits its text,             * and the figPoly next to the text.             * Making the package bigger, causes the figPoly to stick to             * the right edge.*/
WITHOUT_CLASSIFICATION	// Now force calculation of the bounds of the figure, update the edges // and trigger anyone who's listening to see if the "bounds" property // has changed.
WITHOUT_CLASSIFICATION	/* Only show the menuitems if they make sense: */
WITHOUT_CLASSIFICATION	/* save first */
WITHOUT_CLASSIFICATION	/*while*/
WITHOUT_CLASSIFICATION	/* If we get here then we didn't get the		     * default diagram.                     */
WITHOUT_CLASSIFICATION	/* Try to create a new class diagram.                     */
WITHOUT_CLASSIFICATION	/*if package */
WITHOUT_CLASSIFICATION	/* if doubleclicks */
WITHOUT_CLASSIFICATION	/* change prefix */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	// and its features
WITHOUT_CLASSIFICATION	/* end class FigPackage */
WITHOUT_CLASSIFICATION	// Readonly class: no generalization, no association to self
WITHOUT_CLASSIFICATION	/* end class StylePanelFigPackage */
WITHOUT_CLASSIFICATION	// In the DeploymentDiagram there are no Generalizations
WITHOUT_CLASSIFICATION	// Self-association isn't draggable
WITHOUT_CLASSIFICATION	/* end class StylePanelFigInterface */
WITHOUT_CLASSIFICATION	// No Generalizations on Deployment Diagram
WITHOUT_CLASSIFICATION	// and its stereotypes
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// add the listeners to the newOwner
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	/* Stereotype covers NameFig: */
WITHOUT_CLASSIFICATION	/* Compartments from top to bottom: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// Collect the set of model elements that we want to listen to
WITHOUT_CLASSIFICATION	// and its features
WITHOUT_CLASSIFICATION	// and the stereotypes of its features
WITHOUT_CLASSIFICATION	// and the parameter of its operations
WITHOUT_CLASSIFICATION	// Use super because not fully init'd
WITHOUT_CLASSIFICATION	// and its enumerationLiterals
WITHOUT_CLASSIFICATION	// And now add listeners to them all:
WITHOUT_CLASSIFICATION	// Put all the bits together, suppressing bounds calculations until // we're all done for efficiency.
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension         * when drawing this Fig on the diagram by pressing down         * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	// stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	// Set the bounds of the figure to the total of the above
WITHOUT_CLASSIFICATION	// If moved into an Package
WITHOUT_CLASSIFICATION	// If default Namespace is not already set
WITHOUT_CLASSIFICATION	// The next if-clause is important for the Deployment-diagram // it detects if the enclosing fig is a component, in this case // the container will be set for the owning Interface
WITHOUT_CLASSIFICATION	/* Testing: Add a parameter to an operation on an Interface.                         * Does the Interface Fig adapt its width? */
WITHOUT_CLASSIFICATION	/* Set up the property panels for class diagrams: */
WITHOUT_CLASSIFICATION	// The figure that holds the text of the note.
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	// Update the listeners to match the desired set using the minimal // update facility
WITHOUT_CLASSIFICATION	// Get the size of the text field.
WITHOUT_CLASSIFICATION	// Mark this as newly created. This is to get round the problem with // creating figs for loaded comments that had stereotypes. They are // saved with their dimensions INCLUDING the stereotype, but since we // pretend the stereotype is not visible, we add height the first time // we render such a comment. This is a complete fudge, and really we // ought to address how comment objects with stereotypes are saved. But // that will be hard work.
WITHOUT_CLASSIFICATION	// update the relative sizes and positions of internel Figs
WITHOUT_CLASSIFICATION	// update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	//parse the text that was edited
WITHOUT_CLASSIFICATION	// Resize the text figure
WITHOUT_CLASSIFICATION	// resize the FigNode to accomodate the new text
WITHOUT_CLASSIFICATION	// Not used, do nothing.
WITHOUT_CLASSIFICATION	// Not used, do nothing.
WITHOUT_CLASSIFICATION	// Resize the big port around the figure
WITHOUT_CLASSIFICATION	// The text element has no border, so the line color doesn't matter.
WITHOUT_CLASSIFICATION	// The text is always opaque.
WITHOUT_CLASSIFICATION	/*? 2*LINE_WIDTH? */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel,     *         org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// Make a seamless integration of the text // in the note figure.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user interaction methods
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessor methods
WITHOUT_CLASSIFICATION	// If we have a stereotype displayed, then allow some space for that // (width and height)
WITHOUT_CLASSIFICATION	// And add the gaps around the textfield to get the minimum // size of the note.
WITHOUT_CLASSIFICATION	// Since this is a complex polygon, there's no easy way to resize it.
WITHOUT_CLASSIFICATION	// Just move the corner to it's new position.
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////// // Internal methods
WITHOUT_CLASSIFICATION	/* Remove the commentedge.             * If there are more then one comment-edges between             * the 2 objects, then delete them all. */
WITHOUT_CLASSIFICATION	// all connected edges
WITHOUT_CLASSIFICATION	// Only adjust the stereotype height if we are not newly // created. This gets round the problem of loading classes with // stereotypes defined, which have the height already including // the stereotype.
WITHOUT_CLASSIFICATION	// Whatever happened we are no longer newly created, so clear the // flag. Then set the bounds for the rectangle we have defined.
WITHOUT_CLASSIFICATION	/* end class StylePanelFigClass */
WITHOUT_CLASSIFICATION	// TODO: get tip string from comment
WITHOUT_CLASSIFICATION	/* This one is still usable, so let's retain it, */
WITHOUT_CLASSIFICATION	// the last one needs extra space below it
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setDestFigNode(org.tigris.gef.presentation.FigNode)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setSourceFigNode(org.tigris.gef.presentation.FigNode)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // contructors
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension          * when drawing this Fig on the diagram by pressing down          * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// Visibility ...
WITHOUT_CLASSIFICATION	// stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	// element will normally be null when called from PGML parser // It will get it's source & destination set later in attachEdges
WITHOUT_CLASSIFICATION	// Unfortunately the Fig and it's associated CommentEdge will not be // fully initialized yet here if we're being loaded from a PGML file. // The remainder of the initialization will happen when // set{Dest|Source}FigNode are called from PGMLStackParser.attachEdges()
WITHOUT_CLASSIFICATION	// unimplemented
WITHOUT_CLASSIFICATION	/* Alternatively, we could just return null here,          * so that you can not create a comment just          * linked to a comment this way - which is a bit uncommon,         * but not illegal, so for consistency, we better allow it.          */
WITHOUT_CLASSIFICATION	//        return null;
WITHOUT_CLASSIFICATION	/** * Class to display a Stereotype declaration figure using * Classifier box notation.<p> * * TODO: This is just a place-holder right now! - tfm * This needs to show tags and constraints. */
WITHOUT_CLASSIFICATION	// Add...
WITHOUT_CLASSIFICATION	// Show ...
WITHOUT_CLASSIFICATION	// register for tagDefinitions:
WITHOUT_CLASSIFICATION	/* TODO: constraints, ... */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction#isEnabled()     */
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// Put all the bits together, suppressing bounds calculations until // we're all done for efficiency.
WITHOUT_CLASSIFICATION	/* The next line is needed so that we have the right dimension         * when drawing this Fig on the diagram by pressing down         * the mouse button, even before releasing the mouse button: */
WITHOUT_CLASSIFICATION	// TODO: Need named Tags and Constraints compartments here //        addFig(tagsFig); //        addFig(constraintsFig);
WITHOUT_CLASSIFICATION	// If moved into an Package
WITHOUT_CLASSIFICATION	// If default Namespace is not already set
WITHOUT_CLASSIFICATION	// When this is called from PGMLStackParser.attachEdges, we finished // the initialization of owning pseudo element (CommentEdge)
WITHOUT_CLASSIFICATION	/*     * If the Operation/Reception is abstract,      * then the text will be set to italics.     */
WITHOUT_CLASSIFICATION	// avoid GEF calcDrawingArea bug when nothing in a diagram.
WITHOUT_CLASSIFICATION	// TODO: Add Tags & Constraints //        addMenu.add(TargetManager.getInstance().getAddAttributeAction()); //        addMenu.add(TargetManager.getInstance().getAddOperationAction());
WITHOUT_CLASSIFICATION	// avoid GEF calcDrawingArea bug when nothing in a diagram.
WITHOUT_CLASSIFICATION	// No generalizations in Deployment Diagrams
WITHOUT_CLASSIFICATION	// the diagram image data
WITHOUT_CLASSIFICATION	// copy the gif image to the clipboard
WITHOUT_CLASSIFICATION	// the diagram image data
WITHOUT_CLASSIFICATION	// hide grid, otherwise can't see anything
WITHOUT_CLASSIFICATION	//        bigPort.setFilled(f);
WITHOUT_CLASSIFICATION	// background color.
WITHOUT_CLASSIFICATION	// 2 Pixel padding after compartment
WITHOUT_CLASSIFICATION	// Set up hide all / show all
WITHOUT_CLASSIFICATION	// Perform the action
WITHOUT_CLASSIFICATION	// Only the bigPort may be filled
WITHOUT_CLASSIFICATION	/*?LINE_WIDTH?*/
WITHOUT_CLASSIFICATION	//see parent
WITHOUT_CLASSIFICATION	/*?LINE_WIDTH?*/
WITHOUT_CLASSIFICATION	// We remove all of them:
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.undo.UndoableAction#isEnabled()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*?LINE_WIDTH?*/
WITHOUT_CLASSIFICATION	// If we don't have a fig for this UML object, we'll need to add // one. We set the bounds, but they will be reset later.
WITHOUT_CLASSIFICATION	/* but its position may have been changed: */
WITHOUT_CLASSIFICATION	// bounds not relevant here, but I am perfectionist...
WITHOUT_CLASSIFICATION	/* We need to set a new notationprovider, since                 * the Notation language may have been changed:  */
WITHOUT_CLASSIFICATION	// add it again (but now in the right sequence)
WITHOUT_CLASSIFICATION	// Now put the text in // We must handle the case where the text is null
WITHOUT_CLASSIFICATION	// No longer abstract to allow subclasses to remove, so we provide a // null default implementation
WITHOUT_CLASSIFICATION	// If this is not overridden it will revert to the old behavior // All internal subclasses have been updated, but this if for // compatibility of non-ArgoUML extensions.
WITHOUT_CLASSIFICATION	/* Find the compartment fig for this umlObject: */
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Fill property cannot be changed.
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Line width cannot be changed.
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Line width property cannot be changed.
WITHOUT_CLASSIFICATION	// aggregation
WITHOUT_CLASSIFICATION	/* end class ActionSrcMultOneToMany */
WITHOUT_CLASSIFICATION	// TODO: set font?
WITHOUT_CLASSIFICATION	// to circumvent too many registered listeners
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	// ending editing
WITHOUT_CLASSIFICATION	// USED BY PGML.tee
WITHOUT_CLASSIFICATION	// Actually return the FigEdge that the FigEdgePort is part of.
WITHOUT_CLASSIFICATION	//            throw new IllegalArgumentException();
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// If the user selects an Action that is already selected in sticky // mode (double clicked) then we turn off sticky mode and make sure // no action is selected.
WITHOUT_CLASSIFICATION	/*Here the actions to divide a region*/
WITHOUT_CLASSIFICATION	/* The 1st region has an invisible divider line                 * (the box is always invisible): */
WITHOUT_CLASSIFICATION	/* Throw out any previous elements that were                 * enclosed but are not a concurrent region;                 * let's move them onto the first region: */
WITHOUT_CLASSIFICATION	//linewidth?
WITHOUT_CLASSIFICATION	/* The divider line should be visible, so no need to change its color. */
WITHOUT_CLASSIFICATION	/* Make the composite state 1 region higher: */
WITHOUT_CLASSIFICATION	/* TODO: Verify this.             * IIUC, then this triggers the CompountStateFig             * to draw itself correctly.             * Hence, there was a reason to wait this long             * to make the state concurrent. */
WITHOUT_CLASSIFICATION	// Look for the dashed edge
WITHOUT_CLASSIFICATION	// We have the dashed edge now find the opposite FigNode
WITHOUT_CLASSIFICATION	/* Prevent triggering too many events by setName(). */
WITHOUT_CLASSIFICATION	// not???
WITHOUT_CLASSIFICATION	// Do nothing    
WITHOUT_CLASSIFICATION	// Do nothing        
WITHOUT_CLASSIFICATION	// Consume to stop other modes from trying to take over
WITHOUT_CLASSIFICATION	// marker interface only
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	// Only reset the text if the two are not the same (i.e the fig // has // moved, rather than we've just edited the text, when // setTargetBBox() // will have made them the same). Note that styleBounds could // be null, // so we do the test this way round.
WITHOUT_CLASSIFICATION	// Can't do anything if we don't have a fig.
WITHOUT_CLASSIFICATION	// 2 Pixel padding after compartment
WITHOUT_CLASSIFICATION	// or vice versa?
WITHOUT_CLASSIFICATION	// Provide feedback to the user that their name was // not accepted
WITHOUT_CLASSIFICATION	// Subtract the the offset of the click, to take account of user // having not initially clicked in the centre.
WITHOUT_CLASSIFICATION	// super returns -1 if any of GEFs buttons was hit // (but maybe one of the not-GEF-buttons)
WITHOUT_CLASSIFICATION	/* Do not show border line, make transparent: */
WITHOUT_CLASSIFICATION	//cleanup of unused FigText's
WITHOUT_CLASSIFICATION	// TODO: This doesn't do anything special with keywords. // They should probably go first.
WITHOUT_CLASSIFICATION	//There is one fig more in the group than (stereotypes + keyword):
WITHOUT_CLASSIFICATION	// The keyword fig already exists.
WITHOUT_CLASSIFICATION	/* This will contain the Figs that we do not need anymore: */
WITHOUT_CLASSIFICATION	// bounds not relevant here
WITHOUT_CLASSIFICATION	// bounds not relevant here
WITHOUT_CLASSIFICATION	// The stereotype fig already exists.
WITHOUT_CLASSIFICATION	// The boundary box as held in the target fig, and as listed // in the boundary box style field (null if we don't have  // anything valid)
WITHOUT_CLASSIFICATION	// remove all stereotypes that have a graphical icon
WITHOUT_CLASSIFICATION	//TODO: check!
WITHOUT_CLASSIFICATION	//set new bounds for all included figs
WITHOUT_CLASSIFICATION	// StylePanelFigClass relies on getPanelTarget() to return a  // FigCompartmentBox
WITHOUT_CLASSIFICATION	// Get class box, because we will set it's bounding box
WITHOUT_CLASSIFICATION	// Get class box, because we will set it's bounding box in text field
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	// The keyword fig does not exist yet. // Let's create one:
WITHOUT_CLASSIFICATION	// keywords which look like a stereotype (e.g. <<interface>>) have // no owner
WITHOUT_CLASSIFICATION	// if there are no stereotypes, we return (0,0), preventing // double lines in the class (see issue 4939)
WITHOUT_CLASSIFICATION	/* end class StylePanelFigAssociationClass */
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Constructors // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Main methods // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Create the singleton if it does not exist, and then return it
WITHOUT_CLASSIFICATION	// When a new target is selected, we have to check if it 's a use case. //Then, the icone "add extension point" have to become enabled.
WITHOUT_CLASSIFICATION	// Find the target in the project browser. We can only do anything if // its a use case.
WITHOUT_CLASSIFICATION	// Create a new extension point and make it the browser target. Then // invoke the superclass action method.
WITHOUT_CLASSIFICATION	/* end class ActionAddExtensionPoint */
WITHOUT_CLASSIFICATION	// We have already confirmed the connection is valid
WITHOUT_CLASSIFICATION	// Detach any edges (such as comment edges) already attached // to the FigAssociation before the FigAssociation is removed. // They'll later be re-attached to the new FigNodeAssociation
WITHOUT_CLASSIFICATION	// If there are bits of an association class then // remember their location and path.
WITHOUT_CLASSIFICATION	// Create the new FigNodeAssociation and locate it.
WITHOUT_CLASSIFICATION	// Add the association ends to the graph model
WITHOUT_CLASSIFICATION	// Add the edges (such as comment edges) that were on the old // FigAssociation to our new FigNodeAssociation and make sure they are // positioned correctly.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dragEnter(     *         java.awt.dnd.DropTargetDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dragOver(     *         java.awt.dnd.DropTargetDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dropActionChanged(     *         java.awt.dnd.DropTargetDragEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//get the model elements that are being transfered.
WITHOUT_CLASSIFICATION	// multiplicity
WITHOUT_CLASSIFICATION	/* end class ModeCreateAssociation */
WITHOUT_CLASSIFICATION	/*&& ((UMLDiagram) dia).doesAccept(dtde.getSource())*/
WITHOUT_CLASSIFICATION	/*     * Create a new FigText instance based on the given mouse down     * event and the state of the parent Editor.      */
WITHOUT_CLASSIFICATION	//			System.err.println("NullPointerException ignored.");
WITHOUT_CLASSIFICATION	/* end class SPFigEdgeModelElement */
WITHOUT_CLASSIFICATION	//    		System.err.println("NullPointerException ignored.");
WITHOUT_CLASSIFICATION	// Get all our sub Figs and hit them with the big stick too
WITHOUT_CLASSIFICATION	/* Only show the path item when there is                          * an owning namespace. */
WITHOUT_CLASSIFICATION	/* Only show the path item when there is                          * an owning namespace. */
WITHOUT_CLASSIFICATION	// enumerate all selected figures and update their path accordingly  
WITHOUT_CLASSIFICATION	/* Force the line-width to 0, since the FigGroup that contains the      * stereotype may want to show a border, but we don't. */
WITHOUT_CLASSIFICATION	// compartments
WITHOUT_CLASSIFICATION	/*     * TODO: Support commentEdges.     * TODO: Support associations to self.     *     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// add
WITHOUT_CLASSIFICATION	/* 20 = height of name fig ?*/
WITHOUT_CLASSIFICATION	// Now force calculation of the bounds of the figure, update the edges // and trigger anyone who's listening to see if the "bounds" property // has changed.
WITHOUT_CLASSIFICATION	/* 2*LINE_WIDTH?  or extra padding? */
WITHOUT_CLASSIFICATION	// Set properties of the stereotype box.
WITHOUT_CLASSIFICATION	/*         * The nameFig is transparent, since this is a box and the fill color is         * drawn by the bigPort.         */
WITHOUT_CLASSIFICATION	// Use "aSize" to build up the minimum size. Start with the size of the // name compartment and build up.
WITHOUT_CLASSIFICATION	/*         * Only take into account the stereotype width, not the height, since         * the height is included in the name fig:         */
WITHOUT_CLASSIFICATION	/* Add the height of all the compartments (if there are any),         * and check their minimum width: */
WITHOUT_CLASSIFICATION	// Save our old boundaries so it can be used in property message later
WITHOUT_CLASSIFICATION	// Make sure we don't try to set things smaller than the minimum
WITHOUT_CLASSIFICATION	/* The box for the compartments is somewhere         * inside the outside bounds: */
WITHOUT_CLASSIFICATION	/* Now the new nameFig height will include the stereotype height: */
WITHOUT_CLASSIFICATION	/* The new height can not be less than the name height: */
WITHOUT_CLASSIFICATION	/* Calculate the minimum needed height for all the compartments:*/
WITHOUT_CLASSIFICATION	/*                     * Distribute the extra height over the visible                     * compartments:                     */
WITHOUT_CLASSIFICATION	/* Increase the height of the fig: */
WITHOUT_CLASSIFICATION	/* Finally set the bounds of the big box and the border fig: */
WITHOUT_CLASSIFICATION	// hide compartment
WITHOUT_CLASSIFICATION	/*                 * Hiding one compartment means that the Fig returns to minimal                 * dimensions:                 */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.JComponent#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.PathConv#stuffPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.PathConv#setClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.PathConv#applyOffsetAmount(java.awt.Point, java.awt.Point, int, java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*                 * Alternatively, we could reduce the height of the Fig by the                 * height of this one hidden compartment. But that would not be                 * possible for the width - so we better return to minimal                 * dimensions overall.                 */
WITHOUT_CLASSIFICATION	// show compartment
WITHOUT_CLASSIFICATION	/* This sets the lineWidth of all in the group: */
WITHOUT_CLASSIFICATION	/* NameFig and StereotypeFig are handled by parent. */
WITHOUT_CLASSIFICATION	// forceRepaintShadow();
WITHOUT_CLASSIFICATION	/* Update the diagram, and other users of these settings: */
WITHOUT_CLASSIFICATION	// @jve:decl-index=0:visual-constraint="10,10"
WITHOUT_CLASSIFICATION	// find the point offset on the line that gives a // correct offset
WITHOUT_CLASSIFICATION	// default angle is 90 deg.
WITHOUT_CLASSIFICATION	// Boundary condition in GEF, make sure this is LESS THAN, not equal
WITHOUT_CLASSIFICATION	// If we're using a fixed offset, just add it and return // No collision detection is done in this case
WITHOUT_CLASSIFICATION	// Check for a collision between our computed position and the edge
WITHOUT_CLASSIFICATION	// increase offset by 2px at a time
WITHOUT_CLASSIFICATION	// Get the points representing the poly line for our edge
WITHOUT_CLASSIFICATION	// increase offset by increments until we're clear
WITHOUT_CLASSIFICATION	// limit our retries in case its too hard to get free
WITHOUT_CLASSIFICATION	// If we timed out, give it one more try on the other side
WITHOUT_CLASSIFICATION	/* count >= limit */
WITHOUT_CLASSIFICATION	/* Force the line-width to 0, since the FigGroup that contains the      * stereotype may want to show a border, but we don't. */
WITHOUT_CLASSIFICATION	//                LOG.log(Level.FINE, "Final point #" + count + " " + result //                        + " offset of " + scaledOffset);
WITHOUT_CLASSIFICATION	// segment size for computing slope
WITHOUT_CLASSIFICATION	// Two points for line segment used to compute slope of path here // NOTE that this is the average slope, not instantaneous, so it will // give screwy results near bends in the path
WITHOUT_CLASSIFICATION	// If our position was clamped, try to make it up on the other end
WITHOUT_CLASSIFICATION	// Can't get the slope of a point.  Just return an arbitrary point.
WITHOUT_CLASSIFICATION	// Our angle theta is arctan(opposite/adjacent) // Because y increases going down the screen, positive angles are // clockwise rather than counterclockwise
WITHOUT_CLASSIFICATION	// This shouldn't happen, because of our line segment size check
WITHOUT_CLASSIFICATION	// "We're going vertical!" - Goose in "Top Gun"
WITHOUT_CLASSIFICATION	// Arctan only returns -PI/2 to PI/2 // Handle the other two quadrants and normalize to 0 - 2PI
WITHOUT_CLASSIFICATION	// Quadrant II & III
WITHOUT_CLASSIFICATION	// Quadrant IV
WITHOUT_CLASSIFICATION	// Set the following for some backward compatibility with old algorithm
WITHOUT_CLASSIFICATION	// Add displacement angle to slope
WITHOUT_CLASSIFICATION	// Transform to 0 - 2PI range if we've gone all the way around circle
WITHOUT_CLASSIFICATION	// Compute our deltas
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE,result.x + ", " + result.y //                + " theta = " + theta * 180 / Math.PI //                + " dx = " + dx + " dy = " + dy);
WITHOUT_CLASSIFICATION	// Load the standard colour, just add an alpha channel.
WITHOUT_CLASSIFICATION	// Should never get here.  If we do, return the inner point.
WITHOUT_CLASSIFICATION	// Called by propertyChange
WITHOUT_CLASSIFICATION	// this does a calcBounds()
WITHOUT_CLASSIFICATION	// NOTE: This listener needs to always be active // even if this tab isn't visible
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Diagram#getClassAndModelID()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * The clone method that should clone the JGraph with it's contents and     * the toolbar with it's contents. Since both JGraph as the toolbar are     * coming from the GEF framework, cloning them will be hard work and should     * actually not be placed here but in a clone method of the JGraph and the     * Toolbar.     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#setVisible(boolean)     */
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	/* The following is the default implementation         * for diagrams of which the owner is a namespace.         */
WITHOUT_CLASSIFICATION	// source // source position // destination // destination position // number of objects to be copied
WITHOUT_CLASSIFICATION	/*"unnamed " + */
WITHOUT_CLASSIFICATION	// TODO: should update to size of diagram contents
WITHOUT_CLASSIFICATION	/* This should not be needed if the above is correct,          * but let's be sure: */
WITHOUT_CLASSIFICATION	/* This should not be needed if the above is correct,          * but let's be sure: */
WITHOUT_CLASSIFICATION	/*             * ActionPaste.getInstance().setEnabled( Globals.clipBoard             * != null && !Globals.clipBoard.isEmpty());             */
WITHOUT_CLASSIFICATION	// next statement gives us a clone JGraph but not a cloned Toolbar
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.event.ModeChangeListener#modeChange(org.tigris.gef.event.ModeChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// remains selected
WITHOUT_CLASSIFICATION	// the old selection
WITHOUT_CLASSIFICATION	// Target might not have been initialised yet.
WITHOUT_CLASSIFICATION	// add to selection
WITHOUT_CLASSIFICATION	// Optimize for the normal case to minimize target changes
WITHOUT_CLASSIFICATION	//            }
WITHOUT_CLASSIFICATION	// Assuming the target is some model element.
WITHOUT_CLASSIFICATION	// how to handle empty target lists? // probably the TabDiagram should only show an empty pane in that case
WITHOUT_CLASSIFICATION	// Assuming the target is some model element.
WITHOUT_CLASSIFICATION	//was ""
WITHOUT_CLASSIFICATION	// Although we register for notification of diagrams being // deleted, we currently depend on the TargetManager to assign // a new target when this happens // When we implement MDI and have our own list of open diagrams // we can ressurect the use of this
WITHOUT_CLASSIFICATION	// Any Swing work done here needs to be queued to the AWT thread // since we don't know what thread our event will arrive on
WITHOUT_CLASSIFICATION	//- RedrawManager.lock();
WITHOUT_CLASSIFICATION	//- RedrawManager.lock();
WITHOUT_CLASSIFICATION	//getLayerManager().getActiveLayer().paint(g);
WITHOUT_CLASSIFICATION	//- RedrawManager.unlock(); //- _redrawer.repairDamage();
WITHOUT_CLASSIFICATION	//getLayerManager().getActiveLayer().paint(g);
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#getValue(java.lang.String)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* This makes the text not touch the text-border line: */
WITHOUT_CLASSIFICATION	// TODO: We don't currently have any settings that can change on a // per-fig basis, so we can just use the project/diagram defaults //        settings = new DiagramSettings(renderSettings);
WITHOUT_CLASSIFICATION	// Certain types of fixed text (e.g. a FigStereotype with a keyword) // may not have an owner
WITHOUT_CLASSIFICATION	//Now, we link it to the modelelements which are represented by FigNode
WITHOUT_CLASSIFICATION	//update all tools' enabled status
WITHOUT_CLASSIFICATION	// remember the fig for later
WITHOUT_CLASSIFICATION	//Let's build the comment first, unlinked.
WITHOUT_CLASSIFICATION	/* Prevent e.g. AssociationClasses from being added trice: */
WITHOUT_CLASSIFICATION	//Select the new comment as target
WITHOUT_CLASSIFICATION	//Create the Node Fig for the comment itself and draw it
WITHOUT_CLASSIFICATION	//Create the comment links and draw them
WITHOUT_CLASSIFICATION	//Place the comment Fig on the nicest spot on the diagram
WITHOUT_CLASSIFICATION	// If we're drawing from an edge
WITHOUT_CLASSIFICATION	//$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	//$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	//$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.undo.UndoableAction#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Calling connect() will add the edge to the GraphModel and // any LayerPersectives on that GraphModel will get a // edgeAdded event and will add an appropriate FigEdge // (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	// user made a false start
WITHOUT_CLASSIFICATION	// So, the target is a MAssociationRole
WITHOUT_CLASSIFICATION	/*MVW This is not the correct way,        * but it allows connecting a CommentEdge to it!        * See e.g. ActionAddNote for the correct way.        * Testcase:        * 1. Select the message.        * 2. Click the Comment tool.        * */
WITHOUT_CLASSIFICATION	/* end class ActionAddMessage */
WITHOUT_CLASSIFICATION	// let's use groups to construct the different text sections at // the association
WITHOUT_CLASSIFICATION	/* No further listeners required in this case - the rest is handled         * by the notationProvider and sub-Figs. */
WITHOUT_CLASSIFICATION	/* This only happens if model-change events arrive             * before we are completely constructed. */
WITHOUT_CLASSIFICATION	// x^2 + y^2 = r^2  (equation of a circle)
WITHOUT_CLASSIFICATION	// max distance is set at 100 pixels, (rSquared = 100^2)
WITHOUT_CLASSIFICATION	// east
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* end class FigAssociation */
WITHOUT_CLASSIFICATION	// Note that "multiplicity" is what is the notation is listening // for in UML1.4 "uppervalue" are listened to in UML2. It is not // currently why it is not required to register for "lowerValue" // also.
WITHOUT_CLASSIFICATION	// no need to listen to these property changes - the // notationProvider takes care of this.
WITHOUT_CLASSIFICATION	// no need to listen to these property changes - the // notationProvider takes care of this.
WITHOUT_CLASSIFICATION	/*, new String[] {"name", "visibility", "stereotype"}*/
WITHOUT_CLASSIFICATION	/*, new String[] {"name", "visibility", "stereotype"}*/
WITHOUT_CLASSIFICATION	// These are a list of arrow types.
WITHOUT_CLASSIFICATION	// Added to the arrow type for navigable
WITHOUT_CLASSIFICATION	// Finished editing. // Parse the text that was edited. // Only the role is editable, hence:
WITHOUT_CLASSIFICATION	//            figEdge.showHelp(role.getParsingHelp()); //            role.setText();
WITHOUT_CLASSIFICATION	// Pass everything else to superclass
WITHOUT_CLASSIFICATION	/* end class ActionNavigability */
WITHOUT_CLASSIFICATION	/* Nothing yet. Later maybe something like: */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//        putNotationArgument("showAssociationName",  //                getSettings().isShowAssociationNames());
WITHOUT_CLASSIFICATION	/* The text the user has filled in the textfield is first checked             * to see if it's a valid multiplicity. If so then that is the              * multiplicity to be set. If not the input is rejected. */
WITHOUT_CLASSIFICATION	// Fonts and colors should get updated automatically for contained figs
WITHOUT_CLASSIFICATION	/* There is none... */
WITHOUT_CLASSIFICATION	// only initialized to prevent warning
WITHOUT_CLASSIFICATION	//not supported for this target
WITHOUT_CLASSIFICATION	// make space for the clarifier // margin between text and border
WITHOUT_CLASSIFICATION	/* This next line presumes that the 1st fig with this owner             * is the previous port - and consequently nullifies the owner             * of this 1st fig. */
WITHOUT_CLASSIFICATION	// Add a listener for changes to any property
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	// Show ...
WITHOUT_CLASSIFICATION	// popupAddOffset should be equal to the number of items added here:
WITHOUT_CLASSIFICATION	// TODO: The following is carried over from setOwner, but probably // isn't needed //        renderingChanged(); // It does the following (add as needed): //        updateNameText(); //        updateStereotypeText(); //        updateStereotypeIcon(); //        updateBounds(); //        damage();
WITHOUT_CLASSIFICATION	// Be careful here since subclasses could have overridden this with // the assumption that it wouldn't be called before the constructors // finished
WITHOUT_CLASSIFICATION	/* TODO: MVW: I think this has to be:                 * clone.nameFig = (FigSingleLineText) cloneFig;                 * but have not the means to investigate,                 * since this code is not yet used.                 * Enable the menu-items for Copy/Paste to test...                 * BTW: In some other FigNodeModelElement                 * classes I see the same mistake. */
WITHOUT_CLASSIFICATION	// this rectangle marks the whole modelelement figure; everything // is inside it:
WITHOUT_CLASSIFICATION	/**     * Clone this figure. After the base clone method has been called determine     * which child figs of the clone represent the name, stereotype and port.     * <p>     * TODO: enclosedFigs, encloser and eventSenders may also need to be cloned.     *     * @see java.lang.Object#clone()     * @return the cloned figure     */
WITHOUT_CLASSIFICATION	/* Idem here:                 * clone.stereotypeFig = (FigStereotypesGroup) cloneFig; */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getEnclosingFig()     */
WITHOUT_CLASSIFICATION	// update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	//parse the text that was edited
WITHOUT_CLASSIFICATION	// add stereotype view submenu
WITHOUT_CLASSIFICATION	// The node's been placed on the diagram
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// Set the namespace of the enclosed model element to the // namespace of the encloser.
WITHOUT_CLASSIFICATION	// Find all ElementResidences between the class and the component:
WITHOUT_CLASSIFICATION	// There was no ElementResidence yet, so let's create one:
WITHOUT_CLASSIFICATION	// The node's been placed within some Fig
WITHOUT_CLASSIFICATION	// There were 2 ElementResidences .. strange case.
WITHOUT_CLASSIFICATION	// There is already a correct ElementResidence
WITHOUT_CLASSIFICATION	// The owner is already linked to the component
WITHOUT_CLASSIFICATION	// We are getting events we don't want. Filter them out.
WITHOUT_CLASSIFICATION	/* Only update the bounds if they change:  */
WITHOUT_CLASSIFICATION	// We handle and consume editing events
WITHOUT_CLASSIFICATION	// resize the FigNode to accommodate the new text
WITHOUT_CLASSIFICATION	/* If the source of the event is an UML object,             * e.g. the owner of this Fig (but not always only the owner             * is shown, e.g. for a class, also its attributes are shown),             * then the UML model has been changed.             */
WITHOUT_CLASSIFICATION	// TODO: Should this not be an assert?
WITHOUT_CLASSIFICATION	// west
WITHOUT_CLASSIFICATION	/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs. This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// south
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	// Convert null to empty string and clear help message
WITHOUT_CLASSIFICATION	// it is done
WITHOUT_CLASSIFICATION	//this enables direct text editing for sub figs of a //FigGroup object:
WITHOUT_CLASSIFICATION	// either layer or owner was null
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	// Default is to do nothing
WITHOUT_CLASSIFICATION	//This test needed for a FigPool
WITHOUT_CLASSIFICATION	// Get model listeners removed:
WITHOUT_CLASSIFICATION	// is used as InstanceSpecification, see UMLDeploymentDiagram
WITHOUT_CLASSIFICATION	// TODO: what about ObjectNode? //        return org.eclipse.uml2.uml.ObjectNode.class;        
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// TODO: State & Vertex are independent classes in UML 2.1
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// only initialized to prevent warning
WITHOUT_CLASSIFICATION	//not supported for this target
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // internal methods
WITHOUT_CLASSIFICATION	// TODO assert modelElement != null???
WITHOUT_CLASSIFICATION	// Default for name and stereotype is no border
WITHOUT_CLASSIFICATION	/*     * Override FigNode implementation to keep setOwner from getting called.     */
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// Use DiagramInterface to add classes to diagram
WITHOUT_CLASSIFICATION	// ActionAddAllClassesFromModel
WITHOUT_CLASSIFICATION	// we have an edge (the UML modelelement!)
WITHOUT_CLASSIFICATION	// situation 1
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * Text group to contain name & stereotype     */
WITHOUT_CLASSIFICATION	// computeRoute(); // this recomputes the route if you reload the diagram.
WITHOUT_CLASSIFICATION	// in case someone turns it on
WITHOUT_CLASSIFICATION	// Do not allow fill to change. We should see through // the text to the color of the main FIg background.
WITHOUT_CLASSIFICATION	/* Now force minimum dimensions for the text: */
WITHOUT_CLASSIFICATION	/* Now add the areas around the text to return the complete size: */
WITHOUT_CLASSIFICATION	// calculate the source and dest figs for to self assoc
WITHOUT_CLASSIFICATION	//reset the pointIndex
WITHOUT_CLASSIFICATION	// check pre-conds
WITHOUT_CLASSIFICATION	//Set-up:
WITHOUT_CLASSIFICATION	// the fig that was under the mouse when it was released
WITHOUT_CLASSIFICATION	//make a nice little target area:
WITHOUT_CLASSIFICATION	// and find the Fig:
WITHOUT_CLASSIFICATION	// last is the top fig.
WITHOUT_CLASSIFICATION	// check intermediate post-condition.
WITHOUT_CLASSIFICATION	// delegate the re-routing to graphmodels.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	// set it to an invalid number by default // to make sure it is set correctly.
WITHOUT_CLASSIFICATION	//figPoly.setFillColor(col);
WITHOUT_CLASSIFICATION	//figClone._polygon = (Polygon) _polygon.clone();
WITHOUT_CLASSIFICATION	// north
WITHOUT_CLASSIFICATION	// Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	// Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	// TODO: Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	// Message
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*         * Crazy numbering scheme at work here.  Here's how the handle numbers         * are laid out.  Values 0-7 are defined by GEF and go left to         * right, top to bottom (ie not clockwise or counterclockwise).         * Values 10-14 zigzag North, South, West, East, Southwest.         * If you can correctly guess where 15 will go, you should buy         * a lottery ticket immediately.         *  <pre>         *            10         *     0-------1-------2         *     |               |         *  12 3               4 13         *     |               |         *  14 5-------6-------7         *            11         * </pre>         */
WITHOUT_CLASSIFICATION	// ClassifierRole // ClassifierRole
WITHOUT_CLASSIFICATION	/* Simulate a press of the mouse above the calculated point: */
WITHOUT_CLASSIFICATION	/* Calculate the drop location, and place every n-th element             * at an offset proportional to n.             */
WITHOUT_CLASSIFICATION	// super implementation found a hit
WITHOUT_CLASSIFICATION	/* Take canvas scrolling into account.             * The implementation below does place the element correctly             * when the canvas has been scrolled.             */
WITHOUT_CLASSIFICATION	/* Simulate a release of the mouse: */
WITHOUT_CLASSIFICATION	/*     * Overridden in order to implement PathCompartmentContainer.     */
WITHOUT_CLASSIFICATION	// do nothing by default
WITHOUT_CLASSIFICATION	// Don't allow drag outside of bounds of diagram
WITHOUT_CLASSIFICATION	/*     * Overridden in order to implement PathCompartmentContainer.     */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // clarifiers.
WITHOUT_CLASSIFICATION	// If the user has selected ModePlace either by a diagram // tool or AddToDiagram then we don't want to show the // toolbelt items.
WITHOUT_CLASSIFICATION	// Remember what handle was clicked for the case where the drag // is released over empty space
WITHOUT_CLASSIFICATION	// transparent cyan
WITHOUT_CLASSIFICATION	// 
WITHOUT_CLASSIFICATION	// yellow
WITHOUT_CLASSIFICATION	// translucent green
WITHOUT_CLASSIFICATION	//        super(ModeCreatePolyEdge.class, "edgeClass", //	      Model.getMetaTypes().getAssociation(), name);
WITHOUT_CLASSIFICATION	// set this to true on to enable debugging figs
WITHOUT_CLASSIFICATION	// anchor position
WITHOUT_CLASSIFICATION	/* The EnumerationLiteral uses a dedicated notation that supports          * parsing "name1;name2;name3" and stereotypes.          * Also supports deleting a literal by erasing text. */
WITHOUT_CLASSIFICATION	/* TODO: The UML does not seem to define this name. Or is it? */
WITHOUT_CLASSIFICATION	/*     * The serialVersionUID (generated by Eclipse)     */
WITHOUT_CLASSIFICATION	// UML spec for Generalizations doesn't call for name
WITHOUT_CLASSIFICATION	// Name & stereotypes get updated by superclass
WITHOUT_CLASSIFICATION	// Update the discriminator if it changed
WITHOUT_CLASSIFICATION	// show it
WITHOUT_CLASSIFICATION	//                fig.calcBounds();
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// we only take the filename, not the whole system path
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	//make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	//      The following does not seem to work - centered the Fig instead. //        getNameFig().setJustificationByName("center");
WITHOUT_CLASSIFICATION	// get the widest of all textfigs // calculate the total height
WITHOUT_CLASSIFICATION	// Create the new FigAssociation edge to replace the node
WITHOUT_CLASSIFICATION	/* Center the NameFig, since center justification          * does not seem to work. */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Do nothing, this rect will always be transparent
WITHOUT_CLASSIFICATION	// Do nothing, this rect will always be transparent
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	// update the relative sizes and positions of internel Figs
WITHOUT_CLASSIFICATION	// popupAddOffset should be equal to the number of items added here:
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// We handle and consume editing events
WITHOUT_CLASSIFICATION	// Detach any non-associationend edges (such as comment edges) already // attached before this association node is removed. // They'll later be re-attached to the new FigAssociation
WITHOUT_CLASSIFICATION	// Now we can remove ourself (which will also remove the // attached association ends edges)
WITHOUT_CLASSIFICATION	// Add the non-associationend edges (such as comment edges) that were // originally attached to this and attach them to the new // FigAssociation and make sure they are positioned correctly.
WITHOUT_CLASSIFICATION	/*     * List of model element listeners we've registered.     */
WITHOUT_CLASSIFICATION	// Added this part to load the extra menu content
WITHOUT_CLASSIFICATION	/* Owner related todo items: */
WITHOUT_CLASSIFICATION	/* Fig related todo items: */
WITHOUT_CLASSIFICATION	// parse the text that was edited
WITHOUT_CLASSIFICATION	// Pass everything except editing events to superclass
WITHOUT_CLASSIFICATION	/* If the source of the event is an UML object,             * then the UML model has been changed.*/
WITHOUT_CLASSIFICATION	/* The following is a possible future improvement         * of the modelChanged() function.         * Michiel: Propose not to do this to keep architecture stable. */
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// TODO: Update setting
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// We moused over an object just as it was deleted // transient condition - doesn't require I18N
WITHOUT_CLASSIFICATION	// TODO: We don't have any settings that can change per-fig currently // so we can just use the default settings; //        settings = new DiagramSettings(renderSettings);
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	// No need to update if model element went away
WITHOUT_CLASSIFICATION	// Required for KeyListener interface, but not used
WITHOUT_CLASSIFICATION	// Required for KeyListener interface, but not used
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // internal methods
WITHOUT_CLASSIFICATION	// If the edge is from a circle to a circle (e.g. between use // cases) we have our own implementation overriding GEF. Which // attempts to keep the edges perpendicular if the edge is already // close to perpendicular.
WITHOUT_CLASSIFICATION	//newFC = _content;
WITHOUT_CLASSIFICATION	// GEF sets a different Fig than the one that we had at construction // time, so we need to set its color and width
WITHOUT_CLASSIFICATION	// place the edge on the layer and update the diagram
WITHOUT_CLASSIFICATION	/* end computeRoute */
WITHOUT_CLASSIFICATION	//TODO: Does this help?
WITHOUT_CLASSIFICATION	// If this is not a circle to circle edge we default to let GEF // calculate edge route.
WITHOUT_CLASSIFICATION	// ? two iterations of refinement, maybe should be a for-loop
WITHOUT_CLASSIFICATION	// Give up if the assocation ends don't have a type defined
WITHOUT_CLASSIFICATION	// Get the two ends of any valid edge
WITHOUT_CLASSIFICATION	// Only allow binary associations
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	// TODO: assumes public
WITHOUT_CLASSIFICATION	/*(MElementImport)*/
WITHOUT_CLASSIFICATION	// Modifiers ...
WITHOUT_CLASSIFICATION	/* This sets the lineWidth of all in the group: */
WITHOUT_CLASSIFICATION	/* NameFig and StereotypeFig are handled by parent. */
WITHOUT_CLASSIFICATION	// If the line angle is less than 3 degrees then snap the line // straight
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Methods that implement the MutableGraphModel interface // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// A dependency potentially has many clients and suppliers. We only // consider the first of each (not clear that we should really // accept the case where there is more than one of either)
WITHOUT_CLASSIFICATION	// Add the node, check that it is an actor or use case and add it to // the model namespace.
WITHOUT_CLASSIFICATION	// Tell GEF its changed
WITHOUT_CLASSIFICATION	// Add the element and place it in the namespace of the model
WITHOUT_CLASSIFICATION	// Tell GEF
WITHOUT_CLASSIFICATION	// Suggest that actors may not connect (see JavaDoc comment about // this).
WITHOUT_CLASSIFICATION	// Everything else is OK
WITHOUT_CLASSIFICATION	// Remove a node
WITHOUT_CLASSIFICATION	// Remove an edge
WITHOUT_CLASSIFICATION	// Something was added - nothing for us to worry about
WITHOUT_CLASSIFICATION	// Invoke the parent constructor first
WITHOUT_CLASSIFICATION	// Invoke the parent refresh first
WITHOUT_CLASSIFICATION	/* end class StylePanelFigUseCase */
WITHOUT_CLASSIFICATION	// initialize any other Figs here
WITHOUT_CLASSIFICATION	// Only the head should be filled (not the text)
WITHOUT_CLASSIFICATION	//Accumulate a bounding box for all the Figs in the group.
WITHOUT_CLASSIFICATION	//      name updating
WITHOUT_CLASSIFICATION	/*     * Text fig to hold the <<include>> label     */
WITHOUT_CLASSIFICATION	// The <<include>> label. // It's not a true stereotype, so don't use the stereotype support
WITHOUT_CLASSIFICATION	/* TRY SOME ACTION ERRORS */
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	/* Set the drop location in the case of D&D: */
WITHOUT_CLASSIFICATION	/* Check if multiple items are selected: */
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// If the element import is in the old owned, it means it must have // been removed. Make sure the associated model element is removed.
WITHOUT_CLASSIFICATION	// By default we don't show the attribute check box. Mark this object // as a listener for the check box.
WITHOUT_CLASSIFICATION	//These are the positions of child figs inside this fig //They must be added in the constructor in this order. //For now the name must not be last as this would force //zero width lines (until GEF is fixed)
WITHOUT_CLASSIFICATION	// add Figs to the FigNode in back-to-front order // Put this rectangle behind the rest, so it goes first
WITHOUT_CLASSIFICATION	// Make the line dashed
WITHOUT_CLASSIFICATION	// Add an arrow with an open arrow head
WITHOUT_CLASSIFICATION	// Make the edge go between nearest points
WITHOUT_CLASSIFICATION	// Create a new version of the relevant fig
WITHOUT_CLASSIFICATION	// The nodes at the two ends
WITHOUT_CLASSIFICATION	// The figs for the two end nodes
WITHOUT_CLASSIFICATION	// Link the new include relationship in to the ends
WITHOUT_CLASSIFICATION	// Link the new dependency in to the ends
WITHOUT_CLASSIFICATION	/* Side effect: This creates the fig: */
WITHOUT_CLASSIFICATION	/*         * A use case has an external separator.         * External means external to the compartment box.          * This horizontal line sticks out of the box,          * and touches the ellipse edge.         */
WITHOUT_CLASSIFICATION	// by default, do not show extension points:
WITHOUT_CLASSIFICATION	/* Use arbitrary dimensions for now. */
WITHOUT_CLASSIFICATION	// Get the parent vector first
WITHOUT_CLASSIFICATION	// Formula for a is described in the overall class description.
WITHOUT_CLASSIFICATION	/* For an ellipse, we can put the box in the middle:  */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	// Make the edge go between nearest points
WITHOUT_CLASSIFICATION	// Add menu to add an extension point or note. Placed one before last, // so the "Properties" entry is always last.
WITHOUT_CLASSIFICATION	// Where there is more than one supplier or client, take the first // element in each case. There really ought to be a check that // there are some here for safety.
WITHOUT_CLASSIFICATION	// Modifier menu. Placed one before last, so the "Properties" entry is // always last.
WITHOUT_CLASSIFICATION	// Work out the radii of the ellipse, a and b. The top right corner of // the ellipse (Cartesian coordinates, centered on the origin) will be // at (x,y)
WITHOUT_CLASSIFICATION	// Result as integers, rounded up. We ensure that the radii are // integers for convenience.
WITHOUT_CLASSIFICATION	/*     * Use the code from the FigCircle, not the one from Fig.     */
WITHOUT_CLASSIFICATION	/* Let's register for events from all modelelements         * that change the name or body text:          */
WITHOUT_CLASSIFICATION	/* Register for name changes, added extensionPoints             * and abstract makes the text italic.             * All Figs need to listen to "remove", too: */
WITHOUT_CLASSIFICATION	// register for extension points:
WITHOUT_CLASSIFICATION	// Set bounds will be called from our superclass constructor before // our constructor has run, so make sure this gets set up if needed.
WITHOUT_CLASSIFICATION	// Set up FigText to hold the condition.
WITHOUT_CLASSIFICATION	// Join all into a group
WITHOUT_CLASSIFICATION	// UML spec for Extend doesn't call for name nor stereotype
WITHOUT_CLASSIFICATION	// Make sure the line is dashed
WITHOUT_CLASSIFICATION	/* Set up the property panels for use case diagrams: */
WITHOUT_CLASSIFICATION	// Actions specific to the use case diagram toolbar
WITHOUT_CLASSIFICATION	// The renderer should be a singleton
WITHOUT_CLASSIFICATION	/*     * Allow all Packages and Classifiers..     */
WITHOUT_CLASSIFICATION	/* TRY THE PREDECESSORS */
WITHOUT_CLASSIFICATION	// If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	// TODO: This is using the default platform character encoding // specifying an encoding will produce more predictable results
WITHOUT_CLASSIFICATION	// The <<extend>> label. // It's not a true stereotype, so don't use the stereotype support //int y = getNameFig().getBounds().height;
WITHOUT_CLASSIFICATION	// Place in the middle of the line and ensure the line is dashed.  Add // an arrow with an open arrow head. Remember that for an extends // relationship, the arrow points to the base use case, but because of // the way we draw it, that is still the destination end.
WITHOUT_CLASSIFICATION	// Let the group recalculate its bounds and then tell GEF we've // finished.
WITHOUT_CLASSIFICATION	/* We accept a Package, but not a Model or a Subsystem. */
WITHOUT_CLASSIFICATION	/* If we do not exclude a Model here, then dropping the                 * Model on a UseCase diagram causes a package                 * to be drawn. */
WITHOUT_CLASSIFICATION	// empty list
WITHOUT_CLASSIFICATION	// private constructor to enforce singleton
WITHOUT_CLASSIFICATION	// some convenience methods
WITHOUT_CLASSIFICATION	// read until the end section is found, discard // generated content
WITHOUT_CLASSIFICATION	/**     * Constructor.     * <p>     * TODO: Correct?     *     * @param nodes The UML elements, typically classifiers, to generate.     * @param inModel <code>true</code> if the path is in the model.     */
WITHOUT_CLASSIFICATION	// Class Table
WITHOUT_CLASSIFICATION	// Select Buttons
WITHOUT_CLASSIFICATION	// Output Directory
WITHOUT_CLASSIFICATION	// Compile Checkbox
WITHOUT_CLASSIFICATION	// TODO: the last argument (recursive flag) should be a // selectable option
WITHOUT_CLASSIFICATION	// skip backup files. This is actually a workaround for the // cpp generator, which always creates backup files (it's a // bug).
WITHOUT_CLASSIFICATION	// TODO: Should be improved so that it's recognized whether there is something selected that can actually be generated // Nothing selected in the diagram
WITHOUT_CLASSIFICATION	// TODO: This is using the default platform character // encoding.  Specifying an encoding will produce more // predictable results
WITHOUT_CLASSIFICATION	// TODO: Get saved default directory // outputDirectoryComboBox.getModel().setSelectedItem(savedDir);
WITHOUT_CLASSIFICATION	// TODO: Get default output directory from user settings // Project p = ProjectManager.getManager().getCurrentProject(); // p.getProjectSettings().setGenerationOutputDir(path);
WITHOUT_CLASSIFICATION	// Generate Button --------------------------------------
WITHOUT_CLASSIFICATION	// remove trailing /
WITHOUT_CLASSIFICATION	// classify nodes by base path
WITHOUT_CLASSIFICATION	// else ignore
WITHOUT_CLASSIFICATION	// generate the files
WITHOUT_CLASSIFICATION	// Doesn't really matter what set we use.
WITHOUT_CLASSIFICATION	// Show Filechooser to select OutputDirectory
WITHOUT_CLASSIFICATION	/* end class ClassGenerationDialog */
WITHOUT_CLASSIFICATION	/* end class TableModelClassChecks */
WITHOUT_CLASSIFICATION	/* Try Changing the direction of m7 */
WITHOUT_CLASSIFICATION	// private constructor to enforce singleton
WITHOUT_CLASSIFICATION	// The diagram already exists in this project. Select it // as the current target.
WITHOUT_CLASSIFICATION	// ////////////// // TableModel implementation
WITHOUT_CLASSIFICATION	//        ArgoEventPump.fireEvent( //                new ArgoImporterEvent(ArgoEventTypes.IMPORTER_ADDED, gen));
WITHOUT_CLASSIFICATION	// Check if this diagram already exists in the project
WITHOUT_CLASSIFICATION	// Otherwise create a new classdiagram for the package.
WITHOUT_CLASSIFICATION	// if the classifier is not in the current diagram, add it:
WITHOUT_CLASSIFICATION	/*             * The following calls are ORDER DEPENDENT. Not sure why, but the             * layer add must come before the model add or we'll end up with             * duplicate figures in the diagram. - tfm             */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// the class is in the diagram // so we are on a second pass, // find the fig for this class can update its visible state.
WITHOUT_CLASSIFICATION	// add edges // for a 2-pass r.e. process we might have already added the // class but not its edges
WITHOUT_CLASSIFICATION	// "Java" is the default module for historical reasons, // but it's not required to be there
WITHOUT_CLASSIFICATION	// the previous line helps, but we better check again:
WITHOUT_CLASSIFICATION	// not a SuffixFilter selected, so we take all
WITHOUT_CLASSIFICATION	// filter out all unchanged files
WITHOUT_CLASSIFICATION	// set the lastModified value
WITHOUT_CLASSIFICATION	//return Arrays.copyOf(selectedFiles, selectedFiles.length);
WITHOUT_CLASSIFICATION	//          iss.setValue(countFiles + (i + 1) / 10);
WITHOUT_CLASSIFICATION	// Roughly equivalent to and derived from old Import.doFile()
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.JFileChooser#approveSelection()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.JFileChooser#cancelSelection()         */
WITHOUT_CLASSIFICATION	// New style importers don't create diagrams, so we'll do it // based on the list of newElements that they created
WITHOUT_CLASSIFICATION	// Do layout even if problems occurred during import
WITHOUT_CLASSIFICATION	// Add messages from caught exceptions
WITHOUT_CLASSIFICATION	// Select the correct diagram (implicitly creates it)
WITHOUT_CLASSIFICATION	// Add the element to the diagram
WITHOUT_CLASSIFICATION	/*     * Print an exception trace to a string buffer     */
WITHOUT_CLASSIFICATION	// TODO: Get the list of extended settings from the current // language importer and add those too
WITHOUT_CLASSIFICATION	// level 0 import detail
WITHOUT_CLASSIFICATION	// level 1 import detail
WITHOUT_CLASSIFICATION	// level 2 import detail
WITHOUT_CLASSIFICATION	// build the configPanel:
WITHOUT_CLASSIFICATION	// de-selects the fig minimising & layout // if we are not creating diagrams
WITHOUT_CLASSIFICATION	// select the level of import // 0 - classifiers only // 1 - classifiers plus feature specifications // 2 - full import, feature detail
WITHOUT_CLASSIFICATION	// cp1252 is often the default, but windows-1252 is the name listed // by Charset.availableCharsets
WITHOUT_CLASSIFICATION	/*     * Get the extension panel for the configuration settings.     */
WITHOUT_CLASSIFICATION	// ExplorerEventAdaptor.getInstance().structureChanged(); // ProjectBrowser.getInstance().getStatusBar().showProgress(0);
WITHOUT_CLASSIFICATION	/*     * Create chooser for objects we are to import. Old style modules get to     * provide their own (although I don't believe any of them do), while new     * style modules get the a chooser provided by us (which matches what the     * abstract class FileImportSupport used to provide).     */
WITHOUT_CLASSIFICATION	// this is because of the (senseless?) "All files" FileFilter
WITHOUT_CLASSIFICATION	// Parsing file x of z.
WITHOUT_CLASSIFICATION	// progress bar
WITHOUT_CLASSIFICATION	// For some reason, this alleged directory is a single file // This could be that there is some confusion or just // the normal, that a single file was selected and is // supposed to be imported.
WITHOUT_CLASSIFICATION	// Get the contents of the directory
WITHOUT_CLASSIFICATION	// The following test can cause trouble with // links, because links are accepted as // directories, even if they link files. Links // could also result in infinite loops. For this // reason we don't do this traversing recursively.
WITHOUT_CLASSIFICATION	// If this file is a directory
WITHOUT_CLASSIFICATION	// TODO: Add filename ?
WITHOUT_CLASSIFICATION	// can't remove the last file
WITHOUT_CLASSIFICATION	// can't remove from existing one so create new one.
WITHOUT_CLASSIFICATION	// Error/warning messageArea
WITHOUT_CLASSIFICATION	//        gbc.gridheight = 10;
WITHOUT_CLASSIFICATION	// cancel/close button
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// the introducing label
WITHOUT_CLASSIFICATION	// User closing the progress window is interpreted as cancel request
WITHOUT_CLASSIFICATION	// panel for controls
WITHOUT_CLASSIFICATION	//This method can be called only if //there's a valid selection //so go ahead and remove whatever's selected.
WITHOUT_CLASSIFICATION	//nothings left, disable firing.
WITHOUT_CLASSIFICATION	//Select an index.
WITHOUT_CLASSIFICATION	//removed item in last position
WITHOUT_CLASSIFICATION	// Just quit
WITHOUT_CLASSIFICATION	// the text box containing the problem messages
WITHOUT_CLASSIFICATION	// continue and abort buttons
WITHOUT_CLASSIFICATION	// listeners
WITHOUT_CLASSIFICATION	//stores the action command into the UMLPlainTextDocument //class which is also used //for setProperty and getProperty
WITHOUT_CLASSIFICATION	// TODO: this seems to be called at startup only so no check so far
WITHOUT_CLASSIFICATION	// Add an invisible button to be used when everything is off
WITHOUT_CLASSIFICATION	/*|  //removed to workaround problems with autosplit                     OCLEditor.OPTIONMASK_AUTOSPLIT*/
WITHOUT_CLASSIFICATION	//TabModelTarget interface methods
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	// There is no need to test if classes is empty because // the shouldBeEnabled mechanism blanks out the possibility to // choose this alternative in this case.
WITHOUT_CLASSIFICATION	//List classes = getCandidates(); //return classes.size() > 0;
WITHOUT_CLASSIFICATION	// Our first button is invisible.   // Selecting it deselects all visible buttons.
WITHOUT_CLASSIFICATION	// Set editor's model
WITHOUT_CLASSIFICATION	// check ocl parsing constraints
WITHOUT_CLASSIFICATION	// do not create a constraint:
WITHOUT_CLASSIFICATION	// Parse and check specified constraint.
WITHOUT_CLASSIFICATION	// Ignored: Highly unlikely, and what would we // do anyway?  log it
WITHOUT_CLASSIFICATION	// Split constraint body, if user wants us to
WITHOUT_CLASSIFICATION	// the constraint _must_ be owned by a namespace
WITHOUT_CLASSIFICATION	// the constraint _must_ be owned by a namespace
WITHOUT_CLASSIFICATION	// Store constraint body
WITHOUT_CLASSIFICATION	// New constraint, first time setData is called
WITHOUT_CLASSIFICATION	// a runtime exception that occurs when some // internal test fails
WITHOUT_CLASSIFICATION	// Check name for consistency with spec
WITHOUT_CLASSIFICATION	// Set name
WITHOUT_CLASSIFICATION	// Also set name in constraint body -- Added 03/14/2001
WITHOUT_CLASSIFICATION	// replace name
WITHOUT_CLASSIFICATION	// OK, so that didn't work out... Just ignore // any problems and don't set the name in the // constraint body better had log it.
WITHOUT_CLASSIFICATION	// TODO: Why is this ignored? - tfm - 20070110
WITHOUT_CLASSIFICATION	/* TRY PREDECESSORS */
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	//        cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// We have no model event listeners, so no need to do anything
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// TODO: I18N // Don't use the empty string for this or it won't show in the list
WITHOUT_CLASSIFICATION	// It would be better if we didn't need the container to get // the target. This constructor can have zero parameters as // soon as we improve targetChanged.
WITHOUT_CLASSIFICATION	/* TODO: Here too? */
WITHOUT_CLASSIFICATION	/* TODO: Here too? */
WITHOUT_CLASSIFICATION	/* This should not be necessary, but let's be sure: */
WITHOUT_CLASSIFICATION	// end of interval
WITHOUT_CLASSIFICATION	// start of interval
WITHOUT_CLASSIFICATION	/* Remove old listeners: */
WITHOUT_CLASSIFICATION	// in middle of interval
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	/* Add new listeners: */
WITHOUT_CLASSIFICATION	/*  MVW: This can never happen, isn't it? */
WITHOUT_CLASSIFICATION	// makes sure we can select 'none'
WITHOUT_CLASSIFICATION	// TODO: For large lists, this is doing a linear search of literally thousands of elements
WITHOUT_CLASSIFICATION	// Don't try to test this if we're removing the element
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// Object[] args = { newValue };
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// //  if one or the other is null or they are not equal
WITHOUT_CLASSIFICATION	// Do not set buildingModel = false here, // otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	// catch callers attempting to use one without other
WITHOUT_CLASSIFICATION	// //  as long as they aren't both null //   (or a really rare identical string pointer)
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// TODO: this seems to be called at startup only so no check so far
WITHOUT_CLASSIFICATION	// may only occur as child of the model or in a package
WITHOUT_CLASSIFICATION	// to rupdate the diagram set the stimulus name again // TODO: Explain that this really works also in the // MDR case. Linus is a sceptic.
WITHOUT_CLASSIFICATION	// //    if event source is unknown or //       the event source is the container's target //          then update the field
WITHOUT_CLASSIFICATION	// //   check the possibility that this is a promiscuous event
WITHOUT_CLASSIFICATION	// a deployment diagram shows something about the whole model // according to the UML spec, but we rely on the caller to enforce // that if desired.
WITHOUT_CLASSIFICATION	// a deployment diagram shows something about the whole model // according to the uml spec
WITHOUT_CLASSIFICATION	/*     * For a deployment diagram, not just any     * namespace will do - we need a package.     */
WITHOUT_CLASSIFICATION	// ns is a namespace, but not a package
WITHOUT_CLASSIFICATION	// ommit root package name; it's the model's root
WITHOUT_CLASSIFICATION	// there is a selection
WITHOUT_CLASSIFICATION	/* end class ActionCopy */
WITHOUT_CLASSIFICATION	/* Add a predicate for ArgoUML's default capabilities: */
WITHOUT_CLASSIFICATION	//Parser.ParseAndUpdate(modelObject, s);
WITHOUT_CLASSIFICATION	// remove from the model
WITHOUT_CLASSIFICATION	// It is a UML element that is not a ModelElement
WITHOUT_CLASSIFICATION	// lets see if this diagram has some figs on it
WITHOUT_CLASSIFICATION	// no content of diagram
WITHOUT_CLASSIFICATION	// we can delete figs like figrects now too
WITHOUT_CLASSIFICATION	/* TODO: If a namespace with sub-classdiagrams is deleted, then {            confirmStr +=                Translator.localize(                    "optionpane.remove-from-model-will-remove-subdiagram");            doAsk = true;        }*/
WITHOUT_CLASSIFICATION	// we cannot delete the last diagram
WITHOUT_CLASSIFICATION	// we cannot delete the model itself
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#remove(int, int)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram(); //return (activeDiagram instanceof UMLClassDiagram);
WITHOUT_CLASSIFICATION	// TODO: Probably really want to cancel editing //((FigTextEditor) focusOwner).cancelEditing();
WITHOUT_CLASSIFICATION	// usage of other sureRemove method is legacy. They should be // integrated.
WITHOUT_CLASSIFICATION	// the diagram contains figs so lets ask the user if // he/she is sure
WITHOUT_CLASSIFICATION	// TODO: This catch block needs to be narrower and do something // with the caught exception - tfm 20071120 // Ignore
WITHOUT_CLASSIFICATION	// TODO: All of the following can be broken if we have multiple // targets selected
WITHOUT_CLASSIFICATION	// OK Button ------------------------------------------
WITHOUT_CLASSIFICATION	// Delete Button
WITHOUT_CLASSIFICATION	// confirm with the user that he wants to delete, presenting the // list of settings to delete
WITHOUT_CLASSIFICATION	// procede with the deletion in the model
WITHOUT_CLASSIFICATION	// disable the button since no row will be selected now
WITHOUT_CLASSIFICATION	/* end class SourcePathDialog */
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock // if use is not thread-safe
WITHOUT_CLASSIFICATION	/* The user cancelled! */
WITHOUT_CLASSIFICATION	//Custom button text:
WITHOUT_CLASSIFICATION	// 0
WITHOUT_CLASSIFICATION	// 1
WITHOUT_CLASSIFICATION	// 2
WITHOUT_CLASSIFICATION	// 3
WITHOUT_CLASSIFICATION	/* TRY SOME PREDECESSOR ERRORS */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#remove(int, int)     */
WITHOUT_CLASSIFICATION	/* Try adding the extension from the chosen filter. */
WITHOUT_CLASSIFICATION	// adding project files icon
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	//do not use a custom Icon //the titles of buttons //default button title
WITHOUT_CLASSIFICATION	// NOTE: This may be called from a different thread, so we need to be // careful of the threading restrictions imposed by AbstractDocument // for mutators to be sure we don't deadlock.
WITHOUT_CLASSIFICATION	/* end class ActionOpenProject */
WITHOUT_CLASSIFICATION	// TODO: see if the new target has a TV that we can proxy
WITHOUT_CLASSIFICATION	/* Try adding the default extension. */
WITHOUT_CLASSIFICATION	//            LOG.debug("is a Base or Multiplicity");
WITHOUT_CLASSIFICATION	/* end class ActionSaveProjectAs */
WITHOUT_CLASSIFICATION	// only need to this from super()
WITHOUT_CLASSIFICATION	// --------------------------------------------------------
WITHOUT_CLASSIFICATION	// ----- setup similar to the super() implementation -----
WITHOUT_CLASSIFICATION	/*     * This action performs the layout and triggers a redraw of the editor pane.     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////// // Proxy methods for real UMLModelElementTaggedValue ///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// load of the new project // just reuse of the ActionOpen object
WITHOUT_CLASSIFICATION	// Rearrange the diagram layout
WITHOUT_CLASSIFICATION	// Leave logging commented out by default for efficiency //        LOG.debug("determine rendering for: " + value); //        LOG.debug("show icon: " + showIcon);
WITHOUT_CLASSIFICATION	// targets ought to be UML objects or diagrams
WITHOUT_CLASSIFICATION	// TODO: We shouldn't need this as well as the above.
WITHOUT_CLASSIFICATION	//      Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	/* end class TabProps */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// If our map has any entries for this type, it's a connection type
WITHOUT_CLASSIFICATION	// Get the list of valid model item pairs for the given connection type
WITHOUT_CLASSIFICATION	// See if there's a pair in this list that match the given // model elements
WITHOUT_CLASSIFICATION	/*     * @see TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// put everything together
WITHOUT_CLASSIFICATION	// no title looks better
WITHOUT_CLASSIFICATION	// now remove the ones already applied.
WITHOUT_CLASSIFICATION	// make lists
WITHOUT_CLASSIFICATION	// make buttons
WITHOUT_CLASSIFICATION	// ignored this event
WITHOUT_CLASSIFICATION	// make buttons layout
WITHOUT_CLASSIFICATION	// make listeners
WITHOUT_CLASSIFICATION	//Remove the element from Available List
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/** * Implements the source path controller. * NOTE: If requested in the future this could be returned from the language * modules. * * TODO: Update this to use the UML 1.4 TagDefinition mechanism instead of * UML 1.3 String type tag types. The TagDefinition can be made more specific * so that it just applies to Components with a <<sourceModule>> stereotype * or something similar. - tfm *  * @author euluis * @since 0.17.1 */
WITHOUT_CLASSIFICATION	/* end of SourcePathControllerImpl class definition */
WITHOUT_CLASSIFICATION	//sb.append(Model.getFacade().getName(c));
WITHOUT_CLASSIFICATION	//sb.append((String) Model.getFacade().getBody(c));
WITHOUT_CLASSIFICATION	/*MModelElement*/
WITHOUT_CLASSIFICATION	// next statement is necessary to update the textfield // if the selection is equal to what was allready // selected
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#selectAll()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getItem()         */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	//make new column with LabelledLayout
WITHOUT_CLASSIFICATION	// Comment.name text field - editing disabled
WITHOUT_CLASSIFICATION	// Comment.body text field - editing disabled
WITHOUT_CLASSIFICATION	/* Since there are no buttons on this panel, we have to set         * the size of the buttonpanel, otherwise the          * title would not be aligned right. */
WITHOUT_CLASSIFICATION	// Only change the background colour if it is supplied by the LAF. // Otherwise leave look and feel to handle this itself.
WITHOUT_CLASSIFICATION	// In this case, the bounds are determined by the FigEdge
WITHOUT_CLASSIFICATION	// In this case, the bounds are determined by the FigEdge
WITHOUT_CLASSIFICATION	// In this case, the bounds (of the box) are determined // by the FigClassAssociationClass
WITHOUT_CLASSIFICATION	// In this case, the bounds (of the box) are determined // by the FigClassAssociationClass
WITHOUT_CLASSIFICATION	// A newly created AssociationClass may not have all its parts // created by the time we are called
WITHOUT_CLASSIFICATION	// A newly created AssociationClass may not have all its parts // created by the time we are called
WITHOUT_CLASSIFICATION	// TODO: Defer most of this work if the panel isn't visible - tfm
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//          Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// how to handle empty target lists? // probably the TabProps should only show an empty pane in that // case
WITHOUT_CLASSIFICATION	// chooser.setSelectedFile(new File(fileName));
WITHOUT_CLASSIFICATION	/* So, let's do it the hard way: */
WITHOUT_CLASSIFICATION	// TODO: The following can be used when we drop Java 5 support or // when an ImageIO GIF writer plugin is bundled //            cmd = new SaveGIFAction2(Translator.localize("action.save-gif"));
WITHOUT_CLASSIFICATION	// If the diagram is empty, GEF won't write anything, leaving us with // an empty (and invalid) file.  Handle this case ourselves to prevent // this from happening.
WITHOUT_CLASSIFICATION	// Anything else is handled the normal way
WITHOUT_CLASSIFICATION	// Create an image which will do deferred rendering of the GEF // diagram on demand as data is pulled from it
WITHOUT_CLASSIFICATION	/** * Action to save a diagram as a GIF image in a supplied OutputStream. * * TODO: This requires Java 6 in its current state, so don't use. * * @author Tom Morris <tfmorris@gmail.com> */
WITHOUT_CLASSIFICATION	// NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that // saves a copy of the entire image in an internal buffer before // starting work, defeating the whole purpose of our incremental // rendering.
WITHOUT_CLASSIFICATION	// Java SE 6 has a native GIF writer, but it's not in Java 5.  One // is available in the JAI-ImageIO library, but we don't currently // bundle that and at 6+ MB it seems like a heavyweight solution, but // I don't have time to produce a stripped down version right now - tfm // https://jai-imageio.dev.java.net/
WITHOUT_CLASSIFICATION	//        LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
WITHOUT_CLASSIFICATION	// Anything else is handled the normal way
WITHOUT_CLASSIFICATION	// Create an image which will do deferred rendering of the GEF // diagram on demand as data is pulled from it
WITHOUT_CLASSIFICATION	/** * Action to save a diagram as a GIF image in a supplied OutputStream. * * TODO: This requires Java 6 in its current state, so don't use. * * @author Tom Morris <tfmorris@gmail.com> */
WITHOUT_CLASSIFICATION	// we actually are computing max x & max y, not width & height
WITHOUT_CLASSIFICATION	// Convert max x/y to width/height
WITHOUT_CLASSIFICATION	// Get a DOMImplementation
WITHOUT_CLASSIFICATION	// Create an instance of org.w3c.dom.Document
WITHOUT_CLASSIFICATION	// Create an instance of the SVG Generator
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//        LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
WITHOUT_CLASSIFICATION	// we actually are computing max x & max y, not width & height
WITHOUT_CLASSIFICATION	// Convert max x/y to width/height
WITHOUT_CLASSIFICATION	// Get a DOMImplementation
WITHOUT_CLASSIFICATION	// Create an instance of org.w3c.dom.Document
WITHOUT_CLASSIFICATION	// Create an instance of the SVG Generator
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	//"org.argouml.cognitive.critics",
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// handle multivalued tagged value
WITHOUT_CLASSIFICATION	// handle multivalued tagged value
WITHOUT_CLASSIFICATION	// Target has been deleted
WITHOUT_CLASSIFICATION	// If the row is past the end of our current collection, // return an empty string so they can add a new value
WITHOUT_CLASSIFICATION	// tagValue = true;
WITHOUT_CLASSIFICATION	// for debugging
WITHOUT_CLASSIFICATION	/*     * Return the ith element from a Collection.     *     * @param collection collection to get element from     *     * @param index index of the element to be returned     *     * @return the object     */
WITHOUT_CLASSIFICATION	// We really shouldn't add it until after it is set up, but we // need it to have an owner for the following method calls
WITHOUT_CLASSIFICATION	// Since we aren't sure of ordering, fire event for whole table
WITHOUT_CLASSIFICATION	// no way, we have to give up
WITHOUT_CLASSIFICATION	// Do nothing during the deprecation period, then it can be removed.
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// get the first editable extent (which is OK unless there is more // than one editable extent)
WITHOUT_CLASSIFICATION	/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */
WITHOUT_CLASSIFICATION	/* end class ActionImportFromSources */
WITHOUT_CLASSIFICATION	// Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	// this is never downlighted...
WITHOUT_CLASSIFICATION	// Only specified format are allowed.
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentMoved(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentResized(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// Set up the target and its model element variant.
WITHOUT_CLASSIFICATION	// Set the tooltip of the arrow to open combined tools:
WITHOUT_CLASSIFICATION	// If the target has changed notify the third party listener if it // exists and dispatch a new element event listener to // ourself. Otherwise dispatch a target reasserted to ourself.
WITHOUT_CLASSIFICATION	/* Set the minimum and preferred equal,         * so that the size is fixed for the labelledlayout.         */
WITHOUT_CLASSIFICATION	// This will add a new ModelElement event listener // after update is complete
WITHOUT_CLASSIFICATION	/* We presume that the container equals this PropPanel. */
WITHOUT_CLASSIFICATION	// Refresh the target for all our children which weren't getting // while not visible
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* This works - we do get an event - and now              * refresh the UI: */
WITHOUT_CLASSIFICATION	// to manage the case there are no label/component // pairs but just one component
WITHOUT_CLASSIFICATION	// If the component is a JLabel which has another // component assigned then position/size the label and // calculate the size of the registered component
WITHOUT_CLASSIFICATION	// Assumes the next child is the labelled component
WITHOUT_CLASSIFICATION	// Make sure the component width isn't any greater // than its maximum allowed width
WITHOUT_CLASSIFICATION	// If the child component is resizable then // we don't know it's actual size yet. // It will be calculated later as a // proportion of the available left over // space.  For now this is flagged as zero.
WITHOUT_CLASSIFICATION	// If a preferred height is not given or is // the same as the minimum height then fix the // height of this row.
WITHOUT_CLASSIFICATION	//Project p = ProjectManager.getManager().getCurrentProject(); //Collection elems = //ModelManagementHelper.getHelper() //    .getAllModelElementsOfKind(MClassifier.class);
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	// Allow listening to other elements: //                removeOtherModelEventListeners(listTarget);
WITHOUT_CLASSIFICATION	// setDoubleBuffered(true);
WITHOUT_CLASSIFICATION	/* TRY SOME MORE COMPLEX MOVING */
WITHOUT_CLASSIFICATION	// Implements backspace functionality
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// there is a selection
WITHOUT_CLASSIFICATION	/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */
WITHOUT_CLASSIFICATION	// Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	/* end class ActionCut */
WITHOUT_CLASSIFICATION	// Allow listening to other elements: //                addOtherModelEventListeners(listTarget);
WITHOUT_CLASSIFICATION	//      if there is a selection on the clipboard
WITHOUT_CLASSIFICATION	// get localised strings once only
WITHOUT_CLASSIFICATION	// setting the icon
WITHOUT_CLASSIFICATION	// setting the tooltip to type and name
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Update our model with our saved target
WITHOUT_CLASSIFICATION	// Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// in UML2, a td is a property of a stereotype in a profile
WITHOUT_CLASSIFICATION	// Only update our model if we're visible
WITHOUT_CLASSIFICATION	// Most likely cause of this is that someone deleted our // target with the event pump turned off so we didn't // get notification.  Nothing we can do about it now and // we are changing targets anyway, so just log it.
WITHOUT_CLASSIFICATION	/* This target is a statemachine,              * for which no diagram exists yet,              * so, let's use it. */
WITHOUT_CLASSIFICATION	/* end class TabTaggedValues */
WITHOUT_CLASSIFICATION	// setEnabled((Globals.clipBoard != null && // !Globals.clipBoard.isEmpty()) || // !isSystemClipBoardEmpty());
WITHOUT_CLASSIFICATION	/* end class ActionPaste */
WITHOUT_CLASSIFICATION	/* The target is a valid context. */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* Let's just build a Statemachine,              * and put it in a suitable namespace. */
WITHOUT_CLASSIFICATION	/* Follow well-formedness rule for a Class [2].                 * Determine the owning namespace for the statemachine: */
WITHOUT_CLASSIFICATION	// upperPanel.setBorder(BorderFactory.createEtchedBorder());
WITHOUT_CLASSIFICATION	// buttonBox.add(Box.createRigidArea(new Dimension(0, 20)));
WITHOUT_CLASSIFICATION	// String title = getUI().getDialogTitle(this);
WITHOUT_CLASSIFICATION	/**     * Test if the given namespace is a valid namespace to add the diagram to.     * TODO: This method was created to facilitate the merge     * of this class with ActionAddDiagram.     *     * @param ns the namespace to check     * @return Returns <code>true</code> if valid.     */
WITHOUT_CLASSIFICATION	// TODO: Since there may be multiple top level elements in // a project, this should be using the default Namespace (currently // undefined) or something similar
WITHOUT_CLASSIFICATION	// button action:
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Make sure it's parseable as an number
WITHOUT_CLASSIFICATION	// ignored - we just skipped inserting it in our document
WITHOUT_CLASSIFICATION	//            select.setText(Translator.localize("action.select"));
WITHOUT_CLASSIFICATION	//                select.add(ActionAddEventAsDeferrableEvent.SINGLETON);
WITHOUT_CLASSIFICATION	//        newMenu.setText(Translator.localize("action.new"));
WITHOUT_CLASSIFICATION	/*(MExtend)*/
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// repair action for possible NP after load
WITHOUT_CLASSIFICATION	/* (MClassifier) */
WITHOUT_CLASSIFICATION	/* TRY SOME MORE ERRORS */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/* (MModelElement) */
WITHOUT_CLASSIFICATION	//to be able to remove dep's later
WITHOUT_CLASSIFICATION	//to be able to remove dependencies later
WITHOUT_CLASSIFICATION	/**     * ADDONLY_COMMAND determines a changeability kind.     * TODO: Removed from UML 2.x.  Phase out of UI - tfm - 20070529     */
WITHOUT_CLASSIFICATION	// TODO: Removed from UML 2.x - phase out usage - tfm 20070530
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// because we're listening for stereotypes being added and removed // but we're really interested in their owned tag definitions, // the default implementation won't work for us
WITHOUT_CLASSIFICATION	/* end class ActionAddAttribute */
WITHOUT_CLASSIFICATION	// Ask to be notified of any changes to TagDefinitions so that we // can track new ones, name changes, etc
WITHOUT_CLASSIFICATION	// since UML2 it's easier: TDs only via stereotypes
WITHOUT_CLASSIFICATION	// Just mark for rebuild next time since we use lazy loading
WITHOUT_CLASSIFICATION	// A stereotype got applied or removed // Just mark for rebuild next time since we use lazy loading
WITHOUT_CLASSIFICATION	/*     * @see Namespace#pushNamespaceElement(NamespaceElement)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	// All strings collate before all UML elements
WITHOUT_CLASSIFICATION	// All strings collate before all UML elements
WITHOUT_CLASSIFICATION	/*     * Compare path of two elements in reverse order (inner to outer)     * using a primary strength text collator.      * This will collate e, E, �, � together, but not eliminate non-identical     * strings which collate in the same place.     *      * @return equivalent of list1.compareTo(list2)     */
WITHOUT_CLASSIFICATION	// and then by their enclosing path to fully distinguish them
WITHOUT_CLASSIFICATION	// Elements are collated first by name hoping for a quick solution
WITHOUT_CLASSIFICATION	// Keep track of first non-equal comparison to use in case the // case-insensitive comparisons all end up equal
WITHOUT_CLASSIFICATION	// Add the action to the component
WITHOUT_CLASSIFICATION	// It's illegal in UML to have multiple elements in a namespace with // the same name, but if it happens, keep them distinct so the user // has a chance of catching the error.  Pick an arbitrary, but stable, // collating order. // We don't call them equal because otherwise one will get eliminated // from the TreeSet where this comparator is used.
WITHOUT_CLASSIFICATION	// If the strings differed only in non-primary characteristics at // some point (case, accent, etc) pick an arbitrary, but stable,  // collating order.
WITHOUT_CLASSIFICATION	/* {transient=false, volatile=false} */
WITHOUT_CLASSIFICATION	// Argo customization
WITHOUT_CLASSIFICATION	// prohibit instantiation
WITHOUT_CLASSIFICATION	// KeyEvent.isActionKey() method
WITHOUT_CLASSIFICATION	// Apparently this object had no getItemUID
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// Apparently this object had no getUUID
WITHOUT_CLASSIFICATION	// Apparently it had a getItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently it had a getItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently it had a getItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently this object had no setItemUID
WITHOUT_CLASSIFICATION	// Apparently it had a setItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// Apparently it had a setItemUID, // but we're not allowed to call it
WITHOUT_CLASSIFICATION	// class preloading, so packages are there...
WITHOUT_CLASSIFICATION	// ...getPackage() can return null's, so we have to // cater for this:
WITHOUT_CLASSIFICATION	// make this thread interruptible, if called from SwingWorker
WITHOUT_CLASSIFICATION	/* Switch the value back off, so that we will                     * get notified again next time.                     */
WITHOUT_CLASSIFICATION	// Ignore any nested exceptions. We don't want infinite loop.
WITHOUT_CLASSIFICATION	// Didn't work.
WITHOUT_CLASSIFICATION	// Create a proxy object around this handler that can be reflectively added as an Apple ApplicationListener
WITHOUT_CLASSIFICATION	// Likely a NoSuchMethodException or an IllegalAccessException loading/invoking eawt.Application methods
WITHOUT_CLASSIFICATION	// All of the ApplicationListener methods are void; return null regardless of what happens
WITHOUT_CLASSIFICATION	// If the target method returns a boolean, use that as a hint
WITHOUT_CLASSIFICATION	// For eclipse setup
WITHOUT_CLASSIFICATION	// For ant setup
WITHOUT_CLASSIFICATION	// When running from maven
WITHOUT_CLASSIFICATION	// If we're setting a handler, enable the About menu item by calling // com.apple.eawt.Application reflectively
WITHOUT_CLASSIFICATION	// If we're setting a handler, enable the Preferences menu item by calling // com.apple.eawt.Application reflectively
WITHOUT_CLASSIFICATION	// Override OSXAdapter.callTarget to send information on the // file to be opened
WITHOUT_CLASSIFICATION	// Ignore if the directory does not exist. // This error will throw when running from the ant setup.
WITHOUT_CLASSIFICATION	// Ignore if the directory does not exist. // This error will throw when running from the Eclipse setup.
WITHOUT_CLASSIFICATION	// Ignore if the directory does not exist. // This error will throw when running from the Eclipse setup.
WITHOUT_CLASSIFICATION	//"org.argouml.notation.providers",//fails because sub-packages fail (?) //"org.argouml.notation.providers.java", //"org.argouml.notation.providers.uml", //"org.argouml.notation",//fails because sub-packages fail (?) //"org.argouml.notation.ui",
WITHOUT_CLASSIFICATION	// There was a comment saying that the below has no cycles, but // Classycle thinks there's a cycle here too, so I believe there // really is one - tfm 20070702 //            "org.argouml.uml.cognitive.critics",
WITHOUT_CLASSIFICATION	//TODO:{"org.argouml.ui", "org.argouml.cognitive.ui"},//fails due to subpackages //TODO:{"org.argouml.cognitive", "org.argouml.cognitive.critics"},
WITHOUT_CLASSIFICATION	//{"org.argouml.kernel", "org.argouml.uml.diagram.ui"},//why does this fail?
WITHOUT_CLASSIFICATION	// do nothing by design
WITHOUT_CLASSIFICATION	/* These 3 steps are only needed for          * the 2 cases indicated with a X below. */
WITHOUT_CLASSIFICATION	// Obey the contract ourselves!
WITHOUT_CLASSIFICATION	// register all of the event listener trackers
WITHOUT_CLASSIFICATION	// remove all of the listeners
WITHOUT_CLASSIFICATION	// fire all of the diagram events
WITHOUT_CLASSIFICATION	// fire all of the generator events
WITHOUT_CLASSIFICATION	// fire all of the help events
WITHOUT_CLASSIFICATION	// fire all of the notation events
WITHOUT_CLASSIFICATION	// verify all events were fired correctly
WITHOUT_CLASSIFICATION	// keep track of total events fired
WITHOUT_CLASSIFICATION	// keep track of which events fired
WITHOUT_CLASSIFICATION	// X // X
WITHOUT_CLASSIFICATION	// initialize the event listener trackers which // verify that all of the proper events were fired
WITHOUT_CLASSIFICATION	// Display events are fired on the Swing event thread. // We need to wait for them to be dispatched // NOTE: if more display events are added to this test, this one // needs to be last
WITHOUT_CLASSIFICATION	// Notation events are fired on the Swing event thread. // We assume that serializing on the final call is sufficient
WITHOUT_CLASSIFICATION	// counts each bit that has been fired
WITHOUT_CLASSIFICATION	/* ResolvedCritic(String, List) */
WITHOUT_CLASSIFICATION	/* ResolvedCritic(Critic, ListSet) */
WITHOUT_CLASSIFICATION	/* ResolvedCritic(Critic, ListSet, boolean) */
WITHOUT_CLASSIFICATION	/* testmc should now have an ItemUID so we should be able to         * create without adding a new ItemUID */
WITHOUT_CLASSIFICATION	// EnabledCM isRelevant checks if the critic is enabled // initialize this to true to verify isRelevant returns true
WITHOUT_CLASSIFICATION	// verify isRelevant returns true
WITHOUT_CLASSIFICATION	// set enabled to false and check the opposite condition
WITHOUT_CLASSIFICATION	// verify isRelevant not is false
WITHOUT_CLASSIFICATION	// NotSnoozedCM isRelevant checks if the critic is snoozed // snooze the critic to verify isRelevant returns false
WITHOUT_CLASSIFICATION	// unsnooze the critic to verify the critic is not relevant
WITHOUT_CLASSIFICATION	// verify isRelevant is true
WITHOUT_CLASSIFICATION	// CurDecisionCM isRelevant checks to see if the critic has // any decisions that have a priority > 0 and less than the // priority of the critic.  By default the critic has no // decisions so isRelevant should return false.
WITHOUT_CLASSIFICATION	// verify isRelevant is still false
WITHOUT_CLASSIFICATION	// isRelevant should now be true
WITHOUT_CLASSIFICATION	// isRelevant should still be true
WITHOUT_CLASSIFICATION	// initialize test data
WITHOUT_CLASSIFICATION	// initialize the ToDoList
WITHOUT_CLASSIFICATION	// add a ToDoItem
WITHOUT_CLASSIFICATION	// redundantly add item again which should be ignored
WITHOUT_CLASSIFICATION	// size should be 1 since addition of second item would have been ignored
WITHOUT_CLASSIFICATION	// retrieve item
WITHOUT_CLASSIFICATION	// remove item
WITHOUT_CLASSIFICATION	// size should be 0 since item was removed
WITHOUT_CLASSIFICATION	// initialize the GoalModel
WITHOUT_CLASSIFICATION	// check that the model was initialized with the unspecified goal
WITHOUT_CLASSIFICATION	// change priority of unspecified goal so we can verify it was updated
WITHOUT_CLASSIFICATION	// first verify that the set goal priority did not add an extra goal
WITHOUT_CLASSIFICATION	// check that the model correctly updates a goal's priority
WITHOUT_CLASSIFICATION	// test the removal of a goal
WITHOUT_CLASSIFICATION	// number of goals should now be 0
WITHOUT_CLASSIFICATION	// start desiring a goal which should add a goal and bump the size to 1
WITHOUT_CLASSIFICATION	// number of goals should now be 1
WITHOUT_CLASSIFICATION	// stop desiring the goal which should remove it from the model
WITHOUT_CLASSIFICATION	//        UMLSequenceDiagram seqdiag = new UMLSequenceDiagram();
WITHOUT_CLASSIFICATION	// initialize test data
WITHOUT_CLASSIFICATION	// This test calls ToDoList.addElement which requires the // Model.  We are able to get away with using the Mock model.
WITHOUT_CLASSIFICATION	//        checkAssignIDToObject(seqdiag, true, true);
WITHOUT_CLASSIFICATION	// FigEdgeNote has no UUID
WITHOUT_CLASSIFICATION	//checkAssignIDToObject(figassociationrole, true, true);
WITHOUT_CLASSIFICATION	//checkAssignIDToObject(fighistorystate, true, true);
WITHOUT_CLASSIFICATION	//checkAssignIDToObject(figstate, true, true);
WITHOUT_CLASSIFICATION	// initialize basic parameters that are // different from Decision.UNSPEC
WITHOUT_CLASSIFICATION	// initialize a decision object with parameters
WITHOUT_CLASSIFICATION	// initialize a decision object with parameters
WITHOUT_CLASSIFICATION	// verify parameters were initialized correctly by the constructor
WITHOUT_CLASSIFICATION	// set the priority to a different value
WITHOUT_CLASSIFICATION	// set the priority to a different value
WITHOUT_CLASSIFICATION	// verify the priority was correctly updated
WITHOUT_CLASSIFICATION	// verify the priority was correctly updated
WITHOUT_CLASSIFICATION	// set the name to a different value
WITHOUT_CLASSIFICATION	// set the name to a different value
WITHOUT_CLASSIFICATION	// verify the name property was correctly updated
WITHOUT_CLASSIFICATION	// following the update the priority should be // equivalent to Decision.UNSPEC
WITHOUT_CLASSIFICATION	// test that properties were correctly initialized by the constructor
WITHOUT_CLASSIFICATION	// initialize the Checklist
WITHOUT_CLASSIFICATION	// add some test data
WITHOUT_CLASSIFICATION	// add some test data
WITHOUT_CLASSIFICATION	// verify the size of the list
WITHOUT_CLASSIFICATION	// verify the size of the list
WITHOUT_CLASSIFICATION	// verify the items were correctly added
WITHOUT_CLASSIFICATION	// verify the items were correctly added
WITHOUT_CLASSIFICATION	// test that the category and description are correct
WITHOUT_CLASSIFICATION	// create a new list to test the addAll
WITHOUT_CLASSIFICATION	// create a new list to test the addAll
WITHOUT_CLASSIFICATION	// add all of the test items from the first list
WITHOUT_CLASSIFICATION	// add all of the test items from the first list
WITHOUT_CLASSIFICATION	// verify the size of the new list
WITHOUT_CLASSIFICATION	// verify the size of the new list
WITHOUT_CLASSIFICATION	// initialize the ChecklistStatus
WITHOUT_CLASSIFICATION	// Construct a CheckItem 
WITHOUT_CLASSIFICATION	// (1) test that the properties were correctly initialized
WITHOUT_CLASSIFICATION	// reset the values to something different
WITHOUT_CLASSIFICATION	// (2) Construct another CheckItem
WITHOUT_CLASSIFICATION	// test that the properties were correctly initialized
WITHOUT_CLASSIFICATION	// verify that the equivalence test works
WITHOUT_CLASSIFICATION	// initialize SnoozeOrder
WITHOUT_CLASSIFICATION	// snooze and verify its been enabled
WITHOUT_CLASSIFICATION	// unsnooze and verify its been disabled
WITHOUT_CLASSIFICATION	// maybe next test is going to change in future
WITHOUT_CLASSIFICATION	// test with a class in a package
WITHOUT_CLASSIFICATION	// Let's make it a bit more difficult by setting the target:
WITHOUT_CLASSIFICATION	// test with a class and an inner class
WITHOUT_CLASSIFICATION	// test with a class and an inner class
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	// try with Statediagram
WITHOUT_CLASSIFICATION	/* Put the statemachine in the namespace of the class: */
WITHOUT_CLASSIFICATION	// test with a package and a class and activity diagram
WITHOUT_CLASSIFICATION	// test with a package and a class and activity diagram
WITHOUT_CLASSIFICATION	// build the Activity Diagram
WITHOUT_CLASSIFICATION	// build the Activity Diagram
WITHOUT_CLASSIFICATION	/* In the next line, replacing makeEmptyProject         * by getCurrentProject fails the test,         * except when run in Eclipse.         * MVW: I have no idea why.*/
WITHOUT_CLASSIFICATION	/* We no longer send individual events,             *  so next code is obsolete: */
WITHOUT_CLASSIFICATION	/* We initialised Java Notation, so let's activate it: */
WITHOUT_CLASSIFICATION	/* Needed for initialisations: */
WITHOUT_CLASSIFICATION	// set MetaProfile as a default profile
WITHOUT_CLASSIFICATION	// create a dependency from the project's model to the MetaProfile
WITHOUT_CLASSIFICATION	// remove the MetaProfile from the project's profile configuration
WITHOUT_CLASSIFICATION	// save the project into a new file
WITHOUT_CLASSIFICATION	// setup a user defined profile
WITHOUT_CLASSIFICATION	/* TRY GUARD/ITERATOR SYNTAX */
WITHOUT_CLASSIFICATION	// create a new project and assert that it has the MetaProfile  // as part of the project's profile configuration
WITHOUT_CLASSIFICATION	// assert that the project's model element that had a dependency to  // the MetaProfile doesn't get inconsistent
WITHOUT_CLASSIFICATION	// reopen the project and assert that the MetaProfile isn't part of  // the profile configuration, including the fact that the stereotype  // <<Critic>> isn't found
WITHOUT_CLASSIFICATION	// assert that the project's model elements that had a dependency to  // the UML profile for Java are consistent
WITHOUT_CLASSIFICATION	// add it to the project configuration
WITHOUT_CLASSIFICATION	// add it to the project configuration
WITHOUT_CLASSIFICATION	// create a dependency between the project's model and the user defined  // profile
WITHOUT_CLASSIFICATION	// create a dependency between the project's model and the user defined  // profile
WITHOUT_CLASSIFICATION	// save the project
WITHOUT_CLASSIFICATION	// save the project
WITHOUT_CLASSIFICATION	// load the project
WITHOUT_CLASSIFICATION	// assert that the model element that depends on the profile is  // consistent
WITHOUT_CLASSIFICATION	// remove the user defined profile and the directory where it is
WITHOUT_CLASSIFICATION	// Success - expected exception
WITHOUT_CLASSIFICATION	// Clean up after ourselves by deleting profile model
WITHOUT_CLASSIFICATION	// Test both forms of addBaseClass
WITHOUT_CLASSIFICATION	// Test remaining form of removeBaseClass
WITHOUT_CLASSIFICATION	// by default the build already builds one default EP
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Flag to enable performance testing - off by default
WITHOUT_CLASSIFICATION	// initialize the model and profile subsystems to simulate a fresh  // ArgoUML session
WITHOUT_CLASSIFICATION	// 20 sec.
WITHOUT_CLASSIFICATION	// Add one child.
WITHOUT_CLASSIFICATION	// Performance testing parameters
WITHOUT_CLASSIFICATION	// Add grandchild.
WITHOUT_CLASSIFICATION	// Create a generalizable element with an element without children.
WITHOUT_CLASSIFICATION	// Check periodically to see if we've exceeded time limit
WITHOUT_CLASSIFICATION	// Add another child.
WITHOUT_CLASSIFICATION	// Tree is created depth first, so this should be at the bottom
WITHOUT_CLASSIFICATION	// Try changing namespace of element and make sure results track
WITHOUT_CLASSIFICATION	/*     * Populate our namespace hierarchy to the requested depth.  Total number     * of created elements is children^maxLevel, so be careful not to increase     * parameters too much.     */
WITHOUT_CLASSIFICATION	/* TRY SOME GUARD/ITERATOR ERRORS */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#TestCase(String)     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Make sure we have a root model for TagDefinitions to get put in.
WITHOUT_CLASSIFICATION	// create the tree of objects
WITHOUT_CLASSIFICATION	// copy package p1 into p2 package
WITHOUT_CLASSIFICATION	// change the structure in p1 package
WITHOUT_CLASSIFICATION	// verify the copied package
WITHOUT_CLASSIFICATION	// verify the copied class
WITHOUT_CLASSIFICATION	// verify the copied nested package and the copied interface
WITHOUT_CLASSIFICATION	// verify the copied attribute
WITHOUT_CLASSIFICATION	// See if we can copy a class right off
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	// See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	// See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	// See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	// See if we can copy a datatype right off
WITHOUT_CLASSIFICATION	// See if two copies look like copies of each other
WITHOUT_CLASSIFICATION	// See if two copies look like copies of each other
WITHOUT_CLASSIFICATION	// See if we can copy an interface right off
WITHOUT_CLASSIFICATION	/*     * Create a new tagged value with the given type and value     * and add it to a ModelElement.     */
WITHOUT_CLASSIFICATION	/*     * Update an existing tagged value on a model element.     */
WITHOUT_CLASSIFICATION	// See if we can copy a package right off
WITHOUT_CLASSIFICATION	// See if we can copy a stereotype right off
WITHOUT_CLASSIFICATION	// Expected
WITHOUT_CLASSIFICATION	//	"Permission",
WITHOUT_CLASSIFICATION	// Check to see if association still exists
WITHOUT_CLASSIFICATION	// Expected IllegalArgumentException seen
WITHOUT_CLASSIFICATION	// A parameterized class can only be the client of a single binding
WITHOUT_CLASSIFICATION	// exception expected - test success
WITHOUT_CLASSIFICATION	// expected - test success
WITHOUT_CLASSIFICATION	// expected - test success
WITHOUT_CLASSIFICATION	// Create a new arg list with a different set of args (but same types)
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// not static
WITHOUT_CLASSIFICATION	// Test passed
WITHOUT_CLASSIFICATION	// Test passed
WITHOUT_CLASSIFICATION	// NOT UML1.4
WITHOUT_CLASSIFICATION	// non existent in UML1
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// not in UML1.4
WITHOUT_CLASSIFICATION	// This is not a well formed model in a strict sense. // See the multiplicity in UML 1.3 Figure 2-5.
WITHOUT_CLASSIFICATION	// returns List
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Deleting the stereotype should cascade to the TagDefinition, // then the TaggedValue
WITHOUT_CLASSIFICATION	// TODO: constraints // TODO: required tags
WITHOUT_CLASSIFICATION	// Enumerate declaring class
WITHOUT_CLASSIFICATION	// NOTE: Although it's not shown in the UML 1.4 spec, a TemplateArgument // appears to be a datavalue (like MultiplicityRange) and can not be // reused in multiple instances.  The UML diagrams don't show it as a // composition, but it effectively is.
WITHOUT_CLASSIFICATION	// Must be called after setImplementation.
WITHOUT_CLASSIFICATION	// Enumerate fields
WITHOUT_CLASSIFICATION	// Enumerate constructors
WITHOUT_CLASSIFICATION	// Indicate that the test was validated
WITHOUT_CLASSIFICATION	// TODO: Look up class in truth table
WITHOUT_CLASSIFICATION	// Check superclass. //Make sure this class does not extend or reference non-ArgoUML classes
WITHOUT_CLASSIFICATION	// Enumerate methods // Enumerate method arguments
WITHOUT_CLASSIFICATION	// Not currently present as token in Model.getFacade(). // NIF: runTruthTest(Model.getFacade().isAElement(o), //                   Model.getFacade().ELEMENT); // NIF: runTruthTest(Model.getFacade().isAExpression(o), //           Model.getFacade().EXPRESSION); // NIF: runTruthTest(Model.getFacade().isAExtensionPoint(o), //           Model.getFacade().EXTENSION_POINT); // NIF: runTruthTest(Model.getFacade().isAFeature(o), //                   Model.getFacade().FEATURE);
WITHOUT_CLASSIFICATION	// NIF: runTruthTest(Model.getFacade().isAInteraction(o), //           Model.getFacade().INTERACTION);
WITHOUT_CLASSIFICATION	// NIF: unTruthTest(Model.getFacade().isAMethod(o), //	Model.getMetaTypes().getMethod());
WITHOUT_CLASSIFICATION	//	runTruthTest(Model.getFacade().isARelationship(o), //	        Model.getMetaTypes().getRelationship());
WITHOUT_CLASSIFICATION	// NIF: runTruthTest(Model.getFacade().isAStructuralFeature(o), //          Model.getMetaTypes().getStructuralFeature()); // NIF: runTruthTest(Model.getFacade().isATaggedValue(o), //          Model.getMetaTypes().getTaggedValue());
WITHOUT_CLASSIFICATION	// Call methods that exists for all objects and that always return // something meaningful
WITHOUT_CLASSIFICATION	// Call methods that exists for all objects and that always return // something meaningful
WITHOUT_CLASSIFICATION	// Multiplicity, MultiplicityRange, and all Expression subtypes // don't have 0-argument create methods, so we special case them.
WITHOUT_CLASSIFICATION	// Find the create method in the offical API
WITHOUT_CLASSIFICATION	// Now get the factory implementation method to be invoked
WITHOUT_CLASSIFICATION	// Here it is another object sent to the test.
WITHOUT_CLASSIFICATION	// Here it is another object sent to the test.
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// Make sure we start off clean
WITHOUT_CLASSIFICATION	// Delete the model and make sure everything inside goes with it
WITHOUT_CLASSIFICATION	// The association should have same namespace as from class
WITHOUT_CLASSIFICATION	// Only one end should be navigable
WITHOUT_CLASSIFICATION	//        "UseCaseInstance",  // Gone in UML 2.x & unused by ArgoUML
WITHOUT_CLASSIFICATION	// Set namespace so buildAssocationRole works
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Correct Exception was thrown.
WITHOUT_CLASSIFICATION	// Build an activity graph with a single action state // the way the GUI would
WITHOUT_CLASSIFICATION	// This is a private method in Model.
WITHOUT_CLASSIFICATION	// Handling methods that doesn't return
WITHOUT_CLASSIFICATION	// Handling the isInitiated method
WITHOUT_CLASSIFICATION	// Handling the initialise method
WITHOUT_CLASSIFICATION	// Handle methods which return opaque objects
WITHOUT_CLASSIFICATION	// one of the expected errors, just ignore
WITHOUT_CLASSIFICATION	// Could not find model.
WITHOUT_CLASSIFICATION	// Could not find model.
WITHOUT_CLASSIFICATION	// Handle UML 1.4 metamodel which is a MOF 1.3 model
WITHOUT_CLASSIFICATION	/*     * Get a node's name along with the name of its parent (which we'll use to     * find the factory to create it with.     */
WITHOUT_CLASSIFICATION	// UML 1.4
WITHOUT_CLASSIFICATION	// UML 2.x
WITHOUT_CLASSIFICATION	// XMI 2.1
WITHOUT_CLASSIFICATION	// XMI 1.1
WITHOUT_CLASSIFICATION	// Remap specific classes
WITHOUT_CLASSIFICATION	// Only remap package if we didn't remap specific class
WITHOUT_CLASSIFICATION	/*         * The following UML 1.4 elements have been removed from UML 2.x, so we         * don't bother testing them.         */
WITHOUT_CLASSIFICATION	/*         * A few of our factories are slightly different than as declared in the         * UML 1.4 metamodel, so we remap them here.  <metamodel, argouml>         */
WITHOUT_CLASSIFICATION	// Packages to be remapped
WITHOUT_CLASSIFICATION	/*         * For those things which we've already migrated to UML 2.x syntax         * we need to map them back to their UML 1.4 equivalents during the         * migration period.         */
WITHOUT_CLASSIFICATION	// Subsystem has been removed from UML 2.x
WITHOUT_CLASSIFICATION	/* TRY THE ACTIONS */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// abstract
WITHOUT_CLASSIFICATION	// This is the XMI version used to encode the metamodel.  We could // parse deeper to pull out the actual UML version.  The UML 1.4 // version is at XMI/XMI.header/XMI.model[@xmi.version].  The UML 2.1.1 // metamodel doesn't actually seem to contain its version.
WITHOUT_CLASSIFICATION	// Because UML 1.4 & 2.1 metamodels are organized differently we need // to traverse the hierarchy looking for our owning Package.
WITHOUT_CLASSIFICATION	// Specific classes to be remapped //      remap.put("", "");
WITHOUT_CLASSIFICATION	// Go the other way to lookup an element by path 
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	// ActivityGraphs
WITHOUT_CLASSIFICATION	// Instance (in UML 1.4) and Classifier are abstract and not tested
WITHOUT_CLASSIFICATION	/*         *  Extend, Include, UseCaseInstance & ExtensionPoint not implemented         */
WITHOUT_CLASSIFICATION	//        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getExtend())); //        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getInclude())); //        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getUseCaseInstance())); //        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getExtensionPoint())); // ...
WITHOUT_CLASSIFICATION	/*         * State is concrete in UML 1.3, but becomes abstract in UML 1.4, so we         * never allow it to be created (and don't test creation)         */
WITHOUT_CLASSIFICATION	//        new InitProfileSubsystem().init();   
WITHOUT_CLASSIFICATION	// This should work now that they both have names
WITHOUT_CLASSIFICATION	/*                     * this call could easily fall if there is e.g. no public                     * default constructor. If it fails tweak the if/else tree                     * above to accommodate the parameter or check if we need to                     * test the particular method at all.                     */
WITHOUT_CLASSIFICATION	// If method not supported ignore failure
WITHOUT_CLASSIFICATION	// Fine!
WITHOUT_CLASSIFICATION	// Fine!
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	//        assertNotNull(Model.getUmlFactory().buildNode( //                Model.getMetaTypes().getState()));
WITHOUT_CLASSIFICATION	// CommonBehaviorFactory // DataTypesFactory // ExtensionMechanismsFactory // ModelManagementFactory
WITHOUT_CLASSIFICATION	// set up all parameters. Some methods are invoked with // primitives or collections, so we need to create them // accordingly
WITHOUT_CLASSIFICATION	// The following should fail
WITHOUT_CLASSIFICATION	// and leave things unchanged
WITHOUT_CLASSIFICATION	// This one should work except Java is not registered by default //        assertTrue(settings.setNotationLanguage("Java")); //        assertEquals("Java", settings.getNotationLanguage());
WITHOUT_CLASSIFICATION	//        NotationProviderFactory2.getInstance().addNotationProvider(1234,  //                name, MyNP.class); //        NotationProvider notationProvider = //            NotationProviderFactory2.getInstance().getNotationProvider( //                    1234, new Object()); //        assertTrue("Test notation provider for 1234 not found",  //                notationProvider != null);
WITHOUT_CLASSIFICATION	/*         * Constructor.         */
WITHOUT_CLASSIFICATION	/*         * Constructor.         *           * @param me an Object         */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	// reuse signal event:
WITHOUT_CLASSIFICATION	// reuse call event:
WITHOUT_CLASSIFICATION	// reuse time event:
WITHOUT_CLASSIFICATION	// reuse change event:
WITHOUT_CLASSIFICATION	// try creating a string from the generated modelelements:
WITHOUT_CLASSIFICATION	//try creating a TimeEvent
WITHOUT_CLASSIFICATION	//try changing the triggertype to ChangeEvent
WITHOUT_CLASSIFICATION	// nested class:
WITHOUT_CLASSIFICATION	// nested class:
WITHOUT_CLASSIFICATION	/* No need to check any further if we fail the 1st part. */
WITHOUT_CLASSIFICATION	/* START TESTING STUFF */
WITHOUT_CLASSIFICATION	/* TRY MOVING IN A SIMPLE MANER */
WITHOUT_CLASSIFICATION	/* TRY SOME ERRORS */
WITHOUT_CLASSIFICATION	// For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	// If we can't find a model, return the outermost // containing model element
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	// This swaps the direction of m3:
WITHOUT_CLASSIFICATION	// This swaps the direction of m3 back: // the colon is obliged, but the / not and the 2nd dot also not
WITHOUT_CLASSIFICATION	// Notation allows to add or modify things, not remove. // Hence, this does nothing:
WITHOUT_CLASSIFICATION	// The expected exception is thrown.
WITHOUT_CLASSIFICATION	/* Both diagram types shall show sequence numbers when requested: */
WITHOUT_CLASSIFICATION	/* But the collaboration diagram refuses to leave them out: */
WITHOUT_CLASSIFICATION	/* If the message has a name, but no action, then show the name: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation,         * then show the operation: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation and a script,         * then show the script: */
WITHOUT_CLASSIFICATION	/* TODO: Should there really be () here? */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation and an empty script,         * then show the operation: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation          * and an expression with no script,         * then show the operation: */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation          * and a named script with parameters,         * then show the script: */
WITHOUT_CLASSIFICATION	/* TODO: Why is there a space before the ( here,          * and not in case of the operation name? */
WITHOUT_CLASSIFICATION	/* The action still has the argument from above. */
WITHOUT_CLASSIFICATION	/* If a message has a name and a named operation          * and a script with parameters but without name,         * then show the operation name: */
WITHOUT_CLASSIFICATION	//this is not a very useful transition
WITHOUT_CLASSIFICATION	/* One of everything */
WITHOUT_CLASSIFICATION	/* Upper / Lower case */
WITHOUT_CLASSIFICATION	/* Mixed case */
WITHOUT_CLASSIFICATION	/* A complex internal transition */
WITHOUT_CLASSIFICATION	/* These are NOT entry/exit/do activities! */
WITHOUT_CLASSIFICATION	/* Long list of internals */
WITHOUT_CLASSIFICATION	// or should the 1 be 0 ?
WITHOUT_CLASSIFICATION	// deleting it all
WITHOUT_CLASSIFICATION	// we want the b: Foo attribute, that is the second in the list
WITHOUT_CLASSIFICATION	/* If there is no script, then the language should not be maintained. */
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// ignored
WITHOUT_CLASSIFICATION	// Success - expected exception
WITHOUT_CLASSIFICATION	/* Everything fine... */
WITHOUT_CLASSIFICATION	// Create file
WITHOUT_CLASSIFICATION	// This is the normal case.
WITHOUT_CLASSIFICATION	// Load a project which contains links to it
WITHOUT_CLASSIFICATION	// test project readable files
WITHOUT_CLASSIFICATION	// Standard UML 1.4 profile
WITHOUT_CLASSIFICATION	// Create a default profile and record its contents
WITHOUT_CLASSIFICATION	// Write the profile out to a temp file
WITHOUT_CLASSIFICATION	// Read it back in to a new empty project
WITHOUT_CLASSIFICATION	// Clean up our two models and the extent that we read profile in to
WITHOUT_CLASSIFICATION	// setting up the dependent profile creation
WITHOUT_CLASSIFICATION	// actual call that executes everything
WITHOUT_CLASSIFICATION	// verifications
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// TODO: the following cleans up left overs from previous tests, but, // preferably we shouldn't have to do this...
WITHOUT_CLASSIFICATION	// create profile model
WITHOUT_CLASSIFICATION	// create profile model
WITHOUT_CLASSIFICATION	// save the profile into a xmi file
WITHOUT_CLASSIFICATION	// save the profile into a xmi file
WITHOUT_CLASSIFICATION	// Called during teardown
WITHOUT_CLASSIFICATION	// Called during teardown
WITHOUT_CLASSIFICATION	// remove leftovers from other tests
WITHOUT_CLASSIFICATION	// TODO: User defined profile support untested currently //        + "\t\t<userDefined>\n" //        + "\t\t\t<filename>\n" //        + "foo.profile\n" //        + "</filename>\n" //        + "\t\t\t<model>\n" //        + "foo.profile.package\n" //        + "\t\t\t</model>\n" //        + "\t\t</userDefined>\n"
WITHOUT_CLASSIFICATION	// There seems to be cases where we don't erase the profile. // Let's make sure it is deleted.        
WITHOUT_CLASSIFICATION	// [euluis] Using Windows style initial path, don't know if this fails  // in *nixes.
WITHOUT_CLASSIFICATION	// ensure that model subsystem implementation doesn't remember the // profiles by changing their names and directories
WITHOUT_CLASSIFICATION	// but, lookout, it doesn't work both ways
WITHOUT_CLASSIFICATION	//        assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi, //                "x.oclIsKindOf(Classifier)"), true);               
WITHOUT_CLASSIFICATION	// on a headless system (without display) this will crash
WITHOUT_CLASSIFICATION	// private JPanel propertyPane;
WITHOUT_CLASSIFICATION	// contains instances of each modelelement // used for testing so that we only use each modelelement // once
WITHOUT_CLASSIFICATION	// propertyPane = /*TabProps */
WITHOUT_CLASSIFICATION	//            theDetailsPane.getNamedTab(Translator.localize("tab.properties"));
WITHOUT_CLASSIFICATION	// currently this is in this try block as it does not work // _propertyPanel always has size 0,0
WITHOUT_CLASSIFICATION	// ProjectBrowser exposes functionality, not components. //	assertNotNull(pb.getTabProps()); //	assertNotNull(pb.getStatusBar());
WITHOUT_CLASSIFICATION	// Make sure this test happens on the AWT event thread
WITHOUT_CLASSIFICATION	//        JPanel docPane = pane.getTab(TabDocumentation.class);
WITHOUT_CLASSIFICATION	// The target list is empty, re-emptying it again  // should not generate any events:
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// new target is of type object, refresh should not be called
WITHOUT_CLASSIFICATION	/*         * commented out next piece to remove failure of testcase. The testcase         * is probably correct but the implementation of DetailsPane is not        pane.getTabs().setSelectedComponent(docPane);        pane.targetSet(e);        assertEquals(docPane, pane.getTabs().getSelectedComponent());        */
WITHOUT_CLASSIFICATION	// new target is a fig, refresh should be called
WITHOUT_CLASSIFICATION	// Setting one target should generate one event:
WITHOUT_CLASSIFICATION	// new target is of type UMLClassDiagram, refresh should not be called
WITHOUT_CLASSIFICATION	// TODO: We could check that the contents of the files differ.
WITHOUT_CLASSIFICATION	// new target is a modelelement, refresh should not be called
WITHOUT_CLASSIFICATION	//testing with subset of targets
WITHOUT_CLASSIFICATION	// set same target again should not generate new events:
WITHOUT_CLASSIFICATION	//TabProps gets selected! //So, 2nd time right
WITHOUT_CLASSIFICATION	// adding same targets list again should not generate new events:
WITHOUT_CLASSIFICATION	// adding same target again should not generate new events:
WITHOUT_CLASSIFICATION	//reverse order
WITHOUT_CLASSIFICATION	// now remove one target by setting subset:
WITHOUT_CLASSIFICATION	// TODO: the following fails due to the XMI writing saving all top level // model elements and because even if there was no empty project, by // creating a class, the undo mechanism in the project manager will // force the creation of an empty project. //        assertEquals(1, profileModels.size());
WITHOUT_CLASSIFICATION	// NOTE: we have to do this due to leftovers from other tests // being causing strange errors when running in Eclipse.
WITHOUT_CLASSIFICATION	// all tests should consider the threshold as inclusive value
WITHOUT_CLASSIFICATION	// this test is a bit stupid, but nevertheless...
WITHOUT_CLASSIFICATION	// {A, A} are offenders
WITHOUT_CLASSIFICATION	// everything ok
WITHOUT_CLASSIFICATION	// everything ok
WITHOUT_CLASSIFICATION	// same name, same participants, two offenders
WITHOUT_CLASSIFICATION	// same name, different classes, everything ok
WITHOUT_CLASSIFICATION	// same name, different classes, everything ok
WITHOUT_CLASSIFICATION	// same name, same participants, two offenders
WITHOUT_CLASSIFICATION	// {A,A,B,B} are offenders
WITHOUT_CLASSIFICATION	// {} no offenders
WITHOUT_CLASSIFICATION	// simply create 3 usecases and an actor in a package with individual names
WITHOUT_CLASSIFICATION	// generalizations are not required to have unique names within a // namespace
WITHOUT_CLASSIFICATION	// All use cases and actors require associations // hence all predicates evalulate to true
WITHOUT_CLASSIFICATION	// build association // build association between actor and top use case.
WITHOUT_CLASSIFICATION	// test for return parameters. they can ALSO fail!
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	// Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	// the graph should stay the same.
WITHOUT_CLASSIFICATION	// build extend // these parameters seem to be in correct order // add an extend. We do not need an assoc on the extending use case
WITHOUT_CLASSIFICATION	// build include // it seems that the parameters for build include are just the other way // round // add an include: we do not need to have associtions on one
WITHOUT_CLASSIFICATION	// setup
WITHOUT_CLASSIFICATION	// Handle the simple cases // Anything very exotic will fail, but that will be our clue // that the test needs to be extended
WITHOUT_CLASSIFICATION	// real test
WITHOUT_CLASSIFICATION	// Some arbitrary bounds and settings - unused in test
WITHOUT_CLASSIFICATION	// Make sure everything created gets deleted
WITHOUT_CLASSIFICATION	/*         * This needs to be a concrete metatype, so we can't use         * the general, but abstract, Classifier.  Replace with its         * concrete subtypes.         */
WITHOUT_CLASSIFICATION	/*         * This needs to be a concrete metatype, so we can't use         * the general, but abstract, Classifier.  Replace with its         * concrete subtypes.         */
WITHOUT_CLASSIFICATION	// setup the Project due to its use in SourcePathTableModel ctor
WITHOUT_CLASSIFICATION	// create a class model element
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// save the project
WITHOUT_CLASSIFICATION	// Tests used to be coded to assume immediate event delivery. // They've been modified to use flush() where needed. - tfm //oldEventPolicy = MFactoryImpl.getEventPolicy(); //MFactoryImpl.setEventPolicy(MFactoryImpl.EVENT_POLICY_IMMEDIATE);
WITHOUT_CLASSIFICATION	// Return a package to use as the Namespace.
WITHOUT_CLASSIFICATION	// restore original event policy - not supported by MDR - tfm //MFactoryImpl.setEventPolicy(oldEventPolicy);
WITHOUT_CLASSIFICATION	//        assertNotNull(actionSupplier.getValue(Action.SMALL_ICON));
WITHOUT_CLASSIFICATION	//cont.setTarget(elem);
WITHOUT_CLASSIFICATION	// Testing with more than one, since it failed with a manual test I  // made.
WITHOUT_CLASSIFICATION	//        assertNotNull(actionClient.getValue(Action.SMALL_ICON));
WITHOUT_CLASSIFICATION	// The following will bring up a dialog box, so can't be run headless //        actionSupplier.actionPerformed(new ActionEvent(this, 0, "foo"));
WITHOUT_CLASSIFICATION	// The following will bring up a dialog box, so can't be run headless //        actionClient.actionPerformed(new ActionEvent(this, 0, "foo"));
WITHOUT_CLASSIFICATION	// create a new empty project
WITHOUT_CLASSIFICATION	// Inconclusive
WITHOUT_CLASSIFICATION	// Inconclusive
WITHOUT_CLASSIFICATION	// setup a user defined profile which isn't loaded by the model // subsystem and contains a stereotype and this contains a // tag definition
WITHOUT_CLASSIFICATION	// add the profile stereotype to the class
WITHOUT_CLASSIFICATION	// add the profile to the project configuration
WITHOUT_CLASSIFICATION	// This works when running the test from within Eclipse. // Apparently Eclipse runs the tests using a class-loader that // has the tests Folder among the URL:s.
WITHOUT_CLASSIFICATION	// create a class in the project model
WITHOUT_CLASSIFICATION	// check that the tag definition is returned by // {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	// If no project was entered on the command line, // try to reload the most recent project if that option is true
WITHOUT_CLASSIFICATION	// Set the screen layout to what the user left it before, or // to reasonable defaults.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	// case 4 // erase it
WITHOUT_CLASSIFICATION	//////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeModel implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // ToDoListListener implementation
WITHOUT_CLASSIFICATION	// case 1 // after(...)
WITHOUT_CLASSIFICATION	// initialize the model and profile subsystems to simulate a fresh  // ArgoUML session
WITHOUT_CLASSIFICATION	// We have the path provided from the build script.
WITHOUT_CLASSIFICATION	// Check the localized parts.
WITHOUT_CLASSIFICATION	// Wait for all Model subsystem events to be delivered
WITHOUT_CLASSIFICATION	// Wait for all AWT events to be dispatched and processed
WITHOUT_CLASSIFICATION	// Check here if there are no incoming call actions // if not then create an activation at the top of the lifeline
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	//      calcBounds();
WITHOUT_CLASSIFICATION	// For classifiers
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// This is null as until // the first stereotype declaration is seen. // After that it is non-null.
WITHOUT_CLASSIFICATION	//newOp.setOwnerScope(op.getOwnerScope()); // //not needed in case of operation
WITHOUT_CLASSIFICATION	// includes the "/" // the "seq_expr" from the header javadoc // the ":" is not included in "number" - it is always present
WITHOUT_CLASSIFICATION	//                Model.getExtensionMechanismsFactory().buildTaggedValue( //                        tagName, new String[] {"true"}, Model.getFacade().getRoot(umlObject));
WITHOUT_CLASSIFICATION	// MClassifiers // cannot be Bag
WITHOUT_CLASSIFICATION	// If the model repository doesn't manage a DI model // then we must generate our Figs by inspecting PGML
WITHOUT_CLASSIFICATION	// Read xsltStream into a temporary file // Get url for temp file. // openStream from url and wrap in StreamSource
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // instance variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // main methods
WITHOUT_CLASSIFICATION	// if the object does not have a name, // than no problem
WITHOUT_CLASSIFICATION	// tree // value // isSelected	(dont want a colored background) // isExpanded // isLeaf // row	(not important for rendering) // hasFocus (dont want a focus rectangle)
WITHOUT_CLASSIFICATION	// If we don't have it, find the trigger. If this fails it will keep // its default value of null
WITHOUT_CLASSIFICATION	//@Override //public final void setHeadline(String s) { //setupHeadAndDesc(); //}
WITHOUT_CLASSIFICATION	// We need to find the stereotype with the name // "create" and the base class BehavioralFeature in // the model. If there is none then we create one and // put it there.
WITHOUT_CLASSIFICATION	// first element is e.g. the class, but we need to have its namespace // to recompute the offenders.
WITHOUT_CLASSIFICATION	//- RedrawManager.unlock(); //- _redrawer.repairDamage();
WITHOUT_CLASSIFICATION	// if this composite state is not attached to a statemachine // it is not the toplevel composite state.
WITHOUT_CLASSIFICATION	// Get the assocations and connections. No problem (there is a separate // critic) if this is a binary association or is an association role.
WITHOUT_CLASSIFICATION	// If this was an association then there will be relevant // information to fetch out of the mode arguments.  If it // not an association then these will be passed forward // harmlessly as null.
WITHOUT_CLASSIFICATION	// find selected rows and make a list of the model elements // that are selected
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // TreeCellRenderer implementation
WITHOUT_CLASSIFICATION	// Build namespace hierarchy like this: //   g     a //         /\ //        b  c //           /\ //          d  e f
WITHOUT_CLASSIFICATION	//    private Property	prpTodo; //    private Property	prpProperties; //    private Property	prpDocumentation; //    private Property	prpStyle; //    private Property	prpSource; //    private Property	prpConstraints; //    private Property	prpTaggedValues;
WITHOUT_CLASSIFICATION	// always fire changes in the case something has changed in the // composition of the taggedValues collection.
WITHOUT_CLASSIFICATION	// Build up an array list of the heights of each label/component pair. // Heights of zero indicate a proportional height.
WITHOUT_CLASSIFICATION	//            CmdPaste cmd = new CmdPaste(); //            cmd.doIt();
WITHOUT_CLASSIFICATION	// stereotypes applied to the target mostly control which TDs // (but see below for other listeners too)
WITHOUT_CLASSIFICATION	// TODO: Add referenceValue for tagged values  // which have a non-primitive type
WITHOUT_CLASSIFICATION	// add a decision but set the critic priority to 0 so isRelevant // should still be false
WITHOUT_CLASSIFICATION	//TODO: We should also test that the object //have been removed from their namespace. //Collection c = Model.getFacade().getOwnedElements(p.getRoot());
WITHOUT_CLASSIFICATION	// Because the notation events get dispatched on the Swing // event thread, we need to use invokeAndWait to make sure that we // don't return until they've been delivered
WITHOUT_CLASSIFICATION	// Parent is Element, but it has no attributes or associations to check // checkElementCopy(e1, e2);
WITHOUT_CLASSIFICATION	// Extra careful now, not to keep any references to the // second argument.
WITHOUT_CLASSIFICATION	// Auto-create a return message for a call message
WITHOUT_CLASSIFICATION	// get the source of the return message
WITHOUT_CLASSIFICATION	// get the dest of the return message
WITHOUT_CLASSIFICATION	//            GridBagConstraints gridBagConstraints3 = new GridBagConstraints(); //            gridBagConstraints3.gridx = 2; //            gridBagConstraints3.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints3.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints3.gridy = 3; //            GridBagConstraints gridBagConstraints2 = new GridBagConstraints(); //            gridBagConstraints2.gridx = 0; //            gridBagConstraints2.anchor = GridBagConstraints.NORTHWEST; //            gridBagConstraints2.insets = new Insets(5, 5, 0, 0); //            gridBagConstraints2.gridy = 3;
WITHOUT_CLASSIFICATION	//            Fig spf = null; //            Fig dpf = null; //            FigNode sfn = null; //            FigNode dfn = null;
WITHOUT_CLASSIFICATION	// If the event originated from the window w/glass pane, consume  // the event
WITHOUT_CLASSIFICATION	// Add GUI-internal stuff. // GUI-internal stuff is panes, tabs, menu items that are // part of the GUI subsystem i.e. a class in the // org.argouml.ui-package. // Things that are not part of the GUI, like everything that // has any knowledge about UML, Diagrams, Code Generation,  // Reverse Engineering, creates and registers itself // when that subsystem or module is loaded.
WITHOUT_CLASSIFICATION	// The workarea is all the visible space except the menu, // toolbar and status bar.  Workarea is laid out as a // BorderSplitPane where the various components that make up // the argo application can be positioned.
WITHOUT_CLASSIFICATION	// iterate through the tabbed panels to determine whether they // should be enabled.
WITHOUT_CLASSIFICATION	// Always select properties panel if defaultToProperties is true, // and if properties panel is appropriate for selected perspective
WITHOUT_CLASSIFICATION	//        tabs.addTab(Translator.localize("dialog.find.tab.name-and-location"), //                nameLocTab);
WITHOUT_CLASSIFICATION	//_tableModel.setTarget(_target); //_table.setModel(_tableModel);
WITHOUT_CLASSIFICATION	// if the current shortcut has not been set, then the actual // shortcut value is the default one
WITHOUT_CLASSIFICATION	// if the user cancelled the operation, // we don't have to save anything
WITHOUT_CLASSIFICATION	// create the return message modelelement with the interaction // and the collaboration
WITHOUT_CLASSIFICATION	// Generate and register the OSXAdapter, passing the methods // we wish to use as delegates for various // com.apple.eawt.ApplicationListener methods
WITHOUT_CLASSIFICATION	// TODO: no Links in UML 2
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handling
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Fig accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	// the UML object // wrong end of the edge
WITHOUT_CLASSIFICATION	// We are going to add the ones still valid & new ones // in the right sequence:
WITHOUT_CLASSIFICATION	// This is perfectly normal and happens among other things // within the call to setDiagram (below).
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // events
WITHOUT_CLASSIFICATION	// if the new edge implements the MouseListener // interface it has to receive the mouseReleased() event
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // user feedback
WITHOUT_CLASSIFICATION	// needs to be updated for changes in Notation subsystem - tfm //            String nameStr = Notation.generate(this, getOwner()).trim(); //            getNameFig().setText(nameStr);
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphFactory implementation
WITHOUT_CLASSIFICATION	// adapted from SelectionWButtons from line 280 // calls a helper method to avoid this edge disappearing // if the new source and dest are the same node.
WITHOUT_CLASSIFICATION	// Give up if we are already on the graph. This is a bit inconistent // with canAddNode above.
WITHOUT_CLASSIFICATION	// Link the new extend relationship in to the ends. Remember we // draw from the extension use case to the base use case.
WITHOUT_CLASSIFICATION	// TODO: This is using the default platform character encoding // specifying an encoding will produce more predictable results
WITHOUT_CLASSIFICATION	// Check against "" is needed for backward // compatibility.  Don't remove without // checking subclasses and warning downstream // developers - tfm - 20081211
WITHOUT_CLASSIFICATION	// next line does give user.home back but this is not // compliant with how the project.uri works and therefore // open and save project as give different starting // directories.  String directory = // Globals.getLastDirectory();
WITHOUT_CLASSIFICATION	// Correct the activator value
WITHOUT_CLASSIFICATION	// We know this is a return action now. It must be pointing the // opposite way to the activator.
WITHOUT_CLASSIFICATION	// Java SE 6 has a native GIF writer, but it's not in Java 5.  One // is available in the JAI-ImageIO library, but we don't currently // bundle that and at 6+ MB it seems like a heavyweight solution, but // I don't have time to produce a stripped down version right now - tfm // https://jai-imageio.dev.java.net/
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	// Although we've historically written out the DOCTYPE, the DTD doesn't // actually exist and this line will get stripped by the .uml file // persister //        + "<!DOCTYPE profile SYSTEM \"profile.dtd\" >\n"
WITHOUT_CLASSIFICATION	// check that the tag definition is returned by // {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
WITHOUT_CLASSIFICATION	// TODO real numbers not yet supported //assertEquals(DefaultOclEvaluator.getInstance() //.evaluate(null, null, "1.5"), 1.5);
WITHOUT_CLASSIFICATION	// REMEMBER to change this if you change the number of MEs with source // path settings
WITHOUT_CLASSIFICATION	// put the x at the right side of the activation if needed
WITHOUT_CLASSIFICATION	// Make sure there is the minimum gap above the message being drawn
WITHOUT_CLASSIFICATION	// Make sure there is the minimum gap below the message being drawn
WITHOUT_CLASSIFICATION	// The FigMessage that triggered this FigActivation into existence
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	// This module will still register as enabled for UML1.4 but it won't // actually do anything.
WITHOUT_CLASSIFICATION	// Get the region as the first Region in the State. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Create the layer
WITHOUT_CLASSIFICATION	// Create the renderer
WITHOUT_CLASSIFICATION	// If we're not provided a namespace then get it from the diagram or // the root
WITHOUT_CLASSIFICATION	// Link the previous/next reference of the swimlanes // according to the x order.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // GraphModel implementation
WITHOUT_CLASSIFICATION	// make space for the clarifier // for vertical symmetry // margin between text and border
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // MutableGraphModel implementation
WITHOUT_CLASSIFICATION	//////////////// // actions for toolbar
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // contructors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // event processing
WITHOUT_CLASSIFICATION	// The purpose of this method is not explained and it give give // NPE depending on z order of figs as they are read. For now // ignore if null but for future lets delete this.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // Fig accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // fig accessors
WITHOUT_CLASSIFICATION	// can't have a connection between 2 interfaces: // get the 'other' end type
WITHOUT_CLASSIFICATION	// If there's only a single child (and we're it's only parent), // set a hint for where to place it when we get to its row
WITHOUT_CLASSIFICATION	// Use "aSize" to build up the minimum size. Start with the size of the // name fig and build up.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	// if we are the dest and is a call action, create the  // activation, but don't add it until the height is set.
WITHOUT_CLASSIFICATION	// if we are the dest and is a call action, create the  // activation, but don't add it until the height is set.
WITHOUT_CLASSIFICATION	// if we are the destination of a create action, // create the entire activation
WITHOUT_CLASSIFICATION	// if we are the target of a destroy action // the figlifeline ends here and we add the activation
WITHOUT_CLASSIFICATION	// if we are the source of a return action // the activation ends here.
WITHOUT_CLASSIFICATION	// If we have a currentAct object that means have reached the end // of the lifeline with a call or a create not returned. // Add the activation to the list after setting its height to end // at the end of the lifeline.
WITHOUT_CLASSIFICATION	// we do nothing. No call to the parent
WITHOUT_CLASSIFICATION	// we don't recalculate activations, just move them
WITHOUT_CLASSIFICATION	// if is a classifier role, it must return all the related messages.
WITHOUT_CLASSIFICATION	// if is a message, it must return the sender // and the receiver of the message.
WITHOUT_CLASSIFICATION	// Comments from anywhere in the model are allowed
WITHOUT_CLASSIFICATION	// All other types of elements must be in this namespace
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// we initialize the coordinates.
WITHOUT_CLASSIFICATION	// we do nothing
WITHOUT_CLASSIFICATION	// manage if cursor x is less than lastX1 
WITHOUT_CLASSIFICATION	// manage if cursor x is more than lastX2 
WITHOUT_CLASSIFICATION	// manage changes of direction...
WITHOUT_CLASSIFICATION	// I have no direction yet
WITHOUT_CLASSIFICATION	// we move down or up the messages that are downward the broom
WITHOUT_CLASSIFICATION	// we recalculate all the activations
WITHOUT_CLASSIFICATION	// we draw a cross
WITHOUT_CLASSIFICATION	// we don't let the user move the messages horizontally.
WITHOUT_CLASSIFICATION	// if the edge is near the bottom of the classifier roles, // we enlarge all the FigClassifierRoles in the diagram.
WITHOUT_CLASSIFICATION	//super(Model.getFacade().getName(op), null);
WITHOUT_CLASSIFICATION	// we need the edge to be complete
WITHOUT_CLASSIFICATION	// if the added edge is a Create Message it will affect the position // of the ClassifierRole so it should be repositioned
WITHOUT_CLASSIFICATION	// the initial x is the left side of the activation
WITHOUT_CLASSIFICATION	// the initial x is the left side of the activation
WITHOUT_CLASSIFICATION	// put the x at the right side of the activation if needed
WITHOUT_CLASSIFICATION	// if the y coordinate is before the classifier role y, // we place the start in the corner of the fighead.
WITHOUT_CLASSIFICATION	// if the y coordinate is inside the head, // the x must be in the border of the headFig.
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders     * (java.lang.Object)     */
WITHOUT_CLASSIFICATION	// if the y coordinate is before the classifier role y, // we place the start in the corner of the fighead.
WITHOUT_CLASSIFICATION	// if the y coordinate is inside the head, // the x must be in the border of the headFig.
WITHOUT_CLASSIFICATION	/* Use a different notation as Messages on a collaboration diagram: */
WITHOUT_CLASSIFICATION	/* This next argument may be used to switch off     * the generation of sequence numbers - this is     * still to be implemented.     * They are less desired in sequence diagrams,     * since they do not add any information.     * In collaboration diagrams they are needed,     * and they are still optional in sequence diagrams. */
WITHOUT_CLASSIFICATION	// Operations ...
WITHOUT_CLASSIFICATION	//TODO: add logging, but this will never happen and is handled
WITHOUT_CLASSIFICATION	// If possible we determine this by checking the destination // and source Figs are the same. If this is not possible // because the edge is not yet connected then we check the // model.
WITHOUT_CLASSIFICATION	// we update the activations...
WITHOUT_CLASSIFICATION	// for performance, we check if this is a selfmessage // if it is, we have just updated the activations
WITHOUT_CLASSIFICATION	// This call seems not very robust. Yet to determine cause.
WITHOUT_CLASSIFICATION	// this constructor is needed for PGMLStackParser to load // saved diagrams. It does nothing, because  // PGMLStackParser will call setPoints later.
WITHOUT_CLASSIFICATION	// vertical resizing
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// This module will still register as enabled for UML1.4 but it won't // actually do anything.
WITHOUT_CLASSIFICATION	// Get the region as the first Region in the State. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	// There are no regions so create one and place the vertex //there.
WITHOUT_CLASSIFICATION	// There are one or more regions so find the one that the //vertex was dropped in
WITHOUT_CLASSIFICATION	// The vertex was dropped onto the diagram. // Get the region as the first Region in the StateMachine. // If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */
WITHOUT_CLASSIFICATION	// _x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	// Create the layer
WITHOUT_CLASSIFICATION	// nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	// Create the renderer
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	// in this event we do nothing, // only stop drawing the broom.
WITHOUT_CLASSIFICATION	// There is a bug in GEF where positioning nodes can affect // edge positions. We need to do 3 iterations to protect // against that.
WITHOUT_CLASSIFICATION	// 1. Remember current message paths
WITHOUT_CLASSIFICATION	// 2. Reposition and resize nodes
WITHOUT_CLASSIFICATION	// 3. Now reposition messages based on their original position
WITHOUT_CLASSIFICATION	// Compute the initial center position of the CR
WITHOUT_CLASSIFICATION	// horizontal resizing
WITHOUT_CLASSIFICATION	// Compute the final center position of the CR
WITHOUT_CLASSIFICATION	// Self messages act differently so it is needed to move them separetly. // Only self messages of selected CR should be horizontally translated.
WITHOUT_CLASSIFICATION	// Create the graph model
WITHOUT_CLASSIFICATION	// Y position of the new CR should match existing CRs Y position
WITHOUT_CLASSIFICATION	// Init the sequence diagrams from the module
WITHOUT_CLASSIFICATION	// debugging and looking at fig.headFig.figs[1]._currText  // I can see that it's working, but how to test it?       
WITHOUT_CLASSIFICATION	// Operations that work on elements:
WITHOUT_CLASSIFICATION	// Operations that work on classes of objects:
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//    Object getImportedPackage(Object element);
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//    Object getIncludingCase(Object handle);
WITHOUT_CLASSIFICATION	//////// Javadoc reviewed above this point - tfm /////////////
WITHOUT_CLASSIFICATION	//    Object getImportingNamespace(Object element);
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//Object createStereotype();
WITHOUT_CLASSIFICATION	/* Implementation Note:    * Unlike many of the interfaces to the model there is no control to force    * a single instance of an XmiReader. This is to allow work objects generated    * by the implementation to be garbage collected when an XmiReader instance    * falls out of scope.    */
WITHOUT_CLASSIFICATION	// ADiagramElementProperty delegate methods
WITHOUT_CLASSIFICATION	/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#add(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */
WITHOUT_CLASSIFICATION	/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#exists(     *         org.omg.uml.diagraminterchange.DiagramElement,     *         org.omg.uml.diagraminterchange.Property)     */
WITHOUT_CLASSIFICATION	/*     * @see org.omg.uml.diagraminterchange.ADiagramElementProperty#getProperty(     *         org.omg.uml.diagraminterchange.DiagramElement)     */
WITHOUT_CLASSIFICATION	//easy interface to properties
WITHOUT_CLASSIFICATION	// Here follows the interfaces that contain the enums of different // kinds in the UML meta-model.
WITHOUT_CLASSIFICATION	// Flow is not in UML 2.x - don't implement
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	//additional support for tagged values
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Here follows the interfaces that contain the enums of different // kinds in the UML meta-model.
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static variables
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constructors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // public methods
WITHOUT_CLASSIFICATION	/* end class UUIDManager */
WITHOUT_CLASSIFICATION	// Write out something for us to read back in
WITHOUT_CLASSIFICATION	// Now read it and check the results.
WITHOUT_CLASSIFICATION	// Create an empty file and try to read it
WITHOUT_CLASSIFICATION	// Depends on implementation: 
WITHOUT_CLASSIFICATION	// TODO: 
WITHOUT_CLASSIFICATION	//    /** //     * Construct an exception with a message and a causing exception. //     * //     * @param message the message //     * @param c the cause of the exception //     */ //    public XmiReferenceException(String message, Throwable c) { //        super(message, c); //    }
WITHOUT_CLASSIFICATION	// The netbeans SAXParser sets line number // and column number to -1.
WITHOUT_CLASSIFICATION	// The xerces SAXParser sets line number // and column number to 1.
WITHOUT_CLASSIFICATION	// Not true in general, but should be true for our test models
WITHOUT_CLASSIFICATION	// This throws  // org.argouml.model.XmiException: Unknown element in XMI file : Model // because the UML 1.3->1.4 converter can only handle XMI 1.0, not 1.1
WITHOUT_CLASSIFICATION	// TODO:
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// If the region is changed to another region then // we make sure that a delete event is not fired // as a result. //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/* In this case, either the container was not set,         * or it was not contained in a statemachine.         */
WITHOUT_CLASSIFICATION	// The only way a region is set to null is if we're deleting // the vertex in which case we do nothing special so that // the removal of the state triggers a delete event.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO:
WITHOUT_CLASSIFICATION	// In UML a message could have an Action. In UML2 it never does.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// No body found.
WITHOUT_CLASSIFICATION	// oops we already have the body
WITHOUT_CLASSIFICATION	//        return handle.stringValue();
WITHOUT_CLASSIFICATION	//        public Collection<Element> getExtendedElements(Object handle) {
WITHOUT_CLASSIFICATION	// For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	// Gone from UML 2.x //        throw new NotImplementedException();
WITHOUT_CLASSIFICATION	// Get all the relationships, that this model element has. // and filter everything, that is not an import.
WITHOUT_CLASSIFICATION	// Can't be done in the general case of federated repositories, // but at least get what we can find for the current resource set
WITHOUT_CLASSIFICATION	// MultiplicityElement is now an interface implemented // by element types that support multiplicities - tfm
WITHOUT_CLASSIFICATION	// should be Element not EObject really
WITHOUT_CLASSIFICATION	/* Classifier powerType = */
WITHOUT_CLASSIFICATION	// TODO: Signal -> Receptions association not navigable in this // direction
WITHOUT_CLASSIFICATION	// in UML2, the tag definition is the attribute itself
WITHOUT_CLASSIFICATION	// usage differs from UML1
WITHOUT_CLASSIFICATION	// usage differs from UML1
WITHOUT_CLASSIFICATION	// Transitions can have multiple Triggers now
WITHOUT_CLASSIFICATION	// Gone in UML 2.x
WITHOUT_CLASSIFICATION	// ActionState, CallState, and SubactivityState have been replaced // in UML 2.0 by explicitly modeled Actions
WITHOUT_CLASSIFICATION	// TODO: Double check - tfm
WITHOUT_CLASSIFICATION	// TODO: gone in UML 2
WITHOUT_CLASSIFICATION	// TODO: Gone in UML 2
WITHOUT_CLASSIFICATION	// TODO: Double check - tfm
WITHOUT_CLASSIFICATION	// TODO: double check - tfm
WITHOUT_CLASSIFICATION	// below for UML 1.4 compatibility
WITHOUT_CLASSIFICATION	// TODO: double check - tfm
WITHOUT_CLASSIFICATION	// TODO: Changed from UML 1.4
WITHOUT_CLASSIFICATION	// TODO: gone in UML 2
WITHOUT_CLASSIFICATION	// TODO: changed for UML 2.x
WITHOUT_CLASSIFICATION	// TODO: gone from UML 2
WITHOUT_CLASSIFICATION	// has <<subsystem>> stereotype
WITHOUT_CLASSIFICATION	// TODO: Not exact, but close
WITHOUT_CLASSIFICATION	// && ((Action) handle).get
WITHOUT_CLASSIFICATION	// Not in UML2
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Even though this is not relevant for UML2 we have // code calling this that expects it for UML1.4 // and we must handle it gracefully.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//        return ((RedefinableElement) handle).isRoot(); // TODO: One part of UML 2.1.1 spec says that this is as above, // but it appears to be gone - tfm
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//        lifeline.setRepresents(prop);
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// A composite state contains at least one region
WITHOUT_CLASSIFICATION	// an AssociationEnd is now a Property owned by an Association
WITHOUT_CLASSIFICATION	//        throw new NotImplementedException( //            "This is not a UML2 element"); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// TODO: Exception has been removed for UML 2.x // just return Signal for now - tfm
WITHOUT_CLASSIFICATION	// Gone in UML 2.x - just Classifier now
WITHOUT_CLASSIFICATION	// TODO: Not really the same thing, but close
WITHOUT_CLASSIFICATION	// The name of the meta type is the class name (after the last .) // and before the "Impl" or end of class name.
WITHOUT_CLASSIFICATION	// TODO: Gone in UML 2.x // Return place holder for now
WITHOUT_CLASSIFICATION	// TODO: no separate SyncState in UML 2.1 - tfm
WITHOUT_CLASSIFICATION	/*ActionSequence.class*/
WITHOUT_CLASSIFICATION	/*ClassifierInState.class*/
WITHOUT_CLASSIFICATION	/*Argument.class*/
WITHOUT_CLASSIFICATION	/*AttributeLink.class*/
WITHOUT_CLASSIFICATION	/*UninterpretedAction.class*/
WITHOUT_CLASSIFICATION	// Access should be fast
WITHOUT_CLASSIFICATION	// Iteration should be fast
WITHOUT_CLASSIFICATION	// LiteralSpecification  
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// i.e. eventType == Notification.REMOVE
WITHOUT_CLASSIFICATION	/*implements CommandStack*/
WITHOUT_CLASSIFICATION	//list.add("OpaqueExpression");
WITHOUT_CLASSIFICATION	//LiteralSpecification //list.add("LiteralNull");//When other ok
WITHOUT_CLASSIFICATION	//list.add("LiteralInteger");//When other ok
WITHOUT_CLASSIFICATION	//list.add("LiteralUnlimitedNatural");//When other ok
WITHOUT_CLASSIFICATION	//list.add("InstanceValue");
WITHOUT_CLASSIFICATION	// TODO else => Exception !
WITHOUT_CLASSIFICATION	// Can't be changed
WITHOUT_CLASSIFICATION	//rewrite it after change setExpression ?
WITHOUT_CLASSIFICATION	// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0 
WITHOUT_CLASSIFICATION	// LiteralSpecification  
WITHOUT_CLASSIFICATION	// Can't be set
WITHOUT_CLASSIFICATION	//rewrite it after change setExpression ?
WITHOUT_CLASSIFICATION	// as write in UML specification, we have size(bodies)==size(langs) // we must have tabValues.length%2==0
WITHOUT_CLASSIFICATION	// A Link is an Assocation in UML2.x
WITHOUT_CLASSIFICATION	// Link does not exist in UML2, a link is represented just as an // association
WITHOUT_CLASSIFICATION	// must not be used in UML2; we model a method as a // OpaqueBehavior object that already has a body, so there is no need // to have an intermediate expression object
WITHOUT_CLASSIFICATION	// We need a method (operation implementation) // to store the method body.
WITHOUT_CLASSIFICATION	// Maybe this operation already has a method, that fits our purpose? // In this case, try to reuse it, instead of creating a new // implementation.
WITHOUT_CLASSIFICATION	// Check, if we have to create a new implementation.
WITHOUT_CLASSIFICATION	// Create a new implementation.
WITHOUT_CLASSIFICATION	// And set the specification to the current operation.
WITHOUT_CLASSIFICATION	// Add it to the operation's methods.
WITHOUT_CLASSIFICATION	// Look, if there's already a java implementation
WITHOUT_CLASSIFICATION	// Try to get the corresponding body and set it // to the current body // This _should_ work, if all the bodies // were stored with their corresponding languages.
WITHOUT_CLASSIFICATION	// Job done.
WITHOUT_CLASSIFICATION	// It seems, there was no implementation of // our current target language, so we just add one.
WITHOUT_CLASSIFICATION	// We cannot set the body of this model element type.
WITHOUT_CLASSIFICATION	// Removed from UML 2.x
WITHOUT_CLASSIFICATION	// also parse 1_* or 0_N etc.
WITHOUT_CLASSIFICATION	// WARNING - This has containment side effects! // Eclipse UML2 will move the Property from the Classifier to // the Association when the navigability is changed.
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// for other xmi files with further namespaces:
WITHOUT_CLASSIFICATION	// eclipse namespaces:
WITHOUT_CLASSIFICATION	// For the .uml files in the eclipse jar files, we need this:
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Not needed currently for UML 2
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// final Object scope,
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// The attribute 'targetScope' of an AssociationEnd in UML1.x is no // longer supported in UML2.x
WITHOUT_CLASSIFICATION	// Nothing to do
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getDestination(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// in UML2, we model a method as a Behavior (initially OpaqueBehavior)
WITHOUT_CLASSIFICATION	// The interface realization will be created in the client namespace // (client is a namespace)
WITHOUT_CLASSIFICATION	// Extent ignored for eUML2 implementation (required for NetBeans MDR)
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()     */
WITHOUT_CLASSIFICATION	//        cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	// maybe UML2 has these as constants somewhere
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// also apply subprofiles:
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * Sets the value of an element#s property (tagged value). This method     * makes sure that a Collection of values is set if and only if the     * property is multivalued (upper multiplicity value greater 1), so passing     * a collection is safe.     *      * @see org.argouml.model.ExtensionMechanismsHelper#setValueOfTag(java.lang.Object, java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	//commonTaggedValueTypes.add(org.eclipse.uml2.uml.resource.UMLResource.)
WITHOUT_CLASSIFICATION	// remove base class by destroying the extension
WITHOUT_CLASSIFICATION	// consider the property multiplicity
WITHOUT_CLASSIFICATION	// or getDefaultValueFor(prop)?
WITHOUT_CLASSIFICATION	// too bad, we choose to take the first value
WITHOUT_CLASSIFICATION	// ready to set the value finally
WITHOUT_CLASSIFICATION	// in case of a tagged value, the type shouldn't be set here
WITHOUT_CLASSIFICATION	// not implementable in UML2, because property is missing
WITHOUT_CLASSIFICATION	// also unapply subprofiles:
WITHOUT_CLASSIFICATION	// also define subprofiles:
WITHOUT_CLASSIFICATION	//        {AssociationRole.class,  ClassifierRole.class, },
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//        {Link.class, Instance.class, }, //        {Transition.class,       StateVertex.class, },
WITHOUT_CLASSIFICATION	//        {Message.class, ClassifierRole.class },
WITHOUT_CLASSIFICATION	// Note for UML2 the aggregation ends are swapped
WITHOUT_CLASSIFICATION	// Extend, but only between two use cases. Remember we draw from the // extension port to the base port.
WITHOUT_CLASSIFICATION	// in UML2 subsystem is a Component with <<subsystem>> stereotype // so this must occur after the metaTypes.getComponent() case
WITHOUT_CLASSIFICATION	// find the passed in container in validContainmentMap
WITHOUT_CLASSIFICATION	// determine if metaType is a valid element for container
WITHOUT_CLASSIFICATION	/*             * UML 1.4.2 Spec section 4.5.3.20 [5]             * A GeneralizableElement may only be a child of             * GeneralizableElement of the same kind.             */
WITHOUT_CLASSIFICATION	// specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// valid elements for a Profile to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a class to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a classifier to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Interface to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Signal to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Actor to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Component to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Node to contain
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// A list of valid connections between elements, the // connection type first and then the elements to be connected
WITHOUT_CLASSIFICATION	// If there isn't a 3rd column then this represents a connection // of elements of the same type.
WITHOUT_CLASSIFICATION	// If there is a 3rd column then this represents a connection // of between 2 different types of element.
WITHOUT_CLASSIFICATION	// If the array hasn't been flagged to indicate otherwise // swap elements the elemnts and add again.
WITHOUT_CLASSIFICATION	// specifies valid elements for a DataType to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Operation to contain
WITHOUT_CLASSIFICATION	// valid elements for a Stereotype to contain
WITHOUT_CLASSIFICATION	// valid elements for an Action to contain
WITHOUT_CLASSIFICATION	// trying to get a built-in standard profile from eclipse UML2
WITHOUT_CLASSIFICATION	// Removed from UML 2
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Roll back transaction to remove any partial results read
WITHOUT_CLASSIFICATION	// We shouldn't get here, but just in case... // We want a wide exception catcher to make sure our // transaction always gets ended
WITHOUT_CLASSIFICATION	// If we can find a nested SAX exception, it will have information // on the line number, etc.
WITHOUT_CLASSIFICATION	// Ignore if the extent never got created or has been deleted
WITHOUT_CLASSIFICATION	// InputSource xformedInput = chainedTransform(transformFiles, pIs);
WITHOUT_CLASSIFICATION	// InputSource xformedInput = chainedTransform(transformFiles, pIs);
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.XmiReader#getXMIUUIDToObjectMap()     */
WITHOUT_CLASSIFICATION	// Set up reader to be first filter in chain
WITHOUT_CLASSIFICATION	// Set up source for style sheet
WITHOUT_CLASSIFICATION	// Create & set up temporary output file
WITHOUT_CLASSIFICATION	// In UML2.x there is no metaclass named Method, but we use the // 'method' association of BehavioralFeature
WITHOUT_CLASSIFICATION	//        ret.setIsLeaf(false); //        ret.setIsRoot(false);
WITHOUT_CLASSIFICATION	// Create filter for each style sheet and chain to previous // filter/reader
WITHOUT_CLASSIFICATION	// Create transformer and do transformation
WITHOUT_CLASSIFICATION	// Set up for next iteration
WITHOUT_CLASSIFICATION	// Create & set up temporary output file
WITHOUT_CLASSIFICATION	// Silently ignore anything specified by caller attempt to continue
WITHOUT_CLASSIFICATION	// we presume the stream is encoded using the default char encoding
WITHOUT_CLASSIFICATION	// Delete the old extent first
WITHOUT_CLASSIFICATION	//                LOG.log(Level.WARNING, "Unable to find extent " + extent);
WITHOUT_CLASSIFICATION	/*         * Set the storage id for our repository so that MofIds will be unique         * (they are composed as "storageId":"serialNumber"). NOTE: The storage         * manager only looks for a few property names such as the         * StorageFactoryClassName. Everything else needs to be prefixed with         * "MDRStorageProperty." which gets deleted from the property name         * before it and its associated value are copied to an *internal*         * property table separate from the system property table.         */
WITHOUT_CLASSIFICATION	// Connect to the repository
WITHOUT_CLASSIFICATION	// Create an extent and read in our metamodel (M2 model)
WITHOUT_CLASSIFICATION	// Create and start event pump first so it's available for all others
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getFacade()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelEventPump()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsHelper()     */
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Disable event delivery during model load
WITHOUT_CLASSIFICATION	// If we've got a streaming input, copy it to make sure we'll // be able to rewind it if necessary
WITHOUT_CLASSIFICATION	// Use a transaction to avoid the performance penalty (3x) of // MDR's autocommit mode
WITHOUT_CLASSIFICATION	// If a UML 1.3 file, attempt to upgrade it to UML 1.4
WITHOUT_CLASSIFICATION	// Roll back transaction from first attempt & start new one
WITHOUT_CLASSIFICATION	// Clear the associated ID maps & reset starting collection
WITHOUT_CLASSIFICATION	// Make sure we always have a default extent. // The old extent will get deleted as part of creating the // new extent.
WITHOUT_CLASSIFICATION	// DataTypes is next so it's available for Kinds, ModelManagement, // & Extensions
WITHOUT_CLASSIFICATION	// Initialize remaining factories and helpers // (but defer heavyweight ones until needed)
WITHOUT_CLASSIFICATION	// Create a default extent for the user UML model. This will get // replaced if a new model is read in from an XMI file.
WITHOUT_CLASSIFICATION	// NOTE: If we switch to a persistent repository like the b-tree // repository we'll want to keep the old extent(s) around
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCopyHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getChangeableKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getAggregationKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getPseudostateKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getScopeKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getConcurrencyKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDirectionKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getOrderingKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CommonBehaviorHelper#setNodeInstance(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Elements created after file load won't have index entries
WITHOUT_CLASSIFICATION	// Normally the extent should exist already, but in the case of // making an empty project, we may not have an extent yet, so // create a default extent
WITHOUT_CLASSIFICATION	/*     * Private constructor for common work needed by both public     * constructors.     */
WITHOUT_CLASSIFICATION	// end our transaction
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getAllPossibleStereotypes(java.util.Collection, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()     */
WITHOUT_CLASSIFICATION	// there is nothing to do in UML1.4
WITHOUT_CLASSIFICATION	// forbid instantiation
WITHOUT_CLASSIFICATION	// MDR classes may have a UML or Uml prefix which should be removed.
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.MetaTypes#getAbstraction()     */
WITHOUT_CLASSIFICATION	// Delete Stimulii which have this as their dispatchAction
WITHOUT_CLASSIFICATION	// Delete Messages which have this as their action
WITHOUT_CLASSIFICATION	// Delete LinkEnds
WITHOUT_CLASSIFICATION	// Delete AttributeLinks where this is the value
WITHOUT_CLASSIFICATION	// Delete Stimuli which have this as a Sender or Receiver
WITHOUT_CLASSIFICATION	// binary link
WITHOUT_CLASSIFICATION	// Delete all SendActions which have this as signal
WITHOUT_CLASSIFICATION	// Delete all SignalEvents which have this as the signal
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#deleteCollection(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#getDestination(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	// Text was stored in name in UML 1.3
WITHOUT_CLASSIFICATION	// The name of the meta type is the class name (after the last .) // and before the next $ or end of class name.
WITHOUT_CLASSIFICATION	// Delete CollaborationInstanceSets where // this is the last participatingInstance
WITHOUT_CLASSIFICATION	// Delete InteractionInstanceSets where // this is the last participatingStimulus
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	// this doesn't support I18N or multiple states,  // but it's just a default
WITHOUT_CLASSIFICATION	// Partitions are composite elements and will get deleted implicitly // Partition contents don't need to be deleted or checked
WITHOUT_CLASSIFICATION	/*     * @see org.netbeans.api.xmi.XMIReferenceProvider#getReference(javax.jmi.reflect.RefObject)     */
WITHOUT_CLASSIFICATION	// Look for an existing reference matching our MofID
WITHOUT_CLASSIFICATION	// probably redundant - just in case
WITHOUT_CLASSIFICATION	// delete Messages which have this as sender or receiver
WITHOUT_CLASSIFICATION	// Helper interfaces and methods.
WITHOUT_CLASSIFICATION	// CHECKSTYLE:OFF - ignore too many parameters since API is fixed by MDR
WITHOUT_CLASSIFICATION	// CHECKSTYLE:ON
WITHOUT_CLASSIFICATION	// Shorthand notation for convenience
WITHOUT_CLASSIFICATION	// Quick exit if it's a transaction event // (we get a lot of them and they are all ignored)
WITHOUT_CLASSIFICATION	// The 4-arg version of this method depends on this ordering. // Don't change it!
WITHOUT_CLASSIFICATION	// InteractionInstanceSets will get deleted automatically // because they are associated by composition
WITHOUT_CLASSIFICATION	// If this is the only message contained in the Interaction // we delete the Interaction
WITHOUT_CLASSIFICATION	// Object from a different file, register with superclass so it // can resolve all references
WITHOUT_CLASSIFICATION	/*     * @see org.netbeans.lib.jmi.xmi.XmiContext#getReference(java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////// ////////// Begin AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// if the model URL has a suffix of '.zip' or '.jar', get // the suffix without it and store it in the urlMap
WITHOUT_CLASSIFICATION	// Several tries to construct a URL that really exists.
WITHOUT_CLASSIFICATION	// If systemId is publicId previously mapped from a systemId, // try to use the systemId.
WITHOUT_CLASSIFICATION	// Try to find suffix in module list.
WITHOUT_CLASSIFICATION	// search the classpath
WITHOUT_CLASSIFICATION	// Give up and let superclass deal with it.
WITHOUT_CLASSIFICATION	// remove the first prefix because it may be an archive // (like magicdraw)
WITHOUT_CLASSIFICATION	// We've got a profile read pending - handle it ourselves now
WITHOUT_CLASSIFICATION	// shouldn't happen
WITHOUT_CLASSIFICATION	// Otherwise if it's not something we've already read, just // punt to the super class.
WITHOUT_CLASSIFICATION	// Unfortunately the MDR super implementation throws // DebugException with just the message from the causing // exception rather than nesting the exception itself, so // we don't have all the information we'd like
WITHOUT_CLASSIFICATION	// Only add MOF elements, not primitive datatypes
WITHOUT_CLASSIFICATION	// Only add MOF elements, not primitive datatypes
WITHOUT_CLASSIFICATION	// For Transition use indirection through target StateVertex
WITHOUT_CLASSIFICATION	// Look for an existing reference matching our MofID
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Get all (UML) metaclasses
WITHOUT_CLASSIFICATION	//                    Object[] args = { typeName, elemName }; //                  misc.name.element-import = Imported {0}: {1} //                    return Translator //                            .localize("misc.name.element-import", args);
WITHOUT_CLASSIFICATION	// Although this only handles one level of package, it is // OK for UML 1.4 because of clustering // Get the right UML package in the extent
WITHOUT_CLASSIFICATION	// Return the metatype proxy
WITHOUT_CLASSIFICATION	// we must find out if the activator itself does not have // message as it's activator
WITHOUT_CLASSIFICATION	// An activator can't also be a predecessor of a message
WITHOUT_CLASSIFICATION	/* This double 'for' loop may be optimised as follows:             * - Use arrays in stead of a Set for bases             * - Have the second loop start from the element after base1             * ... but I chose not to do this, since the gain is small,             * and this is only used for a lazily filled combo.             * BTW: This is also used by Notation.*/
WITHOUT_CLASSIFICATION	// An Association can only have a single unnamed ClassifierRole, so
WITHOUT_CLASSIFICATION	// if we are unnamed eliminate all classifiers which are already // the base of some role
WITHOUT_CLASSIFICATION	// eliminate Classifiers which already have an unnamed role
WITHOUT_CLASSIFICATION	// WFR 2.10.3.3 #4
WITHOUT_CLASSIFICATION	// eliminate Classifiers which already have an unnamed role
WITHOUT_CLASSIFICATION	/* We need to verify that ns is a Package,         * if not - find its parent package!         * Otherwise this causes an exception when creating         * a sequence diagram for a ClassifierRole.*/
WITHOUT_CLASSIFICATION	// No initialization currently
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// if we are unnamed eliminate all classifiers which are already // the base of some role
WITHOUT_CLASSIFICATION	//|| context instanceof Collaboration //|| context instanceof Model
WITHOUT_CLASSIFICATION	/*     * @see org.netbeans.lib.jmi.xmi.XMIHeaderProvider#writeHeader(java.io.Writer)     */
WITHOUT_CLASSIFICATION	// NOTE: The <XMI.header></XMI.header> is provided for us
WITHOUT_CLASSIFICATION	// Not implemented in MDR 
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	// Clean up index entries
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create a change event for the corresponding property
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create an event for the other end of the association
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// and a change event for that end
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create a change event for the associated property
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create an event for the other end of the association
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Create a change event for the associated property
WITHOUT_CLASSIFICATION	// will always be null
WITHOUT_CLASSIFICATION	// Cut down on debugging noise
WITHOUT_CLASSIFICATION	// Unregister deleted instances after all events have been delivered
WITHOUT_CLASSIFICATION	// Any given listener is only called once even if it is // registered for multiple relevant matches
WITHOUT_CLASSIFICATION	// This will include all subtypes registered
WITHOUT_CLASSIFICATION	/*(LOG.isDebugEnabled()*/
WITHOUT_CLASSIFICATION	// For debugging you probably want either this // OR the logging for every event which is fired - not both
WITHOUT_CLASSIFICATION	/*LOG.isDebugEnabled()*/
WITHOUT_CLASSIFICATION	// Fetch the key before going in synchronized mode
WITHOUT_CLASSIFICATION	// LOG.log(Level.FINE, " Class " + name + " has subtypes : " // + names.get(name));
WITHOUT_CLASSIFICATION	// convert classname to RefObject
WITHOUT_CLASSIFICATION	// If we don't have a MofClass, see if we can get one from the // instance
WITHOUT_CLASSIFICATION	// If we still don't have a MofClass, something's wrong
WITHOUT_CLASSIFICATION	//                    throw new IllegalArgumentException("Property '" //                            + attribute + "' doesn't exist in metamodel");
WITHOUT_CLASSIFICATION	// If there isn't a 3rd column then this represents a connection // of elements of the same type.
WITHOUT_CLASSIFICATION	// Save the model (current)
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ChangeableKind#getAddOnly()     */
WITHOUT_CLASSIFICATION	// Lookup primary key, creating new entry if needed
WITHOUT_CLASSIFICATION	// Lookup primary key, creating new entry if needed
WITHOUT_CLASSIFICATION	// If there are no subkeys, register using our special value // to indicate that this is a primary key only registration
WITHOUT_CLASSIFICATION	// UML 2.x only
WITHOUT_CLASSIFICATION	// UML 2.x only
WITHOUT_CLASSIFICATION	// UML 2.x only
WITHOUT_CLASSIFICATION	// Look for a TagDefinition matching the given name
WITHOUT_CLASSIFICATION	// Create a new TagDefinition if none found
WITHOUT_CLASSIFICATION	// only add all if there are some to add.
WITHOUT_CLASSIFICATION	// Clear target so that multiple copies have no effect  // (other than inefficiency)
WITHOUT_CLASSIFICATION	// Delete all TaggedValues with this type
WITHOUT_CLASSIFICATION	/*     * Used by the copy functions. Do not call this function directly.     *      * @param source     *            The stereotype to copy from.     * @param target     *            The object becoming a copy.     */
WITHOUT_CLASSIFICATION	// "Element");
WITHOUT_CLASSIFICATION	// Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite substates in a // concurrent composite state. // If this is broken by deletion of substate then we delete the other // remaining substates.
WITHOUT_CLASSIFICATION	// The effect will get deleted automatically by MDR, unlike the Guard.
WITHOUT_CLASSIFICATION	// Although Usage & Permission are Dependencies, they need to // be include separately because of the way lookup works
WITHOUT_CLASSIFICATION	// The following is specifically for Realizations
WITHOUT_CLASSIFICATION	// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215
WITHOUT_CLASSIFICATION	// A list of valid connections between elements, the // connection type first and then the elements to be connected
WITHOUT_CLASSIFICATION	// TODO: constraints // TODO: required tags
WITHOUT_CLASSIFICATION	// specifies valid elements for a Model to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Model to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a classifier to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Interface to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Signal to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Actor to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Node to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Enumeration to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a DataType to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Operation to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an Event to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an State to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an CallState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an SimpleState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an SubactivityState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an ActionState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an ActionState to contain
WITHOUT_CLASSIFICATION	// supports implementation of some special elements not // supported by buildNode
WITHOUT_CLASSIFICATION	// the list of namespaces to return
WITHOUT_CLASSIFICATION	// If our map has any entries for this type, it's a connection type
WITHOUT_CLASSIFICATION	// Get the list of valid model item pairs for the given connection type
WITHOUT_CLASSIFICATION	// See if there's a pair in this list that match the given // model elements
WITHOUT_CLASSIFICATION	// find the passed in container in validContainmentMap
WITHOUT_CLASSIFICATION	// determine if metaType is a valid element for container
WITHOUT_CLASSIFICATION	/*             * UML 1.4.2 Spec section 4.5.3.20 [5]             * A GeneralizableElement may only be a child of             * GeneralizableElement of the same kind.             */
WITHOUT_CLASSIFICATION	// Begin a transaction - we'll do a bunch of reads first // to collect a set of elements to delete - then delete them all
WITHOUT_CLASSIFICATION	// no else here to make sure Classifier with // its double inheritance goes ok
WITHOUT_CLASSIFICATION	// no else here to make sure AssociationClass goes ok
WITHOUT_CLASSIFICATION	// no else to handle multiple inheritance of linkobject
WITHOUT_CLASSIFICATION	// If we get this with the repository locked, it means our root // model element was already deleted.  Nothing to do...
WITHOUT_CLASSIFICATION	// Our wrapped version of the same error
WITHOUT_CLASSIFICATION	// end our transaction
WITHOUT_CLASSIFICATION	// if there are no owned elements then return empty list
WITHOUT_CLASSIFICATION	// This enforces the following well-formedness rule. // <p>Well formedness rule 4.12.3.1 CompositeState // [4] There have to be at least two composite // substates in a concurrent composite state.<p> // If this is broken by deletion of substate then we // change the parent composite substate to be not // concurrent.
WITHOUT_CLASSIFICATION	// We don't care about the value - just want to see if it throws
WITHOUT_CLASSIFICATION	// Recurse into ourself for each parent
WITHOUT_CLASSIFICATION	// the following should always be true
WITHOUT_CLASSIFICATION	// If we were handed a Classifier to start, // this must be a Classifier
WITHOUT_CLASSIFICATION	// we have to follow the // arrows..
WITHOUT_CLASSIFICATION	// || ns instanceof UseCase // see comment below
WITHOUT_CLASSIFICATION	/*                 * NOTE: Although WFR #3 in section 2.11.3.5 UseCase of the                 * UML 1.4 spec says "A UseCase cannot contain any                 * Classifiers," the OCL is actually self.contents->isEmpty                 * which would seem to imply it can't contain any elements                 * - tfm - 20060416                 */
WITHOUT_CLASSIFICATION	// Made following changes from OCL in UML 1.4 section 2.9.3.16: //   CollaborationInstance -> CollaborationInstanceSet //   Stimuli -> Stimulus
WITHOUT_CLASSIFICATION	// A Profile is a special package having the <<profile>> // stereotype which can only contain the following types
WITHOUT_CLASSIFICATION	/* || modelElement instanceof StateMachine */
WITHOUT_CLASSIFICATION	// A Profile is a special package having the <<profile>> stereotype
WITHOUT_CLASSIFICATION	// There actually don't appear to be any restrictions on the // namespace for a Generalization.  The UML 1.4 WFR 2.5.3.20 #3 // refers to GeneralizableElements, not Generalizations - tfm
WITHOUT_CLASSIFICATION	// only build a namepace if needed, with
WITHOUT_CLASSIFICATION	//        return struc.getOwner().getNamespace().getOwnedElement().contains( //                struc.getType());
WITHOUT_CLASSIFICATION	//  self.allConnections->forAll(r // | self.namespace.allContents->includes(r.participant) )
WITHOUT_CLASSIFICATION	//  d.supplier.oclAsType(GeneralizableElement). //  allParents.oclAsType(Namespace).ownedElement->select (e | //              e. elementOwnership.visibility = //                      #public)->includes (r.participant) or
WITHOUT_CLASSIFICATION	//  d.supplier.oclAsType(Namespace).ownedElement->select (e | //  e.elementOwnership.visibility = //  #public)->includes (r.participant) or
WITHOUT_CLASSIFICATION	//  d.supplier.oclAsType(Package).allImportedElements->select ( //                  e | e. elementImport.visibility = //                      #public) ->includes (r.participant) ) )
WITHOUT_CLASSIFICATION	// Get the namespace hierarchy for each element
WITHOUT_CLASSIFICATION	// Traverse the lists looking for the last (innermost) match
WITHOUT_CLASSIFICATION	// This is an expensive method that we should ensure is called // rarely. Hence info level to track easily.
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	// We silently ignore requests which conflict with // UML 1.4 WFR 2.5.3.1 #3 - no aggregation for n-ary associations
WITHOUT_CLASSIFICATION	// If we made something aggregate, make sure the other ends conform // to UML 1.4 WFR 2.5.3.1 #2 - no more than one aggregate end
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	/*         * <em>Warning: when changing the implementation of this method be         * warned that the sequence of the if then else tree DOES matter.</em>         * Most notably, do not move the setNamespace method any level up in         * the tree.<p>         */
WITHOUT_CLASSIFICATION	// All text was stored in name field in UML 1.3
WITHOUT_CLASSIFICATION	// Returns nothing
WITHOUT_CLASSIFICATION	// Boolean, String, Integer, Long, Float, Double, etc
WITHOUT_CLASSIFICATION	/*     * This method is CPU intensive and therefore needs to be as efficient as     * possible.     */
WITHOUT_CLASSIFICATION	/*         * Because we get the metatype class stripped of its reflective         * proxies, we need to jump through a hoop or two to find it         * in the metamodel, then work from there to get its proxy.         */
WITHOUT_CLASSIFICATION	// Remove any elements not in requested namespace
WITHOUT_CLASSIFICATION	/*     * Check whether model element is contained in given namespace/container.     */
WITHOUT_CLASSIFICATION	// Get Classifiers in Namespace
WITHOUT_CLASSIFICATION	// Get Features owned by those Classifiers
WITHOUT_CLASSIFICATION	// Select those Features which are BehavioralFeatures
WITHOUT_CLASSIFICATION	// Should these also be deleted?
WITHOUT_CLASSIFICATION	// This is silly, but for backward compatibility
WITHOUT_CLASSIFICATION	/* TODO: This is the 2nd part of this method: */
WITHOUT_CLASSIFICATION	/*             * For a Classifier:             * <pre>             * [10] The operation allContents returns a Set containing             * all ModelElements contained in the Classifier together             * with the contents inherited from its parents.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *       self.parent.allContents->select(e |             *            e.elementOwnership.visibility = #public or             *            e.elementOwnership.visibility = #protected))             * where parent is defined for GeneralizableElement as:             * [1] The operation parent returns a Set containing all direct             * parents             *   parent : Set(GeneralizableElement);             *   parent = self.generalization.parent             * </pre><p>             */
WITHOUT_CLASSIFICATION	/*             * For a Collaboration:             * <pre>             * [1 ] The operation allContents results in the set of             * all ModelElements contained in the Collaboration             * together with those contained in the parents             * except those that have been specialized.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union (             *                       self.parent.allContents->reject ( e |             *                       self.contents.name->include (e.name) ))             *             *  parent here is the GeneralizableElement definition             * </pre>             */
WITHOUT_CLASSIFICATION	// wellformednessrules and preconditions
WITHOUT_CLASSIFICATION	// UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	// equal
WITHOUT_CLASSIFICATION	// greater
WITHOUT_CLASSIFICATION	// less than
WITHOUT_CLASSIFICATION	// binary association
WITHOUT_CLASSIFICATION	// delete LinkEnds which have this as their associationEnd
WITHOUT_CLASSIFICATION	// delete AttributeLinks where this is the Attribute
WITHOUT_CLASSIFICATION	// delete CreateActions which have this as their instantiation
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(     *         java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	// Delete dependencies where this is the only client
WITHOUT_CLASSIFICATION	// Delete dependencies where this is the only supplier
WITHOUT_CLASSIFICATION	// delete CallActions which have this as their operation
WITHOUT_CLASSIFICATION	// delete CallEvents which have this as their operation
WITHOUT_CLASSIFICATION	/*     * TODO: All the ToDos in the doCopyFoo methods below are inherited from the     * NSUML implementation and do not reflect new issues. One additional thing     * which does need to be dealt with is the copying of any attributes which     * have been added since this code was implemented for UML 1.3.     */
WITHOUT_CLASSIFICATION	// Nothing more to do.
WITHOUT_CLASSIFICATION	/**     * Used by the copy functions. Do not call this function directly.     * TODO: actions? instances? collaborations etc?     *     * @param source     *            the source classifier     * @param target     *            the target classifier     */
WITHOUT_CLASSIFICATION	// Copy all the Features
WITHOUT_CLASSIFICATION	/**     * Used by the copy functions. Do not call this function directly.     * TODO: generalizations, specializations?     *     * @param source     *            the source generalizable element     * @param target     *            the target generalizable element     */
WITHOUT_CLASSIFICATION	/**     * Used by the copy functions. Do not call this function directly.     * TODO: template parameters, default type     * TODO: constraining elements     * TODO: flows, dependencies, comments, bindings, contexts ???     * TODO: contents, residences ???     *     * @param source     *            the source me     * @param target     *            the target me     */
WITHOUT_CLASSIFICATION	// Nothing more to do, don't copy owned elements.
WITHOUT_CLASSIFICATION	// copy raised signals:
WITHOUT_CLASSIFICATION	// Set the name so that superclasses can find the newly // created element in the model, if necessary.
WITHOUT_CLASSIFICATION	// Note that if we're copying this element then we // must also be allowed to copy other necessary // objects.
WITHOUT_CLASSIFICATION	// Don't explicitly check if element is null
WITHOUT_CLASSIFICATION	// Return 1..1 multiplicity for empty string
WITHOUT_CLASSIFICATION	// Convert "*" to "0..*" instead of "*..*"
WITHOUT_CLASSIFICATION	/* In this case, either the container was not set,             * or it was not contained in a statemachine.             */
WITHOUT_CLASSIFICATION	/* according WFR: in case of ActivityGraph only. */
WITHOUT_CLASSIFICATION	// For consistency with attribute and operation, give it a default // name and location
WITHOUT_CLASSIFICATION	// Delete Extends which have this as their only ExtensionPoint
WITHOUT_CLASSIFICATION	// delete Extends where this is the base
WITHOUT_CLASSIFICATION	// delete Includes where this is the addition
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// Test multipe items registered for single key set
WITHOUT_CLASSIFICATION	// Remove with null item should remove all entries for key
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	/* Need to copy the lists since we will be moving the elements              * one by one: */
WITHOUT_CLASSIFICATION	// Deleting "source" here would probably delete the parameters...
WITHOUT_CLASSIFICATION	/*         * Only set the name if it differs from the text.         */
WITHOUT_CLASSIFICATION	/* Need to copy the lists since we will be moving the elements: */
WITHOUT_CLASSIFICATION	// This is not necessarily the current diagram!
WITHOUT_CLASSIFICATION	/* Remove the old fig from the diagram, so we can draw the                 * new one in its place: */
WITHOUT_CLASSIFICATION	//            p.moveToTrash(source);
WITHOUT_CLASSIFICATION	// As soon as we've created a notation and have registered it listener // force an event to go to the listener so it draws for the first time.
WITHOUT_CLASSIFICATION	// If there are no subkeys, register using our special value // to indicate that this is a primary key only registration
WITHOUT_CLASSIFICATION	// Made following change from OCL in UML 1.4 section 2.9.3.22: //   CollaborationInstance -> CollaborationInstanceSet
WITHOUT_CLASSIFICATION	// If there is a 3rd column then this represents a connection // of between 2 different types of element.
WITHOUT_CLASSIFICATION	// Elements which will be deleted when their container is deleted // don't get added to the list of elements to be deleted // (but we still want to traverse them looking for other elements //  to be deleted)
WITHOUT_CLASSIFICATION	// Technically this is legal, but a StructuralFeature should probably // only ever have an owner instead of a namespace. - tfm
WITHOUT_CLASSIFICATION	// We'll put the association in the namespace of whichever end // is not navigable and is writeable.  If they both are, we'll use the // namepace of c1.
WITHOUT_CLASSIFICATION	// EnumerationLiterals should get deleted implicitly // since they are associated by composition
WITHOUT_CLASSIFICATION	// Set the namespace to that of the base as first choice, or that of // the addition as second choice.
WITHOUT_CLASSIFICATION	// UML2 only
WITHOUT_CLASSIFICATION	//            Editor editor = Globals.curEditor(); //            GraphModel gm = editor.getGraphModel(); //            LayerDiagram lay = //                ((LayerDiagram) editor.getLayerManager().getActiveLayer());
WITHOUT_CLASSIFICATION	// Have we handled UML2 here?
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*    	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)    	     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// Get all classifiers in all top level packages of all profiles
WITHOUT_CLASSIFICATION	/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */
WITHOUT_CLASSIFICATION	// We got passed an unmodifiable List.  Copy it and sort the result
WITHOUT_CLASSIFICATION	/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */
WITHOUT_CLASSIFICATION	/*	     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(     *      java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/* Set up the property panels for UML elements: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Build up an array list of the heights of each label/component pair. // Heights of zero indicate a proportional height.
WITHOUT_CLASSIFICATION	// Make sure the component width isn't any greater // than its maximum allowed width
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLComboBoxModel#addElement(java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*             * This can throw an exception if the target has been             * deleted. We don't want to try locking the repository             * because this is called from the event delivery thread and             * could cause a deadlock. Instead catch the exception and             * leave the model empty.             */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/* Do nothing by design. */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Allow null
WITHOUT_CLASSIFICATION	/*     * This is explained by WFR 2 of a StructuralFeature: The type of a     * StructuralFeature must be a Class, DataType, or Interface.     *      * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// restricting types for tagged values
WITHOUT_CLASSIFICATION	// classifier is way too much in UML 2.x
WITHOUT_CLASSIFICATION	// the minimum set of standard types
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// keep them sorted
WITHOUT_CLASSIFICATION	// We got passed an unmodifiable List.  Copy it and sort the result
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         * java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#addOtherModelEventListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* Make a copy of the modelelements: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// Add stereotypes submenu
WITHOUT_CLASSIFICATION	// the method
WITHOUT_CLASSIFICATION	// the selected operation
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#removeOtherModelEventListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// base is already set to this assoc...
WITHOUT_CLASSIFICATION	/* This check is needed, otherwise the setbase()                 *  below gives an exception.*/
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Just in case the existing selected element is from elsewhere // make sure it is in the list
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/* The selected value may be "" to              * clear the represented classifier. */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	//    private boolean mustRefresh;
WITHOUT_CLASSIFICATION	//        mustRefresh = true;
WITHOUT_CLASSIFICATION	/* This should not happen. */
WITHOUT_CLASSIFICATION	// if it has no language, then we assume it is not an instance of // OpaqueExpression, so we leave it null and handle elsewhere
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	// /////////////////////////////////////// // Build the field // ///////////////////////////////////////
WITHOUT_CLASSIFICATION	// /////////////////////////////////////// // Add field(s) to panel // ///////////////////////////////////////
WITHOUT_CLASSIFICATION	// click on the already selected value must not call setValue
WITHOUT_CLASSIFICATION	// The 2 Radios have only one information.
WITHOUT_CLASSIFICATION	// Update the model, and then notify
WITHOUT_CLASSIFICATION	// When call by contructor : no one is selected
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	//    private boolean mustRefresh;
WITHOUT_CLASSIFICATION	//        mustRefresh = true;
WITHOUT_CLASSIFICATION	/* This should not happen. */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	// We need to to this otherwise there is no notification // and diagram isn't change
WITHOUT_CLASSIFICATION	// needed for notification
WITHOUT_CLASSIFICATION	// if the control is a panel, add it
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	/* To be really sure, let's add the operation             * that is linked to the action in the model,             * too - if it is not listed yet.             * We need this, incase an operation is moved             * out of the package,             * or maybe with imported XMI...             */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// fill the list with items
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// in UML2, the target is already the "expression" (Opaque...)
WITHOUT_CLASSIFICATION	// reuse Opaque..., just set it's attributes
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.     * DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox#doIt(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	//p  = new UMLValueSpecificationPanel(model, propertyName);
WITHOUT_CLASSIFICATION	/*MModelElement*/
WITHOUT_CLASSIFICATION	// if not, it is a control and must be labeled...
WITHOUT_CLASSIFICATION	// only association end has an aggregation option box
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Create it [Here, OpaqueExpression which is the first // choice] // Note that if we edit the Initial value in the diagram // (double clic) // it was replaced by an OpaqueExpression
WITHOUT_CLASSIFICATION	// Destroy it
WITHOUT_CLASSIFICATION	// title = "" because already done for Optional
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// We got passed an unmodifiable List.  Copy it and sort the result
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Force the parent to redraw
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Do not set buildingModel = false here, // otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	/* Add new listeners: */
WITHOUT_CLASSIFICATION	// makes sure we can select 'none'
WITHOUT_CLASSIFICATION	// TODO: For large lists, this is doing a linear search of literally thousands of elements
WITHOUT_CLASSIFICATION	/* TODO: Here too? */
WITHOUT_CLASSIFICATION	// Check against "" is needed for backward // compatibility.  Don't remove without // checking subclasses and warning downstream // developers - tfm - 20081211
WITHOUT_CLASSIFICATION	// start of interval
WITHOUT_CLASSIFICATION	// end of interval
WITHOUT_CLASSIFICATION	// in middle of interval
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	// makes sure we can select 'none'
WITHOUT_CLASSIFICATION	/* Add new listeners: */
WITHOUT_CLASSIFICATION	// Don't try to test this if we're removing the element
WITHOUT_CLASSIFICATION	// we tried to remove a value
WITHOUT_CLASSIFICATION	// It would be better if we didn't need the container to get // the target. This constructor can have zero parameters as // soon as we improve targetChanged.
WITHOUT_CLASSIFICATION	// Allow listening to other elements:
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getElementAt(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getSize()     */
WITHOUT_CLASSIFICATION	// catch callers attempting to use one without other
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#getSelectedItem()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#remove(int, int)     */
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock // if use is not thread-safe
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/* Do nothing by design. */
WITHOUT_CLASSIFICATION	// NOTE: This may be called from a different thread, so we need to be // careful of the threading restrictions imposed by AbstractDocument // for mutators to be sure we don't deadlock.
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox#buildModel()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	//super(new LabelledLayout());
WITHOUT_CLASSIFICATION	// c.insets = new Insets(1, 1, 1, 1);
WITHOUT_CLASSIFICATION	// Get the list: OpaqueExpression, LiteralString,...
WITHOUT_CLASSIFICATION	// By default, the first value of the combobox is selected.
WITHOUT_CLASSIFICATION	// Get current InitialValue
WITHOUT_CLASSIFICATION	// Select the Current type in the combobox
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	// default : 0 => OpaqueExpression // set to 1 for test
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/* If we do not set it to null first, then we get a MDR DebugException: */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	// Create the body and language Field
WITHOUT_CLASSIFICATION	// Create other panel element
WITHOUT_CLASSIFICATION	// create Panel containing the previous field
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// Our comparator will throw an InvalidElementException if the old // list contains deleted elements (eg after a new project is loaded) // so remove all the old contents first
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         * java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*        * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)        */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/* There are no composite states, so this will work: */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	// Allow null
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	// make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// make it stretch vertically
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// Get all classifiers in our model // TODO: We need the property panels to have some reference to the // project they belong to instead of using deprecated functionality
WITHOUT_CLASSIFICATION	// Get all classifiers in all top level packages of all profiles
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/* The selected value may be "" to              * clear the represented operation. */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	// ignored - we just skipped inserting it in our document
WITHOUT_CLASSIFICATION	// Allow null
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()     */
WITHOUT_CLASSIFICATION	// Make sure it's parseable as an number
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#selectAll()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getItem()         */
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	// we don't want to show some nasty gray background // color, now do we?
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel,     *      Action)     */
WITHOUT_CLASSIFICATION	// next statement is necessary to update the textfield // if the selection is equal to what was allready // selected
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#setItem(java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getEditorComponent()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#selectAll()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ComboBoxEditor#getItem()         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Temporary until SimpleListModel is used for all
WITHOUT_CLASSIFICATION	// Temporary until SimpleListModel is used for all
WITHOUT_CLASSIFICATION	// Create popup tool if we have a single row
WITHOUT_CLASSIFICATION	// Create add and remove buttons if needed first
WITHOUT_CLASSIFICATION	// then any new buttons
WITHOUT_CLASSIFICATION	// Pushing this to the end of the AWT thread seems to be the only // way to get this to update correctly
WITHOUT_CLASSIFICATION	// button action:
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// TODO: Probably really want to cancel editing //((FigTextEditor) focusOwner).cancelEditing();
WITHOUT_CLASSIFICATION	// The 5 main component : 2 label, a panel for langage , a panel with // button, a textarea
WITHOUT_CLASSIFICATION	// Translator.localize("button.delete")
WITHOUT_CLASSIFICATION	// Copy previous element
WITHOUT_CLASSIFICATION	// Copy next element
WITHOUT_CLASSIFICATION	// Translator.localize("button.move-up")
WITHOUT_CLASSIFICATION	// Copy in memory the current
WITHOUT_CLASSIFICATION	// Copy the previous value in the current
WITHOUT_CLASSIFICATION	// Copy the current in the previous
WITHOUT_CLASSIFICATION	// Copy in memory the current
WITHOUT_CLASSIFICATION	// Copy the next value in the current
WITHOUT_CLASSIFICATION	// Copy the current in the next
WITHOUT_CLASSIFICATION	// Layout
WITHOUT_CLASSIFICATION	// The 2 component: a textField and a list
WITHOUT_CLASSIFICATION	// Layout
WITHOUT_CLASSIFICATION	// Extract the icon that is used by the tree control // for the current look and feel
WITHOUT_CLASSIFICATION	// Add a new entry in the list and select it. // Translator.localize("button.add") // +
WITHOUT_CLASSIFICATION	// necessary to create distance between // the textfield and the icon.
WITHOUT_CLASSIFICATION	// Eclipse UML2 implementation classes often start with "UML" //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Eclipse UML2 implementation classes end with "Impl" //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ // Make sure we have a recognized file extension //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// If the eUML.resources system property is defined then we are in a // stand alone application, else we're in an Eclipse plug in. // The eUML.resource should contain the path to the // org.eclipse.uml2.uml.resource jar plugin. //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// slope of the line we're finding the normal to // is slope, and the normal is the negative reciprocal // slope is (p1.y - p2.y) / (p1.x - p2.x) // so recip is - (p1.x - p2.x) / (p1.y - p2.y)
WITHOUT_CLASSIFICATION	// UML1.4 only
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	// Set the child components to the heights in the array list // calculating the height of any proportional component on the // fly.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*             * @see org.argouml.uml.ui.ActionSetMultiplicity#setSelectedItem(             *      java.lang.Object, java.lang.Object)             */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// If we have a model but no list then build the list with // preferred constructor. Eventually all lists should be built // this way.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*	 * @see	 * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent	 * )	 */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#removeOtherModelEventListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(     *         java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// If the component is a JLabel which has another // component assigned then position/size the label and // calculate the size of the registered component
WITHOUT_CLASSIFICATION	// If the child component is resizable then // we don't know it's actual size yet. // It will be calculated later as a // proportion of the available left over // space.  For now this is flagged as zero.
WITHOUT_CLASSIFICATION	// If a preferred height is not given or is // the same as the minimum height then fix the // height of this row.
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.     * DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// We only have this here until we have stereotypes // list on property panel
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * The property value has changed so rebuild our view.     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel#isValidElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* So, we found a Classifier                     * that is not a ClassifierInState.                     * And at least one state has been selected.                     * Well, let's correct that:                     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	// Not in UML1.4
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox#UMLComboBox( UMLComboBoxModel,     *      Action, boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	// Layout
WITHOUT_CLASSIFICATION	// Language has changed
WITHOUT_CLASSIFICATION	// Translator.localize("button.move-down")
WITHOUT_CLASSIFICATION	//        Object icon = ResourceLoaderWrapper.lookupIcon(s); //        putValue(Action.NAME, Translator.localize(s)); //        putValue(Action.SMALL_ICON, icon); //        // Set the tooltip string: //        putValue(Action.SHORT_DESCRIPTION, Translator.localize(s));
WITHOUT_CLASSIFICATION	/*             * MDR has a hardcoded printStackTrace on all exceptions,             * even if they're caught, which is unsightly, so we handle             * unknown elements ourselves rather than letting MDR throw             * an exception for us to catch.             *             * org/netbeans/lib/jmi/util/Logger.java             *             * This can be uses to disable logging.  Default output is             * System.err             * setProperty("org.netbeans.lib.jmi.Logger.fileName", "")             *              org.netbeans.mdr.Logger             *             * The property org.netbeans.lib.jmi.Logger controls the minimum             * severity level for logging             */
WITHOUT_CLASSIFICATION	// Commit our transaction
WITHOUT_CLASSIFICATION	// not in UML1.4
WITHOUT_CLASSIFICATION	// Ignore any error.  The transaction may already have // been unwound as part of exception processing by MDR
WITHOUT_CLASSIFICATION	// Give the resolver.getIdToObjectMap() entries // priority over entries with the same UUID from // resolver.getIdToObjectMaps() because entries // in resolver.getIdToObjectMaps() are historic.
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMetaTypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMessageSort()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CommonBehaviorHelper#setReceiver(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	// Nothing to do - we get all events automatically
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	// Remember the system id of our root document so that we can write // out profiles and linked models to a different file if requested
WITHOUT_CLASSIFICATION	// For now just skip registering this and ignore the request, // but the real issue is that MagicDraw serializes the same // object in two different composition associations, first in // the referencing file and second in the referenced file
WITHOUT_CLASSIFICATION	// if we've found the module model, log it // and place it in the map so we don't have to // find it if we need it again.
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////// ////////// End AndroMDA Code ////////////////////// /////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// returns a List
WITHOUT_CLASSIFICATION	// Simulates UML2 getting the aggregation from the opposite end
WITHOUT_CLASSIFICATION	// find the bases of the connected classifierroles so that we can see // what associations are between them. If there are bases then the // associations between those bases form the possible bases. Otherwise // the bases are formed by all associations in the namespace of the // collaboration
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#critique(java.lang.Object,     * org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedDecisions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#addSupportedDecision(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedGoals()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#addSupportedGoal(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#addKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#isActive()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     * org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedDecisions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getSupportedGoals()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * Just returns the descr param.     *     * @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)     */
WITHOUT_CLASSIFICATION	/*     * Get the generic clarifier for this designer/poster.     *     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#snooze()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#unsnooze()     */
WITHOUT_CLASSIFICATION	/*     * Does not do anything.     *     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Just returns false.     *     * @see org.argouml.cognitive.Poster#canFixIt(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#expand(java.lang.String, org.argouml.cognitive.ListSet)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.WizStep#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorChanged(org.argouml.application.events.ArgoGeneratorEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorAdded(org.argouml.application.events.ArgoGeneratorEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoGeneratorEventListener#generatorRemoved(org.argouml.application.events.ArgoGeneratorEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.NotationName#getConfigurationValue()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.NotationName#sameNotationAs(org.argouml.notation.NotationName)     */
WITHOUT_CLASSIFICATION	/*     * Add an element listener and remember the registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */
WITHOUT_CLASSIFICATION	/*     * Utility function to add a listener for a given property name     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            name of property to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */
WITHOUT_CLASSIFICATION	/*     * Utility function to add a listener for an array of property names     * and remember the registration.     *     * @param element     *            element to listen for changes on     * @param property     *            array of property names (Strings) to listen for changes of     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener,     *      Object, String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * Utility function to remove an element listener     * and adapt the remembered list of registration.     *     * @param element     *            element to listen for changes on     * @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#updateListener(java.beans.PropertyChangeListener, java.lang.Object, java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(     * java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.notation.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationChanged(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationAdded(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationRemoved(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderAdded(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.events.ArgoNotationEventListener#notationProviderRemoved(org.argouml.application.events.ArgoNotationEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.SAXParserBase#handleStartElement(     *         org.argouml.persistence.XMLElement)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.SAXParserBase#handleEndElement(     *         org.argouml.persistence.XMLElement)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.SAXParserBase#isElementOfInterest(String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.XmiFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.XMLTokenTableBase#setupTokens()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#getMainTag()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#load(org.argouml.kernel.Project, java.io.InputStream)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.MemberFilePersister#save(org.argouml.kernel.ProjectMember, java.io.OutputStream)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.XMLTokenTableBase#setupTokens()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#getDesc()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.ProfileManager#lookForRegisteredProfile(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @param pc     * @see org.argouml.profile.ProfileManager#applyConfiguration(org.argouml.kernel.ProfileConfiguration)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Critic#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.OclExpressionEvaluator#evaluate(java.util.HashMap, org.argouml.profile.internal.ocl.ModelInterpreter, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.uml14.Bag#count(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#setMaximumProgress(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * Returns the target of this tab.     *     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * Refresh the text of the tab.     *     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.AbstractArgoJPanel#spawn()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * Style panels only apply when a Fig is selected.     *     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *      TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *      TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */
WITHOUT_CLASSIFICATION	/*     * Report a progress to the ProgressMonitor window.     * @see org.argouml.application.api.ProgressMonitor#updateProgress(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#isCanceled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#close()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyNullAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#addPerspective(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.PerspectiveManagerListener#removePerspective(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(         * org.argouml.ui.targetmanager.TargetEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(         * org.argouml.ui.targetmanager.TargetEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.targetmanager.TargetListener#targetSet(         * org.argouml.ui.targetmanager.TargetEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementChanged(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementAdded(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementRemoved(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * the model structure has changed significantly, eg a new project.     * @see org.argouml.ui.explorer.TreeModelUMLEventListener#structureChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// NOTE: No longer a separate type in UML 2.1
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoItem#deselect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ToDoItem#select()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.checklist.CheckItem#expand(java.lang.String,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#predicate( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(Object, Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.WizMEName#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.WizMEName#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     * java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(     * java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *      org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*    * @see org.argouml.profile.Profile#getProfileIdentifier()    */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *         java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.UMLWizard#setSuggestion(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canGoNext()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *         org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.Clarifier#hit(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *         java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#getNumSteps()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#makePanel(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#canFinish()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.ui.Wizard#doAction(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#predicate2(     *      java.lang.Object, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object,     *      org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#stillValid(     *      org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.Poster#getClarifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#initWizard(     *      org.argouml.cognitive.ui.Wizard)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.ProjectMember#repair()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#add(org.argouml.uml.diagram.layout.LayoutedObject)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#remove(org.argouml.uml.diagram.layout.LayoutedObject)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#getObjects()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#getObject(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#layout()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.Layouter#getMinimumDiagramSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getOwner()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.activity.ui.FigActionState#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#initNotationProviders(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateNameText()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#addEnclosedFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.activity.ui.SelectionActionState#getNewNodeType(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * If the new encloser is null, and the old one is a Component,     * then the "enclosed" Fig has been moved on the diagram.     * This causes the model to be adapted as follows:     * remove the elementResidence     * between the "enclosed" and the oldEncloser.     *     * @see org.argouml.ui.ArgoDiagram#changeFigEncloser(org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.UMLMutableGraphSupport#isRemoveFromDiagramAllowed(Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()     */
WITHOUT_CLASSIFICATION	/*     * The Transition has a name text box. It contains:     * <ul>     * <li>The event-signature     * <li>The guard condition between []     * <li>The action expression     * </ul><p>     *     * The content of the text box is generated by its own notationProvider.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * Update the text labels.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * Update the text labels and listeners.     *     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialX()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigState#getInitialY()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.layout.LayoutedEdge#layout()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getTypeOrderNumer()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#calculateWeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getRank()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getWeight()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#isStandalone()     */
WITHOUT_CLASSIFICATION	/*     * Nothing is editable, since a Link takes its identity      * from the Association.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(     * org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * Listen also to the association, of which the link is an instantiation,      * since we want to update the rendering when      * the association name changes.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#setNamespace(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#getImportLevel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#isStereotypeVisible()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.StereotypeContainer#setStereotypeVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#isVisibilityVisible()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.VisibilityContainer#setVisibilityVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()     */
WITHOUT_CLASSIFICATION	/*     * Only refresh the tab if the bounds propertyChange event arrives.     *     * @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * Listen for a RemoveAssociationEvent between the comment     * and the annotated element. When recieved delete the CommentEdge     * and this FigEdgeNote.     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * If we're drawing to an edge then only allow if the start is a comment     * @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.StylePanelFig#setTargetBBox()     */
WITHOUT_CLASSIFICATION	/*     * Only refresh the tab if the bounds propertyChange event arrives.     *     * @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.StylePanelFig#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * If we're drawing to an edge then only allow if the start is a comment     * @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.Relocatable#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.explorer.Relocatable#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *          TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *          org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.PathContainer#isPathVisible()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.PathContainer#setPathVisible(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameFig()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * The only thing we need to deal with is updating is the condition text.     *      * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#isCreateDiagramsSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#isMinimiseFigsSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDiagramLayoutSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isDescendSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettingsInternal#isChangedOnlySelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#getImportLevel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isCreateDiagramsChecked()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isMinimiseFigsChecked()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isDiagramLayoutSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isDescendSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.reveng.ImportCommon#isChangedOnlySelected()     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#isSelected()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#getDefaultValue()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#getDefaultSelection()         */
WITHOUT_CLASSIFICATION	/*         * We return a new List with the options instead of the options themself         * because we don't want the user to be able to change the options.         *          * @see org.argouml.uml.reveng.SettingsTypes.UniqueSelection#getOptions()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#setSelection(int)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#close()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#isCanceled()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#notifyNullAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#updateMainTask(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.ProgressMonitor#updateSubTask(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionNewDiagram#createDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePath(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#getSourcePathSettings()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(org.argouml.uml.ui.SourcePathTableModel)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#setSourcePath(     * java.lang.Object, java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#deleteSourcePath(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.SourcePathController#getAllModelElementsWithSourcePath()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel2,     *      Action, boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getProfile()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#getModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatNamespace(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLUserInterfaceContainer#formatCollection(java.util.Iterator)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#setTarget(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#getTarget()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#refresh()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetAdded(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetRemoved(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargetListener#targetSet(     *         org.argouml.ui.targetmanager.TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#getExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLExpressionModel2#newExpression()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(     *         java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLCheckBox2#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#setSelectedItem(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#peekNamespaceElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#popNamespaceElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#getBaseNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#getCommonNamespace(     *         org.argouml.uml.util.namespace.Namespace)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#iterator()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#isEmpty()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.Namespace#setDefaultScopeToken(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.util.namespace.NamespaceElement#getNamespaceElement()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getFacade()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelEventPump()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getActivityGraphsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCollaborationsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCoreHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDataTypesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getModelManagementHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getStateMachinesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUmlHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesFactory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getUseCasesHelper()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMessageSort()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getMetaTypes()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getChangeableKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getAggregationKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getPseudostateKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getScopeKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getConcurrencyKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getDirectionKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getOrderingKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getVisibilityKind()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getXmiReader()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getXmiWriter(java.lang.Object, java.io.Writer, java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelImplementation#getCopyHelper()     */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#getParsingHelp()         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)         */
WITHOUT_CLASSIFICATION	/*         * @see org.argouml.ui.TabTarget#refresh()         */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.     *      AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Overridden purely to keep our superclass from removing the listener     * that we just added.     *     * @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.StateMachinesHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UseCasesHelper#getAllUseCases(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#addListenersToModel(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.UmlHelper#move(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     *          java.beans.PropertyChangeListener, java.lang.Object,     *          java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#addClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#removeClassModelEventListener(     * 		java.beans.PropertyChangeListener, java.lang.Object,     * 		java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsHelper#getStereotypes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     *      * All methods below similarly override methods in CoreHelper.     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CollaborationsHelper#getAllClassifierRoles(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CommonBehaviorHelper#getSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ActivityGraphsHelper#findClassifierByName(java.lang.Object, java.lang.String)     *     * all methods below similarly implement methods from ActivityGraphsHelper      */
WITHOUT_CLASSIFICATION	/*     * Returns the value of an element's property (tagged value). This method     * makes sure that a Collection of values is returned if and only if the     * property is multivalued (upper multiplicity value greater 1).     *     * @see org.argouml.model.Facade#getValueOfTag(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AbstractModelEventPump#removeClassModelEventListener(java.beans.PropertyChangeListener,     *      java.lang.Object, java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#startPumpingEvents()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#stopPumpingEvents()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ModelEventPump#flushModelEvents()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AggregationKind#getAggregate()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getChoice()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ChangeableKind#getChangeable()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ScopeKind#getClassifier()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AggregationKind#getComposite()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ConcurrencyKind#getConcurrent()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getDeepHistory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getFork()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ChangeableKind#getFrozen()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ConcurrencyKind#getGuarded()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getInParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getInitial()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getInOutParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ScopeKind#getInstance()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getJoin()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getJunction()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.AggregationKind#getNone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.OrderingKind#getOrdered()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getOutParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getPackage()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getPrivate()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getProtected()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.VisibilityKind#getPublic()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.DirectionKind#getReturnParameter()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ConcurrencyKind#getSequential()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.PseudostateKind#getShallowHistory()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.OrderingKind#getUnordered()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.ExtensionMechanismsFactory#createTaggedValue()     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/**     * @see org.argouml.model.CopyHelper#copy(java.lang.Object, java.lang.Object)     *     * Make a copy of element in the given namespace.<p>     *     * This function is a dispatcher that calls the     * copyElement(Element,Namespace) function from XXXFactory.<p>     *     * This function may fail and return null for any of the following reasons:     * <ol>     * <li>No copy function is known for element's type.     * <li>The copy function fails or throws.     * </ol>     *     * @param anelement     *            is the element to copy.     * @param ans     *            the namespace     * @return a copy of element, or null.     *     * @throws IllegalArgumentException     *             if element is null.     */
WITHOUT_CLASSIFICATION	// Because we map both ends of an association we'll see many // names twice //                LOG.log(Level.FINE, "Duplicate property name found - {0}:{1}", new Object[]{typeName, propertyName});
WITHOUT_CLASSIFICATION	/*     * Builds an initialized stereotype with no namespace. A stereotype must     * have a namespace so this method is unsafe. Use buildStereotype(String,     * Object).     *      * @param text     *            is the name of the stereotype     * @return an initialized stereotype.     */
WITHOUT_CLASSIFICATION	/*     * Used by the copy functions. Do not call this function directly.     *      * @param source     *            The stereotype to copy from.     * @param target     *            The object becoming a copy.     */
WITHOUT_CLASSIFICATION	// If the array hasn't been flagged to indicate otherwise // swap elements the elements and add again.
WITHOUT_CLASSIFICATION	// specifies valid elements for a class to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for a Component to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an ObjectFlowState to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	// specifies valid elements for an SimpleState to contain
WITHOUT_CLASSIFICATION	// Extend, but only between two use cases. Remember we draw from the // extension port to the base port.
WITHOUT_CLASSIFICATION	// default parameter name
WITHOUT_CLASSIFICATION	// build all other elements using existing buildNode
WITHOUT_CLASSIFICATION	// There is a bug in the version of MDR (20050711) that // we use  that causes it to fail to delete aggregate // elements which are single valued and where the // aggregate end is listed second in the association // defined in the metamodel. For the UML 1.4 metamodel, // this affects a StateMachine's top StateVertex and // a Transition's Guard.  See issue 4948 & 5227 - tfm // 20080713
WITHOUT_CLASSIFICATION	/*             * In UML 1.3, the name is the only place to store text.             * In UML 1.4, there is a body as well, but some tools             * still seem to use name.             */
WITHOUT_CLASSIFICATION	/*                 * Although not represented in the OCL (or our Java), the                 * English text of WFR #4 of Section 2.10.3.4 in the UML 1.4                 * spec is more restrictive - "[4] A Collaboration may only                 * contain ClassifierRoles and AssociationRoles, the                 * Generalizations and the Constraints between them, and                 * Actions used in the Collaboration's Interactions."                 */
WITHOUT_CLASSIFICATION	/*         * The following from the original NSUML implemenetation was attempting         * to implement WFR #1 from section 2.5.3.32 of the UML 1.4 spec, but if         * there is an owner set, no namespace is valid. The checks for this         * WFR, if desired, need to go in setOwner() and setType() - tfm         */
WITHOUT_CLASSIFICATION	// or //      self.allConnections->forAll( //              r | self.namespace.allContents->excludes //      (r.participant) implies //      self.namespace.clientDependency->exists (d | //      d.oclIsTypeOf(Permission) and //      d.stereotype.name = 'access' and
WITHOUT_CLASSIFICATION	/*     * Return a list of namespaces enclosing this element.     * The list is ordered outer to inner. i.e. it starts at the root model.     */
WITHOUT_CLASSIFICATION	// ScopeKind, VisibilityKind, PseudostateKind, etc // Doesn't include Boolean though, despite what UML 1.4 spec says
WITHOUT_CLASSIFICATION	/*             * For a Namespace:             * <pre>             * [2] The operation allContents results in a Set containing             * all ModelElements contained by the Namespace.             *   allContents : Set(ModelElement);             *   allContents = self.contents             * where             *   contents = self.ownedElement -> union(self.namespace, contents)             * </pre><p>             */
WITHOUT_CLASSIFICATION	/*             * For a Package:             * <pre>             * [3]  The operation allContents results in a Set containing             * the ModelElements owned by or imported             * by the Package or one of its ancestors.             *   allContents : Set(ModelElement);             *   allContents = self.contents->union(             *     self.parent.allContents->select(e |             *          e.elementOwnership.visibility = #public or             *          e.elementOwnership.visibility = #protected))             *             * where the required operations are defined as :             *             * [1] The operation contents results in a Set containing the             * ModelElements owned by or imported by the Package.             *   contents : Set(ModelElement)             *   contents = self.ownedElement->union(self.importedElement)             * [2] The operation allImportedElements results in a Set containing             * the ModelElements imported by the Package or one of its parents.             *   allImportedElements : Set(ModelElement)             *   allImportedElements = self.importedElement->union(             *     self.parent.oclAsType(Package).allImportedElements->select(             *                   re | re.elementImport.visibility = #public or             *                        re.elementImport.visibility = #protected))             * </pre>             */
WITHOUT_CLASSIFICATION	// Get the implementations of this operations and // look for an OpaqueBehavior.
WITHOUT_CLASSIFICATION	// TODO: In UML 2.0, ClassifierRole, AssociationRole, and // AssociationEndRole have been replaced by the internal // structure of the Collaboration
WITHOUT_CLASSIFICATION	// For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	// TODO: unimplemented //          return ((Property) handle).gets
WITHOUT_CLASSIFICATION	// Removed from UML 2.x and deprecated in Model API // so we won't implement it //        throw new NotImplementedException(); // we do not throw an exception because ArgoUML still uses this
WITHOUT_CLASSIFICATION	// This doesn't work in UML2: both owner and property needed!
WITHOUT_CLASSIFICATION	// TODO: Restructured in UML 2
WITHOUT_CLASSIFICATION	// TODO: Gone in UML 2.1 // It is now an InstanceSpecification with an  // Association as its classifier
WITHOUT_CLASSIFICATION	//list.add("LiteralReal");//UML 2.4 //End LiteralSpecification     
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Link does not exist in UML2, a link is represented just as an // association
WITHOUT_CLASSIFICATION	// Search for our current target language.
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// The attribute 'targetScope' of an AssociationEnd in UML1.x is no // longer supported in UML2.x
WITHOUT_CLASSIFICATION	//        cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	// handles all children of relationship including extend and // include which are not members of core
WITHOUT_CLASSIFICATION	// Although Usage & Permission are Dependencies, they need to // be include separately because of the way lookup works
WITHOUT_CLASSIFICATION	// The next 3 restrictions for Abstraction seem to be Argo specific // not something the UML spec requires - tfm - 20070215 // There is no need for these because they arn't used by buildConnection() - b00__1 //        {Abstraction.class, org.eclipse.uml2.uml.Class.class, org.eclipse.uml2.uml.Class.class, null, }, //        {Abstraction.class, org.eclipse.uml2.uml.Package.class,org.eclipse.uml2.uml.Package.class, null, }, //        {Abstraction.class, Component.class, Interface.class, null, },
WITHOUT_CLASSIFICATION	// specifies valid elements for a Enumeration to contain
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// This module will still register as enabled for UML1.4 but it won't // actually do anything.
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#remove(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     *     * This will result in rather bad performance but at least we will     * not violate the contract together with {@link #equals(Object)}.     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#size()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#isEmpty()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#iterator()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#toArray()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#toArray(java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#add(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#containsAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#addAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#retainAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#removeAll(java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Collection#clear()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#addAll(int, java.util.Collection)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#get(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#set(int, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#add(int, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#remove(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#indexOf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#lastIndexOf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#listIterator()     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#listIterator(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.List#subList(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     *     * This is a rather bad hash solution but with the {@link #equals(Object)}     * defined as below, it is not possible to do better.     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Orientable#setOrientation(Orientation)     */
WITHOUT_CLASSIFICATION	/*     * @see java.util.Observable#notifyObservers(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see Observable#notifyObservers()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * Updates the button if the current row changes     *     * @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * Refresh the table when a critique is enabled/disabled     *     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getRoot()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(     * java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(     * javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.ModeCreateFigPoly#createNewItem(java.awt.event.MouseEvent, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Runnable#run()     */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getValueAt(int, int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#setValueAt(	 *         java.lang.Object, int, int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#getColumnClass(int)	 */
WITHOUT_CLASSIFICATION	/*	 * @see javax.swing.table.TableModel#isCellEditable(int, int)	 */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.ModelFacade#getClassifier(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateQualified(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type2#navigateParameterizedQuery(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateParameterized(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateQualified(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type2#navigateParameterizedQuery(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#navigateParameterized(     *         java.lang.String, tudresden.ocl.check.types.Type[])     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#equals(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#hashCode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.persistence.pgml.HandlerFactory#getHandler(     * HandlerStack, Object, String, String, String, Attributes)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.persistence.pgml.PGMLStackParser#setAttrs(     * org.tigris.gef.presentation.Fig, org.xml.sax.Attributes)     */
WITHOUT_CLASSIFICATION	/*     * @see org.xml.sax.EntityResolver#resolveEntity(java.lang.String,     *         java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#accept(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read()     */
WITHOUT_CLASSIFICATION	/*     * @see java.io.InputStream#read(byte[], int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Throwable#printStackTrace()     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#hasState(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintStream)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Throwable#printStackTrace(java.io.PrintWriter)     */
WITHOUT_CLASSIFICATION	/*     * @see ProfileModelLoader#loadModel(ProfileReference)     */
WITHOUT_CLASSIFICATION	/*         * @see java.io.FileFilter#accept(java.io.File)         */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAAdditiveExpressionTail(tudresden.ocl.parser.node.AAdditiveExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAMultiplicativeExpressionTail(tudresden.ocl.parser.node.AMultiplicativeExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAUnaryUnaryExpression(tudresden.ocl.parser.node.AUnaryUnaryExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAPostfixExpressionTail(tudresden.ocl.parser.node.APostfixExpressionTail)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeaturePrimaryExpression(tudresden.ocl.parser.node.AFeaturePrimaryExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEmptyFeatureCallParameters(tudresden.ocl.parser.node.AEmptyFeatureCallParameters)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCallParameters(tudresden.ocl.parser.node.AFeatureCallParameters)     */
WITHOUT_CLASSIFICATION	/*     * @param node     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAStandardDeclarator(tudresden.ocl.parser.node.AStandardDeclarator)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALetExpression(tudresden.ocl.parser.node.ALetExpression)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAStringLiteral(tudresden.ocl.parser.node.AStringLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outARealLiteral(tudresden.ocl.parser.node.ARealLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAIntegerLiteral(tudresden.ocl.parser.node.AIntegerLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outABooleanLiteral(tudresden.ocl.parser.node.ABooleanLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEnumLiteral(tudresden.ocl.parser.node.AEnumLiteral)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALiteralCollection(tudresden.ocl.parser.node.ALiteralCollection)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAExpressionListOrRange(tudresden.ocl.parser.node.AExpressionListOrRange)     */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAListExpressionListOrRangeTail(tudresden.ocl.parser.node.AListExpressionListOrRangeTail)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getPreferredSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getSize()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * Tests if enter is pressed in the _bbodField so we need to set the target     * bounds.     *     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.ui.IStatusBar#showStatus(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * Override paint so we can set a flag the first time we're called     * and notify any waiting threads that the splash screen has been     * painted.     * @see java.awt.Component#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction.AbstractAction()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction.AbstractAction(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractAction.AbstractAction(     *       java.lang.String, javax.swing.Icon)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getName()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary2()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSecondary3()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getControlTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getUserTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getSubTextFont()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*             * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)             */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getLocale()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Window#dispose()     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(     *         java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(     *         java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.ListCellRenderer#getListCellRendererComponent(         *         javax.swing.JList, java.lang.Object, int, boolean, boolean)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)         */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Catches a mouseevent and calls mySingleClick and myDoubleClick if a tab     * is clicked which is selected.     * @see java.awt.event.MouseListener#mouseClicked(MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabRefresh()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabSave()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#handleSettingsTabCancel()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getRoot()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.Component#getMinimumSize()     *     * sets minimum size to 120,100     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.MenuListener#menuSelected(javax.swing.event.MenuEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.MenuListener#menuDeselected(javax.swing.event.MenuEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.MenuListener#menuCanceled(javax.swing.event.MenuEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Cmd#undoIt()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *         java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabKey()     */
WITHOUT_CLASSIFICATION	/*     * @see GUISettingsTabInterface#getTabPanel()     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnClass(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#isCellEditable(int, int)         */
WITHOUT_CLASSIFICATION	/*     * Compares obj1 and obj2 sorting by user object type, then name. Diagrams     * are sorted first, then packages, then other types. sorts by name within     * type groups. Nulls are sorted first for names.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*         * @see         * javax.swing.event.TreeWillExpandListener#treeWillCollapse(javax.swing         * .event.TreeExpansionEvent)         */
WITHOUT_CLASSIFICATION	/*         * Updates stereotype setting, adds all children per treemodel 'build on         * demand' design.         *          * @see         * javax.swing.event.TreeWillExpandListener#treeWillExpand(javax.swing         * .event.TreeExpansionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.TreeExpansionListener#treeCollapsed(         * javax.swing.event.TreeExpansionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.TreeExpansionListener#treeExpanded(         * javax.swing.event.TreeExpansionEvent) Updates the selection state.         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeNode#isLeaf()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * Do string compare of names of UML objects.  Comparison is     * case insensitive using a primary strength collator in the user's     * locale.     *      * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dragDropEnd(java.awt.dnd.DragSourceDropEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dragEnter(java.awt.dnd.DragSourceDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dragExit(java.awt.dnd.DragSourceEvent)     */
WITHOUT_CLASSIFICATION	/*     * This is not the correct location to set the cursor.     * The commented out code illustrates the calculation     * of coordinates.     *     * @see java.awt.dnd.DragSourceListener#dragOver(java.awt.dnd.DragSourceDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DragSourceListener#dropActionChanged(java.awt.dnd.DragSourceDragEvent)     */
WITHOUT_CLASSIFICATION	/*     * Ok, we've been told to scroll because the mouse cursor is in our     * scroll zone.     * @see java.awt.dnd.Autoscroll#autoscroll(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * Calculate the insets for the *JTREE*, not the viewport the tree is in.     * This makes it a bit messy.     *     * @see java.awt.dnd.Autoscroll#getAutoscrollInsets()     */
WITHOUT_CLASSIFICATION	/*                     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)                     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.dnd.DropTargetListener#dragEnter(java.awt.dnd.DropTargetDragEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.dnd.DropTargetListener#dragExit(java.awt.dnd.DropTargetEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.dnd.DropTargetListener#dropActionChanged(java.awt.dnd.DropTargetDragEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object)         */
WITHOUT_CLASSIFICATION	/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#getValue(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnName(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getColumnClass(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#nodeAdded(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#edgeAdded(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#nodeRemoved(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#edgeRemoved(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphListener#graphChanged(org.tigris.gef.graph.GraphEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Diagram#initialize(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     * The classifier and state Figs are nicely centered vertically,     * and stretched out over the full width,     * to allow easy selection with the mouse.     * The Fig can only be shrunk to half its original size - so that     * it is not reducible to a few pixels only.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     *     * Override setBounds to keep shapes looking right.     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * Return all ports on node or edge.     *     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return the node or edge that owns the given port.     *     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return all edges going to given port.     *     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return all edges going from given port.     *     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return true if the given object is a valid node in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return true if the given object is a valid edge in this graph.     *     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Add the given node to the graph, if valid.     *     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Return true if the two given ports can be connected by a     * kind of edge to be determined by the ports.     *     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     * java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigGroup#addFig(Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigGroup#addFig(Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.Predicate#predicate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object,     *      java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#connect(java.lang.Object,     *      java.lang.Object, java.lang.Class)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.util.Predicate#predicate(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * Overridden to make it possible to include a stateVertex in a composite     * state.     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     *     * @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * This function only sets the color of the divider line      * (since that is the only visible part), and can be used to make      * the divider line invisible for the top region in a composite state.     *      * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)         */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getUseTrapRect()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigText#setTextFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.ClipboardOwner#lostOwnership(     *      java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferData(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.datatransfer.Transferable#getTransferData(     *         java.awt.datatransfer.DataFlavor)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#classNameAndBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigNode#hitPort(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigGroup#hitFig(java.awt.Rectangle)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#isSelectable()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigNode#getPortFig(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#dragExit(     *         java.awt.dnd.DropTargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.dnd.DropTargetListener#drop(     *         java.awt.dnd.DropTargetDropEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#translate(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Overridden to set Argo-specific RenderingHints to determine whether     * or not antialiasing should be turned on.     *     * @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Overridden to set Argo-specific RenderingHints to determine whether     * or not antialiasing should be turned on.     *     * @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#getNotificationInfo()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.ModeCreatePolyEdge#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * Updates the modelelement container if the fig is moved in or     * out another fig. If this fig doesn't have an enclosing fig     * anymore, the namespace of the diagram will be the owning     * modelelement. If this fig is moved inside another     * FigNodeModelElement the owner of that fignodemodelelement will     * be the owning modelelement.     *     * @see org.tigris.gef.presentation.FigNode#setEnclosingFig(org.tigris.gef.presentation.Fig)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getEnclosedFigs()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#makeSelection()     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#classNameAndBounds()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#calcBounds()     */
WITHOUT_CLASSIFICATION	/*     * Necessary since GEF contains some errors regarding the hit subject.     *     * @see org.tigris.gef.presentation.Fig#hit(Rectangle)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.FigNode#isDragConnectable()     */
WITHOUT_CLASSIFICATION	/*     * Need to 'arm' the rerouting capability with mouseDragged().     * <p>     * Don't arm if the edtior's current mode is a figedge create mode,     * because once a new edge has been created it is not deselected,     * therefore on the next create an unwanted reroute is performed.     *     * @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getMinimumSize()     */
WITHOUT_CLASSIFICATION	/*     * Override setBounds to keep shapes looking right.     * @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Command#execute()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeGraphModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeEdge()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.SelectionButtons#getNewNode(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.base.Selection#dragHandle(int, int, int, int,     * org.tigris.gef.presentation.Handle)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.lang.Object#clone()     */
WITHOUT_CLASSIFICATION	/*     * Makes sure that the edges stick to the outline of the fig.     * @see org.tigris.gef.presentation.Fig#getGravityPoints()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getFillColor()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setFilled(boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLineWidth(int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#getLineWidth()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#damage()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * If the user double clicks on any part of this FigNode, pass it     * down to one of the internal Figs.  This allows the user to     * initiate direct text editing.     *     * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#setLayer(org.tigris.gef.base.Layer)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#deleteFromModel()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#removeFromDiagram()     */
WITHOUT_CLASSIFICATION	/*     * Makes sure that the edges stick to the outline of the fig.     * @see org.tigris.gef.presentation.Fig#getGravityPoints()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)     */
WITHOUT_CLASSIFICATION	/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */
WITHOUT_CLASSIFICATION	/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */
WITHOUT_CLASSIFICATION	/*             * @see             * java.awt.event.ActionListener#actionPerformed(java.awt.event.             * ActionEvent)             */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Dialog#nameButtons()     */
WITHOUT_CLASSIFICATION	/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnName(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getColumnClass(int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#isCellEditable(int, int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getRowCount()         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#getValueAt(int, int)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.table.TableModel#setValueAt( java.lang.Object, int,         * int)         */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getElementAt(int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListModel#getSize()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ComboBoxModel#getSelectedItem()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * The property value has changed so rebuild our view.     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.Action#isEnabled()     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseClicked(     *          java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.MouseListener#mouseReleased(     *          java.awt.event.MouseEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(     * javax.swing.JList, java.lang.Object, int, boolean, boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#getDefaultRootElement()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#getLength()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#render(Runnable r)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.text.Document#getText(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,     *      java.lang.Object, int, boolean, boolean)     */
WITHOUT_CLASSIFICATION	/*         * @see java.awt.event.ActionListener#actionPerformed(         *         java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*             * @see java.lang.Runnable#run()             */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#isCellEditable(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getRowCount()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#getValueAt(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.     * PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.VetoableChangeListener#vetoableChange(java.beans.     * PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see     * org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.     * beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractAction#actionPerformed(ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#contains(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.DefaultListModel#addElement(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetAdded(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetRemoved(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see TargetListener#targetSet(TargetEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireContentsChanged(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalAdded(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.AbstractListModel#fireIntervalRemoved(     *          Object, int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(     *      javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int,     *      boolean)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(     *      java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#accept(java.io.File)     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.filechooser.FileFilter#getDescription()     */
WITHOUT_CLASSIFICATION	/*         * @see java.beans.PropertyChangeListener#propertyChange(         *         java.beans.PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*         * @see java.util.Enumeration#hasMoreElements()         */
WITHOUT_CLASSIFICATION	/*         * @see java.util.Enumeration#nextElement()         */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*         * @see PropertyChangeListener#propertyChange(PropertyChangeEvent)         */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*      * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * Here we are actually violating the test independance since we keep     * the DetailsPane from test to test. The reason to do this is to make     * it possible to run the tests with less memory requirements.     *     * Hopefully someone might eventually fix the DetailsPane so that it is     * garbage collected properly and this is no longer needed.     *     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#runTest()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*	 * @see TargetListener#targetAdded(TargetEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * @see TargetListener#targetRemoved(TargetEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * @see TargetListener#targetSet(TargetEvent)	 */
WITHOUT_CLASSIFICATION	/*	     * @see TargetListener#targetAdded(TargetEvent)	     */
WITHOUT_CLASSIFICATION	/*	     * @see TargetListener#targetRemoved(TargetEvent)	     */
WITHOUT_CLASSIFICATION	/*	     * @see TargetListener#targetSet(TargetEvent)	     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see AbstractTestActionAddDiagram#getValidNamespaceClasses()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#tearDown()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * This method is overridden in order to ignore change of the y coordinate     * during dragging.     *     * @see org.tigris.gef.presentation.FigNode#superTranslate(int, int)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphFactory#makeNode()     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor(     *         org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer,     *         java.lang.Object, java.util.Map)     */
WITHOUT_CLASSIFICATION	/*     * @see junit.framework.TestCase#setUp()     */
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// Although not generally true for GEF, for Argo we know that the layer // is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	/* end class StartCritics */
WITHOUT_CLASSIFICATION	// initialized in static initializer block below
WITHOUT_CLASSIFICATION	// Needs to happen after initialization is done & modules loaded
WITHOUT_CLASSIFICATION	// create an anonymous class as a kind of adaptor for the cognitive // System to provide proper translation/i18n.
WITHOUT_CLASSIFICATION	// The reason the gui is initialized before the commands are run // is that some of the commands will use the projectbrowser.
WITHOUT_CLASSIFICATION	/*         * Initialize the module loader. At least the plug-ins that provide         * profiles need to be initialized before the project is loaded,         * because some of these profile may have been set as default         * profiles and need to be applied to the project as soon as it has         * been created or loaded. The first instance of a Project is needed         * during the GUI initialization.         */
WITHOUT_CLASSIFICATION	/*         *  The string <code>log4j.configuration</code> is the         *  same string found in         *  {@link org.apache.log4j.Configuration.DEFAULT_CONFIGURATION_FILE}         *  but if we use the reference, then log4j configures itself         *  and clears the system property and we never know if it was         *  set.         *         *  If it is set, then we let the static initializer in         * {@link Argo} perform the initialization.         */
WITHOUT_CLASSIFICATION	/** * A subclass of JPanel that can act as a tab in the DetailsPane or * MultiEditorPane. Added functionality:<p> * * Spawning: When the tab is double-clicked, this JPanel will generate a * separate window of the same size and with the same contents. This is almost * like "tearing off" a tab.<p> * * TODO: Spawning of windows disabled in spawn()<p> * * Title: This JPanel keeps track of its own title.<p> * * Icon: This JPanel keeps track of its own icon; i.e. an arrow pointing to * the panel that it gives details of.<p> * * Orientation: This JPanel is Orientable.<p> * * Cloning: This JPanel may be cloned.<p> * * This class used to be named TabSpawnable. * Renamed since it is not a Tab, but a Panel, and being spawnable is * not any more its main purpose. */
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // accessors
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	/* do nothing */
WITHOUT_CLASSIFICATION	// Notation events are likely to cause GEF/Swing operations, so we // dispatch them on the Swing event thread as a convenience so that // the receiving notationChanged() methods don't need to deal with it
WITHOUT_CLASSIFICATION	/**     * @param item the todo item     * @param reason the reason TODO: Use it!     * @return <code>true</code> if the argument was a component of this list;     *         <code>false</code> otherwise     * @throws UnresolvableException unable to resolve     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // issue resolution
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	// Lazily create the event:
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // constants
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////// // static accessors
WITHOUT_CLASSIFICATION	// Set the tooltip string:
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)     */
WITHOUT_CLASSIFICATION	// This needs to iterate to fill entire output raster if implemented //        return image.copyData(outRaster);
WITHOUT_CLASSIFICATION	// Catch all exceptions and errors, however severe
WITHOUT_CLASSIFICATION	// Notify the user that the modules in the list that are selected // but not enabled were not possible to enable and that are not // selected that we cannot disable. // // Currently we just log this. // // TODO: We could eventually pop up some warning window. //
WITHOUT_CLASSIFICATION	// if we have only one return value and without type, // the return param string is ": ,", we remove it
WITHOUT_CLASSIFICATION	/* If the script of the Action is empty,             * (or only specifies arguments and no method name)             * then we generate a string based on             * a different model element: */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* MMessage */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	/* (MMessage) */
WITHOUT_CLASSIFICATION	// no state with the given name is found, so we have to // reject the complete user's input
WITHOUT_CLASSIFICATION	/* Now let's check if the new line is already present in             * the old list of internal transitions; if it is, then             * mark the old one to be retained (i.e. do not create a new one),             * if it isn't, continue with parsing:             */
WITHOUT_CLASSIFICATION	// case 1
WITHOUT_CLASSIFICATION	// check for more literals (';' separated):
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.check.types.Type#hasState(java.lang.String)     */
WITHOUT_CLASSIFICATION	// if save did not raise an exception // and name+"#" exists move name+"#" to name+"~" // this is the correct backup file
WITHOUT_CLASSIFICATION	// frank: in case of exception // delete name and mv name+"#" back to name if name+"#" exists // this is the "rollback" to old file
WITHOUT_CLASSIFICATION	// Skip the 2 lines //<?xml version="1.0" encoding="UTF-8" ?> //<!DOCTYPE pgml SYSTEM "pgml.dtd">
WITHOUT_CLASSIFICATION	// Search all attributes found to those expected. // If any don't match then turn off the found flag // so that we search for the next matching tag.
WITHOUT_CLASSIFICATION	// Now we're into processing each specific path // item strategy. // At the moment, we only know PathItemPlacement
WITHOUT_CLASSIFICATION	// for compatibility with older format
WITHOUT_CLASSIFICATION	// If we're about to upgrade the file lets take an archive // of it first.
WITHOUT_CLASSIFICATION	// No more we can do here on failure
WITHOUT_CLASSIFICATION	// Write any left over bytes in the input buffer // (perhaps from a partially decoded character)
WITHOUT_CLASSIFICATION	// NOP
WITHOUT_CLASSIFICATION	/** * To persist to and from zargo (zipped file) storage containing seperate * xmi, argo, plgml and todo zip entries. * @author Bob Tarling * TODO: Review use of this against ZargoFilePersister - Bob */
WITHOUT_CLASSIFICATION	// Add the path of the model to the search path, so we can // read dependent models
WITHOUT_CLASSIFICATION	// we only need to add the classloader once // and if and only if there is at least a profile // in the JAR
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/* Testing: does not fire. */
WITHOUT_CLASSIFICATION	/*     * @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCall(tudresden.ocl.parser.node.AFeatureCall)     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	/*     * @see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map,     *      java.lang.Object, java.lang.String, java.lang.String,     *      java.lang.Object[])     */
WITHOUT_CLASSIFICATION	// TODO: isStatic in UML 2.x
WITHOUT_CLASSIFICATION	// Additional Operations in 4.5.3.8
WITHOUT_CLASSIFICATION	/* 4.5.2.13 Constraint */
WITHOUT_CLASSIFICATION	/* 4.5.2.24 Generalization */
WITHOUT_CLASSIFICATION	/* 4.5.2.28 Namespace */
WITHOUT_CLASSIFICATION	// Do not set buildingModel = false here, // otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	//        prpTodo = createProperty("label.todo-pane", positions, TabToDo.class); //        prpProperties = //            createProperty("label.properties-pane", //                    positions, TabProps.class); //        prpDocumentation = //            createProperty("label.documentation-pane", //                    positions, TabDocumentation.class); //        prpStyle = //            createProperty("label.style-pane", //                    positions, TabStyle.class); //        prpSource = //            createProperty("label.source-pane", //                    positions, TabSrc.class); //        prpConstraints = //            createProperty("label.constraints-pane", //                    positions, TabConstraints.class); //        prpTaggedValues = //            createProperty("label.tagged-values-pane", //                    positions, TabTaggedValues.class); // //        Property[] propertyList = new Property[] { //            prpTodo, prpProperties, prpDocumentation, prpStyle, //	    prpSource, prpConstraints, prpTaggedValues, //        }; //        Arrays.sort(propertyList); // //        top.add(new JScrollPane(new PropertyTable( //						  propertyList, //						  paneColumnHeader, //						  positionColumnHeader)), //		BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	// Parse the boundary box text. Null is // returned if it is empty or // invalid, which causes no change. Otherwise we tell // GEF we are making // a change, make the change and tell GEF we've // finished.
WITHOUT_CLASSIFICATION	// TODO: Add double click listener 
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */
WITHOUT_CLASSIFICATION	/*     * @see javax.swing.plaf.metal.MetalTheme#getPrimary1()     */
WITHOUT_CLASSIFICATION	// if the current shortcut has been set but is void, then the // current shortcut is not set --> then the default value does not // change
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	// 2. the profile configuration, holding noneditable applied profiles
WITHOUT_CLASSIFICATION	// the text will be set later
WITHOUT_CLASSIFICATION	//    private static final StereotypeView[] stereotypeViewMap; //     //    static { //        stereotypeViewMap = new StereotypeView[3]; //        StereotypeView. //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_TEXTUAL] =  //            StereotypeView.TEXTUAL; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_BIG_ICON] =  //            StereotypeView.BIG_ICON; //        stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_SMALL_ICON] =  //            StereotypeView.SMALL_ICON; //    }
WITHOUT_CLASSIFICATION	/** * This class represents all Diagrams within ArgoUML. * It is based upon the GEF Diagram.<p> * * It adds a namespace, and the capability * to delete itself when its namespace is deleted. <p> * * TODO: MVW: I am not sure of the following:<p> * The "namespace" of the diagram is e.g. used when creating new elements * that are shown on the diagram; they will have their namespace set * according this. It is NOT necessarily equal to the "owner". <p> * * MVW: I doubt all following: * The "namespace" of the diagram is e.g. used to register a listener * to the UML model, to be notified if this element is removed; * which will imply that this diagram has to be deleted, too. <p> * * Hence the namespace of e.g. a collaboration diagram should be the * represented classifier or, in case of a represented operation, the * classifier that owns this operation. * And the namespace of the statechart diagram should be * the namespace of its statemachine. */
WITHOUT_CLASSIFICATION	// The fix
WITHOUT_CLASSIFICATION	// A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	// Make all the parts match the main fig
WITHOUT_CLASSIFICATION	// and the stereotypes of its features
WITHOUT_CLASSIFICATION	// stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	/*         * Notation settings are different since, we know that, at a minimum,         * the isShowPath() setting can change because with implement         * PathContainer, so we make sure that we have a private copy of the         * notation settings.         */
WITHOUT_CLASSIFICATION	// null elements represent new constraints, which will be // added to the target the first time any actual editing // takes place.  This is done to ensure syntactical // correctness of constraints stored with the target.
WITHOUT_CLASSIFICATION	// Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	/**     * Constructor for a {@link FigClass} during file load.<p>     *     * Parent {@link org.argouml.uml.diagram.ui.FigNodeModelElement}     * will have created the main box {@link #getBigPort()} and its     * name {@link #getNameFig()} and stereotype     * (@link #getStereotypeFig()}. This constructor     * creates a box for the attributes and operations.<p>     *     * The properties of all these graphic elements are adjusted     * appropriately. The main boxes are all filled and have     * outlines.      * TODO: which is wrong, since the bigPort is filled, too.     *      * @param element model element to be represented by this fig.     * @param bounds rectangle describing bounds     * @param settings rendering settings     */
WITHOUT_CLASSIFICATION	// When this is called from PGMLStackParser.attachEdges, we finished // the initialization of owning pseudo element (CommentEdge)
WITHOUT_CLASSIFICATION	/* Do nothing by default. */
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Fill property cannot be changed.
WITHOUT_CLASSIFICATION	// Override superclass to do nothing. // Fill property cannot be changed.
WITHOUT_CLASSIFICATION	/** * A Fig designed to be the child of some FigNode or FigEdge to display the * stereotypes of the model element represented by the parent Fig. * Currently, multiple stereotypes are shown stacked one on top of the other, * each enclosed by guillemets.<p> * * The minimum width of this fig is the largest minimum width of its child * figs. The minimum height of this fig is the total minimum height of its child * figs.<p> * * The owner of this Fig is the UML element that is extended * with the stereotypes. We are listening to changes to the model: * addition and removal of stereotypes. <p> * * This fig supports showing one keyword * as the first "stereotype" in the list. <p> * * There is no way to remove a keyword fig, once added. <p> * * TODO: Allow for UML2 style display where all stereotypes are displayed in * the same guillemet pair and are delimited by commas. The style should be * changeable by calling getOrientation(Orientation). The swidget Orientation * class can be used for this. * @author Bob Tarling */
WITHOUT_CLASSIFICATION	// The source of an association end should not // be the classifier. If it is the user has drawn the wrong way // round so we swap here.
WITHOUT_CLASSIFICATION	/* We want to maintain a minimum width for the fig. Also, add the border         * dimensions to the minimum space required for its contents:         */
WITHOUT_CLASSIFICATION	// Make sure we don't try to set things smaller than the minimum
WITHOUT_CLASSIFICATION	/*         * If requested height equals needed height then do nothing; it fits         * exactly.         */
WITHOUT_CLASSIFICATION	//        LOG.log(Level.FINE, "Slope = " + theta / Math.PI + "PI " //                + theta / Math.PI * 180.0);
WITHOUT_CLASSIFICATION	/* Test-case for the above code:          * Draw a class.          * Create a stereotype for it by clicking on the prop-panel tool, and          * name it.         * Remove the class from the diagram.         * Drag the class from the explorer on the diagram.         * Select the stereotype in the explorer, and change         * its name in the prop-panel to something longer.         * The longer name does not make the class Fig wider          * unless the above code is added.*/
WITHOUT_CLASSIFICATION	// If we have no source and dest connector then we assume this is // load of an old UML1.4 diagram from before this data was saved // in PGML. For UML1.4 we can assume the source is first connection // and destination is last connection stored in repository for this // association.
WITHOUT_CLASSIFICATION	// Note that "multiplicity" is what is the notation is listening // for in UML1.4 "uppervalue" are listened to in UML2. It is not // currently why it is not required to register for "lowerValue" // also.
WITHOUT_CLASSIFICATION	// Some subclasses will try to use this
WITHOUT_CLASSIFICATION	// FigClass calls setBoundsImpl before we set // the stereotypeFigProfileIcon
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	// Perhaps something like the following would workd.  If not, then // traverse up the component hierarchy to a MultEditorPane //        Rectangle drawingArea = //            Globals.curEditor().getJComponent().getVisibleRect();
WITHOUT_CLASSIFICATION	// Default implementation is to do nothing
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Methods that implement the GraphModel itself // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // // Methods that implement the VetoableChangeListener interface // ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Only interested in the "ownedElement" property. Either something has // been added to the namespace for this model, or removed. In the // latter case the "something" will be in the old value of the // property, which is the collection of owned elements, and the new value // will be the element import describing the model element and the // model from which it was removed
WITHOUT_CLASSIFICATION	// The figs for the two end nodes
WITHOUT_CLASSIFICATION	// The figs for the two end nodes
WITHOUT_CLASSIFICATION	/**     * Private utility routine to work out the (positive) x coordinate of a     * point on an oval, given the radii and y coordinate.<p>     * TODO: Use this to calculate the separator lines!     *     * @param a  radius in X direction     * @param b  radius in Y direction     * @param y  Y coordinate     * @return   Positive X coordinate for the given Y coordinate     */
WITHOUT_CLASSIFICATION	// the responsibility of determining if the given target is a // correct one for this tab has been moved from the // DetailsPane to the member tabs of the details pane. Reason for // this is that the details pane is configurable and cannot // know what's the correct target for some tab.
WITHOUT_CLASSIFICATION	// If the diagram is empty, GEF won't write anything, leaving us with // an empty (and invalid) file.  Handle this case ourselves to prevent // this from happening.
WITHOUT_CLASSIFICATION	// NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that // saves a copy of the entire image in an internal buffer before // starting work, defeating the whole purpose of our incremental // rendering.
WITHOUT_CLASSIFICATION	// Expressions are DataTypes, not independent model elements // be careful not to reuse them
WITHOUT_CLASSIFICATION	/**     * TODO: The next text was copied - to adapt.     *      * Sets the target. If the old target is an UML Element, it also removes     * the model from the element listener list of the target. If the new target     * is an UML Element, the model is added as element listener to the     * new target. <p>     *     * This function is called when the user changes the target.      * Hence, this shall not result in any UML model changes.<p>     *      * This function looks a lot like the one in UMLComboBoxModel2.     * <p>     * As a possible future extension, we could allow listening to      * other model elements.     *      * @param theNewTarget the new target     */
WITHOUT_CLASSIFICATION	// fire all of the status events
WITHOUT_CLASSIFICATION	// fire all of the profile events
WITHOUT_CLASSIFICATION	// verify isRelevant returns true
WITHOUT_CLASSIFICATION	// DesignGoalsCM checks if the critic isRelevantToGoals of the Designer // this value is always true for the Critic base class so  // DesignerGoal should always return true in this condition
WITHOUT_CLASSIFICATION	// update the priority of the critic to be the same priority as the // decision
WITHOUT_CLASSIFICATION	// check that the model was initialized with one goal
WITHOUT_CLASSIFICATION	// number of goals should now be 0
WITHOUT_CLASSIFICATION	// Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	// FigAssociationRole figassociationrole = new FigAssociationRole();
WITHOUT_CLASSIFICATION	// initialize basic parameters that are // different from Decision.UNSPEC
WITHOUT_CLASSIFICATION	// verify parameters were initialized correctly by the constructor
WITHOUT_CLASSIFICATION	// verify the name property was correctly updated
WITHOUT_CLASSIFICATION	// following the update the priority should be // equivalent to Decision.UNSPEC
WITHOUT_CLASSIFICATION	// test that the category and description are correct
WITHOUT_CLASSIFICATION	// update the values
WITHOUT_CLASSIFICATION	// verify SnoozeOrder starts off not snoozed
WITHOUT_CLASSIFICATION	// snooze and verify its been enabled
WITHOUT_CLASSIFICATION	// snooze and verify its been enabled
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	// test with a class and class diagram
WITHOUT_CLASSIFICATION	//            pce = (PropertyChangeEvent) rxdEvent.getSource(); //            assertTrue("Wrong event name", //                    pce.getPropertyName().equals( //                            DiagramAppearance.KEY_DEFAULT_SHADOW_WIDTH.getKey())); //            String value = (String) pce.getOldValue(); //            int i = Integer.parseInt(value); //            assertTrue("Wrong old event value", i == 4); //            assertTrue("Wrong new event value", //                    ((String) pce.getNewValue()).equals("2"));
WITHOUT_CLASSIFICATION	// Change things
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	// Create a different client to bind to the same supplier
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	// success
WITHOUT_CLASSIFICATION	/*         * This comment was included in a previous version (before 1/2005)         * of the test which had this assertion commented out:         * ------         * Interaction should not be removed when removing ClassifierRole...         * maybe if the last message is removed from the interaction but even         * then it's doubtfull since it will probably lead to backward         * compatibility problems in save formats.         * ------         * but my reading of the UML 1.4 specification is that an Interaction         * without at least one message is definitely illegal, so MDR is         * doing the right thing by removing it in this case where we only         * have a single message, which then gets deleted. - tfm         */
WITHOUT_CLASSIFICATION	/*    * Get a list of UML metaclass names from the XMI document.    * <p>    * Though some of the DOM methods such as getAttributes    * may return null values under other conditions,    * in the context of this test    * and assuming a valid XMI file    * none should occur.    * <p>    * Hence there is no special checking for those abnormal    * cases, allowing the test to fail simply with a    * NullPointerException, with this comment indicating that    * either the input data is incorrect or the test needs    * to be improved.    */
WITHOUT_CLASSIFICATION	/**     * Test creating modelelements from a given notation, and then      * re-generate the notation-string again, and check if they are equal.     * Some of these tests are not very usefulll,      * since they may fail on white space differences.      * TODO: White space should best be ignored.      */
WITHOUT_CLASSIFICATION	// changing the sequence only
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	//ok
WITHOUT_CLASSIFICATION	// Make sure the contents match what we expect
WITHOUT_CLASSIFICATION	// Make sure we got what we started with
WITHOUT_CLASSIFICATION	// Clean up our model and the extent that we read profile in to
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// TODO: the following fails due to the XMI writing saving all top level // model elements and because even if there was no empty project, by // creating a class, the undo mechanism in the project manager will // force the creation of an empty project. //        assertEquals(1, profileModels.size());
WITHOUT_CLASSIFICATION	// we recalculate all the activations
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
IMPLEMENTATION	// TODO (@author karlpeder): Implementation of undo/redo missing
IMPLEMENTATION	// TODO (@author karlpeder): Implementation of undo/redo missing
IMPLEMENTATION	// TODO (@author karlpeder): Implementation of undo/redo missing
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: @author fdietz replace with regular expression
IMPLEMENTATION	// TODO finish marshalling of all available properties
IMPLEMENTATION	// TODO finish unmarshalling of all available properties
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO: @author fdietz replace with regular expression
IMPLEMENTATION	// TODO: @author fdietz replace with regular expression
IMPLEMENTATION	// TODO implement me!
IMPLEMENTATION	// TODO implement me!
IMPLEMENTATION	// TODO implement validation
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated constructor stub
IMPLEMENTATION	//TODO (@author fdietz): implement
IMPLEMENTATION	//TODO (@author fdietz): implement
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO implement
IMPLEMENTATION	// not implemented yet
IMPLEMENTATION	/**	 * 	 * create subject headerfield in using the senders message subject and	 * prepending "Re:" if not already there	 * 	 * @param header	 *            A <code>ColumbaHeader</code> which contains the headerfields	 *            of the message we want reply/forward.	 * 	 * FIXME (@author fdietz): we need to i18n this!	 */
IMPLEMENTATION	/**	 * 	 * create Subject headerfield in using the senders message subject and	 * prepending "Fwd:" if not already there	 * 	 * @param header	 *            A <code>ColumbaHeader</code> which contains the headerfields	 *            of the message we want reply/forward.	 * 	 * FIXME (@author fdietz): we need to i18n this!	 * 	 */
IMPLEMENTATION	// html - quoting is done by inserting a div around the // message formattet with a blue line at left edge // TODO (@author fdietz): Implement quoting (font color, stylesheet, // blockquote???)
IMPLEMENTATION	// TODO Auto-generated constructor stub
IMPLEMENTATION	// TODO (@author fdietz): show error dialoghere
IMPLEMENTATION	// TODO (@author fdietz): add error dialog
IMPLEMENTATION	// TODO (@author fdietz): add error dialog
IMPLEMENTATION	// TODO (@author karlpeder): Implementation of undo/redo missing
IMPLEMENTATION	//TODO (@author fdietz): keep track of progress here
IMPLEMENTATION	// TODO (@author javaprog):sizeComboBox can be enabled as // paragraphComboBox when implemented
IMPLEMENTATION	// TODO (@author fdietz):: implement action for font size combo box!
IMPLEMENTATION	//TODO (@author fdietz):  i18n
IMPLEMENTATION	// TODO (@author fdietz):  i18n
IMPLEMENTATION	// TODO localize filter action names
IMPLEMENTATION	// TODO localize filter action names
IMPLEMENTATION	// TODO implement clear()
IMPLEMENTATION	// TODO (@author fdietz): make i18n!
IMPLEMENTATION	// FIXME threaded-view auto collapse
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO @author hubms show if there is already a virtual folder for // this tag
IMPLEMENTATION	// TODO: Show dialog
IMPLEMENTATION	// update status message // TODO (@author fdietz): i18n
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	//TODO: Add dialog to inform user that the smtp server // does not support authentication
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// not needed
IMPLEMENTATION	// not needed
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: implement this
IMPLEMENTATION	// TODO: implement this
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO: @author fdietz replace with regular expression
IMPLEMENTATION	// TODO: @author fdietz replace with regular expression
IMPLEMENTATION	// TODO: @author fdietz replace with regular expression
WITHOUT_CLASSIFICATION	// MUST do this for background to show up.
WITHOUT_CLASSIFICATION	// XmlElement.printNode(item.getRoot(), "");
WITHOUT_CLASSIFICATION	// private MainInterface mainInterface;
WITHOUT_CLASSIFICATION	// retrieve list of all group members
WITHOUT_CLASSIFICATION	// example configuration (tree.xml): // // <filter description="gnome" enabled="true"> // <rules condition="matchany"> // <criteria criteria="contains" headerfield="To or Cc" pattern="gnome" type="To // or Cc"></criteria> // </rules> // <actionlist> // <action uid="120" type="Move Message"></action> // </actionlist> // </filter> //
WITHOUT_CLASSIFICATION	// if not specified return empty iterator
WITHOUT_CLASSIFICATION	// add all suffixes
WITHOUT_CLASSIFICATION	// list of prefixes
WITHOUT_CLASSIFICATION	// email addresses and phone numbers
WITHOUT_CLASSIFICATION	// ensure that we are currently in the contact component
WITHOUT_CLASSIFICATION	//	public String marshall(IStructureType type); //	public IStructureType unmarshall(String xmlString);
WITHOUT_CLASSIFICATION	/*   * public FilterCriteria getCriteria(int index) { return (FilterCriteria)   * list.get(index); }   */
WITHOUT_CLASSIFICATION	// passive: if not initialized do it now
WITHOUT_CLASSIFICATION	// passive: if not initialized do it now
WITHOUT_CLASSIFICATION	// still not ready, exit!
WITHOUT_CLASSIFICATION	// still not ready, exit!
WITHOUT_CLASSIFICATION	/*         * wait for stream threads to die         *          */
WITHOUT_CLASSIFICATION	// Set text, possibly with a mnemonic if defined using &
WITHOUT_CLASSIFICATION	// Set text, possibly with a mnemonic if defined using &
WITHOUT_CLASSIFICATION	// update table
WITHOUT_CLASSIFICATION	// set display text - possible with a mnemonic defined using &
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// close DB
WITHOUT_CLASSIFICATION	// get source reference
WITHOUT_CLASSIFICATION	// score message
WITHOUT_CLASSIFICATION	// if message is spam
WITHOUT_CLASSIFICATION	// mark message as spam
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// !!! Size = 12 // create filter configuration // -> check if <Subject> <contains> pattern <test>
WITHOUT_CLASSIFICATION	/*		 * xp[0] = x + 6; xp[1] = x + 12; xp[2] = x; yp[0] = y - (c.getHeight() /		 * 4); yp[1] = y + (c.getHeight() / 4); yp[2] = y + (c.getHeight() / 4);		 * 		 * g2.setColor(Color.white); g2.drawLine(xp[0], yp[0], xp[1], yp[1]);		 * g2.drawLine(xp[1], yp[1], xp[2], yp[2]); g2.setColor(Color.gray);		 * g2.drawLine(xp[2], yp[2], xp[0], yp[0]);		 */
WITHOUT_CLASSIFICATION	/*		 * l_year = new JLabel(); p1.add(l_year);		 */
WITHOUT_CLASSIFICATION	/*		 * JPanel p2 = new JPanel(); p2.setLayout(new		 * FlowLayout(FlowLayout.LEFT)); top.add("East", p2);		 * 		 * b_lyear = new JButton("<"); b_lyear.addActionListener( this );		 * //b_lyear.setMargin(KiwiUtils.emptyInsets);		 * b_lyear.setFocusPainted(false); b_lyear.setOpaque(false);		 * //b_lyear.addActionListener(this); p2.add(b_lyear);		 * 		 * l_year = new JLabel(); p2.add(l_year);		 * 		 * b_ryear = new JButton(">"); b_ryear.addActionListener( this );		 * //b_ryear.setMargin(KiwiUtils.emptyInsets);		 * b_ryear.setFocusPainted(false); b_ryear.setOpaque(false);		 * //b_ryear.addActionListener(this); p2.add(b_ryear);		 */
WITHOUT_CLASSIFICATION	// gc.draw3DRect(xp, yp, cellSize, cellSize, true); // if the cell is selected, fill it with the highlight color
WITHOUT_CLASSIFICATION	// apply transparent icon
WITHOUT_CLASSIFICATION	// search for mnemonic
WITHOUT_CLASSIFICATION	// mnemonic found // ...and not at the end of the string (which doesn't make sence)
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	// super(str); // set menu text incl. mnemonic if specified
WITHOUT_CLASSIFICATION	// icon (we can't use the setIcon-method this time, as it relies on the border being set)
WITHOUT_CLASSIFICATION	// Changing the Divider Border Visibility *********************************
WITHOUT_CLASSIFICATION	//if we stopped at line break, increase array index pointer
WITHOUT_CLASSIFICATION	// look and feel
WITHOUT_CLASSIFICATION	// look and feel
WITHOUT_CLASSIFICATION	// remember if Look And Feel has been changed
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// theme selection changed
WITHOUT_CLASSIFICATION	// Init PGP
WITHOUT_CLASSIFICATION	// get notified if search result arrived, to update view
WITHOUT_CLASSIFICATION	// use the collapse/expand icons from the JTree UI
WITHOUT_CLASSIFICATION	// use the collapse/expand icons from the JTree UI
WITHOUT_CLASSIFICATION	// if the collapsible is collapsed, we do not want its border to be // painted.
WITHOUT_CLASSIFICATION	//			g.setColor(borderColor2); //			g.drawLine(x, y + height - 1, x + width, y + height - 1);
WITHOUT_CLASSIFICATION	//		JScrollPane scrollPane = new JScrollPane(tree); //		scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED); //		 //		add(scrollPane, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	// Init Plugins
WITHOUT_CLASSIFICATION	//		titlebar.setMidColor(INACTIVE_MID_COLOR); //		titlebar.setFillColor(INACTIVE_FILL_COLOR); // //		titlebar.setTitleColor(INACTIVE_LABEL_COLOR, INACTIVE_MID_COLOR, false);
WITHOUT_CLASSIFICATION	// contentPanel.setBorder(new LineBorder(ACTIVE_BORDER_COLOR, 1));
WITHOUT_CLASSIFICATION	// setBorder(BorderFactory.createEmptyBorder(2, 5, 3, 0)); //setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));
WITHOUT_CLASSIFICATION	// builder2.addFixedNarrow((JButton) leftButtonVector.get(i)); // builder2.addStrut(Sizes.pixel(2));
WITHOUT_CLASSIFICATION	// GradientPaint painter = new GradientPaint(0, 0, midColor.brighter(), // 0, 5, midColor); // g2.setPaint(painter); //		 // g2.fillRect(0,0,w,5); //		 // new GradientPaint(0, h-1, midColor, 0, h-1-5, Color.red); // g2.setPaint(painter); //		 // g2.fillRect(0,h-5,w,5);
WITHOUT_CLASSIFICATION	// GeneralPath path = generatePath(h, w); // g2.setColor(fillColor); // g2.fill(path); // // path = generateTopPath(w); // GradientPaint painter = new GradientPaint(0, 0, startColor, 0, 5, // midColor); // g2.setPaint(painter); // g2.fill(path); // // path = generatePath(h, w); // g2.setColor(UIManager.getColor("controlDkShadow")); // g2.draw(path);
WITHOUT_CLASSIFICATION	// the indent-number attribute causes an IllegalArgumentException under 1.4 
WITHOUT_CLASSIFICATION	//		titleBar.addButton(new PinIcon(), //				new PinAction(this.getPersistentId()), BorderLayout.EAST); //		titleBar.addButton(new MaximizeIcon(), new MaximizeAction(this //				.getPersistentId()), BorderLayout.EAST);
WITHOUT_CLASSIFICATION	// this is executed on shutdown: store all open frames so that they // can be restored on the next start
WITHOUT_CLASSIFICATION	// clear the tooltip message previously displayed in the status bar
WITHOUT_CLASSIFICATION	// overwrite this method
WITHOUT_CLASSIFICATION	// remove from old mediator's listener list
WITHOUT_CLASSIFICATION	// use new viewitem
WITHOUT_CLASSIFICATION	// use new viewitem
WITHOUT_CLASSIFICATION	// *20030831, karlpeder* Also location is restored
WITHOUT_CLASSIFICATION	// awt-event-thread
WITHOUT_CLASSIFICATION	// awt-event-thread
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// short cut key
WITHOUT_CLASSIFICATION	//		OptionsItem optionsItem = MailConfig.getInstance().getOptionsItem(); //		String selectedBrowser = optionsItem.getStringWithDefault( //				OptionsItem.MESSAGEVIEWER, OptionsItem.SELECTED_BROWSER, //				"Default");
WITHOUT_CLASSIFICATION	// in case of an error -> fall-back to Swing's built-in JTextPane
WITHOUT_CLASSIFICATION	// update tree model
WITHOUT_CLASSIFICATION	/*            PluginManager.getInstance().setEnabled(id,                ((Boolean) value).booleanValue());                */
WITHOUT_CLASSIFICATION	// mainPanel.add( topBorderPanel, BorderLayout.NORTH );
WITHOUT_CLASSIFICATION	/*		 * listView = new FilterListTable(filterList, this);		 * listView.getSelectionModel().addListSelectionListener(this);		 * JScrollPane scrollPane = new JScrollPane(listView);		 * scrollPane.setPreferredSize(new Dimension(300, 250));		 * scrollPane.getViewport().setBackground(Color.white);		 * centerPanel.add(scrollPane);		 */
WITHOUT_CLASSIFICATION	/*         * Component strut2 = Box.createRigidArea(new Dimension(30, 5));         * gridBagLayout.setConstraints(strut2, c); eastPanel.add(strut2);         *         * gridBagLayout.setConstraints(defaultButton, c);         * eastPanel.add(defaultButton);         */
WITHOUT_CLASSIFICATION	// save to profiles.xml
WITHOUT_CLASSIFICATION	// save to profiles.xml
WITHOUT_CLASSIFICATION	// save to profiles.xml
WITHOUT_CLASSIFICATION	//top.setBackground(titleBackground);
WITHOUT_CLASSIFICATION	// start a new search -> clear all previous search results
WITHOUT_CLASSIFICATION	// start a new search -> clear all previous search results
WITHOUT_CLASSIFICATION	// add result panel as listener for new search results
WITHOUT_CLASSIFICATION	// create list of search requests
WITHOUT_CLASSIFICATION	// create a rounded clip LARGER than the comp
WITHOUT_CLASSIFICATION	// fill the clipped area // g2d.setPaint(LIGHT_GRADIENT);
WITHOUT_CLASSIFICATION	// paint inner border // g2d.setPaint(INNER);
WITHOUT_CLASSIFICATION	// builder.append(moreButton);
WITHOUT_CLASSIFICATION	// get first provider //				ISearchProvider provider = searchPanel.getSearchManager() //						.getAllProviders().next(); //				ISearchCriteria defaultCriteria = null; // //				SearchBar.this.searchPanel.searchInCriteria( //						textField.getText(), provider.getTechnicalName(), //						provider.getDefaultCriteria(textField.getText()) //								.getTechnicalName(), searchInsideCheckBox //								.isSelected());
WITHOUT_CLASSIFICATION	// Map<String, ISearchProvider> historyMap = SearchHistoryList // .getInstance().getHistoryMap();
WITHOUT_CLASSIFICATION	// setBorder(BorderFactory.createEmptyBorder(1, 2, 1, 2));
WITHOUT_CLASSIFICATION	// layoutComponents();
WITHOUT_CLASSIFICATION	//		taskButton = new JButton(); //		taskButton.setIcon(ImageLoader.getImageIcon("group_small.png")); //		taskButton.setToolTipText("Show list of running tasks"); //		taskButton.setRolloverEnabled(true); //		taskButton.setActionCommand("TASKMANAGER"); //		taskButton.addActionListener(this); // //		taskButton.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
WITHOUT_CLASSIFICATION	// protected void layoutComponents() { // setLayout(new BorderLayout()); // // leftMainPanel = new JPanel(); // leftMainPanel.setLayout(new BorderLayout()); // // JPanel taskPanel = new JPanel(); // taskPanel.setLayout(new BorderLayout()); // // // Border border = getDefaultBorder(); // //Border margin = new EmptyBorder(0, 0, 0, 2); // // // taskPanel.setBorder(new CompoundBorder(border, margin)); // // taskPanel.add(taskButton, BorderLayout.CENTER); // // leftMainPanel.add(taskPanel, BorderLayout.WEST); // JPanel labelPanel = new JPanel(); // labelPanel.setLayout(new BorderLayout()); // // margin = new EmptyBorder(0, 10, 0, 10); // // labelPanel.setBorder(new CompoundBorder(border, margin)); // // // margin = new EmptyBorder(0, 0, 0, 2); // labelPanel.add(label, BorderLayout.CENTER); // // leftMainPanel.add(labelPanel, BorderLayout.CENTER); // // add(leftMainPanel, BorderLayout.CENTER); // // mainRightPanel = new JPanel(); // mainRightPanel.setLayout(new BorderLayout()); // // JPanel progressPanel = new JPanel(); // progressPanel.setLayout(new BorderLayout()); // // progressPanel.setBorder(new CompoundBorder(border, margin)); // // progressPanel.add(progressBar, BorderLayout.CENTER); // // JPanel rightPanel = new JPanel(); // rightPanel.setLayout(new BorderLayout()); // // rightPanel.add(progressPanel, BorderLayout.CENTER); // // JPanel onlinePanel = new JPanel(); // onlinePanel.setLayout(new BorderLayout()); // // onlinePanel.setBorder(new CompoundBorder(border, margin)); // // onlinePanel.add(onlineButton, BorderLayout.CENTER); // // rightPanel.add(onlinePanel, BorderLayout.EAST); // add(rightPanel, BorderLayout.EAST); // } // public Border getDefaultBorder() { // return UIManager.getBorder("TableHeader.cellBorder"); // }
WITHOUT_CLASSIFICATION	//	public static JButton createAnimatedIconButton() { //		ImageSequenceTimer button = new ImageSequenceTimer(); // //		return button; //	}
WITHOUT_CLASSIFICATION	// menu.add(new CMenuItem(new OpenNewMailWindowAction(null))); // menu.add(new CMenuItem(new // OpenNewAddressbookWindowAction(null))); // menu.addSeparator(); // menu.add(new CMenuItem(new AboutDialogAction(null))); // menu.add(new CMenuItem(new ShowHelpAction(null))); // menu.addSeparator(); // menu.add(new CMenuItem(new ExitAction(null)));
WITHOUT_CLASSIFICATION	// does not occur
WITHOUT_CLASSIFICATION	// does not occur
WITHOUT_CLASSIFICATION	// register interested on changes in the running worker list
WITHOUT_CLASSIFICATION	// register as configuration change listener
WITHOUT_CLASSIFICATION	// should we really overwrite the Look and Feel font settings
WITHOUT_CLASSIFICATION	/*        UIManager.put("Label.font", mainFont);        UIManager.put("Textfield.font", mainFont);        UIManager.put("TextArea.font", mainFont);        UIManager.put("MenuItem.font", mainFont);        UIManager.put("MenuItem.acceleratorFont", mainFont);        UIManager.put("Menu.font", mainFont);        UIManager.put("Menu.acceleratorFont", mainFont);        UIManager.put("MenuBar.font", mainFont);        UIManager.put("Tree.font", mainFont);        UIManager.put("Table.font", mainFont);        UIManager.put("Button.font", mainFont);        UIManager.put("CheckBoxButton.font", mainFont);        UIManager.put("RadioButton.font", mainFont);        UIManager.put("ComboBox.font", mainFont);        UIManager.put("ToggleButton.font", mainFont);        UIManager.put("CheckBoxMenuItem.font", mainFont);        UIManager.put("RadioButtonMenuItem.font", mainFont);        UIManager.put("TabbedPane.font", mainFont);        UIManager.put("List.font", mainFont);        */
WITHOUT_CLASSIFICATION	// mark found pattern (select) //text.grabFocus();				
WITHOUT_CLASSIFICATION	// attempt
WITHOUT_CLASSIFICATION	// If the fifo could not be restored initialize it
WITHOUT_CLASSIFICATION	// // we can't just load the first constructor // -> go find the correct constructor based // -> based on the arguments //
WITHOUT_CLASSIFICATION	// // we can't just load the first constructor // -> go find the correct constructor based // -> based on the arguments //
WITHOUT_CLASSIFICATION	// do nothinh here ... use finalClose
WITHOUT_CLASSIFICATION	// cancel
WITHOUT_CLASSIFICATION	// cancel
WITHOUT_CLASSIFICATION	// cancel
WITHOUT_CLASSIFICATION	// e.printStackTrace();
WITHOUT_CLASSIFICATION	// System.setProperty("javax.net.debug", // "ssl,handshake,data,trustmanager"); // init java.net.ssl // debugging
WITHOUT_CLASSIFICATION	// retrieve inputstream from resource
WITHOUT_CLASSIFICATION	// use default Java classlodaer
WITHOUT_CLASSIFICATION	// startup Columba
WITHOUT_CLASSIFICATION	// stop server when shutting down
WITHOUT_CLASSIFICATION	// we add every jar-file in /lib, too // plugin-directory
WITHOUT_CLASSIFICATION	// client isn't from local machine
WITHOUT_CLASSIFICATION	// "store" html in jTextPane container // reset starting position in y-direction
WITHOUT_CLASSIFICATION	// set Look & Feel
WITHOUT_CLASSIFICATION	/*             * *20030609, karlpeder* Introduced scaling             */
WITHOUT_CLASSIFICATION	/*             * *20030609, karlpeder* Introduced scaling             */
WITHOUT_CLASSIFICATION	//		 handle commandline parameters
WITHOUT_CLASSIFICATION	// child views exist - operate recursively on these
WITHOUT_CLASSIFICATION	// Add the tray icon to the System tray // ColumbaTrayIcon.getInstance().addToSystemTray( // FrameManager.getInstance().getActiveFrameMediator() // .getFrameMediator());
WITHOUT_CLASSIFICATION	// no childs - we have a leaf view (i.e. with contents)
WITHOUT_CLASSIFICATION	// call the postStartups of the modules // e.g. check for default mailclient
WITHOUT_CLASSIFICATION	/*         * calculate a new break height according to the contents, possibly         * smaller to break before some content (i.e. not to break in the         * middle of something         */
WITHOUT_CLASSIFICATION	// // following internal components plugin registration //
WITHOUT_CLASSIFICATION	// oops, something went wrong
WITHOUT_CLASSIFICATION	// Platform maintainers: add your platform here
WITHOUT_CLASSIFICATION	/*                 * If the height of a view exceeds the paperheight, there should                 * be no break before (since it will be impossible to fit it in                 * anywhere => an infinite loop). We don't have access to the                 * pageheight here, therefore an "educated guess" is made:                 * No breaks are inserted before views starting within the first                 * 1% (chosen to avoid round-off errors) of the available space                 * given by actBreakHeight. If the view starts after the first 1%,                 * a break is inserted and the view will start at the top of the                 * next page (i.e. withing the first 1% this time).                 */
WITHOUT_CLASSIFICATION	// no configuration available, create default config
WITHOUT_CLASSIFICATION	// no configuration available, create default config
WITHOUT_CLASSIFICATION	// create new locale xml treenode
WITHOUT_CLASSIFICATION	/*			 * classLoader = ClassLoader.getSystemClassLoader();			 */
WITHOUT_CLASSIFICATION	// use ResourceBundle's internal classloader
WITHOUT_CLASSIFICATION	// use ResourceBundle's internal classloader
WITHOUT_CLASSIFICATION	/*           * I specifically want this here to ensure that the directory exists and           * this method never returns null.           *           * Any files that were in the observation list have already been           * previously removed by checkFiles().           */
WITHOUT_CLASSIFICATION	/* remove from script list */
WITHOUT_CLASSIFICATION	// add toolbar button between last button and cancel button
WITHOUT_CLASSIFICATION	/*        * it's the script responsability to define the "metadata" by invoking        * .setName(), .setAuthor() and .setDescription()        */
WITHOUT_CLASSIFICATION	/*        * it's the script responsability to define the "metadata" by invoking        * .setName(), .setAuthor() and .setDescription()        */
WITHOUT_CLASSIFICATION	// stop background-manager so it doesn't interfere with // shutdown manager
WITHOUT_CLASSIFICATION	// wait 10 seconds and check for pending commands again // this is useful if a command causes a deadlock
WITHOUT_CLASSIFICATION	// clear
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// is true if the last search was successful // a position of the word after the last search ivokation; -1 if nothing found // a position of the word after the last replace ivokation; -1 if nothing was replaced
WITHOUT_CLASSIFICATION	// false if search/replace is currently working
WITHOUT_CLASSIFICATION	// some other version of the constructor
WITHOUT_CLASSIFICATION	// the implementation of the search function. It returns always the position of the FIRST found word.
WITHOUT_CLASSIFICATION	// Determine whether there are 1, 2, or 3 names specified. These names should be separated by spaces //	or commas. If a comma separates the first two names, assume that the last name is specified first,  //	Otherwise, assume the first name is specified first. Middle name is always specified after the first name.
WITHOUT_CLASSIFICATION	// Buffer for collecting data from // the "characters" SAX event.
WITHOUT_CLASSIFICATION	// setup and load constructor
WITHOUT_CLASSIFICATION	// Create the XML reader... // xr = XMLReaderFactory.createXMLReader();
WITHOUT_CLASSIFICATION	// Set the ContentHandler... // xr.setContentHandler( this );
WITHOUT_CLASSIFICATION	// Resetting contents buffer. // Assuming that tags either tag content or children, not both. // This is usually the case with XML that is representing // data strucutures in a programming language independant way. // This assumption is not typically valid where XML is being // used in the classical text mark up style where tagging // is used to style content and several styles may overlap // at once.
WITHOUT_CLASSIFICATION	/* * Test for int hashCode(). */
WITHOUT_CLASSIFICATION	/* * Test for boolean equals(Object) */
WITHOUT_CLASSIFICATION	/* * Test for boolean equals(Object) */
WITHOUT_CLASSIFICATION	// top-level structure
WITHOUT_CLASSIFICATION	// top-level structure
WITHOUT_CLASSIFICATION	// mandatory String-based attribute
WITHOUT_CLASSIFICATION	// remove configuration directory
WITHOUT_CLASSIFICATION	/*LinkedList testList = new LinkedList(listFull_I);ListTools.intersect(testList,listFull_I);assertTrue(testList.equals(listFull_I));testList = new LinkedList(listFull_I);ListTools.intersect(testList,new LinkedList());assertTrue(testList.size()==0);testList = new LinkedList(listFull_I);ListTools.intersect(testList,listPart1_I);assertTrue(testList.equals(listPart1_I));testList = new LinkedList(listFull_I);ListTools.intersect(testList,listPart2_I);assertTrue(testList.equals(listPart2_I));testList = new LinkedList(listPart1_I);ListTools.intersect(testList,listPart2_I);assertTrue(testList.size()==0);*/
WITHOUT_CLASSIFICATION	//mod: 20040629 SWITT for redirecting feature //If FROM value was set, take this as From, else take Identity
WITHOUT_CLASSIFICATION	/*			 * BufferedReader in = new BufferedReader( new InputStreamReader(			 * new FileInputStream(file), model.getCharsetName()));			 */
WITHOUT_CLASSIFICATION	// Set Default Charset or selected
WITHOUT_CLASSIFICATION	// check if the charset is US-ASCII then there is something wrong // -> switch to UTF-8 and write to log-file
WITHOUT_CLASSIFICATION	/*		 * *20030921, karlpeder* The old code was (accidentially!?) modifying		 * the attachment list of the model. This affects the composing when		 * called a second time for saving the message after sending!		 */
WITHOUT_CLASSIFICATION	// Set recipients from the recipients vector
WITHOUT_CLASSIFICATION	/*     * validates a hostname, i.e.:     * mail.myhost.com     * mail.us.myhost.com     * 127.0.0.1     * */
WITHOUT_CLASSIFICATION	// return default-account ImapItem instead 
WITHOUT_CLASSIFICATION	// return default-account ImapItem instead 
WITHOUT_CLASSIFICATION	// return default-account ImapItem instead 
WITHOUT_CLASSIFICATION	//private File file;
WITHOUT_CLASSIFICATION	/*public AdapterNode addEmptyFilterCriteria(AdapterNode filterRuleNode) {        Element child = createElementNode("filtercriteria");        Element subNode = createTextElementNode("headeritem", "Subject");        addElement(child, subNode);        subNode = createTextElementNode("criteria", "contains");        addElement(child, subNode);        subNode = createTextElementNode("pattern", "pattern");        addElement(child, subNode);        subNode = createTextElementNode("type", "Subject");        addElement(child, subNode);        filterRuleNode.domNode.appendChild(child);        return new AdapterNode(child);}*/
WITHOUT_CLASSIFICATION	//  // options.xml // //<options> // <gui> //  <messageviewer inline_attachments="false"> //   <smilies enabled="true" /> //   <quote color="0" enabled="true" /> //  </messageviewer> //  <tree> //   <sorting sorted="true" ascending="true" comparator="alphabetic" /> //  </tree> // </gui> // <html prefer="true" /> // <markasread delay="2" enabled="true" /> // <headerviewer style="0" headerfields="Subject Date Reply-To From To Cc Bcc" /> //</options>
WITHOUT_CLASSIFICATION	// Choice btw. text and html will be based on stored option
WITHOUT_CLASSIFICATION	// example: "columba://org.columba.mail/<folder-id>/<message-id>"
WITHOUT_CLASSIFICATION	// retrieve Command of filter action
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// create reference
WITHOUT_CLASSIFICATION	// create reference
WITHOUT_CLASSIFICATION	// create reference
WITHOUT_CLASSIFICATION	// create reference
WITHOUT_CLASSIFICATION	// create reference
WITHOUT_CLASSIFICATION	// create reference
WITHOUT_CLASSIFICATION	// if there is no search engine, try the default one
WITHOUT_CLASSIFICATION	// iterate through all foldertypes to find suitable ones
WITHOUT_CLASSIFICATION	// Add child to parent
WITHOUT_CLASSIFICATION	// register interest on tree node changes
WITHOUT_CLASSIFICATION	// no filterlist treenode found // -> create a new one
WITHOUT_CLASSIFICATION	// get message with UID
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// parse header
WITHOUT_CLASSIFICATION	// message is already cached // try to compare the headerfield count of // the actually parsed message with the cached // headerfield count
WITHOUT_CLASSIFICATION	// We need to parse // get message with UID
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	/*		 * // use wrapper class for easier handling of references array adapter =		 * new FolderCommandAdapter( (MailFolderCommandReference[])		 * getReferences());		 *  // get array of source references MailFolderCommandReference[] r =		 * adapter.getSourceFolderReferences();		 */
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// skip if message is *not* marked as spam
WITHOUT_CLASSIFICATION	// move message to user-configured folder (generally "Junk" // folder)
WITHOUT_CLASSIFICATION	// get color from factory // ->factory shares color objects to save memory
WITHOUT_CLASSIFICATION	// create virtual folder (is attached to parentFolder)
WITHOUT_CLASSIFICATION	// get destination foldedr
WITHOUT_CLASSIFICATION	// two different root folders // -> get inputstream from source-folder and add it to // -> destination-folder as inputstream // -----> moving of raw message source // (works also for copying from local to IMAP folders, etc.
WITHOUT_CLASSIFICATION	// We are done - clear the status message with a delay
WITHOUT_CLASSIFICATION	// setup dialog title, active filter and file name
WITHOUT_CLASSIFICATION	// save message
WITHOUT_CLASSIFICATION	// Does the user prefer html or plain text?
WITHOUT_CLASSIFICATION	// decode message body with respect to charset
WITHOUT_CLASSIFICATION	// decode message body with respect to charset
WITHOUT_CLASSIFICATION	// use body as is
WITHOUT_CLASSIFICATION	// insert into message right after <body...>
WITHOUT_CLASSIFICATION	// test on extension
WITHOUT_CLASSIFICATION	// check if virtual folder, if yes, do not use these uids, use the // real uids instead
WITHOUT_CLASSIFICATION	// DateFormat
WITHOUT_CLASSIFICATION	/*                 * *20031216, karlpeder* Changed handling of dates.                 * Previously columba.date header was used. Now we                 * use the Date header instead                 */
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// display status message
WITHOUT_CLASSIFICATION	// display status message
WITHOUT_CLASSIFICATION	// display status message
WITHOUT_CLASSIFICATION	// skip, if filter is disabled
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// First sort so that Events from one folder stick together
WITHOUT_CLASSIFICATION	// First sort so that Events from one folder stick together
WITHOUT_CLASSIFICATION	// First sort so that Events from one folder stick together
WITHOUT_CLASSIFICATION	// First sort so that Events from one folder stick together
WITHOUT_CLASSIFICATION	// message size should be at least 1 KB
WITHOUT_CLASSIFICATION	// save boolean headerfields, compressing them to one int value
WITHOUT_CLASSIFICATION	// If we have new messages add them to the headerlist
WITHOUT_CLASSIFICATION	// -2 because of the decrement in line 317 // removedLocalUids = localUids.size() - 2 - position;
WITHOUT_CLASSIFICATION	// Find missing uids loop
WITHOUT_CLASSIFICATION	// Sanity tests
WITHOUT_CLASSIFICATION	// update headerlist of destination-folder // -> this is necessary to reflect the changes visually // but only do it if the target folder is still in sync!
WITHOUT_CLASSIFICATION	// super(node, folderItem); // super(getDefaultItem("IMAPRootFolder", getDefaultProperties()));
WITHOUT_CLASSIFICATION	// if have already a suitable folder skip the search
WITHOUT_CLASSIFICATION	// parse line by line
WITHOUT_CLASSIFICATION	// if line doesn't start with "From" or line length is 0 //  -> save everything in StringBuffer
WITHOUT_CLASSIFICATION	// setup filter configuration
WITHOUT_CLASSIFICATION	// only create new subfolders if we used the default "Search Folder"
WITHOUT_CLASSIFICATION	// update tree-node (for renaming the new folder)
WITHOUT_CLASSIFICATION	// if the parent is a virtual folder the search cannot be applied directly // look for the correct uids by finding the first non virtual folder
WITHOUT_CLASSIFICATION	// Now we can search this folder since no mail from // this folder will come in the list
WITHOUT_CLASSIFICATION	// get list of plugins
WITHOUT_CLASSIFICATION	// load plugin
WITHOUT_CLASSIFICATION	// notify observers (sorting state submenu)
WITHOUT_CLASSIFICATION	// String definitions for the charsetnames // NOTE: these are also used to look up the // menuentries from the resourceloader
WITHOUT_CLASSIFICATION	// simulate charset changed to initialize selectedMenuItem
WITHOUT_CLASSIFICATION	// set default html or text based on stored option // ... can be overridden by setting the composer model
WITHOUT_CLASSIFICATION	// default value is 200 pixel // int pos = // viewItem.getIntegerWithDefault("splitpanes","attachment", 200);
WITHOUT_CLASSIFICATION	/*		 * *20030906, karlpeder* Method signature changed to return an		 * AbstractEditorController		 */
WITHOUT_CLASSIFICATION	// don't prompt user if composer should be closed
WITHOUT_CLASSIFICATION	// close Columba, if composer is only visible frame
WITHOUT_CLASSIFICATION	// close Columba, if composer is only visible frame
WITHOUT_CLASSIFICATION	//setText(accountName);
WITHOUT_CLASSIFICATION	/*		 * int index = locationToIndex(new Point(x, y));		 * 		 * setSelectedIndex(index);		 */
WITHOUT_CLASSIFICATION	/*			 * model.setSignMessage(signMenuItem.isSelected());			 * model.setEncryptMessage(encryptMenuItem.isSelected());			 */
WITHOUT_CLASSIFICATION	// attachment controller doesn't support paste actions
WITHOUT_CLASSIFICATION	// attachment controller doesn't support redo operation
WITHOUT_CLASSIFICATION	// get first selected message
WITHOUT_CLASSIFICATION	// get first selected message
WITHOUT_CLASSIFICATION	// get headerfields
WITHOUT_CLASSIFICATION	// get headerfields
WITHOUT_CLASSIFICATION	// create composer model
WITHOUT_CLASSIFICATION	// set subject
WITHOUT_CLASSIFICATION	// setup to, references and account
WITHOUT_CLASSIFICATION	// Which Bodypart shall be shown? (html/plain)
WITHOUT_CLASSIFICATION	// Which Bodypart shall be shown? (html/plain)
WITHOUT_CLASSIFICATION	// Do decoding stuff
WITHOUT_CLASSIFICATION	// Quote original message - different methods for text and html
WITHOUT_CLASSIFICATION	// Html: Insertion of text before and after original message // get necessary headerfields
WITHOUT_CLASSIFICATION	// Html: Insertion of text before and after original message // get necessary headerfields
WITHOUT_CLASSIFICATION	// Remove duplicates or the mail address from the receiver account
WITHOUT_CLASSIFICATION	// select the account this mail was received from
WITHOUT_CLASSIFICATION	// remove the bodypart from the mimeparts // that are added to the attachment viewer
WITHOUT_CLASSIFICATION	// debug output
WITHOUT_CLASSIFICATION	// choose addressbook
WITHOUT_CLASSIFICATION	// try to fill the contact list
WITHOUT_CLASSIFICATION	// folder selection changed
WITHOUT_CLASSIFICATION	// register for text selection changes // controller.getEditorController().addObserver(this);
WITHOUT_CLASSIFICATION	// set initial enabled state of combo boxes // XmlElement optionsElement = MailConfig.getInstance().get( // "composer_options").getElement("/options"); // XmlElement htmlElement = optionsElement.getElement("html"); // String s = htmlElement.getAttribute("enable", "false"); // boolean enableHtml = Boolean.valueOf(s).booleanValue();
WITHOUT_CLASSIFICATION	// FormLayout layout = new FormLayout( // "default, 3dlu, default, 3dlu, default, 3dlu, " // + "default, 3dlu, default, 3dlu, default, 3dlu, " // + "default, 6dlu, default, 3dlu, default, 3dlu, " // + "default, 3dlu", "fill:default"); // PanelBuilder b = new PanelBuilder(this, layout); // // CellConstraints c = new CellConstraints(); // // b.add(paragraphComboBox, cc.xy(1, 1)); // b.add(sizeLabel, cc.xy(3, 1)); // b.add(sizeComboBox, cc.xy(5, 1)); // b.add(boldFormatButton, cc.xy(7, 1)); // b.add(italicFormatButton, cc.xy(9, 1)); // b.add(underlineFormatButton, cc.xy(11, 1)); // b.add(strikeoutFormatButton, cc.xy(13, 1)); // b.add(leftJustifyButton, cc.xy(15, 1)); // b.add(centerJustifyButton, cc.xy(17, 1)); // b.add(rightJustifyButton, cc.xy(19, 1));
WITHOUT_CLASSIFICATION	// Handling of paragraph combo box // select the item in the combo box corresponding to present format
WITHOUT_CLASSIFICATION	// this can throw a ChangedCharsetException
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// register interest on configuratin changes
WITHOUT_CLASSIFICATION	/*		 * *20030906, karlpeder* Method signature changed to take an		 * AbstractEditorController (instead of an TextEditorView) as parameter		 * since the view is no longer directly available		 */
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them // here)
WITHOUT_CLASSIFICATION	// Add components to the panel: //		builder.append(defaultAccountCheckBox, 7); //		builder.nextLine();
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need // to // define them here)
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need // to // define them here)
WITHOUT_CLASSIFICATION	/*		 * builder.append(sslLabel, 3); builder.nextLine();		 *		 * builder.append(disableSSLConnectionRadioButton, 2);		 * builder.nextLine(); builder.append(enableSSLConnectionRadioButton,		 * 2); builder.nextLine();		 * builder.append(enableSTARTTLSExtensionRadioButton, 2);		 * builder.nextLine();		 */
WITHOUT_CLASSIFICATION	// Account is an IMAP account -> change root folder name
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them here)
WITHOUT_CLASSIFICATION	// setBorder(selectedBorder);
WITHOUT_CLASSIFICATION	// list.repaint();
WITHOUT_CLASSIFICATION	// ask the user about the destination file
WITHOUT_CLASSIFICATION	// ask the user about the destination file
WITHOUT_CLASSIFICATION	/*	 * private JTextField textField; private JPanel leftPanel; private	 * JTabbedPane rightPanel; private JButton addButton; private JButton	 * removeButton; private JButton editButton; private JButton upButton;	 * private JButton downButton;	 * 	 * private JFrame frame;	 */
WITHOUT_CLASSIFICATION	// this probably means that the configuration // is wrong // -> change this to a sane default value
WITHOUT_CLASSIFICATION	// if it is in a table, then we need to insert it at the // selected position.
WITHOUT_CLASSIFICATION	/*		 * matchComboBox.addItem("is"); matchComboBox.addItem("is not");		 * matchComboBox.addItem("begins with"); matchComboBox.addItem("ends		 * with");		 */
WITHOUT_CLASSIFICATION	// remove all options
WITHOUT_CLASSIFICATION	/*		 * builder.append(quotedColorCheckBox, quotedColorButton);		 * builder.nextLine();		 */
WITHOUT_CLASSIFICATION	// add filter criteria
WITHOUT_CLASSIFICATION	// add filter criteria
WITHOUT_CLASSIFICATION	// add filter criteria
WITHOUT_CLASSIFICATION	// don't search in subfolders recursively
WITHOUT_CLASSIFICATION	// messageController.createPopupMenu();
WITHOUT_CLASSIFICATION	// Unregister/register as Folder listener
WITHOUT_CLASSIFICATION	// get selected row
WITHOUT_CLASSIFICATION	/*	 * protected XmlElement createDefaultConfiguration(String id) { XmlElement	 * child = super.createDefaultConfiguration(id);	 * 	 * XmlElement splitpanes = new XmlElement("splitpanes");	 * splitpanes.addAttribute("main", "200"); splitpanes.addAttribute("header",	 * "200"); splitpanes.addAttribute("attachment", "100");	 * child.addElement(splitpanes);	 * 	 * return child; }	 */
WITHOUT_CLASSIFICATION	// putValue(LARGE_ICON, ImageLoader.getIcon(IconKeys.DOCUMENT_SAVE_AS));
WITHOUT_CLASSIFICATION	// get selected message UID
WITHOUT_CLASSIFICATION	// if the message it not yet seen
WITHOUT_CLASSIFICATION	// date area grid line
WITHOUT_CLASSIFICATION	// horizontal grid lines
WITHOUT_CLASSIFICATION	// vertical light gray column separator line
WITHOUT_CLASSIFICATION	// horizontal light gray column separator line
WITHOUT_CLASSIFICATION	// define activity layout
WITHOUT_CLASSIFICATION	// dateAreaBean.setActivityDepositoryContext(); // dateAreaBean.getDateArea().setActivitiesSupported(true);
WITHOUT_CLASSIFICATION	// showing the week number
WITHOUT_CLASSIFICATION	// // activity setup // 
WITHOUT_CLASSIFICATION	// wrap with observable stream for progress bar updates
WITHOUT_CLASSIFICATION	// monthlyActivityAShapeBean = new ActivityAShapeBean();
WITHOUT_CLASSIFICATION	//      map selection to this temporary message
WITHOUT_CLASSIFICATION	// something really got wrong here -> show error dialog // JOptionPane.showMessageDialog(null, e.getMessage());
WITHOUT_CLASSIFICATION	// There is no charset info -> the default system charset is // used
WITHOUT_CLASSIFICATION	// enable timer
WITHOUT_CLASSIFICATION	/*	 * private String body;	 *	 * private URL url;	 */
WITHOUT_CLASSIFICATION	// if HTML stripping is enabled
WITHOUT_CLASSIFICATION	// read configuration from options.xml file // create css-stylesheet string // set font of html-element <P>
WITHOUT_CLASSIFICATION	// vertical // grid // lines
WITHOUT_CLASSIFICATION	// dark gray line at 12 and 13
WITHOUT_CLASSIFICATION	// vertical grid lines
WITHOUT_CLASSIFICATION	// light gray line every day
WITHOUT_CLASSIFICATION	// select current day
WITHOUT_CLASSIFICATION	// // activity setup // 
WITHOUT_CLASSIFICATION	// define activity layout
WITHOUT_CLASSIFICATION	/*		 * css = "<style type=\"text/css\">\n" + "body {font-family:\"" + name +		 * "\"; font-size:\"" + size + "pt; \"} \n" + "a { color: blue;		 * text-decoration: underline }\n" + "font.quoting {color:#949494;} \n" + "</style>\n";		 */
WITHOUT_CLASSIFICATION	// layout.setVisualDateRangeRounder(new BoundaryRounder(DateRangeI.RANGE_TYPE_DAY, true, false, false)); // DateRangeRounder for AllDay Events
WITHOUT_CLASSIFICATION	// convert special characters
WITHOUT_CLASSIFICATION	// set the start to 00:00:00
WITHOUT_CLASSIFICATION	// if the end is on 00:00:00, round it to 23:59:59.999
WITHOUT_CLASSIFICATION	// TextAShape titleText = new TextAShape(DEFAULT_TITLE_TEXT_SHAPE_NAME, //		"$startTime$ - $endTimeExcl$ ($timeZoneShort$)", //		titleTextAbsRect, TextAShape.TYPE_SINGE_LINE, textFont, //		textPaint, new AtStart(0), new AtStart(-3), GfxUtil.AA_HINT_ON);
WITHOUT_CLASSIFICATION	// different border for recurrent events // ActivityInteractor.setStaticOverride( // AShapeUtil.DEFAULT_OUTLINE_SHAPE_NAME, AShape.A_STROKE, // new OverrideFilter() { // public Object getOverride(Object subject, // Object defaultObject) { // return ((ActivityView) subject).getModel() // .isRecurrent() ? new BasicStroke(1.0f, // BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, // 0, new float[] { 9 }, 0) : defaultObject; // } // });
WITHOUT_CLASSIFICATION	// Color shadowPaint = new Color(0, 0, 0, 100);
WITHOUT_CLASSIFICATION	// bgAShape.addSubShape(mainText);
WITHOUT_CLASSIFICATION	// Drag, resize interactions
WITHOUT_CLASSIFICATION	// Block mouse moves to the underlaying component won't restore the // Cursor
WITHOUT_CLASSIFICATION	// all day events
WITHOUT_CLASSIFICATION	// AShapeUtil.addResizeBoxes(root, SwingConstants.HORIZONTAL, 4);
WITHOUT_CLASSIFICATION	// setBackground(UIManager.getColor("TextField.background"));
WITHOUT_CLASSIFICATION	// get header from folder
WITHOUT_CLASSIFICATION	// get header from folder
WITHOUT_CLASSIFICATION	// create a view more button, responsible for // opening the attachment viewer popup
WITHOUT_CLASSIFICATION	// remove old activity
WITHOUT_CLASSIFICATION	// TODO: re-enable feature, the following code violates our // design, accessing folders is only allowed in Command.execute()
WITHOUT_CLASSIFICATION	/*		 * TreeController treeController = (TreeController) ((TreeViewOwner)		 * frameController) .getTreeController();		 * 		 * TreeView treeView = treeController.getView();		 */
WITHOUT_CLASSIFICATION	// changing the selection to the first row
WITHOUT_CLASSIFICATION	// and getting the uid for this node
WITHOUT_CLASSIFICATION	//			 @author: fdietz never request focus //requestFocus();
WITHOUT_CLASSIFICATION	// com.miginfocom.util.LicenseValidator.setLicenseKey("Cu=Frederik_Dietz\nCo=OpenSource\nDm=false\nEx=0\nSignature=302C021408B54A0B041E79362B1951E9FDB9AFEAD0EBFBDD021409F4830B4AD832766388107CB1D38126A9473C0C");
WITHOUT_CLASSIFICATION	// enabled event-firing
WITHOUT_CLASSIFICATION	// we currently only support a single category per activity
WITHOUT_CLASSIFICATION	/* version 4 */
WITHOUT_CLASSIFICATION	/* IETF variant */
WITHOUT_CLASSIFICATION	/* multicast bit */
WITHOUT_CLASSIFICATION	// retrieve event from store
WITHOUT_CLASSIFICATION	// retrieve event from store
WITHOUT_CLASSIFICATION	// set new calendar id
WITHOUT_CLASSIFICATION	// set new calendar id
WITHOUT_CLASSIFICATION	// persist modified calendar
WITHOUT_CLASSIFICATION	// persist modified calendar
WITHOUT_CLASSIFICATION	// update start/end time
WITHOUT_CLASSIFICATION	// update store
WITHOUT_CLASSIFICATION	// update store
WITHOUT_CLASSIFICATION	// get Columba's top-level configuration directory
WITHOUT_CLASSIFICATION	// create top-level configuration directory
WITHOUT_CLASSIFICATION	// load configuration from persistence
WITHOUT_CLASSIFICATION	// make sure configuration is saved when exiting
WITHOUT_CLASSIFICATION	// we only use the first message
WITHOUT_CLASSIFICATION	// retrieve subject
WITHOUT_CLASSIFICATION	// generate default unique id
WITHOUT_CLASSIFICATION	// create new event with new UUID
WITHOUT_CLASSIFICATION	// copy all attributes
WITHOUT_CLASSIFICATION	// copy all attributes
WITHOUT_CLASSIFICATION	// java.util.Calendar stamp = event.getDtStamp();
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// FIXME r.setPos();
WITHOUT_CLASSIFICATION	// create recurrence
WITHOUT_CLASSIFICATION	// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStart1.getParameters().getParameter( // Parameter.TZID);
WITHOUT_CLASSIFICATION	// we only update changes for events currently
WITHOUT_CLASSIFICATION	// ensure tzid matches date-time timezone.. // Parameter tzId = dtEnd1.getParameters().getParameter( // Parameter.TZID);
WITHOUT_CLASSIFICATION	// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStamp1.getParameters().getParameter( // Parameter.TZID);
WITHOUT_CLASSIFICATION	// remove everything which is not A-Za-z0-9-_
WITHOUT_CLASSIFICATION	// create recurrence
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.calendar.store.api.ICalendarStoreFactory#getLocaleStore()	 */
WITHOUT_CLASSIFICATION	// RRULE:FREQ=YEARLY;COUNT=5;INTERVAL=1 // RRULE:FREQ=WEEKLY;UNTIL=20060725T215959;INTERVAL=1;BYDAY=TU // RRULE:FREQ=YEARLY;INTERVAL=1
WITHOUT_CLASSIFICATION	// MouseListener sorts table when clicking on a column header
WITHOUT_CLASSIFICATION	// RRULE:FREQ=WEEKLY;COUNT=8;INTERVAL=2;BYDAY=TU,TH // RRULE:FREQ=MONTHLY;UNTIL=20070627T215959;INTERVAL=2;BYDAY=4WE // RRULE:FREQ=YEARLY;INTERVAL=1 // RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=-1SU;BYMONTH=3 // RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=-1SU;BYMONTH=10
WITHOUT_CLASSIFICATION	// skip, if UID, dtStart or dtEnd is not defined
WITHOUT_CLASSIFICATION	// if there is no string given, return a number
WITHOUT_CLASSIFICATION	/*		 * DocType docType = factory .docType("iCalendar", "-//IETF//DTD		 * XCAL/iCalendar XML//EN",		 * "http://www.ietf.org/internet-drafts/draft-hare-xcalendar-01.txt");		 * doc.setDocType(docType);		 */
WITHOUT_CLASSIFICATION	// wrong xml-format
WITHOUT_CLASSIFICATION	// found category
WITHOUT_CLASSIFICATION	//Element child = getParentElement().getChild(ICALENDAR.CATEGORIES); //List list = child.getChildren();
WITHOUT_CLASSIFICATION	// find the property in the rrule string
WITHOUT_CLASSIFICATION	// no recurrency, so nothing in the string
WITHOUT_CLASSIFICATION	// build string
WITHOUT_CLASSIFICATION	// optional parts
WITHOUT_CLASSIFICATION	//UNTIL=20070627T215959
WITHOUT_CLASSIFICATION	// generate new UUID if it does not exist yet
WITHOUT_CLASSIFICATION	// remove old data
WITHOUT_CLASSIFICATION	// generate xml document
WITHOUT_CLASSIFICATION	// add new data to local store
WITHOUT_CLASSIFICATION	// builder.setValidation(true);
WITHOUT_CLASSIFICATION	// filename = "uuid.xcs"
WITHOUT_CLASSIFICATION	// remove ".xcs"
WITHOUT_CLASSIFICATION	// we only update changes for events currently
WITHOUT_CLASSIFICATION	//ICalendarStore store = (ICalendarStore) next.getSource();
WITHOUT_CLASSIFICATION	// retrieve event from store
WITHOUT_CLASSIFICATION	// retrieve event from store
WITHOUT_CLASSIFICATION	// update store
WITHOUT_CLASSIFICATION	// update store
WITHOUT_CLASSIFICATION	// remove old activity
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// create new activity
WITHOUT_CLASSIFICATION	// process all events collected until now
WITHOUT_CLASSIFICATION	// putValue(AbstractColumbaAction.LARGE_ICON, ResourceLoader // .getImageIcon("new_appointment-32.png")); // putValue(AbstractColumbaAction.SMALL_ICON, ResourceLoader // .getImageIcon("new_appointment.png"));
WITHOUT_CLASSIFICATION	// copy activity
WITHOUT_CLASSIFICATION	// enable all menuitems
WITHOUT_CLASSIFICATION	// enable all menuitems
WITHOUT_CLASSIFICATION	// retrieve selected activity
WITHOUT_CLASSIFICATION	// retrieve selected activity
WITHOUT_CLASSIFICATION	// activity belongs to calendar id ?
WITHOUT_CLASSIFICATION	// activity belongs to calendar id ?
WITHOUT_CLASSIFICATION	// disable this calendar's id
WITHOUT_CLASSIFICATION	// disable this calendar's id
WITHOUT_CLASSIFICATION	// get selected calendar id
WITHOUT_CLASSIFICATION	// get selected calendar
WITHOUT_CLASSIFICATION	// A recurring event
WITHOUT_CLASSIFICATION	// this is for the calendar component and only used internally
WITHOUT_CLASSIFICATION	// 2 columns
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// check if a single entry is selected
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// we need this for the focus manager
WITHOUT_CLASSIFICATION	// background
WITHOUT_CLASSIFICATION	// Drag, resize interactions
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// DocumentListener Methods
WITHOUT_CLASSIFICATION	// select first item
WITHOUT_CLASSIFICATION	// glocal grid line colors
WITHOUT_CLASSIFICATION	// activityAShapeBean = new ActivityAShapeBean();
WITHOUT_CLASSIFICATION	// general grid size - if we don't set this property there won't be // vertical scrollbars
WITHOUT_CLASSIFICATION	// west header
WITHOUT_CLASSIFICATION	// first row showing the hour
WITHOUT_CLASSIFICATION	// north header background
WITHOUT_CLASSIFICATION	// north header cell decorator
WITHOUT_CLASSIFICATION	// first header showing Day info
WITHOUT_CLASSIFICATION	// date area grid line
WITHOUT_CLASSIFICATION	// horizontal grid lines
WITHOUT_CLASSIFICATION	// dark gray line every hour
WITHOUT_CLASSIFICATION	// light gray line every 30 min
WITHOUT_CLASSIFICATION	// vertical grid lines
WITHOUT_CLASSIFICATION	// light gray line every day
WITHOUT_CLASSIFICATION	// horizontal light gray column separator line
WITHOUT_CLASSIFICATION	// select current day
WITHOUT_CLASSIFICATION	// select nodes
WITHOUT_CLASSIFICATION	// differnt outline color is selected
WITHOUT_CLASSIFICATION	// bold outline if selected
WITHOUT_CLASSIFICATION	// Color titleBgPaint = null;//new Color(200, 50, 50, 255);
WITHOUT_CLASSIFICATION	// Color selectedTitlePaint = new Color(200, 100, 100);
WITHOUT_CLASSIFICATION	// Color bulletPaint = new Color(100, 100, 100);
WITHOUT_CLASSIFICATION	// Color textPaint = new Color(0, 0, 0, 50);
WITHOUT_CLASSIFICATION	// even
WITHOUT_CLASSIFICATION	// First (left) tab
WITHOUT_CLASSIFICATION	// Second (right) tab
WITHOUT_CLASSIFICATION	// Fallback shape for small sizes
WITHOUT_CLASSIFICATION	// Resize events
WITHOUT_CLASSIFICATION	// **************************************** // * Static example shape creation // ****************************************
WITHOUT_CLASSIFICATION	// AShapeUtil.addMouseFireEvent(outlineAShape, trigger, // DefaultDateArea.AE_CATEGORY_DRAG_PRESSED, false, false, button);
WITHOUT_CLASSIFICATION	// END1 because the draw should be // correct
WITHOUT_CLASSIFICATION	// States
WITHOUT_CLASSIFICATION	// Shadow
WITHOUT_CLASSIFICATION	// Shadow
WITHOUT_CLASSIFICATION	// PlaceRect bgAbsRect = new AbsRect(new AtStart(0), new AtStart(0), new // AtEnd(0), new AtEnd(0), null, null, shadowInsets);
WITHOUT_CLASSIFICATION	// FillAShape filledShadow = new FillAShape("shadowShape", new // RoundRectangle(0, 0, 1, 1, 5, 5), bgAbsRect, new Color(0, 0, 0, 100), // GfxUtil.AA_HINT_ON);
WITHOUT_CLASSIFICATION	// SliceSpec shwSI = new SliceSpec(new Insets(10, 10, 10, 10), // SliceSpec.TYPE_TILE_CUT, SliceSpec.OPT_BORDER);
WITHOUT_CLASSIFICATION	// FeatherAShape shadow = new FeatherAShape("shadow", filledShadow, new // Color(255, 255, 255, 0), 5, shwSI);
WITHOUT_CLASSIFICATION	// AbsRect textRect = new AbsRect(new AtStart(4), AtStart.START0, new // AtEnd(-4), AtEnd.END0);
WITHOUT_CLASSIFICATION	// root.addSubShape(shadow);
WITHOUT_CLASSIFICATION	// root.addSubShape(shadow);
WITHOUT_CLASSIFICATION	// root.addSubShape(textShape);
WITHOUT_CLASSIFICATION	// root.addSubShape(textShape);
WITHOUT_CLASSIFICATION	// root.addSubShape(outlineShape);
WITHOUT_CLASSIFICATION	// root.setAttribute(AShape.A_REPORT_HIT_SHAPE, Boolean.TRUE);
WITHOUT_CLASSIFICATION	// Animations for text
WITHOUT_CLASSIFICATION	// textAShape.setAttribute(AShape.A_REPORT_HIT_SHAPE, Boolean.TRUE);
WITHOUT_CLASSIFICATION	// Title
WITHOUT_CLASSIFICATION	// Content
WITHOUT_CLASSIFICATION	// Outline
WITHOUT_CLASSIFICATION	// Build tree
WITHOUT_CLASSIFICATION	// Color moOutlinePaint = new Color(0, 0, 0);
WITHOUT_CLASSIFICATION	// private ThemeDateAreaContainer view;
WITHOUT_CLASSIFICATION	// every year?
WITHOUT_CLASSIFICATION	// for leap years!
WITHOUT_CLASSIFICATION	// start with week view
WITHOUT_CLASSIFICATION	// LOG.severe("no number!")
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// SliceSpec shwSI = new SliceSpec(new Insets(10, 10, 10, 10), // SliceSpec.TYPE_TILE_CUT, SliceSpec.OPT_BORDER);
WITHOUT_CLASSIFICATION	// FeatherAShape shadow = new FeatherAShape("shadow", filledShadow, new // Color(255, 255, 255, 0), 5, shwSI);
WITHOUT_CLASSIFICATION	// FillAShape filledShadow = new FillAShape("shadowShape", new // RoundRectangle(0, 0, 1, 1, 5, 5), bgAbsRect, new Color(0, 0, 0, 100), // Boolean.TRUE);
WITHOUT_CLASSIFICATION	// DrawAShape outlineShape = new DrawAShape("bgFill", new Rectangle(0, // 0, 1, 1), AbsRect.FILL, outlinePaint, new BasicStroke(1f), // Boolean.FALSE);
WITHOUT_CLASSIFICATION	// SizeConstraint sConstr1 = new SizeConstraint(new AtFixed(10), new // AtFraction(1), 1.0f);
WITHOUT_CLASSIFICATION	// SizeConstraint sConstr2 = new SizeConstraint(new AtFixed(0), new // AtFraction(0.5f), 1.0f);
WITHOUT_CLASSIFICATION	// SizeConstraint sConstr3 = new SizeConstraint(new AtFixed(0), new // AtFraction(1), 0.0f);
WITHOUT_CLASSIFICATION	// SizeConstraint sConstr4 = new SizeConstraint(new AtFixed(0), new // AtFraction(1), 0.0f);
WITHOUT_CLASSIFICATION	// ShapeGradientPaint bgPaint = new ShapeGradientPaint(new Color(235, // 235, 235), new Color(255, 255, 255), 180, 1f, 0.5f, false);
WITHOUT_CLASSIFICATION	// ShapeGradientPaint titlePaint = new ShapeGradientPaint(new Color(255, // 150, 150), new Color(255, 200, 200), 0, 0.7f, 0.7f, false);
WITHOUT_CLASSIFICATION	// addEnterExitOverride(outlineAShape, outlineAShape, AShape.A_PAINT, // moOutlinePaint, false, true);
WITHOUT_CLASSIFICATION	// toolTip.setForeground(Color.DARK_GRAY);
WITHOUT_CLASSIFICATION	// ((DefaultDateArea) localDateAreaBean.getDateArea()) // .addActivityMoveListener(this);
WITHOUT_CLASSIFICATION	// mouse hovers over activity
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// retrieve new selection
WITHOUT_CLASSIFICATION	// remember selected activity
WITHOUT_CLASSIFICATION	// notify all listeners
WITHOUT_CLASSIFICATION	// check if happens on the selected activity
WITHOUT_CLASSIFICATION	// check if happens in calendar, but not on activity
WITHOUT_CLASSIFICATION	// trigged if activity is moved or daterange is modified
WITHOUT_CLASSIFICATION	// the java methods return a nice week of year, we need hard facts
WITHOUT_CLASSIFICATION	// update modification timestamp
WITHOUT_CLASSIFICATION	// its always possible that no folder is currenlty selected
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// retrieve new selection
WITHOUT_CLASSIFICATION	// remember selected activity
WITHOUT_CLASSIFICATION	// notify all listeners
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewNext()	 */
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	// select activity before opening context context-menu // selectedInternalActivitiy.getStates().setStates( // GenericStates.SELECTED_BIT, true);
WITHOUT_CLASSIFICATION	// double-click on empty calendar // mediator.fireCreateActivity(null);
WITHOUT_CLASSIFICATION	// it will not be done correctly, if the first statement is // omitted
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// TimeSpan span = activityList.get(i);
WITHOUT_CLASSIFICATION	// clicked on calendar - not activity
WITHOUT_CLASSIFICATION	// table.put(item.getId(), item.getName());
WITHOUT_CLASSIFICATION	// custom renderer to convert from calendar id to calendar name
WITHOUT_CLASSIFICATION	// regexp for correct timestamp
WITHOUT_CLASSIFICATION	// check value before :
WITHOUT_CLASSIFICATION	// correct value!
WITHOUT_CLASSIFICATION	// correct value!
WITHOUT_CLASSIFICATION	// check value after :
WITHOUT_CLASSIFICATION	// both values are okay, so create a correct time
WITHOUT_CLASSIFICATION	// there is no :
WITHOUT_CLASSIFICATION	// no correct value!
WITHOUT_CLASSIFICATION	// in case we have to add another "0"
WITHOUT_CLASSIFICATION	// enable selection
WITHOUT_CLASSIFICATION	// click on this button will open the recurrence dialog
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// disable time pickers
WITHOUT_CLASSIFICATION	// disable time pickers
WITHOUT_CLASSIFICATION	// enable time pickers
WITHOUT_CLASSIFICATION	// enable time pickers
WITHOUT_CLASSIFICATION	// scrolling to the selected row
WITHOUT_CLASSIFICATION	// A recurring event
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// private Hashtable<String, String> table = new Hashtable<String, // String>(10);
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// disable time pickers
WITHOUT_CLASSIFICATION	// enable time pickers
WITHOUT_CLASSIFICATION	// it has to be set
WITHOUT_CLASSIFICATION	// check if the user entered valid data
WITHOUT_CLASSIFICATION	// enable button
WITHOUT_CLASSIFICATION	// disable button
WITHOUT_CLASSIFICATION	// frequency
WITHOUT_CLASSIFICATION	// no end
WITHOUT_CLASSIFICATION	// maximum occurrences
WITHOUT_CLASSIFICATION	// end date
WITHOUT_CLASSIFICATION	// enable all radio buttons
WITHOUT_CLASSIFICATION	// disable all
WITHOUT_CLASSIFICATION	// load options of newly selected folder
WITHOUT_CLASSIFICATION	// disable date picker
WITHOUT_CLASSIFICATION	// enable max occurrences
WITHOUT_CLASSIFICATION	// enable until
WITHOUT_CLASSIFICATION	// disable other
WITHOUT_CLASSIFICATION	// TestDataGenerator.generateTestData();
WITHOUT_CLASSIFICATION	// calendar list
WITHOUT_CLASSIFICATION	// create empty value
WITHOUT_CLASSIFICATION	// create identity value
WITHOUT_CLASSIFICATION	// summary
WITHOUT_CLASSIFICATION	// description
WITHOUT_CLASSIFICATION	// location
WITHOUT_CLASSIFICATION	// date range
WITHOUT_CLASSIFICATION	// check if a single entry is selected
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// glocal grid line colors
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// date area grid line
WITHOUT_CLASSIFICATION	// horizontal grid lines
WITHOUT_CLASSIFICATION	// dark gray line at 12 and 13
WITHOUT_CLASSIFICATION	// vertical grid lines
WITHOUT_CLASSIFICATION	// light gray line every day
WITHOUT_CLASSIFICATION	// vertical light gray column separator line
WITHOUT_CLASSIFICATION	// horizontal light gray column separator line
WITHOUT_CLASSIFICATION	// select current day
WITHOUT_CLASSIFICATION	// monthlyActivityAShapeBean = new ActivityAShapeBean();
WITHOUT_CLASSIFICATION	// showing the week number
WITHOUT_CLASSIFICATION	// enable selection
WITHOUT_CLASSIFICATION	// JScrollPane tableScrollPane = new JScrollPane(navigationController // .getView()); // tableScrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, // 0));
WITHOUT_CLASSIFICATION	//checkbox.setBackground(item.getColor());
WITHOUT_CLASSIFICATION	//item.setSelected(checkbox.isSelected());
WITHOUT_CLASSIFICATION	//Make the renderer reappear.
WITHOUT_CLASSIFICATION	// create default root nodes <Local> and <Web>
WITHOUT_CLASSIFICATION	// category filtering is disabled as default
WITHOUT_CLASSIFICATION	// calendar is selected as default
WITHOUT_CLASSIFICATION	// two column
WITHOUT_CLASSIFICATION	//setBorder(BorderFactory.createEmptyBorder(2, 4, 2, 4));
WITHOUT_CLASSIFICATION	//setBorder(BorderFactory.createEmptyBorder(2, 4, 2, 4));
WITHOUT_CLASSIFICATION	// private CheckableItemListTableModel model;
WITHOUT_CLASSIFICATION	// do not show header
WITHOUT_CLASSIFICATION	// no grid lines
WITHOUT_CLASSIFICATION	// setIntercellSpacing(new Dimension(2, 2));
WITHOUT_CLASSIFICATION	// setRowMargin(5);
WITHOUT_CLASSIFICATION	//setBackground(item.getColor());
WITHOUT_CLASSIFICATION	// showing the month number
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// // activity setup // 
WITHOUT_CLASSIFICATION	// vertical // grid // lines
WITHOUT_CLASSIFICATION	// monthlyWestDateHeaderBean // .setLabelRotation(TextAShape.TYPE_SINGE_LINE_ROT_CCW);
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// check if its a calendar component
WITHOUT_CLASSIFICATION	// get calendar ui component depository
WITHOUT_CLASSIFICATION	// add tag id as last
WITHOUT_CLASSIFICATION	// set all tags/categories to be *not* selected
WITHOUT_CLASSIFICATION	// retrieve tag/category to be selected
WITHOUT_CLASSIFICATION	// create new one
WITHOUT_CLASSIFICATION	// mark it as selected
WITHOUT_CLASSIFICATION	// update calendar viewer
WITHOUT_CLASSIFICATION	// check if calendar item is tagged
WITHOUT_CLASSIFICATION	// check three entries
WITHOUT_CLASSIFICATION	// Event: Anniversary
WITHOUT_CLASSIFICATION	// 204524
WITHOUT_CLASSIFICATION	// Event: All Day Event
WITHOUT_CLASSIFICATION	// Event: Normal Event
WITHOUT_CLASSIFICATION	// this is the expected cases
WITHOUT_CLASSIFICATION	// delete all data in directory
WITHOUT_CLASSIFICATION	// delete folder
WITHOUT_CLASSIFICATION	// int column = view.convertColumnIndexToModel(viewColumn); // int column2 = view.convertColumnIndexToView(viewColumn);
WITHOUT_CLASSIFICATION	// // mark all activities with the tag // 
WITHOUT_CLASSIFICATION	// example: // "columba://org.columba.contact/<folder-id>/<contact-id>"
WITHOUT_CLASSIFICATION	// // now change all global categories // 
WITHOUT_CLASSIFICATION	// that is the expected case
WITHOUT_CLASSIFICATION	// ************ // normal cases // ************
WITHOUT_CLASSIFICATION	// *********** // edge values // ***********
WITHOUT_CLASSIFICATION	// ****************** // more than one year // ******************
WITHOUT_CLASSIFICATION	// *************** // MONTH VIEW TEST // ***************
WITHOUT_CLASSIFICATION	// new vis range = Start: Sep 23, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 3, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null // new vis range = Start: Oct 1, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 11, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null // should be // new vis range = Start: Oct 1, 2007 12:00:00 AM (RAW:1.0, DST:-1.0)   End: Nov 10, 2007 11:59:59 PM (RAW:1.0, DST:0.0)  Time zone: null  Locale: null
WITHOUT_CLASSIFICATION	// valid inputs
WITHOUT_CLASSIFICATION	// recoverable inputs
WITHOUT_CLASSIFICATION	// unrecoverable inputs
WITHOUT_CLASSIFICATION	// city
WITHOUT_CLASSIFICATION	// state/province/county
WITHOUT_CLASSIFICATION	// This should never happen since superclass is Object
WITHOUT_CLASSIFICATION	/*AdapterNode name;AdapterNode uid;AdapterNode type;AdapterNode rootNode;*/
WITHOUT_CLASSIFICATION	/*this.rootNode = root;parse();createMissingElements();*/
WITHOUT_CLASSIFICATION	//filterList = new Vector();
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.addressbook.gui.tree.AddressbookTreeNode#getName() */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// 
WITHOUT_CLASSIFICATION	//private File addressbookFile;
WITHOUT_CLASSIFICATION	// skip if contact item is not valid
WITHOUT_CLASSIFICATION	// check if contact with given email address exists already
WITHOUT_CLASSIFICATION	// check if it contains comma character
WITHOUT_CLASSIFICATION	// retrieve all contact items and add those to the list only
WITHOUT_CLASSIFICATION	// simply all all group items to the list
WITHOUT_CLASSIFICATION	// add group items
WITHOUT_CLASSIFICATION	// example: "columba://org.columba.contact/<folder-id>/<contact-id>"
WITHOUT_CLASSIFICATION	// modify card properties in folder
WITHOUT_CLASSIFICATION	// create list containing all contact item of this folder
WITHOUT_CLASSIFICATION	/*	 * public AddressbookTreeNode(String name) { super(name); this.name = name; }	 */
WITHOUT_CLASSIFICATION	// FAILURE!!!
WITHOUT_CLASSIFICATION	// public abstract Class getDefaultChild();
WITHOUT_CLASSIFICATION	// Put properties that should be copied from parent here
WITHOUT_CLASSIFICATION	// remove xml config
WITHOUT_CLASSIFICATION	// remove node
WITHOUT_CLASSIFICATION	// header file found
WITHOUT_CLASSIFICATION	// skip, if null
WITHOUT_CLASSIFICATION	// contact doesn't exist in parent folder anymore // -> remove it
WITHOUT_CLASSIFICATION	// start parsing line by line
WITHOUT_CLASSIFICATION	// empty line, means new contactcard
WITHOUT_CLASSIFICATION	// parse key:value lines
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// create URI representing the contact
WITHOUT_CLASSIFICATION	// if next node is null (the end of the list) return
WITHOUT_CLASSIFICATION	// start parsing line
WITHOUT_CLASSIFICATION	// found new token
WITHOUT_CLASSIFICATION	// backwards compatibility
WITHOUT_CLASSIFICATION	// protected AddressbookFolder tempFolder;
WITHOUT_CLASSIFICATION	// tempFolder = new AddressbookFolder(null,addressbookInterface);
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// add new group to folder
WITHOUT_CLASSIFICATION	// get parent
WITHOUT_CLASSIFICATION	// notify model
WITHOUT_CLASSIFICATION	// register interest on table selection changes
WITHOUT_CLASSIFICATION	// register interest on tree selection changes
WITHOUT_CLASSIFICATION	// register interest on tree selection changes
WITHOUT_CLASSIFICATION	// remember last selected folder treenode
WITHOUT_CLASSIFICATION	// remember last selected folder treenode
WITHOUT_CLASSIFICATION	// remember last selected folder treenode
WITHOUT_CLASSIFICATION	// enable, if more than zero treenodes selected
WITHOUT_CLASSIFICATION	// enable, if more than zero treenodes selected
WITHOUT_CLASSIFICATION	//		 get selected folder
WITHOUT_CLASSIFICATION	//		 get selected contact/group card
WITHOUT_CLASSIFICATION	// create open file dialog
WITHOUT_CLASSIFICATION	//if user pressed OK button
WITHOUT_CLASSIFICATION	// add contact to folder
WITHOUT_CLASSIFICATION	// register interest on contact selection changes
WITHOUT_CLASSIFICATION	// check if contact is tagged
WITHOUT_CLASSIFICATION	// modify card properties in folder
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get parent
WITHOUT_CLASSIFICATION	// notify model
WITHOUT_CLASSIFICATION	// remember last selected folder treenode
WITHOUT_CLASSIFICATION	// remember last selected folder treenode
WITHOUT_CLASSIFICATION	// enable, if more than zero treenodes selected
WITHOUT_CLASSIFICATION	// enable, if more than zero treenodes selected
WITHOUT_CLASSIFICATION	// create open file dialog
WITHOUT_CLASSIFICATION	//if user pressed OK button
WITHOUT_CLASSIFICATION	//		 register interest on tree selection changes
WITHOUT_CLASSIFICATION	// read VCARD file into string buffer
WITHOUT_CLASSIFICATION	// create contact card
WITHOUT_CLASSIFICATION	// add to folder
WITHOUT_CLASSIFICATION	// update table
WITHOUT_CLASSIFICATION	// get selected contact/group card
WITHOUT_CLASSIFICATION	//					 re-select folder
WITHOUT_CLASSIFICATION	// tree has focus
WITHOUT_CLASSIFICATION	// tree has focus
WITHOUT_CLASSIFICATION	// tree has focus
WITHOUT_CLASSIFICATION	// re-select folder
WITHOUT_CLASSIFICATION	// table has focus
WITHOUT_CLASSIFICATION	// table has focus
WITHOUT_CLASSIFICATION	// remove contacts/group cards from folder
WITHOUT_CLASSIFICATION	//		 re-select folder
WITHOUT_CLASSIFICATION	// remove folder from parent
WITHOUT_CLASSIFICATION	//_editor.moveCaretPosition(cursor_pos);
WITHOUT_CLASSIFICATION	// contacts item
WITHOUT_CLASSIFICATION	// group item
WITHOUT_CLASSIFICATION	// for each JComboBox item
WITHOUT_CLASSIFICATION	// to lower case
WITHOUT_CLASSIFICATION	// compare if item starts with str
WITHOUT_CLASSIFICATION	// initialize completer
WITHOUT_CLASSIFICATION	// can be only one
WITHOUT_CLASSIFICATION	// can be only one
WITHOUT_CLASSIFICATION	// ======== this ========
WITHOUT_CLASSIFICATION	// leave dialog empty if no source contact model specified
WITHOUT_CLASSIFICATION	// model -> view
WITHOUT_CLASSIFICATION	// fall back to default image
WITHOUT_CLASSIFICATION	// we support up to 4 email addresses
WITHOUT_CLASSIFICATION	// we support up to 4 email addresses
WITHOUT_CLASSIFICATION	// we support up to 4 phone entries
WITHOUT_CLASSIFICATION	// we support up to 4 im entries
WITHOUT_CLASSIFICATION	// we support up to 3 address entries (work/private/other)
WITHOUT_CLASSIFICATION	// view -> model
WITHOUT_CLASSIFICATION	// we support up to 4 phones
WITHOUT_CLASSIFICATION	// we support up to 4 im
WITHOUT_CLASSIFICATION	// we support 3 address types (work/home/other)
WITHOUT_CLASSIFICATION	// ======== dialogPane ========
WITHOUT_CLASSIFICATION	// ======== contentPane ========
WITHOUT_CLASSIFICATION	// ======== tabbedPane2 ========
WITHOUT_CLASSIFICATION	// ======== contactPanel ========
WITHOUT_CLASSIFICATION	// ======== panel7 ========
WITHOUT_CLASSIFICATION	// ---- pictureButton ----
WITHOUT_CLASSIFICATION	// ---- nicknameLabel ----
WITHOUT_CLASSIFICATION	// ---- fileunderLabel ----
WITHOUT_CLASSIFICATION	// ---- categoriesButton ----
WITHOUT_CLASSIFICATION	// ---- emailTextField1 ----
WITHOUT_CLASSIFICATION	// ---- emailTextField3 ----
WITHOUT_CLASSIFICATION	// ---- emailTextField4 ----
WITHOUT_CLASSIFICATION	// ---- preferHtmlCheckBox ----
WITHOUT_CLASSIFICATION	// ---- telephoneTextField1 ----
WITHOUT_CLASSIFICATION	// ---- telephoneTextField3 ----
WITHOUT_CLASSIFICATION	// ---- telephoneTextField4 ----
WITHOUT_CLASSIFICATION	// ---- imTextField1 ----
WITHOUT_CLASSIFICATION	// ---- imTextField2 ----
WITHOUT_CLASSIFICATION	// ---- imTextField3 ----
WITHOUT_CLASSIFICATION	// ======== personalInfoPanel ========
WITHOUT_CLASSIFICATION	// ---- homepageLabel ----
WITHOUT_CLASSIFICATION	// ======== panel1 ========
WITHOUT_CLASSIFICATION	// ---- homepageTextField ----
WITHOUT_CLASSIFICATION	// ---- weblogLabel ----
WITHOUT_CLASSIFICATION	// ======== panel5 ========
WITHOUT_CLASSIFICATION	// ---- weblogTextField ----
WITHOUT_CLASSIFICATION	// ---- weblogButton ----
WITHOUT_CLASSIFICATION	// ======== panel6 ========
WITHOUT_CLASSIFICATION	// ---- calendarTextField ----
WITHOUT_CLASSIFICATION	// ---- calendarButton ----
WITHOUT_CLASSIFICATION	// ---- freebusyLabel ----
WITHOUT_CLASSIFICATION	// ---- freebusyTextField ----
WITHOUT_CLASSIFICATION	// ---- freebusyButton ----
WITHOUT_CLASSIFICATION	// ---- professionLabel ----
WITHOUT_CLASSIFICATION	// ---- professionTextField ----
WITHOUT_CLASSIFICATION	// ---- titleLabel ----
WITHOUT_CLASSIFICATION	// ---- companyLabel ----
WITHOUT_CLASSIFICATION	// ---- departmentTextField ----
WITHOUT_CLASSIFICATION	// ---- companyTextField ----
WITHOUT_CLASSIFICATION	// ---- managerTextField ----
WITHOUT_CLASSIFICATION	// ---- departmentLabel ----
WITHOUT_CLASSIFICATION	// ---- officeTextField ----
WITHOUT_CLASSIFICATION	// ---- managerLabel ----
WITHOUT_CLASSIFICATION	// ---- notesLabel ----
WITHOUT_CLASSIFICATION	// ---- officeLabel ----
WITHOUT_CLASSIFICATION	// ======== mailingAddressPanel ========
WITHOUT_CLASSIFICATION	// ---- birthdayLabel ----
WITHOUT_CLASSIFICATION	// ---- notesTextArea ----
WITHOUT_CLASSIFICATION	// ======== scrollPane3 ========
WITHOUT_CLASSIFICATION	// ---- privateCityLabel ----
WITHOUT_CLASSIFICATION	// ======== scrollPane1 ========
WITHOUT_CLASSIFICATION	// ---- privateAddressLabel ----
WITHOUT_CLASSIFICATION	// ---- privateCityTextField ----
WITHOUT_CLASSIFICATION	// ---- privateZipPostalCodeLabel ----
WITHOUT_CLASSIFICATION	// ---- label1 ----
WITHOUT_CLASSIFICATION	// ---- privateStateProvinceCountyLabel ----
WITHOUT_CLASSIFICATION	// ---- privatePOBoxLabel ----
WITHOUT_CLASSIFICATION	// ---- privateCountryLabel ----
WITHOUT_CLASSIFICATION	// shortcut key //putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke("B"));
WITHOUT_CLASSIFICATION	// ---- workAddressLabel ----
WITHOUT_CLASSIFICATION	// ======== scrollPane2 ========
WITHOUT_CLASSIFICATION	// ---- workCityLabel ----
WITHOUT_CLASSIFICATION	// ---- workCityTextField ----
WITHOUT_CLASSIFICATION	// ---- workZipPostalCodeLabel ----
WITHOUT_CLASSIFICATION	// ---- label2 ----
WITHOUT_CLASSIFICATION	// ---- workStateProvinceCountyLabel ----
WITHOUT_CLASSIFICATION	// ---- workPOBoxLabel ----
WITHOUT_CLASSIFICATION	// ---- workCountryLabel ----
WITHOUT_CLASSIFICATION	// ---- otherAddressLabel ----
WITHOUT_CLASSIFICATION	// ======== scrollPane4 ========
WITHOUT_CLASSIFICATION	// ---- otherCityLabel ----
WITHOUT_CLASSIFICATION	// ---- otherZipPostalCodeLabel ----
WITHOUT_CLASSIFICATION	// ---- label3 ----
WITHOUT_CLASSIFICATION	// ---- otherStateProvinceCountyLabel ----
WITHOUT_CLASSIFICATION	// ---- otherPOBoxLabel ----
WITHOUT_CLASSIFICATION	// ---- otherCountryLabel ----
WITHOUT_CLASSIFICATION	// ======== buttonBar ========
WITHOUT_CLASSIFICATION	// ---- okButton ----
WITHOUT_CLASSIFICATION	// ---- cancelButton ----
WITHOUT_CLASSIFICATION	// contains "," comma character
WITHOUT_CLASSIFICATION	// contains "," comma character
WITHOUT_CLASSIFICATION	// set title
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	// gettext //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// settext //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//FocusOwner lost = (FocusOwner) map.get(event.getSource());
WITHOUT_CLASSIFICATION	// remove all children
WITHOUT_CLASSIFICATION	// scrollPane.setPreferredSize( new Dimension(200,200) );
WITHOUT_CLASSIFICATION	// add children
WITHOUT_CLASSIFICATION	// this is a headeritem from autocompletion
WITHOUT_CLASSIFICATION	// c.gridwidth = GridBagConstraints.RELATIVE;
WITHOUT_CLASSIFICATION	// in the future, it will be possible to also add new addresses
WITHOUT_CLASSIFICATION	//current = lost;
WITHOUT_CLASSIFICATION	//destinationButton.setText(destinationFolder.getTreePath());
WITHOUT_CLASSIFICATION	// adjust description field
WITHOUT_CLASSIFICATION	// id = org.columba.example.HelloWorld$HelloWorldPlugin
WITHOUT_CLASSIFICATION	// associate ui component with FocusOwner
WITHOUT_CLASSIFICATION	// true if action is enabled, false otherwiese
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean) */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isCutActionEnabled() */
WITHOUT_CLASSIFICATION	//  no component has the focus // -> disable all actions
WITHOUT_CLASSIFICATION	// uncomment to enable action
WITHOUT_CLASSIFICATION	// check if a single entry is selected
WITHOUT_CLASSIFICATION	// 
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// create empty value
WITHOUT_CLASSIFICATION	// create identity value
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// modify card properties in folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected contact/group card
WITHOUT_CLASSIFICATION	//					 re-select folder
WITHOUT_CLASSIFICATION	// define false < true
WITHOUT_CLASSIFICATION	// this is needed to update the titlebar
WITHOUT_CLASSIFICATION	// getContainer().setContentPane(this);
WITHOUT_CLASSIFICATION	// initPerspective(this.perspective);
WITHOUT_CLASSIFICATION	// retrieve contact model from folder
WITHOUT_CLASSIFICATION	// manipulateModel(TableModelPlugin.STRUCTURE_CHANGE);
WITHOUT_CLASSIFICATION	// Where, in the drag image, the mouse was clicked
WITHOUT_CLASSIFICATION	// debug messages for diagnostics
WITHOUT_CLASSIFICATION	/*			 * HeaderItem[] items = new HeaderItem[selection1.length]; items =			 * selection1;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */
WITHOUT_CLASSIFICATION	/*			 * HeaderItem[] items = new HeaderItem[selection2.length]; items =			 * selection2;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */
WITHOUT_CLASSIFICATION	/*		 * dragSource.startDrag( event, new Cursor(Cursor.DEFAULT_CURSOR),		 * ImageLoader.getImageIcon("contact_small","Add16").getImage(), new		 * Point(5, 5), new StringSelection("contact"), this);		 */
WITHOUT_CLASSIFICATION	// removeElement();
WITHOUT_CLASSIFICATION	//setCellRenderer(new AddressbookListRenderer());
WITHOUT_CLASSIFICATION	/*	   * does exactly the same thing as EditPropertiesAction when contact	   * table is focused	   * */
WITHOUT_CLASSIFICATION	// Plain text components don't fire these events
WITHOUT_CLASSIFICATION	// register as focus owner
WITHOUT_CLASSIFICATION	// define false < true
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// TreePath path = tree.getPathForRow(row);
WITHOUT_CLASSIFICATION	// we use the SortDecorator, because the indices are sorted
WITHOUT_CLASSIFICATION	// this.addressbookModel = addressbookModel;
WITHOUT_CLASSIFICATION	// set renderers for columns
WITHOUT_CLASSIFICATION	// return new DefaultHeaderRenderer(controller.getSortDecorator(), // name);
WITHOUT_CLASSIFICATION	// the model which is decorated
WITHOUT_CLASSIFICATION	//setBorder(selectedBorder);
WITHOUT_CLASSIFICATION	//setBorder(unselectedBorder);
WITHOUT_CLASSIFICATION	// create a virtual folder with all messages holding this tag
WITHOUT_CLASSIFICATION	// check if its a contact component
WITHOUT_CLASSIFICATION	// update folder selection
WITHOUT_CLASSIFICATION	// XmlElement.printNode(item.getRoot(), "");
WITHOUT_CLASSIFICATION	// now instanciate the folder classes
WITHOUT_CLASSIFICATION	//		 register as focus owner
WITHOUT_CLASSIFICATION	// private TreeView treeViewer;
WITHOUT_CLASSIFICATION	// public SelectFolderTree tree;
WITHOUT_CLASSIFICATION	/*		 * FolderTreeNode node = tree.getSelectedNode(); FolderItem item =		 * node.getFolderItem();		 */
WITHOUT_CLASSIFICATION	// return item.getUid();
WITHOUT_CLASSIFICATION	// init addressbook plugin handlers //		PluginManager.getInstance().addHandlers( //				"org/columba/addressbook/plugin/pluginhandler.xml");
WITHOUT_CLASSIFICATION	//mainInterface.addressbookInterface.
WITHOUT_CLASSIFICATION	//timer.start();
WITHOUT_CLASSIFICATION	// fall-back to formatted name
WITHOUT_CLASSIFICATION	// fall-back to email address
WITHOUT_CLASSIFICATION	// <sortstring>value</sortstring>
WITHOUT_CLASSIFICATION	// <fn>value</fn>
WITHOUT_CLASSIFICATION	// <nickname>value</nickname>
WITHOUT_CLASSIFICATION	/* multicast bit */
WITHOUT_CLASSIFICATION	// backwards compatibility
WITHOUT_CLASSIFICATION	// backwards compatibility
WITHOUT_CLASSIFICATION	// <email> // <work>value</work> // <home>value</home> // </email>
WITHOUT_CLASSIFICATION	// <n> // <family>value</family> // <given>value</given> // <prefix>value</prefix> // <suffix>value</suffix> // <additionalnames>value</additionalnames> // </n>
WITHOUT_CLASSIFICATION	// <org>value</org>
WITHOUT_CLASSIFICATION	// <url>value</url>
WITHOUT_CLASSIFICATION	// <office>value</office>
WITHOUT_CLASSIFICATION	// <department>value</department>
WITHOUT_CLASSIFICATION	// comma-separated category list // <category>value1,value2,value3</category>
WITHOUT_CLASSIFICATION	// <phone> // <business>value</business> // <home>value</home> // </phone>
WITHOUT_CLASSIFICATION	// <im> // <aol>value</aol> // <yahoo>value</yahoo> // <jabber>value</jabber> // </im>
WITHOUT_CLASSIFICATION	// <adr> // <work> // <pobox>value</pobox> // <street>value</street // .. // </work> // .. // </adr>
WITHOUT_CLASSIFICATION	// base64 encode photo byte[] to string
WITHOUT_CLASSIFICATION	// backwards compatiblity // -> its not possible anymore to create a contact model without email // address
WITHOUT_CLASSIFICATION	// comma-separated category list // <category>value1,value2,value3</category>
WITHOUT_CLASSIFICATION	// compatibility - using SORTSTRING internally
WITHOUT_CLASSIFICATION	// get first item
WITHOUT_CLASSIFICATION	//tstich: CA-41 bugfix
WITHOUT_CLASSIFICATION	// We need a place to store the color the JLabel should be returned // to after its foreground and background colors have been set // to the selection background color. // These ivars will be made protected when their names are finalized.
WITHOUT_CLASSIFICATION	// public String getAgent() { // return agent; // }
WITHOUT_CLASSIFICATION	// create <email> element, if it doesn't exist yet
WITHOUT_CLASSIFICATION	// create <type> element
WITHOUT_CLASSIFICATION	// create <type> element
WITHOUT_CLASSIFICATION	// if not specified return empty iterator
WITHOUT_CLASSIFICATION	// if not specified return empty iterator
WITHOUT_CLASSIFICATION	// if not specified return empty iterator
WITHOUT_CLASSIFICATION	// iterate over all type elements
WITHOUT_CLASSIFICATION	// create <adr>, if it doesn't exist
WITHOUT_CLASSIFICATION	// create a CDATA section for the label
WITHOUT_CLASSIFICATION	// exit immediately, nothing more to do
WITHOUT_CLASSIFICATION	// exit immediately, nothing more to do
WITHOUT_CLASSIFICATION	// create jpim contact instance
WITHOUT_CLASSIFICATION	// set sort-string/displayname
WITHOUT_CLASSIFICATION	// set first name
WITHOUT_CLASSIFICATION	// set formatted name
WITHOUT_CLASSIFICATION	// set last name
WITHOUT_CLASSIFICATION	// add all additional names (middle names)
WITHOUT_CLASSIFICATION	// add all nicknames
WITHOUT_CLASSIFICATION	// add all prefixes
WITHOUT_CLASSIFICATION	// set website/homepage
WITHOUT_CLASSIFICATION	// add email addresses
WITHOUT_CLASSIFICATION	// add all addresses
WITHOUT_CLASSIFICATION	// set name of organization
WITHOUT_CLASSIFICATION	// save contact to outputstream
WITHOUT_CLASSIFICATION	// sort-string
WITHOUT_CLASSIFICATION	// list of nick names
WITHOUT_CLASSIFICATION	// list of additional names (middle names)
WITHOUT_CLASSIFICATION	// list of suffices
WITHOUT_CLASSIFICATION	// formatted name
WITHOUT_CLASSIFICATION	// birthday
WITHOUT_CLASSIFICATION	// url to website/homepage
WITHOUT_CLASSIFICATION	// address list
WITHOUT_CLASSIFICATION	// not that the editor ui only supports max of 3 addresses to edit
WITHOUT_CLASSIFICATION	// name of organisation
WITHOUT_CLASSIFICATION	// dummy address
WITHOUT_CLASSIFICATION	// 2 columns
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// check if a single entry is selected
WITHOUT_CLASSIFICATION	/*	 * @see TestCase#setUp()	 */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// DocumentListener Methods
WITHOUT_CLASSIFICATION	// select first item
WITHOUT_CLASSIFICATION	// delete folder
WITHOUT_CLASSIFICATION	// update folder selection
WITHOUT_CLASSIFICATION	//setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));
WITHOUT_CLASSIFICATION	//scrollPane.setBorder(null);
WITHOUT_CLASSIFICATION	// create list of contact folders
WITHOUT_CLASSIFICATION	// remember search result
WITHOUT_CLASSIFICATION	// doesn't support search inside yet
WITHOUT_CLASSIFICATION	/*	 * Class under test for HeaderItemList getHeaderItemList()	 */
WITHOUT_CLASSIFICATION	/*	 * Class under test for Object add(Contact)	 */
WITHOUT_CLASSIFICATION	//		 create config-folder
WITHOUT_CLASSIFICATION	//new Config(file);
WITHOUT_CLASSIFICATION	// now load all available plugins
WITHOUT_CLASSIFICATION	// delete all mails in folder
WITHOUT_CLASSIFICATION	/*	 * Class under test for void remove(Object)	 */
WITHOUT_CLASSIFICATION	// Condition
WITHOUT_CLASSIFICATION	// passive: if not initialized do it now
WITHOUT_CLASSIFICATION	//	public Object getObject(ILocator locator); //	public IStructureValue getChild(ILocator locator);
WITHOUT_CLASSIFICATION	//	String getProperty(String name); //	void setProperty(String name, String value); //	 //	Hashtable getProperties();
WITHOUT_CLASSIFICATION	// if path startsWith "/" -> skip
WITHOUT_CLASSIFICATION	// print attributes
WITHOUT_CLASSIFICATION	//Hashcode value should be buffered.
WITHOUT_CLASSIFICATION	// END public class XmlElement
WITHOUT_CLASSIFICATION	// needed for hibernate!
WITHOUT_CLASSIFICATION	// passive: if not initialized do it now
WITHOUT_CLASSIFICATION	// still not ready, exit!
WITHOUT_CLASSIFICATION	// still not ready, exit!
WITHOUT_CLASSIFICATION	// transaction is needed for the underlying jpa architecture
WITHOUT_CLASSIFICATION	// transaction is needed for the underlying jpa architecture
WITHOUT_CLASSIFICATION	// transaction is needed for the underlying jpa architecture
WITHOUT_CLASSIFICATION	// disable logging for the startup
WITHOUT_CLASSIFICATION	// set console handler to OFF
WITHOUT_CLASSIFICATION	//ShutdownManager.getInstance().register(this);
WITHOUT_CLASSIFICATION	// start HSQLDB
WITHOUT_CLASSIFICATION	// do not start a second time!
WITHOUT_CLASSIFICATION	// start JPA entity manager
WITHOUT_CLASSIFICATION	// restore log level
WITHOUT_CLASSIFICATION	// still not ready, exit!
WITHOUT_CLASSIFICATION	// creates a shallow // copy of this // object
WITHOUT_CLASSIFICATION	// passive: if not initialized do it now
WITHOUT_CLASSIFICATION	// more than one item, very strange! duplicate entries! remove // all
WITHOUT_CLASSIFICATION	// refers to the // entry in // persistence.xml
WITHOUT_CLASSIFICATION	// no item exists in table // -> nothing todo
WITHOUT_CLASSIFICATION	// shutdown hsql
WITHOUT_CLASSIFICATION	// if the database is not started, don't do it
WITHOUT_CLASSIFICATION	// shutdown entity manager
WITHOUT_CLASSIFICATION	// one second (=1000 ms)
WITHOUT_CLASSIFICATION	// sleep 5 minutes
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)         */
WITHOUT_CLASSIFICATION	// test if a task is already running
WITHOUT_CLASSIFICATION	// no java task running -> start background tasks
WITHOUT_CLASSIFICATION	// grab a part of aInput which does not include aOldPattern
WITHOUT_CLASSIFICATION	// add aNewPattern to take place of aOldPattern
WITHOUT_CLASSIFICATION	// the final chunk will go to the end of aInput
WITHOUT_CLASSIFICATION	// Check for no property
WITHOUT_CLASSIFICATION	// return true for new files
WITHOUT_CLASSIFICATION	// a < b
WITHOUT_CLASSIFICATION	// a < b
WITHOUT_CLASSIFICATION	// a == b
WITHOUT_CLASSIFICATION	// a == b
WITHOUT_CLASSIFICATION	// a > b
WITHOUT_CLASSIFICATION	// a > b
WITHOUT_CLASSIFICATION	// Platform identifiers: Windows, Linux, Mac OS, ...
WITHOUT_CLASSIFICATION	// Single OS identifiers: Window 95, Window 98, ...
WITHOUT_CLASSIFICATION	/* version 4 */
WITHOUT_CLASSIFICATION	/* IETF variant */
WITHOUT_CLASSIFICATION	// startIdx and idxOld delimit various chunks of aInput; these // chunks always end where aOldPattern begins
WITHOUT_CLASSIFICATION	// reset the startIdx to just after the current match, to see // if there are any further matches
WITHOUT_CLASSIFICATION	// threadVar;
WITHOUT_CLASSIFICATION	// following java guidelines I'm setting this to low priority // -> this should make the gui more responsive, because the // -> background worker has low priority whereas the gui worker // -> has normal priority
WITHOUT_CLASSIFICATION	// Is it already locked from locker ?
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#register(org.columba.core.command.Worker)         */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#unregister(org.columba.core.util.SwingWorker.ThreadVar)         */
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// see getValue(), setValue()
WITHOUT_CLASSIFICATION	// propagate
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// Check if locked
WITHOUT_CLASSIFICATION	// Initialize the cipher for encryption
WITHOUT_CLASSIFICATION	// Initialize the cipher for encryption
WITHOUT_CLASSIFICATION	// Encrypt the cleartext
WITHOUT_CLASSIFICATION	// Encrypt the cleartext
WITHOUT_CLASSIFICATION	// Return a String representation of the cipher text
WITHOUT_CLASSIFICATION	// Our cleartext as bytes
WITHOUT_CLASSIFICATION	// Wake up the others!
WITHOUT_CLASSIFICATION	//public int type;
WITHOUT_CLASSIFICATION	// gota go now
WITHOUT_CLASSIFICATION	// else keep waiting
WITHOUT_CLASSIFICATION	// exception handler should handle all error handling stuff
WITHOUT_CLASSIFICATION	// Must create a ExceptionProcessor
WITHOUT_CLASSIFICATION	// init event
WITHOUT_CLASSIFICATION	// "new value" is used to pass on the delay
WITHOUT_CLASSIFICATION	// fire event
WITHOUT_CLASSIFICATION	// Create the cipher //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Our cleartext as bytes //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Create the cipher //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Return a String representation of the cipher text //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// set display text stored here to an empty string (~ cleared) //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Remove bogus Operation
WITHOUT_CLASSIFICATION	// Create the workers
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#addTaskManagerListener(org.columba.core.taskmanager.TaskManagerListener)         */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// notify that a new worker is available
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// make a deep copy
WITHOUT_CLASSIFICATION	// Sort in with respect to priority and synchronize: // Commands with higher priority will be processed // before commands with lower priority. // If there is a command that is of type synchronize // don't put this command in front.
WITHOUT_CLASSIFICATION	// retrieve plugin manager instance
WITHOUT_CLASSIFICATION	// We have to process this command first // -> break here!
WITHOUT_CLASSIFICATION	/*		 * XmlElement child = getRoot().getElement(pathToElement);		 * 		 * return child;		 */
WITHOUT_CLASSIFICATION	// nothing to do yet
WITHOUT_CLASSIFICATION	// nothing to do yet
WITHOUT_CLASSIFICATION	// nothing to do yet
WITHOUT_CLASSIFICATION	// load config-file from disk
WITHOUT_CLASSIFICATION	// fall back to default path
WITHOUT_CLASSIFICATION	// final String key = (String) keys.next();
WITHOUT_CLASSIFICATION	// this is no integer value
WITHOUT_CLASSIFICATION	// Do nothing if we are hovering over the root node
WITHOUT_CLASSIFICATION	// initialize default view options
WITHOUT_CLASSIFICATION	// tstich: Default values are set in the loadPostions() method
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.api.command.IStatusObservable#getCancelled()         */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.core.config.IConfig#getConfigDirectory()	 */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// // views.xml // // <view header="100" header_enabled="true" id="ThreePaneMail" // infopanel="true" main="100"> // <window maximized="true" height="721" width="1034" y="26" x="0"></window> // <toolbars infopanel="true" main="true"></toolbars> // <splitpanes header="200" header_enabled="true" main="283" // attachment="100"></splitpanes> // </view>
WITHOUT_CLASSIFICATION	//  // options.xml: // //<gui> // <theme name="Plastic" theme="Experience Blue"></theme> // <fonts overwrite="false"> //  <text name="Default" size="12"></text> //  <main name="Default" size="12"></main> // </fonts> // <toolbar text_position="false" enable_icon="true" enable_text="true"></toolbar> //</gui>
WITHOUT_CLASSIFICATION	// callback
WITHOUT_CLASSIFICATION	// if everything worked out all right, we copy the tmp file to the destination file
WITHOUT_CLASSIFICATION	// create initial version from default configuration file
WITHOUT_CLASSIFICATION	// return plain document
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// load xml configuration from file
WITHOUT_CLASSIFICATION	// notify all listeners that search is finished
WITHOUT_CLASSIFICATION	// check if default value exists
WITHOUT_CLASSIFICATION	// remove old
WITHOUT_CLASSIFICATION	// contains already a single element
WITHOUT_CLASSIFICATION	// create empty list
WITHOUT_CLASSIFICATION	// create empty structure value
WITHOUT_CLASSIFICATION	// initialize context
WITHOUT_CLASSIFICATION	// identity definition
WITHOUT_CLASSIFICATION	// MULTIPLICITY.ZERO_TO_ONE is default
WITHOUT_CLASSIFICATION	// date time timezone definition
WITHOUT_CLASSIFICATION	// date range (start time, end time) definition
WITHOUT_CLASSIFICATION	// document definition
WITHOUT_CLASSIFICATION	// notify all listeners
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// register at shutdown manager // -> this will save all configuration data, when closing Columba
WITHOUT_CLASSIFICATION	// icons // putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("mail-read.png")); // putValue(LARGE_ICON, ImageLoader.getImageIcon("mail-read.png"));
WITHOUT_CLASSIFICATION	// notify all listeners that have a new search result // ensure this is called in the EDT
WITHOUT_CLASSIFICATION	// <context> // <core> // <identity> // </identity> // <datetime> // </datetime> // </core> // </context>
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// locale definition
WITHOUT_CLASSIFICATION	// list of attachments
WITHOUT_CLASSIFICATION	// single attachment
WITHOUT_CLASSIFICATION	// message
WITHOUT_CLASSIFICATION	// single sender - re-use identity type
WITHOUT_CLASSIFICATION	// re-use identity type for recipient list
WITHOUT_CLASSIFICATION	// message body
WITHOUT_CLASSIFICATION	// message contains list of attachments
WITHOUT_CLASSIFICATION	// replace "%1" parameter with file argument ...
WITHOUT_CLASSIFICATION	// ... or, add the file in case there was no "%1" used
WITHOUT_CLASSIFICATION	// Wait for external editor to quit
WITHOUT_CLASSIFICATION	// Try the built-in mime table
WITHOUT_CLASSIFICATION	// Try the built-in mime table
WITHOUT_CLASSIFICATION	// check if service is registered
WITHOUT_CLASSIFICATION	// retrieve service instance
WITHOUT_CLASSIFICATION	// load instance of service
WITHOUT_CLASSIFICATION	/*		 * int index = list.size() - 1;		 * 		 * remove(index);		 */
WITHOUT_CLASSIFICATION	// Condition
WITHOUT_CLASSIFICATION	/*	 * public FilterCriteria getCriteria(int index) { return (FilterCriteria)	 * list.get(index); }	 */
WITHOUT_CLASSIFICATION	// if win32 platform, prepend cmd.exe // necessary for system environment variables usage
WITHOUT_CLASSIFICATION	// check if there's already an instanciation available // we can reuse here
WITHOUT_CLASSIFICATION	/*		 * action.addAttribute( "class",		 * "org.columba.mail.filter.action.MarkMessageAsReadFilterAction");		 */
WITHOUT_CLASSIFICATION	// example configuration (tree.xml) // // <actionlist> //  <action uid="122" type="Move Message"></action> // </actionlist>
WITHOUT_CLASSIFICATION	// folder uid doesn't exist //  -> create default value
WITHOUT_CLASSIFICATION	// XmlElement.printNode(getRoot(),"");
WITHOUT_CLASSIFICATION	// condition: match all (AND) = 0, match any (OR) = 1 // private AdapterNode conditionNode;
WITHOUT_CLASSIFICATION	/*		 * setTextValue(conditionNode, s);		 */
WITHOUT_CLASSIFICATION	/*		 * //AdapterNode filterListNode = getFilterListNode();		 * 		 * AdapterNode node =		 * MailInterface.config.getFolderConfig().addEmptyFilterNode(		 * getFolder().getNode() ); Filter filter = new Filter( node );		 * 		 * add( filter );		 * 		 * return filter;		 */
WITHOUT_CLASSIFICATION	// list.add(f);
WITHOUT_CLASSIFICATION	// if folder creation failed // -> don't update tree ui
WITHOUT_CLASSIFICATION	// sorting is disabled
WITHOUT_CLASSIFICATION	//action.addAttribute("class", "org.columba.mail.filter.action.MarkMessageAsReadFilterAction");
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Set text, possibly with a mnemonic if defined using &
WITHOUT_CLASSIFICATION	// set display text - possible with a mnemonic defined using &
WITHOUT_CLASSIFICATION	//repaint(x, y, width, height);
WITHOUT_CLASSIFICATION	//setFont( UIManager.getFont("TextField.font") );
WITHOUT_CLASSIFICATION	//setIcon(ImageLoader.getImageIcon("stock_down-16.png"));
WITHOUT_CLASSIFICATION	//add( panel, BorderLayout.CENTER );
WITHOUT_CLASSIFICATION	//add( panel, BorderLayout.CENTER );
WITHOUT_CLASSIFICATION	// g.drawRect(0, 0, w - 3, h - 3);
WITHOUT_CLASSIFICATION	// left
WITHOUT_CLASSIFICATION	// top
WITHOUT_CLASSIFICATION	// right
WITHOUT_CLASSIFICATION	// right
WITHOUT_CLASSIFICATION	// bottom
WITHOUT_CLASSIFICATION	// bottom
WITHOUT_CLASSIFICATION	// //		 w+=1; //			h+=1; //		 g.setColor(edge); //		 // bottom //		 g.drawLine(x+2, h, x+w, h ); //		 // right //		 g.drawLine(x+w, y+ovalHeight+2, x+w , y+h);
WITHOUT_CLASSIFICATION	// Java 1.5 enumeration
WITHOUT_CLASSIFICATION	// paint original first
WITHOUT_CLASSIFICATION	// augment x.
WITHOUT_CLASSIFICATION	// augment y.
WITHOUT_CLASSIFICATION	// set display text - possibly with a mnemonic defined using &
WITHOUT_CLASSIFICATION	/* CEDRIC: not used right now. */
WITHOUT_CLASSIFICATION	// private ActionSupport asupport;
WITHOUT_CLASSIFICATION	// private JLabel l_date, l_year, l_month;
WITHOUT_CLASSIFICATION	// private JLabel l_date, l_year, l_month;
WITHOUT_CLASSIFICATION	// private JButton b_lyear, b_ryear, b_lmonth, b_rmonth;
WITHOUT_CLASSIFICATION	// private JButton b_lyear, b_ryear, b_lmonth, b_rmonth;
WITHOUT_CLASSIFICATION	// asupport = new ActionSupport(this);
WITHOUT_CLASSIFICATION	// Let's at least make a half-assed attempt at conforming to the Metal // PLAF colors.
WITHOUT_CLASSIFICATION	// top.setBorder( BorderFactory.createEtchedBorder() );
WITHOUT_CLASSIFICATION	// b_lmonth.setFocusPainted(false); // b_lmonth.setOpaque(false); // b_lmonth.addActionListener(this);
WITHOUT_CLASSIFICATION	// p1.add(l_month);
WITHOUT_CLASSIFICATION	/*		 * Font f = getFont(); setFont(new Font(f.getName(), Font.BOLD,		 * f.getSize()));		 */
WITHOUT_CLASSIFICATION	/* Copy the relevant portions of a date. */
WITHOUT_CLASSIFICATION	// asupport.addActionListener(listener);
WITHOUT_CLASSIFICATION	// asupport.removeActionListener(listener);
WITHOUT_CLASSIFICATION	/*		 * asupport.fireActionEvent(((o == b_lmonth) || (o == b_rmonth)) ?		 * MONTH_CHANGE_CMD : YEAR_CHANGE_CMD);		 */
WITHOUT_CLASSIFICATION	/*	 * Determine what day of week the first day of the month falls on. It's too	 * bad we have to resort to this hack; the Java API provides no means of	 * doing this any other way.	 */
WITHOUT_CLASSIFICATION	/*	 * This method is called whenever the month or year changes. It's job is to	 * repaint the labels and determine whether any selection range limits have	 * been reached.	 */
WITHOUT_CLASSIFICATION	// l_year.setText(String.valueOf(selectedDate.get(Calendar.YEAR)));
WITHOUT_CLASSIFICATION	// b_lyear.setEnabled(true); // b_ryear.setEnabled(true);
WITHOUT_CLASSIFICATION	// Disable anything that would cause the date to go out of range. This // logic is extremely sensitive so be very careful when making changes. // Every condition test in here is necessary, so don't remove anything.
WITHOUT_CLASSIFICATION	// b_lyear.setEnabled(y > y0);
WITHOUT_CLASSIFICATION	// allow out-of-range selection // selectedDate.set(Calendar.DATE, selectedDay);
WITHOUT_CLASSIFICATION	// allow out-of-range selection // selectedDate.set(Calendar.DATE, selectedDay);
WITHOUT_CLASSIFICATION	// b_ryear.setEnabled(y < y1);
WITHOUT_CLASSIFICATION	// repaint the calendar pane
WITHOUT_CLASSIFICATION	// figure out how many blank spaces there are before first day of // month, // and calculate coordinates of first drawn cell
WITHOUT_CLASSIFICATION	// paint the border
WITHOUT_CLASSIFICATION	// set the clip rect to exclude the border & insets
WITHOUT_CLASSIFICATION	// draw the weekday headings
WITHOUT_CLASSIFICATION	// find out how many days there are in the current month
WITHOUT_CLASSIFICATION	// draw all the day cells
WITHOUT_CLASSIFICATION	// draw the outline of the cell // gc.setColor(MetalLookAndFeel.getPrimaryControlShadow());
WITHOUT_CLASSIFICATION	// set the pen color depending on weekday or weekend, and paint // the // day number in the cell
WITHOUT_CLASSIFICATION	// advance to the next cell position
WITHOUT_CLASSIFICATION	/* Get the preferred size of the component. */
WITHOUT_CLASSIFICATION	/* Get the minimum size of the component. */
WITHOUT_CLASSIFICATION	/* Figure out which day the mouse click is on. */
WITHOUT_CLASSIFICATION	// check if totally out of range.
WITHOUT_CLASSIFICATION	/* mouse listener */
WITHOUT_CLASSIFICATION	// asupport.fireActionEvent(DATE_CHANGE_CMD);
WITHOUT_CLASSIFICATION	// border
WITHOUT_CLASSIFICATION	// Set text, possibly with a mnemonic if defined using &
WITHOUT_CLASSIFICATION	// set display text - possible with a mnemonic defined using &
WITHOUT_CLASSIFICATION	// setText(treeNode.getName()); // setIcon(getFolderIcon(treeNode, expanded));
WITHOUT_CLASSIFICATION	//setBackground(new Color(236, 233, 216));
WITHOUT_CLASSIFICATION	// don't override update(), get the default clear
WITHOUT_CLASSIFICATION	// Enable JavaHelp support if topic id is defined
WITHOUT_CLASSIFICATION	// apply transparent icon
WITHOUT_CLASSIFICATION	/*setIconTextGap(5);setVerticalAlignment(JLabel.CENTER);*/
WITHOUT_CLASSIFICATION	// centerpanel
WITHOUT_CLASSIFICATION	// search for mnemonic
WITHOUT_CLASSIFICATION	// mnemonic found // ...and not at the end of the string (which doesn't make sence)
WITHOUT_CLASSIFICATION	// if mnemonic is first character of this string
WITHOUT_CLASSIFICATION	// if mnemonic is first character of this string
WITHOUT_CLASSIFICATION	// set display text
WITHOUT_CLASSIFICATION	// set display text
WITHOUT_CLASSIFICATION	// set mnemonic
WITHOUT_CLASSIFICATION	// set mnemonic
WITHOUT_CLASSIFICATION	// no mnemonic found - just set the text on the menu item
WITHOUT_CLASSIFICATION	// no mnemonic found - just set the text on the menu item
WITHOUT_CLASSIFICATION	//RGB values discovered using ZoomIn
WITHOUT_CLASSIFICATION	//Dimensions
WITHOUT_CLASSIFICATION	//Layout a row and column "grid"
WITHOUT_CLASSIFICATION	//Draw the white squares first, so the gray squares will overlap
WITHOUT_CLASSIFICATION	//draw the gray squares overlapping the white background squares
WITHOUT_CLASSIFICATION	// initialization
WITHOUT_CLASSIFICATION	// controller
WITHOUT_CLASSIFICATION	// draw horizontal lines
WITHOUT_CLASSIFICATION	// draw vertical lines
WITHOUT_CLASSIFICATION	// Add the default colors items.
WITHOUT_CLASSIFICATION	// The length is 1 if no item is selected
WITHOUT_CLASSIFICATION	//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Instance Creation *****************************************************
WITHOUT_CLASSIFICATION	// Accessing Properties **************************************************
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// id = org.columba.example.HelloWorld$HelloWorldPlugin
WITHOUT_CLASSIFICATION	// Constructor...	
WITHOUT_CLASSIFICATION	//cache the old color //set the white color //draw the square //reset the old color
WITHOUT_CLASSIFICATION	//insets.top    += spacing; //insets.bottom += spacing;
WITHOUT_CLASSIFICATION	//if we stopped at line break, increase array index pointer
WITHOUT_CLASSIFICATION	//increase minimum height by line height and line spacing
WITHOUT_CLASSIFICATION	//add the component's border insets to our minimum dimension
WITHOUT_CLASSIFICATION	//check for line breaks
WITHOUT_CLASSIFICATION	//put them into the array
WITHOUT_CLASSIFICATION	//draw line
WITHOUT_CLASSIFICATION	//String userVisibleName = pluginHandler.getUserVisibleName(id);
WITHOUT_CLASSIFICATION	// button panel
WITHOUT_CLASSIFICATION	// button panel
WITHOUT_CLASSIFICATION	// look and feel
WITHOUT_CLASSIFICATION	// fonts
WITHOUT_CLASSIFICATION	// fonts
WITHOUT_CLASSIFICATION	// fonts
WITHOUT_CLASSIFICATION	// toolbar
WITHOUT_CLASSIFICATION	// language
WITHOUT_CLASSIFICATION	// language
WITHOUT_CLASSIFICATION	// HTTP proxy
WITHOUT_CLASSIFICATION	// ID of configuration plugin of this theme plugin
WITHOUT_CLASSIFICATION	// get theme plugin-handler
WITHOUT_CLASSIFICATION	// get config plugin-handler
WITHOUT_CLASSIFICATION	// enable/disable button, too
WITHOUT_CLASSIFICATION	// select Locale in ComboBox
WITHOUT_CLASSIFICATION	// get language configuration
WITHOUT_CLASSIFICATION	// set language config based on selected item
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// 3 columns
WITHOUT_CLASSIFICATION	// skip the first column
WITHOUT_CLASSIFICATION	// Add components to the panel:
WITHOUT_CLASSIFICATION	// init bottom panel with OK, Cancel buttons
WITHOUT_CLASSIFICATION	// switch to new theme
WITHOUT_CLASSIFICATION	// notify frame to update
WITHOUT_CLASSIFICATION	// set fonts
WITHOUT_CLASSIFICATION	// collapsible.getContentPane().setBackground(Color.WHITE);
WITHOUT_CLASSIFICATION	// use the collapse/expand icons from the JTree UI
WITHOUT_CLASSIFICATION	// link.setFont(link.getFont().deriveFont(Font.BOLD));
WITHOUT_CLASSIFICATION	// link.setBackground(titleBackground);
WITHOUT_CLASSIFICATION	//SystemColor.controlLtHighlight,
WITHOUT_CLASSIFICATION	// if the collapsible is collapsed, we do not want its border to be // painted.
WITHOUT_CLASSIFICATION	//			g.setColor(borderColor2); //			g.drawLine(x, y + height - 1, x + width, y + height - 1);
WITHOUT_CLASSIFICATION	/*         * bottomPanel.setBorder(new WizardTopBorder()); Border border =         * bottomPanel.getBorder(); Border margin =         * BorderFactory.createEmptyBorder(15, 10, 10, 10);         * bottomPanel.setBorder(new CompoundBorder(border, margin));         */
WITHOUT_CLASSIFICATION	// centerPanel.add(label, cc.xywh(3, 1, 1, 1));
WITHOUT_CLASSIFICATION	// buttonPanel.add(reportBugButton);
WITHOUT_CLASSIFICATION	/*		 * FormLayout layout = new FormLayout("default", "default, default");		 * IContainer c = getContentPane(); c.setLayout(layout);		 * 		 * CellConstraints cc = new CellConstraints();		 * c.add(createCenterPanel(detailsButton.isSelected()), cc.xy(1, 1));		 * c.add(bottomPanel, cc.xy(1, 2));		 */
WITHOUT_CLASSIFICATION	// Spacings
WITHOUT_CLASSIFICATION	// First Line with Labels
WITHOUT_CLASSIFICATION	// Second Line with Names
WITHOUT_CLASSIFICATION	// Third Line with Lists
WITHOUT_CLASSIFICATION	// 4. Line with PreviewLabel
WITHOUT_CLASSIFICATION	// 5. Line with Preview
WITHOUT_CLASSIFICATION	// 6. Line with Buttons
WITHOUT_CLASSIFICATION	//String envfonts[] = gEnv.getAvailableFontFamilyNames();
WITHOUT_CLASSIFICATION	//fill sizes string array with numbers from 7 to 18
WITHOUT_CLASSIFICATION	// this.contentPane = comp;
WITHOUT_CLASSIFICATION	// label.setFont(UIManager.getFont("Label.font").deriveFont(Font.PLAIN));
WITHOUT_CLASSIFICATION	// builder.addFixedNarrow((JButton) rightButtonVector.get(i));
WITHOUT_CLASSIFICATION	// ButtonBarBuilder builder2 = new ButtonBarBuilder(buttonWestPanel);
WITHOUT_CLASSIFICATION	// builder2.addGlue();
WITHOUT_CLASSIFICATION	// builder2.addStrut(Sizes.pixel(4));
WITHOUT_CLASSIFICATION	// ButtonBarBuilder builder = new ButtonBarBuilder(buttonEastPanel); // // builder.addGlue();
WITHOUT_CLASSIFICATION	// JPanel p = new JPanel(); // p.setLayout(new FlowLayout());
WITHOUT_CLASSIFICATION	// g2.setColor(fillColor); // g2.fillRect(0,0,w,h);
WITHOUT_CLASSIFICATION	/* If this is a unix-based system, check the 2 best-known areas for the * aspell binary. */
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//setMargin(new Insets(0,0,0,0));
WITHOUT_CLASSIFICATION	// this property is ignored under java 1.5.
WITHOUT_CLASSIFICATION	// menu.setVisible(true);
WITHOUT_CLASSIFICATION	// DockingManager.(DockableView.this);
WITHOUT_CLASSIFICATION	// process exception -> show error dialog to user
WITHOUT_CLASSIFICATION	// Print the stacktrace to our log file.
WITHOUT_CLASSIFICATION	//does not happen
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	//does not happen
WITHOUT_CLASSIFICATION	// show error dialog, with exception message and stack-trace // -> dialog also provides a button for the user to easily // -> report a bug
WITHOUT_CLASSIFICATION	// result.append(", ");
WITHOUT_CLASSIFICATION	/* RIYAD: The Prefs API cannot be used to read the Window's registry, * it is coded to use the registry (if available) as a backing store * on in the SOFTWARE/JavaSoft/Prefs registry keys for HKEY_CURRENT_USER * and HKEY_LOCAL_MACHINE paths. I have seen a few java apps that use * the Windows registry and they all required a native lib to do it. */
WITHOUT_CLASSIFICATION	/* RIYAD: The Prefs API cannot be used to read the Window's registry, * it is coded to use the registry (if available) as a backing store * on in the SOFTWARE/JavaSoft/Prefs registry keys for HKEY_CURRENT_USER * and HKEY_LOCAL_MACHINE paths. I have seen a few java apps that use * the Windows registry and they all required a native lib to do it. */
WITHOUT_CLASSIFICATION	/* If this is windows, check the default installation location for the * aspell.exe binary. */
WITHOUT_CLASSIFICATION	/* Couldn't find anything, so return null and let the wizard ask the * user. */
WITHOUT_CLASSIFICATION	/* Couldn't find anything, so return null and let the wizard ask the * user. */
WITHOUT_CLASSIFICATION	// check configuration
WITHOUT_CLASSIFICATION	// create xml node
WITHOUT_CLASSIFICATION	// start the configuration wizard
WITHOUT_CLASSIFICATION	// ok, now the tool is initialized correctly
WITHOUT_CLASSIFICATION	// get location of executable
WITHOUT_CLASSIFICATION	// get plugin ID
WITHOUT_CLASSIFICATION	// get configuration
WITHOUT_CLASSIFICATION	// set configuration of this plugin
WITHOUT_CLASSIFICATION	// exit for-loop
WITHOUT_CLASSIFICATION	/* GPG for windows is an executable-only download, fortunately there is * a windows registry file included in the download and has this as the * default installation path in it. While users will probably install GPG * into many other places, this is atleast a best-guess start. */
WITHOUT_CLASSIFICATION	/* If this is a unix-based system, check the 2 best-known areas for the * gpg binary. */
WITHOUT_CLASSIFICATION	/* If this is windows, check the default installation location for the * gpg.exe binary. */
WITHOUT_CLASSIFICATION	// init component before querying for sourceFile
WITHOUT_CLASSIFICATION	// get plugin handler for handling frames
WITHOUT_CLASSIFICATION	// store every open frame in our temporary list
WITHOUT_CLASSIFICATION	// close every open frame
WITHOUT_CLASSIFICATION	// if not we haven't actually closed a frame, leave viewList as is
WITHOUT_CLASSIFICATION	// load all frames from configuration file
WITHOUT_CLASSIFICATION	// get element from view list
WITHOUT_CLASSIFICATION	// should not occur
WITHOUT_CLASSIFICATION	// fall-back
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// used to temporarily store the values while the original // viewList gets modified by the close method
WITHOUT_CLASSIFICATION	// we cannot use an iterator here because the close method // manipulates the list
WITHOUT_CLASSIFICATION	// the close method manipulates the viewList so we have to // remove the existing element and fill in our temporarily // stored ones
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// found cached instance // -> re-use this instance and remove it from cache
WITHOUT_CLASSIFICATION	// create new instance // -> get frame controller using the plugin handler found above
WITHOUT_CLASSIFICATION	// look for default view settings (if not found, null is returned)
WITHOUT_CLASSIFICATION	// look for default view settings (if not found, null is returned)
WITHOUT_CLASSIFICATION	// Create a frame controller for this view // view = null => defaults specified by frame controller is used
WITHOUT_CLASSIFICATION	// cancel, if we show already correct frame mediator
WITHOUT_CLASSIFICATION	// Create a frame controller for this view
WITHOUT_CLASSIFICATION	// save old framemediator in cache (use containers's old id)
WITHOUT_CLASSIFICATION	// If defaultViews doesn't exist, create it (backward compatibility)
WITHOUT_CLASSIFICATION	// search through defaultViews to get settings for given id
WITHOUT_CLASSIFICATION	// nothing to save
WITHOUT_CLASSIFICATION	// removed previous default values
WITHOUT_CLASSIFICATION	// store current view settings
WITHOUT_CLASSIFICATION	// Check if the frame controller has been registered, else do nothing
WITHOUT_CLASSIFICATION	// save in cache
WITHOUT_CLASSIFICATION	// this is the last frame so store its data in the viewList
WITHOUT_CLASSIFICATION	// shutdown Columba if no frame exists anymore
WITHOUT_CLASSIFICATION	//Can we use the Java way to maximize the window
WITHOUT_CLASSIFICATION	//We can use the Java way to maximize the window
WITHOUT_CLASSIFICATION	// clear the tooltip message previously displayed in the status bar
WITHOUT_CLASSIFICATION	// Menuitems use this to display a string in the statusbar
WITHOUT_CLASSIFICATION	// init selection handler
WITHOUT_CLASSIFICATION	// overwrite this method
WITHOUT_CLASSIFICATION	// overwrite this method
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// make sure there is nothing within the root dockingport
WITHOUT_CLASSIFICATION	// overwrite this method
WITHOUT_CLASSIFICATION	// overwrite this method
WITHOUT_CLASSIFICATION	// overwrite this method
WITHOUT_CLASSIFICATION	// createMenuBar();
WITHOUT_CLASSIFICATION	// load docking settings from last user session
WITHOUT_CLASSIFICATION	// JPanel panel = (JPanel) this.getContentPane();
WITHOUT_CLASSIFICATION	// convert region enum to flexdock string
WITHOUT_CLASSIFICATION	// create new default frame controller
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// create menu
WITHOUT_CLASSIFICATION	// add statusbar
WITHOUT_CLASSIFICATION	// Set the icon and the title
WITHOUT_CLASSIFICATION	// create toolbar
WITHOUT_CLASSIFICATION	// register statusbar at global taskmanager
WITHOUT_CLASSIFICATION	// contentPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
WITHOUT_CLASSIFICATION	// remove from old mediator's listener list
WITHOUT_CLASSIFICATION	// contentPane.add(dockingPort, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// add window listener
WITHOUT_CLASSIFICATION	// turn on floating support
WITHOUT_CLASSIFICATION	// enable flexdock ghost preview
WITHOUT_CLASSIFICATION	// update content-pane
WITHOUT_CLASSIFICATION	// update content-pane
WITHOUT_CLASSIFICATION	// add to new mediator's listener list
WITHOUT_CLASSIFICATION	// add to new mediator's listener list
WITHOUT_CLASSIFICATION	// default core menu
WITHOUT_CLASSIFICATION	// setJMenuBar(menubar);
WITHOUT_CLASSIFICATION	// default toolbar
WITHOUT_CLASSIFICATION	// *20030831, karlpeder* Also location is restored
WITHOUT_CLASSIFICATION	// if window is maximized -> ignore the window size properties // otherwise, use window size property // but ensure that the window is completly visible on the // desktop
WITHOUT_CLASSIFICATION	// *20030831, karlpeder* Now also location is stored
WITHOUT_CLASSIFICATION	// retrieve metadata
WITHOUT_CLASSIFICATION	// add action to menu
WITHOUT_CLASSIFICATION	// remove old content pane
WITHOUT_CLASSIFICATION	// contentPane.remove(mediator.getContentPane());
WITHOUT_CLASSIFICATION	// add animated icon to right-hand side corner of menubar
WITHOUT_CLASSIFICATION	// // add new componnet
WITHOUT_CLASSIFICATION	// show/hide new toolbar
WITHOUT_CLASSIFICATION	// getContentPane().validate();
WITHOUT_CLASSIFICATION	// save window position
WITHOUT_CLASSIFICATION	// hide window
WITHOUT_CLASSIFICATION	// don't do anything
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// if window is maximized -> ignore the window size properties // otherwise, use window size property // but ensure that the window is completly visible on the // desktop
WITHOUT_CLASSIFICATION	// Some error in the client/server communication // --> fall back to default login process
WITHOUT_CLASSIFICATION	// make window visible // LOG.finest("setVisible()");
WITHOUT_CLASSIFICATION	// load window position // loadPositions(getViewItem());
WITHOUT_CLASSIFICATION	// public ColumbaMenu getMenuBar() { // return menu; // }
WITHOUT_CLASSIFICATION	// // Tell frame model that frame is closing. If this frame hasn't been // opened using FrameManager methods, FrameManager.close does nothing. //
WITHOUT_CLASSIFICATION	// getContentPane().remove(this.toolbar);
WITHOUT_CLASSIFICATION	// remove old toolbar
WITHOUT_CLASSIFICATION	//searchToolBar.addSeparator();
WITHOUT_CLASSIFICATION	//searchBar.install(searchToolBar);
WITHOUT_CLASSIFICATION	// add search bar to main toolbar, in case its a managed frame mediator
WITHOUT_CLASSIFICATION	// // getContentPane().validate();
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// register for change of the frame mediator
WITHOUT_CLASSIFICATION	// check if mediator supports docking
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// awt-event-thread
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	/*	 * Uses the FrameManager instance in MainInterface to open a new addressbook	 * window.	 */
WITHOUT_CLASSIFICATION	//putValue(SMALL_ICON, ImageLoader.getIcon("script.png"));
WITHOUT_CLASSIFICATION	//putValue(SMALL_ICON, ImageLoader.getIcon("script.png"));
WITHOUT_CLASSIFICATION	//putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("mail-new.png"));
WITHOUT_CLASSIFICATION	/*	 * Opens a new mail window using the FrameManager instance in MainInterface.	 */
WITHOUT_CLASSIFICATION	// small icon for JMenuItem
WITHOUT_CLASSIFICATION	// big icon for JToolBar
WITHOUT_CLASSIFICATION	// set JavaHelp topic ID // setTopicID("cancel");
WITHOUT_CLASSIFICATION	// short cut key
WITHOUT_CLASSIFICATION	// FocusManager.getInstance().setDeleteAction(this);
WITHOUT_CLASSIFICATION	// enable/disable search bar during search
WITHOUT_CLASSIFICATION	// We need to sort the uids in order // to have the correct association // between the new and old uid
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// short cut key
WITHOUT_CLASSIFICATION	// check if this is a management frame instance // -> if so create submenu to switch perspectives // -> otherwise, don't create submenu
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// FocusManager.getInstance().delete();
WITHOUT_CLASSIFICATION	// create menuitems for all registered frame extensions
WITHOUT_CLASSIFICATION	// create menuitems for all registered new items
WITHOUT_CLASSIFICATION	/*     * Close all open frames, which leads to exiting Columba     */
WITHOUT_CLASSIFICATION	//FrameManager.getInstance().storeViews();
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)   */
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// short cut key
WITHOUT_CLASSIFICATION	// textPane.setMargin(new Insets(5, 5, 5, 5));
WITHOUT_CLASSIFICATION	// setup base url in order to be able to display images // in html-component
WITHOUT_CLASSIFICATION	// scroll window to the beginning
WITHOUT_CLASSIFICATION	// First find the beginning element
WITHOUT_CLASSIFICATION	// in case of an error -> fall-back to Swing's built-in JTextPane
WITHOUT_CLASSIFICATION	// we insert new menus between the "Edit" and the "Utilities, Help" menu
WITHOUT_CLASSIFICATION	// extend existing menu
WITHOUT_CLASSIFICATION	// extend existing menu
WITHOUT_CLASSIFICATION	// create new menu
WITHOUT_CLASSIFICATION	// create new menu
WITHOUT_CLASSIFICATION	// make sure that we don't end up with two separators
WITHOUT_CLASSIFICATION	// make sure that we don't end up with two separators
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// view -> model
WITHOUT_CLASSIFICATION	// centerpanel
WITHOUT_CLASSIFICATION	//	This method is called when a cell value is edited by the user.
WITHOUT_CLASSIFICATION	// Configure the component with the specified value
WITHOUT_CLASSIFICATION	// Return the configured component
WITHOUT_CLASSIFICATION	// This method is called when editing is completed. // It must return the new value to be stored in the cell.
WITHOUT_CLASSIFICATION	// enable/disable tree node
WITHOUT_CLASSIFICATION	// enable/disable tree node
WITHOUT_CLASSIFICATION	/*// enable/disable pluginString id = currentNode.getId();MainInterface.pluginManager.setEnabled(id, b.booleanValue());*/
WITHOUT_CLASSIFICATION	// modal dialog
WITHOUT_CLASSIFICATION	// model->view
WITHOUT_CLASSIFICATION	// centerPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
WITHOUT_CLASSIFICATION	// setContentPane(mainPanel);
WITHOUT_CLASSIFICATION	//int iconOffset = getHorizontalAlignment() + getIcon().getIconWidth() + 1;
WITHOUT_CLASSIFICATION	// ((DefaultTreeModel) // model.getTree().getModel()).setAsksAllowsChildren(true);
WITHOUT_CLASSIFICATION	// make "version" column fixed size
WITHOUT_CLASSIFICATION	// make "enabled" column fixed size
WITHOUT_CLASSIFICATION	// plugin wasn't correctly loaded
WITHOUT_CLASSIFICATION	// this plugin doesn't define a category to which it belongs
WITHOUT_CLASSIFICATION	// unknown category found // -> just add this plugin to "Uncategorized"
WITHOUT_CLASSIFICATION	// add node
WITHOUT_CLASSIFICATION	// notify tree model
WITHOUT_CLASSIFICATION	// make new node visible
WITHOUT_CLASSIFICATION	// notify tree
WITHOUT_CLASSIFICATION	// first column is a tree
WITHOUT_CLASSIFICATION	// third column is a JCheckBox column
WITHOUT_CLASSIFICATION	// checkbox pressed
WITHOUT_CLASSIFICATION	// enabled/disabled checkbox must be editable
WITHOUT_CLASSIFICATION	// tree must be editable, otherwise you can't collapse/expand tree nodes
WITHOUT_CLASSIFICATION	// modal JDialog
WITHOUT_CLASSIFICATION	// top panel
WITHOUT_CLASSIFICATION	// topPanel.setLayout( );
WITHOUT_CLASSIFICATION	// start search
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// centerpanel
WITHOUT_CLASSIFICATION	// centerpanel
WITHOUT_CLASSIFICATION	// topBorderPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, // 0));
WITHOUT_CLASSIFICATION	// mainPanel.add( topBorderPanel, BorderLayout.NORTH );
WITHOUT_CLASSIFICATION	// c.fill = GridBagConstraints.HORIZONTAL;
WITHOUT_CLASSIFICATION	// get plugin directory
WITHOUT_CLASSIFICATION	// delete plugin from disk
WITHOUT_CLASSIFICATION	// remove plugin from view
WITHOUT_CLASSIFICATION	// this is just a folder // ->disable all actions
WITHOUT_CLASSIFICATION	// if plugin has config extension point
WITHOUT_CLASSIFICATION	// use user's config folder in his/her home-folder // all plugins reside in "<config-folder>/plugins"
WITHOUT_CLASSIFICATION	// extract plugin
WITHOUT_CLASSIFICATION	// the plugin directory is "<config-folder>/plugins/<plugin-id>"
WITHOUT_CLASSIFICATION	// the path to the plugin.xml descriptor file is: // "<config-folder>/plugins/<plugin-id>/plugin.xml
WITHOUT_CLASSIFICATION	// this node is category folder // -> don't make it editable
WITHOUT_CLASSIFICATION	//protected JButton defaultButton;
WITHOUT_CLASSIFICATION	//		 top panel
WITHOUT_CLASSIFICATION	//topPanel.setLayout( );
WITHOUT_CLASSIFICATION	//topBorderPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, // 0));
WITHOUT_CLASSIFICATION	//mainPanel.add( topBorderPanel, BorderLayout.NORTH );
WITHOUT_CLASSIFICATION	//c.fill = GridBagConstraints.HORIZONTAL;
WITHOUT_CLASSIFICATION	// add profile to profiles.xml
WITHOUT_CLASSIFICATION	// add profile to profiles.xml
WITHOUT_CLASSIFICATION	// add to listmodel
WITHOUT_CLASSIFICATION	// add to listmodel
WITHOUT_CLASSIFICATION	// rename profile in profiles.xml
WITHOUT_CLASSIFICATION	// rename profile in profiles.xml
WITHOUT_CLASSIFICATION	// modify listmodel
WITHOUT_CLASSIFICATION	// modify listmodel
WITHOUT_CLASSIFICATION	//defaultButton.setEnabled(enabled);
WITHOUT_CLASSIFICATION	// user's can't edit default account
WITHOUT_CLASSIFICATION	// protected JButton defaultButton;
WITHOUT_CLASSIFICATION	// can't delete currently running profile
WITHOUT_CLASSIFICATION	// delete directory recursivly
WITHOUT_CLASSIFICATION	// delete all files
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// get current list selection
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfileForName(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getSelectedProfile()	 */
WITHOUT_CLASSIFICATION	// user's can't delete default account
WITHOUT_CLASSIFICATION	// create directory, if it doesn't already exist
WITHOUT_CLASSIFICATION	// load profiles.xml
WITHOUT_CLASSIFICATION	// prompt user for profile
WITHOUT_CLASSIFICATION	// use commandline-specified location
WITHOUT_CLASSIFICATION	// try name first
WITHOUT_CLASSIFICATION	// try directory
WITHOUT_CLASSIFICATION	// create profile
WITHOUT_CLASSIFICATION	// save to profiles.xml
WITHOUT_CLASSIFICATION	// save to profiles.xml
WITHOUT_CLASSIFICATION	// save to profiles.xml
WITHOUT_CLASSIFICATION	// use preselected profile
WITHOUT_CLASSIFICATION	// fall back to default profile
WITHOUT_CLASSIFICATION	// show profile choosing dialog
WITHOUT_CLASSIFICATION	// create profile config file
WITHOUT_CLASSIFICATION	// load profile config file
WITHOUT_CLASSIFICATION	// Is the location still existing?
WITHOUT_CLASSIFICATION	// delete all directories
WITHOUT_CLASSIFICATION	// remove profile xml-element
WITHOUT_CLASSIFICATION	// do something with link
WITHOUT_CLASSIFICATION	// setPreferredSize(list.getPreferredSize());
WITHOUT_CLASSIFICATION	// private JLabel iconLabel = new JLabel();
WITHOUT_CLASSIFICATION	// titleLabel.setBackground(UIManager.getColor("Label.background"));
WITHOUT_CLASSIFICATION	// topPanel.add(iconLabel, BorderLayout.WEST);
WITHOUT_CLASSIFICATION	// initialization
WITHOUT_CLASSIFICATION	// controller
WITHOUT_CLASSIFICATION	// link.setFont(link.getFont().deriveFont(Font.BOLD));
WITHOUT_CLASSIFICATION	// if the collapsible is collapsed, we do not want its border to be // painted.
WITHOUT_CLASSIFICATION	//			g.setColor(borderColor2); //			g.drawLine(x, y + height - 1, x + width, y + height - 1);
WITHOUT_CLASSIFICATION	// if config-folder is really empty // -> delete folder
WITHOUT_CLASSIFICATION	// Border border = BorderFactory.createCompoundBorder(new // ShadowBorder(),BorderFactory.createEmptyBorder(10, 10, 10,10)); // ((JPanel) getContentPane()).setBorder(border);
WITHOUT_CLASSIFICATION	//		Border border = new CompoundBorder(BorderFactory.createEmptyBorder(2, //				4, 2, 4), border1);
WITHOUT_CLASSIFICATION	//iconLabel.setOpaque(true);
WITHOUT_CLASSIFICATION	//top.setOpaque(true);
WITHOUT_CLASSIFICATION	//		popupMenu.setFocusable( false ); //		popupMenu.setRequestFocusEnabled(false); 
WITHOUT_CLASSIFICATION	// icon (we can't use the setIcon-method this time, as it relies on the // border being set)
WITHOUT_CLASSIFICATION	//popupMenu.getSelectionModel().clearSelection();
WITHOUT_CLASSIFICATION	//popupMenu.getSelectionModel().setSelectedIndex(0);
WITHOUT_CLASSIFICATION	//collapsible.getContentPane().setBackground(Color.WHITE);
WITHOUT_CLASSIFICATION	//link.setBackground(titleBackground);
WITHOUT_CLASSIFICATION	//iconLabel.setBackground(titleBackground);
WITHOUT_CLASSIFICATION	// private SearchResultView searchResultView;
WITHOUT_CLASSIFICATION	//private StackedBox box;
WITHOUT_CLASSIFICATION	//box = new StackedBox();
WITHOUT_CLASSIFICATION	//topPanel.setBackground(UIManager.getColor("TextField.background"));
WITHOUT_CLASSIFICATION	//createDefaultStackedBox();
WITHOUT_CLASSIFICATION	// if in debug mode, register context debugger view
WITHOUT_CLASSIFICATION	// search individual provider and individual criteria
WITHOUT_CLASSIFICATION	// start a new search -> clear all previous search results
WITHOUT_CLASSIFICATION	// search individual provider
WITHOUT_CLASSIFICATION	// start a new search -> clear all previous search results
WITHOUT_CLASSIFICATION	//box.setBackground(new Color(248, 248, 248)); //		JScrollPane pane = new JScrollPane(box); //		pane.setBorder(null);
WITHOUT_CLASSIFICATION	// search across all providers
WITHOUT_CLASSIFICATION	// search across all providers
WITHOUT_CLASSIFICATION	// search across a few specific search criteria at once
WITHOUT_CLASSIFICATION	//remove(topPanel);
WITHOUT_CLASSIFICATION	//remove(topPanel);
WITHOUT_CLASSIFICATION	//remove(topPanel);
WITHOUT_CLASSIFICATION	// first, create bucket for each provider
WITHOUT_CLASSIFICATION	// now search through all buckets
WITHOUT_CLASSIFICATION	//defaultBox.removeAll();
WITHOUT_CLASSIFICATION	// clear previous search results
WITHOUT_CLASSIFICATION	// create new stacked box
WITHOUT_CLASSIFICATION	// search all criteria in specific provider only
WITHOUT_CLASSIFICATION	// search in specific criteria
WITHOUT_CLASSIFICATION	// query with only a single criteria
WITHOUT_CLASSIFICATION	// query only a single provider
WITHOUT_CLASSIFICATION	// query all criteria of all providers
WITHOUT_CLASSIFICATION	// repaint box
WITHOUT_CLASSIFICATION	// add result panel as listener for new search results
WITHOUT_CLASSIFICATION	// create visual container for result panel
WITHOUT_CLASSIFICATION	// create visual container for result panel
WITHOUT_CLASSIFICATION	// add to search panel
WITHOUT_CLASSIFICATION	// add to search panel
WITHOUT_CLASSIFICATION	// show search docking view
WITHOUT_CLASSIFICATION	// show docking view
WITHOUT_CLASSIFICATION	// execute background search
WITHOUT_CLASSIFICATION	//addRightComponent(taskButton, 30);
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// init result view //createContextStackedBox();
WITHOUT_CLASSIFICATION	// skip if user didn't specify search term for this criteria
WITHOUT_CLASSIFICATION	// execute search
WITHOUT_CLASSIFICATION	// toolbar container
WITHOUT_CLASSIFICATION	// user pressed "Search" button
WITHOUT_CLASSIFICATION	// show search dialog
WITHOUT_CLASSIFICATION	// on "RETURN" start seach
WITHOUT_CLASSIFICATION	// to enable button again after search is finished
WITHOUT_CLASSIFICATION	// skip "Search All"
WITHOUT_CLASSIFICATION	// intersect this with the existing clip
WITHOUT_CLASSIFICATION	// restore original clip
WITHOUT_CLASSIFICATION	// make it translucent
WITHOUT_CLASSIFICATION	// paint the text and icon
WITHOUT_CLASSIFICATION	// builder.append(moreButton);
WITHOUT_CLASSIFICATION	// builder.append(searchButton);
WITHOUT_CLASSIFICATION	// searchInsideCheckBox.setEnabled(false);
WITHOUT_CLASSIFICATION	// paint outer border // g2d.setPaint(OUTER);
WITHOUT_CLASSIFICATION	// paint right outside border // g2d.setPaint(p1);
WITHOUT_CLASSIFICATION	// paint right inside border // g2d.setPaint(p2);
WITHOUT_CLASSIFICATION	// builder.append(contextButton); // builder.append(providerComboBox);
WITHOUT_CLASSIFICATION	// update popup menu based on searchterm
WITHOUT_CLASSIFICATION	// create all individual search criteria for this provider
WITHOUT_CLASSIFICATION	// create search history
WITHOUT_CLASSIFICATION	// search is finished // -> enable search button again
WITHOUT_CLASSIFICATION	// do layout again
WITHOUT_CLASSIFICATION	//private JButton taskButton;
WITHOUT_CLASSIFICATION	// layoutComponents();
WITHOUT_CLASSIFICATION	// update connection state
WITHOUT_CLASSIFICATION	// init update timer
WITHOUT_CLASSIFICATION	// updateTimer.start();
WITHOUT_CLASSIFICATION	// The Stream finished before the header was completely // read!
WITHOUT_CLASSIFICATION	// update text and progress bar
WITHOUT_CLASSIFICATION	// update text and progress bar
WITHOUT_CLASSIFICATION	// remember last message
WITHOUT_CLASSIFICATION	// immediately update text and progress bar // updateGui();
WITHOUT_CLASSIFICATION	// if only one task left
WITHOUT_CLASSIFICATION	// stop update timer
WITHOUT_CLASSIFICATION	// set text
WITHOUT_CLASSIFICATION	// clear text with delay
WITHOUT_CLASSIFICATION	// update timer event
WITHOUT_CLASSIFICATION	// clear label
WITHOUT_CLASSIFICATION	// stop clear timer
WITHOUT_CLASSIFICATION	// return super.getListCellRendererComponent(arg0, arg1, arg2, arg3, // arg4);
WITHOUT_CLASSIFICATION	// disabled Kill button, because feature is not supported
WITHOUT_CLASSIFICATION	// check if a single entry is selected
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// centerpanel
WITHOUT_CLASSIFICATION	// get configuration
WITHOUT_CLASSIFICATION	// fall-back
WITHOUT_CLASSIFICATION	// create a panel with all 4 buttons of the window // columns  // rows
WITHOUT_CLASSIFICATION	/*		 * Component strut1 = Box.createRigidArea(new Dimension(30, 6));		 * gridBagLayout.setConstraints(strut1, c); eastPanel.add(strut1);		 * 		 * gridBagLayout.setConstraints(killButton, c);		 * eastPanel.add(killButton);		 */
WITHOUT_CLASSIFICATION	// force repaint
WITHOUT_CLASSIFICATION	// fill list model with tags
WITHOUT_CLASSIFICATION	// popup menu 
WITHOUT_CLASSIFICATION	// update tag list if mode changes
WITHOUT_CLASSIFICATION	// descriptionLabel.setFont(descriptionLabel.getFont().deriveFont(Font.ITALIC));
WITHOUT_CLASSIFICATION	// update menu if tags are changed
WITHOUT_CLASSIFICATION	// fire callback to remove all tags from selected items
WITHOUT_CLASSIFICATION	// don't want to have two separators
WITHOUT_CLASSIFICATION	// add all existing tags to the menu
WITHOUT_CLASSIFICATION	// mark tag, if the current selection is tagged with it
WITHOUT_CLASSIFICATION	// listener updates menu in case the tags where changed
WITHOUT_CLASSIFICATION	// get plugin-handler
WITHOUT_CLASSIFICATION	// if no theme available -> set "Plastic" as default
WITHOUT_CLASSIFICATION	// instanciate theme
WITHOUT_CLASSIFICATION	// apply theme
WITHOUT_CLASSIFICATION	/*		 * Gets the platform specific default theme. This is in all cases but		 * MacOS X the Plastic theme. On MacOs X we use the System L&F.		 *		 */
WITHOUT_CLASSIFICATION	// try the system aqua look and feel
WITHOUT_CLASSIFICATION	// set the Quaqua Look and Feel in the UIManager
WITHOUT_CLASSIFICATION	// set UI manager properties here that affect Quaqua
WITHOUT_CLASSIFICATION	// UIManager.setLookAndFeel(lafName);
WITHOUT_CLASSIFICATION	// setFloatable(true);
WITHOUT_CLASSIFICATION	// no text!
WITHOUT_CLASSIFICATION	// apply transparent icon
WITHOUT_CLASSIFICATION	/* (non-Javadoc)		 * @see java.lang.Thread#run()		 */
WITHOUT_CLASSIFICATION	// replace with "MyListCellRenderer" for simple one-line renderer // replace with "MyComplexListCellRenderer" for an additional description line
WITHOUT_CLASSIFICATION	// JavaHelp support
WITHOUT_CLASSIFICATION	// toolbar buttons always need an icon
WITHOUT_CLASSIFICATION	// apply transparent icon //button.setDisabledIcon(ImageUtil.createTransparentIcon(icon));
WITHOUT_CLASSIFICATION	// deprecated config-file support
WITHOUT_CLASSIFICATION	// deprecated config-file support // -> skip creation of "Cancel" button
WITHOUT_CLASSIFICATION	// tray icon not supported on Mac
WITHOUT_CLASSIFICATION	//titleLabel.setAlignmentY(0);
WITHOUT_CLASSIFICATION	//IServiceManager.getInstance().createService("");
WITHOUT_CLASSIFICATION	// found email address
WITHOUT_CLASSIFICATION	//openWithBrowser(getLink());
WITHOUT_CLASSIFICATION	// Font font = MainInterface.columbaTheme.getControlTextFont();
WITHOUT_CLASSIFICATION	// does not occur
WITHOUT_CLASSIFICATION	// 50k
WITHOUT_CLASSIFICATION	// just the animation, if there are more than zero // workers running
WITHOUT_CLASSIFICATION	// columns  // rows
WITHOUT_CLASSIFICATION	// if some action was performed
WITHOUT_CLASSIFICATION	// setup the finder
WITHOUT_CLASSIFICATION	// find action performed
WITHOUT_CLASSIFICATION	// mark found pattern
WITHOUT_CLASSIFICATION	//text.grabFocus();
WITHOUT_CLASSIFICATION	// delete marks
WITHOUT_CLASSIFICATION	//replace action performed
WITHOUT_CLASSIFICATION	// grant "all-permissions"
WITHOUT_CLASSIFICATION	// columns  // rows
WITHOUT_CLASSIFICATION	// if some action was performed
WITHOUT_CLASSIFICATION	// create a panel with a border and 3 options // columns  // rows
WITHOUT_CLASSIFICATION	// create a panel with a border and 3 options // columns  // rows
WITHOUT_CLASSIFICATION	// create a panel with all 4 buttons of the window // columns  // rows
WITHOUT_CLASSIFICATION	//text.grabFocus();
WITHOUT_CLASSIFICATION	//text.grabFocus();
WITHOUT_CLASSIFICATION	// delete marks
WITHOUT_CLASSIFICATION	// get text where to find pattern
WITHOUT_CLASSIFICATION	//replaceall action performed
WITHOUT_CLASSIFICATION	// to mark a text in the JTextPane
WITHOUT_CLASSIFICATION	// register as configuration change listener
WITHOUT_CLASSIFICATION	// patch submitted by forum user Turbo Chen // FIXED: user wasn't able to enter chinese text in Composer Subject textfield
WITHOUT_CLASSIFICATION	// we got this from headerfieldtree
WITHOUT_CLASSIFICATION	//private JTextPane textpane;
WITHOUT_CLASSIFICATION	//list[2].setHorizontalTextPosition( JLabel.LEADING );
WITHOUT_CLASSIFICATION	// get position of the pattern in the text
WITHOUT_CLASSIFICATION	// mark found pattern //text.grabFocus();
WITHOUT_CLASSIFICATION	// find pattern
WITHOUT_CLASSIFICATION	// delete marks (unselect)
WITHOUT_CLASSIFICATION	// name of helpset resource
WITHOUT_CLASSIFICATION	// could not find it!
WITHOUT_CLASSIFICATION	// maybe based on HS?
WITHOUT_CLASSIFICATION	// don't instantiate this class
WITHOUT_CLASSIFICATION	// Open the ZIP file
WITHOUT_CLASSIFICATION	// Open the ZIP file
WITHOUT_CLASSIFICATION	// Get the first entry
WITHOUT_CLASSIFICATION	// Get the first entry
WITHOUT_CLASSIFICATION	// Open the output file
WITHOUT_CLASSIFICATION	// Transfer bytes from the ZIP file to the output file
WITHOUT_CLASSIFICATION	// Close the stream
WITHOUT_CLASSIFICATION	// Close the stream
WITHOUT_CLASSIFICATION	// Close the stream
WITHOUT_CLASSIFICATION	// don't instantiate this
WITHOUT_CLASSIFICATION	// ensureDirectory
WITHOUT_CLASSIFICATION	// saveStringInFile
WITHOUT_CLASSIFICATION	// shutdown Columba
WITHOUT_CLASSIFICATION	// saveStringInFile
WITHOUT_CLASSIFICATION	// JMenu options = (JMenu) menuBar.add(new JMenu("Options")); // options.setMnemonic('O');
WITHOUT_CLASSIFICATION	// deleteDirectory
WITHOUT_CLASSIFICATION	// emptyDirectory
WITHOUT_CLASSIFICATION	// getResourceStream
WITHOUT_CLASSIFICATION	// throws // java.io.IOException
WITHOUT_CLASSIFICATION	// url = ClassLoader.getSystemResource(path);
WITHOUT_CLASSIFICATION	// getResourceURL
WITHOUT_CLASSIFICATION	// setResourceRoot
WITHOUT_CLASSIFICATION	// copyFile
WITHOUT_CLASSIFICATION	// attempt
WITHOUT_CLASSIFICATION	// copyResource
WITHOUT_CLASSIFICATION	// Byte
WITHOUT_CLASSIFICATION	// try to restore from previous session
WITHOUT_CLASSIFICATION	// Never mind
WITHOUT_CLASSIFICATION	// Try again after shutdown
WITHOUT_CLASSIFICATION	// ignore this yet
WITHOUT_CLASSIFICATION	// do nothing here
WITHOUT_CLASSIFICATION	// make sure file is deleted automatically when closing VM
WITHOUT_CLASSIFICATION	// add a new inputstream to read from
WITHOUT_CLASSIFICATION	// only if tempfile was corrupted
WITHOUT_CLASSIFICATION	// Delete the tempfile immedietly
WITHOUT_CLASSIFICATION	// init console handler
WITHOUT_CLASSIFICATION	// create logging file in "<users config-folder>/log"
WITHOUT_CLASSIFICATION	// Setup file logging
WITHOUT_CLASSIFICATION	// don't use // standard // XML // formatting
WITHOUT_CLASSIFICATION	//create new client and try to connect to server
WITHOUT_CLASSIFICATION	//no server running, start our own
WITHOUT_CLASSIFICATION	//display error message
WITHOUT_CLASSIFICATION	// prompt user for profile
WITHOUT_CLASSIFICATION	// set global class loader to null
WITHOUT_CLASSIFICATION	// force object finalization
WITHOUT_CLASSIFICATION	// run garbage collector
WITHOUT_CLASSIFICATION	// initialize global class loader
WITHOUT_CLASSIFICATION	// use global class loader to bootstrap Columba
WITHOUT_CLASSIFICATION	// do nothing here, just continue
WITHOUT_CLASSIFICATION	// create random port number within range
WITHOUT_CLASSIFICATION	// store port number in file
WITHOUT_CLASSIFICATION	// port is in use, try next
WITHOUT_CLASSIFICATION	// only accept client from local machine
WITHOUT_CLASSIFICATION	// do something with the arguments..
WITHOUT_CLASSIFICATION	// through reflection
WITHOUT_CLASSIFICATION	// memorize all URLs
WITHOUT_CLASSIFICATION	// initialize configuration with selected profile
WITHOUT_CLASSIFICATION	// if user doesn't overwrite logger settings with commandline arguments // just initialize default logging // Logging.createDefaultHandler();
WITHOUT_CLASSIFICATION	// enable debugging of repaint manager to track down swing gui // access from outside the awt-event dispatcher thread
WITHOUT_CLASSIFICATION	// use heavy-weight popups to ensure they are always on top
WITHOUT_CLASSIFICATION	// keep track of active windows (used by dialogs which don't have a // direct parent)
WITHOUT_CLASSIFICATION	// show splash screen
WITHOUT_CLASSIFICATION	// register protocol handler
WITHOUT_CLASSIFICATION	// load user-customised language pack
WITHOUT_CLASSIFICATION	// init all components
WITHOUT_CLASSIFICATION	// initialize platform-dependant services
WITHOUT_CLASSIFICATION	// init font configuration
WITHOUT_CLASSIFICATION	// set application wide font
WITHOUT_CLASSIFICATION	// handle the commandline arguments of the modules
WITHOUT_CLASSIFICATION	// now load all available plugins // PluginManager.getInstance().initExternalPlugins();
WITHOUT_CLASSIFICATION	// restore frames of last session
WITHOUT_CLASSIFICATION	/* initialize services before dismissing the splash screen */
WITHOUT_CLASSIFICATION	// register shutdown manager
WITHOUT_CLASSIFICATION	// initialize tagging
WITHOUT_CLASSIFICATION	// register for cleanup
WITHOUT_CLASSIFICATION	// hide splash screen
WITHOUT_CLASSIFICATION	//$NON-NLS-2$
WITHOUT_CLASSIFICATION	/* everything is up and running, start services */
WITHOUT_CLASSIFICATION	// // first load all extension handlers //
WITHOUT_CLASSIFICATION	// load core extension handlers
WITHOUT_CLASSIFICATION	// load addressbook extension handler
WITHOUT_CLASSIFICATION	// load mail extension handler
WITHOUT_CLASSIFICATION	// load all internal core plugins
WITHOUT_CLASSIFICATION	// load all internal addressbook plugins
WITHOUT_CLASSIFICATION	// load all internal mail plugins
WITHOUT_CLASSIFICATION	// load all internal calendar plugins
WITHOUT_CLASSIFICATION	// // now load all external plugins residing in /plugins directory //
WITHOUT_CLASSIFICATION	// This is necessary because getArgList returns the path in // square brackets
WITHOUT_CLASSIFICATION	// Do not exit
WITHOUT_CLASSIFICATION	// Platform maintainers: add your platform here
WITHOUT_CLASSIFICATION	// Setup the path // Platform maintainers: add your platform here // see also initPlatformServices() method
WITHOUT_CLASSIFICATION	// Find all native jars
WITHOUT_CLASSIFICATION	// Get the current classpath from the sysloader // through reflection
WITHOUT_CLASSIFICATION	// add all native jars
WITHOUT_CLASSIFICATION	// add the old classpath
WITHOUT_CLASSIFICATION	// replace with the modified classpath
WITHOUT_CLASSIFICATION	// Initialise system dependent stuff
WITHOUT_CLASSIFICATION	// switch for restoring last session of Columba. // if true, restores all windows.
WITHOUT_CLASSIFICATION	// automatically generate the help statement
WITHOUT_CLASSIFICATION	// remove directories which don't contain a plugin
WITHOUT_CLASSIFICATION	/*	 * protected static ClassLoader loader = ClassLoader.getSystemClassLoader();	 */
WITHOUT_CLASSIFICATION	// couldn't find correct constructor
WITHOUT_CLASSIFICATION	// couldn't find correct constructor
WITHOUT_CLASSIFICATION	// we can't just load the first constructor // -> go find the correct constructor // -> based on the arguments
WITHOUT_CLASSIFICATION	// find all possible plugin directories
WITHOUT_CLASSIFICATION	// parse "/plugin.xml" file
WITHOUT_CLASSIFICATION	// cancel
WITHOUT_CLASSIFICATION	// register all extensions
WITHOUT_CLASSIFICATION	// register all extensions
WITHOUT_CLASSIFICATION	// loop through all extensions this plugin uses // -> search the corresponding extension handler // -> register the extension at the extension handler
WITHOUT_CLASSIFICATION	// we have a plugin-handler for this kind of extension
WITHOUT_CLASSIFICATION	// if extension wasn't already registered
WITHOUT_CLASSIFICATION	// if no plugin directory exists -> return
WITHOUT_CLASSIFICATION	// if no plugin directory exists -> return
WITHOUT_CLASSIFICATION	// try to load all plugins
WITHOUT_CLASSIFICATION	// skip if it doesn't exist
WITHOUT_CLASSIFICATION	// skip if it doesn't exist
WITHOUT_CLASSIFICATION	// try all possible version of readme files...
WITHOUT_CLASSIFICATION	// retrieve inputstream from resource
WITHOUT_CLASSIFICATION	// parse plugin metadata
WITHOUT_CLASSIFICATION	// remember plugin metadata // pluginMap.put(id, pluginMetadata);
WITHOUT_CLASSIFICATION	// try to load extensin handlers of all plugins
WITHOUT_CLASSIFICATION	// this constructor has the correct number // of arguments
WITHOUT_CLASSIFICATION	// skip non-matching elements
WITHOUT_CLASSIFICATION	// loop through all extensions this plugin uses
WITHOUT_CLASSIFICATION	// skip if no <extensionlist> element found
WITHOUT_CLASSIFICATION	// skip if no <extension> element found
WITHOUT_CLASSIFICATION	// retrieve JDom Document from inputstream
WITHOUT_CLASSIFICATION	// if external plugin, we need the directory of it
WITHOUT_CLASSIFICATION	// if available, load cached instance
WITHOUT_CLASSIFICATION	// couldn't find correct constructor
WITHOUT_CLASSIFICATION	// ok, we found a matching constructor // -> create correct list of arguments
WITHOUT_CLASSIFICATION	// use default Java classlodaer
WITHOUT_CLASSIFICATION	// // external plugin //				
WITHOUT_CLASSIFICATION	// just in case that someone who developers on a plugin // adds the plugin files to his classpath, we try to // load // them with the default classloader
WITHOUT_CLASSIFICATION	// use external Java URL classloader
WITHOUT_CLASSIFICATION	// remember instance
WITHOUT_CLASSIFICATION	// disable extension
WITHOUT_CLASSIFICATION	// disable extension
WITHOUT_CLASSIFICATION	// all Java plugins package their class-files in "plugin.jar"
WITHOUT_CLASSIFICATION	// append URLs to global classloader
WITHOUT_CLASSIFICATION	//plugin = instanciateJavaClass(className, arguments);
WITHOUT_CLASSIFICATION	// create new class loader using the global class loader as parent
WITHOUT_CLASSIFICATION	// use our global class loader
WITHOUT_CLASSIFICATION	// plugin-directory
WITHOUT_CLASSIFICATION	// jar-file found
WITHOUT_CLASSIFICATION	// get plugin id
WITHOUT_CLASSIFICATION	// disable plugin
WITHOUT_CLASSIFICATION	/*         * By using an instance of SyncHTMLEditorKit, the html should load         * synchroniously - so everything is loaded before printing starts         */
WITHOUT_CLASSIFICATION	// reset starting position in y-direction
WITHOUT_CLASSIFICATION	/*             * *20030609, karlpeder* Introduced scaling             */
WITHOUT_CLASSIFICATION	// get origin & size information (height as "total" height minus current pos.)
WITHOUT_CLASSIFICATION	// set size of mPane according to the available width // and fetch root view
WITHOUT_CLASSIFICATION	// scale the graphics
WITHOUT_CLASSIFICATION	// set clipping for the graphics object
WITHOUT_CLASSIFICATION	// translate g to line up with origin of print area (trans 1)
WITHOUT_CLASSIFICATION	// set allocation (defines print area together with the clipping // and translation made above), and print...
WITHOUT_CLASSIFICATION	// translate graphics object back to original position and reset clip and scaling
WITHOUT_CLASSIFICATION	// child views exist - operate recursively on these
WITHOUT_CLASSIFICATION	// handle child view by recursive call
WITHOUT_CLASSIFICATION	// no childs - we have a leaf view (i.e. with contents)
WITHOUT_CLASSIFICATION	// view starts on page - print it
WITHOUT_CLASSIFICATION	// resize jTextPane component to calculate height and get it
WITHOUT_CLASSIFICATION	// correct for starting position if printing should not start at the top
WITHOUT_CLASSIFICATION	// calculate size and return it
WITHOUT_CLASSIFICATION	// width unchanged
WITHOUT_CLASSIFICATION	// height of content // + top margin // + bottom margin // height corrected for scaling
WITHOUT_CLASSIFICATION	// ensure contents is layed out properly
WITHOUT_CLASSIFICATION	// calculate scaling and return it
WITHOUT_CLASSIFICATION	// do not scale up, i.e. no scale factor above 1.0
WITHOUT_CLASSIFICATION	// create remainder
WITHOUT_CLASSIFICATION	// modify "this" to start where remainder ends
WITHOUT_CLASSIFICATION	// this happends if there's nothing left for the next page
WITHOUT_CLASSIFICATION	// return (possibly) updated value
WITHOUT_CLASSIFICATION	// define allocation rectangle (startY is used to compensate for // different start point if printing shall not start from the top)
WITHOUT_CLASSIFICATION	// set initial value for height where this print object should be broken // in points, without scale
WITHOUT_CLASSIFICATION	// calculate break height for child, and use updated // value in the further processing
WITHOUT_CLASSIFICATION	// view starts on page and exceeds it
WITHOUT_CLASSIFICATION	// unchanged, i.e. no breaks before this view
WITHOUT_CLASSIFICATION	// view can be broken
WITHOUT_CLASSIFICATION	// break before start of view
WITHOUT_CLASSIFICATION	// unchanged
WITHOUT_CLASSIFICATION	// unchanged
WITHOUT_CLASSIFICATION	/*	 * Methods called by the Variable parsers	 */
WITHOUT_CLASSIFICATION	// For getHeight() to return the right Value
WITHOUT_CLASSIFICATION	// SizePolicy
WITHOUT_CLASSIFICATION	// Margins
WITHOUT_CLASSIFICATION	// Orientation
WITHOUT_CLASSIFICATION	// ensure that the text does not start with a newline
WITHOUT_CLASSIFICATION	// insert space btw. double newlines
WITHOUT_CLASSIFICATION	/* really delete file */
WITHOUT_CLASSIFICATION	// this is ok
WITHOUT_CLASSIFICATION	//does not occur
WITHOUT_CLASSIFICATION	// using default english language, shipped with Columba
WITHOUT_CLASSIFICATION	// use ResourceBundle's internal classloader
WITHOUT_CLASSIFICATION	//Find out if we already loaded the needed ResourceBundle //object in the hashtable.
WITHOUT_CLASSIFICATION	//should not occur, otherwise the static initializer should have thrown // a RuntimeException
WITHOUT_CLASSIFICATION	//retrieve new bundle // use ResourceBundle's internal classloader
WITHOUT_CLASSIFICATION	//overwrite old bundle
WITHOUT_CLASSIFICATION	/* check if script directory exists */
WITHOUT_CLASSIFICATION	/*           * initialize file observer thread with a reference to our           * beanshellScripts map           */
WITHOUT_CLASSIFICATION	/* nothing to dispose, yet... */
WITHOUT_CLASSIFICATION	/* start pooling thread */
WITHOUT_CLASSIFICATION	/*in case of a stop-start */
WITHOUT_CLASSIFICATION	// check current file list for changes
WITHOUT_CLASSIFICATION	// it isn't possible to undo whatever the script did
WITHOUT_CLASSIFICATION	/* check for new files in the scripts directory */
WITHOUT_CLASSIFICATION	// seconds
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// scripts should reside in <config-folder>/scripts/ directory
WITHOUT_CLASSIFICATION	// scripting.xml configuration file should reside in <config-folder>
WITHOUT_CLASSIFICATION	// oh oh! casting to a specific implementation here ;-)
WITHOUT_CLASSIFICATION	/*        * it's the script responsability to define the "metadata" by invoking        * .setName(), .setAuthor() and .setDescription()        */
WITHOUT_CLASSIFICATION	/* find out if the interpreter is already registered */
WITHOUT_CLASSIFICATION	/* if so, remove it */
WITHOUT_CLASSIFICATION	/* any errors that may occur cannot stop other scripts from running */
WITHOUT_CLASSIFICATION	// retrieving the instance for the first time // creates an instance in ExtensionHandler subclass //  // instance reference is kept in hashmap automatically
WITHOUT_CLASSIFICATION	// This method is called just after a new entry has been added
WITHOUT_CLASSIFICATION	// ensure map can be used by multiple threads
WITHOUT_CLASSIFICATION	// ensure map can be used by multiple threads
WITHOUT_CLASSIFICATION	// temporary hashtable to check for duplicated
WITHOUT_CLASSIFICATION	// if result is already in hashtable remove from result set
WITHOUT_CLASSIFICATION	// memorize location URI
WITHOUT_CLASSIFICATION	// fire up search command
WITHOUT_CLASSIFICATION	// fire up search command
WITHOUT_CLASSIFICATION	// fire up search command
WITHOUT_CLASSIFICATION	// first, create bucket for each provider
WITHOUT_CLASSIFICATION	// now search through all buckets
WITHOUT_CLASSIFICATION	// execute search
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// execute search
WITHOUT_CLASSIFICATION	// query using all criteria
WITHOUT_CLASSIFICATION	// query using all criteria
WITHOUT_CLASSIFICATION	// notify all listeners that new search results arrived
WITHOUT_CLASSIFICATION	// notify all listeners that new search results arrived
WITHOUT_CLASSIFICATION	// ensure this is called in the EDT
WITHOUT_CLASSIFICATION	// ensure this is called in the EDT
WITHOUT_CLASSIFICATION	// notify that search is finished
WITHOUT_CLASSIFICATION	// query provider
WITHOUT_CLASSIFICATION	// retrieve total result count
WITHOUT_CLASSIFICATION	// init Map
WITHOUT_CLASSIFICATION	// wait for 2 seconds until the dialog is openened
WITHOUT_CLASSIFICATION	// ask user to kill pending running commands or wait
WITHOUT_CLASSIFICATION	// create tag vector
WITHOUT_CLASSIFICATION	// ensure root exists
WITHOUT_CLASSIFICATION	// Do not allow an empty name
WITHOUT_CLASSIFICATION	// create uuid
WITHOUT_CLASSIFICATION	// very unlikely to happen
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// don't wait, just continue shutdown procedure, // commands will be killed
WITHOUT_CLASSIFICATION	// we don't need to check for running commands here because // there aren't any, shutdown plugins only use this thread
WITHOUT_CLASSIFICATION	// load xml configuration // -> will be automatically saved every couple of minutes and on // shutdown
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// this will overwrite the "old" tag with same id
WITHOUT_CLASSIFICATION	//private Hashtable properties = new Hashtable();
WITHOUT_CLASSIFICATION	//intern variable which is used for text replace purposes 
WITHOUT_CLASSIFICATION	// constructor for the class
WITHOUT_CLASSIFICATION	// some other version of the constructor
WITHOUT_CLASSIFICATION	// need to be called before search/replace to set up all the states we need
WITHOUT_CLASSIFICATION	// find backwards
WITHOUT_CLASSIFICATION	// match whole word
WITHOUT_CLASSIFICATION	// create pattern
WITHOUT_CLASSIFICATION	//	 need to be called after search/replace to make some changes in the states
WITHOUT_CLASSIFICATION	//lastreplaceposition = lastfoundposition;
WITHOUT_CLASSIFICATION	//lastreplaceposition = lastfoundposition; //+ replaceWith.length();
WITHOUT_CLASSIFICATION	// the implementation of the search next function. It returns always the  position of the NEXT found word.	
WITHOUT_CLASSIFICATION	// end of text was reached -> begin at the start
WITHOUT_CLASSIFICATION	//	the implementation of the replace function. It returns always the  position of the NEXT replaced word.
WITHOUT_CLASSIFICATION	//	the implementation of the replace all function.
WITHOUT_CLASSIFICATION	//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// optional String-based attribute
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// text which we are looking for, or want to replace // replaced text which we want to have   // text where we make a search // search/replace is case sensitive  // search/replace matches whole words only // search/replace works backwards on the text
WITHOUT_CLASSIFICATION	//	private static final String[] SALUTATIONS = { "Mr.", "Mrs.", "Ms.", "Dr.", "Congressman", "Congresswoman", "Senator", "President", //		"Chancellor", "Minister", "Prime Minister" };
WITHOUT_CLASSIFICATION	//	private static final String[] TITLES = { "PhD", "Ph.D.", "PhD.", "Esq.", "Esquire" };
WITHOUT_CLASSIFICATION	// Initialize salutation strings
WITHOUT_CLASSIFICATION	// Initialize title strings
WITHOUT_CLASSIFICATION	// Treat a null name input string the same as an empty input string
WITHOUT_CLASSIFICATION	// Get the salutation if one is specified
WITHOUT_CLASSIFICATION	// Remove the salutation
WITHOUT_CLASSIFICATION	// Get the title if one is specified
WITHOUT_CLASSIFICATION	// Remove the title and the preceding comma
WITHOUT_CLASSIFICATION	// Assume last name only
WITHOUT_CLASSIFICATION	// More than 3 tokens. Assume the last token is the last name and take the rest of the names as the first name. // This handles names like this: "Sue & Gene Stark".
WITHOUT_CLASSIFICATION	// abort if not in debugging mode
WITHOUT_CLASSIFICATION	// abort if not in debugging mode
WITHOUT_CLASSIFICATION	// current time
WITHOUT_CLASSIFICATION	// store profiling point data
WITHOUT_CLASSIFICATION	// this profiling point is parent of the next one
WITHOUT_CLASSIFICATION	// store id
WITHOUT_CLASSIFICATION	// print all collected profile data
WITHOUT_CLASSIFICATION	// current path is the parent of the current element
WITHOUT_CLASSIFICATION	// Use static variables so the date is only updated once // during runtime
WITHOUT_CLASSIFICATION	// Top level element (Used to hold everything else)
WITHOUT_CLASSIFICATION	// The current element you are working on
WITHOUT_CLASSIFICATION	// For writing out the data // Indent for each level
WITHOUT_CLASSIFICATION	// Maximum data to put on a "one liner"
WITHOUT_CLASSIFICATION	/*	 * // Default constructor public XmlIO() { }	 */
WITHOUT_CLASSIFICATION	/*	 * // setup and load constructor public XmlIO(String FilePath) {	 * currentElement = null;	 *  }	 */
WITHOUT_CLASSIFICATION	// setup and load constructor
WITHOUT_CLASSIFICATION	// this.file = F;
WITHOUT_CLASSIFICATION	// Load a file. This is what starts things off.
WITHOUT_CLASSIFICATION	// Create the XML reader... // xr = XMLReaderFactory.createXMLReader();
WITHOUT_CLASSIFICATION	// Set the ContentHandler... // xr.setContentHandler( this );
WITHOUT_CLASSIFICATION	// Error
WITHOUT_CLASSIFICATION	// Error
WITHOUT_CLASSIFICATION	// XmlElement.printNode( getRoot(), "");
WITHOUT_CLASSIFICATION	// XmlElement.printNode( getRoot(), "");
WITHOUT_CLASSIFICATION	// element name
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// namespaceAware = false
WITHOUT_CLASSIFICATION	// Attr name
WITHOUT_CLASSIFICATION	// accumulate the contents into a buffer.
WITHOUT_CLASSIFICATION	// // Writer interface //
WITHOUT_CLASSIFICATION	// End class XmlIO
WITHOUT_CLASSIFICATION	// Important!! // -> replacing this character must happen first
WITHOUT_CLASSIFICATION	// *20030621, karlpeder*
WITHOUT_CLASSIFICATION	//builder.setValidation(true);
WITHOUT_CLASSIFICATION	//store.shutdown();
WITHOUT_CLASSIFICATION	// empty the worker list until one is left
WITHOUT_CLASSIFICATION	/* * Test for int hashCode(). */
WITHOUT_CLASSIFICATION	/* * Test for boolean equals(Object) */
WITHOUT_CLASSIFICATION	/* * Test for clone() */
WITHOUT_CLASSIFICATION	// top-level structure
WITHOUT_CLASSIFICATION	// top-level structure
WITHOUT_CLASSIFICATION	// mandatory String-based attribute
WITHOUT_CLASSIFICATION	// mandatory String-based attribute
WITHOUT_CLASSIFICATION	// mandatory String-based attribute
WITHOUT_CLASSIFICATION	// optional String-based attribute
WITHOUT_CLASSIFICATION	// optional String-based attribute
WITHOUT_CLASSIFICATION	// optional String-based attribute
WITHOUT_CLASSIFICATION	// should throw exception as attribute type "name2" is not defined in // type structure
WITHOUT_CLASSIFICATION	// user struct
WITHOUT_CLASSIFICATION	// identity definition
WITHOUT_CLASSIFICATION	// MULTIPLICITY.ZERO_TO_ONE is default
WITHOUT_CLASSIFICATION	// date time timezone definition
WITHOUT_CLASSIFICATION	// date range (start time, end time) definition
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	// document definition
WITHOUT_CLASSIFICATION	// locale definition
WITHOUT_CLASSIFICATION	// list of attachments
WITHOUT_CLASSIFICATION	// single attachment
WITHOUT_CLASSIFICATION	// message
WITHOUT_CLASSIFICATION	// single sender - re-use identity type
WITHOUT_CLASSIFICATION	// re-use identity type for recipient list
WITHOUT_CLASSIFICATION	// message body
WITHOUT_CLASSIFICATION	// message contains list of attachments
WITHOUT_CLASSIFICATION	// find all possible plugin directories
WITHOUT_CLASSIFICATION	/* * Test for clone() */
WITHOUT_CLASSIFICATION	// user struct
WITHOUT_CLASSIFICATION	/*(.*://.*?)"  "something" with ://          (could be .*? but then the Pattern would match whitespace)             (      (&gt;).*  a html-Encoded > followed by anything                                                  |  or(["+punc+"]*)"  any Punctuation        (<br>)? 0 or 1 trailing <br>             )$  end of String*/
WITHOUT_CLASSIFICATION	// create test userlist data
WITHOUT_CLASSIFICATION	// MULTIPLICITY.ONE is default
WITHOUT_CLASSIFICATION	/* * Test for getColor() */
WITHOUT_CLASSIFICATION	// create config-folder
WITHOUT_CLASSIFICATION	// create config-folder
WITHOUT_CLASSIFICATION	// remove configuration directory
WITHOUT_CLASSIFICATION	/*	 * Test method for 'org.columba.core.tagging.TagManager.addTag(String)'	 */
WITHOUT_CLASSIFICATION	/*	 * Test method for 'org.columba.core.tagging.TagManager.getAllTags()'	 */
WITHOUT_CLASSIFICATION	/*	 * Test method for 'org.columba.core.tagging.TagManager.getTag(String)'	 */
WITHOUT_CLASSIFICATION	// getByName
WITHOUT_CLASSIFICATION	/*	 * Test method for 'org.columba.core.tagging.TagManager.removeTag(String)'	 */
WITHOUT_CLASSIFICATION	// test if the size of self substracted list is 0
WITHOUT_CLASSIFICATION	// tests, if the list substracted with an empty list is equal to itself
WITHOUT_CLASSIFICATION	// tests, if the listPart substracted
WITHOUT_CLASSIFICATION	// Setup the XML that is to be written
WITHOUT_CLASSIFICATION	/* * Test for boolean not equals(Object) */
WITHOUT_CLASSIFICATION	/* * Test for hashCode() */
WITHOUT_CLASSIFICATION	/* * Test for XmlElement(String,String) */
WITHOUT_CLASSIFICATION	//AbstractFolderOptionsPlugin getPlugin(String name);
WITHOUT_CLASSIFICATION	//TableView getView();
WITHOUT_CLASSIFICATION	//MessageNode getRootNode();
WITHOUT_CLASSIFICATION	//MessageNode getMessageNode(Object uid);
WITHOUT_CLASSIFICATION	// get configuration
WITHOUT_CLASSIFICATION	// for example: "Re: this is a subject"
WITHOUT_CLASSIFICATION	//int getRow(MessageNode node);
WITHOUT_CLASSIFICATION	//MessageNode getMessageNodeAtRow(int index);
WITHOUT_CLASSIFICATION	// if subject doesn't start already with "Re:" prepend it
WITHOUT_CLASSIFICATION	// for example: "[columba-users]Re: this is a subject"
WITHOUT_CLASSIFICATION	// if subject doesn't start already with "Fwd:" prepend it
WITHOUT_CLASSIFICATION	// create To headerfield
WITHOUT_CLASSIFICATION	// Reply-To headerfield isn't specified, try to use From instead
WITHOUT_CLASSIFICATION	// Quote according model type (text/html)
WITHOUT_CLASSIFICATION	// if Reply-To headerfield isn't specified, try to use from
WITHOUT_CLASSIFICATION	// example: X-BeenThere: columba-devel@lists.sourceforge.net
WITHOUT_CLASSIFICATION	// plain text
WITHOUT_CLASSIFICATION	// *20040229, karlpeder* Use default account as fall back
WITHOUT_CLASSIFICATION	// RFC822 - Header
WITHOUT_CLASSIFICATION	// create html element, if it doesn't exist
WITHOUT_CLASSIFICATION	// get enable attribute
WITHOUT_CLASSIFICATION	// reply-to
WITHOUT_CLASSIFICATION	// date
WITHOUT_CLASSIFICATION	//attachments
WITHOUT_CLASSIFICATION	// copy flags
WITHOUT_CLASSIFICATION	// compose text part
WITHOUT_CLASSIFICATION	// compose html part
WITHOUT_CLASSIFICATION	// merge mimeparts and return
WITHOUT_CLASSIFICATION	// Init Mime-Header with Default-Values (text/html)
WITHOUT_CLASSIFICATION	// Set Default Charset or selected
WITHOUT_CLASSIFICATION	// insert link tags for urls and email addresses
WITHOUT_CLASSIFICATION	// for text comparisons
WITHOUT_CLASSIFICATION	// insert document type decl.
WITHOUT_CLASSIFICATION	// insert head section with charset def.
WITHOUT_CLASSIFICATION	// add <head> section
WITHOUT_CLASSIFICATION	// replace <head> section
WITHOUT_CLASSIFICATION	// add rest of body until start of </body>
WITHOUT_CLASSIFICATION	// add signature if defined
WITHOUT_CLASSIFICATION	// add the rest of the original body - and transfer back to body var.
WITHOUT_CLASSIFICATION	// add encoding if necessary
WITHOUT_CLASSIFICATION	// check if the charset is US-ASCII then there is something wrong // -> switch to UTF-8 and write to log-file
WITHOUT_CLASSIFICATION	// to allow empty messages
WITHOUT_CLASSIFICATION	// to allow empty messages
WITHOUT_CLASSIFICATION	// Init Mime-Header with Default-Values (text/plain)
WITHOUT_CLASSIFICATION	/*		 * *20030918, karlpeder* Tags are stripped if the model contains a html		 * message (since we are composing a plain text message here.		 */
WITHOUT_CLASSIFICATION	// write charset to header
WITHOUT_CLASSIFICATION	//List mimeParts = model.getAttachments();
WITHOUT_CLASSIFICATION	// *20030919, karlpeder* Added handling of html messages
WITHOUT_CLASSIFICATION	// compose message body as multipart/alternative
WITHOUT_CLASSIFICATION	// send as multipart/alternative
WITHOUT_CLASSIFICATION	// send as text/html
WITHOUT_CLASSIFICATION	// compose message body as text/plain
WITHOUT_CLASSIFICATION	// Create Multipart/Mixed if necessary
WITHOUT_CLASSIFICATION	// if the id not currently set (for example in the security panel in // the account-config
WITHOUT_CLASSIFICATION	//  Set id on from address
WITHOUT_CLASSIFICATION	// model -> view
WITHOUT_CLASSIFICATION	// size
WITHOUT_CLASSIFICATION	//Do not access the inputstream after this line!
WITHOUT_CLASSIFICATION	/*  	 * Add supported account formats here  	 * */
WITHOUT_CLASSIFICATION	//private boolean pop3;
WITHOUT_CLASSIFICATION	// return default-account ImapItem instead 
WITHOUT_CLASSIFICATION	// return default-account ImapItem instead 
WITHOUT_CLASSIFICATION	// create if not available
WITHOUT_CLASSIFICATION	// return default-account SpamItem instead 
WITHOUT_CLASSIFICATION	// return default-account identityItem instead
WITHOUT_CLASSIFICATION	// same object
WITHOUT_CLASSIFICATION	/*         * The fields on this object is in fact represented in the xml         * structure found as getRoot(). Therefore super.equals()         * should do the job         */
WITHOUT_CLASSIFICATION	/*         * The fields on this object is in fact represented in the xml         * structure found as getRoot(). Therefore super.hashCode()         * should do the job.         */
WITHOUT_CLASSIFICATION	//XmlElement.printNode(e,"");
WITHOUT_CLASSIFICATION	/*     * search for SecurityItem based on To headerfield     *     */
WITHOUT_CLASSIFICATION	// found match
WITHOUT_CLASSIFICATION	// path to account templates for POP3/IMAP
WITHOUT_CLASSIFICATION	// load xml document
WITHOUT_CLASSIFICATION	// get pop3 or imap account xml node
WITHOUT_CLASSIFICATION	// Default signature
WITHOUT_CLASSIFICATION	//Do nothing
WITHOUT_CLASSIFICATION	// fall back to first account as default
WITHOUT_CLASSIFICATION	//private File file;
WITHOUT_CLASSIFICATION	// example: "columba://org.columba.mail/<folder-id>/<message-id>"
WITHOUT_CLASSIFICATION	// found mail component frame
WITHOUT_CLASSIFICATION	// // composer_options.xml: // //<options> //<gui> //  <view id="0"> //    <window maximized="false" height="700" width="600" y="0" x="0" /> //    <toolbars infopanel="true" main="true" /> //    <splitpanes header="200" attachment="100" main="200" /> //    <addressbook enabled="false" /> //  </view> //</gui> //<spellcheck executable="/usr/bin/aspell" /> //<external_editor enabled="false" /> //<forward style="attachment" /> //<subject ask_if_empty="true" /> //<html send_as_multipart="true" enable="false" /> //</options>
WITHOUT_CLASSIFICATION	//apply initial version information
WITHOUT_CLASSIFICATION	// add initial messageframe treenode
WITHOUT_CLASSIFICATION	//      use global table options
WITHOUT_CLASSIFICATION	// Choice btw. text and html will be based on stored option
WITHOUT_CLASSIFICATION	// dismiss char
WITHOUT_CLASSIFICATION	// model -> view
WITHOUT_CLASSIFICATION	// should never happen
WITHOUT_CLASSIFICATION	// Choice btw. text and html will be based on stored option
WITHOUT_CLASSIFICATION	// type-cast here is safe
WITHOUT_CLASSIFICATION	//	 header-item
WITHOUT_CLASSIFICATION	// get plugin handler for filter actions
WITHOUT_CLASSIFICATION	// get list of all filter actions
WITHOUT_CLASSIFICATION	// interate through all filter actions
WITHOUT_CLASSIFICATION	// name is used to load plugin
WITHOUT_CLASSIFICATION	// try to get instance of FilterAction
WITHOUT_CLASSIFICATION	// add command to CompoundCommand
WITHOUT_CLASSIFICATION	// get headerfield to search in (for example: Subject)
WITHOUT_CLASSIFICATION	// get headerfield to search in (for example: Subject)
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// get message header
WITHOUT_CLASSIFICATION	// cancel if headerfield doesn't exist
WITHOUT_CLASSIFICATION	// decode headerfield
WITHOUT_CLASSIFICATION	// see if theirs a match
WITHOUT_CLASSIFICATION	// skip if message doesn't contain the requested headerfield
WITHOUT_CLASSIFICATION	// get condition and convert it to constant as defined in // FilterCriteria
WITHOUT_CLASSIFICATION	// we don't need any configuration here
WITHOUT_CLASSIFICATION	// match all matches
WITHOUT_CLASSIFICATION	// transform string to Date representation
WITHOUT_CLASSIFICATION	// get date
WITHOUT_CLASSIFICATION	//      convert criteria into int-value
WITHOUT_CLASSIFICATION	// get message body
WITHOUT_CLASSIFICATION	// if something goes wrong here, fall back to "mark as read"
WITHOUT_CLASSIFICATION	// create reference
WITHOUT_CLASSIFICATION	// create command
WITHOUT_CLASSIFICATION	// implement your own search-engine here
WITHOUT_CLASSIFICATION	// used by virtual folder only
WITHOUT_CLASSIFICATION	// only used by VirtualFolder
WITHOUT_CLASSIFICATION	// update treenode
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// update treenode
WITHOUT_CLASSIFICATION	// update treenode
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	/*                    case '\'':                        sb.append("&apos;");                        i++;                        break;*/
WITHOUT_CLASSIFICATION	// @author fdietz // -> Moved code for updating mailfolderinfo to markMessage() // intentionally! //
WITHOUT_CLASSIFICATION	// on startup, there's shouldn't be any recent messages // -> we simply remember 0 recent messages here // property.addAttribute("recent", "0");
WITHOUT_CLASSIFICATION	// Check if the MessageFolderInfo is sane
WITHOUT_CLASSIFICATION	// get list of all uids
WITHOUT_CLASSIFICATION	// if message with uid doesn't exist -> skip
WITHOUT_CLASSIFICATION	// move message to trash if marked as expunged
WITHOUT_CLASSIFICATION	// remove message
WITHOUT_CLASSIFICATION	// remove from header-list
WITHOUT_CLASSIFICATION	// public abstract IHeaderListStorage getHeaderListStorage();
WITHOUT_CLASSIFICATION	// set folder changed flag // -> if not, the header cache wouldn't notice that something // -> has changed. And wouldn't save the changes.
WITHOUT_CLASSIFICATION	// if there is no search engine, try the default one
WITHOUT_CLASSIFICATION	// Sanity checks
WITHOUT_CLASSIFICATION	//protected RemoteSearchEngine searchEngine;
WITHOUT_CLASSIFICATION	// Groups are separated by at least one WS character
WITHOUT_CLASSIFICATION	// parent directory for mail folders // for example: ".columba/mail/"
WITHOUT_CLASSIFICATION	// Get the handler
WITHOUT_CLASSIFICATION	// which parents are possible ?
WITHOUT_CLASSIFICATION	// the group of the given parent
WITHOUT_CLASSIFICATION	// iterate through all foldertypes to find suitable ones
WITHOUT_CLASSIFICATION	// Add child to parent
WITHOUT_CLASSIFICATION	// Add child to parent
WITHOUT_CLASSIFICATION	// get root folder
WITHOUT_CLASSIFICATION	// create mandatory IMAP Inbox folder
WITHOUT_CLASSIFICATION	// associate inbox with root folder
WITHOUT_CLASSIFICATION	// notify folder tree model
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// the next new folder will get this UID
WITHOUT_CLASSIFICATION	// folderitem wraps xml configuration from tree.xml
WITHOUT_CLASSIFICATION	// locking mechanism
WITHOUT_CLASSIFICATION	// Root folder cache
WITHOUT_CLASSIFICATION	// register interest on tree node changes
WITHOUT_CLASSIFICATION	// register interest on tree node changes
WITHOUT_CLASSIFICATION	/*	public MailFolderCommandReference getCommandReference(MailFolderCommandReference r) {		return r;	}	*/
WITHOUT_CLASSIFICATION	// remove XmlElement
WITHOUT_CLASSIFICATION	// Check the type
WITHOUT_CLASSIFICATION	// do the same for the XmlElement node
WITHOUT_CLASSIFICATION	// do the same for the XmlElement of child
WITHOUT_CLASSIFICATION	// If rootFolder is not cached traverse the tree
WITHOUT_CLASSIFICATION	// There is no parent
WITHOUT_CLASSIFICATION	// no filterlist treenode found // -> create a new one
WITHOUT_CLASSIFICATION	// create filterlist datastructure
WITHOUT_CLASSIFICATION	// delete folder from your harddrive
WITHOUT_CLASSIFICATION	// if this worked, remove it from tree.xml configuration, too
WITHOUT_CLASSIFICATION	// get message with UID
WITHOUT_CLASSIFICATION	// get message with UID
WITHOUT_CLASSIFICATION	// get tree-like structure of mimeparts
WITHOUT_CLASSIFICATION	// Get the mimepart
WITHOUT_CLASSIFICATION	// Get the mimepart
WITHOUT_CLASSIFICATION	// skip this message, if it doesn't exist in source folder
WITHOUT_CLASSIFICATION	/*			 * ((AbstractLocalFolder) destFolder).setFlags(destuid, (Flags)			 * getFlags( uids[i]).clone());			 */
WITHOUT_CLASSIFICATION	// destFolder.fireMessageAdded(uids[i]);
WITHOUT_CLASSIFICATION	// we are done - clear the progress bar
WITHOUT_CLASSIFICATION	// generate UID for new message
WITHOUT_CLASSIFICATION	// save message stream to file
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// save header and attributes. Copy the flags!
WITHOUT_CLASSIFICATION	// Check if the message is already cached
WITHOUT_CLASSIFICATION	// this message is already cached
WITHOUT_CLASSIFICATION	// Parse Message from DataStorage
WITHOUT_CLASSIFICATION	// number of headerfields
WITHOUT_CLASSIFICATION	// number of headerfields
WITHOUT_CLASSIFICATION	// get header from cache
WITHOUT_CLASSIFICATION	// message doesn't exist (this shouldn't happen here)
WITHOUT_CLASSIFICATION	// if header contains more fields than the cached header
WITHOUT_CLASSIFICATION	// message isn't cached // -> just return header from cache
WITHOUT_CLASSIFICATION	// remove message from disk
WITHOUT_CLASSIFICATION	// fireMessageRemoved(uid, getFlags(uid));
WITHOUT_CLASSIFICATION	// update MessageFolderInfo
WITHOUT_CLASSIFICATION	// cached headerfield list
WITHOUT_CLASSIFICATION	// make sure to close all file handles // to the currently cached message // -> necessary for windows to be able to delete the local file
WITHOUT_CLASSIFICATION	// header cache is stored in "headerlist" subfolder
WITHOUT_CLASSIFICATION	// Must be out of sync!
WITHOUT_CLASSIFICATION	// Check if still consistent
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// create output stream
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	// initialize progressbar with total number of messages
WITHOUT_CLASSIFICATION	// for each message in folder i
WITHOUT_CLASSIFICATION	// get message source from folder
WITHOUT_CLASSIFICATION	// prepend From line
WITHOUT_CLASSIFICATION	// write message source to file
WITHOUT_CLASSIFICATION	// append newline
WITHOUT_CLASSIFICATION	// update status message
WITHOUT_CLASSIFICATION	// close output stream
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// which kind of mark?
WITHOUT_CLASSIFICATION	// add check box for incl. of headers
WITHOUT_CLASSIFICATION	// create command
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	// update status message
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// un-mark messages
WITHOUT_CLASSIFICATION	// train bayesian filter
WITHOUT_CLASSIFICATION	// train bayesian filter
WITHOUT_CLASSIFICATION	// mark messages
WITHOUT_CLASSIFICATION	// mark as spam /as not spam // for each message
WITHOUT_CLASSIFICATION	// increase progressbar value
WITHOUT_CLASSIFICATION	// cancel here if user requests
WITHOUT_CLASSIFICATION	// message belongs to which account?
WITHOUT_CLASSIFICATION	// skip if account information is not available
WITHOUT_CLASSIFICATION	// if spam filter is not enabled -> return
WITHOUT_CLASSIFICATION	// execute command
WITHOUT_CLASSIFICATION	// skip if user didn't enable this option
WITHOUT_CLASSIFICATION	// move message to user-configured folder (generally "Junk" // folder)
WITHOUT_CLASSIFICATION	// move message to trash
WITHOUT_CLASSIFICATION	// get array of source references
WITHOUT_CLASSIFICATION	// which kind of color?
WITHOUT_CLASSIFICATION	// saving last selected Message to the folder
WITHOUT_CLASSIFICATION	// for each message
WITHOUT_CLASSIFICATION	// set columba.color flag
WITHOUT_CLASSIFICATION	//vfolder.showFilterDialog((AbstractMailFrameController) getFrameMediator());
WITHOUT_CLASSIFICATION	// get references to selected folder and message
WITHOUT_CLASSIFICATION	// uid for messages to save
WITHOUT_CLASSIFICATION	// no message selected.
WITHOUT_CLASSIFICATION	//register for status events
WITHOUT_CLASSIFICATION	// get value of Subject, From or To header
WITHOUT_CLASSIFICATION	// create virtual folder
WITHOUT_CLASSIFICATION	// should be virtual
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	// update status message
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// for each message
WITHOUT_CLASSIFICATION	// uid for messages to save
WITHOUT_CLASSIFICATION	// set properties for virtual folder // default is inbox if parent is null
WITHOUT_CLASSIFICATION	// define filter rule
WITHOUT_CLASSIFICATION	// define criteria
WITHOUT_CLASSIFICATION	// get folder that is going to be moved
WITHOUT_CLASSIFICATION	// get destination folder
WITHOUT_CLASSIFICATION	// AbstractFolder.append also automatically removes the folder // from its parent
WITHOUT_CLASSIFICATION	// get reference
WITHOUT_CLASSIFICATION	// get header of message
WITHOUT_CLASSIFICATION	// get sender
WITHOUT_CLASSIFICATION	// add sender to addressbook
WITHOUT_CLASSIFICATION	// add contact to addressbook
WITHOUT_CLASSIFICATION	// skip if no reference available
WITHOUT_CLASSIFICATION	// if folder is message folder // ->TODO (@author fdietz):  there should be an interface, instead of the AbstractMessageFolder // class
WITHOUT_CLASSIFICATION	// save headercache
WITHOUT_CLASSIFICATION	//	register for status events
WITHOUT_CLASSIFICATION	// Save message source for each selected message
WITHOUT_CLASSIFICATION	//setup save dialog
WITHOUT_CLASSIFICATION	// show dialog
WITHOUT_CLASSIFICATION	// file exists, user needs to confirm overwrite
WITHOUT_CLASSIFICATION	// save message source under selected filename
WITHOUT_CLASSIFICATION	// end of loop over selected messages
WITHOUT_CLASSIFICATION	// remove source folder
WITHOUT_CLASSIFICATION	// setting lastSelection for srcFolder to null
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	// update status message
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// which kind of mark?
WITHOUT_CLASSIFICATION	// uid for messages to save
WITHOUT_CLASSIFICATION	//	register for status events
WITHOUT_CLASSIFICATION	// initialize progress bar with total number of messages
WITHOUT_CLASSIFICATION	// add source to destination folder
WITHOUT_CLASSIFICATION	//retry copy
WITHOUT_CLASSIFICATION	// update progress bar
WITHOUT_CLASSIFICATION	//reset progress bar
WITHOUT_CLASSIFICATION	// We are done - clear the status message with a delay
WITHOUT_CLASSIFICATION	/*		 * // use wrapper class for easier handling of references array adapter =		 * new FolderCommandAdapter( (MailFolderCommandReference[])		 * getReferences()); // get array of source references		 * MailFolderCommandReference[] r = adapter.getSourceFolderReferences();		 */
WITHOUT_CLASSIFICATION	// saving last selected message to the folder
WITHOUT_CLASSIFICATION	// mark message
WITHOUT_CLASSIFICATION	// get name of folder
WITHOUT_CLASSIFICATION	// rename folder
WITHOUT_CLASSIFICATION	// get source references
WITHOUT_CLASSIFICATION	// expunge folder
WITHOUT_CLASSIFICATION	//System.getProperty("line.separator");
WITHOUT_CLASSIFICATION	// save each message
WITHOUT_CLASSIFICATION	// determine type of body part
WITHOUT_CLASSIFICATION	// setup filters and filename for file chooser dialog
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get array of source references
WITHOUT_CLASSIFICATION	// show dialog
WITHOUT_CLASSIFICATION	// file exists, user needs to confirm overwrite
WITHOUT_CLASSIFICATION	// dismiss char
WITHOUT_CLASSIFICATION	// substitute special characters like: <,>,&,\t,\n
WITHOUT_CLASSIFICATION	// Add default extension if no extension is given by the user
WITHOUT_CLASSIFICATION	// store whether all headers should be incl.
WITHOUT_CLASSIFICATION	// save message
WITHOUT_CLASSIFICATION	// save message
WITHOUT_CLASSIFICATION	// end of for loop over uids to save
WITHOUT_CLASSIFICATION	// default value
WITHOUT_CLASSIFICATION	// create new
WITHOUT_CLASSIFICATION	// Does the user prefer html or plain text?
WITHOUT_CLASSIFICATION	// Get body of message depending on user preferences
WITHOUT_CLASSIFICATION	// First determine which charset to use
WITHOUT_CLASSIFICATION	// get charset from message
WITHOUT_CLASSIFICATION	// decode using default charset
WITHOUT_CLASSIFICATION	// test on extension
WITHOUT_CLASSIFICATION	// parse for urls / email adr. and substite with HTML-code
WITHOUT_CLASSIFICATION	// mark quotings with special font
WITHOUT_CLASSIFICATION	// encapsulate bodytext in html-code
WITHOUT_CLASSIFICATION	// use body as is
WITHOUT_CLASSIFICATION	// headers
WITHOUT_CLASSIFICATION	// headers
WITHOUT_CLASSIFICATION	// read configuration from options.xml file
WITHOUT_CLASSIFICATION	// create css-stylesheet string
WITHOUT_CLASSIFICATION	// create header table
WITHOUT_CLASSIFICATION	// process header value
WITHOUT_CLASSIFICATION	// strip tags //body = parser.stripHTMLTags(decodedBody, true); //body = parser.restoreSpecialCharacters(body);
WITHOUT_CLASSIFICATION	// message composed of headers and body
WITHOUT_CLASSIFICATION	// loop over all headers
WITHOUT_CLASSIFICATION	// ignore - columba.date is used instead
WITHOUT_CLASSIFICATION	// all headers should be included
WITHOUT_CLASSIFICATION	// add from, to, date, subj so they are the last elements
WITHOUT_CLASSIFICATION	// create array and return
WITHOUT_CLASSIFICATION	// get original folder
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	//register for status events
WITHOUT_CLASSIFICATION	// get reference
WITHOUT_CLASSIFICATION	// get header of message
WITHOUT_CLASSIFICATION	// add sender to addressbook
WITHOUT_CLASSIFICATION	// add contact to addressbook
WITHOUT_CLASSIFICATION	// Get body of message depending on user preferences
WITHOUT_CLASSIFICATION	// First determine which charset to use
WITHOUT_CLASSIFICATION	// get charset from message
WITHOUT_CLASSIFICATION	// decode using default charset
WITHOUT_CLASSIFICATION	// decode message body with respect to charset
WITHOUT_CLASSIFICATION	// check if virtual folder, if yes, do not use these uids, use the // real uids instead
WITHOUT_CLASSIFICATION	// selected messages
WITHOUT_CLASSIFICATION	// selected folder
WITHOUT_CLASSIFICATION	// for every message
WITHOUT_CLASSIFICATION	// the header key for date field
WITHOUT_CLASSIFICATION	// Header
WITHOUT_CLASSIFICATION	// Footer
WITHOUT_CLASSIFICATION	/*                 * *20030604, karlpeder* Fixed minor flaws to be able to print text                 * messages. Further more added support for html messages.                 */
WITHOUT_CLASSIFICATION	// uid for messages to print
WITHOUT_CLASSIFICATION	// Print each message
WITHOUT_CLASSIFICATION	// Setup print document for message
WITHOUT_CLASSIFICATION	// Add header information to print
WITHOUT_CLASSIFICATION	// *20030531, karlpeder* setting headerKeys to lowercase for // lookup!
WITHOUT_CLASSIFICATION	// special handling for dates
WITHOUT_CLASSIFICATION	// ignore leading weekday name (e.g. "Mon,"), since this // seems to give problems during parsing
WITHOUT_CLASSIFICATION	// fall back to use the Date header contents directly
WITHOUT_CLASSIFICATION	// Add list of attachments if applicable
WITHOUT_CLASSIFICATION	// Add body of message to print
WITHOUT_CLASSIFICATION	// print the print document (i.e. the message)
WITHOUT_CLASSIFICATION	// end of for loop over uids to print
WITHOUT_CLASSIFICATION	// create a print object and return it
WITHOUT_CLASSIFICATION	// create new local xml treenode
WITHOUT_CLASSIFICATION	// add to options if possible (so it will be saved)
WITHOUT_CLASSIFICATION	// try to fix broken html-strings
WITHOUT_CLASSIFICATION	// create temporary file and save validated body
WITHOUT_CLASSIFICATION	// true ~ scaling allowed
WITHOUT_CLASSIFICATION	// if we have a result
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// process all events collected until now
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// update status message
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// get references to selected folder and message
WITHOUT_CLASSIFICATION	// uid for messages to save
WITHOUT_CLASSIFICATION	// no message selected.
WITHOUT_CLASSIFICATION	// get value of Subject, From or To header
WITHOUT_CLASSIFICATION	// get folder that is going to be moved
WITHOUT_CLASSIFICATION	// get reference
WITHOUT_CLASSIFICATION	// get destination foldedr
WITHOUT_CLASSIFICATION	// expunge folder
WITHOUT_CLASSIFICATION	// cancel, if source equals destination folder
WITHOUT_CLASSIFICATION	// calling CopyMessageCommand.execute() here! //super.execute(worker);
WITHOUT_CLASSIFICATION	// get messgae UIDs
WITHOUT_CLASSIFICATION	// setting lastSelection to null
WITHOUT_CLASSIFICATION	// mark all messages as expunged
WITHOUT_CLASSIFICATION	// We are done - clear the status message after a delay
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// display status message
WITHOUT_CLASSIFICATION	// get filter list from folder
WITHOUT_CLASSIFICATION	// initialize progressbar
WITHOUT_CLASSIFICATION	// for each filter
WITHOUT_CLASSIFICATION	// update progressbar
WITHOUT_CLASSIFICATION	// get filter
WITHOUT_CLASSIFICATION	// search all messages which match this filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// First sort so that Events from one folder stick together
WITHOUT_CLASSIFICATION	// Collect the uids for one folder
WITHOUT_CLASSIFICATION	// Collect the uids for one folder
WITHOUT_CLASSIFICATION	// new folder, fire to the old folder
WITHOUT_CLASSIFICATION	// new folder, fire to the old folder
WITHOUT_CLASSIFICATION	// clear list and collect uids for new folder
WITHOUT_CLASSIFICATION	// clear list and collect uids for new folder
WITHOUT_CLASSIFICATION	// If there is still a parent -> remove it
WITHOUT_CLASSIFICATION	// add child to this node
WITHOUT_CLASSIFICATION	// perform other environment configurations
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// date
WITHOUT_CLASSIFICATION	// make sure that we have a Message-ID
WITHOUT_CLASSIFICATION	// add command to scheduler //MainInterface.processor.addOp(command);
WITHOUT_CLASSIFICATION	// size of message
WITHOUT_CLASSIFICATION	// perform other database configurations
WITHOUT_CLASSIFICATION	// message size should be at least 1 KB
WITHOUT_CLASSIFICATION	// parse all message files to recreate the header cache
WITHOUT_CLASSIFICATION	// we are done
WITHOUT_CLASSIFICATION	// headerList.clear();
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//	true/false
WITHOUT_CLASSIFICATION	// set the attachment flag
WITHOUT_CLASSIFICATION	//Update is unnecessary
WITHOUT_CLASSIFICATION	// Can't happen
WITHOUT_CLASSIFICATION	// was this message already fetched from the server?
WITHOUT_CLASSIFICATION	// message flags
WITHOUT_CLASSIFICATION	// priority as integer value
WITHOUT_CLASSIFICATION	//	true, if message has attachments, false otherwise
WITHOUT_CLASSIFICATION	// properly decoded subject
WITHOUT_CLASSIFICATION	// short from, containing only name of person
WITHOUT_CLASSIFICATION	// Cc
WITHOUT_CLASSIFICATION	// host from which this message was downloaded
WITHOUT_CLASSIFICATION	// show attachment panel
WITHOUT_CLASSIFICATION	// message color
WITHOUT_CLASSIFICATION	// these are cached by default
WITHOUT_CLASSIFICATION	// account ID
WITHOUT_CLASSIFICATION	//return h;
WITHOUT_CLASSIFICATION	// to
WITHOUT_CLASSIFICATION	// POP3 message UID
WITHOUT_CLASSIFICATION	//		copy all internally used headerfields
WITHOUT_CLASSIFICATION	// header cache is stored in "headerlist" subfolder
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// internally used headerfields // these are all boolean values, which are saved using // a single int value
WITHOUT_CLASSIFICATION	// this internally used headerfields can be of every basic // type, including String, Integer, Boolean, Date, etc.
WITHOUT_CLASSIFICATION	// load boolean headerfields, which are compressed in one int value
WITHOUT_CLASSIFICATION	// load other internal headerfields, non-boolean type
WITHOUT_CLASSIFICATION	//load default headerfields, as defined in RFC822
WITHOUT_CLASSIFICATION	// if value doesn't exist, use false as default
WITHOUT_CLASSIFICATION	// save other internal headerfields, of non-boolean type
WITHOUT_CLASSIFICATION	// save default headerfields, as defined in RFC822
WITHOUT_CLASSIFICATION	// only called by FolderFactory
WITHOUT_CLASSIFICATION	// if creating new folder
WITHOUT_CLASSIFICATION	// Trigger Synchronization
WITHOUT_CLASSIFICATION	// Check if the mailbox has changed
WITHOUT_CLASSIFICATION	// Sort the uid list
WITHOUT_CLASSIFICATION	// Seems to be no change!
WITHOUT_CLASSIFICATION	// Ensure sizes are correct
WITHOUT_CLASSIFICATION	// Compute the number of new messages
WITHOUT_CLASSIFICATION	// Find the index of the largest local Uid
WITHOUT_CLASSIFICATION	// Still not found -> do a binary search
WITHOUT_CLASSIFICATION	// removedLocalUids = localUids.size() - 1 - position;
WITHOUT_CLASSIFICATION	// Check if all local uids have been deleted
WITHOUT_CLASSIFICATION	// all messages are new
WITHOUT_CLASSIFICATION	// all messages are new
WITHOUT_CLASSIFICATION	// Find the messages that have been deleted
WITHOUT_CLASSIFICATION	// Pack size is min 10, max 200 else mailboxsize / 10
WITHOUT_CLASSIFICATION	// Fetch Pack outer loop
WITHOUT_CLASSIFICATION	// Compare inner loop
WITHOUT_CLASSIFICATION	// next position in the local uid list
WITHOUT_CLASSIFICATION	// All the other local mails are deleted
WITHOUT_CLASSIFICATION	// Build a list of the new uids
WITHOUT_CLASSIFICATION	// Update the list of new and local uids
WITHOUT_CLASSIFICATION	// Fetch the headers of the new messages ...
WITHOUT_CLASSIFICATION	// .. and set the flags
WITHOUT_CLASSIFICATION	// fire message added updates
WITHOUT_CLASSIFICATION	// cached headerfield list
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// Trigger Synchronization
WITHOUT_CLASSIFICATION	// Sort the uid list
WITHOUT_CLASSIFICATION	// Build the remote lists of messages that are UNSEEN, FLAGGED, DELETED, // JUNK
WITHOUT_CLASSIFICATION	// Number of deleted messages is computed from exists on imap and // local // newMessages
WITHOUT_CLASSIFICATION	// First deleted all local uids that // are larger than the largest remote uid
WITHOUT_CLASSIFICATION	// Fetch these uids and compare them to the // local list
WITHOUT_CLASSIFICATION	// Search in packs beginning from newest to oldest // -> in most cases this should save us a lot of uid fetchings to // find the deleted messages
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#getObservable()	 */
WITHOUT_CLASSIFICATION	// Copy the header
WITHOUT_CLASSIFICATION	// We found the uid of a deleted message // -> remove it from the headerlist
WITHOUT_CLASSIFICATION	// Check if maybe no message at all got copied // In this case we are finished here
WITHOUT_CLASSIFICATION	// update the local flags and ensure that the MailboxInfo is correct
WITHOUT_CLASSIFICATION	// get IMAP rootfolder
WITHOUT_CLASSIFICATION	// Junk flag
WITHOUT_CLASSIFICATION	// Was this message actually copied?
WITHOUT_CLASSIFICATION	// update the HeaderList
WITHOUT_CLASSIFICATION	// We need IMAPFlags
WITHOUT_CLASSIFICATION	// update the HeaderList
WITHOUT_CLASSIFICATION	// Parser the header
WITHOUT_CLASSIFICATION	// Apply filter if enabled
WITHOUT_CLASSIFICATION	// get header with UID
WITHOUT_CLASSIFICATION	// Reenable Updating the mailbox
WITHOUT_CLASSIFICATION	// remember parent path // (this is necessary for IMAPRootFolder sync operations)
WITHOUT_CLASSIFICATION	// IMAP Folders have no own lock ,but share the lock from the Root // to ensure that only one operation can be processed simultanous
WITHOUT_CLASSIFICATION	// Since JUNK is a non-system Flag we have to set it with // an addtitional STORE command
WITHOUT_CLASSIFICATION	// Number of deleted messages is computed from exists on imap and local // newMessages
WITHOUT_CLASSIFICATION	// if "automatically apply filter" is selected & there // are // new // messages
WITHOUT_CLASSIFICATION	//cache.clear();
WITHOUT_CLASSIFICATION	// private ImapOperator operator;
WITHOUT_CLASSIFICATION	// super(node, folderItem);
WITHOUT_CLASSIFICATION	// delimiter found // -> recursively create all necessary folders to create // -> the final folder
WITHOUT_CLASSIFICATION	// if folder doesn't exist already
WITHOUT_CLASSIFICATION	// this is the final folder // subFolder = addIMAPChildFolder(parent, info, subchild);
WITHOUT_CLASSIFICATION	// recursively go on
WITHOUT_CLASSIFICATION	// no delimiter found // -> this is already the final folder // if folder doesn't exist already
WITHOUT_CLASSIFICATION	// Check the Noselect flag
WITHOUT_CLASSIFICATION	// Check the Noinferior flag
WITHOUT_CLASSIFICATION	// first remove all subfolders recursively
WITHOUT_CLASSIFICATION	// A child got removed -> stay at this position to // get the next
WITHOUT_CLASSIFICATION	// maybe remove this folder
WITHOUT_CLASSIFICATION	// Find special
WITHOUT_CLASSIFICATION	// search for a folder thats on the IMAP account // first try to find the local translation of special
WITHOUT_CLASSIFICATION	// fall back to the english version
WITHOUT_CLASSIFICATION	// we found a suitable folder -> set it
WITHOUT_CLASSIFICATION	// first clear all flags
WITHOUT_CLASSIFICATION	// create and tag all subfolders on server
WITHOUT_CLASSIFICATION	// don't care
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// fire event
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// get references
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// This fixes the strange behaviour of the courier imapserver // which sets the \Noselect flag on INBOX
WITHOUT_CLASSIFICATION	// If we are online sync the subscribed folders on first // connection
WITHOUT_CLASSIFICATION	// MainInterface.processor.addOp(c);
WITHOUT_CLASSIFICATION	// Trigger synchronization of the selected Folder
WITHOUT_CLASSIFICATION	// Trigger synchronization of the IMAPFolder
WITHOUT_CLASSIFICATION	// has the imap account no trash folder using the default trash folder
WITHOUT_CLASSIFICATION	// Find old numbers
WITHOUT_CLASSIFICATION	// check for new headers
WITHOUT_CLASSIFICATION	// Get the new numbers
WITHOUT_CLASSIFICATION	// fire new message event to interested listeners
WITHOUT_CLASSIFICATION	// create reference of newly arrived messages
WITHOUT_CLASSIFICATION	// Reenable the action
WITHOUT_CLASSIFICATION	// Trigger any pending Flag syncs
WITHOUT_CLASSIFICATION	// parse line by line
WITHOUT_CLASSIFICATION	// parse line by line
WITHOUT_CLASSIFICATION	// if user cancelled task exit immediately
WITHOUT_CLASSIFICATION	// if user cancelled task exit immediately
WITHOUT_CLASSIFICATION	// found new message
WITHOUT_CLASSIFICATION	// this is necessary to do!
WITHOUT_CLASSIFICATION	// Do not take existing link tags into account
WITHOUT_CLASSIFICATION	// parse line by line
WITHOUT_CLASSIFICATION	// if user cancelled task exit immediately
WITHOUT_CLASSIFICATION	// found new message
WITHOUT_CLASSIFICATION	// line contains "@" (evolution mbox style) or //  -> import message in Columba
WITHOUT_CLASSIFICATION	// found new message
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.mail.folder.mailboximport.AbstractMailboxImporter#importMailbox(java.io.File, org.columba.api.command.IWorkerStatusController) */
WITHOUT_CLASSIFICATION	// MATCH ANY
WITHOUT_CLASSIFICATION	// save last message, because while loop aborted before being able to // save message
WITHOUT_CLASSIFICATION	// save last message, because while loop aborted before being able to // save message
WITHOUT_CLASSIFICATION	// line contains "-" (mozilla mbox style) //  -> import message in Columba
WITHOUT_CLASSIFICATION	// if line doesn't start with "From ???@???" or line length is 0 //  -> save everything in StringBuffer
WITHOUT_CLASSIFICATION	// enable lucene search index by default
WITHOUT_CLASSIFICATION	// enable lucene search index by default
WITHOUT_CLASSIFICATION	// update message starts of following messages
WITHOUT_CLASSIFICATION	//delete the file containing the message in the file system
WITHOUT_CLASSIFICATION	// Could not delete the file - possibly someone has a lock on it
WITHOUT_CLASSIFICATION	// ... delete it when Columba exists instead
WITHOUT_CLASSIFICATION	// try to re-use already instanciated class
WITHOUT_CLASSIFICATION	// setup filter configuration
WITHOUT_CLASSIFICATION	// MATCH_ALL
WITHOUT_CLASSIFICATION	// Add all found virtual uids to the result
WITHOUT_CLASSIFICATION	// initialisation
WITHOUT_CLASSIFICATION	// selecting the message
WITHOUT_CLASSIFICATION	// get header with UID
WITHOUT_CLASSIFICATION	// save last message, because while loop aborted before being able to // save message
WITHOUT_CLASSIFICATION	/*		 * worker.setDisplayText( "Search Result: " +		 * notDefaultEngineResult.size() + " messages found in " +		 * (System.currentTimeMillis() - startTime) + " ms");		 */
WITHOUT_CLASSIFICATION	// A list of all files that seem to be messages (only numbers in the name) //new Object[list.length];
WITHOUT_CLASSIFICATION	// MATCH_ALL
WITHOUT_CLASSIFICATION	// result = mergeFilterResult(v, uids, match); // only for debugging purpose // printList( result );
WITHOUT_CLASSIFICATION	// filter is disabled
WITHOUT_CLASSIFICATION	// this search request is covered by the query engine
WITHOUT_CLASSIFICATION	// clear status bar message now we are done (with a delay)
WITHOUT_CLASSIFICATION	// MATCH_ANY
WITHOUT_CLASSIFICATION	// method is not needed by IMAP
WITHOUT_CLASSIFICATION	// return searchMessages(filter, null);
WITHOUT_CLASSIFICATION	// method is not needed by IMAP
WITHOUT_CLASSIFICATION	//  This list is reduced, because most search requests can be  // answered anyway, using locally cached headerfields
WITHOUT_CLASSIFICATION	// pass the work to IMAPStore
WITHOUT_CLASSIFICATION	// method is not needed by IMAP
WITHOUT_CLASSIFICATION	// method is not needed by IMAP
WITHOUT_CLASSIFICATION	// If there is an existing lock then it must be from a // previous crash -> remove it!
WITHOUT_CLASSIFICATION	// pass the work to IMAPStore
WITHOUT_CLASSIFICATION	// Check if index is consitent with mailbox
WITHOUT_CLASSIFICATION	// Remove of lock didn't work -> delete by hand
WITHOUT_CLASSIFICATION	// Search again
WITHOUT_CLASSIFICATION	// Find all VirtualFolders and rewrite the FolderReference
WITHOUT_CLASSIFICATION	// show neat error dialog here
WITHOUT_CLASSIFICATION	// Find the body text part
WITHOUT_CLASSIFICATION	// current position in s
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// already handled
WITHOUT_CLASSIFICATION	//super.removeFolder(); // do nothing
WITHOUT_CLASSIFICATION	// Check if the parentfolder is remote & we are online				
WITHOUT_CLASSIFICATION	// only called by FolderTreeModel.createDirectories() and FolderTreeModel.add()
WITHOUT_CLASSIFICATION	// Analyze the Filter
WITHOUT_CLASSIFICATION	// If no flags filter the seach is still valid
WITHOUT_CLASSIFICATION	// redo the seach for the flags criteria
WITHOUT_CLASSIFICATION	// (tstich) reduced to 3 because all need to be // search when activated on startup // we only want 3 subfolders // -> if more children exist remove them
WITHOUT_CLASSIFICATION	// create new subfolder
WITHOUT_CLASSIFICATION	// if creation failed
WITHOUT_CLASSIFICATION	// copy all properties to the subfolder
WITHOUT_CLASSIFICATION	// lets find a good name for our new vfolder
WITHOUT_CLASSIFICATION	// update tree-view
WITHOUT_CLASSIFICATION	// get source folder reference
WITHOUT_CLASSIFICATION	// get source folder reference
WITHOUT_CLASSIFICATION	// VirtualMessage m = new VirtualMessage(f, uid, index);
WITHOUT_CLASSIFICATION	// Check if all uids are still exisiting
WITHOUT_CLASSIFICATION	// change to new folder
WITHOUT_CLASSIFICATION	// remove from source folder
WITHOUT_CLASSIFICATION	// remove from virtual folder
WITHOUT_CLASSIFICATION	// Now we can search this folder since no mail from // this folder will come in the list
WITHOUT_CLASSIFICATION	// Create a src uid array
WITHOUT_CLASSIFICATION	// Create a src uid array
WITHOUT_CLASSIFICATION	// search the src folder with the src uid array
WITHOUT_CLASSIFICATION	// search the src folder with the src uid array
WITHOUT_CLASSIFICATION	// Convert the src uids back to virtual uids
WITHOUT_CLASSIFICATION	// Convert the src uids back to virtual uids
WITHOUT_CLASSIFICATION	// Add all found virtual uids to the result
WITHOUT_CLASSIFICATION	// Add this header to the list for later searching
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// get header with UID
WITHOUT_CLASSIFICATION	// Check if all uids are still exisiting
WITHOUT_CLASSIFICATION	// change to new folder
WITHOUT_CLASSIFICATION	// can be an email address in a link BUG CA-174 // fix that with looking for an open link in the same line before // on the way from left to the current position of the email at s1 // find the last open link <a
WITHOUT_CLASSIFICATION	// First try to get the lock of the virtual folder
WITHOUT_CLASSIFICATION	/*		 * ColumbaHeader header = (ColumbaHeader) headerList.get(uid);		 * header.getAttributes().put(key, value);		 */
WITHOUT_CLASSIFICATION	// We need to get the locks of all folders
WITHOUT_CLASSIFICATION	// not supported
WITHOUT_CLASSIFICATION	// not supported
WITHOUT_CLASSIFICATION	// deactivate the folder
WITHOUT_CLASSIFICATION	// Copy the rest
WITHOUT_CLASSIFICATION	// Update the Virtual Header
WITHOUT_CLASSIFICATION	// fire updates
WITHOUT_CLASSIFICATION	// create scrollapen
WITHOUT_CLASSIFICATION	// don't care
WITHOUT_CLASSIFICATION	// shall we insert a link?
WITHOUT_CLASSIFICATION	// not supported by virtual folder
WITHOUT_CLASSIFICATION	// global option
WITHOUT_CLASSIFICATION	// use folder specific options
WITHOUT_CLASSIFICATION	// create element if not available
WITHOUT_CLASSIFICATION	// check if this folder is overwriting global options
WITHOUT_CLASSIFICATION	// use folder-based options
WITHOUT_CLASSIFICATION	// use global options
WITHOUT_CLASSIFICATION	// only local options have overwrite attribute
WITHOUT_CLASSIFICATION	// check if there are columns which need to be saved
WITHOUT_CLASSIFICATION	// remove all child nodes
WITHOUT_CLASSIFICATION	// save width
WITHOUT_CLASSIFICATION	// add columns
WITHOUT_CLASSIFICATION	// add column to JTable column model
WITHOUT_CLASSIFICATION	//tc.setModelIndex(position);
WITHOUT_CLASSIFICATION	// resize column width
WITHOUT_CLASSIFICATION	// these are the items, enabled as default
WITHOUT_CLASSIFICATION	// TableView view = tableController.getView();
WITHOUT_CLASSIFICATION	// should we re-use the last remembered selection?
WITHOUT_CLASSIFICATION	// sorting order
WITHOUT_CLASSIFICATION	// row count
WITHOUT_CLASSIFICATION	// row count == 0 --> empty table
WITHOUT_CLASSIFICATION	// if the last selection for the current folder is null, then we show // the // first/last message in the table and scroll to it.
WITHOUT_CLASSIFICATION	// changing the selection to the first/last row based on ascending // state
WITHOUT_CLASSIFICATION	// no messages in this folder
WITHOUT_CLASSIFICATION	// no messages in this folder
WITHOUT_CLASSIFICATION	// if a lastSelection for this folder is set // getting the last selected uid
WITHOUT_CLASSIFICATION	// this message doesn't exit in this folder anymore
WITHOUT_CLASSIFICATION	// init plugin handler
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// use folder specific options
WITHOUT_CLASSIFICATION	// check if this folder is overwriting global options
WITHOUT_CLASSIFICATION	// use folder-based options
WITHOUT_CLASSIFICATION	// use global options
WITHOUT_CLASSIFICATION	// get list of plugins
WITHOUT_CLASSIFICATION	// get list of plugins
WITHOUT_CLASSIFICATION	// if no folder was passed as argument, use global options
WITHOUT_CLASSIFICATION	// load plugin
WITHOUT_CLASSIFICATION	// create default configuration
WITHOUT_CLASSIFICATION	// use global settings
WITHOUT_CLASSIFICATION	// notify observers (sorting state submenu)
WITHOUT_CLASSIFICATION	// if we search in The MessageConroller
WITHOUT_CLASSIFICATION	// get the message controller
WITHOUT_CLASSIFICATION	// *20030614, karlpeder* In main view only enabled when // message(s) selected
WITHOUT_CLASSIFICATION	// check if we should use the folder-based configuration // or the global table configuration
WITHOUT_CLASSIFICATION	// toolbar text
WITHOUT_CLASSIFICATION	// check for new messages
WITHOUT_CLASSIFICATION	// send all unsent messages found in Outbox
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// model -> view
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// set small icon for menu // putValue(SMALL_ICON, ImageLoader.getImageIcon("stock_convert-16.png"));
WITHOUT_CLASSIFICATION	// "menu_edit_findagain_tooltip").replaceAll("&", ""));
WITHOUT_CLASSIFICATION	// @author Erich Schaer, Dmytro Podalyuk
WITHOUT_CLASSIFICATION	// if no account exists, return
WITHOUT_CLASSIFICATION	// Global # 1
WITHOUT_CLASSIFICATION	// West Europe # 4
WITHOUT_CLASSIFICATION	// East Europe # 10
WITHOUT_CLASSIFICATION	// East Asian # 17
WITHOUT_CLASSIFICATION	// West Asian # 30
WITHOUT_CLASSIFICATION	// protected CharsetMenuItem selectedMenuItem = new CharsetMenuItem(null);
WITHOUT_CLASSIFICATION	//setIcon(ImageLoader.getImageIcon("stock_font_16.png"));
WITHOUT_CLASSIFICATION	// Automatic Generation of Groups
WITHOUT_CLASSIFICATION	// selectedMenuItem.setCharset(e.getCharset());
WITHOUT_CLASSIFICATION	// init model (defaults to empty plain text message)
WITHOUT_CLASSIFICATION	// init controllers for different parts of the composer
WITHOUT_CLASSIFICATION	// listen to changes in the Subject to update the title bar // of the message composer window
WITHOUT_CLASSIFICATION	// composer can either edit in html or plain text mode // listen for configuration changes
WITHOUT_CLASSIFICATION	// init controller for the editor depending on message type
WITHOUT_CLASSIFICATION	// add JPanel with useful HTML related actions.
WITHOUT_CLASSIFICATION	// Hack to ensure charset is set correctly at start-up
WITHOUT_CLASSIFICATION	// ignore this
WITHOUT_CLASSIFICATION	// Setup DnD for the text and attachment list control.
WITHOUT_CLASSIFICATION	// create default element if not available
WITHOUT_CLASSIFICATION	// set model based on configuration
WITHOUT_CLASSIFICATION	// remove all components from container
WITHOUT_CLASSIFICATION	// re-add all top components like recipient editor/subject editor
WITHOUT_CLASSIFICATION	// if message contains attachments
WITHOUT_CLASSIFICATION	// show signature viewer
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// create splitpane containing the bodytext editor and the // attachment panel
WITHOUT_CLASSIFICATION	// add splitpane to the center
WITHOUT_CLASSIFICATION	// ViewItem viewItem = getViewItem();
WITHOUT_CLASSIFICATION	// no attachments // -> only show bodytext editor
WITHOUT_CLASSIFICATION	// no attachments // -> only show bodytext editor
WITHOUT_CLASSIFICATION	// re-paint composer-view
WITHOUT_CLASSIFICATION	// update panel
WITHOUT_CLASSIFICATION	/*		 * return isToolbarEnabled(ACCOUNTINFOPANEL);		 */
WITHOUT_CLASSIFICATION	// update ComposerModel based on user-changes in ComposerView
WITHOUT_CLASSIFICATION	// show attachment panel if necessary
WITHOUT_CLASSIFICATION	// Update all component according to the new model
WITHOUT_CLASSIFICATION	// sync model with the current (old) view
WITHOUT_CLASSIFICATION	// convert body text to comply with new editor format
WITHOUT_CLASSIFICATION	// switch editor and resync view with model
WITHOUT_CLASSIFICATION	// sync view with new update to date model
WITHOUT_CLASSIFICATION	// change ui container
WITHOUT_CLASSIFICATION	// enable/disable html toolbar
WITHOUT_CLASSIFICATION	// only prompt user, if composer contains some text
WITHOUT_CLASSIFICATION	// close Columba, if composer is only visible frame
WITHOUT_CLASSIFICATION	// default button title
WITHOUT_CLASSIFICATION	// save changes
WITHOUT_CLASSIFICATION	// close composer
WITHOUT_CLASSIFICATION	// close composer
WITHOUT_CLASSIFICATION	// cancel question dialog and don't close composer
WITHOUT_CLASSIFICATION	// save charset
WITHOUT_CLASSIFICATION	// save html state
WITHOUT_CLASSIFICATION	// hide signature viewer
WITHOUT_CLASSIFICATION	// original: "^[a-zA-Z0-9]+@[a-zA-Z0-9\\.\\-]+\\.[a-zA-Z]{2,4}+$";
WITHOUT_CLASSIFICATION	// make sure that JFrame is not closed automatically // -> we want to prompt the user to save his work
WITHOUT_CLASSIFICATION	// Display error ? // As it is inmutable
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.frapuccino.addresscombobox.PatternSeparatedAutoCompleter#acceptedListItem(java.lang.Object)	 */
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	//private ImageIcon image2 = null; //private ImageIcon image3 = null;
WITHOUT_CLASSIFICATION	// default ~ plain text
WITHOUT_CLASSIFICATION	// set message
WITHOUT_CLASSIFICATION	// set whether the model should handle html or plain text
WITHOUT_CLASSIFICATION	// more initialization
WITHOUT_CLASSIFICATION	// notifyListeners();
WITHOUT_CLASSIFICATION	// notifyListeners();
WITHOUT_CLASSIFICATION	/*			 * *20030917, karlpeder* Set the model to html or text based on the			 * body specified on the command line. This is done using a simple			 * check: Does the body contain <html> and </html>			 */
WITHOUT_CLASSIFICATION	// set the body text
WITHOUT_CLASSIFICATION	// if this is no URI
WITHOUT_CLASSIFICATION	// Remove leading space after the separator character so that it is not removed from the text component's document, below. 
WITHOUT_CLASSIFICATION	// Surround the selected element with double-quotes, if necessary
WITHOUT_CLASSIFICATION	// clear autocomplete hashmap
WITHOUT_CLASSIFICATION	// fill hashmap with all available contacts and groups
WITHOUT_CLASSIFICATION	// view.table.getModel().addTableModelListener(this);
WITHOUT_CLASSIFICATION	// skip empty strings
WITHOUT_CLASSIFICATION	//setText(accountName);
WITHOUT_CLASSIFICATION	//view.setSelectedItem( model.getHeaderField("X-Priority") );
WITHOUT_CLASSIFICATION	//model.setHeaderField("X-Priority",(String) view.getSelectedItem());
WITHOUT_CLASSIFICATION	//setModel(listModel);
WITHOUT_CLASSIFICATION	//setCellRenderer(new ListRenderer());
WITHOUT_CLASSIFICATION	//      Get Tooltip for Icon
WITHOUT_CLASSIFICATION	// remove from model
WITHOUT_CLASSIFICATION	// remove from view
WITHOUT_CLASSIFICATION	// clear model
WITHOUT_CLASSIFICATION	// clear view
WITHOUT_CLASSIFICATION	// pass contact data along to AddressComboBox
WITHOUT_CLASSIFICATION	/*			 * encryptMenuItem.setSelected(model.isEncryptMessage());			 * signMenuItem.setSelected(model.isSignMessage());			 */
WITHOUT_CLASSIFICATION	// view.addListSelectionListener(this);
WITHOUT_CLASSIFICATION	// transfer attachments from model to view
WITHOUT_CLASSIFICATION	/*			 * clear existing attachments from the view *20031105, karlpeder*			 * Added to avoid dupplicating attachments when switching btw. html			 * and plain text.			 */
WITHOUT_CLASSIFICATION	// add attachments (mimeparts) from model to the view
WITHOUT_CLASSIFICATION	// transfer attachments from view to model // clear existing attachments from the model
WITHOUT_CLASSIFICATION	// add attachments (mimeparts) from view to the model
WITHOUT_CLASSIFICATION	// hide/show attachment panel
WITHOUT_CLASSIFICATION	// attachment controller doesn't support copy-operation
WITHOUT_CLASSIFICATION	// attachment controller doesn't support copy actions
WITHOUT_CLASSIFICATION	// attachment controller doesn't support paste actions
WITHOUT_CLASSIFICATION	// attachment controller doesn't support redo operation
WITHOUT_CLASSIFICATION	// attachment controller doesn't support undo operation
WITHOUT_CLASSIFICATION	// attachment controller doesn't support undo operation
WITHOUT_CLASSIFICATION	// view.setSelectionInterval(0, view.count() - 1);
WITHOUT_CLASSIFICATION	// FocusManager.getInstance().updateActions();
WITHOUT_CLASSIFICATION	//	name of font
WITHOUT_CLASSIFICATION	// size of font
WITHOUT_CLASSIFICATION	// currently used font
WITHOUT_CLASSIFICATION	// font configuration
WITHOUT_CLASSIFICATION	// overwrite look and feel font settings
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// fonts
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*     * Gets fired if configuration has changed.     *     * @see org.columba.mail.gui.config.general.MailOptionsDialog     *     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// "menu_edit_findagain_tooltip").replaceAll("&", ""));
WITHOUT_CLASSIFICATION	// @author Erich Schaer, Dmytro Podalyuk
WITHOUT_CLASSIFICATION	// overwrite look and feel font settings
WITHOUT_CLASSIFICATION	// register for configuration changes
WITHOUT_CLASSIFICATION	// ********** Methods necessary to hide view from clients ********
WITHOUT_CLASSIFICATION	// use default font settings
WITHOUT_CLASSIFICATION	// setBorder(BorderFactory.createCompoundBorder(BorderFactory // .createEmptyBorder(5, 5, 5, 5), BorderFactory // .createCompoundBorder(new RoundedBorder( // new Color(220, 220, 220)), BorderFactory // .createEmptyBorder(5, 5, 5, 5))));
WITHOUT_CLASSIFICATION	// textPane.setEnabled(false);
WITHOUT_CLASSIFICATION	// register interest on configuration changes
WITHOUT_CLASSIFICATION	// if account selection changes, reload signature file
WITHOUT_CLASSIFICATION	// add listener to changes
WITHOUT_CLASSIFICATION	// add listener to changes
WITHOUT_CLASSIFICATION	// remove listener from old account selection
WITHOUT_CLASSIFICATION	//SubjectDialog dialog = new SubjectDialog(composerInterface.composerFrame);
WITHOUT_CLASSIFICATION	// view data ->model
WITHOUT_CLASSIFICATION	// get selected account
WITHOUT_CLASSIFICATION	// get "Drafts" folder of account
WITHOUT_CLASSIFICATION	// check if we are currently editing a draft message
WITHOUT_CLASSIFICATION	// -> we need to replace old message
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// Add components to the panel:
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// large icon for toolbar
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// create command
WITHOUT_CLASSIFICATION	// toolbar text
WITHOUT_CLASSIFICATION	// toolbar text
WITHOUT_CLASSIFICATION	// view data ->model
WITHOUT_CLASSIFICATION	// delete source message
WITHOUT_CLASSIFICATION	// mark as read, mark as draft
WITHOUT_CLASSIFICATION	// create command reference
WITHOUT_CLASSIFICATION	// disable text in toolbar
WITHOUT_CLASSIFICATION	// disable text in toolbar
WITHOUT_CLASSIFICATION	//shortcut key
WITHOUT_CLASSIFICATION	//shortcut key
WITHOUT_CLASSIFICATION	//String checked = //	composerController.getComposerSpellCheck().checkText( //		composerController.getEditorController().getView().getText());
WITHOUT_CLASSIFICATION	//composerController.getEditorController().getView().setText(checked);
WITHOUT_CLASSIFICATION	// update view accordingly
WITHOUT_CLASSIFICATION	// small icon for menu //putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("send-later-16.png"));
WITHOUT_CLASSIFICATION	//      -> get source reference of message // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// mark message as answered
WITHOUT_CLASSIFICATION	// close composer view
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// Runs on the event-dispatching thread.
WITHOUT_CLASSIFICATION	// required for SwingWorker 3
WITHOUT_CLASSIFICATION	//setEnabled(false);
WITHOUT_CLASSIFICATION	//setEnabled(false);
WITHOUT_CLASSIFICATION	//getFrameController().close();
WITHOUT_CLASSIFICATION	/*        composerInterface.composerController.saveWindowPosition();        composerInterface.composerController.hideComposerWindow();        */
WITHOUT_CLASSIFICATION	//ComposerModel model = (ComposerModel) // ((ComposerController)getFrameController()).getModel();
WITHOUT_CLASSIFICATION	// open composer frame
WITHOUT_CLASSIFICATION	// apply model
WITHOUT_CLASSIFICATION	// model->view update
WITHOUT_CLASSIFICATION	// get first selected message
WITHOUT_CLASSIFICATION	// get headerfields
WITHOUT_CLASSIFICATION	// create composer model
WITHOUT_CLASSIFICATION	// create composer model
WITHOUT_CLASSIFICATION	//      ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// set subject
WITHOUT_CLASSIFICATION	// initialize MimeHeader as RFC822-compliant-message
WITHOUT_CLASSIFICATION	// add mimepart to model
WITHOUT_CLASSIFICATION	// setup to, references and account
WITHOUT_CLASSIFICATION	// get mimeparts
WITHOUT_CLASSIFICATION	// setup charset and html
WITHOUT_CLASSIFICATION	/*			 * *20040210, karlpeder* Remove html comments - they are not			 * displayed properly in the composer			 */
WITHOUT_CLASSIFICATION	//  add all attachments
WITHOUT_CLASSIFICATION	// skip if bodypart (already added as quoted text)
WITHOUT_CLASSIFICATION	// add attachment
WITHOUT_CLASSIFICATION	// builder.setLeadingColumnOffset(2);
WITHOUT_CLASSIFICATION	// get first selected message
WITHOUT_CLASSIFICATION	// get headerfields
WITHOUT_CLASSIFICATION	// create composer model
WITHOUT_CLASSIFICATION	// set subject
WITHOUT_CLASSIFICATION	// set subject
WITHOUT_CLASSIFICATION	// setup to, references and account
WITHOUT_CLASSIFICATION	// get mimeparts
WITHOUT_CLASSIFICATION	// Which Bodypart shall be shown? (html/plain)
WITHOUT_CLASSIFICATION	// setup charset and html
WITHOUT_CLASSIFICATION	// Select the charset of the original message
WITHOUT_CLASSIFICATION	// Stick with the default charset
WITHOUT_CLASSIFICATION	// Do decoding stuff
WITHOUT_CLASSIFICATION	// Quote original message - different methods for text and html
WITHOUT_CLASSIFICATION	// build "quoted" message
WITHOUT_CLASSIFICATION	// comments are not displayed // correctly in composer
WITHOUT_CLASSIFICATION	// Text: Addition of > before each line
WITHOUT_CLASSIFICATION	// ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// get answer from template
WITHOUT_CLASSIFICATION	// template folder has uid=107
WITHOUT_CLASSIFICATION	// retrieve headerlist of tempate folder
WITHOUT_CLASSIFICATION	// choose template
WITHOUT_CLASSIFICATION	// user pressed OK
WITHOUT_CLASSIFICATION	// get bodytext of template message
WITHOUT_CLASSIFICATION	// *20030926, karlpeder* Added html support // MimePart mp = tree.getFirstTextPart("plain");
WITHOUT_CLASSIFICATION	// Add all recipients to the collected addresses
WITHOUT_CLASSIFICATION	// From which account is this mail?
WITHOUT_CLASSIFICATION	// remove duplicates
WITHOUT_CLASSIFICATION	// Add addresses to the addressbook
WITHOUT_CLASSIFICATION	// create In-Reply-To:, References: headerfields
WITHOUT_CLASSIFICATION	// select the account this mail was received from
WITHOUT_CLASSIFICATION	// open composer frame
WITHOUT_CLASSIFICATION	// apply model
WITHOUT_CLASSIFICATION	// model->view update
WITHOUT_CLASSIFICATION	// get first selected message
WITHOUT_CLASSIFICATION	// get headerfields
WITHOUT_CLASSIFICATION	// create composer model
WITHOUT_CLASSIFICATION	// set subject
WITHOUT_CLASSIFICATION	// setup to, references and account
WITHOUT_CLASSIFICATION	// get mimeparts
WITHOUT_CLASSIFICATION	// Which Bodypart shall be shown? (html/plain)
WITHOUT_CLASSIFICATION	// setup charset and html
WITHOUT_CLASSIFICATION	/*			 * *20040210, karlpeder* Remove html comments - they are not			 * displayed properly in the composer			 */
WITHOUT_CLASSIFICATION	// skip if bodypart (already added as quoted text)
WITHOUT_CLASSIFICATION	// add attachment
WITHOUT_CLASSIFICATION	// Select the charset of the original message
WITHOUT_CLASSIFICATION	// Stick with the default charset
WITHOUT_CLASSIFICATION	// Do decoding stuff
WITHOUT_CLASSIFICATION	// ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// create In-Reply-To:, References: headerfields
WITHOUT_CLASSIFICATION	// select the account this mail was received from
WITHOUT_CLASSIFICATION	// Use reply-to field if given, else use from
WITHOUT_CLASSIFICATION	// get selected messages
WITHOUT_CLASSIFICATION	// we only need the first message
WITHOUT_CLASSIFICATION	// get message flags
WITHOUT_CLASSIFICATION	// store reference to source message
WITHOUT_CLASSIFICATION	// html
WITHOUT_CLASSIFICATION	// copy every headerfield the original message contains
WITHOUT_CLASSIFICATION	// Get all MimeParts
WITHOUT_CLASSIFICATION	// add all attachments
WITHOUT_CLASSIFICATION	// set subject ; mod:20040629 SWITT
WITHOUT_CLASSIFICATION	// set From for redirecting; new: 20040629 SWITT
WITHOUT_CLASSIFICATION	// Html: Insertion of text before and after original message
WITHOUT_CLASSIFICATION	// build message orginal ; mod:2004629 SWITT
WITHOUT_CLASSIFICATION	// Text: take org. message; mod:20040629 SWITT
WITHOUT_CLASSIFICATION	// open composer frame
WITHOUT_CLASSIFICATION	// apply model
WITHOUT_CLASSIFICATION	// model->view update
WITHOUT_CLASSIFICATION	// get first selected message
WITHOUT_CLASSIFICATION	// get headerfields
WITHOUT_CLASSIFICATION	// create composer model
WITHOUT_CLASSIFICATION	//      ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// set subject
WITHOUT_CLASSIFICATION	// initialize MimeHeader as RFC822-compliant-message
WITHOUT_CLASSIFICATION	// add mimepart to model
WITHOUT_CLASSIFICATION	// setup to, references and account
WITHOUT_CLASSIFICATION	// get mimeparts
WITHOUT_CLASSIFICATION	// Which Bodypart shall be shown? (html/plain)
WITHOUT_CLASSIFICATION	// setup charset and html
WITHOUT_CLASSIFICATION	// Select the charset of the original message
WITHOUT_CLASSIFICATION	// Stick with the default charset
WITHOUT_CLASSIFICATION	// Quote original message - different methods for text and html
WITHOUT_CLASSIFICATION	// build "quoted" message
WITHOUT_CLASSIFICATION	// Text: Addition of > before each line
WITHOUT_CLASSIFICATION	// ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// Add addresses to the addressbook
WITHOUT_CLASSIFICATION	// create In-Reply-To:, References: headerfields
WITHOUT_CLASSIFICATION	// select the account this mail was received from
WITHOUT_CLASSIFICATION	// Use reply-to field if given, else use from
WITHOUT_CLASSIFICATION	// Set the focus to the editor pane and set cursor to the top
WITHOUT_CLASSIFICATION	// 	Stick with the default charset
WITHOUT_CLASSIFICATION	// recipient lists
WITHOUT_CLASSIFICATION	// addressbook list
WITHOUT_CLASSIFICATION	// action buttons for moving contacts
WITHOUT_CLASSIFICATION	// labels
WITHOUT_CLASSIFICATION	// models for addressbook/recipients lists
WITHOUT_CLASSIFICATION	// b2.nextLine();
WITHOUT_CLASSIFICATION	// comments are not displayed // correctly in composer
WITHOUT_CLASSIFICATION	/*	 * public IHeaderItemList[] getHeaderItemLists() { return headerItemList; }	 */
WITHOUT_CLASSIFICATION	//			toListModel.clear(); //			ccListModel.clear(); //			bccListModel.clear();
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// register for changes to the editor // controller.addContainerListenerForEditor(this);
WITHOUT_CLASSIFICATION	// register for changes to editor type (text / html)
WITHOUT_CLASSIFICATION	// CellConstraints cc = new CellConstraints();
WITHOUT_CLASSIFICATION	// we generate most buttons using the actions already instanciated
WITHOUT_CLASSIFICATION	// paragraphComboBox.setEnabled(enableHtml);
WITHOUT_CLASSIFICATION	// builder.add(paraLabel, cc.xy(1, 7));
WITHOUT_CLASSIFICATION	// builder.add(panel, cc.xy(1, 7));
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// need to change selection // Set ignore flag
WITHOUT_CLASSIFICATION	// clear ignore flag
WITHOUT_CLASSIFICATION	// selection in the paragraph combo box
WITHOUT_CLASSIFICATION	// only do something if ignore flag is not set
WITHOUT_CLASSIFICATION	// set paragraph formatting according to the selection
WITHOUT_CLASSIFICATION	// int selectedIndex = sizeComboBox.getSelectedIndex();
WITHOUT_CLASSIFICATION	// select the "Normal" entry as default
WITHOUT_CLASSIFICATION	// enable controls if we are not in html edit mode
WITHOUT_CLASSIFICATION	// private JTextPane view;
WITHOUT_CLASSIFICATION	// view = editor.getView();
WITHOUT_CLASSIFICATION	// // This doesn't handle ChangedCharsetExceptions correctly. // view.setText(text);
WITHOUT_CLASSIFICATION	// try again, but ignore charset specification in the html
WITHOUT_CLASSIFICATION	// other IOExceptions than ChangedCharsetException
WITHOUT_CLASSIFICATION	// clear existing text
WITHOUT_CLASSIFICATION	// delete old contents
WITHOUT_CLASSIFICATION	// if no text is specified, we are done now
WITHOUT_CLASSIFICATION	// load contents into document
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// select the "Normal" entry as default
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	// register for model changes to enable/disable when // user switches between html or text plain mode
WITHOUT_CLASSIFICATION	// register for text cursor/caret and formatting changes // to select/deselect action
WITHOUT_CLASSIFICATION	// register for text cursor/caret and formatting changes // to select/deselect action
WITHOUT_CLASSIFICATION	//  view.addCaretListener(this);
WITHOUT_CLASSIFICATION	// set paragraph formatting according to the given action
WITHOUT_CLASSIFICATION	// Enable when implemented
WITHOUT_CLASSIFICATION	// select the menu item corresponding to present format
WITHOUT_CLASSIFICATION	// Update the composer
WITHOUT_CLASSIFICATION	// reset
WITHOUT_CLASSIFICATION	// group item
WITHOUT_CLASSIFICATION	// to lower case
WITHOUT_CLASSIFICATION	// compare if item starts with str
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// END public ExternalEditor()
WITHOUT_CLASSIFICATION	// END public ExternalEditor(String EditorCommand)
WITHOUT_CLASSIFICATION	// write text to file
WITHOUT_CLASSIFICATION	// remember old font properties
WITHOUT_CLASSIFICATION	// create big size font to display in the composer textfield
WITHOUT_CLASSIFICATION	// execute application, enabling blocking
WITHOUT_CLASSIFICATION	// rafter the user saved the file and closed the // external text editor, we read the new text from the file
WITHOUT_CLASSIFICATION	// set old font properties
WITHOUT_CLASSIFICATION	// set new text
WITHOUT_CLASSIFICATION	// END public boolean startExternalEditor()
WITHOUT_CLASSIFICATION	// END public class ExternalEditor
WITHOUT_CLASSIFICATION	//dialog.getContentPane().setLayout( new BoxLayout( dialog.getContentPane(), BoxLayout.Y_AXIS ) );
WITHOUT_CLASSIFICATION	//centerPanel.setLayout( new BoxLayout( centerPanel, BoxLayout.Y_AXIS ) );
WITHOUT_CLASSIFICATION	/*TitledBorder etched = javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), " Login ");centerPanel.setBorder( etched );*/
WITHOUT_CLASSIFICATION	//centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) );
WITHOUT_CLASSIFICATION	/*JPanel panel = new JPanel();panel.setLayout( new BoxLayout( panel, BoxLayout.X_AXIS ) );panel.add( hostLabel );centerPanel.add( panel );*/
WITHOUT_CLASSIFICATION	//centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) ); //centerPanel.add( Box.createRigidArea( new java.awt.Dimension(0,5) ) );
WITHOUT_CLASSIFICATION	//Plain text components don't fire these events
WITHOUT_CLASSIFICATION	// First print a quote
WITHOUT_CLASSIFICATION	// Do we have to insert a quoteprefix?
WITHOUT_CLASSIFICATION	//		 for each JComboBox item
WITHOUT_CLASSIFICATION	//$NON-NLS-1$		
WITHOUT_CLASSIFICATION	//$NON-NLS-1$			
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// check if the user entered valid data
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// defaultAccountCheckBox.setEnabled(false);
WITHOUT_CLASSIFICATION	// attributPanel.add(imapPanel, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	/*		 * mainConstraints.fill = GridBagConstraints.BOTH;		 * mainConstraints.insets = new Insets(0, 0, 0, 0);		 * mainConstraints.gridwidth = GridBagConstraints.REMAINDER;		 * mainConstraints.weightx = 1.0; mainConstraints.weighty = 1.0;		 */
WITHOUT_CLASSIFICATION	// disable components
WITHOUT_CLASSIFICATION	// update configuration
WITHOUT_CLASSIFICATION	// update signature -> will notify all listeners that signature changed
WITHOUT_CLASSIFICATION	// mainPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));
WITHOUT_CLASSIFICATION	// update tree label
WITHOUT_CLASSIFICATION	// @author: fdietz
WITHOUT_CLASSIFICATION	// notify all observers
WITHOUT_CLASSIFICATION	// here)
WITHOUT_CLASSIFICATION	// restart timer
WITHOUT_CLASSIFICATION	//Create the file
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them
WITHOUT_CLASSIFICATION	// user didn't select any folder // -> make Inbox the default folder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// skip the first column
WITHOUT_CLASSIFICATION	// skip the first column
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them // here)
WITHOUT_CLASSIFICATION	/*		 * mainConstraints.fill = GridBagConstraints.BOTH;		 * mainConstraints.insets = new Insets(0, 0, 0, 0);		 * mainConstraints.gridwidth = GridBagConstraints.REMAINDER;		 * mainConstraints.weightx = 1.0; mainConstraints.weighty = 1.0;		 */
WITHOUT_CLASSIFICATION	// defaultAccountCheckBox.setEnabled(false);
WITHOUT_CLASSIFICATION	// defaultAccountCheckBox.setEnabled(false);
WITHOUT_CLASSIFICATION	// user didn't select any folder // -> make Inbox the default folder
WITHOUT_CLASSIFICATION	// Add components to the panel: //		builder.append(defaultAccountCheckBox, 7); //		builder.nextLine();
WITHOUT_CLASSIFICATION	// builder.setLeadingColumnOffset(1);
WITHOUT_CLASSIFICATION	// builder.setLeadingColumnOffset(1);
WITHOUT_CLASSIFICATION	// builder.setLeadingColumnOffset(1);
WITHOUT_CLASSIFICATION	// builder.nextLine();
WITHOUT_CLASSIFICATION	// builder.nextLine();
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need // to // define them here)
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need // to // define them here)
WITHOUT_CLASSIFICATION	// b.nextLine(); // b.append(loginLabel, loginTextField);
WITHOUT_CLASSIFICATION	// authenticationComboBox.addActionListener(this);
WITHOUT_CLASSIFICATION	// Add previously fetch authentication modes
WITHOUT_CLASSIFICATION	// Add previously fetch authentication modes
WITHOUT_CLASSIFICATION	// let exception handler process other errors
WITHOUT_CLASSIFICATION	// Save the authentication modes
WITHOUT_CLASSIFICATION	// private ConfigFrame frame;
WITHOUT_CLASSIFICATION	// disable the actionlistener for this period // to avoid an unwanted port check
WITHOUT_CLASSIFICATION	// reactivate
WITHOUT_CLASSIFICATION	// if securest write DEFAULT
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to // define them here)
WITHOUT_CLASSIFICATION	// Update the Port
WITHOUT_CLASSIFICATION	// Default Port
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// skip the first column
WITHOUT_CLASSIFICATION	// skip the first column
WITHOUT_CLASSIFICATION	// Add components to the panel:
WITHOUT_CLASSIFICATION	// Add components to the panel:
WITHOUT_CLASSIFICATION	//does not occur
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them // here)
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them // here)
WITHOUT_CLASSIFICATION	// let exception handler process other errors
WITHOUT_CLASSIFICATION	// let exception handler process other errors
WITHOUT_CLASSIFICATION	// Save the authentication modes
WITHOUT_CLASSIFICATION	// POP3s / IMAPs
WITHOUT_CLASSIFICATION	// Check for default Ports
WITHOUT_CLASSIFICATION	/* accountItem.getPopItem() */
WITHOUT_CLASSIFICATION	//private ConfigFrame frame;
WITHOUT_CLASSIFICATION	//this.frame = frame;
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them here)
WITHOUT_CLASSIFICATION	// 3 columns // rows are added dynamically (no need to define them here)
WITHOUT_CLASSIFICATION	//b.append(selectSignatureButton);
WITHOUT_CLASSIFICATION	/*         * JPanel innerPanel = builder.getPanel();         * FormDebugUtils.dumpAll(innerPanel); setLayout(new BorderLayout());         * add(innerPanel, BorderLayout.CENTER);         */
WITHOUT_CLASSIFICATION	//enableCheckBox.setEnabled(false);
WITHOUT_CLASSIFICATION	/*		 * builder.append(alwaysEncryptCheckBox, 3); builder.nextLine();		 */
WITHOUT_CLASSIFICATION	//typeComboBox.setMargin( new Insets( 0,0,0,0 ) );
WITHOUT_CLASSIFICATION	//pathButton.setMargin( new Insets( 0,0,0,0 ) );
WITHOUT_CLASSIFICATION	//typeComboBox.setEnabled(b);
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// MUST do this for background to show up.
WITHOUT_CLASSIFICATION	// top panel
WITHOUT_CLASSIFICATION	// topPanel.setLayout( );
WITHOUT_CLASSIFICATION	// mainPanel.add( topBorderPanel, BorderLayout.NORTH );
WITHOUT_CLASSIFICATION	// c.fill = GridBagConstraints.HORIZONTAL;
WITHOUT_CLASSIFICATION	// notify all observers
WITHOUT_CLASSIFICATION	// String value = (String) theList.getSelectedValue();
WITHOUT_CLASSIFICATION	// remove mail-checking stuff
WITHOUT_CLASSIFICATION	//MUST do this for background to show up.
WITHOUT_CLASSIFICATION	//setBorder( BorderFactory.createEmptyBorder(0,1,0,0) );
WITHOUT_CLASSIFICATION	// setBorder(unselectedBorder);
WITHOUT_CLASSIFICATION	// this should not happen, the templates seem to be missing
WITHOUT_CLASSIFICATION	//				IMAPRootFolder parentFolder = FolderFactory.getInstance() //						.createIMAPRootFolder(account); //				IMailFolder inbox = FolderFactory.getInstance() //						.createIMAPFolder(parentFolder, "INBOX");
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// centerpanel
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	// execute the command
WITHOUT_CLASSIFICATION	// top panel
WITHOUT_CLASSIFICATION	// topPanel.setLayout( );
WITHOUT_CLASSIFICATION	// topBorderPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, // 0));
WITHOUT_CLASSIFICATION	// c.fill = GridBagConstraints.HORIZONTAL;
WITHOUT_CLASSIFICATION	// notify all observers
WITHOUT_CLASSIFICATION	// add welcome message to new account inbox
WITHOUT_CLASSIFICATION	// add account to mail-checking manager
WITHOUT_CLASSIFICATION	// generally we can just use the same login for both servers
WITHOUT_CLASSIFICATION	// get column of list
WITHOUT_CLASSIFICATION	// find colum
WITHOUT_CLASSIFICATION	// remove disabled column
WITHOUT_CLASSIFICATION	// make sure this configuration is also visually working immediately
WITHOUT_CLASSIFICATION	// list.repaint();
WITHOUT_CLASSIFICATION	// disable selected item
WITHOUT_CLASSIFICATION	// ask the user about the destination file
WITHOUT_CLASSIFICATION	// get list of all folders
WITHOUT_CLASSIFICATION	// get list of all selected folders
WITHOUT_CLASSIFICATION	// create command reference array for the command
WITHOUT_CLASSIFICATION	// TreePath path = tree.getSelectionPath();
WITHOUT_CLASSIFICATION	// I need revalidate if node is root. but why?
WITHOUT_CLASSIFICATION	// private AdapterNode actNode;
WITHOUT_CLASSIFICATION	// private Filter filter; // private JDialog dialog;
WITHOUT_CLASSIFICATION	/*	 * private JButton enableButton; private JButton disableButton;	 */
WITHOUT_CLASSIFICATION	// Must go backwards or else the list will remove the wrong filters.
WITHOUT_CLASSIFICATION	/*	 * private TitledBorderLabel m_titledborderlabel1 = new TitledBorderLabel();	 * 	 * private TitledBorderLabel m_titledborderlabel2 = new TitledBorderLabel();	 */
WITHOUT_CLASSIFICATION	// jpanel1.add(addCriteriaButton, cc.xy(1, 1));
WITHOUT_CLASSIFICATION	// jpanel1.add(addActionButton, cc.xy(1, 1));
WITHOUT_CLASSIFICATION	// description
WITHOUT_CLASSIFICATION	// id = org.columba.example.HelloWorld$HelloWorldPlugin
WITHOUT_CLASSIFICATION	// id = org.columba.example.HelloWorld$HelloWorldPlugin
WITHOUT_CLASSIFICATION	//String userVisibleName = pluginHandler.getUserVisibleName(id);
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// cancel
WITHOUT_CLASSIFICATION	// user didn't select any folder // -> make Inbox the default folder
WITHOUT_CLASSIFICATION	// set component values
WITHOUT_CLASSIFICATION	// filter description JTextField
WITHOUT_CLASSIFICATION	// all / match any JComboBox
WITHOUT_CLASSIFICATION	// get values from components
WITHOUT_CLASSIFICATION	// frame.listView.update();
WITHOUT_CLASSIFICATION	// int type = action.getActionInt();
WITHOUT_CLASSIFICATION	// maybe the plugin wasn't loaded correctly // -> use default // row = new MarkActionRow(this,action);
WITHOUT_CLASSIFICATION	/*				 * c.gridx = GridBagConstraints.REMAINDER; c.anchor =				 * GridBagConstraints.NORTHEAST; gridbag.setConstraints(				 * removeButton, c ); panel.add( removeButton );				 */
WITHOUT_CLASSIFICATION	// fall-back if error occurs
WITHOUT_CLASSIFICATION	// block transfer to self!
WITHOUT_CLASSIFICATION	// if it is in a scroll pane, then we add to the end of the // list.
WITHOUT_CLASSIFICATION	// enabled/disabled
WITHOUT_CLASSIFICATION	/*		 * matchComboBox.addItem("is"); matchComboBox.addItem("is not");		 * matchComboBox.addItem("begins with"); matchComboBox.addItem("ends		 * with");		 */
WITHOUT_CLASSIFICATION	// Fall back to today
WITHOUT_CLASSIFICATION	// textField.setText(criteria.getPattern());
WITHOUT_CLASSIFICATION	// criteria.setPattern((String) textField.getText());
WITHOUT_CLASSIFICATION	// Ok
WITHOUT_CLASSIFICATION	// couldn't find folder associated with this uid // -> open the select folder dialog
WITHOUT_CLASSIFICATION	// treePathButton.setMargin(new Insets(0,0,0,0));
WITHOUT_CLASSIFICATION	// use "mark as read" as default fallback mechanism
WITHOUT_CLASSIFICATION	// Add the custom color item.
WITHOUT_CLASSIFICATION	// String userVisibleName = pluginHandler.getUserVisibleName(id);
WITHOUT_CLASSIFICATION	//private JLabel enableTextIndexingLabel;
WITHOUT_CLASSIFICATION	// JCheckBox overwriteOptionsCheckBox;
WITHOUT_CLASSIFICATION	// focus name textfield
WITHOUT_CLASSIFICATION	// 3 columns //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Create a FormLayout instance. //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// Add components to the panel:
WITHOUT_CLASSIFICATION	//enableTextIndexingLabel.setEnabled(false);
WITHOUT_CLASSIFICATION	// @author tstich: Added Lucene gui element here //builder.add(enableTextIndexingLabel, cc.xy(2, 13));
WITHOUT_CLASSIFICATION	/*		 * builder.addSeparator("Full-text indexing");		 * 		 * builder.add(enableLabel, cc.xywh(1, 7, 5, 1));		 * builder.add(enableTextIndexingCheckBox, cc.xywh(2, 9, 4, 1));		 */
WITHOUT_CLASSIFICATION	/*		 * JPanel panel= new JPanel(); panel.setLayout(new BorderLayout());		 * panel.add(resetButton, BorderLayout.EAST); builder.add(panel,		 * cc.xywh(5, 7, 1, 1));		 */
WITHOUT_CLASSIFICATION	/*		 * overwriteOptionsCheckBox = new JCheckBox("Overwrite global		 * settings"); overwriteOptionsCheckBox.addActionListener(this);		 * overwriteOptionsCheckBox.setActionCommand("OVERWRITE");		 */
WITHOUT_CLASSIFICATION	// user changed folder name
WITHOUT_CLASSIFICATION	// bottom.add( Box.createHorizontalGlue() );
WITHOUT_CLASSIFICATION	// only local folders have an full-text indexing capability
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// enable lucene search index by default //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// c.gridwidth = GridBagConstraints.RELATIVE;
WITHOUT_CLASSIFICATION	// adjust description field
WITHOUT_CLASSIFICATION	// debug messages for diagnostics
WITHOUT_CLASSIFICATION	// notify configuration changes listeners // @see org.columba.mail.gui.table.util.MarkAsReadTimer
WITHOUT_CLASSIFICATION	// notify configuration changes listeners // @see org.columba.mail.gui.message.TextViewer
WITHOUT_CLASSIFICATION	// send notification event // @see org.columba.mail.gui.message.TextViewer
WITHOUT_CLASSIFICATION	// notify listeners // @see org.columba.mail.gui.composer.SubjectController
WITHOUT_CLASSIFICATION	// general
WITHOUT_CLASSIFICATION	// button panel
WITHOUT_CLASSIFICATION	// Create a FormLayout instance.
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// skip the first column
WITHOUT_CLASSIFICATION	// Add components to the panel:
WITHOUT_CLASSIFICATION	// init bottom panel with OK, Cancel buttons
WITHOUT_CLASSIFICATION	// notify listeners
WITHOUT_CLASSIFICATION	// ask the user about the destination file
WITHOUT_CLASSIFICATION	// only local folders have an full-text indexing capability
WITHOUT_CLASSIFICATION	// bottom.setBorder(new SingleSideEtchedBorder(SwingConstants.TOP)); // bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) ); // bottom.add( Box.createHorizontalStrut());
WITHOUT_CLASSIFICATION	// Create the closing boundary
WITHOUT_CLASSIFICATION	// remove all old elements
WITHOUT_CLASSIFICATION	// add new element
WITHOUT_CLASSIFICATION	// cast to Local AbstractMessageFolder is safe here
WITHOUT_CLASSIFICATION	// execute resyncing command
WITHOUT_CLASSIFICATION	// restore settings
WITHOUT_CLASSIFICATION	// re-select folder to make changes visible to the user
WITHOUT_CLASSIFICATION	// create new default options
WITHOUT_CLASSIFICATION	// update list view
WITHOUT_CLASSIFICATION	// if size > than 1000 KB, transform to MB
WITHOUT_CLASSIFICATION	// composer
WITHOUT_CLASSIFICATION	//builder.nextLine();
WITHOUT_CLASSIFICATION	//layout.setRowGroups(new int[][]{ {1, 3, 5, 7, 9, 11, 13, 15} });
WITHOUT_CLASSIFICATION	/*		 * builder.append(spellLabel, spellButton); builder.nextLine();		 */
WITHOUT_CLASSIFICATION	//Set up color chooser for setting quoted color
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// model -> view
WITHOUT_CLASSIFICATION	// view -> model
WITHOUT_CLASSIFICATION	// id = org.columba.example.HelloWorld$HelloWorldPlugin
WITHOUT_CLASSIFICATION	// Where, in the drag image, the mouse was clicked
WITHOUT_CLASSIFICATION	// centerpanel
WITHOUT_CLASSIFICATION	// top panel
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,	 *      java.lang.Object, int, boolean, boolean)	 */
WITHOUT_CLASSIFICATION	// topPanel.setLayout( );
WITHOUT_CLASSIFICATION	// c.fill = GridBagConstraints.HORIZONTAL;
WITHOUT_CLASSIFICATION	// 3 columns // rows are added dynamically (no need to define them here)
WITHOUT_CLASSIFICATION	// get values from components
WITHOUT_CLASSIFICATION	// If f==null because of deleted AbstractMessageFolder fallback to // Inbox
WITHOUT_CLASSIFICATION	//		builder.append(showAttachmentsInlineCheckBox, 4); //		builder.nextLine();
WITHOUT_CLASSIFICATION	// Create list of unsubscribed folders
WITHOUT_CLASSIFICATION	// Deactivate this vFolder because changes are about to happen // and the search needs to be redone.
WITHOUT_CLASSIFICATION	// create default namespace
WITHOUT_CLASSIFICATION	// Process shared namespaces
WITHOUT_CLASSIFICATION	// Does the server support the namespace extension?
WITHOUT_CLASSIFICATION	// Process personal namespaces
WITHOUT_CLASSIFICATION	// Process other users namespaces
WITHOUT_CLASSIFICATION	// Handle special case in which INBOX has a NIL delimiter // -> there might exist a pseudo hierarchy under INBOX+delimiter
WITHOUT_CLASSIFICATION	// Now we have the subscribed folders in subscribedFolders // and the unsubscribed folders in unsubscribedFolders // Next step: Create a treestructure
WITHOUT_CLASSIFICATION	// INBOX is always subscribed
WITHOUT_CLASSIFICATION	//bottom.add( Box.createHorizontalGlue() );
WITHOUT_CLASSIFICATION	// split the hierarchical name with at the delimiters
WITHOUT_CLASSIFICATION	// Create the header of the multipart
WITHOUT_CLASSIFICATION	// can be only one
WITHOUT_CLASSIFICATION	// manipulateModel(TableModelPlugin.STRUCTURE_CHANGE);
WITHOUT_CLASSIFICATION	/*			 * HeaderItem[] items = new HeaderItem[selection2.length]; items =			 * selection2;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */
WITHOUT_CLASSIFICATION	/*		 * dragSource.startDrag( event, new Cursor(Cursor.DEFAULT_CURSOR),		 * ImageLoader.getImageIcon("contact_small","Add16").getImage(), new		 * Point(5, 5), new StringSelection("contact"), this);		 */
WITHOUT_CLASSIFICATION	// removeElement();
WITHOUT_CLASSIFICATION	// Plain text components don't fire these events
WITHOUT_CLASSIFICATION	/*JSCFDriverManager.registerJSCFDriver(new GPGDriver());JSCFConnection con = JSCFDriverManager.getConnection("jscf:gpg:"+pgpItem.get("path"));*/
WITHOUT_CLASSIFICATION	// show all search results
WITHOUT_CLASSIFICATION	// select search folder
WITHOUT_CLASSIFICATION	// select search folder
WITHOUT_CLASSIFICATION	// get selected search criteria
WITHOUT_CLASSIFICATION	// create filter criteria based on selected type
WITHOUT_CLASSIFICATION	// set criteria for search folder
WITHOUT_CLASSIFICATION	// add search to history
WITHOUT_CLASSIFICATION	// get search folder
WITHOUT_CLASSIFICATION	// remove old filters
WITHOUT_CLASSIFICATION	// add filter criteria
WITHOUT_CLASSIFICATION	// set source folder UID
WITHOUT_CLASSIFICATION	// execute custom search
WITHOUT_CLASSIFICATION	// enable/disable textfield in-dependency of selected criteria
WITHOUT_CLASSIFICATION	// directly execute search
WITHOUT_CLASSIFICATION	// get currently selected folder
WITHOUT_CLASSIFICATION	// create selection handlers
WITHOUT_CLASSIFICATION	// double-click mouse listener
WITHOUT_CLASSIFICATION	// table registers interest in tree selection events
WITHOUT_CLASSIFICATION	// Register F2 hotkey for renaming folder when the message panel has // focus
WITHOUT_CLASSIFICATION	// Register F2 hotkey for renaming folder when the folder tree itself // has focus
WITHOUT_CLASSIFICATION	// Register Alt-Up hotkey for moving up folder when folder tree or // table have focus
WITHOUT_CLASSIFICATION	// Register Alt-Down hotkey for moving up folder when folder tree or // table have focus
WITHOUT_CLASSIFICATION	// public JComponent getContentPane() { // JComponent c = super.getContentPane(); // // // // return c; // }
WITHOUT_CLASSIFICATION	// public IContentPane getContentPane() { // return this; // }
WITHOUT_CLASSIFICATION	// tree selection event
WITHOUT_CLASSIFICATION	// view headerlist in message list viewer
WITHOUT_CLASSIFICATION	// update frame title
WITHOUT_CLASSIFICATION	// show message content
WITHOUT_CLASSIFICATION	// update message list view title
WITHOUT_CLASSIFICATION	// simply demonstration of how to change the docking title
WITHOUT_CLASSIFICATION	// get selected row
WITHOUT_CLASSIFICATION	// get message node at selected row
WITHOUT_CLASSIFICATION	// is the message marked as draft ?
WITHOUT_CLASSIFICATION	// edit message in composer
WITHOUT_CLASSIFICATION	// open message in new message-frame
WITHOUT_CLASSIFICATION	// select node
WITHOUT_CLASSIFICATION	// folder-based configuration
WITHOUT_CLASSIFICATION	// mail folder tree
WITHOUT_CLASSIFICATION	// message list
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// small icon for menu
WITHOUT_CLASSIFICATION	// short cut key
WITHOUT_CLASSIFICATION	// add contact to addressbook
WITHOUT_CLASSIFICATION	// apply model
WITHOUT_CLASSIFICATION	// Which Bodypart shall be shown? (html/plain)
WITHOUT_CLASSIFICATION	//		TagList tagList = new MailTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	// fire in EDT
WITHOUT_CLASSIFICATION	// needs to be private so that subclasses won't forget calling // fireCharsetChanged
WITHOUT_CLASSIFICATION	//splitPane.setDividerSize(1); //setDividerSize(5);
WITHOUT_CLASSIFICATION	// this has to be set by themes //setDividerSize( 5 );
WITHOUT_CLASSIFICATION	// bottom.add(c, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	// if necessary decrypt/verify message
WITHOUT_CLASSIFICATION	// map to new reference
WITHOUT_CLASSIFICATION	// notify all interested listeners
WITHOUT_CLASSIFICATION	// exit immediately
WITHOUT_CLASSIFICATION	// create Address from URL
WITHOUT_CLASSIFICATION	// copy selected URL to clipboard as string
WITHOUT_CLASSIFICATION	// putValue(LARGE_ICON, ImageLoader.getIcon(IconKeys.FOLDER_OPEN));
WITHOUT_CLASSIFICATION	// putValue(LARGE_ICON, ImageLoader.getSmallIcon(IconKeys.FOLDER_OPEN));
WITHOUT_CLASSIFICATION	// some server have a bogus apop // try user/pass to check if the password is // correct
WITHOUT_CLASSIFICATION	// create empty value
WITHOUT_CLASSIFICATION	// create identity value
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// putValue(LARGE_ICON, ImageLoader.getIcon(IconKeys.DOCUMENT_SAVE_AS));
WITHOUT_CLASSIFICATION	// this has to be set by themes //splitPane.setDividerSize( 5 );
WITHOUT_CLASSIFICATION	//splitPane.resetToPreferredSizes(); //hideAttachmentViewer();
WITHOUT_CLASSIFICATION	// JPanel bottom = new JPanel(); // bottom.setBackground(backgroundColor); // // bottom.setLayout(new BorderLayout());
WITHOUT_CLASSIFICATION	// ensure that there is an HTML part in the email, otherwise JTextPanel // throws a RuntimeException
WITHOUT_CLASSIFICATION	// login and get # of messages on server
WITHOUT_CLASSIFICATION	// show selected message
WITHOUT_CLASSIFICATION	// clear message viewer
WITHOUT_CLASSIFICATION	// Update only if the selection did not change
WITHOUT_CLASSIFICATION	// display changes
WITHOUT_CLASSIFICATION	// create message value
WITHOUT_CLASSIFICATION	// set value
WITHOUT_CLASSIFICATION	// get command reference
WITHOUT_CLASSIFICATION	// get selected message UID
WITHOUT_CLASSIFICATION	// get flags
WITHOUT_CLASSIFICATION	// get messagecontroller of frame
WITHOUT_CLASSIFICATION	// fill semantic context
WITHOUT_CLASSIFICATION	// Synchronize the complete folder
WITHOUT_CLASSIFICATION	// from email address
WITHOUT_CLASSIFICATION	// old command-specific selection
WITHOUT_CLASSIFICATION	// new selection
WITHOUT_CLASSIFICATION	// abort if nothing selected
WITHOUT_CLASSIFICATION	// if attachment can't be opened, save it only
WITHOUT_CLASSIFICATION	// wrap with observable stream for progress bar updates
WITHOUT_CLASSIFICATION	// write to temporary file
WITHOUT_CLASSIFICATION	// substitute special characters like: // <,>,&,\t,\n
WITHOUT_CLASSIFICATION	// cancel command execution/updateGUI methods, if folder or message // selection // has been modified
WITHOUT_CLASSIFICATION	// in case no attachment handler was executed correctly // -> fall back to default handler
WITHOUT_CLASSIFICATION	// rename "*.part" file to destination file
WITHOUT_CLASSIFICATION	// reset progress bar
WITHOUT_CLASSIFICATION	// decode filename
WITHOUT_CLASSIFICATION	// add message to temporary folder
WITHOUT_CLASSIFICATION	// create reference to this message
WITHOUT_CLASSIFICATION	// this is needed to be able to open attachments of the decrypted // message
WITHOUT_CLASSIFICATION	//messageController.setAttachmentSelectionReference(local);
WITHOUT_CLASSIFICATION	// Check if the message still exists // or has been moved by e.g. a filter
WITHOUT_CLASSIFICATION	// the second child must be the encrypted message
WITHOUT_CLASSIFICATION	// return null;
WITHOUT_CLASSIFICATION	// just show the encrypted raw message
WITHOUT_CLASSIFICATION	// if the pgp mode is active we should get the decrypted part
WITHOUT_CLASSIFICATION	// check if the returned String is has a length != 0
WITHOUT_CLASSIFICATION	// else we set the body to the i18n String
WITHOUT_CLASSIFICATION	// construct new Message from decrypted string
WITHOUT_CLASSIFICATION	// call AbstractFilter to do the tricky part
WITHOUT_CLASSIFICATION	// header = (ColumbaHeader) message.getHeaderInterface();
WITHOUT_CLASSIFICATION	// the first child must be the signed part
WITHOUT_CLASSIFICATION	// the second child must be the pgp-signature
WITHOUT_CLASSIFICATION	/* * * make quotes font-color darkgray * */
WITHOUT_CLASSIFICATION	//layoutComponents(isSpam);
WITHOUT_CLASSIFICATION	// only show view if message is marked as spam
WITHOUT_CLASSIFICATION	// get selected message
WITHOUT_CLASSIFICATION	// mark as not spam
WITHOUT_CLASSIFICATION	// pass command to scheduler
WITHOUT_CLASSIFICATION	// register as configuration change listener
WITHOUT_CLASSIFICATION	// encapsulate bodytext in html-code
WITHOUT_CLASSIFICATION	// register for configuration changes
WITHOUT_CLASSIFICATION	// register interest on configuratin changes
WITHOUT_CLASSIFICATION	// parse for urls and substite with HTML-code
WITHOUT_CLASSIFICATION	// parse for email addresses and substite with HTML-code
WITHOUT_CLASSIFICATION	// parse for quotings and color the darkgray
WITHOUT_CLASSIFICATION	// add smilies
WITHOUT_CLASSIFICATION	/*	 * 	 * encapsulate bodytext in HTML code	 * 	 */
WITHOUT_CLASSIFICATION	// prepend
WITHOUT_CLASSIFICATION	// append
WITHOUT_CLASSIFICATION	// default encoding is plain
WITHOUT_CLASSIFICATION	// ((CharsetOwnerInterface) mediator).setCharset(charset);
WITHOUT_CLASSIFICATION	// updateBackground();
WITHOUT_CLASSIFICATION	// set double-click action for attachment viewer
WITHOUT_CLASSIFICATION	// Display resulting MimeParts
WITHOUT_CLASSIFICATION	// Get Text for Icon
WITHOUT_CLASSIFICATION	// Get Tooltip for Icon
WITHOUT_CLASSIFICATION	// definition of a second
WITHOUT_CLASSIFICATION	// timer to use
WITHOUT_CLASSIFICATION	// Singleton
WITHOUT_CLASSIFICATION	// listen for configuration changes
WITHOUT_CLASSIFICATION	// get interval value
WITHOUT_CLASSIFICATION	// stylesheet is created dynamically because // user configurable fonts are used
WITHOUT_CLASSIFICATION	// enable/disable smilies configuration
WITHOUT_CLASSIFICATION	// name of font
WITHOUT_CLASSIFICATION	// Shall we use the HTML-IViewer?
WITHOUT_CLASSIFICATION	// Which Charset shall we use ?
WITHOUT_CLASSIFICATION	// Read Stream in String
WITHOUT_CLASSIFICATION	// strip HTML message -> remove all HTML tags
WITHOUT_CLASSIFICATION	// this is a HTML message
WITHOUT_CLASSIFICATION	// Download any CIDs in the html mail
WITHOUT_CLASSIFICATION	// FocusManager.getInstance().updateActions();
WITHOUT_CLASSIFICATION	// default
WITHOUT_CLASSIFICATION	// apply model
WITHOUT_CLASSIFICATION	// get inbox-folder from pop3-server preferences
WITHOUT_CLASSIFICATION	// XmlElement selectedBrowser = // messageviewer.getElement(OptionsItem.SELECTED_BROWSER); // selectedBrowser.addObserver(this);
WITHOUT_CLASSIFICATION	// this is a text/plain message
WITHOUT_CLASSIFICATION	// setText(body);
WITHOUT_CLASSIFICATION	// remove old renderer
WITHOUT_CLASSIFICATION	// init new renderer
WITHOUT_CLASSIFICATION	// add new renderer
WITHOUT_CLASSIFICATION	// open composer
WITHOUT_CLASSIFICATION	// final URL url = extractURL(ev);
WITHOUT_CLASSIFICATION	// open context-menu // -> this has to happen in the awt-event dispatcher thread
WITHOUT_CLASSIFICATION	// builder.setDefaultButtonBarGapBorder();
WITHOUT_CLASSIFICATION	// TODO i18n "Close" button
WITHOUT_CLASSIFICATION	// TODO i18n "Help" button
WITHOUT_CLASSIFICATION	// scale image
WITHOUT_CLASSIFICATION	// convert special characters
WITHOUT_CLASSIFICATION	// buf.append("<b>" + title + "</b><br>");
WITHOUT_CLASSIFICATION	// contains headerfields which are to be displayed
WITHOUT_CLASSIFICATION	// TODO (@author fdietz): this should be changed into a "real" window
WITHOUT_CLASSIFICATION	// top.setBackground(UIManager.getColor("TextField.background"));
WITHOUT_CLASSIFICATION	// add headerfields which are about to show up
WITHOUT_CLASSIFICATION	// get header from folder
WITHOUT_CLASSIFICATION	// get header from folder
WITHOUT_CLASSIFICATION	// transform headers if necessary
WITHOUT_CLASSIFICATION	// transform headers if necessary
WITHOUT_CLASSIFICATION	// transform headers if necessary
WITHOUT_CLASSIFICATION	// custom headers
WITHOUT_CLASSIFICATION	// TODO i18n "attachments" label
WITHOUT_CLASSIFICATION	// Display resulting MimeParts
WITHOUT_CLASSIFICATION	// Get Text for Icon
WITHOUT_CLASSIFICATION	// Get Tooltip for Icon
WITHOUT_CLASSIFICATION	// builder.setDefaultButtonBarGapBorder();
WITHOUT_CLASSIFICATION	// TODO i18n "Close" button
WITHOUT_CLASSIFICATION	// TODO i18n "Help" button
WITHOUT_CLASSIFICATION	// scale image
WITHOUT_CLASSIFICATION	// setBackground(UIManager.getColor("TextField.background"));
WITHOUT_CLASSIFICATION	// substitute special characters like: // <,>,&,\t,\n,"
WITHOUT_CLASSIFICATION	// remove body part if already shown in text viewer
WITHOUT_CLASSIFICATION	// // create a view more button, responsible for // // opening the attachment viewer popup // JButton moreButton = createAttachmentMoreButton();
WITHOUT_CLASSIFICATION	// vector.add(moreButton);
WITHOUT_CLASSIFICATION	// button.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));
WITHOUT_CLASSIFICATION	// Remove the BodyPart(s) if any
WITHOUT_CLASSIFICATION	// message doesn't contain this headerfield
WITHOUT_CLASSIFICATION	// headerfield is empty
WITHOUT_CLASSIFICATION	// substitute special characters like: // <,>,&,\t,\n,"
WITHOUT_CLASSIFICATION	// substitute special characters like: // <,>,&,\t,\n,"
WITHOUT_CLASSIFICATION	// create search folder
WITHOUT_CLASSIFICATION	// button.setOpaque(false);
WITHOUT_CLASSIFICATION	// button.addMouseListener(new LinkMouseListener());
WITHOUT_CLASSIFICATION	// check if a single entry is selected
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// setPreferredSize(list.getPreferredSize());
WITHOUT_CLASSIFICATION	// Get all MimeParts
WITHOUT_CLASSIFICATION	// Remove the BodyPart(s) if any
WITHOUT_CLASSIFICATION	// create search folder
WITHOUT_CLASSIFICATION	// Color backgroundColor = // UIManager.getColor("TextField.background");
WITHOUT_CLASSIFICATION	// button.addMouseListener(new LabelMouseListener());
WITHOUT_CLASSIFICATION	// If the same message is still shown // Mark it as read
WITHOUT_CLASSIFICATION	// pass it along to parent frame
WITHOUT_CLASSIFICATION	//	public JComponent getComponent() { //		JPanel panel = new JPanel(); //		panel.setLayout(new BorderLayout()); // //		panel.add(messageController, BorderLayout.CENTER); // //		 // //		return panel; //	}
WITHOUT_CLASSIFICATION	//super.dock(messageViewerDockable, IDock.REGION.CENTER);
WITHOUT_CLASSIFICATION	// Current column whose tooltip is being displayed. // This variable is used to minimize the calls to setToolTipText().
WITHOUT_CLASSIFICATION	// Maps TableColumn objects to tooltips
WITHOUT_CLASSIFICATION	// If tooltip is null, removes any tooltip text.
WITHOUT_CLASSIFICATION	// Return if not clicked on any column header
WITHOUT_CLASSIFICATION	// copy
WITHOUT_CLASSIFICATION	// UnsupportedFlavorException, IOException
WITHOUT_CLASSIFICATION	/*		 * AbstractMessageFolder destFolder = (AbstractMessageFolder) treeView		 * .getDropTargetFolder();		 */
WITHOUT_CLASSIFICATION	// move
WITHOUT_CLASSIFICATION	// load plugin handler used for the columns
WITHOUT_CLASSIFICATION	// disable subject column renderer, use tree-cellrenderer instead
WITHOUT_CLASSIFICATION	// tc.setCellEditor(new CustomTreeTableCellEditor());
WITHOUT_CLASSIFICATION	// change subject column renderer back to default
WITHOUT_CLASSIFICATION	// set name of column
WITHOUT_CLASSIFICATION	// no specific renderer found // -> use default renderer
WITHOUT_CLASSIFICATION	// Logging.log.info("setting size =" + size);
WITHOUT_CLASSIFICATION	// if there are entries in the table
WITHOUT_CLASSIFICATION	// if there are entries in the table
WITHOUT_CLASSIFICATION	// changing the selection to the first row
WITHOUT_CLASSIFICATION	// getting the node
WITHOUT_CLASSIFICATION	// getting the node
WITHOUT_CLASSIFICATION	// and getting the uid for this node
WITHOUT_CLASSIFICATION	// scrolling to the first row
WITHOUT_CLASSIFICATION	// scrolling to the first row
WITHOUT_CLASSIFICATION	//			 @author: fdietz never request focus //requestFocus();
WITHOUT_CLASSIFICATION	// expand all rows
WITHOUT_CLASSIFICATION	// select all rows
WITHOUT_CLASSIFICATION	//		 @author: fdietz never request focus //requestFocus();
WITHOUT_CLASSIFICATION	/*			 * // scrolling to the first row			 * scrollRectToVisible(getCellRect(row, 0, false)); requestFocus();			 */
WITHOUT_CLASSIFICATION	// don't clear selection
WITHOUT_CLASSIFICATION	// init table model
WITHOUT_CLASSIFICATION	// init threaded-view model
WITHOUT_CLASSIFICATION	// init sorting model
WITHOUT_CLASSIFICATION	// init view
WITHOUT_CLASSIFICATION	// pass tree to model, used by the threaded-view
WITHOUT_CLASSIFICATION	// clear model
WITHOUT_CLASSIFICATION	// register interest on folder events
WITHOUT_CLASSIFICATION	// Assign a tooltip for each of the columns
WITHOUT_CLASSIFICATION	// column IDs are all lower case
WITHOUT_CLASSIFICATION	// append "_tooltip"
WITHOUT_CLASSIFICATION	// get translation
WITHOUT_CLASSIFICATION	// selected rows before updating the model // -> used later to restore the selection
WITHOUT_CLASSIFICATION	// folder in which the update occurs
WITHOUT_CLASSIFICATION	// get current selection
WITHOUT_CLASSIFICATION	// update infopanel (gray panel below the toolbar) // showing total/unread/recent messages count
WITHOUT_CLASSIFICATION	// only update table if, this folder is the same // as the currently selected
WITHOUT_CLASSIFICATION	// when marking messages, don't touch selection
WITHOUT_CLASSIFICATION	// re-select previous selection
WITHOUT_CLASSIFICATION	// only re-select if only a single row was formerly selected
WITHOUT_CLASSIFICATION	// if message was removed from JTable
WITHOUT_CLASSIFICATION	// select row
WITHOUT_CLASSIFICATION	// save previously selected folder options
WITHOUT_CLASSIFICATION	// load options of newly selected folder
WITHOUT_CLASSIFICATION	// remember previously selected folder
WITHOUT_CLASSIFICATION	// enable/disable cut/copy/paste/selectall actions // FocusManager.getInstance().updateActions();
WITHOUT_CLASSIFICATION	// if user is currently changing selection, don't do anything // -> wait until the final selection is available
WITHOUT_CLASSIFICATION	// selected nodes
WITHOUT_CLASSIFICATION	// expand all unread message nodes
WITHOUT_CLASSIFICATION	// remove all columns from table model
WITHOUT_CLASSIFICATION	// reset row height
WITHOUT_CLASSIFICATION	// remove all columns for column model
WITHOUT_CLASSIFICATION	// if new columns were added, we have to initialize the tooltips
WITHOUT_CLASSIFICATION	// remember selected node
WITHOUT_CLASSIFICATION	// repaint table header
WITHOUT_CLASSIFICATION	// clear messagenode cache
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// notify observers (sorting state submenu)
WITHOUT_CLASSIFICATION	//setEnabled(false);
WITHOUT_CLASSIFICATION	// remember selected node
WITHOUT_CLASSIFICATION	// for some weird reason the table loses its inter-cell spacing // property, when changing the underlying column model // -> setting this to (0,0) again
WITHOUT_CLASSIFICATION	// int column = view.convertColumnIndexToModel(viewColumn); // int column2 = view.convertColumnIndexToView(viewColumn);
WITHOUT_CLASSIFICATION	// disable every icon // -> set appropriate icon for selected column
WITHOUT_CLASSIFICATION	// disable every icon // -> set appropriate icon for selected column
WITHOUT_CLASSIFICATION	// repaint table header
WITHOUT_CLASSIFICATION	// notify the model to sort the table // sorter.sort(column);
WITHOUT_CLASSIFICATION	// notify the model to sort the table // sorter.sort(column);
WITHOUT_CLASSIFICATION	// make selected row visible again
WITHOUT_CLASSIFICATION	// make selected row visible again
WITHOUT_CLASSIFICATION	//      putValue(LARGE_ICON, ImageLoader.getImageIcon("reply_small.png"));
WITHOUT_CLASSIFICATION	//    shortcut key
WITHOUT_CLASSIFICATION	// getting last selection
WITHOUT_CLASSIFICATION	// getting current uid
WITHOUT_CLASSIFICATION	// getting current node (under the selection)
WITHOUT_CLASSIFICATION	// getting next node
WITHOUT_CLASSIFICATION	// getting from the next node the uid
WITHOUT_CLASSIFICATION	// and set this to the actual ref
WITHOUT_CLASSIFICATION	// check if the node is not null
WITHOUT_CLASSIFICATION	// if the node is not null
WITHOUT_CLASSIFICATION	// select it
WITHOUT_CLASSIFICATION	// saving the last selection for the current folder
WITHOUT_CLASSIFICATION	// view the message under the new node
WITHOUT_CLASSIFICATION	/*		 * ((MailFrameMediator)		 * frameMediator).registerTableSelectionListener(this);		 */
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// toolbar text
WITHOUT_CLASSIFICATION	// toolbar text
WITHOUT_CLASSIFICATION	// getting last selection
WITHOUT_CLASSIFICATION	// getting current uid
WITHOUT_CLASSIFICATION	// getting current node (under the selection)
WITHOUT_CLASSIFICATION	// check if the node is not null
WITHOUT_CLASSIFICATION	// if the node is not null
WITHOUT_CLASSIFICATION	// select it
WITHOUT_CLASSIFICATION	// saving the last selection for the current folder
WITHOUT_CLASSIFICATION	// view the message under the new node
WITHOUT_CLASSIFICATION	//		 necessary for the message-frame only
WITHOUT_CLASSIFICATION	//		 select message in message list
WITHOUT_CLASSIFICATION	// clear message list
WITHOUT_CLASSIFICATION	// clear message-list selection
WITHOUT_CLASSIFICATION	// clear message-viewer
WITHOUT_CLASSIFICATION	// get selected stuff
WITHOUT_CLASSIFICATION	// get selected stuff
WITHOUT_CLASSIFICATION	// add command for execution
WITHOUT_CLASSIFICATION	// add command for execution
WITHOUT_CLASSIFICATION	// icon for menu
WITHOUT_CLASSIFICATION	// icon for toolbar
WITHOUT_CLASSIFICATION	//      shortcut key
WITHOUT_CLASSIFICATION	// set toolbar text
WITHOUT_CLASSIFICATION	// getting prev node
WITHOUT_CLASSIFICATION	// create new search folder, but re-use old search folder
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// get selected stuff
WITHOUT_CLASSIFICATION	// get selected stuff
WITHOUT_CLASSIFICATION	// add command for execution
WITHOUT_CLASSIFICATION	// add command for execution
WITHOUT_CLASSIFICATION	// do the search
WITHOUT_CLASSIFICATION	//mod: 20040629 SWITT
WITHOUT_CLASSIFICATION	// toolbar text is usually a bit shorter ;mod: 20040629 SWITT
WITHOUT_CLASSIFICATION	// tooltip text ;mod: 20040629 SWITT
WITHOUT_CLASSIFICATION	// icons ;mod: 20040629 SWITT
WITHOUT_CLASSIFICATION	/*        putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("redirect_small.png"));        putValue(LARGE_ICON, ImageLoader.getImageIcon("redirect.png"));        */
WITHOUT_CLASSIFICATION	// shortcut key is STRG-E ;mod: 20040629 SWITT
WITHOUT_CLASSIFICATION	// icons //        putValue(SMALL_ICON, //            MailImageLoader.getIcon("email_edit.png")); //        putValue(LARGE_ICON, MailImageLoader.getIcon("email_edit.png"));
WITHOUT_CLASSIFICATION	//		 putValue(SMALL_ICON, //		            MailImageLoader.getIcon("email_open.png"));
WITHOUT_CLASSIFICATION	/*		 * folder.getConfiguration().set("property", "enable_threaded_view",		 * enableThreadedView);		 */
WITHOUT_CLASSIFICATION	// get current message list selection
WITHOUT_CLASSIFICATION	// pass command to scheduler
WITHOUT_CLASSIFICATION	// pass command to scheduler
WITHOUT_CLASSIFICATION	// which menuitem was selected?
WITHOUT_CLASSIFICATION	// add color selection to reference
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// toolbar text
WITHOUT_CLASSIFICATION	//setEnabled(false);
WITHOUT_CLASSIFICATION	// listen for configuration changes
WITHOUT_CLASSIFICATION	// uncomment to enable action
WITHOUT_CLASSIFICATION	/*		 * ((MailFrameMediator)		 * frameMediator).registerTableSelectionListener(this);		 */
WITHOUT_CLASSIFICATION	//		 necessary for the message-frame only
WITHOUT_CLASSIFICATION	//		 select message in message list
WITHOUT_CLASSIFICATION	// icon for menu
WITHOUT_CLASSIFICATION	// icon for menu
WITHOUT_CLASSIFICATION	// icon for toolbar
WITHOUT_CLASSIFICATION	// icon for toolbar
WITHOUT_CLASSIFICATION	// get current message list selection
WITHOUT_CLASSIFICATION	// shortcut key //putValue(ACCELERATOR_KEY, // KeyStroke.getKeyStroke(KeyEvent.VK_BRACELEFT, 0));
WITHOUT_CLASSIFICATION	// remove color //			add color selection to reference
WITHOUT_CLASSIFICATION	// remember search folder for "show total results" action
WITHOUT_CLASSIFICATION	// register as Observer
WITHOUT_CLASSIFICATION	// createSubMenu();
WITHOUT_CLASSIFICATION	// *20040510, karlpeder* columns may be null (first time we visit a // folder!?)
WITHOUT_CLASSIFICATION	// all headerfields are lowercase in property file
WITHOUT_CLASSIFICATION	// update(observable, null);
WITHOUT_CLASSIFICATION	// update(observable, null);
WITHOUT_CLASSIFICATION	// *20040510, karlpeder* columns may be null (first time we // visit a folder!?) // IDefaultItem item = new DefaultItem(xmlElement);
WITHOUT_CLASSIFICATION	// Mark the messages as deleted
WITHOUT_CLASSIFICATION	// -> move messages to trash
WITHOUT_CLASSIFICATION	// close window
WITHOUT_CLASSIFICATION	// toolbar text is usually a bit shorter
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// disable toolbar text
WITHOUT_CLASSIFICATION	// get original folder
WITHOUT_CLASSIFICATION	// should be virtual
WITHOUT_CLASSIFICATION	//setEnabled(false);
WITHOUT_CLASSIFICATION	// uncomment to enable action
WITHOUT_CLASSIFICATION	/*		 * ((MailFrameMediator)		 * frameMediator).registerTableSelectionListener(this);		 */
WITHOUT_CLASSIFICATION	// get selected stuff
WITHOUT_CLASSIFICATION	// add command for execution
WITHOUT_CLASSIFICATION	//      shortcut key
WITHOUT_CLASSIFICATION	//      shortcut key
WITHOUT_CLASSIFICATION	// get current message list selection
WITHOUT_CLASSIFICATION	// get current message list selection
WITHOUT_CLASSIFICATION	// get current message list selection
WITHOUT_CLASSIFICATION	// pass command to scheduler
WITHOUT_CLASSIFICATION	//        putValue(LARGE_ICON, ImageLoader.getImageIcon("drafts-16.png"));
WITHOUT_CLASSIFICATION	// trash folder is selected // -> delete message
WITHOUT_CLASSIFICATION	// listener updates selection status, when ever a message selection changes
WITHOUT_CLASSIFICATION	// if this is a message-viewer frame viewing a message only // the window should be closed, too
WITHOUT_CLASSIFICATION	//		putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_L, //				Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
WITHOUT_CLASSIFICATION	// if all messages are tagged with tag, then return true, else false
WITHOUT_CLASSIFICATION	// necessary for the message-frame only
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	//setEnabled(false);
WITHOUT_CLASSIFICATION	// uncomment to enable action
WITHOUT_CLASSIFICATION	//		 necessary for the message-frame only
WITHOUT_CLASSIFICATION	//		 select message in message list
WITHOUT_CLASSIFICATION	// get selected stuff
WITHOUT_CLASSIFICATION	// get selected stuff
WITHOUT_CLASSIFICATION	// add command for execution
WITHOUT_CLASSIFICATION	//      shortcut key
WITHOUT_CLASSIFICATION	// toolbar text is usually a bit shorter
WITHOUT_CLASSIFICATION	// shortcut key //putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F, 0));
WITHOUT_CLASSIFICATION	// select message in message list
WITHOUT_CLASSIFICATION	// Shortcut key //putValue(ACCELERATOR_KEY, // KeyStroke.getKeyStroke(KeyEvent.VK_BRACELEFT,0));
WITHOUT_CLASSIFICATION	/*		 * ( ( AbstractMailFrameController) frameMediator)		 * .registerTableSelectionListener( this);		 */
WITHOUT_CLASSIFICATION	// *20030614, karlpeder* only enabled when message(s) selected
WITHOUT_CLASSIFICATION	// get active charset - necessary to decode msg for saving
WITHOUT_CLASSIFICATION	// view message list
WITHOUT_CLASSIFICATION	// clear message list viewer
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// Register as listener to the SelectionManger // to check for selection changes
WITHOUT_CLASSIFICATION	// Update only if the selection did not change
WITHOUT_CLASSIFICATION	// old command-specific selection
WITHOUT_CLASSIFICATION	// new selection
WITHOUT_CLASSIFICATION	// abort if nothing selected
WITHOUT_CLASSIFICATION	// add every header from HeaderList to the table as MessageNode
WITHOUT_CLASSIFICATION	// Register as SelectionListener to track the selection // of the tree
WITHOUT_CLASSIFICATION	// add array to vector
WITHOUT_CLASSIFICATION	// fetch the headerlist
WITHOUT_CLASSIFICATION	// add array to vector
WITHOUT_CLASSIFICATION	// Reset the selection
WITHOUT_CLASSIFICATION	// add this node to cache
WITHOUT_CLASSIFICATION	// cancel command execution/updateGUI methods, if folder selection // has been modified
WITHOUT_CLASSIFICATION	// update treemodel
WITHOUT_CLASSIFICATION	// get unique id
WITHOUT_CLASSIFICATION	// remove all children from tree
WITHOUT_CLASSIFICATION	// create tree structure
WITHOUT_CLASSIFICATION	// add node to tree
WITHOUT_CLASSIFICATION	// get header
WITHOUT_CLASSIFICATION	// if no Message-Id: available create bogus
WITHOUT_CLASSIFICATION	// create MessageNode
WITHOUT_CLASSIFICATION	// save every MessageNode in hashmap for later reference
WITHOUT_CLASSIFICATION	// the last element is the direct parent
WITHOUT_CLASSIFICATION	// save every message-id in hashtable for later reference
WITHOUT_CLASSIFICATION	// send from address and recipient list to SMTP server // ->all addresses have to be normalized
WITHOUT_CLASSIFICATION	// save every message in a list
WITHOUT_CLASSIFICATION	// table is empty // -> just display empty table			
WITHOUT_CLASSIFICATION	// for each element in the message-header-reference or in-reply-to // headerfield: - find a container whose message-id matches and add // message, otherwise create empty container
WITHOUT_CLASSIFICATION	// has children
WITHOUT_CLASSIFICATION	// check if there are messages marked as recent //  -> in case underline parent node
WITHOUT_CLASSIFICATION	// recent found
WITHOUT_CLASSIFICATION	//		 go through whole tree and sort the siblings after date
WITHOUT_CLASSIFICATION	// observable connects the sorting table with the sort menu (View->Sort // Messages)
WITHOUT_CLASSIFICATION	// get a list of MessageNode objects of the first // hierachy level
WITHOUT_CLASSIFICATION	// do the sorting
WITHOUT_CLASSIFICATION	//      notify tree //getRealModel().getTreeModel().nodeStructureChanged(getRootNode()); //}
WITHOUT_CLASSIFICATION	// define false < true
WITHOUT_CLASSIFICATION	// setOpaque(true); //MUST do this for background to show up.
WITHOUT_CLASSIFICATION	// setOpaque(true); //MUST do this for background to show up.
WITHOUT_CLASSIFICATION	// use local date settings
WITHOUT_CLASSIFICATION	// private Border unselectedBorder = null; // // private Border selectedBorder = null; // // private Color background; // // private Color foreground;
WITHOUT_CLASSIFICATION	// private boolean isBordered = true;
WITHOUT_CLASSIFICATION	// TreePath path = tree.getPathForRow(row);
WITHOUT_CLASSIFICATION	// mark as bold if message is unseen
WITHOUT_CLASSIFICATION	// mark as bold if message is unseen
WITHOUT_CLASSIFICATION	// p2.setBorder(BorderFactory.createEmptyBorder(0,0,2,0));
WITHOUT_CLASSIFICATION	// setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
WITHOUT_CLASSIFICATION	// setBorder(noFocusBorder);
WITHOUT_CLASSIFICATION	//setForeground( Color.red );
WITHOUT_CLASSIFICATION	//setText("!");
WITHOUT_CLASSIFICATION	//setText("!");
WITHOUT_CLASSIFICATION	//eteTextForeground( Color.blue );
WITHOUT_CLASSIFICATION	//setForeground( Color.blue );
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// create a virtual folder with all messages holding this tag
WITHOUT_CLASSIFICATION	//setForeground( Color.red ); //setText("!!");
WITHOUT_CLASSIFICATION	//setText("!!");
WITHOUT_CLASSIFICATION	// if this is set to true, we use the local selection, instead // of using the table selection
WITHOUT_CLASSIFICATION	// user is still manipulating the selection
WITHOUT_CLASSIFICATION	// no rows are selected
WITHOUT_CLASSIFICATION	// setBackground(list.getSelectionBackground()); // setForeground(list.getSelectionForeground());
WITHOUT_CLASSIFICATION	// setBackground(list.getSelectionBackground()); // setForeground(list.getSelectionForeground());
WITHOUT_CLASSIFICATION	// do not only update the tag search result when click on a different // tag, also do a refresh of the same tag when double click on it
WITHOUT_CLASSIFICATION	// if there is nothing selected return
WITHOUT_CLASSIFICATION	// create a virtual folder
WITHOUT_CLASSIFICATION	// should be a MutableTreeNode
WITHOUT_CLASSIFICATION	// skip all non-mail component items
WITHOUT_CLASSIFICATION	// ensure that we are currently in the mail component
WITHOUT_CLASSIFICATION	// select invisible virtual folder
WITHOUT_CLASSIFICATION	// update message list
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// copy
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// now instanciate the folder classes
WITHOUT_CLASSIFICATION	// get search folder
WITHOUT_CLASSIFICATION	// set source folder UID
WITHOUT_CLASSIFICATION	// UnsupportedFlavorException, IOException
WITHOUT_CLASSIFICATION	// move
WITHOUT_CLASSIFICATION	// search in subfolders recursively
WITHOUT_CLASSIFICATION	// We're always doing a MOVE // and this is handled in the exportDone method.
WITHOUT_CLASSIFICATION	/*		 * // copy CopyMessageCommand command = new CopyMessageCommand(result);		 * CommandProcessor.getInstance().addOp(command);		 */
WITHOUT_CLASSIFICATION	//setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));
WITHOUT_CLASSIFICATION	// get configuration from tree.xml file
WITHOUT_CLASSIFICATION	// expand folder
WITHOUT_CLASSIFICATION	// recursivly expand all children
WITHOUT_CLASSIFICATION	// Do nothing if we are hovering over the root node
WITHOUT_CLASSIFICATION	/*		 * view.setLeadSelectionPath(path); view.setAnchorSelectionPath(path);		 */
WITHOUT_CLASSIFICATION	// save expanded state
WITHOUT_CLASSIFICATION	// save expanded state
WITHOUT_CLASSIFICATION	// no sorting
WITHOUT_CLASSIFICATION	// safe to cast to IMailFolder here, because only those are visible to the user
WITHOUT_CLASSIFICATION	// create temporary folder in "<your-config-folder>/mail/"
WITHOUT_CLASSIFICATION	// i18n stuff
WITHOUT_CLASSIFICATION	// warn user
WITHOUT_CLASSIFICATION	// warn user in any other cases
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// icons
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// parent directory for mail folders // for example: ".columba/mail/"
WITHOUT_CLASSIFICATION	// icons //		putValue(SMALL_ICON, ImageLoader.getIcon("folder_delete.png")); //		putValue(LARGE_ICON, ImageLoader.getIcon("folder_delete.png"));
WITHOUT_CLASSIFICATION	// Note: we negate the expanded state because this is // a will-expand/collapse listener
WITHOUT_CLASSIFICATION	// register at shutdownmanager // -> when closing Columba, this will automatically save all folder data
WITHOUT_CLASSIFICATION	// icon for menu //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon("16_configure_folder.png"));
WITHOUT_CLASSIFICATION	// it is safe here to cast to AbstractMailFrameControlller
WITHOUT_CLASSIFICATION	// calculate mailbox size in background worker
WITHOUT_CLASSIFICATION	// cast to Folder
WITHOUT_CLASSIFICATION	// only use the first selected folder
WITHOUT_CLASSIFICATION	// set parent folder uid
WITHOUT_CLASSIFICATION	// ok pressed
WITHOUT_CLASSIFICATION	// ok pressed
WITHOUT_CLASSIFICATION	// open search dialog
WITHOUT_CLASSIFICATION	// cancel pressed
WITHOUT_CLASSIFICATION	// select folder again after move operation
WITHOUT_CLASSIFICATION	//  -> uncomment to enable/disable action
WITHOUT_CLASSIFICATION	/*        ((MailFrameController) frameMediator).registerTreeSelectionListener(                this);        */
WITHOUT_CLASSIFICATION	// we are done - clear status text with a delay // (if this is not done, the initial text will stay in // case no messages were sent)
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// button panel
WITHOUT_CLASSIFICATION	// create EmptyBorder between components and dialog-frame
WITHOUT_CLASSIFICATION	// init bottom panel with OK, Cancel buttons
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// shortcut key
WITHOUT_CLASSIFICATION	// select folder again after move operation
WITHOUT_CLASSIFICATION	// select node in JTree
WITHOUT_CLASSIFICATION	// implement this
WITHOUT_CLASSIFICATION	// show error message
WITHOUT_CLASSIFICATION	// icon //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon("apply-filters-16.png"));
WITHOUT_CLASSIFICATION	// BUGFIX but don't know why that bug occurs
WITHOUT_CLASSIFICATION	//Folder folder = (AbstractMessageFolder) r[0].getFolder();
WITHOUT_CLASSIFICATION	/*			 * MailInterface.treeModel.nodeStructureChanged(parentFolder);			 */
WITHOUT_CLASSIFICATION	// get global sorting state
WITHOUT_CLASSIFICATION	// try to set selection
WITHOUT_CLASSIFICATION	// layout center panel
WITHOUT_CLASSIFICATION	// apply sorting state
WITHOUT_CLASSIFICATION	// Init components
WITHOUT_CLASSIFICATION	// We have a special Command for VFolders
WITHOUT_CLASSIFICATION	// sorting is enabled
WITHOUT_CLASSIFICATION	// if the character / is found shows the user a error message
WITHOUT_CLASSIFICATION	// sorting is disabled
WITHOUT_CLASSIFICATION	/*		 * RIYAD: Even though we don't do anything with this value, what it is		 * doing is setting up the selection colors and such as implemented per		 * the default cell rendered.		 */
WITHOUT_CLASSIFICATION	// If no exception happened we have successfully logged // in
WITHOUT_CLASSIFICATION	// successfully connected and autenthenticated to SMTP server
WITHOUT_CLASSIFICATION	// ok pressed
WITHOUT_CLASSIFICATION	// cancel pressed
WITHOUT_CLASSIFICATION	// get global sorting state
WITHOUT_CLASSIFICATION	// If it isnt a message folder, then it must be a root, and those // should not be sorted.
WITHOUT_CLASSIFICATION	// If the tree is in a DND action then we dont need to update all // listeners, since this only a temporary folder selection.
WITHOUT_CLASSIFICATION	// skip the first column // builder.setLeadingColumnOffset(1); // Add components to the panel:
WITHOUT_CLASSIFICATION	// sorting is enabled
WITHOUT_CLASSIFICATION	// apply sorting state
WITHOUT_CLASSIFICATION	// sorting is disabled
WITHOUT_CLASSIFICATION	// setting default Values // setFont(plainFont); // setToolTipText("");
WITHOUT_CLASSIFICATION	// getting folder info
WITHOUT_CLASSIFICATION	// get folder item configuration
WITHOUT_CLASSIFICATION	// set tooltip text
WITHOUT_CLASSIFICATION	// set label text
WITHOUT_CLASSIFICATION	// set label text
WITHOUT_CLASSIFICATION	// name of folder
WITHOUT_CLASSIFICATION	// append unseen count to folder name
WITHOUT_CLASSIFICATION	// if IMAP selectable folder
WITHOUT_CLASSIFICATION	// if mediator contains a sortable treemodel
WITHOUT_CLASSIFICATION	// default selection is local Inbox
WITHOUT_CLASSIFICATION	// add selection listener
WITHOUT_CLASSIFICATION	// name = textField.getText();
WITHOUT_CLASSIFICATION	// Constants...
WITHOUT_CLASSIFICATION	// Member variables...
WITHOUT_CLASSIFICATION	// Set the width, height and image type
WITHOUT_CLASSIFICATION	// Create a graphics context for this buffered image
WITHOUT_CLASSIFICATION	//SystemColor.controlLtHighlight,
WITHOUT_CLASSIFICATION	// The type of DnD object being dragged...
WITHOUT_CLASSIFICATION	// Transferable interface methods...
WITHOUT_CLASSIFICATION	// DataFlavor.javaJVMLocalObjectMimeType))
WITHOUT_CLASSIFICATION	// create message
WITHOUT_CLASSIFICATION	// convert to inputstream
WITHOUT_CLASSIFICATION	// result.append(", ");
WITHOUT_CLASSIFICATION	// don't care
WITHOUT_CLASSIFICATION	// bottom.add( Box.createHorizontalGlue() );
WITHOUT_CLASSIFICATION	//bottom.add( Box.createHorizontalGlue() );
WITHOUT_CLASSIFICATION	// if IMAP selectable folder // -> lightgray font color and italic
WITHOUT_CLASSIFICATION	// draw folder name and unseen count // -> using bold font
WITHOUT_CLASSIFICATION	// append recent message count // -> using blue font
WITHOUT_CLASSIFICATION	//tstich: Someone added <html> tags here. This is not the right place!
WITHOUT_CLASSIFICATION	// only update if timestamp is equal
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getDelimiter()	 */
WITHOUT_CLASSIFICATION	// implemented for completeness. // Time-out for clearing text is ignored here.
WITHOUT_CLASSIFICATION	/*				 * case WorkerStatusChangedEvent.FINISHED : setVisible(false);				 * break;				 */
WITHOUT_CLASSIFICATION	// send cancel event to worker
WITHOUT_CLASSIFICATION	// private JFrame frame;
WITHOUT_CLASSIFICATION	// private JTextField loginTextField;
WITHOUT_CLASSIFICATION	// bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) );
WITHOUT_CLASSIFICATION	// bottom.add( Box.createHorizontalStrut());
WITHOUT_CLASSIFICATION	// JButton[] buttons = new JButton[2];
WITHOUT_CLASSIFICATION	// user = loginTextField.getText();
WITHOUT_CLASSIFICATION	// loginMethod = (String) loginMethodComboBox.getSelectedItem();
WITHOUT_CLASSIFICATION	//bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) );
WITHOUT_CLASSIFICATION	//bottom.add( Box.createHorizontalStrut());
WITHOUT_CLASSIFICATION	// create IMAP protocol
WITHOUT_CLASSIFICATION	// register interest on status updates
WITHOUT_CLASSIFICATION	// try to determine delimiter
WITHOUT_CLASSIFICATION	// open a port to the server
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// reopen the port
WITHOUT_CLASSIFICATION	// reopen the port
WITHOUT_CLASSIFICATION	// shall we switch to SSL?
WITHOUT_CLASSIFICATION	// if CAPA was not support just give it a try...
WITHOUT_CLASSIFICATION	// CAPAs say that SSL is not supported
WITHOUT_CLASSIFICATION	// Just use the default as fallback
WITHOUT_CLASSIFICATION	// LOGIN is always supported
WITHOUT_CLASSIFICATION	// private JComboBox loginMethodComboBox; // String loginMethod;
WITHOUT_CLASSIFICATION	// AUTH?
WITHOUT_CLASSIFICATION	// Used to control the state in which // the automatic updated mechanism is
WITHOUT_CLASSIFICATION	// Login loop until authenticated
WITHOUT_CLASSIFICATION	// combine them to one string
WITHOUT_CLASSIFICATION	// CAPA not supported
WITHOUT_CLASSIFICATION	// remove // the // 'AUTH='
WITHOUT_CLASSIFICATION	// Show the password dialog
WITHOUT_CLASSIFICATION	// On the first try check if we need to show the password dialog // -> not necessary when password was stored
WITHOUT_CLASSIFICATION	// Try to get Password from Configuration
WITHOUT_CLASSIFICATION	// ensure that we are logged in already
WITHOUT_CLASSIFICATION	// User cancelled authentication
WITHOUT_CLASSIFICATION	// User pressed OK
WITHOUT_CLASSIFICATION	// AUTH
WITHOUT_CLASSIFICATION	// Save or Clear the password in the configuration
WITHOUT_CLASSIFICATION	// From this point we have a username and password // from configuration of from the dialog
WITHOUT_CLASSIFICATION	// Convert to a MailboxStatus
WITHOUT_CLASSIFICATION	// login failed?
WITHOUT_CLASSIFICATION	// Here we get the new mailboxinfo for the folder
WITHOUT_CLASSIFICATION	// if mailbox is not already selected select it
WITHOUT_CLASSIFICATION	// Set the readOnly flag
WITHOUT_CLASSIFICATION	// delete any cached information
WITHOUT_CLASSIFICATION	// if none selected select this folder instead of getting the status
WITHOUT_CLASSIFICATION	// No response means zero!
WITHOUT_CLASSIFICATION	// make sure we are already logged in
WITHOUT_CLASSIFICATION	// -> get source reference of message // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// make sure we are already logged in
WITHOUT_CLASSIFICATION	// close the mailbox if it is selected
WITHOUT_CLASSIFICATION	// make sure we are logged in
WITHOUT_CLASSIFICATION	// concate the full name of the new mailbox
WITHOUT_CLASSIFICATION	// check if the mailbox already exists -> subscribe only
WITHOUT_CLASSIFICATION	// set the attachment flag
WITHOUT_CLASSIFICATION	// If no exception happened we have successfully logged // in
WITHOUT_CLASSIFICATION	// load database from file
WITHOUT_CLASSIFICATION	// If the cause is a IMAPExcpetion then only password // wrong // else bogus authentication mechanism
WITHOUT_CLASSIFICATION	// We don't need to issue a additional NOOP // here since the ensureLogin() call above // ensures also the correct Status in a // MIN_IDLE interval timeframe.
WITHOUT_CLASSIFICATION	// Some error in the client/server communication // --> fall back to default login process
WITHOUT_CLASSIFICATION	// make sure we are already logged in
WITHOUT_CLASSIFICATION	// This exception is not because wrong username or // password
WITHOUT_CLASSIFICATION	// make sure we are already logged in
WITHOUT_CLASSIFICATION	// Sync subscribed folders if this is the first login // in this session
WITHOUT_CLASSIFICATION	// make sure we are already logged in
WITHOUT_CLASSIFICATION	// make sure we are already logged in
WITHOUT_CLASSIFICATION	// subscribe to the new mailbox
WITHOUT_CLASSIFICATION	// create the mailbox on the server
WITHOUT_CLASSIFICATION	// divide in packs
WITHOUT_CLASSIFICATION	// the UIDS start UIDNext till UIDNext + uids.length
WITHOUT_CLASSIFICATION	// make sure this mailbox is selected
WITHOUT_CLASSIFICATION	// update the progress
WITHOUT_CLASSIFICATION	// update the progress
WITHOUT_CLASSIFICATION	// update the progress
WITHOUT_CLASSIFICATION	// update the progress
WITHOUT_CLASSIFICATION	// dont forget the rest
WITHOUT_CLASSIFICATION	// store the intermediate results in a list
WITHOUT_CLASSIFICATION	// get list of user-defined headerfields
WITHOUT_CLASSIFICATION	// Combine the results in one array
WITHOUT_CLASSIFICATION	// add it to the headerlist
WITHOUT_CLASSIFICATION	// make sure that we have a Message-ID
WITHOUT_CLASSIFICATION	// One or many arguments?
WITHOUT_CLASSIFICATION	// Entry does not exist on server // -> add nothing
WITHOUT_CLASSIFICATION	// Now the state of the procotol is more certain correct
WITHOUT_CLASSIFICATION	// One is the easiest case
WITHOUT_CLASSIFICATION	// update this point of time as last communication // since every functio calls this before communicating with // the server
WITHOUT_CLASSIFICATION	// AFTER
WITHOUT_CLASSIFICATION	// Use a caching mechanism for this
WITHOUT_CLASSIFICATION	// AND or OR ? -> AND is implicit, OR must be specified
WITHOUT_CLASSIFICATION	// something else is wrong
WITHOUT_CLASSIFICATION	// should never happen
WITHOUT_CLASSIFICATION	// non-ascii
WITHOUT_CLASSIFICATION	// AND : simply create a list of arguments
WITHOUT_CLASSIFICATION	// OR : the arguments must be glued by a OR SearchKey
WITHOUT_CLASSIFICATION	// Also set the delimiter
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// contains not
WITHOUT_CLASSIFICATION	// split key/value pairs
WITHOUT_CLASSIFICATION	// Show first time Account Wizard
WITHOUT_CLASSIFICATION	// get inputstream of message body
WITHOUT_CLASSIFICATION	// account ID
WITHOUT_CLASSIFICATION	// account ID
WITHOUT_CLASSIFICATION	// restart timer
WITHOUT_CLASSIFICATION	// remove all items
WITHOUT_CLASSIFICATION	// If this also does not work // -> fall back to no charset specified
WITHOUT_CLASSIFICATION	// recreate menu
WITHOUT_CLASSIFICATION	// calculate rest
WITHOUT_CLASSIFICATION	// offline -> go online
WITHOUT_CLASSIFICATION	//private POP3ServerCollection popServer;
WITHOUT_CLASSIFICATION	// get list of all accounts
WITHOUT_CLASSIFICATION	// register interest on account changes
WITHOUT_CLASSIFICATION	// menuitem/toolbar button action
WITHOUT_CLASSIFICATION	// for each account that is enabled and in the fetchalllist
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// for each account
WITHOUT_CLASSIFICATION	// for each account
WITHOUT_CLASSIFICATION	// system peep on new messages 
WITHOUT_CLASSIFICATION	//system beep
WITHOUT_CLASSIFICATION	// found matching account
WITHOUT_CLASSIFICATION	// remove whitespaces
WITHOUT_CLASSIFICATION	// remove this account
WITHOUT_CLASSIFICATION	//	generate label for menuitem
WITHOUT_CLASSIFICATION	//  check if we are online
WITHOUT_CLASSIFICATION	// new message
WITHOUT_CLASSIFICATION	// recreate name of menuitem
WITHOUT_CLASSIFICATION	// timer action
WITHOUT_CLASSIFICATION	// only do checking if we are in online state
WITHOUT_CLASSIFICATION	// found new message
WITHOUT_CLASSIFICATION	// remove whitespaces
WITHOUT_CLASSIFICATION	// Check Internet Connection
WITHOUT_CLASSIFICATION	// check if the optional value exists
WITHOUT_CLASSIFICATION	//uid = o;
WITHOUT_CLASSIFICATION	// new NewMessageAction().actionPerformed(null);
WITHOUT_CLASSIFICATION	// Activate all Virtual Folders
WITHOUT_CLASSIFICATION	// Check default mail client
WITHOUT_CLASSIFICATION	// We save only the first item in the cc-list
WITHOUT_CLASSIFICATION	// remove leading or trailing whitespaces
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// skip
WITHOUT_CLASSIFICATION	// Check if Columba is the default mail client
WITHOUT_CLASSIFICATION	// message colour should be black as default
WITHOUT_CLASSIFICATION	// Copy the commandline from the client info to the Classes mailto entry
WITHOUT_CLASSIFICATION	// We save only the first item in the to-list
WITHOUT_CLASSIFICATION	// use default account
WITHOUT_CLASSIFICATION	// Remote double-quotes
WITHOUT_CLASSIFICATION	// Create a emtpy header an back off
WITHOUT_CLASSIFICATION	// Create a emtpy header an back off
WITHOUT_CLASSIFICATION	// Remove the ending separator and whitespace, if any exist
WITHOUT_CLASSIFICATION	// do the parsing
WITHOUT_CLASSIFICATION	// the next token is an token with the whole Mailaddress
WITHOUT_CLASSIFICATION	// Remove the double-quote characters from around the addresses in the string 
WITHOUT_CLASSIFICATION	// If address contains a comma, enclose the display name portion in double-quotes
WITHOUT_CLASSIFICATION	// Convert to MessageOptions
WITHOUT_CLASSIFICATION	// found contact item in contact component
WITHOUT_CLASSIFICATION	// check if its a group item
WITHOUT_CLASSIFICATION	// the first token is irrelevant
WITHOUT_CLASSIFICATION	// The Stream finished before the header was completely // read!
WITHOUT_CLASSIFICATION	// just look if the first character alrady an < // so can use this mailaddress as the correct address
WITHOUT_CLASSIFICATION	// due to bug CA-174 changed: return EMAIL_PATTERN.matcher(s).replaceAll("<A HREF=\"mailto:$1\">$1</A>");
WITHOUT_CLASSIFICATION	/*             \\b  Start at word boundary         ((\\w*(:\\S*)?@)?  [user:[pass]]@ - Constructprot + "://  protocol and ://       ["+any+"]  match literaly anything...         ) (?=\\s|$)  ...until we find whitespace or end of String*/
WITHOUT_CLASSIFICATION	// The form of the entities must be a regexp!
WITHOUT_CLASSIFICATION	// initial check of input:
WITHOUT_CLASSIFICATION	// initial check of input:
WITHOUT_CLASSIFICATION	// remove header
WITHOUT_CLASSIFICATION	// remove extra whitespace
WITHOUT_CLASSIFICATION	// replace br, p and heading tags with newlines
WITHOUT_CLASSIFICATION	// strip remaining tags
WITHOUT_CLASSIFICATION	// tag stripping can leave some double spaces at line beginnings
WITHOUT_CLASSIFICATION	// replace <br> and </br> with newline
WITHOUT_CLASSIFICATION	// replace </p> with double newline
WITHOUT_CLASSIFICATION	// strip tags
WITHOUT_CLASSIFICATION	//First replace all special entities
WITHOUT_CLASSIFICATION	//replace the other entities
WITHOUT_CLASSIFICATION	//Convert 4 WS in a row to a tab
WITHOUT_CLASSIFICATION	// stripHtmlTags called with true ~ p & br => newlines
WITHOUT_CLASSIFICATION	// insert surrounding html tags
WITHOUT_CLASSIFICATION	//sb.append("&nbsp;");
WITHOUT_CLASSIFICATION	// error
WITHOUT_CLASSIFICATION	// error
WITHOUT_CLASSIFICATION	/* * *20030623, karlpeder* " and space handled also */
WITHOUT_CLASSIFICATION	// Check for missing  <html> tag
WITHOUT_CLASSIFICATION	// Check for missing  </html> tag
WITHOUT_CLASSIFICATION	// remove characters after </html> tag
WITHOUT_CLASSIFICATION	// Do not take existing link tags into account
WITHOUT_CLASSIFICATION	// found an url with links - is it the same?
WITHOUT_CLASSIFICATION	// initialisation
WITHOUT_CLASSIFICATION	// current position in s
WITHOUT_CLASSIFICATION	// an email adress was found - check whether its already a link
WITHOUT_CLASSIFICATION	// found an email address with links - is it the same?
WITHOUT_CLASSIFICATION	// same email adress - just append and continue
WITHOUT_CLASSIFICATION	// already handled
WITHOUT_CLASSIFICATION	// already handled
WITHOUT_CLASSIFICATION	// not the same
WITHOUT_CLASSIFICATION	// not the same
WITHOUT_CLASSIFICATION	// no match with mailto link tags
WITHOUT_CLASSIFICATION	// found an open link
WITHOUT_CLASSIFICATION	// check if it is closed
WITHOUT_CLASSIFICATION	// if the closing mark is after the s1 mark do not insert a link
WITHOUT_CLASSIFICATION	// shall we insert a link?
WITHOUT_CLASSIFICATION	// no more matches - append rest of string
WITHOUT_CLASSIFICATION	// no more matches - append rest of string
WITHOUT_CLASSIFICATION	// return result
WITHOUT_CLASSIFICATION	// return result
WITHOUT_CLASSIFICATION	// Test if there is a trailing html tag
WITHOUT_CLASSIFICATION	// an url - check whether its already a link
WITHOUT_CLASSIFICATION	// locate body start- and end tags
WITHOUT_CLASSIFICATION	// no match with link tags
WITHOUT_CLASSIFICATION	// same url - just append and continue
WITHOUT_CLASSIFICATION	// search for closing bracket separately to account for attributes in tag
WITHOUT_CLASSIFICATION	// correct limits if body tags where not found
WITHOUT_CLASSIFICATION	// return body
WITHOUT_CLASSIFICATION	// remove comments
WITHOUT_CLASSIFICATION	// Create boundary to separate the mime-parts
WITHOUT_CLASSIFICATION	// Create the header and body of the multipart
WITHOUT_CLASSIFICATION	// Add the MimePart that will be signed
WITHOUT_CLASSIFICATION	// Add the signature
WITHOUT_CLASSIFICATION	// set the attachment flag
WITHOUT_CLASSIFICATION	// Create boundary to separate the mime-parts
WITHOUT_CLASSIFICATION	// Add pgp-specific content-parameters // we take as default hash-algo SHA1
WITHOUT_CLASSIFICATION	// Create the closing boundary
WITHOUT_CLASSIFICATION	// loop until signing was sucessful or the user cancels the passphrase // dialog
WITHOUT_CLASSIFICATION	// save passphrase in hash map
WITHOUT_CLASSIFICATION	// at the moment we are only supporting gpg. So let us code hard // here the gpg driver
WITHOUT_CLASSIFICATION	// let us hard coding the gpg for each connection. Later we should // support also other variants (like smime)
WITHOUT_CLASSIFICATION	// getting the path to gpg
WITHOUT_CLASSIFICATION	// Add pgp-specific content-parameters
WITHOUT_CLASSIFICATION	// Add the ControlMimePart
WITHOUT_CLASSIFICATION	// Add the encrypted MimePart
WITHOUT_CLASSIFICATION	//con.getProperties().put("USERID", pgpItem.get("id"));
WITHOUT_CLASSIFICATION	/*		 * notifyListeners(new ModelChangedEvent(ModelChangedEvent.ADDED,		 * server));		 */
WITHOUT_CLASSIFICATION	/*		 * notifyListeners(new ModelChangedEvent(ModelChangedEvent.REMOVED));		 */
WITHOUT_CLASSIFICATION	// Get the uids from the headercache
WITHOUT_CLASSIFICATION	// Get the list of the uids on the server // Important: Use a clone of the List since // we must not change it!
WITHOUT_CLASSIFICATION	// substract the uids that we already downloaded -> // newUids contains all uids to fetch from the server
WITHOUT_CLASSIFICATION	// substract the uids on the server from the downloaded uids -> // headerUids are the uids that have been removed from the server
WITHOUT_CLASSIFICATION	// update the cache
WITHOUT_CLASSIFICATION	// return the uids that are new
WITHOUT_CLASSIFICATION	// set dirty flag
WITHOUT_CLASSIFICATION	// Message already deleted from server
WITHOUT_CLASSIFICATION	// Store the complete stream in a source so that we can parse it
WITHOUT_CLASSIFICATION	// set headercache dirty flag
WITHOUT_CLASSIFICATION	// add status information observable
WITHOUT_CLASSIFICATION	// ok pressed
WITHOUT_CLASSIFICATION	// open a port to the server
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// reopen the port
WITHOUT_CLASSIFICATION	// reopen the port
WITHOUT_CLASSIFICATION	// shall we switch to SSL?
WITHOUT_CLASSIFICATION	// if CAPA was not support just give it a try...
WITHOUT_CLASSIFICATION	// CAPAs say that SSL is not supported
WITHOUT_CLASSIFICATION	// AUTH?
WITHOUT_CLASSIFICATION	// CAPA not supported
WITHOUT_CLASSIFICATION	// Just use the default as fallback
WITHOUT_CLASSIFICATION	// AUTH
WITHOUT_CLASSIFICATION	// If the cause is a IMAPExcpetion then only password // wrong // else bogus authentication mechanism
WITHOUT_CLASSIFICATION	// Some error in the client/server communication // --> fall back to default login process
WITHOUT_CLASSIFICATION	// fill with nulls
WITHOUT_CLASSIFICATION	// put size at the specified place
WITHOUT_CLASSIFICATION	// user/pass worked -> this is indeed // a bogus server.
WITHOUT_CLASSIFICATION	// USER/PASS is always supported
WITHOUT_CLASSIFICATION	// APOP?
WITHOUT_CLASSIFICATION	// APOP not supported
WITHOUT_CLASSIFICATION	// register interest on status bar information
WITHOUT_CLASSIFICATION	// synchronize local UID list with server UID list
WITHOUT_CLASSIFICATION	// only download new messages
WITHOUT_CLASSIFICATION	// Delete old message from server if the feature is enabled
WITHOUT_CLASSIFICATION	// logout cleanly
WITHOUT_CLASSIFICATION	// display downloaded message count in statusbar
WITHOUT_CLASSIFICATION	// get inbox-folder from pop3-server preferences
WITHOUT_CLASSIFICATION	// clear statusbar message
WITHOUT_CLASSIFICATION	// clear statusbar message
WITHOUT_CLASSIFICATION	/*			 * // always enable the menuitem again			 * r[0].getPOP3ServerController().enableActions(true);			 */
WITHOUT_CLASSIFICATION	// important for cancel
WITHOUT_CLASSIFICATION	// download message
WITHOUT_CLASSIFICATION	// not needed anymore
WITHOUT_CLASSIFICATION	// try to authenticate
WITHOUT_CLASSIFICATION	// message belongs to which account?
WITHOUT_CLASSIFICATION	// if spam filter is not enabled -> return
WITHOUT_CLASSIFICATION	// move message to trash
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// display status message
WITHOUT_CLASSIFICATION	// remove old filters
WITHOUT_CLASSIFICATION	// add filter criteria
WITHOUT_CLASSIFICATION	// set source folder UID
WITHOUT_CLASSIFICATION	// search in subfolders recursively
WITHOUT_CLASSIFICATION	// NOTE if SSL is possible we just need the plain login // since SSL does the encryption for us.
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// server message numbers start with 1 // whereas List numbers start with 0 // -> always increase fetch number
WITHOUT_CLASSIFICATION	// which UID should be downloaded next
WITHOUT_CLASSIFICATION	// check if message isn't too big to download
WITHOUT_CLASSIFICATION	// if message-size is bigger skip download of this message
WITHOUT_CLASSIFICATION	// now download the message
WITHOUT_CLASSIFICATION	// delete message from server
WITHOUT_CLASSIFICATION	// synchronize local UID-list with server
WITHOUT_CLASSIFICATION	// mark message as recent
WITHOUT_CLASSIFICATION	// apply spam filter
WITHOUT_CLASSIFICATION	// apply filter on message
WITHOUT_CLASSIFICATION	// score message and mark as "spam" or "not spam"
WITHOUT_CLASSIFICATION	// is message marked as spam
WITHOUT_CLASSIFICATION	// create search folder
WITHOUT_CLASSIFICATION	// create search folder
WITHOUT_CLASSIFICATION	// check if string is a number
WITHOUT_CLASSIFICATION	// create search criteria
WITHOUT_CLASSIFICATION	// remember request id for "search in results"
WITHOUT_CLASSIFICATION	// remove memorized search folders
WITHOUT_CLASSIFICATION	//searchFolders.remove(searchRequestId);
WITHOUT_CLASSIFICATION	// use local date settings
WITHOUT_CLASSIFICATION	// ensure that we are currently in the mail component
WITHOUT_CLASSIFICATION	// select invisible virtual folder
WITHOUT_CLASSIFICATION	// update message list
WITHOUT_CLASSIFICATION	// create search criteria
WITHOUT_CLASSIFICATION	// remember request id for "search in results"
WITHOUT_CLASSIFICATION	// return empty result, in case the criteria doesn't match the search // term
WITHOUT_CLASSIFICATION	// create virtual folder for criteria
WITHOUT_CLASSIFICATION	// get first one
WITHOUT_CLASSIFICATION	// do the search
WITHOUT_CLASSIFICATION	// retrieve the actual search result data
WITHOUT_CLASSIFICATION	// retrieve the actual search result data
WITHOUT_CLASSIFICATION	// sort all the results
WITHOUT_CLASSIFICATION	// sort all the results
WITHOUT_CLASSIFICATION	// remember search folder for "show total results" action
WITHOUT_CLASSIFICATION	// memorize total result count
WITHOUT_CLASSIFICATION	// memorize total result count
WITHOUT_CLASSIFICATION	// remove all memorized search folders
WITHOUT_CLASSIFICATION	// create virtual folder for each criteria
WITHOUT_CLASSIFICATION	// ensure we are in existing result range
WITHOUT_CLASSIFICATION	// gather result results
WITHOUT_CLASSIFICATION	// if complex use the last search folder
WITHOUT_CLASSIFICATION	// initialise protocol layer
WITHOUT_CLASSIFICATION	// Start login procedure
WITHOUT_CLASSIFICATION	// Init Values // user's email address
WITHOUT_CLASSIFICATION	// no esmtp - use POP3-before-SMTP instead
WITHOUT_CLASSIFICATION	// ask password from user
WITHOUT_CLASSIFICATION	// display status message
WITHOUT_CLASSIFICATION	// turn off SSL for the future
WITHOUT_CLASSIFICATION	// NOTE if SSL is possible we just need the plain login // since SSL does the encryption for us.
WITHOUT_CLASSIFICATION	// offline -> go online
WITHOUT_CLASSIFICATION	// there seems to be no username set in the smtp-options //  -> use username from pop3 or imap options
WITHOUT_CLASSIFICATION	// Authentication is not supported
WITHOUT_CLASSIFICATION	//Turn off authentication for the future
WITHOUT_CLASSIFICATION	// Some error in the client/server communication //  --> fall back to default login process
WITHOUT_CLASSIFICATION	// authentication was successful // -> save name/password
WITHOUT_CLASSIFICATION	// Add a default PLAIN login as fallback
WITHOUT_CLASSIFICATION	// EHLO not supported -> AUTH not supported
WITHOUT_CLASSIFICATION	//Fallback to Securest Login method
WITHOUT_CLASSIFICATION	// No Authentication available
WITHOUT_CLASSIFICATION	// Close Port
WITHOUT_CLASSIFICATION	// now send message source
WITHOUT_CLASSIFICATION	// icon
WITHOUT_CLASSIFICATION	// shortcut key // no shortcut here, because F10 conflicts with system accelerator key // putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F10, // 0));
WITHOUT_CLASSIFICATION	// check if we are online
WITHOUT_CLASSIFICATION	// get outbox folder
WITHOUT_CLASSIFICATION	// create referenc
WITHOUT_CLASSIFICATION	// start command
WITHOUT_CLASSIFICATION	// get Outbox folder from reference
WITHOUT_CLASSIFICATION	// get UID list of messages
WITHOUT_CLASSIFICATION	// send all messages
WITHOUT_CLASSIFICATION	// get account information from message
WITHOUT_CLASSIFICATION	// use the default account
WITHOUT_CLASSIFICATION	// skip message if there's no account // available to send it
WITHOUT_CLASSIFICATION	// Sent folder
WITHOUT_CLASSIFICATION	// open connection to SMTP server
WITHOUT_CLASSIFICATION	// move all successfully send messages to the Sent folder
WITHOUT_CLASSIFICATION	// start move command
WITHOUT_CLASSIFICATION	/*	 * validate command parameters. At the moment only checks if there are any	 * invalid email addresses	 *	 */
WITHOUT_CLASSIFICATION	// mark message as answered
WITHOUT_CLASSIFICATION	// close composer view
WITHOUT_CLASSIFICATION	// important for cancel
WITHOUT_CLASSIFICATION	// not needed anymore
WITHOUT_CLASSIFICATION	//String invalidRecipient = null;
WITHOUT_CLASSIFICATION	// get composer controller // -> get all the account information from the controller
WITHOUT_CLASSIFICATION	// sent folder
WITHOUT_CLASSIFICATION	// get the SendableMessage object
WITHOUT_CLASSIFICATION	// compose the message suitable for sending
WITHOUT_CLASSIFICATION	// user cancelled sending operation // open composer view
WITHOUT_CLASSIFICATION	// open composer view
WITHOUT_CLASSIFICATION	// open connection
WITHOUT_CLASSIFICATION	// send message
WITHOUT_CLASSIFICATION	// mark as read
WITHOUT_CLASSIFICATION	// save message in Sent folder
WITHOUT_CLASSIFICATION	// does not occur
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// display status message
WITHOUT_CLASSIFICATION	// set dirty flag
WITHOUT_CLASSIFICATION	// set dirty flag
WITHOUT_CLASSIFICATION	// open composer view
WITHOUT_CLASSIFICATION	// close connection to server
WITHOUT_CLASSIFICATION	// can no longer assume that sendMessageDialog has been displayed
WITHOUT_CLASSIFICATION	// close send message dialog
WITHOUT_CLASSIFICATION	// re-open composer view
WITHOUT_CLASSIFICATION	// do not prompt user if composer should be really closed
WITHOUT_CLASSIFICATION	// save composer window state
WITHOUT_CLASSIFICATION	// create directory <config-folder>/mail/spamdb
WITHOUT_CLASSIFICATION	// make Columba logger parent of macchiato logger
WITHOUT_CLASSIFICATION	// load database from file
WITHOUT_CLASSIFICATION	// load database from file
WITHOUT_CLASSIFICATION	// get inputstream of message body
WITHOUT_CLASSIFICATION	// get inputstream of message body
WITHOUT_CLASSIFICATION	// get stream
WITHOUT_CLASSIFICATION	// apply additional handcrafted rules
WITHOUT_CLASSIFICATION	// get headers
WITHOUT_CLASSIFICATION	// get headers
WITHOUT_CLASSIFICATION	// put headers in list
WITHOUT_CLASSIFICATION	// put headers in list
WITHOUT_CLASSIFICATION	// get new inputstream
WITHOUT_CLASSIFICATION	// get new inputstream
WITHOUT_CLASSIFICATION	// check if this message was already learned // -> only add if this is not the case
WITHOUT_CLASSIFICATION	// message already exists // --> correct token data
WITHOUT_CLASSIFICATION	// new message
WITHOUT_CLASSIFICATION	// check if this message was already learned
WITHOUT_CLASSIFICATION	// message already exists
WITHOUT_CLASSIFICATION	// --> correct token data
WITHOUT_CLASSIFICATION	// only save if changes exist
WITHOUT_CLASSIFICATION	// cleanup DB -> remove old tokens
WITHOUT_CLASSIFICATION	// mark message as *not* spam
WITHOUT_CLASSIFICATION	// train message as spam or non spam
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//does not happen
WITHOUT_CLASSIFICATION	//does not happen
WITHOUT_CLASSIFICATION	//does not happen
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get source folder
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	// get array of message UIDs
WITHOUT_CLASSIFICATION	// update status message
WITHOUT_CLASSIFICATION	// update status message
WITHOUT_CLASSIFICATION	// register for status events
WITHOUT_CLASSIFICATION	// message belongs to which account?
WITHOUT_CLASSIFICATION	// get array of source references
WITHOUT_CLASSIFICATION	// get array of source references
WITHOUT_CLASSIFICATION	// mark spam messages
WITHOUT_CLASSIFICATION	// mark non spam messages
WITHOUT_CLASSIFICATION	// calculate message score
WITHOUT_CLASSIFICATION	// check if sender is already in addressbook
WITHOUT_CLASSIFICATION	// add this message to frequency database
WITHOUT_CLASSIFICATION	// train message as spam
WITHOUT_CLASSIFICATION	// train message as ham
WITHOUT_CLASSIFICATION	// try to get the account using the email address
WITHOUT_CLASSIFICATION	// use default account as fallback
WITHOUT_CLASSIFICATION	// if 1/3 of all characters are digits
WITHOUT_CLASSIFICATION	// convert to lower-case
WITHOUT_CLASSIFICATION	// whitespace detected
WITHOUT_CLASSIFICATION	// if already detected before
WITHOUT_CLASSIFICATION	/*     * wait for stream threads to die     *     */
WITHOUT_CLASSIFICATION	// spam found
WITHOUT_CLASSIFICATION	// --no-rebuild option is deprecated in recent SpamAssassin versions
WITHOUT_CLASSIFICATION	/*		ipcHelper.executeCommand(ExternalToolsHelper.getSALearn()				+ " --no-rebuild --spam --single");				*/
WITHOUT_CLASSIFICATION	// don't need this
WITHOUT_CLASSIFICATION	// don't need this
WITHOUT_CLASSIFICATION	/*         * If this is a unix-based system, check the 2 best-known areas for the         * aspell binary.         */
WITHOUT_CLASSIFICATION	/* * Test for boolean equals(Object) */
WITHOUT_CLASSIFICATION	// -- Text Fields
WITHOUT_CLASSIFICATION	// save current location statically for next time
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// -- Buttons
WITHOUT_CLASSIFICATION	// -- Other components
WITHOUT_CLASSIFICATION	// suggestionsJScrollPane.setPreferredSize(
WITHOUT_CLASSIFICATION	// new Dimension( suggestionsJScrollPane.getPreferredSize().width, 75 ) // );
WITHOUT_CLASSIFICATION	// -- Overall Dialog box
WITHOUT_CLASSIFICATION	// suggestionsJScrollPane.setMinimumSize( new Dimension( 200, 300 ) );
WITHOUT_CLASSIFICATION	// suggestionsJScrollPane.setMaximumSize( new Dimension( // Integer.MAX_VALUE, Integer.MAX_VALUE ) );
WITHOUT_CLASSIFICATION	// setSize( 750, getPreferredSize().height );
WITHOUT_CLASSIFICATION	// -- Availables Actions
WITHOUT_CLASSIFICATION	// skip '#'
WITHOUT_CLASSIFICATION	// skip '#'
WITHOUT_CLASSIFICATION	//How to retrieve the mime part's contentID: String contentID = url.getRef(); //initialize stuff here
WITHOUT_CLASSIFICATION	// Default
WITHOUT_CLASSIFICATION	// Protocol defined Mechanisms
WITHOUT_CLASSIFICATION	//SMTP
WITHOUT_CLASSIFICATION	// SASL Mechanisms
WITHOUT_CLASSIFICATION	// We compare three classes: plain, md5 and popbeforesmtp
WITHOUT_CLASSIFICATION	//$JUnit-END$	
WITHOUT_CLASSIFICATION	// first account item
WITHOUT_CLASSIFICATION	// first account item
WITHOUT_CLASSIFICATION	// second account item
WITHOUT_CLASSIFICATION	// second account item
WITHOUT_CLASSIFICATION	// third item, a bit different from the first
WITHOUT_CLASSIFICATION	// third item, a bit different from the first
WITHOUT_CLASSIFICATION	// should have the same hashcodes...
WITHOUT_CLASSIFICATION	// expect a different hashcode from a newly created item...
WITHOUT_CLASSIFICATION	// expect a different hashcode for item and item3
WITHOUT_CLASSIFICATION	// test self equality...
WITHOUT_CLASSIFICATION	// item and item2 should be equal...
WITHOUT_CLASSIFICATION	// item and item2 should be two different objects
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// item should not be equal to a newly created item or null
WITHOUT_CLASSIFICATION	// item and item3 should not be equal
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// !!! Subject: test // create filter configuration // -> check if <Subject> <contains> pattern <test>
WITHOUT_CLASSIFICATION	// !!! Subject: test // create filter configuration // -> check if <Subject> <contains> pattern <test>
WITHOUT_CLASSIFICATION	// !!! Subject: test // create filter configuration // -> check if <Subject> <contains> pattern <test>
WITHOUT_CLASSIFICATION	// !!! From: alice@mail.org // create filter configuration // -> check if <From> <contains> pattern <alice@mail.org>
WITHOUT_CLASSIFICATION	// !!! From: alice@mail.org // create filter configuration // -> check if <From> <contains> pattern <alice@mail.org>
WITHOUT_CLASSIFICATION	// add message to folder
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	//		 create MH folder // -> use homeDirectory as top-level folder // -> this has to be an absolute path
WITHOUT_CLASSIFICATION	/*		 * sourceFolder = new CachedMHFolder("test", "CachedMHFolder",		 * FolderTstHelper.homeDirectory + "/folders/");		 */
WITHOUT_CLASSIFICATION	// delete all files in folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// disabled IMAP folder tests as they require connection // to remote IMAP server // setup(suite, new IMAPTstFactory());
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// delete all files in folder
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add message "1.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// get inputstream of mimepart 0 from folder
WITHOUT_CLASSIFICATION	// create string from inputstream
WITHOUT_CLASSIFICATION	// create string from inputstream
WITHOUT_CLASSIFICATION	// create string from inputstream
WITHOUT_CLASSIFICATION	// compare both messages
WITHOUT_CLASSIFICATION	// compare both messages
WITHOUT_CLASSIFICATION	// compare both messages
WITHOUT_CLASSIFICATION	//      add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// get inputstream of this message from folder
WITHOUT_CLASSIFICATION	// get inputstream of this message from folder
WITHOUT_CLASSIFICATION	//		 add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	//		 add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	//		 add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	//		 add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// get flags of message
WITHOUT_CLASSIFICATION	// set flags
WITHOUT_CLASSIFICATION	// set flags
WITHOUT_CLASSIFICATION	// get message source stream
WITHOUT_CLASSIFICATION	// get message attributes
WITHOUT_CLASSIFICATION	// close inpustream
WITHOUT_CLASSIFICATION	// disabled IMAP folder tests as they require connection // to remote IMAP server //setup(suite, new IMAPTstFactory());
WITHOUT_CLASSIFICATION	//      get flags of message
WITHOUT_CLASSIFICATION	// mark message as read
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// create string from inputstream
WITHOUT_CLASSIFICATION	// compare both messages
WITHOUT_CLASSIFICATION	// get inputstream of this message from folder
WITHOUT_CLASSIFICATION	//		 add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// An individual 3 digit number
WITHOUT_CLASSIFICATION	//      create Command reference
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does nothing
WITHOUT_CLASSIFICATION	//    	 create Command reference
WITHOUT_CLASSIFICATION	//    	 create Command reference
WITHOUT_CLASSIFICATION	//   	 create Command reference
WITHOUT_CLASSIFICATION	// create folders, etc.
WITHOUT_CLASSIFICATION	// delete folders
WITHOUT_CLASSIFICATION	// ask the user
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// disabled IMAP folder tests as they require connection // to remote IMAP server // setup(suite, new IMAPTstFactory());
WITHOUT_CLASSIFICATION	// create string from inputstream
WITHOUT_CLASSIFICATION	// compare both messages
WITHOUT_CLASSIFICATION	// get inputstream of this message from folder
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// get flags of message
WITHOUT_CLASSIFICATION	// set flags
WITHOUT_CLASSIFICATION	//      create Command reference
WITHOUT_CLASSIFICATION	//      create Command reference
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// create Command reference
WITHOUT_CLASSIFICATION	// create Command reference
WITHOUT_CLASSIFICATION	// create Command reference
WITHOUT_CLASSIFICATION	//  add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	/*		 * oldFlags.setRecent(true); oldFlags.setFlagged(true);		 * oldFlags.setExpunged(false);		 */
WITHOUT_CLASSIFICATION	/*		 * assertEquals("copied message should be marked as recent", true, flags		 * .getRecent()); assertEquals("copied message should be marked as		 * flagged", true, flags .getFlagged()); assertEquals("copied message		 * should be marked as not expunged", false, flags.getExpunged());		 */
WITHOUT_CLASSIFICATION	// Add some messages
WITHOUT_CLASSIFICATION	// Add some messages
WITHOUT_CLASSIFICATION	// Add some messages
WITHOUT_CLASSIFICATION	// Check for the new messages
WITHOUT_CLASSIFICATION	// Check for the new messages
WITHOUT_CLASSIFICATION	// Check for success
WITHOUT_CLASSIFICATION	// Check for success
WITHOUT_CLASSIFICATION	// Check for success
WITHOUT_CLASSIFICATION	// Add some new messages // and remove the same number of old messages
WITHOUT_CLASSIFICATION	// model should contain the data
WITHOUT_CLASSIFICATION	// model should contain the data
WITHOUT_CLASSIFICATION	// model should contain the data
WITHOUT_CLASSIFICATION	//		 create Command reference
WITHOUT_CLASSIFICATION	// remove configuration directory
WITHOUT_CLASSIFICATION	// try to get account using the account ID
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// disabled IMAP folder tests as they require connection // to remote IMAP server // setup(suite, new IMAPTstFactory());
WITHOUT_CLASSIFICATION	//      create Command reference
WITHOUT_CLASSIFICATION	//      create Command reference
WITHOUT_CLASSIFICATION	//      create Command reference
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// model should contain the data
WITHOUT_CLASSIFICATION	// model should contain the data
WITHOUT_CLASSIFICATION	// model should contain the data
WITHOUT_CLASSIFICATION	// model should contain the data
WITHOUT_CLASSIFICATION	//  execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	//  execute command -> use mock object class as worker which does // nothing 
WITHOUT_CLASSIFICATION	//AccountList list = MailConfig.getInstance().getAccountList(); //list.addEmptyAccount("pop3");
WITHOUT_CLASSIFICATION	// 3 columns table
WITHOUT_CLASSIFICATION	// create sample headerlist
WITHOUT_CLASSIFICATION	// check number of tree nodes
WITHOUT_CLASSIFICATION	// check number of tree nodes
WITHOUT_CLASSIFICATION	// check number of cached MessageNodes //assertEquals(2, model.getMap().size());
WITHOUT_CLASSIFICATION	// check number of JTable rows
WITHOUT_CLASSIFICATION	// check number of JTable rows
WITHOUT_CLASSIFICATION	// check number of JTree rows
WITHOUT_CLASSIFICATION	// check number of JTree rows
WITHOUT_CLASSIFICATION	// remove MessageNode with uid=0
WITHOUT_CLASSIFICATION	// check number of cached MessageNodes //assertEquals(1, model.getMap().size());
WITHOUT_CLASSIFICATION	// if this is the last token, check if the last element // is the same than in the array
WITHOUT_CLASSIFICATION	// if this is the last token, check if the last element // is the same than in the array
WITHOUT_CLASSIFICATION	// check for at least 10 whitespaces
WITHOUT_CLASSIFICATION	// if this is the last token, check if the last element // is the same than in the array
WITHOUT_CLASSIFICATION	// if this is the last token, check if the last element // is the same than in the array
WITHOUT_CLASSIFICATION	/*	 * test with null list	 */
WITHOUT_CLASSIFICATION	// create group with two contacts
WITHOUT_CLASSIFICATION	/*	 * test with empty list	 */
WITHOUT_CLASSIFICATION	// url decode
WITHOUT_CLASSIFICATION	/*	 * Test with all kinds of input data	 */
WITHOUT_CLASSIFICATION	// first group contains first contact item
WITHOUT_CLASSIFICATION	// create group containing first contact
WITHOUT_CLASSIFICATION	// first group contains first contact item
WITHOUT_CLASSIFICATION	// add contact to roaster, nickname="", group=null
WITHOUT_CLASSIFICATION	/*	 * Test method for	 * 'org.columba.mail.parser.ListBuilder.createStringListFromItemList(List<IHeaderItem>)'	 */
WITHOUT_CLASSIFICATION	//public abstract IChatMediator getChatMediator();
WITHOUT_CLASSIFICATION	// mock folder class, only returns folder id
WITHOUT_CLASSIFICATION	// mock object folder facade, only returns folder list
WITHOUT_CLASSIFICATION	//public abstract void setChatMediator(IChatMediator mediator);
WITHOUT_CLASSIFICATION	// we are only interested on subscription requests
WITHOUT_CLASSIFICATION	// if already in roster
WITHOUT_CLASSIFICATION	// create chat connection, if not available yet
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// get Columba's top-level configuration directory
WITHOUT_CLASSIFICATION	// create top-level configuration directory
WITHOUT_CLASSIFICATION	// fall-back to global resource loader
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// close stream
WITHOUT_CLASSIFICATION	// --no-rebuild option is deprecated in recent SpamAssassin versions
WITHOUT_CLASSIFICATION	// and add it to the buddylist
WITHOUT_CLASSIFICATION	// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// add all contacts as leafs of group folders
WITHOUT_CLASSIFICATION	// add all groups as folder to JTree
WITHOUT_CLASSIFICATION	// buddy already exists
WITHOUT_CLASSIFICATION	// add "Uncategorized" note
WITHOUT_CLASSIFICATION	// add to global buddy list
WITHOUT_CLASSIFICATION	// update status information
WITHOUT_CLASSIFICATION	// create new buddy
WITHOUT_CLASSIFICATION	// found group for buddy
WITHOUT_CLASSIFICATION	// get presence
WITHOUT_CLASSIFICATION	// persist changes on exit
WITHOUT_CLASSIFICATION	// check if this buddy belongs to a group
WITHOUT_CLASSIFICATION	// add to "Uncategorized" node
WITHOUT_CLASSIFICATION	// didn't find any group for this buddy
WITHOUT_CLASSIFICATION	// load configuraation
WITHOUT_CLASSIFICATION	// create account object
WITHOUT_CLASSIFICATION	// use key/value properties file
WITHOUT_CLASSIFICATION	// load properties from stream
WITHOUT_CLASSIFICATION	// open stream to file
WITHOUT_CLASSIFICATION	// save properties to file
WITHOUT_CLASSIFICATION	// create stream to file
WITHOUT_CLASSIFICATION	// store account data in properties
WITHOUT_CLASSIFICATION	// selected buddy in buddylist
WITHOUT_CLASSIFICATION	// selected buddy in buddylist
WITHOUT_CLASSIFICATION	// use selected buddy
WITHOUT_CLASSIFICATION	// use selected buddy
WITHOUT_CLASSIFICATION	// prompt for jabber id
WITHOUT_CLASSIFICATION	// prompt for jabber id
WITHOUT_CLASSIFICATION	// prompt for jabber id
WITHOUT_CLASSIFICATION	// if user cancelled action
WITHOUT_CLASSIFICATION	// awt-event-thread
WITHOUT_CLASSIFICATION	// send message
WITHOUT_CLASSIFICATION	/*         * If this is a unix-based system, check the 2 best-known areas for the         * aspell binary.         */
WITHOUT_CLASSIFICATION	/*         * If this is a unix-based system, check the 2 best-known areas for the         * aspell binary.         */
WITHOUT_CLASSIFICATION	// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
WITHOUT_CLASSIFICATION	// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
WITHOUT_CLASSIFICATION	// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
WITHOUT_CLASSIFICATION	//DateFormat format = DateFormat.getTimeInstance(DateFormat.SHORT); // green color
WITHOUT_CLASSIFICATION	//DateFormat format = DateFormat.getTimeInstance(DateFormat.SHORT);
WITHOUT_CLASSIFICATION	// private SendButtonController sendButton;
WITHOUT_CLASSIFICATION	// JPanel mainPanel = new JPanel(mainLayout); // mainPanel.setBorder(Borders.DIALOG_BORDER);
WITHOUT_CLASSIFICATION	// create message object
WITHOUT_CLASSIFICATION	// set message body
WITHOUT_CLASSIFICATION	// clear text box
WITHOUT_CLASSIFICATION	// return (ChatMediator) chatList.get(index);
WITHOUT_CLASSIFICATION	// private JPasswordField passwordTextField;
WITHOUT_CLASSIFICATION	// passwordTextField.setText(account.getPassword());
WITHOUT_CLASSIFICATION	// b.addSeparator("Account Options");
WITHOUT_CLASSIFICATION	// b.append("Pass&word:", passwordTextField);
WITHOUT_CLASSIFICATION	// passwordTextField = new JPasswordField(10);
WITHOUT_CLASSIFICATION	/*	 * public String getPassword() { return passwordTextField.getText(); }	 */
WITHOUT_CLASSIFICATION	// comboBox.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	/*			 * setIconTextGap(5); setVerticalAlignment(JLabel.CENTER);			 */
WITHOUT_CLASSIFICATION	// IAccount account = object.getAccount();
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	// Force that the last line in buffer does NOT have a newline
WITHOUT_CLASSIFICATION	// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
WITHOUT_CLASSIFICATION	// example: fdietz@jabber.org/Jabber-client // -> remove "/Jabber-client"
WITHOUT_CLASSIFICATION	// connect to server // new ConnectAction(this).actionPerformed(null);
WITHOUT_CLASSIFICATION	// checkBox.addItem("Custom Message...", null); // checkBox.addItem("Leave...");
WITHOUT_CLASSIFICATION	// private void addStatus(String tooltip, ImageIcon icon) { // JLabel label = new JLabel(icon); // label.setToolTipText(tooltip); // // comboBox.addItem(tooltip); // }
WITHOUT_CLASSIFICATION	// just ignore unknown people
WITHOUT_CLASSIFICATION	//IAccount account = object.getAccount();
WITHOUT_CLASSIFICATION	// contact
WITHOUT_CLASSIFICATION	// group
WITHOUT_CLASSIFICATION	// Set bean properties
WITHOUT_CLASSIFICATION	// The following methods override the defaults for performance reasons
WITHOUT_CLASSIFICATION	// Make sure we get all log info as fast as we can get ahold of it.
WITHOUT_CLASSIFICATION	//notifyTableListeners(new TableModelEvent(this, 0, logMessages.size()));
WITHOUT_CLASSIFICATION	//notifyTableListeners(new TableModelEvent(this, logMessages.size(), logMessages.size(), TableModelEvent.ALL_COLUMNS, TableModelEvent.INSERT));
WITHOUT_CLASSIFICATION	//"right:max(40dlu;pref),3dlu,
WITHOUT_CLASSIFICATION	//private JTable logTable;
WITHOUT_CLASSIFICATION	//bottomPanel.add(closeButton);
WITHOUT_CLASSIFICATION	// open configuration file 
WITHOUT_CLASSIFICATION	// navigate to treenode "text"
WITHOUT_CLASSIFICATION	// read attribute "value"
WITHOUT_CLASSIFICATION	// start parsing line
WITHOUT_CLASSIFICATION	// found new token
WITHOUT_CLASSIFICATION	// open file
WITHOUT_CLASSIFICATION	// add contact to addressbook
WITHOUT_CLASSIFICATION	// parse line by line
WITHOUT_CLASSIFICATION	// if user cancelled task exit immediately
WITHOUT_CLASSIFICATION	// if user cancelled task exit immediately
WITHOUT_CLASSIFICATION	// found new message
WITHOUT_CLASSIFICATION	// save last message, because while loop aborted before being able to // save message
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// model -> view // read configuration and set gui elements appropriately
WITHOUT_CLASSIFICATION	// view -> model // write configuration given the data the user entered in the gui
WITHOUT_CLASSIFICATION	// create new contact card
WITHOUT_CLASSIFICATION	// the boundary parameter
WITHOUT_CLASSIFICATION	// parameters ~ rest of string
WITHOUT_CLASSIFICATION	// strip "'s
WITHOUT_CLASSIFICATION	// Lines not starting with "From ???@???" is part of the message // (headers or body)
WITHOUT_CLASSIFICATION	// we reached "From ..." (start of new message)
WITHOUT_CLASSIFICATION	// reset for new message
WITHOUT_CLASSIFICATION	// save last message (while loop terminated before last msg was saved)
WITHOUT_CLASSIFICATION	// ** End of method importMailboxFile
WITHOUT_CLASSIFICATION	// invalid date format - not enough tokens in it!!
WITHOUT_CLASSIFICATION	// ** End of method getDateHeader
WITHOUT_CLASSIFICATION	// divide message into headers and body
WITHOUT_CLASSIFICATION	// loop over headers and modify them as needed
WITHOUT_CLASSIFICATION	// a header
WITHOUT_CLASSIFICATION	// Logging.log.severe( // "Not enough tokens in \"" // + dateStr // + "\" to create Date: header. Returning null", // e);
WITHOUT_CLASSIFICATION	// day of week // month // day of month // time // year
WITHOUT_CLASSIFICATION	// handle header
WITHOUT_CLASSIFICATION	// parse // Content-Type
WITHOUT_CLASSIFICATION	// boundary not found - Content-Type must be changed
WITHOUT_CLASSIFICATION	// just convert it to text/plain or text/html
WITHOUT_CLASSIFICATION	/*							 * mixed or unknown multipart type (to be treated as							 * mixed). This is typically a message with							 * attachments. Eudora just stores links to them -							 * therefore we create a new multipart/mixed message							 * with 2nd part = html page with links to							 * attachments							 */
WITHOUT_CLASSIFICATION	// no attachments found - just convert it to // text/plain or text/html
WITHOUT_CLASSIFICATION	/*					 * Such a header is used by Eudora to indicate attachments					 * for outgoing messages. Outgoing messages have no					 * Content-Type specified. Therefore the Content-Type header					 * can be safely set here without risk of conflicts with the					 * modifications made above					 */
WITHOUT_CLASSIFICATION	// attachments found
WITHOUT_CLASSIFICATION	// no attachments found - just insert a // Content-Type header // extra // header // necessary // X-Attachments header is // replaced
WITHOUT_CLASSIFICATION	// get unique boundary (not checked against att. // list part - but guess its ok)
WITHOUT_CLASSIFICATION	// extra // header // necessary // X-Attachments header is // replaced
WITHOUT_CLASSIFICATION	// we have now added // such a header
WITHOUT_CLASSIFICATION	// ** End of while loop over headers
WITHOUT_CLASSIFICATION	/*		 * If no Content-Type header was found, it is necessary to construct a		 * new one (for outgoing msg Eudora never includes a Content-Type =>		 * html msg is not shown correctly).		 */
WITHOUT_CLASSIFICATION	// save message to destination folder
WITHOUT_CLASSIFICATION	// ** End of method convertAndSavemessage
WITHOUT_CLASSIFICATION	// create full msg from headers and body
WITHOUT_CLASSIFICATION	// ... and save it
WITHOUT_CLASSIFICATION	// NB: This is the saveMessage method def. in // DefaultMessageImporter
WITHOUT_CLASSIFICATION	// Logging.log.severe("Error saving converted message", e);
WITHOUT_CLASSIFICATION	// ** End of method saveMessage
WITHOUT_CLASSIFICATION	// build new message body
WITHOUT_CLASSIFICATION	// initial guess
WITHOUT_CLASSIFICATION	// unique boundary found
WITHOUT_CLASSIFICATION	// ** End of method divideMessage
WITHOUT_CLASSIFICATION	// is it HTML or plain text
WITHOUT_CLASSIFICATION	// Logging.log.severe("Error while looking for charset", e);
WITHOUT_CLASSIFICATION	// for easier search / // matching
WITHOUT_CLASSIFICATION	// meta tag with content definition found
WITHOUT_CLASSIFICATION	// charset is specified - find it
WITHOUT_CLASSIFICATION	// step // past // spaces // find position of '>', '"'. or ' ' which is = end // of charset name
WITHOUT_CLASSIFICATION	// charset is found from line, not lcLine => not // forced lower case
WITHOUT_CLASSIFICATION	// we found what we were looking for
WITHOUT_CLASSIFICATION	// Logging.log.severe( // "Error while looking for charset", // e);
WITHOUT_CLASSIFICATION	// this will terminate the loop
WITHOUT_CLASSIFICATION	// end of while loop
WITHOUT_CLASSIFICATION	// ** End of method guessBodyContentType
WITHOUT_CLASSIFICATION	// handle attachment (by creating a link)
WITHOUT_CLASSIFICATION	// no attachments found - should in fact have been checked by the // caller
WITHOUT_CLASSIFICATION	// string to search
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// Server does not support UTF-8 // -> fall back to System default
WITHOUT_CLASSIFICATION	// We trigger an update only when the exists changed // which should be equal with a Recent change.
WITHOUT_CLASSIFICATION	// we are using this inpustream multiple times // --> istream will be closed by CloneStreamMaster
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// handle attachment (by creating a link)
WITHOUT_CLASSIFICATION	// *20030515, kpo* '\n' appended
WITHOUT_CLASSIFICATION	// body untouched
WITHOUT_CLASSIFICATION	// attachments found... // insert start and end for html
WITHOUT_CLASSIFICATION	// insert header for attachment list
WITHOUT_CLASSIFICATION	// build new body part
WITHOUT_CLASSIFICATION	// build new body part
WITHOUT_CLASSIFICATION	// return parts
WITHOUT_CLASSIFICATION	// ** End of method createAttachmentListFromHeader
WITHOUT_CLASSIFICATION	// part of body
WITHOUT_CLASSIFICATION	// insert start and end for html
WITHOUT_CLASSIFICATION	// no attachments found
WITHOUT_CLASSIFICATION	// Logging.log.severe("Error parsing body for attachments", e);
WITHOUT_CLASSIFICATION	// ** End of method createAttachmentListFromAttachmentConverted
WITHOUT_CLASSIFICATION	// ** End of class EudoraMailImportFilter
WITHOUT_CLASSIFICATION	// This Method frees a given String from Comments defined in Rfc822 
WITHOUT_CLASSIFICATION	// This Method delivers the next line
WITHOUT_CLASSIFICATION	// just a simple example
WITHOUT_CLASSIFICATION	// you need a sound.wav in your program folder
WITHOUT_CLASSIFICATION	// get the header of the message
WITHOUT_CLASSIFICATION	// convert the condition string to an int which is easier to handle
WITHOUT_CLASSIFICATION	// get the "To" headerfield from the header
WITHOUT_CLASSIFICATION	// get the "Cc" headerfield from the header
WITHOUT_CLASSIFICATION	// test if our To headerfield contains or contains not the search // string
WITHOUT_CLASSIFICATION	// do the same for the Cc headerfield and OR the results
WITHOUT_CLASSIFICATION	// return the result as boolean value true or false
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// parse for urls / email adresses and substite with HTML-code // html = HtmlParser.substituteURL(html); // html = HtmlParser.substituteEmailAddress(html);
WITHOUT_CLASSIFICATION	// since the indices on the pop server start with 1 we add // a dummy null for the 0 element in the list
WITHOUT_CLASSIFICATION	// start command which adds message to folder // and calls apply-filter on this specific message
WITHOUT_CLASSIFICATION	// If the cause is a SMTPExcpetion then only password // wrong // else bogus authentication mechanism
WITHOUT_CLASSIFICATION	// VALIDATION DISABLE ! Sebastian Witt 25.07.04, // "NAME" <email@somewhat.de> isnt true, which should :( // root@localhost is valid, but not with this check. :( // root is also valid (with local mailserver), but not with this check // :(
WITHOUT_CLASSIFICATION	// "-L" use local tests only // String cmd = "spamassassin -L"; // String cmd = "spamc -c -L";
WITHOUT_CLASSIFICATION	// --
WITHOUT_CLASSIFICATION	// if this is the last token, check if the last element // is the same than in the array
WITHOUT_CLASSIFICATION	// create config-folder //		File file = new File("test_config"); //		file.mkdir(); // //		new Config(file); // //		Logging.DEBUG = true; //		Logging.createDefaultHandler(); // //		// init mail component //		new MailMain().init(); //		new AddressbookMain().init(); // //		// now load all available plugins //		PluginManager.getInstance().initExternalPlugins();
WITHOUT_CLASSIFICATION	// @author: fdietz // Disabled this testcase, as it doesn't really fit into // this category of message operations // It fails because we would have to create a folder-hierarchy // including parent folders to execute the move
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// mock objects contact facade, only returns getContactItem() and // getAllGroups()
WITHOUT_CLASSIFICATION	// public IChatMediator getChatMediator() { // return mediator; // }
WITHOUT_CLASSIFICATION	// // Logging stuff //
WITHOUT_CLASSIFICATION	// if line doesn't start with "From" or line length is 0 // -> save everything in StringBuffer
WITHOUT_CLASSIFICATION	// Date header // we got a date header (store this // fact for later use
WITHOUT_CLASSIFICATION	// append the new Date // header
WITHOUT_CLASSIFICATION	// PlaceRect bgAbsRect = new AbsRect(new AtStart(0), new AtStart(0), new // AtEnd(0), new AtEnd(0), null, null, shadowInsets);
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// check if firstname, middlename or lastname contain only valid // characters
WITHOUT_CLASSIFICATION	//		TagList tagList = new ContactTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	// commandline arguments which can't be handled by the core // are passed along to other subcomponents
WITHOUT_CLASSIFICATION	// register at shutdown manager // -> this will save all configuration data, when closing Columba
WITHOUT_CLASSIFICATION	// g.setColor(bg); // g.fillRect(0, h - 3, 3, 3); // g.fillRect(w - 3, 0, 3, 3); // g.fillRect(w - 3, h - 3, 3, 3);
WITHOUT_CLASSIFICATION	// b_rmonth.setFocusPainted(false); // b_rmonth.setOpaque(false); // b_rmonth.addActionListener(this);
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// create filter configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// add toolbar // panel.add(toolbar, BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	// finally, add all external extension menu additions // for example: Hello World Plugin
WITHOUT_CLASSIFICATION	// small icon for menu // putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("stock_about-16.png"));
WITHOUT_CLASSIFICATION	// update popup menu with search term before its made visible // textField.addPopupMenuListener(this);
WITHOUT_CLASSIFICATION	//textField.showPopup(); //textField.requestFocus();
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// init configuration
WITHOUT_CLASSIFICATION	// Implement the content hander methods that // will delegate SAX events to the tag tracker network.
WITHOUT_CLASSIFICATION	//Integer priority = Integer.valueOf(pattern); //return priority;
WITHOUT_CLASSIFICATION	// We use the attributes and flags from the cache // but the parsed header from the parsed message
WITHOUT_CLASSIFICATION	// create one list containing the marked items, which have to be "unmarked" // and another list containing the items remained to be marked
WITHOUT_CLASSIFICATION	// resync search engine // -> this is only needed for Lucene right now
WITHOUT_CLASSIFICATION	// folders have same root folder // -> for example: two IMAP folders on the same server // -----> this means we use server-side copying which // -----> is much faster than using inputstreams here // // also used for local folders, which saves some parsing work
WITHOUT_CLASSIFICATION	//DocumentParser parser = new DocumentParser(); // decode message body with respect to charset
WITHOUT_CLASSIFICATION	// one line is added to the header for each attachment // (which has a filename defined)
WITHOUT_CLASSIFICATION	// create a Command for every action of this filter // -> create a compound object which encapsulates all commands
WITHOUT_CLASSIFICATION	// First remove all headers that are in the headerlist but // not the Folder
WITHOUT_CLASSIFICATION	// There are still more messages to update // -> issue another fetch messages command
WITHOUT_CLASSIFICATION	// Something is wrong // Sync again
WITHOUT_CLASSIFICATION	// remember parent path // (this is necessary for IMAPRootFolder sync operations)
WITHOUT_CLASSIFICATION	// if line doesn't start with "From" or line length is 0 //  -> save everything in StringBuffer
WITHOUT_CLASSIFICATION	// search request isn't covered by query engine // -> fall back to default search engine
WITHOUT_CLASSIFICATION	// clear message viewer // /tableController.valueChanged(new // ListSelectionEvent(this,-1,-1,false));
WITHOUT_CLASSIFICATION	// register Component as FocusOwner // FocusManager.getInstance().registerComponent(this);
WITHOUT_CLASSIFICATION	// NOTE if SSL is possible we just need the plain login // since SSL does the encryption for us.
WITHOUT_CLASSIFICATION	// this is save because the only shutdown plugin // to stop this server, the configuration isn't touched
WITHOUT_CLASSIFICATION	// register for configuration changes for the html(enabled/disabled) // state
WITHOUT_CLASSIFICATION	// get size of content (width, height is size without scaling) // scaled size
WITHOUT_CLASSIFICATION	//should not occur, otherwise the bundlePath would not be in the // hashtable
WITHOUT_CLASSIFICATION	// small icon for menu //		putValue(SMALL_ICON, ImageLoader //				.getSmallImageIcon("configure_16_mail.png"));
WITHOUT_CLASSIFICATION	// we assume user cancelled search // -> remove cached command
WITHOUT_CLASSIFICATION	// small icon for menu //putValue(SMALL_ICON, ImageLoader.getSmallImageIcon("16_sign.png"));
WITHOUT_CLASSIFICATION	//	public VirtualFolder(FolderItem item) { //		super(item); // //		headerList = new MemoryHeaderList(); // //		ensureValidFilterElement(); //	}
WITHOUT_CLASSIFICATION	//DefaultItem item = new DefaultItem(element); //item.set("header_enabled", getState());
WITHOUT_CLASSIFICATION	//      ->set source reference in composermodel // when replying this is the original sender's message // you selected and replied to
WITHOUT_CLASSIFICATION	// the following lines add cut/copy/paste/undo/redo/selectall // actions support using the Columba action objects. // // This means that we only have a single instance of these // specific actions, which is shared by all menuitems and // toolbar buttons.
WITHOUT_CLASSIFICATION	// 2 columns // rows are added dynamically (no need to define them // here)
WITHOUT_CLASSIFICATION	// Must go backwards or else the filters will swap places with each // other.
WITHOUT_CLASSIFICATION	// comments are not // displayed // correctly in composer
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// execute filter
WITHOUT_CLASSIFICATION	// this action is disabled when the text/plain editor is used // -> so, its safe to just cast to HtmlEditorController here
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// user may have changed hostname. use dialog settings instead of // stored settings
WITHOUT_CLASSIFICATION	// super.getTableCellRendererComponent( table, value, isSelected, // hasFocus, row, column );
WITHOUT_CLASSIFICATION	//bottom.setLayout( new BoxLayout( bottom, BoxLayout.X_AXIS ) ); //bottom.add( Box.createHorizontalStrut());
WITHOUT_CLASSIFICATION	// also register interest in tree seleciton events // for updating the title
WITHOUT_CLASSIFICATION	// Register as listener to the SelectionManger // to check for selection changes
WITHOUT_CLASSIFICATION	// if we don't use this here - actions like reply would only work // on the // the encrypted message
WITHOUT_CLASSIFICATION	// no charset specified -> automatic mode // -> try to determine charset based on content parameter
WITHOUT_CLASSIFICATION	// create attachment component with text, icon // tooltip, context menu and double-click action
WITHOUT_CLASSIFICATION	// changing the selection to the specified row // changeSelection(row, 0, true, false);
WITHOUT_CLASSIFICATION	// at any time i get here uids of length 0. If this is so we should // return and do nothing
WITHOUT_CLASSIFICATION	// *20040510, karlpeder* columns may be null (first time we // visit a folder!?)
WITHOUT_CLASSIFICATION	// Folder trash = (AbstractMessageFolder) // MainInterface.treeModel.getTrashFolder(); // trash folder has uid==105
WITHOUT_CLASSIFICATION	//        putValue(LARGE_ICON, ImageLoader //                .getImageIcon("mark-as-important-16.png"));
WITHOUT_CLASSIFICATION	// table is empty // -> just display empty table
WITHOUT_CLASSIFICATION	// @author: fdietz never request focus //view.requestFocus();
WITHOUT_CLASSIFICATION	// folder.showFilterDialog(((AbstractMailFrameController) // getFrameMediator()));
WITHOUT_CLASSIFICATION	// IMAP folder specific // - Is this folder selectable (does it contain messages?)
WITHOUT_CLASSIFICATION	// minimal unchecked time is 30 Seconds // in ms
WITHOUT_CLASSIFICATION	// create config-folder //		File file = new File("test_config"); //		file.mkdir(); // //		new Config(file); // //		Logging.DEBUG = true; //		Logging.createDefaultHandler(); // //		//		 init mail component //		new MailMain().init(); // //		new AddressbookMain().init(); // //		// now load all available plugins //		PluginManager.getInstance().initExternalPlugins();
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// add message "0.eml" as inputstream to folder
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// create stream from string
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// add stream to folder
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	// close streams
WITHOUT_CLASSIFICATION	/*		((AbstractFolder)MailInterface.treeModel.getRoot()).add(cyrusRoot);		((AbstractFolder) MailInterface.treeModel.getRoot())        .getConfiguration().getRoot().addElement(        		cyrusRoot.getConfiguration().getRoot());		MailInterface.treeModel.nodeStructureChanged(cyrusRoot.getParent());		*/
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// create copy command
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// execute command -> use mock object class as worker which does // nothing
WITHOUT_CLASSIFICATION	// setPreferredSize(new Dimension(250, 300));
WITHOUT_CLASSIFICATION	/*         * buffer.append(getShortClassName(record.getSourceClassName()));         * buffer.append("."); buffer.append(record.getSourceMethodName());         * buffer.append(" - ");         */
WITHOUT_CLASSIFICATION	// // Table model stuff //
WITHOUT_CLASSIFICATION	// // LIST model stuff //
WITHOUT_CLASSIFICATION	// -> import message in Columba
WITHOUT_CLASSIFICATION	// counts how many messages has been // processed // date fetched from "From ???@??? ..."
WITHOUT_CLASSIFICATION	// If a msg has been read, import it into Columba
WITHOUT_CLASSIFICATION	// fetch date from // "From ???@??? // ..."
WITHOUT_CLASSIFICATION	/*					 * For multipart Content-Types we need to take action (if					 * boundary is nonexistent): Eudora stores content type =					 * multipart even though the message is not really multipart -					 * e.g. because an attachment already has has been decoded					 * by Eudora)					 */
WITHOUT_CLASSIFICATION	// attachments found
WITHOUT_CLASSIFICATION	// store header after processing
WITHOUT_CLASSIFICATION	/*		 * If no Date header was found, it is necessary to contruct a new one		 * (this is the case for outgoing messages from Eudora)		 */
WITHOUT_CLASSIFICATION	/*			 * It is HTML, try to find out which charset from meta tag: NB: The			 * seach for charset below is very simple. It assumes that the meta			 * tag to find is on ITS OWN LINE, i.e. " <meta" can be found at the			 * beginning of the line, and all the content of the tag is found on			 * the same line! Could be better, but this is first shot...			 */
WITHOUT_CLASSIFICATION	// body untouched
WITHOUT_CLASSIFICATION	// insert header for attachment list
WITHOUT_CLASSIFICATION	// system beep
WITHOUT_CLASSIFICATION	// for time consuming tasks you need to create // your own Command
WITHOUT_CLASSIFICATION	// border
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //nameLabel.setFont(boldFont);
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //enableLabel.setFont(boldFont);
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	/*	 * @see TestCase#setUp()	 */
WITHOUT_CLASSIFICATION	/*	 * @see TestCase#setUp()	 */
WITHOUT_CLASSIFICATION	/*	 * @see TestCase#tearDown()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#remove(int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemAdded(org.columba.calendar.store.api.StoreEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemRemoved(org.columba.calendar.store.api.StoreEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.calendar.store.api.IStoreListener#itemChanged(org.columba.calendar.store.api.StoreEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.calendar.ui.calendar.api.IActivitySelectionChangedListener#selectionChanged(org.columba.calendar.ui.calendar.api.ActivitySelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#getSelectedActivity()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#getView()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#setViewMode(int)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#recreateFilterRows()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.ashape.interaction.InteractionListener#interactionOccured(com.miginfocom.ashape.interaction.InteractionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.calendar.datearea.ActivityMoveListener#activityMoved(com.miginfocom.calendar.datearea.ActivityMoveEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewToday()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#viewPrevious()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.calendar.ui.calendar.api.ICalendarView#setVisibleDateRange(org.columba.calendar.model.api.IDateRange)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see com.miginfocom.calendar.datearea.ActivityDragResizeListener#activityDragResized(com.miginfocom.calendar.datearea.ActivityDragResizeEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.calendar.ui.list.api.ICalendarListView#getView()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.calendar.ui.list.api.ICalendarListView#getSelected()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IHeaderItem#setId(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#getContacts()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#setContacts(java.util.List)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#addContact(org.columba.addressbook.facade.IContactItem)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#removeContact(org.columba.addressbook.facade.IContactItem)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.facade.IGroupItem#getContactCount()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isCopyActionEnabled() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isPasteActionEnabled() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isDeleteActionEnabled() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isSelectAllActionEnabled() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isUndoActionEnabled() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#isRedoActionEnabled() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#cut() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#copy() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#paste() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#delete() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#undo() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#redo() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#selectAll() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.frame.focus.FocusOwner#getComponent() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.gui.table.model.TableModelDecorator#getRowCount()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getFilterActionList()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getFilterRule()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getEnabled()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#setEnabled(boolean)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#setName(java.lang.String)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#getName()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilter#clone()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.model.IEmailModel#getAddress()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.addressbook.model.IEmailModel#getType()	 */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.core.taskmanager.ITaskManager#removeTaskManagerListener(org.columba.core.taskmanager.TaskManagerListener)         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#updateGUI()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#execute(org.columba.api.command.IWorkerStatusController)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.command.ICommand#getReference()	 */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#removeWorkerStatusChangeListener(org.columba.core.gui.statusbar.event.WorkerStatusChangeListener)         */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#addWorkerStatusChangeListener(org.columba.core.gui.statusbar.event.WorkerStatusChangeListener)         */
WITHOUT_CLASSIFICATION	/*         * (non-Javadoc)         *          * @see org.columba.api.command.IWorkerStatusController#getTimeStamp()         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#getUid()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#setUid(java.lang.String)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#getAction()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterAction#setAction(java.lang.String)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#addEmptyCriteria()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#add(org.columba.core.filter.FilterCriteria)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#remove(int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#removeAll()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#removeLast()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#get(int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#count()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#getCondition()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#setCondition(java.lang.String)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#setCondition(int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterRule#getConditionInt()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#add(org.columba.core.filter.Filter)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#addAll(org.columba.core.filter.FilterList)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#remove(org.columba.core.filter.Filter)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#insert(org.columba.core.filter.Filter, int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#moveUp(org.columba.core.filter.Filter)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#moveDown(org.columba.core.filter.Filter)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#move(org.columba.core.filter.Filter, int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#move(int, int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#indexOf(org.columba.core.filter.Filter)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#count()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterList#get(int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterCriteria#setCriteria(int)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.columba.core.filter.IFilterCriteria#getCriteria()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#get(int)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#remove(int)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.filter.IFilterActionList#addEmptyAction()     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,	 *      java.lang.Object, int, boolean, boolean)	 */
WITHOUT_CLASSIFICATION	// notify all listeners // @see org.columba.core.gui.util.FontProperties // @see org.columba.mail.gui.message.TextViewer // @see org.columba.mail.gui.composer.text.TextEditorController
WITHOUT_CLASSIFICATION	/* (non-Javadoc)         * @see net.javaprog.ui.wizard.AbstractStep#createComponent()         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see net.javaprog.ui.wizard.Step#prepareRendering() */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see net.javaprog.ui.wizard.AbstractStep#createComponent() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see net.javaprog.ui.wizard.Step#prepareRendering() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see net.javaprog.ui.wizard.AbstractStep#createComponent() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see net.javaprog.ui.wizard.Step#prepareRendering() */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#getActiveFrameMediator()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#openView(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.frame.IFrameManager#switchView(org.columba.core.gui.frame.IContainer,	 *      java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#getContentPane()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#loadPositions()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#savePositions()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IFrameMediator#isInitialized()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#registerDockable(org.columba.api.gui.frame.IDockable)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#registerDockable(java.lang.String, java.lang.String, javax.swing.JComponent, javax.swing.JPopupMenu)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#getDockableIterator()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION, float)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#dock(org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDockable, org.columba.api.gui.frame.IDock.REGION, float)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.api.gui.frame.IDock#setSplitProportion(org.columba.api.gui.frame.IDockable, float)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see junit.framework.TestCase#setUp() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*Overwrite the method to maintain line breaks when copying 		 * messages form the MessageViewer.		 * @author aoki-y		 * @see javax.swing.text.html.HTMLDocument#getReader(int)		 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)         * @see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int) */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int) */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see javax.swing.table.TableModel#isCellEditable(int, int) */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see javax.swing.table.TableCellRenderer#getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int) */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfile(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getProfiles()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.profiles.IProfileManager#getCurrentProfile()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,	 *      java.lang.Object, int, boolean, boolean)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.plugin.AbstractConfigPlugin#createPanel()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.plugin.AbstractConfigPlugin#updateComponents(boolean)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see java.net.URLClassLoader#findResource(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.print.cParagraph#print(java.awt.Graphics2D)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getTitle()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getDescription()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.search.api.ISearchResult#getLocation()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.shutdown.IShutdownManager#register(java.lang.Runnable)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.shutdown.IShutdownManager#shutdown(int)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#remove(java.lang.Object[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#set(org.columba.mail.message.HeaderList)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#count()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#getFlags()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.message.HeaderInterface#set(java.lang.String, java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getHeader()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getBodyPart()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getMimePart(int)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getMimePartCount()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#getSource()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.message.Message#setSource(org.columba.ristretto.message.io.Source)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.mail.folder.FolderTreeNode#getName() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.mail.folder.RootFolder#getTrashFolder() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.mail.folder.RootFolder#getInbox() */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folder.AbstractMessageFolder#loadMessageFolderInfo()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#add(org.columba.mail.message.IColumbaHeader, java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#clear()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#containsValue(java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#count()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#get(java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#getUids()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#keySet()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#remove(java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.PersistantHeaderList#persist()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#headerIterator()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#keyIterator()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.folder.headercache.HeaderList#update(java.lang.Object, org.columba.mail.message.IColumbaHeader)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.message.ICloseableIterator#close()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see java.util.Iterator#hasNext()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see java.util.Iterator#next()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see java.util.Iterator#remove()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.FolderTreeNode#addSubfolder(org.columba.mail.folder.FolderTreeNode)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getHeaderFields(java.lang.Object,	 *      java.lang.String[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMessageSourceStream(java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMimePartSourceStream(java.lang.Object,	 *      java.lang.Integer[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#isInboxFolder()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#isTrashFolder()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream,	 *      org.columba.ristretto.message.Attributes)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.AbstractMessageFolder#save()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.FolderTreeNode#addSubfolder(org.columba.mail.folder.FolderTreeNode)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#save()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.RootFolder#getTrashFolder()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.RootFolder#getInbox()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#getMessages()     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#getFileSource(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.mail.folder.IDataStorage#saveInputStream(java.lang.Object, java.io.InputStream)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getAttribute(java.lang.Object,     *      java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getFlags(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getHeaderFields(java.lang.Object,     *      java.lang.String[])     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMessageSourceStream(java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMimePartBodyStream(java.lang.Object,     *      java.lang.Integer[])     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *     * @see org.columba.mail.folder.IMailbox#getMimePartSourceStream(java.lang.Object,     *      java.lang.Integer[])     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream, org.columba.ristretto.message.Attributes)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.Folder#getUids(org.columba.api.command.IWorkerStatusController)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getAttribute(java.lang.Object,	 *      java.lang.String)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getFlags(java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getHeaderFields(java.lang.Object,	 *      java.lang.String[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMessageSourceStream(java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMimePartBodyStream(java.lang.Object,	 *      java.lang.Integer[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#getMimePartSourceStream(java.lang.Object,	 *      java.lang.Integer[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailbox#addMessage(java.io.InputStream,	 *      org.columba.ristretto.message.Attributes)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailFolder#getRootFolder()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageAdded(org.columba.mail.folder.event.IFolderEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageRemoved(org.columba.mail.folder.event.IFolderEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#messageFlagChanged(org.columba.mail.folder.event.IFolderEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderPropertyChanged(org.columba.mail.folder.event.IFolderEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderAdded(org.columba.mail.folder.event.IFolderEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.event.IFolderListener#folderRemoved(org.columba.mail.folder.event.IFolderEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.folder.IMailFolder#removeFolder()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folderoptions.AbstractFolderOptionsPlugin#restoreUISettings()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.mail.gui.composer.AbstractEditorController#setViewText(java.lang.String)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.io.InputStream#read()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.io.InputStream#read(byte[], int, int)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,	 *      java.lang.Object, int, boolean, boolean)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList,	 *      java.lang.Object, int, boolean, boolean)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#updateGUI()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#updateGUI()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#execute(org.columba.api.command.Worker)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.api.command.Command#updateGUI()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent) */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean) */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.mail.gui.config.general.MailOptionsDialog	 *	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.SelectionHandler#getSelection()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.selection.SelectionHandler#setSelection(org.columba.api.command.DefaultCommandReference[])	 */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)   */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.util.Observer#update(java.util.Observable, java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)         * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)         */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.selection.ISelectionListener#selectionChanged(org.columba.core.gui.selection.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#modify(java.lang.Object[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#remove(java.lang.Object[])	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.gui.table.model.TableModelModifier#set(org.columba.mail.message.HeaderList)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.ISelectionListener#selectionChanged(org.columba.core.gui.util.SelectionChangedEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.util.SelectionHandler#getSelection()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#logout()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#checkSupportedAuthenticationMethods()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#isSupported(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setFirstLoginAction(org.columba.mail.imap.IFirstLoginAction)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#ensureSelectedState(org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getStatus(org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#list(java.lang.String, java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#append(java.io.InputStream, org.columba.ristretto.imap.IMAPFlags, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#append(java.io.InputStream, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#createMailbox(java.lang.String, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#deleteFolder(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#renameFolder(java.lang.String, java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#subscribeFolder(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#unsubscribeFolder(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#expunge(org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#copy(org.columba.mail.folder.imap.IMAPFolder, java.lang.Object[], org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchUid(org.columba.ristretto.imap.SequenceSet, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchUids(org.columba.ristretto.imap.SequenceSet, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchFlagsListStartFrom(int, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchFlagsListStartFrom2(int, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchNamespaces()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchHeaderList(org.columba.mail.message.IHeaderList, java.util.List, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimeTree(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimePartBodyStream(java.lang.Object, java.lang.Integer[], org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getHeaders(java.lang.Object, java.lang.String[], org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getAllHeaders(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMimePartSourceStream(java.lang.Object, java.lang.Integer[], org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMessageSourceStream(java.lang.Object, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#markMessage(java.lang.Object[], int, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setFlags(java.lang.Object[], org.columba.ristretto.imap.IMAPFlags, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(java.lang.Object[], org.columba.core.filter.FilterRule, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getIndex(java.lang.Integer, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(org.columba.ristretto.imap.SearchKey, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#search(org.columba.core.filter.FilterRule, org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getMessageFolderInfo(org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#fetchSubscribedFolders()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#isSelected(org.columba.mail.folder.imap.IMAPFolder)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#alertMessage(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#connectionClosed(java.lang.String, java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#existsChanged(java.lang.String, int)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#flagsChanged(java.lang.String, org.columba.ristretto.imap.IMAPFlags)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#parseError(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#recentChanged(java.lang.String, int)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#warningMessage(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#getItem()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#update(java.util.Observable, java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setExistsChangedAction(org.columba.mail.imap.IExistsChangedAction)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setUpdateFlagAction(org.columba.mail.imap.IUpdateFlagAction)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.mail.imap.IImapServer#setObservable(org.columba.api.command.IStatusObservable)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see java.util.Iterator#hasNext() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see java.util.Iterator#next() */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see java.util.Iterator#remove() */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#count()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#getFlags()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.message.HeaderInterface#set(java.lang.String,	 *      java.lang.Object)	 */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getHeader()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getBodyPart()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getMimePart(int)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getMimePartCount()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#getSource()     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#setHeader(org.columba.ristretto.message.Header)     */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.columba.ristretto.message.Message#setSource(org.columba.ristretto.message.io.Source)     */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.ristretto.composer.MimePartRenderer#render(org.columba.ristretto.message.StreamableMimePart)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc) * @see org.columba.ristretto.composer.MimePartRenderer#render(org.columba.ristretto.message.StreamableMimePart) */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getJabberId()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getPresenceMode()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#isSignedOn()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getStatusMessage()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getChatMediator()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setChatMediator(org.columba.chat.api.IChatMediator)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setPresenceMode(org.jivesoftware.smack.packet.Presence.Mode)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setSignedOn(boolean)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#setStatusMessage(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.jabber.IBuddyStatus#getName()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#addChat(java.lang.String)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#getSelected()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#get(int)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.chat.ui.conversation.IConversationController#closeSelected()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.chat.ui.roaster.IRoasterTree#getSelected()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 *	 * @see org.columba.chat.ui.roaster.IRoasterTree#updateBuddyPresence(org.columba.chat.api.IBuddyStatus)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.core.gui.themes.plugin.AbstractThemePlugin#setLookAndFeel()	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.gui.plugin.AbstractConfigPlugin#updateComponents(boolean)	 */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)	 * @see org.columba.core.gui.plugin.AbstractConfigPlugin#createPanel()	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	 */
WITHOUT_CLASSIFICATION	/*	 * (non-Javadoc)	 * 	 * @see org.columba.mail.folder.mailboximport.DefaultMailboxImporter#getDescription()	 */
WITHOUT_CLASSIFICATION	// size // -> @see org.columba.mail.folder.cache.CachedHeaderfields for a // -> complete // -> list of possible attributes
WITHOUT_CLASSIFICATION	// notify listeners // @see org.columba.mail.gui.table.action.ForwardAction
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Process the listeners last to first, notifying // those that are interested in this event
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// 
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	//$JUnit-END$
WITHOUT_CLASSIFICATION	// retrieve event from store
WITHOUT_CLASSIFICATION	// create new event with new UUID
WITHOUT_CLASSIFICATION	//v.getEndDate().getParameters().add(Value.DATE);
WITHOUT_CLASSIFICATION	// FIXME r.setPos();
WITHOUT_CLASSIFICATION	// only import VEVENT and VTODO for now
WITHOUT_CLASSIFICATION	// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStart1.getParameters().getParameter( // Parameter.TZID);
WITHOUT_CLASSIFICATION	// ensure tzid matches date-time timezone.. // Parameter tzId = dtEnd1.getParameters().getParameter( // Parameter.TZID);
WITHOUT_CLASSIFICATION	// ensure tzid matches date-time timezone.. // Parameter tzId = // dtStamp1.getParameters().getParameter( // Parameter.TZID);
WITHOUT_CLASSIFICATION	// RRULE:FREQ=YEARLY;COUNT=5;INTERVAL=1 // RRULE:FREQ=WEEKLY;UNTIL=20060725T215959;INTERVAL=1;BYDAY=TU // RRULE:FREQ=YEARLY;INTERVAL=1
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// wrong xml-format
WITHOUT_CLASSIFICATION	// fall-back to global resource loader
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// Process the events
WITHOUT_CLASSIFICATION	// 2 columns
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$//$NON-NLS-2$ //$NON-NLS-1$//$NON-NLS-2$
WITHOUT_CLASSIFICATION	// 3 columns //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// create a form builder
WITHOUT_CLASSIFICATION	// check if a single entry is selected
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// select new item
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	// show context menu
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //totalLabel.setFont(boldFont); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //unreadLabel.setFont(boldFont); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //recentLabel.setFont(boldFont); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //sizeLabel.setFont(boldFont); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //locationLabel.setFont(boldFont); //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// second row showing the minutes
WITHOUT_CLASSIFICATION	// dark gray line at 12 and 13
WITHOUT_CLASSIFICATION	// light gray line every day
WITHOUT_CLASSIFICATION	// light gray line every day
WITHOUT_CLASSIFICATION	// vertical light gray column separator line
WITHOUT_CLASSIFICATION	// defaultShapeFactory.setShape(AShapeCreator.createTraslucentShapeHorizontal(), // null);
WITHOUT_CLASSIFICATION	// else set it to 23:59:59.999
WITHOUT_CLASSIFICATION	// Drag, resize interactions
WITHOUT_CLASSIFICATION	// Drag, resize interactions
WITHOUT_CLASSIFICATION	// Drag, resize interactions
WITHOUT_CLASSIFICATION	// Color bgPaint = new Color(255, 150, 150);
WITHOUT_CLASSIFICATION	// Edges of the poly shape
WITHOUT_CLASSIFICATION	// END1 because the draw should be // correct
WITHOUT_CLASSIFICATION	// Shadow
WITHOUT_CLASSIFICATION	// AShape textShape = new TextAShape("text", "$" + GridRow.NAME + "$", // textRect, TextAShape.TYPE_SINGE_LINE, font, fgColor, // AtFraction.CENTER, AtStart.START0, Boolean.FALSE);
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// roll correctly over years
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// associate with JavaHelp
WITHOUT_CLASSIFICATION	// check if the user entered valid data
WITHOUT_CLASSIFICATION	// it has to be set
WITHOUT_CLASSIFICATION	// disable max occurrences
WITHOUT_CLASSIFICATION	// set background of scrollpane, in case the list is smaller than the // dockable
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//		TagList tagList = new CalendarTagList(this); //		JScrollPane tagListScrollPane = new JScrollPane(tagList); //		tagListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); //		tagListScrollPane //				.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	// if mouse button was pressed twice times
WITHOUT_CLASSIFICATION	// if mouse button was pressed twice times
WITHOUT_CLASSIFICATION	// if mouse button was pressed twice times
WITHOUT_CLASSIFICATION	//checkbox.setBorder(BorderFactory.createEmptyBorder(2,4,2,4));
WITHOUT_CLASSIFICATION	// public CalendarItem getSelected() { // int row = getSelectedRow(); // // return ((CheckableItemListTableModel) getModel()).getElement(row); // }
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// return if selection change is in flux
WITHOUT_CLASSIFICATION	// example: // "columba://org.columba.contact/<folder-id>/<contact-id>"
WITHOUT_CLASSIFICATION	// create URI representing the contact
WITHOUT_CLASSIFICATION	// check three entries
WITHOUT_CLASSIFICATION	// check if it contains comma character
WITHOUT_CLASSIFICATION	// modify card properties in folder
WITHOUT_CLASSIFICATION	/*		 * XmlElement filter = new XmlElement("filter");		 * defaultElement.addElement(filter);		 */
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// tooltip text
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// get selected folder
WITHOUT_CLASSIFICATION	// register interest on tree selection changes
WITHOUT_CLASSIFICATION	// add to folder
WITHOUT_CLASSIFICATION	//		 register interest on tree selection changes
WITHOUT_CLASSIFICATION	// should never happen
WITHOUT_CLASSIFICATION	// get selected contact/group card
WITHOUT_CLASSIFICATION	// get selected contact/group card
WITHOUT_CLASSIFICATION	// tree has focus
WITHOUT_CLASSIFICATION	// contacts item
WITHOUT_CLASSIFICATION	// initialize completer
WITHOUT_CLASSIFICATION	// ======== this ========
WITHOUT_CLASSIFICATION	// leave dialog empty if no source contact model specified
WITHOUT_CLASSIFICATION	// model -> view
WITHOUT_CLASSIFICATION	// fill formatted textfield
WITHOUT_CLASSIFICATION	// ---- fullnameButton ----
WITHOUT_CLASSIFICATION	// ---- emailTextField2 ----
WITHOUT_CLASSIFICATION	// ---- telephoneTextField2 ----
WITHOUT_CLASSIFICATION	// ---- imTextField4 ----
WITHOUT_CLASSIFICATION	// ---- homepageButton ----
WITHOUT_CLASSIFICATION	// ---- calendarLabel ----
WITHOUT_CLASSIFICATION	// ======== panel8 ========
WITHOUT_CLASSIFICATION	// ---- titleTextField ----
WITHOUT_CLASSIFICATION	// contains "," comma character
WITHOUT_CLASSIFICATION	// default
WITHOUT_CLASSIFICATION	// concrete implementation of actions
WITHOUT_CLASSIFICATION	// table should be updated when tree selection changes
WITHOUT_CLASSIFICATION	/*			 * HeaderItem[] items = new HeaderItem[selection1.length]; items =			 * selection1;			 * HeaderItemDNDManager.getInstance().setHeaderItemList(items);			 */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//setCellRenderer(new AddressbookListRenderer());
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Plain text components don't fire these events
IMPLEMENTATION	// TODO: warn "tried to create Proc object without a block"
IMPLEMENTATION	// TODO: CLONE_SETUP here
IMPLEMENTATION	// TODO: Someday, enable.
IMPLEMENTATION	// Bunch of methods still not implemented
IMPLEMENTATION	// TODO: non-strict option
IMPLEMENTATION	// TODO: opt for 2 and 3 ?
IMPLEMENTATION	// FIXME: Should we make this work with platform's locale, // or continue hardcoding US?
IMPLEMENTATION	// TODO: rescan code range ?
IMPLEMENTATION	// TODO: rescan code range ?
IMPLEMENTATION	// TODO: pass this in?
IMPLEMENTATION	// FIXME: Pass block down?
IMPLEMENTATION	// TODO: do something here?
IMPLEMENTATION	// TODO: port exact behavior from MRI, and move most locking logic into ChannelDescriptor // TODO: for all LOCK_NB cases, return false if they would block
IMPLEMENTATION	// TODO: check if too many open files, GC and try again
IMPLEMENTATION	//TODO deal with UNC names
IMPLEMENTATION	// FIXME: When we get JNA3 we need to properly write this to errno.
IMPLEMENTATION	//FIXME: When we get JNA3 we need to properly write this to errno.
IMPLEMENTATION	// TODO: SafeStringValue here
IMPLEMENTATION	// TODO: turn off readable? am I reading this right? // This only seems to be used while duping below, since modes gets // reset to actual modes afterward //fptr->mode &= (m & FMODE_READABLE) ? ~FMODE_READABLE : ~FMODE_WRITABLE;
IMPLEMENTATION	// TODO: check safe, taint on incoming string
IMPLEMENTATION	// TODO: pipe handler to be reopened with path and "w" mode
IMPLEMENTATION	// FIXME: add text mode to mode flags
IMPLEMENTATION	// TODO: Something about pipe buffer length here
IMPLEMENTATION	// TODO: handle errors in buffered write by retrying until finished or file is closed
IMPLEMENTATION	// TODO: notify threads waiting on descriptors/IO? probably not...
IMPLEMENTATION	// TODO: Ruby re-checks that the buffer string hasn't been modified
IMPLEMENTATION	// TODO: Ruby unlocks the string here
IMPLEMENTATION	// TODO: Ruby truncates string to specific size here, but our bytelist should handle this already?
IMPLEMENTATION	// TODO: Ruby unlocks the string here
IMPLEMENTATION	// TODO: Ruby truncates string to specific size here, but our bytelist should handle this already?
IMPLEMENTATION	// TODO: ruby locks the string here
IMPLEMENTATION	// TODO same zero-length checks as file above
IMPLEMENTATION	// TODO: MRI also can hadle Bignum here
IMPLEMENTATION	// TODO: make threadsafe
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// FIXME: create AttrReaderMethod, AttrWriterMethod, for faster attr access
IMPLEMENTATION	// Do not clone cached methods // FIXME: MRI copies all methods here
IMPLEMENTATION	// TODO: don't calculate the same value 3 times
IMPLEMENTATION	// TODO: 3 times calculate the same value below
IMPLEMENTATION	// TODO: no need to calculate every time.
IMPLEMENTATION	// TODO: Store BEGIN and END information into this node
IMPLEMENTATION	// TODO: put these nil guards into tree (bigger than I want to do right now)
IMPLEMENTATION	// FIXME: Make bodyNode non-null in parser
IMPLEMENTATION	// TODO: call config with scope but no frame
IMPLEMENTATION	// TODO: add trace call?
IMPLEMENTATION	// FIXME: missing arity check
IMPLEMENTATION	// FIXME: optimize for cases where we have no false branch
IMPLEMENTATION	// FIXME: after jump is not in here.  Will if ever be? //Label afterJmp = new Label();
IMPLEMENTATION	// TODO: build arg list based on number of args, optionals, etc
IMPLEMENTATION	// FIXME: missing arity check
IMPLEMENTATION	// SSS FIXME: Traverse up the scope hierarchy to find the constant as long as the parent is a static scope
IMPLEMENTATION	// SSS FIXME: Should I be returning the operand constructed here?
IMPLEMENTATION	// TODO: Add IR instructions for checking method arity! // s.getVariableCompiler().checkMethodArity(required, opt, rest);
IMPLEMENTATION	// FIXME: Ruby 1.9 post args code needs to come here
IMPLEMENTATION	// SSS: FIXME: Somewhere here, we need to record information the type of this operand as String
IMPLEMENTATION	// FIXME: Translate this call below! // s.unwrapPassedBlock();
IMPLEMENTATION	// SSS FIXME: We need to build debug information tracking into the IR in some fashion // So, these methods below would have to have equivalents in IR_Scope implementations.
IMPLEMENTATION	// SSS FIXME: Incomplete!
IMPLEMENTATION	// SSS FIXME: Pick one of bytelist or string, or add internal conversion methods to convert to the default representation
IMPLEMENTATION	// SSS FIXME: To be done
IMPLEMENTATION	//TODO: implement, won't do this now
IMPLEMENTATION	//TODO: implement, won't do this now
IMPLEMENTATION	// TODO: validate port as numeric
IMPLEMENTATION	// TODO: this code should really check if a Ruby equals method is implemented or not.
IMPLEMENTATION	// if not already defined, we add a 'new' that guesses at which signature to use // TODO: just adding first one right now...add in signature-guessing logic
IMPLEMENTATION	// TODO: deal with varargs
IMPLEMENTATION	// TODO: deal with varargs
IMPLEMENTATION	// TODO: other reserved names?
IMPLEMENTATION	// TODO: we can probably release our references to the constantFields // array and static/instance callback hashes at this point. 
IMPLEMENTATION	// TODO: Formalize conversion mechanisms between Java and Ruby
IMPLEMENTATION	// XXX: Check if it's appropriate type?
IMPLEMENTATION	// TODO: call ruby method
IMPLEMENTATION	// TODO: call ruby method
IMPLEMENTATION	// TODO: Add safety check for taintedness
IMPLEMENTATION	// FIXME: Need to detect magic_comment in 1.9 here for encoding
IMPLEMENTATION	/* xxx shouldn't check if valid option variable */
IMPLEMENTATION	// TODO: this isn't handling multibyte yet
IMPLEMENTATION	// TODO: This should be something else like a tCHAR
IMPLEMENTATION	// FIXME: \r logic needed
IMPLEMENTATION	// TODO: note lack of command.com support for Win 9x...
IMPLEMENTATION	// FIXME: Make thread pool threads daemons if necessary
IMPLEMENTATION	/* FIXME: We may be intern'ing more than once.*/
IMPLEMENTATION	/* FIXME: We may be intern'ing more than once.*/
IMPLEMENTATION	/* FIXME: arg_concat missing for opt_call_args*/
IMPLEMENTATION	/* FIXME: arg_concat logic missing for opt_call_args*/
IMPLEMENTATION	// FIXME: This needs to happen for lambdas //            args.checkArgCount(runtime, parameters.length);
IMPLEMENTATION	// FIXME: This needs to happen for lambdas //            args.checkArgCount(runtime, parameters.length);
IMPLEMENTATION	// TODO: make it cross runtime safe by COW or eager copy
IMPLEMENTATION	// FIXME: don't use RubyIO for this
IMPLEMENTATION	// FIXME: don't use RubyIO for this
IMPLEMENTATION	// FIXME: don't use RubyIO for this
IMPLEMENTATION	// TODO: check the return value here
IMPLEMENTATION	// TODO: check the return value here
IMPLEMENTATION	// TODO: Make sure all appropriate open flags are added to this check.
IMPLEMENTATION	//subList.clear(); // Sublist is supposed to share same backing store as list...TODO in RubyArray. //assertTrue(list.size() == 1);
IMPLEMENTATION	// SSS FIXME: Cannot optimize this without assuming that Range.to_ary method has not redefined. // So for now, return null!
IMPLEMENTATION	// TODO Auto-generated method stub
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO Auto-generated catch block
IMPLEMENTATION	// TODO: no need to calculate every time.
IMPLEMENTATION	// TODO: no need to calculate every time.
IMPLEMENTATION	// TODO: check for ascii string
IMPLEMENTATION	// filter out any Java primitive names // TODO: should check against all Java reserved names here, not just primitives
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// TODO: must override in RubyModule to pick up constants
IMPLEMENTATION	// TODO: missing additional logic for dealing with conflicting protected fields.
IMPLEMENTATION	// TODO: better detection when path is absolute or not. // If the path isn't absolute, then prepend the current working // directory to the path.
IMPLEMENTATION	// FIXME: When we get JNA3 we need to properly write this to errno.
IMPLEMENTATION	// FIX replace type() == ... with isInstanceOf(...)
IMPLEMENTATION	/* TODO: MRI is just a when node.  We need this extra logic for IDE consumers (null in casenode statement should be implicit nil)*/
IMPLEMENTATION	// TODO: This and recacheRespondsTo needed to be synchronized for JRUBY-3466, // but this degraded performance nearly 2x. It's still faster than MRI, but // a reanalysis of this code may show a faster way to ensure we're caching // safely.
IMPLEMENTATION	// TODO: adjust length so it won't fall in the middle  // of a multi-byte character. MRI's sprintf.c uses tables // in a modified version of regex.c, which assume some // particular  encoding for a given installation/application. // (See regex.c#re_mbcinit in ruby-1.8.5-p12)  // // This is only an issue if the user specifies a precision // that causes the string to be truncated. The same issue // would arise taking a substring of a ByteList-backed RubyString.
WITHOUT_CLASSIFICATION	// set constants now that they're initialized
WITHOUT_CLASSIFICATION	// line 335
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?
WITHOUT_CLASSIFICATION	// line 362
WITHOUT_CLASSIFICATION	// line 372
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	// line 391
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	/* ^D */
WITHOUT_CLASSIFICATION	/* ^Z */
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyLen 496
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDefRed 889
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyRindex 889
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//Do nothing
WITHOUT_CLASSIFICATION	//Do nothing
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// return result
WITHOUT_CLASSIFICATION	// name
WITHOUT_CLASSIFICATION	// Define System.getProperties() in ENV_JAVA
WITHOUT_CLASSIFICATION	// Accessor methods.
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// call getpwent to fail early if unsupported
WITHOUT_CLASSIFICATION	// fall back on env entry for USER
WITHOUT_CLASSIFICATION	// try to read grent to fail fast
WITHOUT_CLASSIFICATION	// define ARGV and $* for this runtime
WITHOUT_CLASSIFICATION	// Version information:
WITHOUT_CLASSIFICATION	// after defn of $stderr as the call may produce warnings
WITHOUT_CLASSIFICATION	// ARGF, $< object
WITHOUT_CLASSIFICATION	// if the environment variables can't be obtained, define an empty ENV
WITHOUT_CLASSIFICATION	// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.
WITHOUT_CLASSIFICATION	//$@ returns nil if $!.backtrace is not an array
WITHOUT_CLASSIFICATION	// include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.
WITHOUT_CLASSIFICATION	// this _is_ legal (when removing an undef)
WITHOUT_CLASSIFICATION	// What we passed to the constructor for method 'path'
WITHOUT_CLASSIFICATION	// ----- Ruby Class Methods ----------------------------------------------------
WITHOUT_CLASSIFICATION	// // CONSTANT TABLE METHODS - pass to delegate //
WITHOUT_CLASSIFICATION	// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?
WITHOUT_CLASSIFICATION	// MRI behavior
WITHOUT_CLASSIFICATION	// ----- Ruby Instance Methods -------------------------------------------------
WITHOUT_CLASSIFICATION	// Make sure any read()s after close fail.
WITHOUT_CLASSIFICATION	// ----- Helper Methods --------------------------------------------------------
WITHOUT_CLASSIFICATION	// try to use POSIX for this first
WITHOUT_CLASSIFICATION	// otherwise fall back on the old way
WITHOUT_CLASSIFICATION	// Proc class
WITHOUT_CLASSIFICATION	// No passed in block, lets check next outer frame for one ('Proc.new')
WITHOUT_CLASSIFICATION	// modify the block with a new backref/lastline-grabbing scope
WITHOUT_CLASSIFICATION	// for future compatibility as constructors move toward not accepting metaclass?
WITHOUT_CLASSIFICATION	//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;
WITHOUT_CLASSIFICATION	// This looks wrong, but it's the way MRI does it.
WITHOUT_CLASSIFICATION	// rb_exc_new3
WITHOUT_CLASSIFICATION	// NOTE: The indicies here match exactly the signal values; do not reorder
WITHOUT_CLASSIFICATION	//registerThreadDumpSignalHandler(runtime);
WITHOUT_CLASSIFICATION	// IOT is also 6
WITHOUT_CLASSIFICATION	// CLD is also 20
WITHOUT_CLASSIFICATION	// RubySignal
WITHOUT_CLASSIFICATION	// ZStream actually *isn't* allocatable
WITHOUT_CLASSIFICATION	// MRI behavior, enforced by tests
WITHOUT_CLASSIFICATION	// it's safe since adler.update doesn't modify the array
WITHOUT_CLASSIFICATION	// MRI behavior: in finished mode, we work as pass-through
WITHOUT_CLASSIFICATION	// SYNC_FLUSH
WITHOUT_CLASSIFICATION	// By default, NO_FLUSH
WITHOUT_CLASSIFICATION	//io.finish();
WITHOUT_CLASSIFICATION	// should invoke seek on realIo
WITHOUT_CLASSIFICATION	// hmm...
WITHOUT_CLASSIFICATION	// Called before any write to make sure the // header is always written before the first bytes
WITHOUT_CLASSIFICATION	// For JDK 1.4 we can use "cal.getTimeInMillis()"
WITHOUT_CLASSIFICATION	// We can just use dt, since it is immutable
WITHOUT_CLASSIFICATION	// float number of seconds
WITHOUT_CLASSIFICATION	// modified to match how hash is calculated in 1.8.2
WITHOUT_CLASSIFICATION	// dump usec, not msec
WITHOUT_CLASSIFICATION	/* Time class methods */
WITHOUT_CLASSIFICATION	// marsaling dumps usec, not msec
WITHOUT_CLASSIFICATION	// MRI accepts additional wday argument which appears to be ignored.
WITHOUT_CLASSIFICATION	// set up with min values and then add to allow rolling over
WITHOUT_CLASSIFICATION	// the instant at which we will ask dtz what the difference between DST and // standard time is
WITHOUT_CLASSIFICATION	// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST
WITHOUT_CLASSIFICATION	// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	/* If the value will fit in a Fixnum, return one of those. */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)
WITHOUT_CLASSIFICATION	// num2int is also implemented
WITHOUT_CLASSIFICATION	// num2int is also implemented
WITHOUT_CLASSIFICATION	// no bignorm here needed
WITHOUT_CLASSIFICATION	// wow, the only time we can use the java protocol ;)
WITHOUT_CLASSIFICATION	// Pad with a 0
WITHOUT_CLASSIFICATION	// BigInteger required a sign byte in incoming array
WITHOUT_CLASSIFICATION	// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.
WITHOUT_CLASSIFICATION	// We do this b/c make_tmpname might be overridden
WITHOUT_CLASSIFICATION	// ???
WITHOUT_CLASSIFICATION	// PID
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// elements and trailing nils
WITHOUT_CLASSIFICATION	// Dir::tmpdir
WITHOUT_CLASSIFICATION	// volatile to ensure that initial nil-fill is visible to other threads
WITHOUT_CLASSIFICATION	/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */
WITHOUT_CLASSIFICATION	/* rb_ary_new2     * just allocates the internal array     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/*      * plain internal array assignment     */
WITHOUT_CLASSIFICATION	/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */
WITHOUT_CLASSIFICATION	/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */
WITHOUT_CLASSIFICATION	// Create global constants and variables
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.
WITHOUT_CLASSIFICATION	// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// 1.9 seems to just do inspect for to_s now
WITHOUT_CLASSIFICATION	// possibly should not in object space
WITHOUT_CLASSIFICATION	// only fill if there actually will remain trailing storage
WITHOUT_CLASSIFICATION	// rb_ary_new4
WITHOUT_CLASSIFICATION	// rb_ary_new4
WITHOUT_CLASSIFICATION	// from DUP_SETUP
WITHOUT_CLASSIFICATION	// If already inspecting, there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	// See [ruby-core:17483]
WITHOUT_CLASSIFICATION	// See [ruby-core:17483]
WITHOUT_CLASSIFICATION	// Satisfy java.util.List interface (for Java integration)
WITHOUT_CLASSIFICATION	// pre-set for the sake of terminating recursive calls
WITHOUT_CLASSIFICATION	/* root fiber */
WITHOUT_CLASSIFICATION	// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.
WITHOUT_CLASSIFICATION	//  See http://www.gzip.org/zlib/rfc-gzip.html
WITHOUT_CLASSIFICATION	// extras flag
WITHOUT_CLASSIFICATION	// Zlib::NO_FLUSH
WITHOUT_CLASSIFICATION	// ...nothing
WITHOUT_CLASSIFICATION	// utility method
WITHOUT_CLASSIFICATION	// Prepare LoadService and load path
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// flags // 4 bytes of modified time
WITHOUT_CLASSIFICATION	// range_each_func(range, step_i, b, e, args);
WITHOUT_CLASSIFICATION	// 1.8 "include?"
WITHOUT_CLASSIFICATION	// any BigInteger is bigger than Fixnum and we don't have FIXABLE
WITHOUT_CLASSIFICATION	// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal
WITHOUT_CLASSIFICATION	// MRI does it!
WITHOUT_CLASSIFICATION	// won't hurt fixnums
WITHOUT_CLASSIFICATION	// it won't hurt fixnums
WITHOUT_CLASSIFICATION	// RubyClassPathVariable
WITHOUT_CLASSIFICATION	// not to be confused with RubyObject's flags
WITHOUT_CLASSIFICATION	// second argument is allowed, but ignored (MRI)
WITHOUT_CLASSIFICATION	// we are presumably running a precompiled class; load directly
WITHOUT_CLASSIFICATION	// terminate; tryCompile will have printed out an error and we're done
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// do nothing, this iteration restarts
WITHOUT_CLASSIFICATION	// recheck condition
WITHOUT_CLASSIFICATION	// Get the main threadcontext (gets constructed for us)
WITHOUT_CLASSIFICATION	// Construct key services
WITHOUT_CLASSIFICATION	// initialize the root of the class hierarchy completely
WITHOUT_CLASSIFICATION	// Construct the top-level execution frame and scope for the main thread
WITHOUT_CLASSIFICATION	// Initialize all the core classes
WITHOUT_CLASSIFICATION	// Initialize the "dummy" class used as a marker
WITHOUT_CLASSIFICATION	// Initialize Kernel and include into Object
WITHOUT_CLASSIFICATION	// Object is ready, create top self
WITHOUT_CLASSIFICATION	// Pre-create all the core classes potentially referenced during startup
WITHOUT_CLASSIFICATION	// Math depends on all numeric types
WITHOUT_CLASSIFICATION	// depends on IO, FileTest
WITHOUT_CLASSIFICATION	// initialize builtin libraries
WITHOUT_CLASSIFICATION	// Require in all libraries specified on command line
WITHOUT_CLASSIFICATION	// Bootstrap the top of the hierarchy
WITHOUT_CLASSIFICATION	// we try to get the classloader that loaded JRuby, falling back on System
WITHOUT_CLASSIFICATION	// determine spacing
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	// For JSR 223 support: see http://scripting.java.net/
WITHOUT_CLASSIFICATION	// use this for JRuby-internal finalizers
WITHOUT_CLASSIFICATION	// this method is for finalizers registered via ObjectSpace
WITHOUT_CLASSIFICATION	// new factory methods ------------------------------------------------------------------------
WITHOUT_CLASSIFICATION	//        assert internedName == internedName.intern() : internedName + " is not interned";
WITHOUT_CLASSIFICATION	// Equivalent of Data_Wrap_Struct
WITHOUT_CLASSIFICATION	// default: don't retain
WITHOUT_CLASSIFICATION	// ChannelDescriptors opened by sysopen are cached to avoid collection
WITHOUT_CLASSIFICATION	// Default objects
WITHOUT_CLASSIFICATION	// record separator var, to speed up io ops that use it
WITHOUT_CLASSIFICATION	// former java.lang.System concepts now internalized for MVM
WITHOUT_CLASSIFICATION	// Java support
WITHOUT_CLASSIFICATION	// Parser stats
WITHOUT_CLASSIFICATION	// Compilation
WITHOUT_CLASSIFICATION	// can't read non-standard properties
WITHOUT_CLASSIFICATION	// can't create custom classloaders
WITHOUT_CLASSIFICATION	// mutex that controls modifications of user-defined finalizers
WITHOUT_CLASSIFICATION	// mutex that controls modifications of internal finalizers
WITHOUT_CLASSIFICATION	// A thread pool to use for executing this runtime's Ruby threads
WITHOUT_CLASSIFICATION	// A global object lock for class hierarchy mutations
WITHOUT_CLASSIFICATION	// initial spaces // spaces before "at"
WITHOUT_CLASSIFICATION	// event name // filename // line numbers should be 1-based
WITHOUT_CLASSIFICATION	// The method is intentionally not public, since it typically should // not be used outside of the core.
WITHOUT_CLASSIFICATION	// Note: this field and the following static initializer // must be located be in this order!
WITHOUT_CLASSIFICATION	// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.
WITHOUT_CLASSIFICATION	// quoted-printable
WITHOUT_CLASSIFICATION	// default options
WITHOUT_CLASSIFICATION	// iso-2022-jp
WITHOUT_CLASSIFICATION	// iso-2022-jp
WITHOUT_CLASSIFICATION	// Shift_JIS
WITHOUT_CLASSIFICATION	// Shift_JIS
WITHOUT_CLASSIFICATION	// EUC-JP
WITHOUT_CLASSIFICATION	// EUC-JP
WITHOUT_CLASSIFICATION	// UTF-8
WITHOUT_CLASSIFICATION	// UTF-8
WITHOUT_CLASSIFICATION	// long name option
WITHOUT_CLASSIFICATION	// conversion
WITHOUT_CLASSIFICATION	/*  ================     *  Singleton Methods     *  ================      */
WITHOUT_CLASSIFICATION	// string doesn't share any resources
WITHOUT_CLASSIFICATION	// string has it's own ByteList, but it's pointing to a shared buffer (byte[])
WITHOUT_CLASSIFICATION	// string doesn't have it's own ByteList (values)
WITHOUT_CLASSIFICATION	// ENC_CODERANGE_ASCIIONLY
WITHOUT_CLASSIFICATION	// rb_enc_str_asciionly_p
WITHOUT_CLASSIFICATION	// rb_enc_str_coderange
WITHOUT_CLASSIFICATION	// rb_str_hash_cmp
WITHOUT_CLASSIFICATION	// Deprecated String construction routines
WITHOUT_CLASSIFICATION	// String construction routines by NOT byte[] buffer and NOT making the target String shared 
WITHOUT_CLASSIFICATION	/* rb_str_subseq */
WITHOUT_CLASSIFICATION	// no need to assign encoding, same bytelist shared
WITHOUT_CLASSIFICATION	// if len == 0 then shared empty
WITHOUT_CLASSIFICATION	/* rb_str_cmp_m */
WITHOUT_CLASSIFICATION	// we limit to int because ByteBuffer can only allocate int sizes
WITHOUT_CLASSIFICATION	// // rb_str_buf_append
WITHOUT_CLASSIFICATION	// encoding doesn't have to be copied.
WITHOUT_CLASSIFICATION	// this really needs to be inlined here
WITHOUT_CLASSIFICATION	// must not reallocate
WITHOUT_CLASSIFICATION	// Illegal combination
WITHOUT_CLASSIFICATION	// use 1.8 impl
WITHOUT_CLASSIFICATION	/* RubyString aka rb_string_value */
WITHOUT_CLASSIFICATION	/* bang: true, no match, no substitution */
WITHOUT_CLASSIFICATION	// out of byte range // there will be no match for sure
WITHOUT_CLASSIFICATION	/* len + margin */
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	/* copy pre-match substr */
WITHOUT_CLASSIFICATION	// string given
WITHOUT_CLASSIFICATION	// hash given
WITHOUT_CLASSIFICATION	// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"
WITHOUT_CLASSIFICATION	/* substring longer than string */
WITHOUT_CLASSIFICATION	/* rb_str_substr */
WITHOUT_CLASSIFICATION	// nothing
WITHOUT_CLASSIFICATION	// nothing
WITHOUT_CLASSIFICATION	/* rb_str_splice */
WITHOUT_CLASSIFICATION	// TODO: keep cr // TODO: rb_str_splice_0
WITHOUT_CLASSIFICATION	// keep cr ?
WITHOUT_CLASSIFICATION	// keep cr ?
WITHOUT_CLASSIFICATION	/* wrapped to \0...\0.  search next valid char. */
WITHOUT_CLASSIFICATION	// only this case affects backrefs 
WITHOUT_CLASSIFICATION	// only this case affects backrefs 
WITHOUT_CLASSIFICATION	// modified
WITHOUT_CLASSIFICATION	// modified
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	// QTRUE
WITHOUT_CLASSIFICATION	/* retrieve last replacer */
WITHOUT_CLASSIFICATION	// Check the length every iteration, since // the block can modify this string.
WITHOUT_CLASSIFICATION	// long size * bits in byte
WITHOUT_CLASSIFICATION	// from encoding, special-casing ASCII* to ASCII
WITHOUT_CLASSIFICATION	// to encoding, same special-casing
WITHOUT_CLASSIFICATION	// create a lightweight thunk
WITHOUT_CLASSIFICATION	// decode from "from" and encode to "to"
WITHOUT_CLASSIFICATION	// create a lightweight thunk
WITHOUT_CLASSIFICATION	//Kernel is the only Module that doesn't need an implementor
WITHOUT_CLASSIFICATION	// no binding given, use (eval)
WITHOUT_CLASSIFICATION	// interned, OK for "fast" methods
WITHOUT_CLASSIFICATION	// File to be loaded by autoload has already been or is being loaded.
WITHOUT_CLASSIFICATION	// rb_cstr_to_dbl case
WITHOUT_CLASSIFICATION	// We break if we know this sleep was explicitly woken up/interrupted
WITHOUT_CLASSIFICATION	// exec process, create IO with process
WITHOUT_CLASSIFICATION	// Zero sleeps forever
WITHOUT_CLASSIFICATION	// file given, use it and force it into binding
WITHOUT_CLASSIFICATION	// Explicit zero in MRI returns immediately
WITHOUT_CLASSIFICATION	// Spurious wakeup-loop
WITHOUT_CLASSIFICATION	// adjusts paths started with '/' or '\\', on windows.
WITHOUT_CLASSIFICATION	// file not given
WITHOUT_CLASSIFICATION	// string to eval
WITHOUT_CLASSIFICATION	// binding given, use binding's file
WITHOUT_CLASSIFICATION	// ?g  | boolean | True if file1 has the \CF{setgid} bit
WITHOUT_CLASSIFICATION	// bomb out, it's not a binding or a proc
WITHOUT_CLASSIFICATION	// Ordering of array traversal not important, just intuitive
WITHOUT_CLASSIFICATION	//Catch active, throw for catch to handle
WITHOUT_CLASSIFICATION	// No catch active for this throw
WITHOUT_CLASSIFICATION	// without full tracing, many events will not fire
WITHOUT_CLASSIFICATION	// ignore if it's not a global var
WITHOUT_CLASSIFICATION	// MRI behavior: use first byte of string value if len > 0
WITHOUT_CLASSIFICATION	// MRI behavior: now check arg count
WITHOUT_CLASSIFICATION	// ?A  | Time    | Last access time for file1
WITHOUT_CLASSIFICATION	// ?b  | boolean | True if file1 is a block device
WITHOUT_CLASSIFICATION	// ?c  | boolean | True if file1 is a character device
WITHOUT_CLASSIFICATION	// ?C  | Time    | Last change time for file1
WITHOUT_CLASSIFICATION	// ?d  | boolean | True if file1 exists and is a directory
WITHOUT_CLASSIFICATION	// ?e  | boolean | True if file1 exists
WITHOUT_CLASSIFICATION	// ?f  | boolean | True if file1 exists and is a regular file
WITHOUT_CLASSIFICATION	// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group
WITHOUT_CLASSIFICATION	// ?k  | boolean | True if file1 exists and has the sticky bit set
WITHOUT_CLASSIFICATION	// ?M  | Time    | Last modification time for file1
WITHOUT_CLASSIFICATION	// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid
WITHOUT_CLASSIFICATION	// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 
WITHOUT_CLASSIFICATION	// ?p  | boolean | True if file1 exists and is a fifo
WITHOUT_CLASSIFICATION	// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller
WITHOUT_CLASSIFICATION	// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil
WITHOUT_CLASSIFICATION	// ?S  | boolean | True if file1 exists and is a socket
WITHOUT_CLASSIFICATION	// ?u  | boolean | True if file1 has the setuid bit set
WITHOUT_CLASSIFICATION	// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid
WITHOUT_CLASSIFICATION	// ?X  | boolean | True if file1 exists and is executable by the real uid/gid
WITHOUT_CLASSIFICATION	// ?z  | boolean | True if file1 exists and has a zero length
WITHOUT_CLASSIFICATION	// ?=  | boolean | True if the modification times of file1 and file2 are equal
WITHOUT_CLASSIFICATION	// ?<  | boolean | True if the modification time of file1 is prior to that of file2
WITHOUT_CLASSIFICATION	// ?>  | boolean | True if the modification time of file1 is after that of file2
WITHOUT_CLASSIFICATION	// ?-  | boolean | True if file1 and file2 are identical
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// Error info is per-thread
WITHOUT_CLASSIFICATION	// init errorInfo to nil
WITHOUT_CLASSIFICATION	// if we're already aborting, we can receive no further mail
WITHOUT_CLASSIFICATION	// If this thread is sleeping or stopped, wake it
WITHOUT_CLASSIFICATION	// new interrupt, to hopefully wake it out of any blocking IO
WITHOUT_CLASSIFICATION	// set to default thread group
WITHOUT_CLASSIFICATION	// set to default thread group
WITHOUT_CLASSIFICATION	// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately
WITHOUT_CLASSIFICATION	// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately
WITHOUT_CLASSIFICATION	// for Thread::start, which does not call the subclass's initialize
WITHOUT_CLASSIFICATION	// JRUBY-3568, inherit threadgroup or use default
WITHOUT_CLASSIFICATION	// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil
WITHOUT_CLASSIFICATION	// If the target thread is sleeping or stopped, wake it
WITHOUT_CLASSIFICATION	// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.
WITHOUT_CLASSIFICATION	// attempt to decriticalize all if we're the critical thread
WITHOUT_CLASSIFICATION	// not valid for "dead" state
WITHOUT_CLASSIFICATION	// If the killee thread is the same as the killer thread, just die
WITHOUT_CLASSIFICATION	// check for thread events, in case we've been woken up to die
WITHOUT_CLASSIFICATION	// check for thread events, in case we've been woken up to die
WITHOUT_CLASSIFICATION	// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...
WITHOUT_CLASSIFICATION	// can't select, just have to do a blocking call
WITHOUT_CLASSIFICATION	// compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	// Create Constants class
WITHOUT_CLASSIFICATION	// Create constants for open flags
WITHOUT_CLASSIFICATION	// Strip off the O_ prefix, so they become File::RDONLY, and so on
WITHOUT_CLASSIFICATION	// Create constants for flock
WITHOUT_CLASSIFICATION	// File::Constants module is included in IO.
WITHOUT_CLASSIFICATION	// Make sure any existing lock is released before we try and close the file
WITHOUT_CLASSIFICATION	// null channel always succeeds for all locking operations
WITHOUT_CLASSIFICATION	// Paths which end in "/" or "\\" must be stripped off.
WITHOUT_CLASSIFICATION	// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.
WITHOUT_CLASSIFICATION	// Return false here
WITHOUT_CLASSIFICATION	// Return false here
WITHOUT_CLASSIFICATION	// We're not actually a real file, so we can't flock
WITHOUT_CLASSIFICATION	// Should we do anything?
WITHOUT_CLASSIFICATION	/* File class methods */
WITHOUT_CLASSIFICATION	// MRI-compatible basename handling for windows drive letter paths
WITHOUT_CLASSIFICATION	// strip c: away from relative-pathed name
WITHOUT_CLASSIFICATION	// C:\ is returned unchanged
WITHOUT_CLASSIFICATION	// -1 no match; 0 it is dot file not extension
WITHOUT_CLASSIFICATION	// trim trailing slashes
WITHOUT_CLASSIFICATION	// Dot is not at beginning and not at end of filename. 
WITHOUT_CLASSIFICATION	// Handle ~user paths 
WITHOUT_CLASSIFICATION	// compensate for missing slash after drive letter on windows
WITHOUT_CLASSIFICATION	// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")
WITHOUT_CLASSIFICATION	// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.
WITHOUT_CLASSIFICATION	// No directory delimeter.  Rest of string is username
WITHOUT_CLASSIFICATION	// If there's a second argument, it's the path to which the first  // argument is relative.
WITHOUT_CLASSIFICATION	// Handle ~user paths.
WITHOUT_CLASSIFICATION	// If there's no second argument, simply use the working directory  // of the runtime.
WITHOUT_CLASSIFICATION	// Find out which string to check.
WITHOUT_CLASSIFICATION	// Single '~' as whole path to expand
WITHOUT_CLASSIFICATION	// Count number of extra slashes in the beginning of the string.
WITHOUT_CLASSIFICATION	// '~user/...' as path to expand
WITHOUT_CLASSIFICATION	// '~/...' as path to expand
WITHOUT_CLASSIFICATION	// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.
WITHOUT_CLASSIFICATION	// If there are N slashes, then we want N-1.
WITHOUT_CLASSIFICATION	// no canonical path yet or length is zero, and we have a / followed by a dot...
WITHOUT_CLASSIFICATION	// we don't have another slash after this, so replace /. with /
WITHOUT_CLASSIFICATION	// we do have another slash; omit both / and . (JRUBY-1606)
WITHOUT_CLASSIFICATION	// do nothing, we should not delete the drive letter
WITHOUT_CLASSIFICATION	/* rb: check_modifiable */
WITHOUT_CLASSIFICATION	/* rb: readable */
WITHOUT_CLASSIFICATION	// rename is successful
WITHOUT_CLASSIFICATION	// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 
WITHOUT_CLASSIFICATION	// try to rename one more time
WITHOUT_CLASSIFICATION	// Can we produce IOError which bypasses a close?
WITHOUT_CLASSIFICATION	// Fast path since JNA stat is about 10x slower than this
WITHOUT_CLASSIFICATION	// RubyContinuation
WITHOUT_CLASSIFICATION	/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */
WITHOUT_CLASSIFICATION	// 16 ?
WITHOUT_CLASSIFICATION	// generation count for O(1) clears
WITHOUT_CLASSIFICATION	// size + 1;
WITHOUT_CLASSIFICATION	// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen
WITHOUT_CLASSIFICATION	// ------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------
WITHOUT_CLASSIFICATION	// put implementation
WITHOUT_CLASSIFICATION	// get implementation
WITHOUT_CLASSIFICATION	// specialized for value
WITHOUT_CLASSIFICATION	// delete implementation
WITHOUT_CLASSIFICATION	// n.b. we need to recompute the hash in case the key object was modified
WITHOUT_CLASSIFICATION	/* ============================     * End of hash internals     * ============================     */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================     */
WITHOUT_CLASSIFICATION	// update the hash value
WITHOUT_CLASSIFICATION	// other hash does not contain key
WITHOUT_CLASSIFICATION	// rb_yield_values(2,...) equivalent
WITHOUT_CLASSIFICATION	// Satisfy java.util.Set interface (for Java integration)
WITHOUT_CLASSIFICATION	// remain where we are
WITHOUT_CLASSIFICATION	// We use file test since it is faster than a stat; also euid == uid in Java always
WITHOUT_CLASSIFICATION	// default: don't retain
WITHOUT_CLASSIFICATION	// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted
WITHOUT_CLASSIFICATION	// Not exposed by filetest, but so similiar in nature that it is stored here
WITHOUT_CLASSIFICATION	// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.
WITHOUT_CLASSIFICATION	// first try as directory
WITHOUT_CLASSIFICATION	// next as regular file
WITHOUT_CLASSIFICATION	// We only want IO objects with valid streams (better to error now). 
WITHOUT_CLASSIFICATION	// NIO-based
WITHOUT_CLASSIFICATION	// NIO-based
WITHOUT_CLASSIFICATION	// Stream-based
WITHOUT_CLASSIFICATION	// special constructor that accepts stream, not channel
WITHOUT_CLASSIFICATION	/*     * We use FILE versus IO to match T_FILE in MRI.     */
WITHOUT_CLASSIFICATION	// Constants for seek
WITHOUT_CLASSIFICATION	// confirm we're not reopening self's channel
WITHOUT_CLASSIFICATION	// check if we're a stdio IO, and ensure we're not badly mutilated
WITHOUT_CLASSIFICATION	// dup2 new fd into self to preserve fileno and references to it
WITHOUT_CLASSIFICATION	// re-register, since fileno points at something new now
WITHOUT_CLASSIFICATION	// re-register the descriptor
WITHOUT_CLASSIFICATION	// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler
WITHOUT_CLASSIFICATION	// re-register
WITHOUT_CLASSIFICATION	// A potentially previously close IO is being 'reopened'.
WITHOUT_CLASSIFICATION	/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */
WITHOUT_CLASSIFICATION	// loop until we see the nth separator char
WITHOUT_CLASSIFICATION	// if we hit EOF or reached limit then we're done
WITHOUT_CLASSIFICATION	// this is for a range check, near as I can tell
WITHOUT_CLASSIFICATION	// IO class methods.
WITHOUT_CLASSIFICATION	// use original modes
WITHOUT_CLASSIFICATION	// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).
WITHOUT_CLASSIFICATION	// redundant, done above as well
WITHOUT_CLASSIFICATION	// MRI behavior: swallow StandardErorrs
WITHOUT_CLASSIFICATION	// -1 == don't set permissions
WITHOUT_CLASSIFICATION	// isRetained=true
WITHOUT_CLASSIFICATION	// This appears to be some windows-only mode.  On a java platform this is a no-op
WITHOUT_CLASSIFICATION	// if not sync, we switch to write buffered mode
WITHOUT_CLASSIFICATION	/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */
WITHOUT_CLASSIFICATION	//Everything written
WITHOUT_CLASSIFICATION	//            return len - n;
WITHOUT_CLASSIFICATION	// Claims conversion is done via 'to_s' in docs.
WITHOUT_CLASSIFICATION	// Of course this isn't particularly useful.
WITHOUT_CLASSIFICATION	// Must be back on first line on rewind.
WITHOUT_CLASSIFICATION	// Register the new descriptor
WITHOUT_CLASSIFICATION	// cleanup, raising errors if any
WITHOUT_CLASSIFICATION	// hmmmm
WITHOUT_CLASSIFICATION	// I believe Ruby bails out with a "bug" if closing fails
WITHOUT_CLASSIFICATION	// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!
WITHOUT_CLASSIFICATION	// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.
WITHOUT_CLASSIFICATION	// Length to read
WITHOUT_CLASSIFICATION	// String/Buffer to read it into
WITHOUT_CLASSIFICATION	// cryptic for the uninitiated...
WITHOUT_CLASSIFICATION	// select until read is ready
WITHOUT_CLASSIFICATION	//        ByteList buffer = null;
WITHOUT_CLASSIFICATION	//            buffer = str.getByteList();
WITHOUT_CLASSIFICATION	// READ_CHECK from MRI io.c
WITHOUT_CLASSIFICATION	/* rb: writable */
WITHOUT_CLASSIFICATION	// READ_CHECK from MRI io.c
WITHOUT_CLASSIFICATION	// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...
WITHOUT_CLASSIFICATION	// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);
WITHOUT_CLASSIFICATION	// truncate buffer string to zero, if provided
WITHOUT_CLASSIFICATION	// TODO: READ_CHECK from MRI
WITHOUT_CLASSIFICATION	/* class methods for IO */
WITHOUT_CLASSIFICATION	// save blocking state
WITHOUT_CLASSIFICATION	// write
WITHOUT_CLASSIFICATION	// Java's select doesn't do anything about this, so we leave it be.
WITHOUT_CLASSIFICATION	// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes
WITHOUT_CLASSIFICATION	// FIXME: process options
WITHOUT_CLASSIFICATION	// Enebo: annotation processing forced me to do pangea method here...
WITHOUT_CLASSIFICATION	// NIO based pipe
WITHOUT_CLASSIFICATION	// not using remove(Object) here to avoid the equals() call
WITHOUT_CLASSIFICATION	// raise will also wake the thread from selection
WITHOUT_CLASSIFICATION	/* may need to handle ENC_CODERANGE_BROKEN */
WITHOUT_CLASSIFICATION	// TODO: rb_usascii_str_new2
WITHOUT_CLASSIFICATION	// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.
WITHOUT_CLASSIFICATION	// The class of this object
WITHOUT_CLASSIFICATION	// zeroed by jvm
WITHOUT_CLASSIFICATION	//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);
WITHOUT_CLASSIFICATION	// JRUBY-4113: callers should not call setTaint on immediate objects
WITHOUT_CLASSIFICATION	// rb_class_boot
WITHOUT_CLASSIFICATION	/* 6:tags 16:addr 1:eos */
WITHOUT_CLASSIFICATION	// 1.9 rb_check_to_integer
WITHOUT_CLASSIFICATION	// for interface impls
WITHOUT_CLASSIFICATION	// We're cloning ourselves, so we know the result should be a RubyObject
WITHOUT_CLASSIFICATION	// Methods of the Object class (rb_obj_*):
WITHOUT_CLASSIFICATION	// can't use -v and stdin
WITHOUT_CLASSIFICATION	// include its parent (and in turn that module's parents)
WITHOUT_CLASSIFICATION	// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.
WITHOUT_CLASSIFICATION	// // COMMON VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// // INTERNAL VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE API METHODS //
WITHOUT_CLASSIFICATION	// Struct methods
WITHOUT_CLASSIFICATION	//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);
WITHOUT_CLASSIFICATION	// define access methods.
WITHOUT_CLASSIFICATION	// if we are storing a name as well, index is one too high for values
WITHOUT_CLASSIFICATION	// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.
WITHOUT_CLASSIFICATION	// For binding purposes on the newly created struct types
WITHOUT_CLASSIFICATION	// OBJ_INFECT        
WITHOUT_CLASSIFICATION	// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()
WITHOUT_CLASSIFICATION	// Execute iterateMethod again.
WITHOUT_CLASSIFICATION	/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */
WITHOUT_CLASSIFICATION	// Atomic ?
WITHOUT_CLASSIFICATION	// Atomic ?
WITHOUT_CLASSIFICATION	// MUST NOT be used across threads
WITHOUT_CLASSIFICATION	// superClass may be null.
WITHOUT_CLASSIFICATION	// Containing class...The parent of Object is null. Object should always be last in chain.
WITHOUT_CLASSIFICATION	// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.
WITHOUT_CLASSIFICATION	// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 
WITHOUT_CLASSIFICATION	// update superclass reference
WITHOUT_CLASSIFICATION	// Make sure the module we include does not already exist
WITHOUT_CLASSIFICATION	// MRI checks all types first:
WITHOUT_CLASSIFICATION	// we need full traces, use default (slow) populator
WITHOUT_CLASSIFICATION	// module/singleton methods are all defined public
WITHOUT_CLASSIFICATION	// See if module is in chain...Cannot match against itself so start at superClass.
WITHOUT_CLASSIFICATION	// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.
WITHOUT_CLASSIFICATION	// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway
WITHOUT_CLASSIFICATION	// update all hierarchies into which this module has been included
WITHOUT_CLASSIFICATION	// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.
WITHOUT_CLASSIFICATION	// need to skip IncludedModuleWrappers
WITHOUT_CLASSIFICATION	// superClazz = null;
WITHOUT_CLASSIFICATION	// reopen a java class
WITHOUT_CLASSIFICATION	// This method is intended only for defining new modules in Ruby code
WITHOUT_CLASSIFICATION	// reopen a java module
WITHOUT_CLASSIFICATION	//FIXME warning
WITHOUT_CLASSIFICATION	// FIXME warning
WITHOUT_CLASSIFICATION	// a normal block passed to define_method changes to do arity checking; make it a lambda
WITHOUT_CLASSIFICATION	// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope
WITHOUT_CLASSIFICATION	// just using required is broken...but no more broken than before zsuper refactoring
WITHOUT_CLASSIFICATION	// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// MRI error message says Class, even though Module is ok 
WITHOUT_CLASSIFICATION	// scan class hierarchy for module
WITHOUT_CLASSIFICATION	/* Module class methods */
WITHOUT_CLASSIFICATION	// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).
WITHOUT_CLASSIFICATION	// next in hierarchy is an included version of the module we're attempting, // so we skip including it
WITHOUT_CLASSIFICATION	// if we haven't encountered a real superclass, use the found module as the new inclusion point
WITHOUT_CLASSIFICATION	// build a list of all modules to consider for inclusion
WITHOUT_CLASSIFICATION	// if the insertion point is a class, update subclass lists
WITHOUT_CLASSIFICATION	// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships
WITHOUT_CLASSIFICATION	// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// CONSTANT RUBY METHODS //////////////// //
WITHOUT_CLASSIFICATION	// Note: includes part of fix for JRUBY-1339
WITHOUT_CLASSIFICATION	// ////////////////// CLASS VARIABLE API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// Wrong Parameter ?
WITHOUT_CLASSIFICATION	// not actually called anywhere (all known uses call the fast version)
WITHOUT_CLASSIFICATION	// Not that is loaded loop around to resolve it next pass
WITHOUT_CLASSIFICATION	// if adding a module under a constant name, set that module's basename to the constant name
WITHOUT_CLASSIFICATION	// Fix for JRUBY-1339 - search hierarchy for constant
WITHOUT_CLASSIFICATION	// returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	// removes and returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	// we can't rename a file while it's open in windows
WITHOUT_CLASSIFICATION	//reopen
WITHOUT_CLASSIFICATION	// ARGF methods
WITHOUT_CLASSIFICATION	//         data.currentFile.callMethod(context, "lineno=", line);
WITHOUT_CLASSIFICATION	// one optional, one required args
WITHOUT_CLASSIFICATION	// one optional and no required args
WITHOUT_CLASSIFICATION	// try to get errno value out of the class
WITHOUT_CLASSIFICATION	// we got a valid errno value
WITHOUT_CLASSIFICATION	// Ensure we're not running on GCJ, since it's not supported and leads to weird errors
WITHOUT_CLASSIFICATION	// print out as a nice Ruby backtrace
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// set thread context JRuby classloader here, for the main thread
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// no script to run, return success below
WITHOUT_CLASSIFICATION	// Skip /usr/bin/env if it's first
WITHOUT_CLASSIFICATION	// Skip any assignments if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	// Skip any commandline args if /usr/bin/env is in play
WITHOUT_CLASSIFICATION	// ignore error
WITHOUT_CLASSIFICATION	// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //
WITHOUT_CLASSIFICATION	// odd
WITHOUT_CLASSIFICATION	// JRubyClient
WITHOUT_CLASSIFICATION	/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */
WITHOUT_CLASSIFICATION	// Make mantissa same sign so we only have one code path.
WITHOUT_CLASSIFICATION	// Increase value to hit lower range.
WITHOUT_CLASSIFICATION	/*     * r = x * 2 ** y     */
WITHOUT_CLASSIFICATION	/*  0! */
WITHOUT_CLASSIFICATION	/*  1! */
WITHOUT_CLASSIFICATION	/*  2! */
WITHOUT_CLASSIFICATION	/*  3! */
WITHOUT_CLASSIFICATION	/*  4! */
WITHOUT_CLASSIFICATION	/*  5! */
WITHOUT_CLASSIFICATION	/*  6! */
WITHOUT_CLASSIFICATION	/*  7! */
WITHOUT_CLASSIFICATION	/*  8! */
WITHOUT_CLASSIFICATION	/*  9! */
WITHOUT_CLASSIFICATION	/* 11! */
WITHOUT_CLASSIFICATION	/* 12! */
WITHOUT_CLASSIFICATION	/* 13! */
WITHOUT_CLASSIFICATION	/* 15! */
WITHOUT_CLASSIFICATION	/* 16! */
WITHOUT_CLASSIFICATION	/* 17! */
WITHOUT_CLASSIFICATION	/* 19! */
WITHOUT_CLASSIFICATION	/* 20! */
WITHOUT_CLASSIFICATION	/* 21! */
WITHOUT_CLASSIFICATION	// Static constants
WITHOUT_CLASSIFICATION	// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators
WITHOUT_CLASSIFICATION	// 2. MRI allows underscores anywhere
WITHOUT_CLASSIFICATION	// 3. MRI ignores the trailing junk
WITHOUT_CLASSIFICATION	// MRI behavior: -0 and +0 are two different things
WITHOUT_CLASSIFICATION	// Java and MRI definitions of modulo are different.
WITHOUT_CLASSIFICATION	// Java and MRI definitions of remainder are the same.
WITHOUT_CLASSIFICATION	// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:
WITHOUT_CLASSIFICATION	// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)
WITHOUT_CLASSIFICATION	// it doesn't handle special cases
WITHOUT_CLASSIFICATION	// TODO: why this: .setResult();
WITHOUT_CLASSIFICATION	// integer division
WITHOUT_CLASSIFICATION	// MRI behavior: "If digits is 0, the result is the same as the / operator."
WITHOUT_CLASSIFICATION	// rounding neccessary
WITHOUT_CLASSIFICATION	// rounding neccessary
WITHOUT_CLASSIFICATION	// Java and MRI definitions of divmod are different.        
WITHOUT_CLASSIFICATION	// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it
WITHOUT_CLASSIFICATION	// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.
WITHOUT_CLASSIFICATION	// ...round to that digit
WITHOUT_CLASSIFICATION	// ...and shift the result back to the left (multiply by 10**(abs(scale)))
WITHOUT_CLASSIFICATION	//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are
WITHOUT_CLASSIFICATION	// sign
WITHOUT_CLASSIFICATION	// significant digits and exponent
WITHOUT_CLASSIFICATION	// normalize the value
WITHOUT_CLASSIFICATION	// base
WITHOUT_CLASSIFICATION	// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.
WITHOUT_CLASSIFICATION	// just in case, add a bit of extra precision
WITHOUT_CLASSIFICATION	// eh?!
WITHOUT_CLASSIFICATION	// Note: #fix has only no-arg form, but truncate allows optional parameter.
WITHOUT_CLASSIFICATION	// General number and precision checking
WITHOUT_CLASSIFICATION	// the requested precision
WITHOUT_CLASSIFICATION	// Proc class
WITHOUT_CLASSIFICATION	//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")
WITHOUT_CLASSIFICATION	// even shift.. // ..floors to 62 or 63 bit BigInteger
WITHOUT_CLASSIFICATION	// 5 -> 2, -5 -> -3 need half a scale more..
WITHOUT_CLASSIFICATION	// ..where 100 -> 10 shifts the scale
WITHOUT_CLASSIFICATION	// Initial x - use double root - multiply by halfBack to unshift - set new scale
WITHOUT_CLASSIFICATION	// x0 ~ sqrt()
WITHOUT_CLASSIFICATION	// for prec 15 root x0 must surely be OK // return small prec roots without iterations
WITHOUT_CLASSIFICATION	// Initial v - the reciprocal // v0 = 1/(2*x)
WITHOUT_CLASSIFICATION	// Collect iteration precisions beforehand
WITHOUT_CLASSIFICATION	// assume nInit = 16 <= prec
WITHOUT_CLASSIFICATION	// The loop of "Square Root by Coupled Newton Iteration"
WITHOUT_CLASSIFICATION	// Increase precision - next iteration supplies n exact digits
WITHOUT_CLASSIFICATION	// Next x                                        // e = d - x^2
WITHOUT_CLASSIFICATION	// x += e*v     ~ sqrt()
WITHOUT_CLASSIFICATION	// root x is ready!
WITHOUT_CLASSIFICATION	// Next v                                        // g = 1 - 2*x*v
WITHOUT_CLASSIFICATION	// v += g*v     ~ 1/2/sqrt()
WITHOUT_CLASSIFICATION	// RubyBigdecimal
WITHOUT_CLASSIFICATION	// c: bind_eval
WITHOUT_CLASSIFICATION	/*  ================     *  Module Methods     *  ================      */
WITHOUT_CLASSIFICATION	// from CommandlineParser
WITHOUT_CLASSIFICATION	// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true
WITHOUT_CLASSIFICATION	// default ClassCache using jitMax as a soft upper bound
WITHOUT_CLASSIFICATION	// Until we get a little more solid on 1.9 support we will only run interpreted mode
WITHOUT_CLASSIFICATION	// Setting the loader needs to reset the class cache
WITHOUT_CLASSIFICATION	// try the normal property first
WITHOUT_CLASSIFICATION	// verify it if it's there
WITHOUT_CLASSIFICATION	// verify it if it's there
WITHOUT_CLASSIFICATION	// try loading from classloader resources
WITHOUT_CLASSIFICATION	// otherwise fall back on system temp location
WITHOUT_CLASSIFICATION	// We require the home directory to be absolute
WITHOUT_CLASSIFICATION	//consume the file name
WITHOUT_CLASSIFICATION	// Specify something that can't separate
WITHOUT_CLASSIFICATION	// try cwd first
WITHOUT_CLASSIFICATION	// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])
WITHOUT_CLASSIFICATION	// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "complex?")
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "exact?")
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "inexact?")
WITHOUT_CLASSIFICATION	// symbol string *must* be interned
WITHOUT_CLASSIFICATION	//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";
WITHOUT_CLASSIFICATION	/* Symbol class methods.     *      */
WITHOUT_CLASSIFICATION	// TODO: 1.9 rb_enc_symname_p
WITHOUT_CLASSIFICATION	// This is needed to unpack stuff
WITHOUT_CLASSIFICATION	// we already confirmed above that length > 0
WITHOUT_CLASSIFICATION	// *must* be power of 2!
WITHOUT_CLASSIFICATION	// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.
WITHOUT_CLASSIFICATION	//            assert internedName == internedName.intern() : internedName + " is not interned";
WITHOUT_CLASSIFICATION	// try lookup again under lock
WITHOUT_CLASSIFICATION	// try lookup again under lock
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// backwards-compatibility, but threadsafe now
WITHOUT_CLASSIFICATION	//  Single node on list
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// Check the length every iteration, since // the block can modify this string.
WITHOUT_CLASSIFICATION	// we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	// not so backwards-compatible here, but no one should have been // calling this anyway.
WITHOUT_CLASSIFICATION	// Profile
WITHOUT_CLASSIFICATION	//static private final String TRANSLIT = "//translit";
WITHOUT_CLASSIFICATION	// treat start and end as start...end for end >= 0, start..end for end < 0
WITHOUT_CLASSIFICATION	// invalid ranges result in an empty string
WITHOUT_CLASSIFICATION	// Methods of the Nil Class (nil_*):
WITHOUT_CLASSIFICATION	// Has read/write been closed or is it still open for business
WITHOUT_CLASSIFICATION	// Support IO modes that this object was opened with
WITHOUT_CLASSIFICATION	// must let original string know we're modifying, so shared buffers aren't damaged
WITHOUT_CLASSIFICATION	// reset the state
WITHOUT_CLASSIFICATION	// Tainting here if we ever want it. (secure 4)
WITHOUT_CLASSIFICATION	// rb_match_busy
WITHOUT_CLASSIFICATION	//str is frozen
WITHOUT_CLASSIFICATION	// MRI also does a pointer comparison here
WITHOUT_CLASSIFICATION	// JRubyServer
WITHOUT_CLASSIFICATION	// Class.allocate object is not allocatable before it is initialized
WITHOUT_CLASSIFICATION	// boot the Object class 
WITHOUT_CLASSIFICATION	// Methods of the Object class (rb_obj_*):
WITHOUT_CLASSIFICATION	// update superclass reference
WITHOUT_CLASSIFICATION	// undo check
WITHOUT_CLASSIFICATION	// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));
WITHOUT_CLASSIFICATION	// boot the Module and Class classes
WITHOUT_CLASSIFICATION	// this is the only case it might be null here (in MetaClass construction)
WITHOUT_CLASSIFICATION	// use parent's marshal
WITHOUT_CLASSIFICATION	// use parent's marshal
WITHOUT_CLASSIFICATION	// could be pulled down to RubyClass in future // rb_class_boot
WITHOUT_CLASSIFICATION	// remove us from old superclass's child classes
WITHOUT_CLASSIFICATION	// add us to new superclass's child classes
WITHOUT_CLASSIFICATION	// update all subclasses
WITHOUT_CLASSIFICATION	// fields to hold Ruby and RubyClass references
WITHOUT_CLASSIFICATION	// static initializing method
WITHOUT_CLASSIFICATION	// standard constructor that accepts Ruby, RubyClass
WITHOUT_CLASSIFICATION	// no-arg constructor using static references to Ruby and RubyClass
WITHOUT_CLASSIFICATION	// non-signature signature with just IRubyObject
WITHOUT_CLASSIFICATION	// indices for temp values
WITHOUT_CLASSIFICATION	// self // method name
WITHOUT_CLASSIFICATION	// the default allocator
WITHOUT_CLASSIFICATION	// Equivalent of T_DATA
WITHOUT_CLASSIFICATION	// do nothing, leave empty
WITHOUT_CLASSIFICATION	// Double.MAX_EXPONENT since Java 1.6
WITHOUT_CLASSIFICATION	/*  ================     *  Singleton Methods     *  ================      */
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// Make sure all arguments are modules before calling the callbacks
WITHOUT_CLASSIFICATION	// MRI extends in order from last to first
WITHOUT_CLASSIFICATION	// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.
WITHOUT_CLASSIFICATION	// write out ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	// rest in ivar count followed by name/value pairs
WITHOUT_CLASSIFICATION	// 0x3fff_ffff // -0x4000_0000
WITHOUT_CLASSIFICATION	// a gotcha
WITHOUT_CLASSIFICATION	// Java / and % are not the same as ruby
WITHOUT_CLASSIFICATION	// A gotcha for Long.MIN_VALUE: value = -value
WITHOUT_CLASSIFICATION	// Piece of mri rb_to_id
WITHOUT_CLASSIFICATION	// Java Doubles are 64 bit long:            
WITHOUT_CLASSIFICATION	// Double.MAX_EXPONENT since Java 1.6            
WITHOUT_CLASSIFICATION	// don't override Numeric#div !
WITHOUT_CLASSIFICATION	// Modelled after c ruby implementation (java /,% not same as ruby)
WITHOUT_CLASSIFICATION	// MRI behavior:
WITHOUT_CLASSIFICATION	// Numeric.equal            
WITHOUT_CLASSIFICATION	// provider is not available
WITHOUT_CLASSIFICATION	// bouncy castle doesn't support algorithm
WITHOUT_CLASSIFICATION	// fall back to system JCA providers
WITHOUT_CLASSIFICATION	// RubyDigest
WITHOUT_CLASSIFICATION	// ENEBO: Can these be fast?
WITHOUT_CLASSIFICATION	// synchronize on the RubyThread for threadgroup updates
WITHOUT_CLASSIFICATION	// we only add live threads
WITHOUT_CLASSIFICATION	// use same ClassIndex as metaclass, since we're technically still of that type
WITHOUT_CLASSIFICATION	// handle everything after -- as arguments to the jruby process
WITHOUT_CLASSIFICATION	// JRubyService
WITHOUT_CLASSIFICATION	// while
WITHOUT_CLASSIFICATION	/* \OOO */
WITHOUT_CLASSIFICATION	// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.
WITHOUT_CLASSIFICATION	// mask off "once" flag
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// internal usage (Complex/Rational)
WITHOUT_CLASSIFICATION	// silent ?
WITHOUT_CLASSIFICATION	/* \xHH */
WITHOUT_CLASSIFICATION	/* \M-X, \M-\C-X, \M-\cX */
WITHOUT_CLASSIFICATION	/* \C-X, \C-\M-X */
WITHOUT_CLASSIFICATION	/* \cX, \c\M-X */
WITHOUT_CLASSIFICATION	/* \O, \OO, \OOO or backref */
WITHOUT_CLASSIFICATION	// MBCLEN_NEEDMORE_P
WITHOUT_CLASSIFICATION	// MBCLEN_INVALID_P
WITHOUT_CLASSIFICATION	// Unicode is can be only 21 bits long, int is enough
WITHOUT_CLASSIFICATION	/* Surrogates */
WITHOUT_CLASSIFICATION	// do not load the class if not used
WITHOUT_CLASSIFICATION	/* \0, \0O, \0OO */
WITHOUT_CLASSIFICATION	/* \xHH */
WITHOUT_CLASSIFICATION	/* \C-X, \C-\M-X */
WITHOUT_CLASSIFICATION	/* \M-X, \M-\C-X, \M-\cX */
WITHOUT_CLASSIFICATION	/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */
WITHOUT_CLASSIFICATION	/* \\uHHHH */
WITHOUT_CLASSIFICATION	/* \p{Hiragana} */
WITHOUT_CLASSIFICATION	// inner switch
WITHOUT_CLASSIFICATION	// newInstance here
WITHOUT_CLASSIFICATION	// rb_reg_raise
WITHOUT_CLASSIFICATION	// rb_reg_desc
WITHOUT_CLASSIFICATION	// rb_enc_reg_raise
WITHOUT_CLASSIFICATION	// rb_enc_reg_error_desc
WITHOUT_CLASSIFICATION	// rb_reg_initialize_str
WITHOUT_CLASSIFICATION	// rb_reg_initialize
WITHOUT_CLASSIFICATION	// JRUBY-3625: delay setting backref until the MatchData is completely initialized
WITHOUT_CLASSIFICATION	// rb_reg_expr_str
WITHOUT_CLASSIFICATION	// option_to_str
WITHOUT_CLASSIFICATION	// Don't initialize with class // Don't put in object space and don't taint
WITHOUT_CLASSIFICATION	// args should be before block
WITHOUT_CLASSIFICATION	// args should be at end
WITHOUT_CLASSIFICATION	// minus one more for IRubyObject[]
WITHOUT_CLASSIFICATION	// minus one more for IRubyObject[]
WITHOUT_CLASSIFICATION	// skip anything not related to jruby
WITHOUT_CLASSIFICATION	// start a new populator
WITHOUT_CLASSIFICATION	// check for frame field reads or writes
WITHOUT_CLASSIFICATION	// add all names for this annotation
WITHOUT_CLASSIFICATION	// no annotated methods found, skip
WITHOUT_CLASSIFICATION	// write out a static initializer for frame names, so it only fires once
WITHOUT_CLASSIFICATION	// single method, use normal logic
WITHOUT_CLASSIFICATION	// multimethod, new logic
WITHOUT_CLASSIFICATION	// declared type returns the qualified name without $ for inner classes!!!
WITHOUT_CLASSIFICATION	// inner class, use $ to delimit
WITHOUT_CLASSIFICATION	//                        RubyModule singletonClass = module.getSingletonClass();
WITHOUT_CLASSIFICATION	//                }
WITHOUT_CLASSIFICATION	// fallback on non-pregenerated logic
WITHOUT_CLASSIFICATION	// refresh call adapter, since it matters if this is iter-based or not
WITHOUT_CLASSIFICATION	// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// colon3
WITHOUT_CLASSIFICATION	// Colon3
WITHOUT_CLASSIFICATION	// array created for rescue args doesn't need to be in ObjectSpace.
WITHOUT_CLASSIFICATION	// For b.foo
WITHOUT_CLASSIFICATION	// instance config for the script run
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	//RubyModule module = context.getRubyClass();
WITHOUT_CLASSIFICATION	// For 'b.foo'
WITHOUT_CLASSIFICATION	// We define an actual list to get around bug in java integration (1387115)
WITHOUT_CLASSIFICATION	// something in here is used to build up ruby stack trace...
WITHOUT_CLASSIFICATION	// Ruby Grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	// Ruby Grammar productions return plenty of nulls.
WITHOUT_CLASSIFICATION	// do nothing, allow loop to retry
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// never visited, should be fine
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// If we have more than one argument, then make sure the array is not ObjectSpaced.
WITHOUT_CLASSIFICATION	// Only in ruby 1.9 methods
WITHOUT_CLASSIFICATION	// Bind 'normal' parameter values to the local scope for this method.
WITHOUT_CLASSIFICATION	// no arg grouping, just use bulk assignment methods
WITHOUT_CLASSIFICATION	// optArgs and restArgs require more work, so isolate them and ArrayList creation here
WITHOUT_CLASSIFICATION	//        arity.checkArity(runtime, argsLength);
WITHOUT_CLASSIFICATION	// no more values to stick in rest arg
WITHOUT_CLASSIFICATION	// set argv from main's args
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";
WITHOUT_CLASSIFICATION	// assign given optional arguments to their variables
WITHOUT_CLASSIFICATION	// in-frame EvalState should already have receiver set as self, continue to use it
WITHOUT_CLASSIFICATION	// assign the default values, adding to the end of allArgs
WITHOUT_CLASSIFICATION	// Make sure the appropriate scope has proper size. See JRUBY-2046.
WITHOUT_CLASSIFICATION	// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening
WITHOUT_CLASSIFICATION	// This should never happen past parse, but just bulletproof this just in case
WITHOUT_CLASSIFICATION	// Make a nil node if no body.  Notice this is not part of AST.
WITHOUT_CLASSIFICATION	// 'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	// now used as an interpreter event
WITHOUT_CLASSIFICATION	// never visited, should be ok
WITHOUT_CLASSIFICATION	// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil
WITHOUT_CLASSIFICATION	// JRUBY-530 until case
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// The name of the variable
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode
WITHOUT_CLASSIFICATION	//assert !(value instanceof RubyArray)  : "Not an array";
WITHOUT_CLASSIFICATION	// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// We could probably also detect if LHS value came out of cache and avoid some of this
WITHOUT_CLASSIFICATION	//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";
WITHOUT_CLASSIFICATION	// add in reverse order
WITHOUT_CLASSIFICATION	// in order to make pragma's noops we set location to a special value
WITHOUT_CLASSIFICATION	// ignore compiler pragmas
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// Store to temp so it does null out on us mid-stream
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// Make a nil node if no body.  Notice this is not part of AST.
WITHOUT_CLASSIFICATION	// now used as an interpreter event
WITHOUT_CLASSIFICATION	// No actual test, so do 'when' if when expression is not nil
WITHOUT_CLASSIFICATION	// save entering the try if there's nothing to ensure
WITHOUT_CLASSIFICATION	// For 'foo'
WITHOUT_CLASSIFICATION	// For 'foo'
WITHOUT_CLASSIFICATION	// admittedly inefficient
WITHOUT_CLASSIFICATION	// JRUBY-530, while case
WITHOUT_CLASSIFICATION	// What static scoping relationship exists when it comes into being.
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// just rethrow
WITHOUT_CLASSIFICATION	// just rethrow
WITHOUT_CLASSIFICATION	// clear exception when handled or retried
WITHOUT_CLASSIFICATION	// clear exception when handled or retried
WITHOUT_CLASSIFICATION	// no takers; bubble up
WITHOUT_CLASSIFICATION	// no takers; bubble up
WITHOUT_CLASSIFICATION	// Execute rescue block
WITHOUT_CLASSIFICATION	// If no exception is thrown execute else block
WITHOUT_CLASSIFICATION	// index of variable for this arg
WITHOUT_CLASSIFICATION	// only a marker interface
WITHOUT_CLASSIFICATION	// don't attempt to coerce to array, just wrap and return
WITHOUT_CLASSIFICATION	// pragmas
WITHOUT_CLASSIFICATION	// The method also needs a scope, do both
WITHOUT_CLASSIFICATION	// We're doing normal framed compilation or the method needs a frame
WITHOUT_CLASSIFICATION	// The method doesn't need a scope or static scope; frame only
WITHOUT_CLASSIFICATION	// The method doesn't need a scope, but has static scope needs; use a dummy scope
WITHOUT_CLASSIFICATION	// Proc.new needs the caller's block to instantiate a proc
WITHOUT_CLASSIFICATION	// check for Proc.new, an especially magic method
WITHOUT_CLASSIFICATION	// long, slow way causes disabling
WITHOUT_CLASSIFICATION	// ok, we have fast paths
WITHOUT_CLASSIFICATION	// ok, we have fast paths
WITHOUT_CLASSIFICATION	// long, slow way causes disabling for defined
WITHOUT_CLASSIFICATION	// we set scope-aware to true to force heap-based locals
WITHOUT_CLASSIFICATION	// Because Regexp#=== sets backref, we have to make this backref-aware
WITHOUT_CLASSIFICATION	// encountered a node we don't recognize, set everything to true to disable optz
WITHOUT_CLASSIFICATION	// only arrays that are "lightweight" are being used as args arrays
WITHOUT_CLASSIFICATION	// otherwise, it's a literal array
WITHOUT_CLASSIFICATION	// use array as-is, it's a literal array
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// compile first node as non-expr and then second node
WITHOUT_CLASSIFICATION	// last node, either !instanceof WhenNode or null, is the else
WITHOUT_CLASSIFICATION	// compile first node only
WITHOUT_CLASSIFICATION	// splatted when, can't do it yet
WITHOUT_CLASSIFICATION	// if __send__ with a literal symbol, compile it as a direct fcall
WITHOUT_CLASSIFICATION	// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.
WITHOUT_CLASSIFICATION	// aggregate when nodes into a list, unfortunately, this is no
WITHOUT_CLASSIFICATION	// one arg but it's an array, treat it as a proper array
WITHOUT_CLASSIFICATION	// can't do it
WITHOUT_CLASSIFICATION	// otherwise, use normal args compiler
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// these are all simple cases that don't require the heavier defined logic
WITHOUT_CLASSIFICATION	//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]
WITHOUT_CLASSIFICATION	//[]
WITHOUT_CLASSIFICATION	//[]
WITHOUT_CLASSIFICATION	//          context.swapValues(); //context.consumeCurrentValue();
WITHOUT_CLASSIFICATION	//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]
WITHOUT_CLASSIFICATION	//[RubyClass]
WITHOUT_CLASSIFICATION	//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]
WITHOUT_CLASSIFICATION	// if root of method is rescue, compile as a light rescue
WITHOUT_CLASSIFICATION	// inspect body and args
WITHOUT_CLASSIFICATION	// inspect body and args
WITHOUT_CLASSIFICATION	// check args first, since body inspection can depend on args
WITHOUT_CLASSIFICATION	// if root of method is rescue, compile as light rescue
WITHOUT_CLASSIFICATION	// invoke run with threadcontext and topself
WITHOUT_CLASSIFICATION	//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]
WITHOUT_CLASSIFICATION	//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]
WITHOUT_CLASSIFICATION	//[RubyClass] //[]
WITHOUT_CLASSIFICATION	//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]
WITHOUT_CLASSIFICATION	//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// not an expression, only compile the elements
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// force heap-scope behavior, since it uses parent's scope
WITHOUT_CLASSIFICATION	// always false or nil
WITHOUT_CLASSIFICATION	// optimizations if we know ahead of time it will always be true or false
WITHOUT_CLASSIFICATION	// normal
WITHOUT_CLASSIFICATION	// compile condition as non-expr and just compile "then" body
WITHOUT_CLASSIFICATION	// need the array, use unoptz version
WITHOUT_CLASSIFICATION	// just push nil for pragmas
WITHOUT_CLASSIFICATION	// "assignment" means the value is already on the stack
WITHOUT_CLASSIFICATION	// compile first node only
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// eval new value, call operator on old value, and assign
WITHOUT_CLASSIFICATION	// try optz version
WITHOUT_CLASSIFICATION	// sizes must match
WITHOUT_CLASSIFICATION	// expect value to be an array of nodes
WITHOUT_CLASSIFICATION	// normal items at the "head" of the masgn
WITHOUT_CLASSIFICATION	// head must not be null and there must be no "args" (like *arg)
WITHOUT_CLASSIFICATION	// "head" must have no non-trivial assigns (array groupings, basically)
WITHOUT_CLASSIFICATION	// only supports simple parallel assignment of up to 10 values to the same number of assignees
WITHOUT_CLASSIFICATION	// perform assignment for the next node
WITHOUT_CLASSIFICATION	// if we get here, no optz cases work; fall back on unoptz.
WITHOUT_CLASSIFICATION	//RedoNode redoNode = (RedoNode)node;
WITHOUT_CLASSIFICATION	// done processing args
WITHOUT_CLASSIFICATION	// all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	// assign to appropriate variable
WITHOUT_CLASSIFICATION	// if arity 1, just compile the one element to save us the array cost
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// [recv]
WITHOUT_CLASSIFICATION	// compile into array
WITHOUT_CLASSIFICATION	// compile first node as non-expr and compile second node
WITHOUT_CLASSIFICATION	// check if it's an immediate, and don't outline
WITHOUT_CLASSIFICATION	// condition is always true, just compile it and not body
WITHOUT_CLASSIFICATION	// force static scope to claim restarg at 0, so it only implements the [] version of __file__
WITHOUT_CLASSIFICATION	// create method for toplevel of script
WITHOUT_CLASSIFICATION	// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long
WITHOUT_CLASSIFICATION	// send it along as arity-specific, we don't need the array
WITHOUT_CLASSIFICATION	// single-statement body, just compile it
WITHOUT_CLASSIFICATION	// leave as a normal array
WITHOUT_CLASSIFICATION	// This method has JITed already or has been abandoned. Bail out.
WITHOUT_CLASSIFICATION	// The cache is full. Abandon JIT for this method and bail out.
WITHOUT_CLASSIFICATION	// check args first, since body inspection can depend on args
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// create the closure class and instantiate it
WITHOUT_CLASSIFICATION	// no args, do not pass args processor
WITHOUT_CLASSIFICATION	// need the array, use unoptz version
WITHOUT_CLASSIFICATION	// try optz version
WITHOUT_CLASSIFICATION	// expect value to be an array of nodes
WITHOUT_CLASSIFICATION	// head must not be null and there must be no "args" (like *arg)
WITHOUT_CLASSIFICATION	// sizes must match
WITHOUT_CLASSIFICATION	// "head" must have no non-trivial assigns (array groupings, basically)
WITHOUT_CLASSIFICATION	// if we get here, no optz cases work; fall back on unoptz.
WITHOUT_CLASSIFICATION	// perform assignment for the next node
WITHOUT_CLASSIFICATION	// done processing args
WITHOUT_CLASSIFICATION	// Check if the method has been explicitly excluded
WITHOUT_CLASSIFICATION	// class could not be found nor generated; give up on JIT and bail out
WITHOUT_CLASSIFICATION	// successfully got back a jitted method
WITHOUT_CLASSIFICATION	// finally, grab the script
WITHOUT_CLASSIFICATION	// logEvery n methods based on configuration
WITHOUT_CLASSIFICATION	// Time the compilation
WITHOUT_CLASSIFICATION	// we have a body, do a full-on method
WITHOUT_CLASSIFICATION	// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop
WITHOUT_CLASSIFICATION	// if we haven't already decided on a do-nothing call
WITHOUT_CLASSIFICATION	// only supports simple parallel assignment of up to 4 values to the same number of assignees
WITHOUT_CLASSIFICATION	// normal items at the front or back of the masgn
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// end of variable scope
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// Define the annotation for the method
WITHOUT_CLASSIFICATION	// check arity in the variable-arity version
WITHOUT_CLASSIFICATION	// load block from [] version of method
WITHOUT_CLASSIFICATION	// normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// value is already on stack, save it for later
WITHOUT_CLASSIFICATION	// receiver first, so we know which call site to use
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*arg2*/
WITHOUT_CLASSIFICATION	/*args*/
WITHOUT_CLASSIFICATION	// receiver first, so we know which call site to use
WITHOUT_CLASSIFICATION	// select appropriate call site // dup receiver // load self
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg0*/
WITHOUT_CLASSIFICATION	/*arg1*/
WITHOUT_CLASSIFICATION	/*args*/
WITHOUT_CLASSIFICATION	// get call site and thread context
WITHOUT_CLASSIFICATION	// get call site and thread context
WITHOUT_CLASSIFICATION	// evaluate and save receiver and args
WITHOUT_CLASSIFICATION	// evaluate and save receiver and args
WITHOUT_CLASSIFICATION	// invoke
WITHOUT_CLASSIFICATION	// invoke
WITHOUT_CLASSIFICATION	// check if it's true, ending if so
WITHOUT_CLASSIFICATION	// not true, eval value and assign
WITHOUT_CLASSIFICATION	// not true, eval value and assign
WITHOUT_CLASSIFICATION	// thread context, receiver and original args
WITHOUT_CLASSIFICATION	// thread context, receiver and original args
WITHOUT_CLASSIFICATION	// eval value for assignment
WITHOUT_CLASSIFICATION	// call site
WITHOUT_CLASSIFICATION	// call site
WITHOUT_CLASSIFICATION	// depending on size of original args, call appropriate utility method
WITHOUT_CLASSIFICATION	// check if it's true, ending if not
WITHOUT_CLASSIFICATION	// eval value and save it
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// depending on size of original args, call appropriate utility method
WITHOUT_CLASSIFICATION	// receiver, args, result, value
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// super uses current block if none given
WITHOUT_CLASSIFICATION	// args
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// no args, no block
WITHOUT_CLASSIFICATION	// no args, with block
WITHOUT_CLASSIFICATION	// with args, no block
WITHOUT_CLASSIFICATION	// with args, with block
WITHOUT_CLASSIFICATION	// adapter, tc, recv, args{0,1}, block{0,1}]
WITHOUT_CLASSIFICATION	// pop extra attr value
WITHOUT_CLASSIFICATION	// pop extra attr value
WITHOUT_CLASSIFICATION	// arg and receiver already present on the stack
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// [adapter, tc]
WITHOUT_CLASSIFICATION	// args
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// no args, no block
WITHOUT_CLASSIFICATION	// no args, with block
WITHOUT_CLASSIFICATION	// with args, no block
WITHOUT_CLASSIFICATION	// with args, with block
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	// retrieve scope from scopes array
WITHOUT_CLASSIFICATION	// use numbered access method
WITHOUT_CLASSIFICATION	// retrieve call site from sites array
WITHOUT_CLASSIFICATION	// add name to call site list
WITHOUT_CLASSIFICATION	// module is on top of stack
WITHOUT_CLASSIFICATION	// build scope names string
WITHOUT_CLASSIFICATION	// build descriptor string
WITHOUT_CLASSIFICATION	// build descriptor string
WITHOUT_CLASSIFICATION	// generate call sites initialization code
WITHOUT_CLASSIFICATION	// generate symbols initialization code
WITHOUT_CLASSIFICATION	// generate fixnums initialization code
WITHOUT_CLASSIFICATION	// generate constants initialization code
WITHOUT_CLASSIFICATION	// generate regexps initialization code
WITHOUT_CLASSIFICATION	// generate regexps initialization code
WITHOUT_CLASSIFICATION	// generate variable readers initialization code
WITHOUT_CLASSIFICATION	// generate variable writers initialization code
WITHOUT_CLASSIFICATION	// generate block bodies initialization code
WITHOUT_CLASSIFICATION	// generate block bodies initialization code
WITHOUT_CLASSIFICATION	// generate bytelists initialization code
WITHOUT_CLASSIFICATION	// generate method cache initialization code
WITHOUT_CLASSIFICATION	// adapter, tc, recv, args{0,1}, block{0,1}]
WITHOUT_CLASSIFICATION	// use IRubyObject[]
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// No point in updating number if last number was same value.
WITHOUT_CLASSIFICATION	// load Object under value
WITHOUT_CLASSIFICATION	// put under object array already present
WITHOUT_CLASSIFICATION	// if element count is less than 6, use helper methods
WITHOUT_CLASSIFICATION	// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements
WITHOUT_CLASSIFICATION	// if we have a specific-arity helper to construct an array for us, use that
WITHOUT_CLASSIFICATION	// if we have a specific-arity helper to construct an array for us, use that
WITHOUT_CLASSIFICATION	// brute force construction inline
WITHOUT_CLASSIFICATION	// brute force construction inline
WITHOUT_CLASSIFICATION	// use specific-arity for as much as possible
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// call isTrue on the result
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	// dup it since we need to return appropriately if it's false
WITHOUT_CLASSIFICATION	// clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	// check the condition
WITHOUT_CLASSIFICATION	// NE == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	// skip catch block
WITHOUT_CLASSIFICATION	// catch logic for flow-control: next, break
WITHOUT_CLASSIFICATION	// next jump
WITHOUT_CLASSIFICATION	// exceptionNext target is for a next that doesn't push a new value, like this one
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// clear body or next result after each successful loop
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND
WITHOUT_CLASSIFICATION	// check the condition
WITHOUT_CLASSIFICATION	// NE == nonzero (i.e. true)
WITHOUT_CLASSIFICATION	// synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	// break jump
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	//[reg]
WITHOUT_CLASSIFICATION	// for regular expressions with the /o flag
WITHOUT_CLASSIFICATION	// inside a loop, jump to body
WITHOUT_CLASSIFICATION	// inside a loop, jump to conditional
WITHOUT_CLASSIFICATION	// synthetic methods always have zero arg parameters
WITHOUT_CLASSIFICATION	// store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	// store previous exception for restoration if we rescue something
WITHOUT_CLASSIFICATION	// if more than 4 vars, get values array too
WITHOUT_CLASSIFICATION	// retry handling in the rescue block
WITHOUT_CLASSIFICATION	// any exceptions raised must continue to be raised, skipping $! restoration
WITHOUT_CLASSIFICATION	// and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	// restore the original exception
WITHOUT_CLASSIFICATION	// Handle Flow exceptions, just propagating them
WITHOUT_CLASSIFICATION	// rethrow to outer flow catcher
WITHOUT_CLASSIFICATION	// Handle Ruby exceptions (RaiseException)
WITHOUT_CLASSIFICATION	// inside a loop, break out of it // go to end of loop, leaving break value on stack
WITHOUT_CLASSIFICATION	// false // zero
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// and remaining jump exceptions should restore $!
WITHOUT_CLASSIFICATION	// restore the original exception
WITHOUT_CLASSIFICATION	// retry handling in the rescue blocks
WITHOUT_CLASSIFICATION	// push false
WITHOUT_CLASSIFICATION	//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));
WITHOUT_CLASSIFICATION	//method.ifnonnull(trueLabel);
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)   //[C]
WITHOUT_CLASSIFICATION	//[C, C] //[C, C, String] //[C, null|C]
WITHOUT_CLASSIFICATION	//[C]
WITHOUT_CLASSIFICATION	// push true
WITHOUT_CLASSIFICATION	// EQ != 0 (i.e. true)
WITHOUT_CLASSIFICATION	//[?, ?] //[?, boolean]
WITHOUT_CLASSIFICATION	//[RubyModule] //[RubyModule, String]
WITHOUT_CLASSIFICATION	//[boolean]
WITHOUT_CLASSIFICATION	// no receiver for singleton class
WITHOUT_CLASSIFICATION	// but there's a superclass passed in, use it
WITHOUT_CLASSIFICATION	// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived
WITHOUT_CLASSIFICATION	// set self to the class
WITHOUT_CLASSIFICATION	// CLASS BODY
WITHOUT_CLASSIFICATION	// static scope
WITHOUT_CLASSIFICATION	// Here starts the logic for the class definition
WITHOUT_CLASSIFICATION	// new instance to invoke run against
WITHOUT_CLASSIFICATION	// CLASS BODY
WITHOUT_CLASSIFICATION	// static scope
WITHOUT_CLASSIFICATION	// Here starts the logic for the class definition
WITHOUT_CLASSIFICATION	// finally with exception
WITHOUT_CLASSIFICATION	// prepare to call class definition method
WITHOUT_CLASSIFICATION	// otherwise, there's a receiver, so we pass that in directly for the sclass logic
WITHOUT_CLASSIFICATION	// original exception is on stack
WITHOUT_CLASSIFICATION	// RaiseException is on stack, get RubyException out
WITHOUT_CLASSIFICATION	// updating position for same line; skip
WITHOUT_CLASSIFICATION	// callbacks to fill in method body
WITHOUT_CLASSIFICATION	// prepare to call "def" utility method to handle def logic
WITHOUT_CLASSIFICATION	// script object
WITHOUT_CLASSIFICATION	// arities
WITHOUT_CLASSIFICATION	// TODO assuming case is a fixnum
WITHOUT_CLASSIFICATION	// we have an input case, prepare branching logic
WITHOUT_CLASSIFICATION	// we have optimized switch cases, build a lookupswitch
WITHOUT_CLASSIFICATION	// checkcast the value; if match, fast path; otherwise proceed to slow logic
WITHOUT_CLASSIFICATION	// expression-based tests + bodies
WITHOUT_CLASSIFICATION	// normal case, create a new label
WITHOUT_CLASSIFICATION	// last conditional case, use defaultCase
WITHOUT_CLASSIFICATION	// do nothing; arity check is done before call
WITHOUT_CLASSIFICATION	// just confirm minimum args provided
WITHOUT_CLASSIFICATION	// just confirm args length == required
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// prepare labels for opt logic
WITHOUT_CLASSIFICATION	// prepare labels for opt logic
WITHOUT_CLASSIFICATION	// next, iterate over all optional args, until no more arguments
WITHOUT_CLASSIFICATION	// next, iterate over all optional args, until no more arguments
WITHOUT_CLASSIFICATION	// now logic for each optional value
WITHOUT_CLASSIFICATION	// otherwise no items left available, use the code for default
WITHOUT_CLASSIFICATION	// pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	// if there's args left and we want them, assign to rest arg
WITHOUT_CLASSIFICATION	// assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	// block argument assignment, if there's a block arg
WITHOUT_CLASSIFICATION	// first, iterate over all pre args
WITHOUT_CLASSIFICATION	// then optional args
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// now logic for each optional value
WITHOUT_CLASSIFICATION	// otherwise no items left available, use the code for default
WITHOUT_CLASSIFICATION	// pop extra failed value from first cycle and we're done
WITHOUT_CLASSIFICATION	// assign remaining elements as an array for rest args (or empty array)
WITHOUT_CLASSIFICATION	// block argument assignment, if there's a block arg
WITHOUT_CLASSIFICATION	// if rest args, excluding post args
WITHOUT_CLASSIFICATION	// finally, post args
WITHOUT_CLASSIFICATION	// not an expression, don't want result; pop it
WITHOUT_CLASSIFICATION	// not an expression, don't want result; pop it
WITHOUT_CLASSIFICATION	// unwrap scopes to appropriate depth
WITHOUT_CLASSIFICATION	// fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// declare locals for Java debugging purposes
WITHOUT_CLASSIFICATION	// class bodies prepare their own dynamic scope, so let it do that
WITHOUT_CLASSIFICATION	// store the local vars in a local variable
WITHOUT_CLASSIFICATION	// load args[0] which will be the IRubyObject representing block args
WITHOUT_CLASSIFICATION	// return in a class body raises error
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// end of variable scope
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// load block from [] version of method
WITHOUT_CLASSIFICATION	// normal return for method body. return jump for within a begin/rescue/ensure
WITHOUT_CLASSIFICATION	// declare locals for Java debugging purposes
WITHOUT_CLASSIFICATION	// class bodies prepare their own dynamic scope, so let it do that
WITHOUT_CLASSIFICATION	// load args[0] which will be the IRubyObject representing block args
WITHOUT_CLASSIFICATION	// we force argParamCount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// store the local vars in a local variable if there are any
WITHOUT_CLASSIFICATION	// if more than 4 locals, get and populate the locals array too
WITHOUT_CLASSIFICATION	// fill local vars with nil, to avoid checking every access.
WITHOUT_CLASSIFICATION	// default for starting tempVariableIndex is ok
WITHOUT_CLASSIFICATION	// store the local vars in a local variable for preparing the class (using previous scope)
WITHOUT_CLASSIFICATION	// store the new local vars in a local variable
WITHOUT_CLASSIFICATION	// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]
WITHOUT_CLASSIFICATION	// no variable initialization, because we're reusing parent's scope (flat)
WITHOUT_CLASSIFICATION	// for specific-index cases, clean up non-expression values
WITHOUT_CLASSIFICATION	// set up a local Ruby variable
WITHOUT_CLASSIFICATION	// if that succeeds, the others should as well
WITHOUT_CLASSIFICATION	// verify the class
WITHOUT_CLASSIFICATION	// create dir if necessary
WITHOUT_CLASSIFICATION	// Create the class with the appropriate class name and source file
WITHOUT_CLASSIFICATION	// add setPosition impl, which stores filename as constant to speed updates
WITHOUT_CLASSIFICATION	// thread context
WITHOUT_CLASSIFICATION	// line number
WITHOUT_CLASSIFICATION	// invoke __file__ with threadcontext, self, args (null), and block (null)
WITHOUT_CLASSIFICATION	// load always uses IRubyObject[], so simple closure offset calculation here
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// method is done, declare all variables
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// we force argParamCount to 1 since we always know we'll have [] args
WITHOUT_CLASSIFICATION	// chain to the next segment of this giant method
WITHOUT_CLASSIFICATION	// load all arguments straight through
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method
WITHOUT_CLASSIFICATION	// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0
WITHOUT_CLASSIFICATION	// construct static scope list of names
WITHOUT_CLASSIFICATION	// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// lazily create class init only if necessary
WITHOUT_CLASSIFICATION	// boxed arg list __file__
WITHOUT_CLASSIFICATION	// invoke static __file__
WITHOUT_CLASSIFICATION	// exact arg list __file__
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// not using a new scope, use saved one for a flat closure
WITHOUT_CLASSIFICATION	// normal closure
WITHOUT_CLASSIFICATION	// end of scoping for closure's vars
WITHOUT_CLASSIFICATION	// we only need full-on redo exception handling if there's logic that might produce it
WITHOUT_CLASSIFICATION	// handle redos by restarting the block
WITHOUT_CLASSIFICATION	// jump back to the top of the main body of this closure
WITHOUT_CLASSIFICATION	// Ruby name 
WITHOUT_CLASSIFICATION	// Accumulate call arguments
WITHOUT_CLASSIFICATION	// Fix FileNameCompletor to work mid-line
WITHOUT_CLASSIFICATION	// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!
WITHOUT_CLASSIFICATION	// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.
WITHOUT_CLASSIFICATION	// Map of constants defined in this scope (not valid for methods!)
WITHOUT_CLASSIFICATION	// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases
WITHOUT_CLASSIFICATION	// Map keep track of the next available variable index for a particular prefix
WITHOUT_CLASSIFICATION	// Control flow graph for this scope
WITHOUT_CLASSIFICATION	//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;
WITHOUT_CLASSIFICATION	// List of modules, classes, and methods defined in this scope!
WITHOUT_CLASSIFICATION	// Returns the containing parent scope!
WITHOUT_CLASSIFICATION	// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);
WITHOUT_CLASSIFICATION	// get "self"
WITHOUT_CLASSIFICATION	// variable is never read, variable is never live
WITHOUT_CLASSIFICATION	// inline script
WITHOUT_CLASSIFICATION	// inline script
WITHOUT_CLASSIFICATION	// This method is called to build assignments for a multiple-assignment instruction
WITHOUT_CLASSIFICATION	// Build the class body!
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// unwrap newline nodes to get their actual type
WITHOUT_CLASSIFICATION	// SSS FIXME: Can this ever be null?
WITHOUT_CLASSIFICATION	// Run the pass on the passed in scope!
WITHOUT_CLASSIFICATION	// done // done // done // done
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	// This method is called to build arguments for a block!
WITHOUT_CLASSIFICATION	// build first node (and ignore its result) and then second node
WITHOUT_CLASSIFICATION	// build first node only and return false
WITHOUT_CLASSIFICATION	// Value of the last expression in the block 
WITHOUT_CLASSIFICATION	// If this is not a closure, the break is equivalent to jumping to the loop end label
WITHOUT_CLASSIFICATION	// get the incoming case value
WITHOUT_CLASSIFICATION	// the CASE instruction
WITHOUT_CLASSIFICATION	// lists to aggregate variables and bodies for whens
WITHOUT_CLASSIFICATION	// build each "when"
WITHOUT_CLASSIFICATION	// multiple conditions for when
WITHOUT_CLASSIFICATION	// build "else" if it exists
WITHOUT_CLASSIFICATION	// now emit bodies
WITHOUT_CLASSIFICATION	// close it out
WITHOUT_CLASSIFICATION	// By default, the container for this class is 's'
WITHOUT_CLASSIFICATION	// Do we have a dynamic container?
WITHOUT_CLASSIFICATION	// Return a meta object corresponding to the class
WITHOUT_CLASSIFICATION	// 1. Load the module first (lhs of node) // 2. Then load the constant from the module
WITHOUT_CLASSIFICATION	// Build IR for args
WITHOUT_CLASSIFICATION	// Build IR for body
WITHOUT_CLASSIFICATION	// if root of method is rescue, build as a light rescue
WITHOUT_CLASSIFICATION	// Instance method
WITHOUT_CLASSIFICATION	// Class method
WITHOUT_CLASSIFICATION	// Other args begin at index 1
WITHOUT_CLASSIFICATION	// Both for fixed arity and variable arity methods
WITHOUT_CLASSIFICATION	// Now for the rest
WITHOUT_CLASSIFICATION	// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!
WITHOUT_CLASSIFICATION	// This is not an expression that computes anything
WITHOUT_CLASSIFICATION	// Create a new closure context
WITHOUT_CLASSIFICATION	// Build args
WITHOUT_CLASSIFICATION	// Build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	// Assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	// By default, the container for this class is 's'
WITHOUT_CLASSIFICATION	// Create a new closure context
WITHOUT_CLASSIFICATION	// Build args
WITHOUT_CLASSIFICATION	// Assign the closure to the block variable in the parent scope and return it
WITHOUT_CLASSIFICATION	// Get the container for this new module
WITHOUT_CLASSIFICATION	// Build the new module
WITHOUT_CLASSIFICATION	// Build the module body
WITHOUT_CLASSIFICATION	// First, build an assignment for a splat, if any, with the rest of the args!
WITHOUT_CLASSIFICATION	// rest of the argument array!
WITHOUT_CLASSIFICATION	// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration
WITHOUT_CLASSIFICATION	// get attr
WITHOUT_CLASSIFICATION	// call operator
WITHOUT_CLASSIFICATION	// set attr
WITHOUT_CLASSIFICATION	// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //
WITHOUT_CLASSIFICATION	// This does the assignment!
WITHOUT_CLASSIFICATION	// This does the assignment!
WITHOUT_CLASSIFICATION	// if v1 is defined and true, we are done! 
WITHOUT_CLASSIFICATION	// build first node only and return true
WITHOUT_CLASSIFICATION	// build first node as non-expr and build second node
WITHOUT_CLASSIFICATION	// Top-level script!
WITHOUT_CLASSIFICATION	// we won't enter the loop -- just build the condition node
WITHOUT_CLASSIFICATION	/* ----------- Private Interface ------------ */
WITHOUT_CLASSIFICATION	// What handles warnings
WITHOUT_CLASSIFICATION	// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop
WITHOUT_CLASSIFICATION	// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit
WITHOUT_CLASSIFICATION	// Dummy top-level method for the class
WITHOUT_CLASSIFICATION	// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit
WITHOUT_CLASSIFICATION	// ------ Define the operations below ----
WITHOUT_CLASSIFICATION	// value copy and type conversion operations
WITHOUT_CLASSIFICATION	// alu operations
WITHOUT_CLASSIFICATION	// method handle, arg receive, return value, and  call instructions
WITHOUT_CLASSIFICATION	// closure instructions
WITHOUT_CLASSIFICATION	// eval instructions
WITHOUT_CLASSIFICATION	// def instructions
WITHOUT_CLASSIFICATION	// exception instructions
WITHOUT_CLASSIFICATION	// Loads
WITHOUT_CLASSIFICATION	// Stores
WITHOUT_CLASSIFICATION	// jump and branch operations
WITHOUT_CLASSIFICATION	// others
WITHOUT_CLASSIFICATION	// a case/when branch
WITHOUT_CLASSIFICATION	// optimization guards
WITHOUT_CLASSIFICATION	// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.
WITHOUT_CLASSIFICATION	// Returns the containing parent scope -- can be a dynamic value (hence Operand)!
WITHOUT_CLASSIFICATION	// scripts
WITHOUT_CLASSIFICATION	// scripts and modules
WITHOUT_CLASSIFICATION	// scripts, classes, and modules
WITHOUT_CLASSIFICATION	// methods and closures
WITHOUT_CLASSIFICATION	// create a new variable using the prefix
WITHOUT_CLASSIFICATION	// create a new temporary variable
WITHOUT_CLASSIFICATION	// Get a new label using a generic prefix
WITHOUT_CLASSIFICATION	// Build the CFG for this scope -- supported only by methods & closures
WITHOUT_CLASSIFICATION	// Get the control flow graph for this scope -- only valid for methods & closures
WITHOUT_CLASSIFICATION	// While processing loops, this returns the loop that we are processing.
WITHOUT_CLASSIFICATION	// Record the loop we are beginning to process
WITHOUT_CLASSIFICATION	// Indicate that we are done processing the loop
WITHOUT_CLASSIFICATION	// Run the passed in compiler pass on this scope!
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	// Readline
WITHOUT_CLASSIFICATION	// If the cfg of the method is around, print the CFG!
WITHOUT_CLASSIFICATION	// Optimize some core class method calls for constant values
WITHOUT_CLASSIFICATION	// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.
WITHOUT_CLASSIFICATION	// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!
WITHOUT_CLASSIFICATION	// If we got a simplified value, mark the call dead and insert a copy in its place!
WITHOUT_CLASSIFICATION	// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!
WITHOUT_CLASSIFICATION	/* ----------- Public abstract methods ---------- */
WITHOUT_CLASSIFICATION	/* ----------- Public methods with a default implementation ---------- */
WITHOUT_CLASSIFICATION	// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem
WITHOUT_CLASSIFICATION	// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.
WITHOUT_CLASSIFICATION	/* --------- Protected fields/methods below --------- */
WITHOUT_CLASSIFICATION	// Dataflow problem with which this node is associated // CFG node for which this node contains info.
WITHOUT_CLASSIFICATION	/* -------------- Public fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// ------- Abstract methods without a default implementation -------
WITHOUT_CLASSIFICATION	// ------- Default implementation methods below -------
WITHOUT_CLASSIFICATION	/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */
WITHOUT_CLASSIFICATION	/* Individual analyses should override this */
WITHOUT_CLASSIFICATION	/* Individual analyses should override this */
WITHOUT_CLASSIFICATION	/* -------------- Packaged/protected fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// We want unique ids for dataflow variables
WITHOUT_CLASSIFICATION	/* -------------- Protected fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	/* -------------- Private fields and methods below ---------------- */
WITHOUT_CLASSIFICATION	// Initialize all flow graph nodes 
WITHOUT_CLASSIFICATION	/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */
WITHOUT_CLASSIFICATION	/* ******************** PUBLIC INTERFACE ******************* */
WITHOUT_CLASSIFICATION	// Unique ID assigned to this variable
WITHOUT_CLASSIFICATION	// start out with a default RubyObject allocator
WITHOUT_CLASSIFICATION	// switch to an allocator based on a default constructor
WITHOUT_CLASSIFICATION	/* ----------- Public Interface ------------ */
WITHOUT_CLASSIFICATION	// class or module
WITHOUT_CLASSIFICATION	// OUT = UNION(IN(succs))
WITHOUT_CLASSIFICATION	// Traverse the instructions in this basic block in reverse order!
WITHOUT_CLASSIFICATION	// v is defined => It is no longer live before 'i'
WITHOUT_CLASSIFICATION	// IN is the same!
WITHOUT_CLASSIFICATION	// IN changed!
WITHOUT_CLASSIFICATION	/* ---------- Protected / package fields, methods --------- */
WITHOUT_CLASSIFICATION	// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!
WITHOUT_CLASSIFICATION	// Do not mark this instruction's operands live if the instruction itself is dead!
WITHOUT_CLASSIFICATION	/* ---------- Private fields, methods --------- */
WITHOUT_CLASSIFICATION	// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 
WITHOUT_CLASSIFICATION	// Used during optimization passes to propagate type and other information
WITHOUT_CLASSIFICATION	// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes
WITHOUT_CLASSIFICATION	/* --------- "Abstract"/"please-override" methods --------- */
WITHOUT_CLASSIFICATION	/* Array of all operands for this instruction */
WITHOUT_CLASSIFICATION	/* List of all variables used by all operands of this instruction */
WITHOUT_CLASSIFICATION	/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */
WITHOUT_CLASSIFICATION	// By default, no simplifications!
WITHOUT_CLASSIFICATION	// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code
WITHOUT_CLASSIFICATION	// By default, return instructions cannot be deleted
WITHOUT_CLASSIFICATION	// If true, returns the rest of the array starting at the index
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// Map of label & basic blocks with that label
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// You can only value-replace atomic values
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// If divisor is zero, don't simplify!
WITHOUT_CLASSIFICATION	// For simplification, get the target value, even if compound
WITHOUT_CLASSIFICATION	// For simplification, get the target value, even if compound
WITHOUT_CLASSIFICATION	// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value
WITHOUT_CLASSIFICATION	// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values
WITHOUT_CLASSIFICATION	// Get the target class of this operand, if we know it!
WITHOUT_CLASSIFICATION	// The following constants capture pre-known static call sites -- used to implement ruby internals
WITHOUT_CLASSIFICATION	/* Nothing to do by default */
WITHOUT_CLASSIFICATION	// Map of label & basic blocks which are waiting for a bb with that label
WITHOUT_CLASSIFICATION	// Init before building basic blocks below!
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id
WITHOUT_CLASSIFICATION	// Jump instruction bbs dont add an edge to the succeeding bb by default
WITHOUT_CLASSIFICATION	// Add forward ref. edges
WITHOUT_CLASSIFICATION	// currBB cannot be null!
WITHOUT_CLASSIFICATION	// Add a forward reference from tgt -> currBB
WITHOUT_CLASSIFICATION	// root-level logic
WITHOUT_CLASSIFICATION	// root-level methods
WITHOUT_CLASSIFICATION	// root-level classes
WITHOUT_CLASSIFICATION	//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;
WITHOUT_CLASSIFICATION	// load receiver
WITHOUT_CLASSIFICATION	// load receiver
WITHOUT_CLASSIFICATION	// receiver
WITHOUT_CLASSIFICATION	// load arguments
WITHOUT_CLASSIFICATION	// load arguments
WITHOUT_CLASSIFICATION	//        case 4: //        case 5:
WITHOUT_CLASSIFICATION	// Object[] args
WITHOUT_CLASSIFICATION	// load handle
WITHOUT_CLASSIFICATION	// args array
WITHOUT_CLASSIFICATION	// i'th argument
WITHOUT_CLASSIFICATION	// invoke specific arity version
WITHOUT_CLASSIFICATION	// Object arg0
WITHOUT_CLASSIFICATION	// useful for code completion inside the IRB
WITHOUT_CLASSIFICATION	// No editing before startPos
WITHOUT_CLASSIFICATION	// no silly ticks!
WITHOUT_CLASSIFICATION	// no candidates? Fail.
WITHOUT_CLASSIFICATION	// at end
WITHOUT_CLASSIFICATION	// undo check
WITHOUT_CLASSIFICATION	// Explicit reference to these vars as symbols...
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//\t\n\"\\'`@$><=;|&{(
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// no check for '*'
WITHOUT_CLASSIFICATION	// no check for '*'
WITHOUT_CLASSIFICATION	// Binding provided for scope, use it
WITHOUT_CLASSIFICATION	// this is ensured by the callers
WITHOUT_CLASSIFICATION	// no binding, just eval in "current" frame (caller's frame)
WITHOUT_CLASSIFICATION	// restore position
WITHOUT_CLASSIFICATION	/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */
WITHOUT_CLASSIFICATION	// Used by the compiler to simplify arg processing
WITHOUT_CLASSIFICATION	// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace
WITHOUT_CLASSIFICATION	// MRI does similar thing on MacOS X with 'EditLine wrapper'.
WITHOUT_CLASSIFICATION	// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)
WITHOUT_CLASSIFICATION	// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)
WITHOUT_CLASSIFICATION	// not overridden, let's go
WITHOUT_CLASSIFICATION	/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */
WITHOUT_CLASSIFICATION	// FIXME: JRUBY-3604
WITHOUT_CLASSIFICATION	// Complete using a Proc object
WITHOUT_CLASSIFICATION	// clear basename so it's anonymous when raising
WITHOUT_CLASSIFICATION	// These are not really used by timeout, but exposed for compatibility
WITHOUT_CLASSIFICATION	// Timeout module methods
WITHOUT_CLASSIFICATION	// Toplevel defines
WITHOUT_CLASSIFICATION	// No seconds, just yield
WITHOUT_CLASSIFICATION	// No timeout in critical section
WITHOUT_CLASSIFICATION	// if it's the exception we're expecting
WITHOUT_CLASSIFICATION	// and we were given a specific exception
WITHOUT_CLASSIFICATION	// otherwise, rethrow
WITHOUT_CLASSIFICATION	// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //
WITHOUT_CLASSIFICATION	// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //
WITHOUT_CLASSIFICATION	// NetProtocolBufferedIO
WITHOUT_CLASSIFICATION	/* When a length is given, read_string acts like get_bytes */
WITHOUT_CLASSIFICATION	// Replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	// ARRAY and STRUCT are only used internally
WITHOUT_CLASSIFICATION	// If no release method is defined, then memory leaks will result.
WITHOUT_CLASSIFICATION	/*     * This variant of newStruct is called from StructLayoutBuilder     */
WITHOUT_CLASSIFICATION	// This also handles unsigned int -> negative signed int conversion
WITHOUT_CLASSIFICATION	// Windows is LLP64
WITHOUT_CLASSIFICATION	// Older JDK on linux map 'c' to 'libc.so' which doesn't work
WITHOUT_CLASSIFICATION	// Ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	// $blah
WITHOUT_CLASSIFICATION	// Replace memory object with one that throws an exception on any access
WITHOUT_CLASSIFICATION	// // A specific version was requested - use as is for search //
WITHOUT_CLASSIFICATION	// Ensure room for terminating zero byte
WITHOUT_CLASSIFICATION	// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //
WITHOUT_CLASSIFICATION	// Add Pointer::NULL as a constant
WITHOUT_CLASSIFICATION	// Create the ordered list of field names from the map
WITHOUT_CLASSIFICATION	// Assemble a [ :name, offset ] array
WITHOUT_CLASSIFICATION	//                case FLOAT:
WITHOUT_CLASSIFICATION	// keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	// keep a reference to avoid the memory being freed
WITHOUT_CLASSIFICATION	// No auto cleanup needed
WITHOUT_CLASSIFICATION	// Wire up Function#call(*args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	// Get the convention from the options hash
WITHOUT_CLASSIFICATION	// Get the convention from the options hash
WITHOUT_CLASSIFICATION	/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */
WITHOUT_CLASSIFICATION	/*------------------------------------------------------------------------*/
WITHOUT_CLASSIFICATION	//AF_INET
WITHOUT_CLASSIFICATION	//AF_INET
WITHOUT_CLASSIFICATION	// RubyUNIXServer
WITHOUT_CLASSIFICATION	// line 321
WITHOUT_CLASSIFICATION	// // Set up for potentially fast-int operations //
WITHOUT_CLASSIFICATION	// // Hook up the MemoryPointer class if its not already there //
WITHOUT_CLASSIFICATION	// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases
WITHOUT_CLASSIFICATION	// no UNIXSockets on Windows
WITHOUT_CLASSIFICATION	// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.
WITHOUT_CLASSIFICATION	// There is something valid in the sun_path component
WITHOUT_CLASSIFICATION	// RubyIPSocket
WITHOUT_CLASSIFICATION	// host is nil or the empty string, bind to INADDR_ANY
WITHOUT_CLASSIFICATION	// host and port given
WITHOUT_CLASSIFICATION	// RubyUDPSocket
WITHOUT_CLASSIFICATION	// By default we always reverse lookup unless do_not_reverse_lookup set.
WITHOUT_CLASSIFICATION	// make sure descriptor is registered
WITHOUT_CLASSIFICATION	// continue with normal initialization
WITHOUT_CLASSIFICATION	// recv returns nil on EOF
WITHOUT_CLASSIFICATION	// Can't support the rest with Java
WITHOUT_CLASSIFICATION	// RubyBasicSocket
WITHOUT_CLASSIFICATION	// we don't have to define any that we don't support; see socket.c
WITHOUT_CLASSIFICATION	// mandatory constants we haven't implemented
WITHOUT_CLASSIFICATION	// constants webrick crashes without
WITHOUT_CLASSIFICATION	// More constants needed by specs
WITHOUT_CLASSIFICATION	// normal file descriptor..try to work with it
WITHOUT_CLASSIFICATION	// AF_INET
WITHOUT_CLASSIFICATION	// 255.255.255.255
WITHOUT_CLASSIFICATION	// 0.0.0.0
WITHOUT_CLASSIFICATION	//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)
WITHOUT_CLASSIFICATION	// line 323
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// can't set TC classloader
WITHOUT_CLASSIFICATION	// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...
WITHOUT_CLASSIFICATION	// datagram, set accordingly // again, AF_INET
WITHOUT_CLASSIFICATION	//IRubyObject family = args[2];
WITHOUT_CLASSIFICATION	// When Socket::AI_PASSIVE and host is nil, return 'any' address. 
WITHOUT_CLASSIFICATION	// The value of 1 is for Socket::AI_PASSIVE.
WITHOUT_CLASSIFICATION	// RubySocket
WITHOUT_CLASSIFICATION	// numeric host, use it for port
WITHOUT_CLASSIFICATION	//            e.printStackTrace();
WITHOUT_CLASSIFICATION	// we were woken up without being selected...poll for thread events and go back to sleep
WITHOUT_CLASSIFICATION	// otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	// no connection immediately accepted, let them try again
WITHOUT_CLASSIFICATION	// do nothing, just exit
WITHOUT_CLASSIFICATION	//nativeThread.setPriority(priority);
WITHOUT_CLASSIFICATION	// set thread context JRuby classloader here, for Ruby-owned thread
WITHOUT_CLASSIFICATION	// uber-ThreadKill catcher, since it should always just mean "be dead"
WITHOUT_CLASSIFICATION	// Call the thread's code
WITHOUT_CLASSIFICATION	// Someone called exit!, so we need to kill the main thread
WITHOUT_CLASSIFICATION	// restore context classloader, in case we're using a thread pool
WITHOUT_CLASSIFICATION	// be dead
WITHOUT_CLASSIFICATION	// loop until a context is available, to clean up softrefs that might have been collected
WITHOUT_CLASSIFICATION	// all threads in ruby thread group plus main thread
WITHOUT_CLASSIFICATION	// thread is not alive, skip it
WITHOUT_CLASSIFICATION	// future is done or cancelled, skip it
WITHOUT_CLASSIFICATION	// first, check if the sender has unreceived mail
WITHOUT_CLASSIFICATION	// then deliver mail to the target
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// Define a second version that doesn't take a block, so we have unique code paths for both cases.
WITHOUT_CLASSIFICATION	// invoke pre method stuff
WITHOUT_CLASSIFICATION	// main body
WITHOUT_CLASSIFICATION	// return jump handling
WITHOUT_CLASSIFICATION	// finally
WITHOUT_CLASSIFICATION	// return result if we're still good
WITHOUT_CLASSIFICATION	// redo jump handling
WITHOUT_CLASSIFICATION	// clear the redo
WITHOUT_CLASSIFICATION	// get runtime, create jump error, and throw it
WITHOUT_CLASSIFICATION	// throw redo error if we're still good
WITHOUT_CLASSIFICATION	// finally handling for abnormal exit
WITHOUT_CLASSIFICATION	//call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	// No required specified, check actual number of required args
WITHOUT_CLASSIFICATION	// actual required is less than 3, so we use specific arity
WITHOUT_CLASSIFICATION	// actual required is greater than 3, raise error (we don't support actual required > 3)
WITHOUT_CLASSIFICATION	// simple path, no multimethod
WITHOUT_CLASSIFICATION	// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)
WITHOUT_CLASSIFICATION	// normal all-rest method
WITHOUT_CLASSIFICATION	// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check
WITHOUT_CLASSIFICATION	// promise to implement zero to N
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// just confirm minimum args provided
WITHOUT_CLASSIFICATION	// just confirm args length == required
WITHOUT_CLASSIFICATION	// confirm minimum args provided
WITHOUT_CLASSIFICATION	// confirm maximum not greater than optional
WITHOUT_CLASSIFICATION	// Raise an error if arity does not match requirements
WITHOUT_CLASSIFICATION	// tc
WITHOUT_CLASSIFICATION	// self // name
WITHOUT_CLASSIFICATION	// no args
WITHOUT_CLASSIFICATION	// variable args with block
WITHOUT_CLASSIFICATION	// variable args no block, load null block
WITHOUT_CLASSIFICATION	// zero args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// one arg with block
WITHOUT_CLASSIFICATION	// one arg, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// two args with block
WITHOUT_CLASSIFICATION	// two args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// three args with block
WITHOUT_CLASSIFICATION	// three args, no block; load NULL_BLOCK
WITHOUT_CLASSIFICATION	// load block if it accepts block
WITHOUT_CLASSIFICATION	// all other arg cases with block
WITHOUT_CLASSIFICATION	// all other arg cases without block
WITHOUT_CLASSIFICATION	// one arg, no block; do nothing
WITHOUT_CLASSIFICATION	// two args, no block; do nothing
WITHOUT_CLASSIFICATION	// three args, no block; do nothing
WITHOUT_CLASSIFICATION	// load target for invocations
WITHOUT_CLASSIFICATION	// load receiver as original type for virtual invocation
WITHOUT_CLASSIFICATION	// static invocation
WITHOUT_CLASSIFICATION	// virtual invocation
WITHOUT_CLASSIFICATION	// void return type, so we need to load a nil for returning below
WITHOUT_CLASSIFICATION	// normal finally and exit
WITHOUT_CLASSIFICATION	// promise to implement one to N
WITHOUT_CLASSIFICATION	//call post method stuff (exception raised)
WITHOUT_CLASSIFICATION	// these are only needed if we have a non-noop call config
WITHOUT_CLASSIFICATION	// method itself // ThreadContext // invoked name
WITHOUT_CLASSIFICATION	// method itself // ThreadContext // invoked name
WITHOUT_CLASSIFICATION	// singleton classes don't get their own visibility domain
WITHOUT_CLASSIFICATION	// For visibility we need real meta class and not anonymous one from class << self
WITHOUT_CLASSIFICATION	// SimpleInvocationMethod
WITHOUT_CLASSIFICATION	// never reached
WITHOUT_CLASSIFICATION	// promise to implement N with block
WITHOUT_CLASSIFICATION	// promise to implement zero to N with block
WITHOUT_CLASSIFICATION	// promise to implement one to N with block
WITHOUT_CLASSIFICATION	// promise to implement two to N with block
WITHOUT_CLASSIFICATION	// promise to implement zero to three with block
WITHOUT_CLASSIFICATION	// promise to implement one to three with block
WITHOUT_CLASSIFICATION	// promise to implement two to three with block
WITHOUT_CLASSIFICATION	// promise to implement three with block
WITHOUT_CLASSIFICATION	// promise to implement N
WITHOUT_CLASSIFICATION	// DumpingInvocationMethodFactory
WITHOUT_CLASSIFICATION	// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.
WITHOUT_CLASSIFICATION	// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.
WITHOUT_CLASSIFICATION	// promise to implement two to N
WITHOUT_CLASSIFICATION	// promise to implement three to N
WITHOUT_CLASSIFICATION	// promise to implement zero to three
WITHOUT_CLASSIFICATION	// promise to implement one to three
WITHOUT_CLASSIFICATION	// promise to implement two to three
WITHOUT_CLASSIFICATION	// promise to implement three
WITHOUT_CLASSIFICATION	// all other arities use "n" dispatch path
WITHOUT_CLASSIFICATION	// load up object and add a few useful methods
WITHOUT_CLASSIFICATION	// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel
WITHOUT_CLASSIFICATION	// construct the class, implementing all supertypes
WITHOUT_CLASSIFICATION	// fields needed for dispatch and such
WITHOUT_CLASSIFICATION	// create constructor
WITHOUT_CLASSIFICATION	// wrap self and store the wrapper
WITHOUT_CLASSIFICATION	// end constructor
WITHOUT_CLASSIFICATION	// start setup method
WITHOUT_CLASSIFICATION	// set RubyClass
WITHOUT_CLASSIFICATION	// set Ruby
WITHOUT_CLASSIFICATION	// all methods dispatch to the simple version by default, which is method_missing normally
WITHOUT_CLASSIFICATION	// try specific name first, falling back on simple name
WITHOUT_CLASSIFICATION	// get current context
WITHOUT_CLASSIFICATION	// load self, class, and name
WITHOUT_CLASSIFICATION	// construct the class, implementing all supertypes
WITHOUT_CLASSIFICATION	// fields needed for dispatch and such
WITHOUT_CLASSIFICATION	// create constructor
WITHOUT_CLASSIFICATION	// end constructor
WITHOUT_CLASSIFICATION	// for each simple method name, implement the complex methods, calling the simple version
WITHOUT_CLASSIFICATION	// load arguments into IRubyObject[] for dispatch
WITHOUT_CLASSIFICATION	// convert to IRubyObject
WITHOUT_CLASSIFICATION	// load null block
WITHOUT_CLASSIFICATION	// invoke method
WITHOUT_CLASSIFICATION	// if we expect a return value, unwrap it
WITHOUT_CLASSIFICATION	// end setup method
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// create static init, for a monitor object
WITHOUT_CLASSIFICATION	// store the wrapper
WITHOUT_CLASSIFICATION	// prepare temp locals
WITHOUT_CLASSIFICATION	// Try to look up field for simple name // get field; if nonnull, go straight to dispatch
WITHOUT_CLASSIFICATION	// field is null, lock class and try to populate
WITHOUT_CLASSIFICATION	// try/finally block to ensure unlock
WITHOUT_CLASSIFICATION	// store it
WITHOUT_CLASSIFICATION	// end of try block
WITHOUT_CLASSIFICATION	// finally block to release monitor
WITHOUT_CLASSIFICATION	// exception handling for monitor release
WITHOUT_CLASSIFICATION	// re-get, re-check method; if not null now, go to dispatch
WITHOUT_CLASSIFICATION	// load self, class, and name
WITHOUT_CLASSIFICATION	// load arguments into IRubyObject[] for dispatch
WITHOUT_CLASSIFICATION	// convert to IRubyObject
WITHOUT_CLASSIFICATION	// invoke method
WITHOUT_CLASSIFICATION	// if we expect a return value, unwrap it
WITHOUT_CLASSIFICATION	// end setup method
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// create the class
WITHOUT_CLASSIFICATION	// method still not available, call method_missing
WITHOUT_CLASSIFICATION	// perform the dispatch
WITHOUT_CLASSIFICATION	// try to load the specified name; only if that fails, try to define the class
WITHOUT_CLASSIFICATION	// up two slots, for long's two halves
WITHOUT_CLASSIFICATION	// up two slots, for long's two halves
WITHOUT_CLASSIFICATION	// setup the class
WITHOUT_CLASSIFICATION	// now, create a method_added that can replace the DynamicMethod fields as they're redefined
WITHOUT_CLASSIFICATION	// do nothing, it's a non-impl method
WITHOUT_CLASSIFICATION	// probably a primitive
WITHOUT_CLASSIFICATION	// interfaces are handled as modules
WITHOUT_CLASSIFICATION	// construct the mirror class and parent classes
WITHOUT_CLASSIFICATION	// set the full name
WITHOUT_CLASSIFICATION	// include all interfaces
WITHOUT_CLASSIFICATION	// if it's an array, only add methods for aref, aset, and length
WITHOUT_CLASSIFICATION	// add array construction methods
WITHOUT_CLASSIFICATION	// add all public constructors (note: getConstructors only returns public ones)
WITHOUT_CLASSIFICATION	// add all instance and static methods
WITHOUT_CLASSIFICATION	// proxy is complete, return it
WITHOUT_CLASSIFICATION	// too much array creation!
WITHOUT_CLASSIFICATION	// only include static methods if specified
WITHOUT_CLASSIFICATION	// add a few type-specific special methods
WITHOUT_CLASSIFICATION	// add all static variables
WITHOUT_CLASSIFICATION	// only public static fields that are valid constants
WITHOUT_CLASSIFICATION	// looks like someone's trying to raise a Java exception. Let them.
WITHOUT_CLASSIFICATION	// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.
WITHOUT_CLASSIFICATION	// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive
WITHOUT_CLASSIFICATION	// long first because it's what Fixnum claims to be
WITHOUT_CLASSIFICATION	// double first because it's what float claims to be
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	// we set all Java methods to optional, since many/most have overloads
WITHOUT_CLASSIFICATION	// If we hold a Java object, we need a java_class accessor
WITHOUT_CLASSIFICATION	// line 326
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// initialize cache of parameter types to method
WITHOUT_CLASSIFICATION	// too much array creation!
WITHOUT_CLASSIFICATION	// construct new array proxy (ArrayJavaProxy)
WITHOUT_CLASSIFICATION	// Get map of all fields we want to define.  
WITHOUT_CLASSIFICATION	// Look through all mappings to find a match entry for this field
WITHOUT_CLASSIFICATION	// Hit a non-java proxy class (included Modules can be a cause of this...skip)
WITHOUT_CLASSIFICATION	// We could not find all of them print out first one (we could print them all?)
WITHOUT_CLASSIFICATION	// dummy bodies for default impls
WITHOUT_CLASSIFICATION	// initialize this if it hasn't been
WITHOUT_CLASSIFICATION	// initialize these if they haven't been
WITHOUT_CLASSIFICATION	// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes
WITHOUT_CLASSIFICATION	// setup new, etc unless this is a ConcreteJavaProxy subclass
WITHOUT_CLASSIFICATION	// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type
WITHOUT_CLASSIFICATION	// list of interfaces we implement
WITHOUT_CLASSIFICATION	// We capture the original "new" and make it private
WITHOUT_CLASSIFICATION	// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!
WITHOUT_CLASSIFICATION	// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object
WITHOUT_CLASSIFICATION	// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object
WITHOUT_CLASSIFICATION	// Now we add an "implement" and "implement_all" methods to the class
WITHOUT_CLASSIFICATION	// implement all forces implementation of all interfaces we intend // for this class to implement
WITHOUT_CLASSIFICATION	// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface
WITHOUT_CLASSIFICATION	// walk all superclasses aggregating interfaces
WITHOUT_CLASSIFICATION	// construct the new interface impl and set it into the object
WITHOUT_CLASSIFICATION	// assuming the user wants a collection of interfaces that can be // included together. make it so.
WITHOUT_CLASSIFICATION	// not allowed for existing Java interface modules
WITHOUT_CLASSIFICATION	// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well
WITHOUT_CLASSIFICATION	// already set up append_features, just add the interface if we haven't already
WITHOUT_CLASSIFICATION	// array-of-interface-type creation/identity
WITHOUT_CLASSIFICATION	// keep this variant for kind_of? testing
WITHOUT_CLASSIFICATION	// array creation should use this variant
WITHOUT_CLASSIFICATION	// parent.setConstant(name, proxyClass); // where the name should come from ?
WITHOUT_CLASSIFICATION	// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.
WITHOUT_CLASSIFICATION	// add reference to interface module
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// proxy is complete, return it
WITHOUT_CLASSIFICATION	// same as argument_types, but matches name in java.lang.reflect.Constructor/Method
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// weakly reserved names
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// modified only by addMethod; no synchronization required
WITHOUT_CLASSIFICATION	// if there's no constructor, we must prevent construction
WITHOUT_CLASSIFICATION	// caching constructors, as they're accessed for each new instance
WITHOUT_CLASSIFICATION	// proxy module for interfaces
WITHOUT_CLASSIFICATION	// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields
WITHOUT_CLASSIFICATION	// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).
WITHOUT_CLASSIFICATION	// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.
WITHOUT_CLASSIFICATION	// Now add all aliases for the static methods (fields) as appropriate
WITHOUT_CLASSIFICATION	// proxy is under construction, building thread can // safely read non-volatile value
WITHOUT_CLASSIFICATION	// Add property name aliases
WITHOUT_CLASSIFICATION	// getFoo      => foo // getFoo(int) => foo(int)
WITHOUT_CLASSIFICATION	// setFoo(Foo) => foo=(Foo)
WITHOUT_CLASSIFICATION	// isFoo() => foo, isFoo(*) => foo(*)
WITHOUT_CLASSIFICATION	// Additionally add ?-postfixed aliases to any boolean methods and properties.
WITHOUT_CLASSIFICATION	// is_something?, contains_thing?
WITHOUT_CLASSIFICATION	// something?
WITHOUT_CLASSIFICATION	// setup constants for public inner classes
WITHOUT_CLASSIFICATION	// setup constants for public inner classes
WITHOUT_CLASSIFICATION	// Ignore bad constant named inner classes pending JRUBY-697
WITHOUT_CLASSIFICATION	// Ignore bad constant named inner classes pending JRUBY-697
WITHOUT_CLASSIFICATION	// create constructorInstaller; if there are no constructors, it will disable construction
WITHOUT_CLASSIFICATION	// we need to collect all methods, though we'll only // install the ones that are named in this class
WITHOUT_CLASSIFICATION	// Install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	// now iterate over all installers and make sure they also have appropriate aliases
WITHOUT_CLASSIFICATION	// old (quasi-deprecated) interface class
WITHOUT_CLASSIFICATION	// 1.9 support for encodings
WITHOUT_CLASSIFICATION	// double-check the cache now that we're synchronized
WITHOUT_CLASSIFICATION	// setFoo(Foo) => foo=(Foo)
WITHOUT_CLASSIFICATION	// isFoo() => foo, isFoo(*) => foo(*)
WITHOUT_CLASSIFICATION	// is_something?, contains_thing?
WITHOUT_CLASSIFICATION	// one word type name that starts lower-case...it may be a primitive type
WITHOUT_CLASSIFICATION	// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here
WITHOUT_CLASSIFICATION	// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.
WITHOUT_CLASSIFICATION	// see note above re: return type
WITHOUT_CLASSIFICATION	// restrictive security policy; no matter, we only want public // classes anyway
WITHOUT_CLASSIFICATION	// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case
WITHOUT_CLASSIFICATION	// one-dimensional array
WITHOUT_CLASSIFICATION	// n-dimensional array
WITHOUT_CLASSIFICATION	// if it's an array of arrays, recurse with the component type
WITHOUT_CLASSIFICATION	// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130
WITHOUT_CLASSIFICATION	// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface
WITHOUT_CLASSIFICATION	// can't be converted any more, return it
WITHOUT_CLASSIFICATION	// getFooBar() => fooBar?, foo_bar?(*)
WITHOUT_CLASSIFICATION	// If not a property, but is boolean add ?-postfixed aliases.
WITHOUT_CLASSIFICATION	// many cases are ok to convert to float; if not one of these, error
WITHOUT_CLASSIFICATION	// for Object, default to natural wrapper type
WITHOUT_CLASSIFICATION	// rubyObject is already of the required jruby class (or subclass)
WITHOUT_CLASSIFICATION	// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()
WITHOUT_CLASSIFICATION	// it's not one of the types we convert, so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	// we've found a Java type to which we've coerced the Ruby value, wrap it
WITHOUT_CLASSIFICATION	// set of utility methods for Java-based proxy objects
WITHOUT_CLASSIFICATION	// the proxy (wrapper) type hierarchy
WITHOUT_CLASSIFICATION	//InterfaceJavaProxy.createInterfaceJavaProxy(context);
WITHOUT_CLASSIFICATION	// also create the JavaProxy* classes
WITHOUT_CLASSIFICATION	// The template for interface modules
WITHOUT_CLASSIFICATION	// Now attach Java-related extras to core classes
WITHOUT_CLASSIFICATION	// add all name-to-class mappings
WITHOUT_CLASSIFICATION	// add some base Java classes everyone will need
WITHOUT_CLASSIFICATION	// finally, set JavaSupport.isEnabled to true
WITHOUT_CLASSIFICATION	// shouldn't happen, but if a superclass is specified, it's not ours
WITHOUT_CLASSIFICATION	// include any interfaces we extend
WITHOUT_CLASSIFICATION	// java.lang.Object is added at root of java proxy classes
WITHOUT_CLASSIFICATION	// other java proxy classes added under their superclass' java proxy
WITHOUT_CLASSIFICATION	// include interface modules into the proxy class
WITHOUT_CLASSIFICATION	// JRUBY-2938 the proxy class might already exist
WITHOUT_CLASSIFICATION	// add java_method for unbound use
WITHOUT_CLASSIFICATION	// add alias to meta
WITHOUT_CLASSIFICATION	// we'll only map conventional class names to modules 
WITHOUT_CLASSIFICATION	/* expected */
WITHOUT_CLASSIFICATION	// Haven't found a class, continue on as though it were a package
WITHOUT_CLASSIFICATION	// upper case name, so most likely a class
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// add alias to meta
WITHOUT_CLASSIFICATION	// this is where we'll get connected when classes are opened using // package module syntax.
WITHOUT_CLASSIFICATION	// save package module as ivar in parent, and add method to parent so // we don't have to come back here.
WITHOUT_CLASSIFICATION	// this covers primitives and (unlikely) lower-case class names
WITHOUT_CLASSIFICATION	/* not primitive or lc class */
WITHOUT_CLASSIFICATION	/* not primitive or lc class */
WITHOUT_CLASSIFICATION	// Is there a supplied proc argument or do we assume a block was supplied
WITHOUT_CLASSIFICATION	// Create list of interfaces to proxy (and make sure they really are interfaces)
WITHOUT_CLASSIFICATION	// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them
WITHOUT_CLASSIFICATION	// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode
WITHOUT_CLASSIFICATION	// normal new class implementing interfaces
WITHOUT_CLASSIFICATION	/*         * Initialize some components.         */
WITHOUT_CLASSIFICATION	// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)
WITHOUT_CLASSIFICATION	// Java reflection does not allow retrieving constructors like methods
WITHOUT_CLASSIFICATION	// for zero args case we can stop searching
WITHOUT_CLASSIFICATION	// for zero args case we can stop searching
WITHOUT_CLASSIFICATION	// no matching ctor found
WITHOUT_CLASSIFICATION	// Create Ruby proxies for any input arguments that are not primitives.
WITHOUT_CLASSIFICATION	// prepare a faster handle if handles are enabled and the method and class are public
WITHOUT_CLASSIFICATION	// must be a public method
WITHOUT_CLASSIFICATION	// must be a public class
WITHOUT_CLASSIFICATION	// must have been loaded from our known classloader hierarchy
WITHOUT_CLASSIFICATION	// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 
WITHOUT_CLASSIFICATION	// search through all declared methods to find a closest match
WITHOUT_CLASSIFICATION	// no matching method found
WITHOUT_CLASSIFICATION	// this test really means, that this is a ruby-defined subclass of a java class
WITHOUT_CLASSIFICATION	/*         * First we need to register the JRuby engine.         */
WITHOUT_CLASSIFICATION	/*         * Now we create a new BSFManager.         */
WITHOUT_CLASSIFICATION	/*         * Initialize a simple Frame.          */
WITHOUT_CLASSIFICATION	//e.printStackTrace();
WITHOUT_CLASSIFICATION	//e.printStackTrace();
WITHOUT_CLASSIFICATION	// JRUBY-530, while case
WITHOUT_CLASSIFICATION	// end class
WITHOUT_CLASSIFICATION	// // this test really means, that this is a ruby-defined subclass of a java class //
WITHOUT_CLASSIFICATION	// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.
WITHOUT_CLASSIFICATION	/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */
WITHOUT_CLASSIFICATION	/*              * Execute a Ruby script (add the menubar to the frame).             */
WITHOUT_CLASSIFICATION	/*                     * Execute Ruby statements.                     */
WITHOUT_CLASSIFICATION	/*                     * Evaluates a Ruby expression and display the result.                     */
WITHOUT_CLASSIFICATION	// Populate values for the parameter names
WITHOUT_CLASSIFICATION	/* package scope */
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler // installed.
WITHOUT_CLASSIFICATION	// // Ruby-level methods //
WITHOUT_CLASSIFICATION	// need names ordered for key generation later
WITHOUT_CLASSIFICATION	// we only collect methods and interfaces for  // user-defined proxy classes.
WITHOUT_CLASSIFICATION	// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.
WITHOUT_CLASSIFICATION	// get any included interfaces
WITHOUT_CLASSIFICATION	// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.
WITHOUT_CLASSIFICATION	// statically initialized below
WITHOUT_CLASSIFICATION	// finish class initializer
WITHOUT_CLASSIFICATION	// trigger class initialization for the class
WITHOUT_CLASSIFICATION	// should not happen!
WITHOUT_CLASSIFICATION	// start class
WITHOUT_CLASSIFICATION	// make getter for handler
WITHOUT_CLASSIFICATION	// make getter for proxy class
WITHOUT_CLASSIFICATION	// add (potentially) overridden names to the key. // TODO: see note above re: optimizations
WITHOUT_CLASSIFICATION	// We generate all constructors and let some fail during invocation later
WITHOUT_CLASSIFICATION	// create static private method field
WITHOUT_CLASSIFICATION	// load static empty array
WITHOUT_CLASSIFICATION	// box arguments
WITHOUT_CLASSIFICATION	// this is a simple rethrow handler
WITHOUT_CLASSIFICATION	// // construct the super-proxy method //
WITHOUT_CLASSIFICATION	// do a void return
WITHOUT_CLASSIFICATION	// // utility methods //
WITHOUT_CLASSIFICATION	// Is there a supplied proc argument or do we assume a block was // supplied
WITHOUT_CLASSIFICATION	// store call information so method_missing impl can use it
WITHOUT_CLASSIFICATION	// use the same logic as in EvaluationState
WITHOUT_CLASSIFICATION	// no opt, no rest, exact match
WITHOUT_CLASSIFICATION	// only rest, must be at least required
WITHOUT_CLASSIFICATION	// opt but no rest, must be at least required and no more than required + opt
WITHOUT_CLASSIFICATION	// opt and rest, must be at least required
WITHOUT_CLASSIFICATION	// No block from a nil proc
WITHOUT_CLASSIFICATION	// If not already a proc then we should try and make it one.
WITHOUT_CLASSIFICATION	// The current block is already associated with proc.  No need to create a new one
WITHOUT_CLASSIFICATION	// Has the method that is calling super received a block argument
WITHOUT_CLASSIFICATION	/* NUL */
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// 'class << state.self' and 'class << obj' uses defn as opposed to defs
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	// classes are directly in the hierarchy, so no special logic is necessary for implementer
WITHOUT_CLASSIFICATION	// must be power of 2 // must be power of 2
WITHOUT_CLASSIFICATION	// Find power-of-two sizes best matching arguments
WITHOUT_CLASSIFICATION	// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)
WITHOUT_CLASSIFICATION	//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());
WITHOUT_CLASSIFICATION	//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }
WITHOUT_CLASSIFICATION	// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue
WITHOUT_CLASSIFICATION	// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.
WITHOUT_CLASSIFICATION	// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.
WITHOUT_CLASSIFICATION	// ctor used by remove/rehash
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// must be called under lock
WITHOUT_CLASSIFICATION	// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.
WITHOUT_CLASSIFICATION	// temp method to verify tableSize value // must be called under lock
WITHOUT_CLASSIFICATION	// Single node in list
WITHOUT_CLASSIFICATION	// indirect read-/write- volatile
WITHOUT_CLASSIFICATION	// indirect read-/write- volatile
WITHOUT_CLASSIFICATION	// entry exists, proxy has been gc'ed. replace entry.
WITHOUT_CLASSIFICATION	// Where we get new positions from.
WITHOUT_CLASSIFICATION	// Start of string ([, (, {, <, ', ", \n) 
WITHOUT_CLASSIFICATION	// Number of newlines read from the reader
WITHOUT_CLASSIFICATION	// How many bytes into the source are we?
WITHOUT_CLASSIFICATION	// For 'list' and only populated if list is not null.
WITHOUT_CLASSIFICATION	// Last full line read.
WITHOUT_CLASSIFICATION	// Save sourceLine for error reporting to display line where error occurred
WITHOUT_CLASSIFICATION	// Get rest of line. lineBuffer filled as side-effect...
WITHOUT_CLASSIFICATION	// Expand variables, Indentation of final marker
WITHOUT_CLASSIFICATION	// Expand variables, Indentation of final marker
WITHOUT_CLASSIFICATION	// End of string (], ), }, >, ', ", \0)
WITHOUT_CLASSIFICATION	// How many strings are nested in the current string term
WITHOUT_CLASSIFICATION	// Single-quote fast path
WITHOUT_CLASSIFICATION	// Regexp engine 'java'
WITHOUT_CLASSIFICATION	// Was a goto in original ruby lexer
WITHOUT_CLASSIFICATION	/* just ignore */
WITHOUT_CLASSIFICATION	/* octal constant */
WITHOUT_CLASSIFICATION	/* hex constant */
WITHOUT_CLASSIFICATION	// PUSH(1)
WITHOUT_CLASSIFICATION	// POP
WITHOUT_CLASSIFICATION	// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.
WITHOUT_CLASSIFICATION	// LEXPOP
WITHOUT_CLASSIFICATION	// SET_P
WITHOUT_CLASSIFICATION	// Marker delimiting heredoc boundary
WITHOUT_CLASSIFICATION	// Found end marker for this heredoc
WITHOUT_CLASSIFICATION	// Put back lastLine for any elements past start of heredoc marker
WITHOUT_CLASSIFICATION	// Last token read via yylex().
WITHOUT_CLASSIFICATION	// Value of last token which had a value associated with it.
WITHOUT_CLASSIFICATION	// Stream of data that yylex() examines.
WITHOUT_CLASSIFICATION	// Used for tiny smidgen of grammar in lexer (see setParserSupport())
WITHOUT_CLASSIFICATION	// Give a name to a value.  Enebo: This should be used more.
WITHOUT_CLASSIFICATION	// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').
WITHOUT_CLASSIFICATION	// Are we lexing Ruby 1.8 or 1.9+ syntax
WITHOUT_CLASSIFICATION	// Count of nested parentheses (1.9 only)
WITHOUT_CLASSIFICATION	// 1.9 only
WITHOUT_CLASSIFICATION	// Short-hand (e.g. %{,%.,%!,... versus %Q{).
WITHOUT_CLASSIFICATION	// Long-hand (e.g. %Q{}).
WITHOUT_CLASSIFICATION	/* no mb || ismbchar(term)*/
WITHOUT_CLASSIFICATION	/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */
WITHOUT_CLASSIFICATION	// DEBUGGING HELP 
WITHOUT_CLASSIFICATION	/* '\v' */
WITHOUT_CLASSIFICATION	/* end of script. */
WITHOUT_CLASSIFICATION	/* white spaces */
WITHOUT_CLASSIFICATION	/* '\v' */
WITHOUT_CLASSIFICATION	/* it's a comment */
WITHOUT_CLASSIFICATION	// Replace a string of newlines with a single one
WITHOUT_CLASSIFICATION	/* $\: output record separator */
WITHOUT_CLASSIFICATION	// EOF (ENEBO: After default?
WITHOUT_CLASSIFICATION	// documentation nodes
WITHOUT_CLASSIFICATION	// In case last next was the newline.
WITHOUT_CLASSIFICATION	// Just a plain bang
WITHOUT_CLASSIFICATION	/* $_: last read line string */
WITHOUT_CLASSIFICATION	/* $~: match-data */
WITHOUT_CLASSIFICATION	/* $*: argv */
WITHOUT_CLASSIFICATION	/* $$: pid */
WITHOUT_CLASSIFICATION	/* $?: last status */
WITHOUT_CLASSIFICATION	/* $!: error string */
WITHOUT_CLASSIFICATION	/* $@: error position */
WITHOUT_CLASSIFICATION	/* $/: input record separator */
WITHOUT_CLASSIFICATION	/* $;: field separator */
WITHOUT_CLASSIFICATION	/* $,: output field separator */
WITHOUT_CLASSIFICATION	/* $.: last read line number */
WITHOUT_CLASSIFICATION	/* $=: ignorecase */
WITHOUT_CLASSIFICATION	/* $:: load path */
WITHOUT_CLASSIFICATION	/* $<: reading filename */
WITHOUT_CLASSIFICATION	/* $": already loaded files */
WITHOUT_CLASSIFICATION	/* $&: last match */
WITHOUT_CLASSIFICATION	/* $`: string before last match */
WITHOUT_CLASSIFICATION	/* $': string after last match */
WITHOUT_CLASSIFICATION	// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop
WITHOUT_CLASSIFICATION	/* See if it is a reserved word.  */
WITHOUT_CLASSIFICATION	// enum lex_state
WITHOUT_CLASSIFICATION	// block (primary)
WITHOUT_CLASSIFICATION	// block (expr)
WITHOUT_CLASSIFICATION	// hash
WITHOUT_CLASSIFICATION	// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.
WITHOUT_CLASSIFICATION	// FIXME: peek('u') utf8 stuff for 1.9
WITHOUT_CLASSIFICATION	// We don't append '+' since Java number parser gets confused
WITHOUT_CLASSIFICATION	//  hexadecimal
WITHOUT_CLASSIFICATION	// binary
WITHOUT_CLASSIFICATION	// decimal
WITHOUT_CLASSIFICATION	//Octal
WITHOUT_CLASSIFICATION	//  '_' in number just ignored
WITHOUT_CLASSIFICATION	// backslash
WITHOUT_CLASSIFICATION	// newline
WITHOUT_CLASSIFICATION	// horizontal tab
WITHOUT_CLASSIFICATION	// form feed
WITHOUT_CLASSIFICATION	// vertical tab
WITHOUT_CLASSIFICATION	// alarm(bell)
WITHOUT_CLASSIFICATION	// escape
WITHOUT_CLASSIFICATION	// hex constant
WITHOUT_CLASSIFICATION	//char hexValue = scanHex(2);
WITHOUT_CLASSIFICATION	// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).
WITHOUT_CLASSIFICATION	// space
WITHOUT_CLASSIFICATION	// Where we started this marker match
WITHOUT_CLASSIFICATION	// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.
WITHOUT_CLASSIFICATION	// We use offset here to keep track of extra newlines for windows
WITHOUT_CLASSIFICATION	// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).
WITHOUT_CLASSIFICATION	// FIXME: Old Mac format strings?
WITHOUT_CLASSIFICATION	// FIXME: Old Mac format strings?
WITHOUT_CLASSIFICATION	// Where we get our newest char's
WITHOUT_CLASSIFICATION	// Our readback/pushback buffer.
WITHOUT_CLASSIFICATION	// index of last character in pushback buffer
WITHOUT_CLASSIFICATION	// Character read before previous read
WITHOUT_CLASSIFICATION	// keep value of twoAgo around so we can restore after we unread
WITHOUT_CLASSIFICATION	// NetProtocolBufferedIOLibrary
WITHOUT_CLASSIFICATION	// BigDecimalLibrary
WITHOUT_CLASSIFICATION	// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now
WITHOUT_CLASSIFICATION	// Ruby's designation for some platforms, minus version numbers in some cases
WITHOUT_CLASSIFICATION	// that's what JDK5 produces on Windows Vista
WITHOUT_CLASSIFICATION	// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));
WITHOUT_CLASSIFICATION	// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).
WITHOUT_CLASSIFICATION	// this set is only for darwin
WITHOUT_CLASSIFICATION	// DigestLibrary
WITHOUT_CLASSIFICATION	// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error
WITHOUT_CLASSIFICATION	// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error
WITHOUT_CLASSIFICATION	// do nothing, return dummy version below
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	// line 329
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// dynamically increase
WITHOUT_CLASSIFICATION	// discarding a token does not change stack
WITHOUT_CLASSIFICATION	// else [default] reduce (yyN)
WITHOUT_CLASSIFICATION	// shift to yyN
WITHOUT_CLASSIFICATION	// reduce (yyN)
WITHOUT_CLASSIFICATION	// leave stack alone
WITHOUT_CLASSIFICATION	// line 271
WITHOUT_CLASSIFICATION	// line 274
WITHOUT_CLASSIFICATION	// line 303
WITHOUT_CLASSIFICATION	// line 311
WITHOUT_CLASSIFICATION	// line 314
WITHOUT_CLASSIFICATION	// line 317
WITHOUT_CLASSIFICATION	// line 332
WITHOUT_CLASSIFICATION	// line 338
WITHOUT_CLASSIFICATION	// line 341
WITHOUT_CLASSIFICATION	// line 344
WITHOUT_CLASSIFICATION	// line 351
WITHOUT_CLASSIFICATION	// line 358
WITHOUT_CLASSIFICATION	// line 367
WITHOUT_CLASSIFICATION	// line 372
WITHOUT_CLASSIFICATION	// line 378
WITHOUT_CLASSIFICATION	// line 382
WITHOUT_CLASSIFICATION	// line 407
WITHOUT_CLASSIFICATION	// line 411
WITHOUT_CLASSIFICATION	// line 414
WITHOUT_CLASSIFICATION	// line 417
WITHOUT_CLASSIFICATION	// line 420
WITHOUT_CLASSIFICATION	// line 426
WITHOUT_CLASSIFICATION	// line 434
WITHOUT_CLASSIFICATION	// line 443
WITHOUT_CLASSIFICATION	// line 446
WITHOUT_CLASSIFICATION	// line 452
WITHOUT_CLASSIFICATION	// line 457
WITHOUT_CLASSIFICATION	// line 464
WITHOUT_CLASSIFICATION	// line 467
WITHOUT_CLASSIFICATION	// line 470
WITHOUT_CLASSIFICATION	// line 479
WITHOUT_CLASSIFICATION	// line 484
WITHOUT_CLASSIFICATION	// line 486
WITHOUT_CLASSIFICATION	// line 492
WITHOUT_CLASSIFICATION	// line 498
WITHOUT_CLASSIFICATION	// line 501
WITHOUT_CLASSIFICATION	// line 504
WITHOUT_CLASSIFICATION	// line 507
WITHOUT_CLASSIFICATION	// line 510
WITHOUT_CLASSIFICATION	// line 519
WITHOUT_CLASSIFICATION	// line 525
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// line 537
WITHOUT_CLASSIFICATION	// line 540
WITHOUT_CLASSIFICATION	// line 543
WITHOUT_CLASSIFICATION	// line 546
WITHOUT_CLASSIFICATION	// line 556
WITHOUT_CLASSIFICATION	// line 559
WITHOUT_CLASSIFICATION	// line 563
WITHOUT_CLASSIFICATION	// line 566
WITHOUT_CLASSIFICATION	// line 569
WITHOUT_CLASSIFICATION	// line 575
WITHOUT_CLASSIFICATION	// line 578
WITHOUT_CLASSIFICATION	// line 587
WITHOUT_CLASSIFICATION	// line 596
WITHOUT_CLASSIFICATION	// line 604
WITHOUT_CLASSIFICATION	// line 607
WITHOUT_CLASSIFICATION	// line 610
WITHOUT_CLASSIFICATION	// line 613
WITHOUT_CLASSIFICATION	// line 616
WITHOUT_CLASSIFICATION	// line 634
WITHOUT_CLASSIFICATION	// line 638
WITHOUT_CLASSIFICATION	// line 643
WITHOUT_CLASSIFICATION	// line 646
WITHOUT_CLASSIFICATION	// line 655
WITHOUT_CLASSIFICATION	// line 660
WITHOUT_CLASSIFICATION	// line 667
WITHOUT_CLASSIFICATION	// line 670
WITHOUT_CLASSIFICATION	// line 672
WITHOUT_CLASSIFICATION	// line 696
WITHOUT_CLASSIFICATION	// line 701
WITHOUT_CLASSIFICATION	// line 717
WITHOUT_CLASSIFICATION	// line 720
WITHOUT_CLASSIFICATION	// line 726
WITHOUT_CLASSIFICATION	// line 729
WITHOUT_CLASSIFICATION	// line 732
WITHOUT_CLASSIFICATION	// line 735
WITHOUT_CLASSIFICATION	// line 738
WITHOUT_CLASSIFICATION	// line 751
WITHOUT_CLASSIFICATION	// line 754
WITHOUT_CLASSIFICATION	// line 757
WITHOUT_CLASSIFICATION	// line 760
WITHOUT_CLASSIFICATION	// line 763
WITHOUT_CLASSIFICATION	// line 769
WITHOUT_CLASSIFICATION	// line 772
WITHOUT_CLASSIFICATION	// line 775
WITHOUT_CLASSIFICATION	// line 782
WITHOUT_CLASSIFICATION	// line 788
WITHOUT_CLASSIFICATION	// line 791
WITHOUT_CLASSIFICATION	// line 794
WITHOUT_CLASSIFICATION	// line 797
WITHOUT_CLASSIFICATION	// line 803
WITHOUT_CLASSIFICATION	// line 806
WITHOUT_CLASSIFICATION	// line 809
WITHOUT_CLASSIFICATION	// line 815
WITHOUT_CLASSIFICATION	// line 818
WITHOUT_CLASSIFICATION	// line 821
WITHOUT_CLASSIFICATION	// line 824
WITHOUT_CLASSIFICATION	// line 830
WITHOUT_CLASSIFICATION	// line 833
WITHOUT_CLASSIFICATION	// line 836
WITHOUT_CLASSIFICATION	// line 839
WITHOUT_CLASSIFICATION	// line 842
WITHOUT_CLASSIFICATION	// line 848
WITHOUT_CLASSIFICATION	// line 852
WITHOUT_CLASSIFICATION	// line 858
WITHOUT_CLASSIFICATION	// line 861
WITHOUT_CLASSIFICATION	// line 868
WITHOUT_CLASSIFICATION	// line 871
WITHOUT_CLASSIFICATION	// line 876
WITHOUT_CLASSIFICATION	// line 879
WITHOUT_CLASSIFICATION	// line 883
WITHOUT_CLASSIFICATION	// line 893
WITHOUT_CLASSIFICATION	// line 896
WITHOUT_CLASSIFICATION	// line 899
WITHOUT_CLASSIFICATION	// line 903
WITHOUT_CLASSIFICATION	// line 907
WITHOUT_CLASSIFICATION	// line 915
WITHOUT_CLASSIFICATION	// line 920
WITHOUT_CLASSIFICATION	// line 923
WITHOUT_CLASSIFICATION	// line 926
WITHOUT_CLASSIFICATION	// line 932
WITHOUT_CLASSIFICATION	// line 936
WITHOUT_CLASSIFICATION	// line 940
WITHOUT_CLASSIFICATION	// line 944
WITHOUT_CLASSIFICATION	// line 948
WITHOUT_CLASSIFICATION	// line 956
WITHOUT_CLASSIFICATION	// line 960
WITHOUT_CLASSIFICATION	// line 964
WITHOUT_CLASSIFICATION	// line 967
WITHOUT_CLASSIFICATION	// line 972
WITHOUT_CLASSIFICATION	// line 978
WITHOUT_CLASSIFICATION	// line 980
WITHOUT_CLASSIFICATION	// line 984
WITHOUT_CLASSIFICATION	// line 986
WITHOUT_CLASSIFICATION	// line 996
WITHOUT_CLASSIFICATION	// line 1001
WITHOUT_CLASSIFICATION	// line 1004
WITHOUT_CLASSIFICATION	// line 1008
WITHOUT_CLASSIFICATION	// line 1014
WITHOUT_CLASSIFICATION	// line 1029
WITHOUT_CLASSIFICATION	// line 1032
WITHOUT_CLASSIFICATION	// line 1034
WITHOUT_CLASSIFICATION	// line 1045
WITHOUT_CLASSIFICATION	// line 1048
WITHOUT_CLASSIFICATION	// line 1051
WITHOUT_CLASSIFICATION	// line 1058
WITHOUT_CLASSIFICATION	// line 1070
WITHOUT_CLASSIFICATION	// line 1073
WITHOUT_CLASSIFICATION	// line 1076
WITHOUT_CLASSIFICATION	// line 1079
WITHOUT_CLASSIFICATION	// line 1082
WITHOUT_CLASSIFICATION	// line 1089
WITHOUT_CLASSIFICATION	// line 1097
WITHOUT_CLASSIFICATION	// line 1100
WITHOUT_CLASSIFICATION	// line 1103
WITHOUT_CLASSIFICATION	// line 1107
WITHOUT_CLASSIFICATION	// line 1111
WITHOUT_CLASSIFICATION	// line 1113
WITHOUT_CLASSIFICATION	// line 1115
WITHOUT_CLASSIFICATION	// line 1119
WITHOUT_CLASSIFICATION	// line 1130
WITHOUT_CLASSIFICATION	// line 1133
WITHOUT_CLASSIFICATION	// line 1135
WITHOUT_CLASSIFICATION	// line 1137
WITHOUT_CLASSIFICATION	// line 1140
WITHOUT_CLASSIFICATION	// line 1151
WITHOUT_CLASSIFICATION	// line 1154
WITHOUT_CLASSIFICATION	// line 1158
WITHOUT_CLASSIFICATION	// line 1164
WITHOUT_CLASSIFICATION	// line 1175
WITHOUT_CLASSIFICATION	// line 1178
WITHOUT_CLASSIFICATION	// line 1187
WITHOUT_CLASSIFICATION	// line 1189
WITHOUT_CLASSIFICATION	// line 1193
WITHOUT_CLASSIFICATION	// line 1204
WITHOUT_CLASSIFICATION	// line 1207
WITHOUT_CLASSIFICATION	// line 1210
WITHOUT_CLASSIFICATION	// line 1214
WITHOUT_CLASSIFICATION	// line 1234
WITHOUT_CLASSIFICATION	// line 1239
WITHOUT_CLASSIFICATION	// line 1243
WITHOUT_CLASSIFICATION	// line 1247
WITHOUT_CLASSIFICATION	// line 1251
WITHOUT_CLASSIFICATION	// line 1263
WITHOUT_CLASSIFICATION	// line 1269
WITHOUT_CLASSIFICATION	// line 1280
WITHOUT_CLASSIFICATION	// line 1283
WITHOUT_CLASSIFICATION	// line 1290
WITHOUT_CLASSIFICATION	// line 1296
WITHOUT_CLASSIFICATION	// line 1299
WITHOUT_CLASSIFICATION	// line 1302
WITHOUT_CLASSIFICATION	// line 1309
WITHOUT_CLASSIFICATION	// line 1313
WITHOUT_CLASSIFICATION	// line 1315
WITHOUT_CLASSIFICATION	// line 1320
WITHOUT_CLASSIFICATION	// line 1328
WITHOUT_CLASSIFICATION	// line 1335
WITHOUT_CLASSIFICATION	// line 1348
WITHOUT_CLASSIFICATION	// line 1352
WITHOUT_CLASSIFICATION	// line 1358
WITHOUT_CLASSIFICATION	// line 1374
WITHOUT_CLASSIFICATION	// line 1381
WITHOUT_CLASSIFICATION	// line 1387
WITHOUT_CLASSIFICATION	// line 1392
WITHOUT_CLASSIFICATION	// line 1415
WITHOUT_CLASSIFICATION	// line 1431
WITHOUT_CLASSIFICATION	// line 1434
WITHOUT_CLASSIFICATION	// line 1440
WITHOUT_CLASSIFICATION	// line 1443
WITHOUT_CLASSIFICATION	// line 1453
WITHOUT_CLASSIFICATION	// line 1456
WITHOUT_CLASSIFICATION	// line 1462
WITHOUT_CLASSIFICATION	// line 1465
WITHOUT_CLASSIFICATION	// line 1470
WITHOUT_CLASSIFICATION	// line 1477
WITHOUT_CLASSIFICATION	// line 1480
WITHOUT_CLASSIFICATION	// line 1485
WITHOUT_CLASSIFICATION	// line 1488
WITHOUT_CLASSIFICATION	// line 1496
WITHOUT_CLASSIFICATION	// line 1502
WITHOUT_CLASSIFICATION	// line 1510
WITHOUT_CLASSIFICATION	// line 1513
WITHOUT_CLASSIFICATION	// line 1516
WITHOUT_CLASSIFICATION	// line 1533
WITHOUT_CLASSIFICATION	// line 1550
WITHOUT_CLASSIFICATION	// line 1553
WITHOUT_CLASSIFICATION	// line 1556
WITHOUT_CLASSIFICATION	// line 1565
WITHOUT_CLASSIFICATION	// line 1568
WITHOUT_CLASSIFICATION	// line 1571
WITHOUT_CLASSIFICATION	// line 1574
WITHOUT_CLASSIFICATION	// line 1577
WITHOUT_CLASSIFICATION	// line 1587
WITHOUT_CLASSIFICATION	// line 1595
WITHOUT_CLASSIFICATION	// line 1598
WITHOUT_CLASSIFICATION	// line 1600
WITHOUT_CLASSIFICATION	// line 1609
WITHOUT_CLASSIFICATION	// line 1623
WITHOUT_CLASSIFICATION	// line 1626
WITHOUT_CLASSIFICATION	// line 1629
WITHOUT_CLASSIFICATION	// line 1632
WITHOUT_CLASSIFICATION	// line 1638
WITHOUT_CLASSIFICATION	// line 1641
WITHOUT_CLASSIFICATION	// line 1644
WITHOUT_CLASSIFICATION	// line 1649
WITHOUT_CLASSIFICATION	// line 1655
WITHOUT_CLASSIFICATION	// line 1658
WITHOUT_CLASSIFICATION	// line 1661
WITHOUT_CLASSIFICATION	// line 1672
WITHOUT_CLASSIFICATION	// line 1677
WITHOUT_CLASSIFICATION	// line 1687
WITHOUT_CLASSIFICATION	// line 1694
WITHOUT_CLASSIFICATION	// line 1705
WITHOUT_CLASSIFICATION	// line 1708
WITHOUT_CLASSIFICATION	// line 1725
WITHOUT_CLASSIFICATION	// line 1733
WITHOUT_CLASSIFICATION	// line 1742
WITHOUT_CLASSIFICATION	// line 1745
WITHOUT_CLASSIFICATION	// line 1749
WITHOUT_CLASSIFICATION	// line 1757
WITHOUT_CLASSIFICATION	// line 1769
WITHOUT_CLASSIFICATION	// line 1772
WITHOUT_CLASSIFICATION	// line 1775
WITHOUT_CLASSIFICATION	// line 1784
WITHOUT_CLASSIFICATION	// line 1808
WITHOUT_CLASSIFICATION	// line 1814
WITHOUT_CLASSIFICATION	// line 1818
WITHOUT_CLASSIFICATION	// line 1822
WITHOUT_CLASSIFICATION	/* force for args */
WITHOUT_CLASSIFICATION	/*XXX 0;*/
WITHOUT_CLASSIFICATION	/*                      $$ = $3;*/
WITHOUT_CLASSIFICATION	/*                  }*/
WITHOUT_CLASSIFICATION	/* last expression should not be void */
WITHOUT_CLASSIFICATION	/* compstmt position includes both parens around it*/
WITHOUT_CLASSIFICATION	/*$8 == null ? NilImplicitNode.NIL : $8;*/
WITHOUT_CLASSIFICATION	/*$5 == null ? NilImplicitNode.NIL : $5;*/
WITHOUT_CLASSIFICATION	/* NOEX_PRIVATE for toplevel */
WITHOUT_CLASSIFICATION	/*mirko: check*/
WITHOUT_CLASSIFICATION	/* Include pipes on multiple arg type*/
WITHOUT_CLASSIFICATION	// line 529
WITHOUT_CLASSIFICATION	/* .setPosFrom($2);*/
WITHOUT_CLASSIFICATION	/* XXX*/
WITHOUT_CLASSIFICATION	/* zero length array */
WITHOUT_CLASSIFICATION	/* DStrNode: :"some text #{some expression}"*/
WITHOUT_CLASSIFICATION	/* StrNode: :"some text"*/
WITHOUT_CLASSIFICATION	/* EvStrNode :"#{some expression}"*/
WITHOUT_CLASSIFICATION	// line 1827 "DefaultRubyParser.y"
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));
WITHOUT_CLASSIFICATION	// line 7713 "-"
WITHOUT_CLASSIFICATION	// local scopes are argument scopes by default
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.
WITHOUT_CLASSIFICATION	// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic
WITHOUT_CLASSIFICATION	// odd...but it is odd in ruby too.
WITHOUT_CLASSIFICATION	// What linenumber will the source think it starts from?
WITHOUT_CLASSIFICATION	// Is this inline source (aka -e "...source...")
WITHOUT_CLASSIFICATION	// We parse evals more often in source so assume an eval parse.
WITHOUT_CLASSIFICATION	// Should positions added extra IDE-friendly information and leave in all newline nodes
WITHOUT_CLASSIFICATION	// Will parser parse Duby grammar Extensions
WITHOUT_CLASSIFICATION	// Should we display extra debug information while parsing?
WITHOUT_CLASSIFICATION	// __END__ marker offset (-1 means none present)
WITHOUT_CLASSIFICATION	// Parser states:
WITHOUT_CLASSIFICATION	// Is the parser current within a singleton (value is number of nested singletons)
WITHOUT_CLASSIFICATION	// Is the parser currently within a method definition
WITHOUT_CLASSIFICATION	// LOCALVAR
WITHOUT_CLASSIFICATION	// CONSTANT
WITHOUT_CLASSIFICATION	// INSTANCE VARIABLE
WITHOUT_CLASSIFICATION	// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])
WITHOUT_CLASSIFICATION	/* MRI: block_append */
WITHOUT_CLASSIFICATION	// Reduces overhead in interp by not set position every single line we encounter. 
WITHOUT_CLASSIFICATION	// Assumption: tail is never a list node
WITHOUT_CLASSIFICATION	//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));
WITHOUT_CLASSIFICATION	// Node
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/
WITHOUT_CLASSIFICATION	/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/
WITHOUT_CLASSIFICATION	// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"
WITHOUT_CLASSIFICATION	/* MRI: range_op */
WITHOUT_CLASSIFICATION	// Block and block pass passed in at same time....uh oh
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// foo()
WITHOUT_CLASSIFICATION	// tail must be EvStrNode at this point 
WITHOUT_CLASSIFICATION	//Do not add an empty string node
WITHOUT_CLASSIFICATION	// Zero-Argument declaration
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyLen 542
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDefRed 945
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yyDgoto 152
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yySindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyRindex 945
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	//yyGindex 152
WITHOUT_CLASSIFICATION	// dynamically increase
WITHOUT_CLASSIFICATION	// else [default] reduce (yyN)
WITHOUT_CLASSIFICATION	// shift to yyN
WITHOUT_CLASSIFICATION	// reduce (yyN)
WITHOUT_CLASSIFICATION	// leave stack alone
WITHOUT_CLASSIFICATION	// line 321
WITHOUT_CLASSIFICATION	// line 351
WITHOUT_CLASSIFICATION	// line 382
WITHOUT_CLASSIFICATION	// line 417
WITHOUT_CLASSIFICATION	// line 420
WITHOUT_CLASSIFICATION	// line 423
WITHOUT_CLASSIFICATION	// line 426
WITHOUT_CLASSIFICATION	// line 280
WITHOUT_CLASSIFICATION	// line 283
WITHOUT_CLASSIFICATION	// line 296
WITHOUT_CLASSIFICATION	// line 324
WITHOUT_CLASSIFICATION	// line 327
WITHOUT_CLASSIFICATION	// line 331
WITHOUT_CLASSIFICATION	// line 333
WITHOUT_CLASSIFICATION	// line 336
WITHOUT_CLASSIFICATION	// line 342
WITHOUT_CLASSIFICATION	// line 345
WITHOUT_CLASSIFICATION	// line 348
WITHOUT_CLASSIFICATION	// line 354
WITHOUT_CLASSIFICATION	// line 368
WITHOUT_CLASSIFICATION	// line 377
WITHOUT_CLASSIFICATION	// line 388
WITHOUT_CLASSIFICATION	// line 392
WITHOUT_CLASSIFICATION	// line 397
WITHOUT_CLASSIFICATION	// line 429
WITHOUT_CLASSIFICATION	// line 432
WITHOUT_CLASSIFICATION	// line 436
WITHOUT_CLASSIFICATION	// line 445
WITHOUT_CLASSIFICATION	// line 448
WITHOUT_CLASSIFICATION	// line 454
WITHOUT_CLASSIFICATION	// line 459
WITHOUT_CLASSIFICATION	// line 466
WITHOUT_CLASSIFICATION	// line 469
WITHOUT_CLASSIFICATION	// line 478
WITHOUT_CLASSIFICATION	// line 481
WITHOUT_CLASSIFICATION	// line 488
WITHOUT_CLASSIFICATION	// line 494
WITHOUT_CLASSIFICATION	// line 497
WITHOUT_CLASSIFICATION	// line 503
WITHOUT_CLASSIFICATION	// line 506
WITHOUT_CLASSIFICATION	// line 509
WITHOUT_CLASSIFICATION	// line 512
WITHOUT_CLASSIFICATION	// line 521
WITHOUT_CLASSIFICATION	// line 526
WITHOUT_CLASSIFICATION	// line 540
WITHOUT_CLASSIFICATION	// line 543
WITHOUT_CLASSIFICATION	// line 546
WITHOUT_CLASSIFICATION	// line 566
WITHOUT_CLASSIFICATION	// line 610
WITHOUT_CLASSIFICATION	// line 672
WITHOUT_CLASSIFICATION	// line 691
WITHOUT_CLASSIFICATION	// line 696
WITHOUT_CLASSIFICATION	// line 772
WITHOUT_CLASSIFICATION	// line 782
WITHOUT_CLASSIFICATION	// line 785
WITHOUT_CLASSIFICATION	// line 788
WITHOUT_CLASSIFICATION	// line 791
WITHOUT_CLASSIFICATION	// line 534
WITHOUT_CLASSIFICATION	// line 549
WITHOUT_CLASSIFICATION	// line 552
WITHOUT_CLASSIFICATION	// line 558
WITHOUT_CLASSIFICATION	// line 561
WITHOUT_CLASSIFICATION	// line 571
WITHOUT_CLASSIFICATION	// line 574
WITHOUT_CLASSIFICATION	// line 579
WITHOUT_CLASSIFICATION	// line 586
WITHOUT_CLASSIFICATION	// line 589
WITHOUT_CLASSIFICATION	// line 592
WITHOUT_CLASSIFICATION	// line 595
WITHOUT_CLASSIFICATION	// line 598
WITHOUT_CLASSIFICATION	// line 623
WITHOUT_CLASSIFICATION	// line 627
WITHOUT_CLASSIFICATION	// line 630
WITHOUT_CLASSIFICATION	// line 633
WITHOUT_CLASSIFICATION	// line 639
WITHOUT_CLASSIFICATION	// line 648
WITHOUT_CLASSIFICATION	// line 657
WITHOUT_CLASSIFICATION	// line 661
WITHOUT_CLASSIFICATION	// line 666
WITHOUT_CLASSIFICATION	// line 678
WITHOUT_CLASSIFICATION	// line 682
WITHOUT_CLASSIFICATION	// line 688
WITHOUT_CLASSIFICATION	// line 699
WITHOUT_CLASSIFICATION	// line 706
WITHOUT_CLASSIFICATION	// line 708
WITHOUT_CLASSIFICATION	// line 727
WITHOUT_CLASSIFICATION	// line 737
WITHOUT_CLASSIFICATION	// line 753
WITHOUT_CLASSIFICATION	// line 779
WITHOUT_CLASSIFICATION	// line 801
WITHOUT_CLASSIFICATION	// line 808
WITHOUT_CLASSIFICATION	// line 811
WITHOUT_CLASSIFICATION	// line 817
WITHOUT_CLASSIFICATION	// line 842
WITHOUT_CLASSIFICATION	// line 845
WITHOUT_CLASSIFICATION	// line 848
WITHOUT_CLASSIFICATION	// line 893
WITHOUT_CLASSIFICATION	// line 899
WITHOUT_CLASSIFICATION	// line 932
WITHOUT_CLASSIFICATION	// line 944
WITHOUT_CLASSIFICATION	// line 960
WITHOUT_CLASSIFICATION	// line 980
WITHOUT_CLASSIFICATION	// line 1004
WITHOUT_CLASSIFICATION	// line 1038
WITHOUT_CLASSIFICATION	// line 820
WITHOUT_CLASSIFICATION	// line 826
WITHOUT_CLASSIFICATION	// line 829
WITHOUT_CLASSIFICATION	// line 832
WITHOUT_CLASSIFICATION	// line 851
WITHOUT_CLASSIFICATION	// line 857
WITHOUT_CLASSIFICATION	// line 860
WITHOUT_CLASSIFICATION	// line 863
WITHOUT_CLASSIFICATION	// line 866
WITHOUT_CLASSIFICATION	// line 869
WITHOUT_CLASSIFICATION	// line 875
WITHOUT_CLASSIFICATION	// line 884
WITHOUT_CLASSIFICATION	// line 887
WITHOUT_CLASSIFICATION	// line 890
WITHOUT_CLASSIFICATION	// line 902
WITHOUT_CLASSIFICATION	// line 909
WITHOUT_CLASSIFICATION	// line 912
WITHOUT_CLASSIFICATION	// line 916
WITHOUT_CLASSIFICATION	// line 922
WITHOUT_CLASSIFICATION	// line 928
WITHOUT_CLASSIFICATION	// line 941
WITHOUT_CLASSIFICATION	// line 947
WITHOUT_CLASSIFICATION	// line 951
WITHOUT_CLASSIFICATION	// line 955
WITHOUT_CLASSIFICATION	// line 965
WITHOUT_CLASSIFICATION	// line 969
WITHOUT_CLASSIFICATION	// line 977
WITHOUT_CLASSIFICATION	// line 983
WITHOUT_CLASSIFICATION	// line 1013
WITHOUT_CLASSIFICATION	// line 1023
WITHOUT_CLASSIFICATION	// line 1035
WITHOUT_CLASSIFICATION	// line 1041
WITHOUT_CLASSIFICATION	// line 1043
WITHOUT_CLASSIFICATION	// line 1054
WITHOUT_CLASSIFICATION	// line 1057
WITHOUT_CLASSIFICATION	// line 1060
WITHOUT_CLASSIFICATION	// line 1069
WITHOUT_CLASSIFICATION	// line 1075
WITHOUT_CLASSIFICATION	// line 1105
WITHOUT_CLASSIFICATION	// line 1111
WITHOUT_CLASSIFICATION	// line 1122
WITHOUT_CLASSIFICATION	// line 1130
WITHOUT_CLASSIFICATION	// line 1140
WITHOUT_CLASSIFICATION	// line 1158
WITHOUT_CLASSIFICATION	// line 1204
WITHOUT_CLASSIFICATION	// line 1207
WITHOUT_CLASSIFICATION	// line 1247
WITHOUT_CLASSIFICATION	// line 1251
WITHOUT_CLASSIFICATION	// line 1261
WITHOUT_CLASSIFICATION	// line 1078
WITHOUT_CLASSIFICATION	// line 1084
WITHOUT_CLASSIFICATION	// line 1087
WITHOUT_CLASSIFICATION	// line 1090
WITHOUT_CLASSIFICATION	// line 1093
WITHOUT_CLASSIFICATION	// line 1114
WITHOUT_CLASSIFICATION	// line 1116
WITHOUT_CLASSIFICATION	// line 1118
WITHOUT_CLASSIFICATION	// line 1124
WITHOUT_CLASSIFICATION	// line 1126
WITHOUT_CLASSIFICATION	// line 1138
WITHOUT_CLASSIFICATION	// line 1144
WITHOUT_CLASSIFICATION	// line 1149
WITHOUT_CLASSIFICATION	// line 1155
WITHOUT_CLASSIFICATION	// line 1162
WITHOUT_CLASSIFICATION	// line 1173
WITHOUT_CLASSIFICATION	// line 1179
WITHOUT_CLASSIFICATION	// line 1182
WITHOUT_CLASSIFICATION	// line 1190
WITHOUT_CLASSIFICATION	// line 1196
WITHOUT_CLASSIFICATION	// line 1213
WITHOUT_CLASSIFICATION	// line 1217
WITHOUT_CLASSIFICATION	// line 1231
WITHOUT_CLASSIFICATION	// line 1236
WITHOUT_CLASSIFICATION	// line 1244
WITHOUT_CLASSIFICATION	// line 1254
WITHOUT_CLASSIFICATION	// line 1258
WITHOUT_CLASSIFICATION	// line 1264
WITHOUT_CLASSIFICATION	// line 1270
WITHOUT_CLASSIFICATION	// line 1273
WITHOUT_CLASSIFICATION	// line 1276
WITHOUT_CLASSIFICATION	// line 1279
WITHOUT_CLASSIFICATION	// line 1282
WITHOUT_CLASSIFICATION	// line 1289
WITHOUT_CLASSIFICATION	// line 1292
WITHOUT_CLASSIFICATION	// line 1295
WITHOUT_CLASSIFICATION	// line 1298
WITHOUT_CLASSIFICATION	// line 1305
WITHOUT_CLASSIFICATION	// line 1348
WITHOUT_CLASSIFICATION	// line 1387
WITHOUT_CLASSIFICATION	// line 1392
WITHOUT_CLASSIFICATION	// line 1448
WITHOUT_CLASSIFICATION	// line 1462
WITHOUT_CLASSIFICATION	// line 1470
WITHOUT_CLASSIFICATION	// line 1496
WITHOUT_CLASSIFICATION	// line 1502
WITHOUT_CLASSIFICATION	// line 1595
WITHOUT_CLASSIFICATION	// line 1598
WITHOUT_CLASSIFICATION	// line 1308
WITHOUT_CLASSIFICATION	// line 1311
WITHOUT_CLASSIFICATION	// line 1317
WITHOUT_CLASSIFICATION	// line 1323
WITHOUT_CLASSIFICATION	// line 1326
WITHOUT_CLASSIFICATION	// line 1329
WITHOUT_CLASSIFICATION	// line 1337
WITHOUT_CLASSIFICATION	// line 1342
WITHOUT_CLASSIFICATION	// line 1345
WITHOUT_CLASSIFICATION	// line 1354
WITHOUT_CLASSIFICATION	// line 1359
WITHOUT_CLASSIFICATION	// line 1366
WITHOUT_CLASSIFICATION	// line 1369
WITHOUT_CLASSIFICATION	// line 1373
WITHOUT_CLASSIFICATION	// line 1377
WITHOUT_CLASSIFICATION	// line 1383
WITHOUT_CLASSIFICATION	// line 1399
WITHOUT_CLASSIFICATION	// line 1401
WITHOUT_CLASSIFICATION	// line 1406
WITHOUT_CLASSIFICATION	// line 1417
WITHOUT_CLASSIFICATION	// line 1424
WITHOUT_CLASSIFICATION	// line 1427
WITHOUT_CLASSIFICATION	// line 1430
WITHOUT_CLASSIFICATION	// line 1433
WITHOUT_CLASSIFICATION	// line 1436
WITHOUT_CLASSIFICATION	// line 1442
WITHOUT_CLASSIFICATION	// line 1445
WITHOUT_CLASSIFICATION	// line 1458
WITHOUT_CLASSIFICATION	// line 1464
WITHOUT_CLASSIFICATION	// line 1489
WITHOUT_CLASSIFICATION	// line 1493
WITHOUT_CLASSIFICATION	// line 1507
WITHOUT_CLASSIFICATION	// line 1519
WITHOUT_CLASSIFICATION	// line 1532
WITHOUT_CLASSIFICATION	// line 1538
WITHOUT_CLASSIFICATION	// line 1542
WITHOUT_CLASSIFICATION	// line 1557
WITHOUT_CLASSIFICATION	// line 1573
WITHOUT_CLASSIFICATION	// line 1591
WITHOUT_CLASSIFICATION	// line 1615
WITHOUT_CLASSIFICATION	// line 1629
WITHOUT_CLASSIFICATION	// line 1632
WITHOUT_CLASSIFICATION	// line 1705
WITHOUT_CLASSIFICATION	// line 1716
WITHOUT_CLASSIFICATION	// line 1725
WITHOUT_CLASSIFICATION	// line 1742
WITHOUT_CLASSIFICATION	// line 1749
WITHOUT_CLASSIFICATION	// line 1818
WITHOUT_CLASSIFICATION	// line 1822
WITHOUT_CLASSIFICATION	// line 1607
WITHOUT_CLASSIFICATION	// line 1610
WITHOUT_CLASSIFICATION	// line 1622
WITHOUT_CLASSIFICATION	// line 1625
WITHOUT_CLASSIFICATION	// line 1636
WITHOUT_CLASSIFICATION	// line 1639
WITHOUT_CLASSIFICATION	// line 1647
WITHOUT_CLASSIFICATION	// line 1651
WITHOUT_CLASSIFICATION	// line 1657
WITHOUT_CLASSIFICATION	// line 1660
WITHOUT_CLASSIFICATION	// line 1663
WITHOUT_CLASSIFICATION	// line 1678
WITHOUT_CLASSIFICATION	// line 1702
WITHOUT_CLASSIFICATION	// line 1711
WITHOUT_CLASSIFICATION	// line 1719
WITHOUT_CLASSIFICATION	// line 1722
WITHOUT_CLASSIFICATION	// line 1731
WITHOUT_CLASSIFICATION	// line 1734
WITHOUT_CLASSIFICATION	// line 1738
WITHOUT_CLASSIFICATION	// line 1746
WITHOUT_CLASSIFICATION	// line 1756
WITHOUT_CLASSIFICATION	// line 1758
WITHOUT_CLASSIFICATION	// line 1761
WITHOUT_CLASSIFICATION	// line 1767
WITHOUT_CLASSIFICATION	// line 1776
WITHOUT_CLASSIFICATION	// line 1782
WITHOUT_CLASSIFICATION	// line 1785
WITHOUT_CLASSIFICATION	// line 1788
WITHOUT_CLASSIFICATION	// line 1791
WITHOUT_CLASSIFICATION	// line 1797
WITHOUT_CLASSIFICATION	// line 1800
WITHOUT_CLASSIFICATION	// line 1803
WITHOUT_CLASSIFICATION	// line 1806
WITHOUT_CLASSIFICATION	// line 1809
WITHOUT_CLASSIFICATION	// line 1815
WITHOUT_CLASSIFICATION	// line 1825
WITHOUT_CLASSIFICATION	// line 1828
WITHOUT_CLASSIFICATION	// line 1831
WITHOUT_CLASSIFICATION	// line 1847
WITHOUT_CLASSIFICATION	/*$8 == null ? NilImplicitNode.NIL : $8;*/
WITHOUT_CLASSIFICATION	/*$5 == null ? NilImplicitNode.NIL : $5;*/
WITHOUT_CLASSIFICATION	/* .setPosFrom($2);*/
WITHOUT_CLASSIFICATION	/* zero length array */
WITHOUT_CLASSIFICATION	/* DStrNode: :"some text #{some expression}"*/
WITHOUT_CLASSIFICATION	/* StrNode: :"some text"*/
WITHOUT_CLASSIFICATION	/* EvStrNode :"#{some expression}"*/
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// line 1854
WITHOUT_CLASSIFICATION	// line 1869
WITHOUT_CLASSIFICATION	// line 1872
WITHOUT_CLASSIFICATION	// line 1877
WITHOUT_CLASSIFICATION	// line 1886
WITHOUT_CLASSIFICATION	// line 1898
WITHOUT_CLASSIFICATION	// line 1902
WITHOUT_CLASSIFICATION	// line 1905
WITHOUT_CLASSIFICATION	// line 1911
WITHOUT_CLASSIFICATION	// line 1918
WITHOUT_CLASSIFICATION	// line 1935
WITHOUT_CLASSIFICATION	// line 1938
WITHOUT_CLASSIFICATION	// line 1942
WITHOUT_CLASSIFICATION	// line 1948
WITHOUT_CLASSIFICATION	// line 1960
WITHOUT_CLASSIFICATION	// line 1963
WITHOUT_CLASSIFICATION	// line 1968
WITHOUT_CLASSIFICATION	// line 1972
WITHOUT_CLASSIFICATION	// line 1982
WITHOUT_CLASSIFICATION	// line 1995
WITHOUT_CLASSIFICATION	// line 2000
WITHOUT_CLASSIFICATION	// line 2006
WITHOUT_CLASSIFICATION	// line 2010
WITHOUT_CLASSIFICATION	/* We may need to subtract addition offset off of first */
WITHOUT_CLASSIFICATION	/* string fragment (we optimistically take one off in*/
WITHOUT_CLASSIFICATION	/* ParserSupport.literal_concat).  Check token length*/
WITHOUT_CLASSIFICATION	/* and subtract as neeeded.*/
WITHOUT_CLASSIFICATION	/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */
WITHOUT_CLASSIFICATION	/* ENEBO: arg surrounded by in_defined set/unset*/
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	// mark as captured if from containing scope
WITHOUT_CLASSIFICATION	/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/
WITHOUT_CLASSIFICATION	/* was $$ = null;*/
WITHOUT_CLASSIFICATION	// line 2019 "Ruby19Parser.y"
WITHOUT_CLASSIFICATION	// line 8143 "-"
WITHOUT_CLASSIFICATION	// we know variables cannot be null since localstaticscope will create a 0 length one.
WITHOUT_CLASSIFICATION	// No bit math to store level since we know level is zero for this case
WITHOUT_CLASSIFICATION	// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.
WITHOUT_CLASSIFICATION	// Live reference to module
WITHOUT_CLASSIFICATION	// Next CRef down the lexical structure
WITHOUT_CLASSIFICATION	// Our name holder (offsets are assigned as variables are added
WITHOUT_CLASSIFICATION	// number of variables in this scope representing required arguments
WITHOUT_CLASSIFICATION	// number of variables in this scope representing optional arguments
WITHOUT_CLASSIFICATION	// index of variable that represents a "rest" arg
WITHOUT_CLASSIFICATION	// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.
WITHOUT_CLASSIFICATION	// Returns slot of variable
WITHOUT_CLASSIFICATION	// Returns slot of variable
WITHOUT_CLASSIFICATION	/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */
WITHOUT_CLASSIFICATION	// If we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	/* Try and unload the autoload specified from internedName */
WITHOUT_CLASSIFICATION	// We override that the logic which uses this
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// source extensions
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// Is this thread currently with in a function trace?
WITHOUT_CLASSIFICATION	// Is this thread currently doing an defined? defined should set things like $!
WITHOUT_CLASSIFICATION	//private UnsynchronizedStack parentStack;
WITHOUT_CLASSIFICATION	//private UnsynchronizedStack frameStack;
WITHOUT_CLASSIFICATION	// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.
WITHOUT_CLASSIFICATION	// File where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	// Line where current executing unit is being evaluated
WITHOUT_CLASSIFICATION	// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.
WITHOUT_CLASSIFICATION	// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.
WITHOUT_CLASSIFICATION	//////////////////// CATCH MANAGEMENT ////////////////////////
WITHOUT_CLASSIFICATION	//////////////////// FRAME MANAGEMENT ////////////////////////
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// assert level == 0;
WITHOUT_CLASSIFICATION	// assert level == 0;
WITHOUT_CLASSIFICATION	// look for mangling markers for compiled Ruby in method name
WITHOUT_CLASSIFICATION	// if it's not a rescue or ensure, there's a frame associated, so decrement
WITHOUT_CLASSIFICATION	// look for __file__ method name for compiled roots
WITHOUT_CLASSIFICATION	// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.
WITHOUT_CLASSIFICATION	// required and optional only
WITHOUT_CLASSIFICATION	// do nothing, allow loop to redo
WITHOUT_CLASSIFICATION	// look for mangling markers for bound, unframed methods in class name
WITHOUT_CLASSIFICATION	// set the binding's frame's "previous" file and line to current, so // trace will show who called the block
WITHOUT_CLASSIFICATION	// framed invokers will have Ruby frames associated with them
WITHOUT_CLASSIFICATION	// look for mangling markers for bound, framed methods in class name
WITHOUT_CLASSIFICATION	// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line
WITHOUT_CLASSIFICATION	// try to mine out a Ruby frame using our list of interpreter entry-point markers
WITHOUT_CLASSIFICATION	// Frame matches one of our markers for "interpreted" calls
WITHOUT_CLASSIFICATION	// Frame is extraneous runtime information, skip it unless debug
WITHOUT_CLASSIFICATION	/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */
WITHOUT_CLASSIFICATION	// new scope for this invocation of the block, based on parent scope
WITHOUT_CLASSIFICATION	// No argument blocks
WITHOUT_CLASSIFICATION	// just push the same empty scope, since we won't use one
WITHOUT_CLASSIFICATION	// Not sure if this is actually possible, but better safe than sorry
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).
WITHOUT_CLASSIFICATION	// Highest reserved id
WITHOUT_CLASSIFICATION	// binary typed calls
WITHOUT_CLASSIFICATION	// id must always be even
WITHOUT_CLASSIFICATION	// with block pass
WITHOUT_CLASSIFICATION	// no block
WITHOUT_CLASSIFICATION	// with block literal (iter)
WITHOUT_CLASSIFICATION	//            assert false : "can this happen?";
WITHOUT_CLASSIFICATION	// if we have multiple asgn with just *args, need a special type for that
WITHOUT_CLASSIFICATION	// && args.getMaxArgumentsCount() != 1) {
WITHOUT_CLASSIFICATION	//            return warnMultiReturnNil(ruby);
WITHOUT_CLASSIFICATION	// ensure zero is devoted to no method name
WITHOUT_CLASSIFICATION	// predefine a few other methods we invoke directly elsewhere
WITHOUT_CLASSIFICATION	// fast and safe respond_to? call site logic
WITHOUT_CLASSIFICATION	// Static scoping information for this scope
WITHOUT_CLASSIFICATION	// Captured dynamic scopes
WITHOUT_CLASSIFICATION	// Backref for $~, $1, etc
WITHOUT_CLASSIFICATION	// Lastline
WITHOUT_CLASSIFICATION	// No binding scope so we should create one
WITHOUT_CLASSIFICATION	// bindings scopes must always be ManyVars scopes since evals can grow them
WITHOUT_CLASSIFICATION	// Helper function to give a good view of current dynamic scope with captured scopes
WITHOUT_CLASSIFICATION	// try count specific args to determine required
WITHOUT_CLASSIFICATION	// Some helper functions:
WITHOUT_CLASSIFICATION	// silently ignore
WITHOUT_CLASSIFICATION	// used by compiler
WITHOUT_CLASSIFICATION	// initialize the static settings to determine which factory to use
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	//  Single node on list
WITHOUT_CLASSIFICATION	// Reuse trailing consecutive sequence at same slot
WITHOUT_CLASSIFICATION	// Clone all remaining nodes
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.
WITHOUT_CLASSIFICATION	// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.
WITHOUT_CLASSIFICATION	// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// nil pad since we provided less values than block parms
WITHOUT_CLASSIFICATION	// no extra args for rest
WITHOUT_CLASSIFICATION	// no extra args for rest
WITHOUT_CLASSIFICATION	// extra args for rest
WITHOUT_CLASSIFICATION	// extra args for rest
WITHOUT_CLASSIFICATION	/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */
WITHOUT_CLASSIFICATION	/*     * This is the proper behavior for all non-expanded assigners.     */
WITHOUT_CLASSIFICATION	// prefill ?
WITHOUT_CLASSIFICATION	// prefill ?
WITHOUT_CLASSIFICATION	// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore
WITHOUT_CLASSIFICATION	// retrieve method // module // name
WITHOUT_CLASSIFICATION	// call is ok, punch it!
WITHOUT_CLASSIFICATION	// if undefined, branch to method_missing
WITHOUT_CLASSIFICATION	// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing
WITHOUT_CLASSIFICATION	// method object already present, push various args // tc // self // klazz // name
WITHOUT_CLASSIFICATION	// if it's method_missing, just invoke it
WITHOUT_CLASSIFICATION	// invoke callMethodMissing
WITHOUT_CLASSIFICATION	// caller
WITHOUT_CLASSIFICATION	// calltype // block
WITHOUT_CLASSIFICATION	// if no exception raised, jump to end to leave result on stack for return
WITHOUT_CLASSIFICATION	// load arity for check
WITHOUT_CLASSIFICATION	// throw
WITHOUT_CLASSIFICATION	// load arity for error
WITHOUT_CLASSIFICATION	// arity ok, continue
WITHOUT_CLASSIFICATION	//InvocationCallbackFactory
WITHOUT_CLASSIFICATION	// ENEBO: Perhaps slow but simple for now
WITHOUT_CLASSIFICATION	// FastInvocationCallback
WITHOUT_CLASSIFICATION	// InvocationCallback
WITHOUT_CLASSIFICATION	//DumpingInvocationCallbackFactory
WITHOUT_CLASSIFICATION	// for fast lookup: encoding entry => org.jruby.RubyEncoding
WITHOUT_CLASSIFICATION	// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding
WITHOUT_CLASSIFICATION	// load the encoding
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs
WITHOUT_CLASSIFICATION	// BreakJump, ThreadContext
WITHOUT_CLASSIFICATION	// ThreadContext
WITHOUT_CLASSIFICATION	// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
WITHOUT_CLASSIFICATION	// Make Java class files in the jar reachable from Ruby
WITHOUT_CLASSIFICATION	// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject
WITHOUT_CLASSIFICATION	// add all startup load paths to the list first
WITHOUT_CLASSIFICATION	// if it's a compiled JRuby script, instantiate and run it
WITHOUT_CLASSIFICATION	// wrap in try/catch for security exceptions in an applet
WITHOUT_CLASSIFICATION	// add $RUBYLIB paths
WITHOUT_CLASSIFICATION	// Empty paths do not need to be added
WITHOUT_CLASSIFICATION	// "." dir is used for relative path loads from a given file, as in require '../foo/bar'
WITHOUT_CLASSIFICATION	// Add 1.8 libs
WITHOUT_CLASSIFICATION	// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.
WITHOUT_CLASSIFICATION	// Library has already been loaded in some form, bail out
WITHOUT_CLASSIFICATION	// We don't want a package name beginning with dots, so we remove them
WITHOUT_CLASSIFICATION	// If there is a jar-file with the required name, we add this to the class path.
WITHOUT_CLASSIFICATION	// quietly try to load the class
WITHOUT_CLASSIFICATION	// If there was a good library before, we go back to that
WITHOUT_CLASSIFICATION	// no library or extension found, try to load directly as a class
WITHOUT_CLASSIFICATION	// if an extension is specified, try more targetted searches
WITHOUT_CLASSIFICATION	// signed short, big-endian
WITHOUT_CLASSIFICATION	// source extensions
WITHOUT_CLASSIFICATION	// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support
WITHOUT_CLASSIFICATION	// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed
WITHOUT_CLASSIFICATION	// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.
WITHOUT_CLASSIFICATION	// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// extension extensions
WITHOUT_CLASSIFICATION	// unknown extension, fall back to search with extensions
WITHOUT_CLASSIFICATION	// try all extensions
WITHOUT_CLASSIFICATION	// if a source extension is specified, try all source extensions
WITHOUT_CLASSIFICATION	// unknown extension, fall back to exact search
WITHOUT_CLASSIFICATION	// try only literal search
WITHOUT_CLASSIFICATION	// attempt to load the found library
WITHOUT_CLASSIFICATION	// otherwise load the library we've found
WITHOUT_CLASSIFICATION	// allow MainExitException to propagate out for exec and friends
WITHOUT_CLASSIFICATION	// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".
WITHOUT_CLASSIFICATION	// check current directory; if file exists, retrieve URL and return resource
WITHOUT_CLASSIFICATION	// if a jar or file URL, return load service resource directly without further searching
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// if it's a ./ baseName, use CWD logic
WITHOUT_CLASSIFICATION	// if given path is absolute, just try it as-is (with extensions) and no load path
WITHOUT_CLASSIFICATION	// we check length == 0 for 'load', which does not use load path
WITHOUT_CLASSIFICATION	// we check length == 0 for 'load', which does not use load path
WITHOUT_CLASSIFICATION	// it's an absolute path, use it as-is
WITHOUT_CLASSIFICATION	// it's an absolute path, use it as-is
WITHOUT_CLASSIFICATION	// prepend ./ if . is not already there, since we're loading based on CWD
WITHOUT_CLASSIFICATION	// prepend ./ if . is not already there, since we're loading based on CWD
WITHOUT_CLASSIFICATION	//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));
WITHOUT_CLASSIFICATION	// handle security-sensitive case
WITHOUT_CLASSIFICATION	// if entry is an empty string, skip it
WITHOUT_CLASSIFICATION	// if entry starts with a slash, skip it since classloader resources never start with a /
WITHOUT_CLASSIFICATION	// otherwise, try to load from classpath (Note: Jar resources always uses '/')
WITHOUT_CLASSIFICATION	// Make sure this is not a directory or unavailable in some way
WITHOUT_CLASSIFICATION	// signed short, native
WITHOUT_CLASSIFICATION	// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.
WITHOUT_CLASSIFICATION	// write `I' instance var signet if class is NOT a direct subclass of Object
WITHOUT_CLASSIFICATION	// if name starts with a / we're done (classloader resources won't load with an initial /)
WITHOUT_CLASSIFICATION	// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")
WITHOUT_CLASSIFICATION	/* Directories and unavailable resources are not able to open a stream. */
WITHOUT_CLASSIFICATION	// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.
WITHOUT_CLASSIFICATION	// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here
WITHOUT_CLASSIFICATION	// flush afer whole dump is complete
WITHOUT_CLASSIFICATION	//            write('S');
WITHOUT_CLASSIFICATION	// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.
WITHOUT_CLASSIFICATION	// object is a custom class that extended one of the native types other than Object
WITHOUT_CLASSIFICATION	// We do not want to capture cached methods
WITHOUT_CLASSIFICATION	// w_symbol
WITHOUT_CLASSIFICATION	// w_unique
WITHOUT_CLASSIFICATION	// call the proc, but not for symbols
WITHOUT_CLASSIFICATION	// Major // Minor
WITHOUT_CLASSIFICATION	// any ivars, since we don't have __attached__ ivar now
WITHOUT_CLASSIFICATION	// "hashdef" object, a hash with a default
WITHOUT_CLASSIFICATION	// All "C" marshalled objects descend from core classes, which are all RubyObject
WITHOUT_CLASSIFICATION	// sic
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	/*     * If we are setting post arguments we can assume there are no pre or others     */
WITHOUT_CLASSIFICATION	// XXX: 0xffff0000 on BE?
WITHOUT_CLASSIFICATION	// unsigned short, native
WITHOUT_CLASSIFICATION	// int, native // long, native
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// if we're not the "argument scope" for zsuper, try our parent
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// copy and splat arguments out of the scope to use for zsuper call
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// rest arg must be splatted
WITHOUT_CLASSIFICATION	// Look for slash, starting from 'start' position, until 'end'.
WITHOUT_CLASSIFICATION	// Our values holder (name of variables are kept in staticScope)
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// SunSignalFacade
WITHOUT_CLASSIFICATION	// All braces pushed..
WITHOUT_CLASSIFICATION	/* failed : try next recursion */
WITHOUT_CLASSIFICATION	// leftToken made us start as nest 1
WITHOUT_CLASSIFICATION	// are we at '**/'
WITHOUT_CLASSIFICATION	// No or mismatched braces..Move along..nothing to see here
WITHOUT_CLASSIFICATION	// not enough bytes
WITHOUT_CLASSIFICATION	// Get index of last read byte
WITHOUT_CLASSIFICATION	// skip inner braces
WITHOUT_CLASSIFICATION	/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */
WITHOUT_CLASSIFICATION	/* complete, according to Posix.2 */
WITHOUT_CLASSIFICATION	/* Only accept an open brace if there is a close */
WITHOUT_CLASSIFICATION	/* brace to match it.  Bracket expressions must be */
WITHOUT_CLASSIFICATION	// index of left-most brace // index of right-most brace
WITHOUT_CLASSIFICATION	// Length check is a hack.  We should not be reeiving "" as a filename ever. 
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// NOT REACHED HERE
WITHOUT_CLASSIFICATION	// Pickaxe says @ must be followed by a name character, but MRI // does not require this.
WITHOUT_CLASSIFICATION	// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.
WITHOUT_CLASSIFICATION	// SimpleSampler
WITHOUT_CLASSIFICATION	/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */
WITHOUT_CLASSIFICATION	// b64_xtable for decoding Base 64
WITHOUT_CLASSIFICATION	// single precision, little-endian
WITHOUT_CLASSIFICATION	// single precision, big-endian
WITHOUT_CLASSIFICATION	// single precision, native
WITHOUT_CLASSIFICATION	// single precision, native // single precision, native
WITHOUT_CLASSIFICATION	// double precision, little-endian
WITHOUT_CLASSIFICATION	// double precision, big-endian
WITHOUT_CLASSIFICATION	// double precision, native
WITHOUT_CLASSIFICATION	// signed short, little-endian
WITHOUT_CLASSIFICATION	// signed char
WITHOUT_CLASSIFICATION	// unsigned char
WITHOUT_CLASSIFICATION	// long, little-endian
WITHOUT_CLASSIFICATION	// long, big-endian
WITHOUT_CLASSIFICATION	// unsigned int, native
WITHOUT_CLASSIFICATION	// int, native
WITHOUT_CLASSIFICATION	// 64-bit number, native (as fixnum)
WITHOUT_CLASSIFICATION	// How many occurrences of 'type' we want
WITHOUT_CLASSIFICATION	// See if we have a converter for the job...
WITHOUT_CLASSIFICATION	// Otherwise the unpack should be here...
WITHOUT_CLASSIFICATION	// Possible Checksum Byte
WITHOUT_CLASSIFICATION	// obtain a
WITHOUT_CLASSIFICATION	// obtain b
WITHOUT_CLASSIFICATION	// obtain c
WITHOUT_CLASSIFICATION	// obtain d
WITHOUT_CLASSIFICATION	/*encode.limit() - */
WITHOUT_CLASSIFICATION	/* 1 */
WITHOUT_CLASSIFICATION	/* 2 */
WITHOUT_CLASSIFICATION	/* 3 */
WITHOUT_CLASSIFICATION	/* 4 */
WITHOUT_CLASSIFICATION	/* 5 */
WITHOUT_CLASSIFICATION	/* 6 */
WITHOUT_CLASSIFICATION	/* 7 */
WITHOUT_CLASSIFICATION	// Skip all whitespace in pack format string
WITHOUT_CLASSIFICATION	// Skip embedded comments in pack format string
WITHOUT_CLASSIFICATION	// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.
WITHOUT_CLASSIFICATION	//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char
WITHOUT_CLASSIFICATION	// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.
WITHOUT_CLASSIFICATION	// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.
WITHOUT_CLASSIFICATION	// Determine how many of type are needed (default: 1)
WITHOUT_CLASSIFICATION	// 'Z' adds extra null pad (versus 'a')
WITHOUT_CLASSIFICATION	//if the low bit is set //set the high bit of the result
WITHOUT_CLASSIFICATION	//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte
WITHOUT_CLASSIFICATION	//if the length is not a multiple of 8 //we need to pad the last byte
WITHOUT_CLASSIFICATION	//if the length is not a multiple of 8 //we need to pad the last byte
WITHOUT_CLASSIFICATION	//do some padding, I don't understand the padding strategy
WITHOUT_CLASSIFICATION	// we filled up current byte; append it and create next one
WITHOUT_CLASSIFICATION	//if the index is not a multiple of 8, we are not on a byte boundary
WITHOUT_CLASSIFICATION	//this test may be too lax but it is the same as in MRI
WITHOUT_CLASSIFICATION	// we don't deal with negatives.
WITHOUT_CLASSIFICATION	// populate commandline with NG-provided stuff
WITHOUT_CLASSIFICATION	// are we recursing?
WITHOUT_CLASSIFICATION	// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	// default PidGetter
WITHOUT_CLASSIFICATION	// ignore and try windows version
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// ignore and use hashcode
WITHOUT_CLASSIFICATION	// try both
WITHOUT_CLASSIFICATION	// just unix
WITHOUT_CLASSIFICATION	// just windows
WITHOUT_CLASSIFICATION	// neither
WITHOUT_CLASSIFICATION	// CON: popen is a case where I think we should just always shell out.
WITHOUT_CLASSIFICATION	// single string command, pass to sh to expand wildcards
WITHOUT_CLASSIFICATION	// direct invocation of the command
WITHOUT_CLASSIFICATION	// break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	// break out if we've dug as deep as we can
WITHOUT_CLASSIFICATION	// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.
WITHOUT_CLASSIFICATION	// ignore, we're on the way out
WITHOUT_CLASSIFICATION	// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	// popen callers wants to be able to read, provide subprocess in directly
WITHOUT_CLASSIFICATION	// popen callers wants to be able to read, provide subprocess in directly
WITHOUT_CLASSIFICATION	// popen caller wants to be able to write, provide subprocess out directly
WITHOUT_CLASSIFICATION	// no read requested, hook up read to parents output
WITHOUT_CLASSIFICATION	// no read requested, hook up read to parents output
WITHOUT_CLASSIFICATION	// execute command with sh -c // this does shell expansion of wildcards
WITHOUT_CLASSIFICATION	// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".
WITHOUT_CLASSIFICATION	// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process
WITHOUT_CLASSIFICATION	// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!
WITHOUT_CLASSIFICATION	// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.
WITHOUT_CLASSIFICATION	// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.
WITHOUT_CLASSIFICATION	// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.
WITHOUT_CLASSIFICATION	//sequential
WITHOUT_CLASSIFICATION	// reverse the entire area of the array selected if it's reversed.
WITHOUT_CLASSIFICATION	// do median of 7 if the array is over 200 elements.
WITHOUT_CLASSIFICATION	// if it's less than 200 do median of 3
WITHOUT_CLASSIFICATION	// SignalFacade
WITHOUT_CLASSIFICATION	// this is the order in which MRI does these two tests
WITHOUT_CLASSIFICATION	// this is the order in which MRI does these tests
WITHOUT_CLASSIFICATION	// basically just forcing a TypeError here to match MRI
WITHOUT_CLASSIFICATION	// not saving DFS instance, as it will only be used once (at most) per call
WITHOUT_CLASSIFICATION	// Args
WITHOUT_CLASSIFICATION	// static methods only
WITHOUT_CLASSIFICATION	//System.err.println(" calculateLength()/str=" + str);
WITHOUT_CLASSIFICATION	// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.
WITHOUT_CLASSIFICATION	// last index (+1) accessed by next() // last index (+1) accessed by get()
WITHOUT_CLASSIFICATION	// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.
WITHOUT_CLASSIFICATION	// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.
WITHOUT_CLASSIFICATION	// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)
WITHOUT_CLASSIFICATION	// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 
WITHOUT_CLASSIFICATION	// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])
WITHOUT_CLASSIFICATION	// 'd' and 'i' are the same
WITHOUT_CLASSIFICATION	// 'u' with space or plus flags is same as 'd'
WITHOUT_CLASSIFICATION	// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).
WITHOUT_CLASSIFICATION	// skip '-' in bytes, will add where appropriate
WITHOUT_CLASSIFICATION	// ..
WITHOUT_CLASSIFICATION	// the 1 is for the stripped sign char
WITHOUT_CLASSIFICATION	// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)
WITHOUT_CLASSIFICATION	// gotta have at least a zero...
WITHOUT_CLASSIFICATION	// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.
WITHOUT_CLASSIFICATION	// intDigits isn't used here, but if it were, it would be 1
WITHOUT_CLASSIFICATION	/* intDigits = 1; */
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong/reading c=" + data[s]);
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong/converted c=" + c);
WITHOUT_CLASSIFICATION	// intDigits isn't used here, but if it were, it would be 1
WITHOUT_CLASSIFICATION	/* intDigits = 1; */
WITHOUT_CLASSIFICATION	// precision for G/g includes integer digits
WITHOUT_CLASSIFICATION	// deal with length/width
WITHOUT_CLASSIFICATION	// deal with length/width
WITHOUT_CLASSIFICATION	// first digit is always printed
WITHOUT_CLASSIFICATION	// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.
WITHOUT_CLASSIFICATION	// 5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	// 4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	// in this mode, '.' is always printed
WITHOUT_CLASSIFICATION	// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 
WITHOUT_CLASSIFICATION	// '.' is printed
WITHOUT_CLASSIFICATION	// all precision numebers printed
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// '.'
WITHOUT_CLASSIFICATION	// decimal form, like (but not *just* like!) 'f'
WITHOUT_CLASSIFICATION	// digits array shifted, update all
WITHOUT_CLASSIFICATION	// will have a trailing '.' // g fills trailing zeroes if #
WITHOUT_CLASSIFICATION	// s/b true, since intLength > 0
WITHOUT_CLASSIFICATION	// s/b true, since intLength > 0
WITHOUT_CLASSIFICATION	// always need at least a 0
WITHOUT_CLASSIFICATION	// always need at least a 0
WITHOUT_CLASSIFICATION	// digits arr shifted, update all
WITHOUT_CLASSIFICATION	// (1|intlen).prec
WITHOUT_CLASSIFICATION	// (1|intlen)
WITHOUT_CLASSIFICATION	// will have a trailing '.'
WITHOUT_CLASSIFICATION	// fill up the rest with zeroes
WITHOUT_CLASSIFICATION	//System.err.println(" main/len=" + len);
WITHOUT_CLASSIFICATION	// 5 -> e+nnn / e-nnn
WITHOUT_CLASSIFICATION	// 4 -> e+nn / e-nn
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// '.'
WITHOUT_CLASSIFICATION	// equivalent to MRI case '\0':
WITHOUT_CLASSIFICATION	// '.' and all precision digits printed
WITHOUT_CLASSIFICATION	// \v
WITHOUT_CLASSIFICATION	// dangling '%' char
WITHOUT_CLASSIFICATION	// main while loop (offset < length)
WITHOUT_CLASSIFICATION	// debugging code, keeping for now
WITHOUT_CLASSIFICATION	// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do
WITHOUT_CLASSIFICATION	// "%.0f" % 0.99
WITHOUT_CLASSIFICATION	// limit the length of negatives if possible (also faster)
WITHOUT_CLASSIFICATION	// negative values
WITHOUT_CLASSIFICATION	// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.
WITHOUT_CLASSIFICATION	// relatively cheap test for 32-bit values
WITHOUT_CLASSIFICATION	// no such luck...
WITHOUT_CLASSIFICATION	// ok, now it gets expensive...
WITHOUT_CLASSIFICATION	// go through negated powers of 32 until we find one small enough 
WITHOUT_CLASSIFICATION	// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...
WITHOUT_CLASSIFICATION	/* constant vector a */
WITHOUT_CLASSIFICATION	/* most significant w-r bits */
WITHOUT_CLASSIFICATION	/* least significant r bits */
WITHOUT_CLASSIFICATION	// state[j] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	// state[i] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	// state[i] &= 0xffffffffL;
WITHOUT_CLASSIFICATION	/* MSB is 1; assuring non-zero initial array */
WITHOUT_CLASSIFICATION	/* Tempering */
WITHOUT_CLASSIFICATION	// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.
WITHOUT_CLASSIFICATION	//System.err.println("byteListToInum(" + str + ")");
WITHOUT_CLASSIFICATION	//System.err.println("byteListToInum(" + str + ")");
WITHOUT_CLASSIFICATION	// \v
WITHOUT_CLASSIFICATION	//System.err.println("getSign()");
WITHOUT_CLASSIFICATION	//System.err.println(" getSign/" + sign);
WITHOUT_CLASSIFICATION	//System.err.println("figureOutBase()/base=" + base);
WITHOUT_CLASSIFICATION	//System.err.println(" figureOutBase/base=" + base);
WITHOUT_CLASSIFICATION	//System.err.println("calculateLength()/str=" + str);
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//System.err.println(" stringToLong=" + val);
WITHOUT_CLASSIFICATION	// no number
WITHOUT_CLASSIFICATION	// trailing garbage
WITHOUT_CLASSIFICATION	//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);
WITHOUT_CLASSIFICATION	// it was not found at all!
WITHOUT_CLASSIFICATION	// can be overridden to be informed when objects are removed
WITHOUT_CLASSIFICATION	// we reached the end of a list
WITHOUT_CLASSIFICATION	// goto next bucket
WITHOUT_CLASSIFICATION	// we reached the end
WITHOUT_CLASSIFICATION	// entry is the first element of this bucket
WITHOUT_CLASSIFICATION	// states
WITHOUT_CLASSIFICATION	// remove leading whitespace (includes _ for lax) // get sign, if any
WITHOUT_CLASSIFICATION	// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible
WITHOUT_CLASSIFICATION	// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed
WITHOUT_CLASSIFICATION	// drop through for sign
WITHOUT_CLASSIFICATION	// switch // will use this if we have to go back the slow way
WITHOUT_CLASSIFICATION	// drop through for non-strict digits
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// no digits, go calc (will return +/- 0.0 for lax)
WITHOUT_CLASSIFICATION	// ignore leading zeroes
WITHOUT_CLASSIFICATION	// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).
WITHOUT_CLASSIFICATION	// ok, got a non-zero, have to own up to our horded zeroes
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 
WITHOUT_CLASSIFICATION	// ignore // switch
WITHOUT_CLASSIFICATION	// ignore // switch
WITHOUT_CLASSIFICATION	// end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// first non_underscore char must be digit
WITHOUT_CLASSIFICATION	// no dec digits, end of parseable data, go to calc
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// difficult case, send to Double/FloatingDecimal
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// first char must be digit or decimal point
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// switch // if
WITHOUT_CLASSIFICATION	// lax (str.to_f) allows underscores between e/E and sign
WITHOUT_CLASSIFICATION	// switch // for // no exponent, so drop through for calculation
WITHOUT_CLASSIFICATION	// switch // for // no more data, OK for strict to go calc
WITHOUT_CLASSIFICATION	// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...
WITHOUT_CLASSIFICATION	// no digits, error
WITHOUT_CLASSIFICATION	// too big for us
WITHOUT_CLASSIFICATION	// too big for us
WITHOUT_CLASSIFICATION	// must be at least one digit for strict
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// first char must be digit
WITHOUT_CLASSIFICATION	// no dec digits after '.', error for strict
WITHOUT_CLASSIFICATION	// ignore leading zeroes // switch
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	// switch // for
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	// only whitespace allowed after value for strict
WITHOUT_CLASSIFICATION	// must be at least one digit for strict
WITHOUT_CLASSIFICATION	// // Copy out any buffered bytes //
WITHOUT_CLASSIFICATION	// switch //while
WITHOUT_CLASSIFICATION	/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */
WITHOUT_CLASSIFICATION	// Zlib behavior: negative win_bits means no header and no checksum.
WITHOUT_CLASSIFICATION	// rb_enc_mbclen
WITHOUT_CLASSIFICATION	// rb_enc_precise_mbclen
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	// arg cannot be negative
WITHOUT_CLASSIFICATION	// NoFunctionalitySignalFacade
WITHOUT_CLASSIFICATION	// Change visibility so others can see it
WITHOUT_CLASSIFICATION	// could not get canonical path, just use given path
WITHOUT_CLASSIFICATION	// strip off "_dot_rb" for .rb files
WITHOUT_CLASSIFICATION	// Makes sure the key is not already in the hashtable.
WITHOUT_CLASSIFICATION	// Rehash the table if the threshold is exceeded
WITHOUT_CLASSIFICATION	// Creates the new entry.
WITHOUT_CLASSIFICATION	// next entry to return // current slot // current entry
WITHOUT_CLASSIFICATION	// advance to first entry
WITHOUT_CLASSIFICATION	// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.
WITHOUT_CLASSIFICATION	/*package-protected*/
WITHOUT_CLASSIFICATION	// raw file URL, just open directly
WITHOUT_CLASSIFICATION	// We always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	// if refcount is at or below zero, we're no longer valid
WITHOUT_CLASSIFICATION	// if channel is already closed, we're no longer valid
WITHOUT_CLASSIFICATION	// otherwise decrement and possibly close as normal
WITHOUT_CLASSIFICATION	// r/w buffer // are we reading or writing?
WITHOUT_CLASSIFICATION	// this constructor is used by fdopen, so we don't increment descriptor ref count
WITHOUT_CLASSIFICATION	// unread back
WITHOUT_CLASSIFICATION	// iterate over remainder of buffer until we find a match
WITHOUT_CLASSIFICATION	// terminate and advance buffer when we find our char
WITHOUT_CLASSIFICATION	// no match, append remainder of buffer and continue with next block
WITHOUT_CLASSIFICATION	// found a match above, check if remaining separator characters match, appending as we go
WITHOUT_CLASSIFICATION	// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //
WITHOUT_CLASSIFICATION	// // Copy any buffered data (including ungetc byte) //
WITHOUT_CLASSIFICATION	// // Now read unbuffered directly from the file //
WITHOUT_CLASSIFICATION	// // Copy out any buffered bytes //
WITHOUT_CLASSIFICATION	// // Need to clamp source (buffer) size to avoid overrun //
WITHOUT_CLASSIFICATION	// not closing from finalize
WITHOUT_CLASSIFICATION	// clear runtime so it doesn't get stuck in memory (JRUBY-2933)
WITHOUT_CLASSIFICATION	// silence
WITHOUT_CLASSIFICATION	// silence
WITHOUT_CLASSIFICATION	// Don't bother
WITHOUT_CLASSIFICATION	// Don't bother
WITHOUT_CLASSIFICATION	// For Sockets, only write as much as will fit.
WITHOUT_CLASSIFICATION	// Correct position for read / write buffering (we could invalidate, but expensive)
WITHOUT_CLASSIFICATION	// Adjust for buffered data
WITHOUT_CLASSIFICATION	// for SEEK_CUR, need to adjust for buffered data
WITHOUT_CLASSIFICATION	// libc flushes writes on any read from the actual file, so we flush here
WITHOUT_CLASSIFICATION	// we have read ahead, and need to back up
WITHOUT_CLASSIFICATION	// 128K seems to be the minimum at which the stat+seek is faster than reallocation
WITHOUT_CLASSIFICATION	// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //
WITHOUT_CLASSIFICATION	// append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	// // Copy what is in the buffer, if there is some buffered data //
WITHOUT_CLASSIFICATION	// // Avoid double-copying for reads that are larger than the buffer size //
WITHOUT_CLASSIFICATION	// // Complete the request by filling the read buffer first //
WITHOUT_CLASSIFICATION	// // Complete the request by filling the read buffer first //
WITHOUT_CLASSIFICATION	// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //
WITHOUT_CLASSIFICATION	// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //
WITHOUT_CLASSIFICATION	// Ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	// Ruby ignores empty syswrites
WITHOUT_CLASSIFICATION	// Doesn't fit in buffer. Write immediately. // ensure nothing left to write
WITHOUT_CLASSIFICATION	// truncate can't lengthen files, so we save position, seek/write, and go back
WITHOUT_CLASSIFICATION	// how far ahead we are when reading
WITHOUT_CLASSIFICATION	// if the read buffer is ahead, back up
WITHOUT_CLASSIFICATION	// close without removing from finalizers
WITHOUT_CLASSIFICATION	// putting a bit back, so we're not at EOF anymore
WITHOUT_CLASSIFICATION	// save the ungot
WITHOUT_CLASSIFICATION	// otherwise, we try an unbuffered read to get whatever's available
WITHOUT_CLASSIFICATION	// ignore this; select() will set the correct mode when it is finished
WITHOUT_CLASSIFICATION	// flush first
WITHOUT_CLASSIFICATION	// // Wake up any channels that became unblocked //
WITHOUT_CLASSIFICATION	// // Register any new blocking I/O requests //
WITHOUT_CLASSIFICATION	// Now clear out any previously selected channels
WITHOUT_CLASSIFICATION	// // Wait for I/O on any channel //
WITHOUT_CLASSIFICATION	// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'
WITHOUT_CLASSIFICATION	// Java requires "w" for creating a file that does not exist
WITHOUT_CLASSIFICATION	// seek to force underlying buffer to flush
WITHOUT_CLASSIFICATION	// seek to force read buffer to invalidate
WITHOUT_CLASSIFICATION	/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */
WITHOUT_CLASSIFICATION	// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.
WITHOUT_CLASSIFICATION	// TODO: Ruby logic is somewhat more complicated here, see comments after
WITHOUT_CLASSIFICATION	// make sure the pipe stream is set to null
WITHOUT_CLASSIFICATION	// make sure the main stream is set to null
WITHOUT_CLASSIFICATION	// first try our custom-generated Unsafe
WITHOUT_CLASSIFICATION	// then try Sun's Unsafe
WITHOUT_CLASSIFICATION	// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly
WITHOUT_CLASSIFICATION	// else leave it null
WITHOUT_CLASSIFICATION	// TypeMatcher
WITHOUT_CLASSIFICATION	// This is now needed, since module Java // isn't in by default
WITHOUT_CLASSIFICATION	// Iterate over the RubyHash keySet, simultaneously iterating over the values()
WITHOUT_CLASSIFICATION	// Get the value from the map via the key
WITHOUT_CLASSIFICATION	// Get the value from the map via the values iterator
WITHOUT_CLASSIFICATION	// Check the 2 values obtained via different means
WITHOUT_CLASSIFICATION	// Set a value in the RubyHash
WITHOUT_CLASSIFICATION	// Set a value in the RubyHash
WITHOUT_CLASSIFICATION	// Check the entry.setValue values come back out ok
WITHOUT_CLASSIFICATION	// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.
WITHOUT_CLASSIFICATION	//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));
WITHOUT_CLASSIFICATION	// Init
WITHOUT_CLASSIFICATION	// Block
WITHOUT_CLASSIFICATION	// Copy constructor
WITHOUT_CLASSIFICATION	// presumably this require should fail
WITHOUT_CLASSIFICATION	// JRUBY-646 // presumably this require should fail
WITHOUT_CLASSIFICATION	// Test that requiring a normal Java class raises an error (JRUBY-3214
WITHOUT_CLASSIFICATION	// ok
WITHOUT_CLASSIFICATION	// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).
WITHOUT_CLASSIFICATION	//load should work several times in a row
WITHOUT_CLASSIFICATION	//reset the $loadTestvar
WITHOUT_CLASSIFICATION	//call throwException via JRuby
WITHOUT_CLASSIFICATION	// Notify the calling thread that we're about to go to sleep the first time
WITHOUT_CLASSIFICATION	// wait for the go signal
WITHOUT_CLASSIFICATION	// run ten separate calls into Ruby, with delay and explicit GC
WITHOUT_CLASSIFICATION	// wait until thread has initialized
WITHOUT_CLASSIFICATION	// notify thread to proceed
WITHOUT_CLASSIFICATION	// wait until thread has completed
WITHOUT_CLASSIFICATION	// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline
WITHOUT_CLASSIFICATION	// out of byte range // there will be no match for sure
WITHOUT_CLASSIFICATION	// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.
WITHOUT_CLASSIFICATION	// if any exceptions were raised, we fail
WITHOUT_CLASSIFICATION	// there should only be one more thread in thread group than before we started
WITHOUT_CLASSIFICATION	// construct a new cache with thread's classloader and no limit
WITHOUT_CLASSIFICATION	//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();
WITHOUT_CLASSIFICATION	//        assertSame(script1, script2);
WITHOUT_CLASSIFICATION	// void methods should work
WITHOUT_CLASSIFICATION	// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649
WITHOUT_CLASSIFICATION	// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.
WITHOUT_CLASSIFICATION	// Without a flush Ant will miss some of our output
WITHOUT_CLASSIFICATION	// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());
WITHOUT_CLASSIFICATION	//        int n = 10;
WITHOUT_CLASSIFICATION	// there might be more test classes in a single file, so we iterate over them
WITHOUT_CLASSIFICATION	//No ClassCastException!
WITHOUT_CLASSIFICATION	// value equality
WITHOUT_CLASSIFICATION	// identity equality
WITHOUT_CLASSIFICATION	// bench straight-up integer fib(30)
WITHOUT_CLASSIFICATION	// bench Integer fib
WITHOUT_CLASSIFICATION	// bench fully-boxed fib
WITHOUT_CLASSIFICATION	// bench fully-boxed fib
WITHOUT_CLASSIFICATION	// bench fixnum-boxed fib
WITHOUT_CLASSIFICATION	// bench straight-up long fib(30)
WITHOUT_CLASSIFICATION	// bench Long fib
WITHOUT_CLASSIFICATION	// skip this one, probably no 'ls' (windows)
WITHOUT_CLASSIFICATION	// start off with a neutral parent
WITHOUT_CLASSIFICATION	/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.
WITHOUT_CLASSIFICATION	// We are creating a new IO object that shares the same // IOHandler (and fileno).
WITHOUT_CLASSIFICATION	// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]
WITHOUT_CLASSIFICATION	// select appropriate call site // dup receiver // load self
WITHOUT_CLASSIFICATION	// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //
WITHOUT_CLASSIFICATION	// // Force the client socket to be blocking //
WITHOUT_CLASSIFICATION	// Additional context surrounding tokens that both the lexer and // grammar use.
WITHOUT_CLASSIFICATION	// Enebo:  c can never be antrhign but '.' // Why did I put this here?
WITHOUT_CLASSIFICATION	// save package module as ivar in parent, and add method to parent so // we don't have to come back here.
WITHOUT_CLASSIFICATION	//[C,C] //[C, boolean]
WITHOUT_CLASSIFICATION	// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)
WITHOUT_CLASSIFICATION	// ignore; job was cancelled // FIXME: is this ok?
WITHOUT_CLASSIFICATION	//                    // check arity //                    checkArity(mv, scope);
WITHOUT_CLASSIFICATION	// rethrow exception // rethrow it
WITHOUT_CLASSIFICATION	// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.
WITHOUT_CLASSIFICATION	// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.
WITHOUT_CLASSIFICATION	// proxy is under construction, building thread can // safely read non-volatile value
WITHOUT_CLASSIFICATION	// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping
WITHOUT_CLASSIFICATION	// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 
WITHOUT_CLASSIFICATION	// // construct the proxy method //
WITHOUT_CLASSIFICATION	// line 159 "-" // %token constants
WITHOUT_CLASSIFICATION	// +++ // Helper Methods
WITHOUT_CLASSIFICATION	// line 152 "-" // %token constants
WITHOUT_CLASSIFICATION	// initial size // state stack // value stack // current input // #tokens to shift
WITHOUT_CLASSIFICATION	// +++ // Helper Methods
WITHOUT_CLASSIFICATION	// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.
WITHOUT_CLASSIFICATION	// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 
WITHOUT_CLASSIFICATION	// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.
WITHOUT_CLASSIFICATION	// TODO: make it 16 now ? // MUST be power of 2!
WITHOUT_CLASSIFICATION	// check visibility // dup method
WITHOUT_CLASSIFICATION	// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];
WITHOUT_CLASSIFICATION	// unsigned int, native // unsigned long, native
WITHOUT_CLASSIFICATION	//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it
WITHOUT_CLASSIFICATION	// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.
WITHOUT_CLASSIFICATION	// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.
WITHOUT_CLASSIFICATION	// switch // for // no more data, OK for strict to go calc
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem
WITHOUT_CLASSIFICATION	// captures // begin and end are used when not groups defined // source string
WITHOUT_CLASSIFICATION	// // INSTANCE VARIABLE RUBY METHODS //
WITHOUT_CLASSIFICATION	// switch // while
WITHOUT_CLASSIFICATION	// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.
WITHOUT_CLASSIFICATION	// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.
WITHOUT_CLASSIFICATION	// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method
WITHOUT_CLASSIFICATION	// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// constructor
WITHOUT_CLASSIFICATION	// If a line is followed by a blank line put // it back.
WITHOUT_CLASSIFICATION	/* $>: default output handle */
WITHOUT_CLASSIFICATION	// line 423
WITHOUT_CLASSIFICATION	// line 486
WITHOUT_CLASSIFICATION	// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments
WITHOUT_CLASSIFICATION	// re-register, since fileno points at something new now
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	// colon3, assign in Object
WITHOUT_CLASSIFICATION	// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass
WITHOUT_CLASSIFICATION	// Wire up Function#call(*args) to use the super-fast native invokers
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// Decrease value to hit upper range.  
WITHOUT_CLASSIFICATION	// assign to appropriate variable
WITHOUT_CLASSIFICATION	// "else" body
WITHOUT_CLASSIFICATION	// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done
WITHOUT_CLASSIFICATION	// read-volatile
WITHOUT_CLASSIFICATION	/* $+: string matches last paren. */
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	/* should alter global state */
WITHOUT_CLASSIFICATION	// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out
WITHOUT_CLASSIFICATION	/* 10! */
WITHOUT_CLASSIFICATION	//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done
WITHOUT_CLASSIFICATION	// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.
WITHOUT_CLASSIFICATION	// all these types are immediately considered "defined"
WITHOUT_CLASSIFICATION	// first, iterate over all required args
WITHOUT_CLASSIFICATION	// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //
WITHOUT_CLASSIFICATION	//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	//yyLhs 496
WITHOUT_CLASSIFICATION	// initial size // state stack // value stack // current input // #tokens to shift
WITHOUT_CLASSIFICATION	// line 449
WITHOUT_CLASSIFICATION	// line 495
WITHOUT_CLASSIFICATION	// Management/monitoring
WITHOUT_CLASSIFICATION	// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done
WITHOUT_CLASSIFICATION	/* 14! */
WITHOUT_CLASSIFICATION	// Process any set of annotations // No supported options
WITHOUT_CLASSIFICATION	// add to the jitted methods set
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	// extract item from array
WITHOUT_CLASSIFICATION	//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done
WITHOUT_CLASSIFICATION	// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //
WITHOUT_CLASSIFICATION	/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */
WITHOUT_CLASSIFICATION	// index for the item
WITHOUT_CLASSIFICATION	// Atomic integers for symbol and method IDs
WITHOUT_CLASSIFICATION	/* 18! */
WITHOUT_CLASSIFICATION	// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// set up a local IRuby variable
WITHOUT_CLASSIFICATION	// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable
WITHOUT_CLASSIFICATION	/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */
WITHOUT_CLASSIFICATION	// Can't support the rest with Java
WITHOUT_CLASSIFICATION	// An atomic long for generating DynamicMethod serial numbers
WITHOUT_CLASSIFICATION	// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.
WITHOUT_CLASSIFICATION	/* 22! */
WITHOUT_CLASSIFICATION	// attribute set.
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// grab nil for local variables
WITHOUT_CLASSIFICATION	// fill in all vars with nil so compiler is happy about future accesses
WITHOUT_CLASSIFICATION	// Build a new class and add it to the current scope (could be a script / module / class)
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// ---------- These methods below are used during compile-time optimizations ------- 
WITHOUT_CLASSIFICATION	// AF_INET
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes
WITHOUT_CLASSIFICATION	// BASE64
WITHOUT_CLASSIFICATION	/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */
WITHOUT_CLASSIFICATION	// element set
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// visit a label to start scoping for local vars in this method
WITHOUT_CLASSIFICATION	// temp locals must start after last real local
WITHOUT_CLASSIFICATION	// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy
WITHOUT_CLASSIFICATION	// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.
WITHOUT_CLASSIFICATION	//IRubyObject protocol = args[4];
WITHOUT_CLASSIFICATION	// promise to implement three to N with block
WITHOUT_CLASSIFICATION	// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.
WITHOUT_CLASSIFICATION	// carriage return
WITHOUT_CLASSIFICATION	//yyDgoto 136
WITHOUT_CLASSIFICATION	// discarding a token does not change stack
WITHOUT_CLASSIFICATION	// String construction routines by NOT byte[] buffer and making the target String shared 
WITHOUT_CLASSIFICATION	// insert all nodes in sequence, hash them in the final instruction // KEY
WITHOUT_CLASSIFICATION	// return last value from execution
WITHOUT_CLASSIFICATION	// we append an index to ensure two identical method names will not conflict
WITHOUT_CLASSIFICATION	// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions
WITHOUT_CLASSIFICATION	// otherwise one key has been selected (ours) so we get the channel and hand it off
WITHOUT_CLASSIFICATION	// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.
WITHOUT_CLASSIFICATION	// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing
WITHOUT_CLASSIFICATION	// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks
WITHOUT_CLASSIFICATION	// check arity in the variable-arity version
WITHOUT_CLASSIFICATION	// leave it null and fall back on our normal invocation logic
WITHOUT_CLASSIFICATION	// Build closure body and return the result of the closure
WITHOUT_CLASSIFICATION	// for each simple method name, implement the complex methods, calling the simple version
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Need to initialize
WITHOUT_CLASSIFICATION	// Install direct java methods with mangled name so 'send' can call them directly.
WITHOUT_CLASSIFICATION	/* fall through */
WITHOUT_CLASSIFICATION	// deal with case when "other" is not a string
WITHOUT_CLASSIFICATION	// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// in method body with no containing loop, issue jump error // load runtime and value, issue jump error
WITHOUT_CLASSIFICATION	// store argument count information into scope
WITHOUT_CLASSIFICATION	// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code
WITHOUT_CLASSIFICATION	// First, build assignments for specific named arguments
WITHOUT_CLASSIFICATION	//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }
WITHOUT_CLASSIFICATION	// get current context
WITHOUT_CLASSIFICATION	// octal constant
WITHOUT_CLASSIFICATION	// read
WITHOUT_CLASSIFICATION	// this really needs to be inlined here
WITHOUT_CLASSIFICATION	// it doesn't handle special cases
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	// If reciever is self then we do the call the same way as vcall
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	// ignore; we won't use invokedynamic
WITHOUT_CLASSIFICATION	// at end
WITHOUT_CLASSIFICATION	/* bang: true, no match, no substitution */
WITHOUT_CLASSIFICATION	// save blocking state
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	/*receiver*/
WITHOUT_CLASSIFICATION	// invoke static __file__
WITHOUT_CLASSIFICATION	// rest of the argument array!
WITHOUT_CLASSIFICATION	// fall back on empty env when security disallows environment var access (like in an applet)
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// UndefinedMethod should be immutable
WITHOUT_CLASSIFICATION	// load null block
WITHOUT_CLASSIFICATION	// This point is only reached if there was an exception handler installed.
WITHOUT_CLASSIFICATION	// nothing else to here - the module version will be // included in the class.
WITHOUT_CLASSIFICATION	// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// block given
WITHOUT_CLASSIFICATION	// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //
WITHOUT_CLASSIFICATION	// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits
WITHOUT_CLASSIFICATION	// We can callsite cache const_missing if we want
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	/*self*/
WITHOUT_CLASSIFICATION	// declare the field
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// Assign the values.
WITHOUT_CLASSIFICATION	// check arity
WITHOUT_CLASSIFICATION	// check arity
WITHOUT_CLASSIFICATION	// create the class
WITHOUT_CLASSIFICATION	// called only by initializing thread; no synchronization required
WITHOUT_CLASSIFICATION	// No hex value after the 'x'.
WITHOUT_CLASSIFICATION	// 1.8
WITHOUT_CLASSIFICATION	/* 6:tags 16:addr 1:eos */
WITHOUT_CLASSIFICATION	// Let m be the exact digits precision in an earlier! loop
WITHOUT_CLASSIFICATION	// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure
WITHOUT_CLASSIFICATION	// block
WITHOUT_CLASSIFICATION	// Label for the start of the method // Label for the end of the method
WITHOUT_CLASSIFICATION	// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...
WITHOUT_CLASSIFICATION	// FIXME: JRUBY-3604
WITHOUT_CLASSIFICATION	// invoke pre method stuff
WITHOUT_CLASSIFICATION	// all done with lookup attempts, release monitor
WITHOUT_CLASSIFICATION	// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.
WITHOUT_CLASSIFICATION	// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl
WITHOUT_CLASSIFICATION	// Construct local variables based on parameter names passed in
WITHOUT_CLASSIFICATION	// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.
WITHOUT_CLASSIFICATION	// file given, use it and force it into binding
WITHOUT_CLASSIFICATION	// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it
WITHOUT_CLASSIFICATION	// return sqrt(squarD) with precision of rootMC
WITHOUT_CLASSIFICATION	// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.
WITHOUT_CLASSIFICATION	/*arg*/
WITHOUT_CLASSIFICATION	// Get a new label using the provided label prefix
WITHOUT_CLASSIFICATION	// normal exit, perform finally and return
WITHOUT_CLASSIFICATION	// coerce arguments
WITHOUT_CLASSIFICATION	// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity
WITHOUT_CLASSIFICATION	/* expected */
WITHOUT_CLASSIFICATION	// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.
WITHOUT_CLASSIFICATION	/* ignore backslashed spaces in %w */
WITHOUT_CLASSIFICATION	// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".
WITHOUT_CLASSIFICATION	// no binding given, use 0 for both
WITHOUT_CLASSIFICATION	// <=> may return nil in many circumstances, e.g. 3 <=> NaN        
WITHOUT_CLASSIFICATION	// use numbered access method
WITHOUT_CLASSIFICATION	// Always use "GMT" since that's required by Java API.
WITHOUT_CLASSIFICATION	// ignore if it's not a global var
WITHOUT_CLASSIFICATION	// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;
WITHOUT_CLASSIFICATION	// Remaining arguments are for the script itself
WITHOUT_CLASSIFICATION	// arg grouping, use slower arg walking logic
WITHOUT_CLASSIFICATION	// build scope names string
WITHOUT_CLASSIFICATION	// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.
WITHOUT_CLASSIFICATION	// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.
WITHOUT_CLASSIFICATION	// finally
WITHOUT_CLASSIFICATION	// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.
WITHOUT_CLASSIFICATION	// ?l  | boolean | True if file1 exists and is a symbolic link
WITHOUT_CLASSIFICATION	// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.
WITHOUT_CLASSIFICATION	// Each root node has a top-level scope that we need to push
WITHOUT_CLASSIFICATION	// specific arity
WITHOUT_CLASSIFICATION	// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.
WITHOUT_CLASSIFICATION	// ?w  | boolean | True if file1 exists and is writable by effective uid/gid
WITHOUT_CLASSIFICATION	// // COMMON VARIABLE METHODS //
WITHOUT_CLASSIFICATION	/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// let RescuedBlock continue
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// do nothing, fall back on default compiler below
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	// Should we run this pass on the current scope before running it on nested scopes?
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Utility Methods     *  ================      */
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// write-volatile
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// if more than 4 locals, get the locals array too
WITHOUT_CLASSIFICATION	// Add property name aliases
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	/*  ================     *  Instance Methods     *  ================      */
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)
WITHOUT_CLASSIFICATION	// // INTERNAL VARIABLE METHODS //
WITHOUT_CLASSIFICATION	// backspace
WITHOUT_CLASSIFICATION	//yySindex 889
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	//yyGindex 136
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)
WITHOUT_CLASSIFICATION	// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();
WITHOUT_CLASSIFICATION	// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();
WITHOUT_CLASSIFICATION	/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */
WITHOUT_CLASSIFICATION	// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.
WITHOUT_CLASSIFICATION	// The name of this source (e.g. a filename: foo.rb)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.
WITHOUT_CLASSIFICATION	// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact
WITHOUT_CLASSIFICATION	// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 
WITHOUT_CLASSIFICATION	/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/
WITHOUT_CLASSIFICATION	// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false)
WITHOUT_CLASSIFICATION	// No seconds, just yield
WITHOUT_CLASSIFICATION	// finally handling for abnormal exit
WITHOUT_CLASSIFICATION	// if it's an inner class and it's not public, we can't access it; // skip population of declared elements
WITHOUT_CLASSIFICATION	// getFoo      => foo // getFoo(int) => foo(int)
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// not reached
WITHOUT_CLASSIFICATION	// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.
WITHOUT_CLASSIFICATION	// this is the only case it might be null here (in MetaClass construction)
WITHOUT_CLASSIFICATION	// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND
WITHOUT_CLASSIFICATION	// get "self"
WITHOUT_CLASSIFICATION	// No timeout in critical section
WITHOUT_CLASSIFICATION	// rethrow exception // rethrow it
WITHOUT_CLASSIFICATION	// only public methods
WITHOUT_CLASSIFICATION	// If already inspecting, there is no need to register/unregister again.
WITHOUT_CLASSIFICATION	// First try to use drive letter from supplied dir value, // then try current work dir.
WITHOUT_CLASSIFICATION	// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.
WITHOUT_CLASSIFICATION	// generate a real method signature for the method, with to/from coercions
WITHOUT_CLASSIFICATION	// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry
WITHOUT_CLASSIFICATION	// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //
WITHOUT_CLASSIFICATION	// Create constants for flock
WITHOUT_CLASSIFICATION	// double-testing args.length here, but it avoids duplicating the proc-setup code in two places
WITHOUT_CLASSIFICATION	// indices for temp values
WITHOUT_CLASSIFICATION	// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// Done with closure compilation
WITHOUT_CLASSIFICATION	// snapshot of contents of directory // current position in directory
WITHOUT_CLASSIFICATION	// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.
WITHOUT_CLASSIFICATION	// explode array, it's an internal "args" array
WITHOUT_CLASSIFICATION	// explode array, it's an internal "args" array
WITHOUT_CLASSIFICATION	// set self to the class
WITHOUT_CLASSIFICATION	/* ---------- Public fields, methods --------- */
WITHOUT_CLASSIFICATION	// // A specific version was requested - use as is for search //
WITHOUT_CLASSIFICATION	// zero args, no block; do nothing
WITHOUT_CLASSIFICATION	// we need to collect all methods, though we'll only // install the ones that are named in this class
WITHOUT_CLASSIFICATION	// Store each line into this list if not null.
WITHOUT_CLASSIFICATION	// Portion of line right after beginning marker
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// If an IO exception occurs (something odd, but possible) // A directory may return null.
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed
WITHOUT_CLASSIFICATION	// use array as-is, it's a literal array
WITHOUT_CLASSIFICATION	// finally with no exception
WITHOUT_CLASSIFICATION	// Now, for all variables used by 'i' mark them live before 'i'
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */
WITHOUT_CLASSIFICATION	// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned
WITHOUT_CLASSIFICATION	/* not a class */
WITHOUT_CLASSIFICATION	/* not a class */
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// Ruby uses Qnil here, we use "dummy" because we need a class
WITHOUT_CLASSIFICATION	// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF
WITHOUT_CLASSIFICATION	// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway
WITHOUT_CLASSIFICATION	// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);
WITHOUT_CLASSIFICATION	// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.
WITHOUT_CLASSIFICATION	// ////////////////// CONSTANT API METHODS //////////////// //
WITHOUT_CLASSIFICATION	// create the default thread group
WITHOUT_CLASSIFICATION	// range_each_func(range, step_i, b, e, args);
WITHOUT_CLASSIFICATION	/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */
WITHOUT_CLASSIFICATION	// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// used only by the compiler/interpreter (will set the literal flag)
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// Used for the 'redo' command
WITHOUT_CLASSIFICATION	// retuns null when not found to avoid unnecessary getRuntime().getNil() call
WITHOUT_CLASSIFICATION	// returns the stored value without processing undefs (autoloads)
WITHOUT_CLASSIFICATION	/* \cX, \c\M-X */
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	//new Exception().printStackTrace();
WITHOUT_CLASSIFICATION	// line 286
WITHOUT_CLASSIFICATION	// line 476
WITHOUT_CLASSIFICATION	// line 513
WITHOUT_CLASSIFICATION	// line 530
WITHOUT_CLASSIFICATION	// line 533
WITHOUT_CLASSIFICATION	// line 537
WITHOUT_CLASSIFICATION	// line 551
WITHOUT_CLASSIFICATION	// end loop
WITHOUT_CLASSIFICATION	// MRI behavior: we don't print errno for actual Errno errors
WITHOUT_CLASSIFICATION	// prepare to call class definition method
WITHOUT_CLASSIFICATION	// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 
WITHOUT_CLASSIFICATION	// // fields should really be an immutable map as it is never modified after construction //
WITHOUT_CLASSIFICATION	// load self object as IRubyObject, for recv param
WITHOUT_CLASSIFICATION	// TODO: varargs?
WITHOUT_CLASSIFICATION	// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated
WITHOUT_CLASSIFICATION	// We only want IO objects with valid streams (better to error now). 
WITHOUT_CLASSIFICATION	// produce a nicer error since Rubyists aren't used to seeing this
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	//yyLhs 542
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	/*value*/
WITHOUT_CLASSIFICATION	// MRI has extra pointer which makes our code look a little bit // more strange in // comparison
WITHOUT_CLASSIFICATION	// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.
WITHOUT_CLASSIFICATION	//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.
WITHOUT_CLASSIFICATION	/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */
WITHOUT_CLASSIFICATION	/* Consider Thread aspects of this */
WITHOUT_CLASSIFICATION	// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.
WITHOUT_CLASSIFICATION	// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.
WITHOUT_CLASSIFICATION	// line 572
WITHOUT_CLASSIFICATION	// line 601
WITHOUT_CLASSIFICATION	// line 601
WITHOUT_CLASSIFICATION	// line 625
WITHOUT_CLASSIFICATION	// line 649
WITHOUT_CLASSIFICATION	// line 691
WITHOUT_CLASSIFICATION	// line 723
WITHOUT_CLASSIFICATION	// line 732
WITHOUT_CLASSIFICATION	// line 745
WITHOUT_CLASSIFICATION	// line 766
WITHOUT_CLASSIFICATION	// line 785
WITHOUT_CLASSIFICATION	// line 794
WITHOUT_CLASSIFICATION	// line 800
WITHOUT_CLASSIFICATION	// line 812
WITHOUT_CLASSIFICATION	// line 827
WITHOUT_CLASSIFICATION	// line 839
WITHOUT_CLASSIFICATION	// line 845
WITHOUT_CLASSIFICATION	// line 864
WITHOUT_CLASSIFICATION	// line 886
WITHOUT_CLASSIFICATION	// line 896
WITHOUT_CLASSIFICATION	// line 911
WITHOUT_CLASSIFICATION	// line 929
WITHOUT_CLASSIFICATION	// line 952
WITHOUT_CLASSIFICATION	// line 970
WITHOUT_CLASSIFICATION	// line 972
WITHOUT_CLASSIFICATION	// line 991
WITHOUT_CLASSIFICATION	// line 1011
WITHOUT_CLASSIFICATION	// line 1026
WITHOUT_CLASSIFICATION	// line 1038
WITHOUT_CLASSIFICATION	// line 1067
WITHOUT_CLASSIFICATION	// line 1085
WITHOUT_CLASSIFICATION	// line 1097
WITHOUT_CLASSIFICATION	// line 1105
WITHOUT_CLASSIFICATION	// line 1122
WITHOUT_CLASSIFICATION	// line 1133
WITHOUT_CLASSIFICATION	// line 1145
WITHOUT_CLASSIFICATION	// line 1169
WITHOUT_CLASSIFICATION	// line 1201
WITHOUT_CLASSIFICATION	// line 1210
WITHOUT_CLASSIFICATION	// line 1229
WITHOUT_CLASSIFICATION	// line 1261
WITHOUT_CLASSIFICATION	// line 1287
WITHOUT_CLASSIFICATION	// line 1293
WITHOUT_CLASSIFICATION	// line 1307
WITHOUT_CLASSIFICATION	// line 1320
WITHOUT_CLASSIFICATION	// line 1325
WITHOUT_CLASSIFICATION	// line 1363
WITHOUT_CLASSIFICATION	// line 1398
WITHOUT_CLASSIFICATION	// line 1448
WITHOUT_CLASSIFICATION	// line 1456
WITHOUT_CLASSIFICATION	// line 1473
WITHOUT_CLASSIFICATION	// line 1492
WITHOUT_CLASSIFICATION	// line 1513
WITHOUT_CLASSIFICATION	// line 1523
WITHOUT_CLASSIFICATION	// line 1562
WITHOUT_CLASSIFICATION	// line 1582
WITHOUT_CLASSIFICATION	// line 1603
WITHOUT_CLASSIFICATION	// line 1603
WITHOUT_CLASSIFICATION	// line 1615
WITHOUT_CLASSIFICATION	// line 1620
WITHOUT_CLASSIFICATION	// line 1635
WITHOUT_CLASSIFICATION	// line 1652
WITHOUT_CLASSIFICATION	// line 1681
WITHOUT_CLASSIFICATION	// line 1708
WITHOUT_CLASSIFICATION	// line 1716
WITHOUT_CLASSIFICATION	// line 1755
WITHOUT_CLASSIFICATION	// line 1772
WITHOUT_CLASSIFICATION	// line 1789
WITHOUT_CLASSIFICATION	// ACTIONS_END
WITHOUT_CLASSIFICATION	// ACTIONS_END
WITHOUT_CLASSIFICATION	/* force for args */
WITHOUT_CLASSIFICATION	/* last expression should not be void */
WITHOUT_CLASSIFICATION	/* compstmt position includes both parens around it*/
WITHOUT_CLASSIFICATION	// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// ignore, no debugger present
WITHOUT_CLASSIFICATION	// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518
WITHOUT_CLASSIFICATION	/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */
WITHOUT_CLASSIFICATION	// line 313
WITHOUT_CLASSIFICATION	// line 339
WITHOUT_CLASSIFICATION	// line 361
WITHOUT_CLASSIFICATION	// line 413
WITHOUT_CLASSIFICATION	// line 451
WITHOUT_CLASSIFICATION	// line 472
WITHOUT_CLASSIFICATION	// line 500
WITHOUT_CLASSIFICATION	// line 515
WITHOUT_CLASSIFICATION	// line 555
WITHOUT_CLASSIFICATION	// line 582
WITHOUT_CLASSIFICATION	// line 619
WITHOUT_CLASSIFICATION	// line 636
WITHOUT_CLASSIFICATION	// line 669
WITHOUT_CLASSIFICATION	// line 703
WITHOUT_CLASSIFICATION	// line 776
WITHOUT_CLASSIFICATION	// line 814
WITHOUT_CLASSIFICATION	// line 823
WITHOUT_CLASSIFICATION	// line 854
WITHOUT_CLASSIFICATION	// line 872
WITHOUT_CLASSIFICATION	// line 905
WITHOUT_CLASSIFICATION	// line 925
WITHOUT_CLASSIFICATION	// line 958
WITHOUT_CLASSIFICATION	// line 992
WITHOUT_CLASSIFICATION	// line 1047
WITHOUT_CLASSIFICATION	// line 1072
WITHOUT_CLASSIFICATION	// line 1081
WITHOUT_CLASSIFICATION	// line 1108
WITHOUT_CLASSIFICATION	// line 1136
WITHOUT_CLASSIFICATION	// line 1168
WITHOUT_CLASSIFICATION	// line 1192
WITHOUT_CLASSIFICATION	// line 1241
WITHOUT_CLASSIFICATION	// line 1267
WITHOUT_CLASSIFICATION	// line 1286
WITHOUT_CLASSIFICATION	// line 1301
WITHOUT_CLASSIFICATION	// line 1314
WITHOUT_CLASSIFICATION	// line 1333
WITHOUT_CLASSIFICATION	// line 1362
WITHOUT_CLASSIFICATION	// line 1395
WITHOUT_CLASSIFICATION	// line 1420
WITHOUT_CLASSIFICATION	// line 1439
WITHOUT_CLASSIFICATION	// line 1476
WITHOUT_CLASSIFICATION	// line 1535
WITHOUT_CLASSIFICATION	// line 1588
WITHOUT_CLASSIFICATION	// line 1618
WITHOUT_CLASSIFICATION	// line 1643
WITHOUT_CLASSIFICATION	// line 1669
WITHOUT_CLASSIFICATION	// line 1728
WITHOUT_CLASSIFICATION	// line 1753
WITHOUT_CLASSIFICATION	// line 1779
WITHOUT_CLASSIFICATION	// line 1794
WITHOUT_CLASSIFICATION	// line 1812
WITHOUT_CLASSIFICATION	// line 1837
WITHOUT_CLASSIFICATION	// line 1895
WITHOUT_CLASSIFICATION	// line 1925
WITHOUT_CLASSIFICATION	// line 1950
WITHOUT_CLASSIFICATION	// line 1992
WITHOUT_CLASSIFICATION	// line 2014
WITHOUT_CLASSIFICATION	// Whether this scope is used as the "argument scope" for e.g. zsuper
WITHOUT_CLASSIFICATION	// If we could not find the constant from cref..then try getting from inheritence hierarchy
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// This while loop is for restarting the block call in case a 'redo' fires.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// A 'next' is like a local return from the block, ending this call or yield.
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// happens with native exceptions, should not filter those out
WITHOUT_CLASSIFICATION	// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// Populate up to shorter of calling arguments or local parameters in the block
WITHOUT_CLASSIFICATION	// tc // under method // self // under method // name // args
WITHOUT_CLASSIFICATION	// allow it to bubble up
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// trim extension to try other options
WITHOUT_CLASSIFICATION	// Check for a builtin first.
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// end suffix iteration
WITHOUT_CLASSIFICATION	// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e
WITHOUT_CLASSIFICATION	/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */
WITHOUT_CLASSIFICATION	// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.
WITHOUT_CLASSIFICATION	// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar
WITHOUT_CLASSIFICATION	// double precision, native // double precision, native
WITHOUT_CLASSIFICATION	// 64-bit number, native (as bignum)
WITHOUT_CLASSIFICATION	// Next indicates to decode using native encoding format
WITHOUT_CLASSIFICATION	// calculate based on a, b, c and d
WITHOUT_CLASSIFICATION	// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are
WITHOUT_CLASSIFICATION	// MRI behavior:  for 'Q', do not add trailing nils
WITHOUT_CLASSIFICATION	//this test may be too lax but it is the same as in MRI
WITHOUT_CLASSIFICATION	// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.
WITHOUT_CLASSIFICATION	// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script
WITHOUT_CLASSIFICATION	// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.
WITHOUT_CLASSIFICATION	// first digit is always printed
WITHOUT_CLASSIFICATION	// an empirically derived rule: precision applies to // significand length, irrespective of exponent
WITHOUT_CLASSIFICATION	// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form
WITHOUT_CLASSIFICATION	// in this mode, '.' is always printed
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// now some data...
WITHOUT_CLASSIFICATION	// MRI behavior: validate only the unnumbered arguments
WITHOUT_CLASSIFICATION	// else catch oversize below
WITHOUT_CLASSIFICATION	// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal
WITHOUT_CLASSIFICATION	//switch
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	/*utf8 lead byte*/
WITHOUT_CLASSIFICATION	// could not get canonical path, just use given path
WITHOUT_CLASSIFICATION	// We always open this rw since we can only open it r or rw.
WITHOUT_CLASSIFICATION	// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only
WITHOUT_CLASSIFICATION	// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.
WITHOUT_CLASSIFICATION	// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //
WITHOUT_CLASSIFICATION	// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //
WITHOUT_CLASSIFICATION	// // Cannot discern the total read length - allocate at least enough for the buffered data //
WITHOUT_CLASSIFICATION	// // Copy what is in the buffer, if there is some buffered data //
WITHOUT_CLASSIFICATION	// append what we read into our buffer and allow the loop to continue
WITHOUT_CLASSIFICATION	// already have some bytes buffered, just return those
WITHOUT_CLASSIFICATION	// reset buffer
WITHOUT_CLASSIFICATION	// // Synchronize and re-check to avoid creating more than one Selector per provider //
WITHOUT_CLASSIFICATION	// TODO: Ruby logic is somewhat more complicated here, see comments after
WITHOUT_CLASSIFICATION	// Is there something built into JRuby to do this?
WITHOUT_CLASSIFICATION	// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);
WITHOUT_CLASSIFICATION	// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);
WITHOUT_CLASSIFICATION	// Uncomment the "puts" lines if you want to see more detail
WITHOUT_CLASSIFICATION	// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.
WITHOUT_CLASSIFICATION	// change the thread context to include the class
IMPLEMENTATION	// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )
IMPLEMENTATION	// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )
IMPLEMENTATION	//TODO: return new Lock(ts);
IMPLEMENTATION	//TODO: if lock.getTimestamp().equals(ts)
IMPLEMENTATION	//TODO mappings.getLogicalTableName(ownerTable)
IMPLEMENTATION	// TODO: handle TypeDefs
IMPLEMENTATION	//TODO check there is no actual definition elemnents when a ref is defined
IMPLEMENTATION	// TODO: bindpropertyresults(alias, returnElem)
IMPLEMENTATION	//TODO: validate existing of property with the chosen name. (secondpass )
IMPLEMENTATION	//TODO: native ids
IMPLEMENTATION	//TODO: if we are using identity columns, fetch the identifier
IMPLEMENTATION	//TODO: handle property-ref
IMPLEMENTATION	//TODO: get all properties, not just the fetched ones!
IMPLEMENTATION	//TODO: get all properties, not just the fetched ones!
IMPLEMENTATION	/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */
IMPLEMENTATION	// TODO: RESTRICT VIOLATION
IMPLEMENTATION	// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?
IMPLEMENTATION	// TODO: toLowerCase was not done before. Only used in Template.
IMPLEMENTATION	// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.
IMPLEMENTATION	//TODO: avoid this for non-new instances where mightBeDirty==false
IMPLEMENTATION	//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"
IMPLEMENTATION	// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:
IMPLEMENTATION	//TODO: assertion only, could be optimized away
IMPLEMENTATION	//TODO: check that entry.getIdentifier().equals(requestedId)
IMPLEMENTATION	//TODO: check that entry.getIdentifier().equals(requestedId)
IMPLEMENTATION	// TODO : why aren't these the same?
IMPLEMENTATION	//TODO: always true for now, but not if we later decide to support elements() in the from clause
IMPLEMENTATION	// TODO : or should we return 'containsTableAlias'??
IMPLEMENTATION	//TODO: arithmetic expressions, multiple new Foo(...)
IMPLEMENTATION	//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings
IMPLEMENTATION	//TODO: cache the persister, this shows up in yourkit
IMPLEMENTATION	//TODO: theoretically non-threadsafe...
IMPLEMENTATION	// todo : look at optimizing these...
IMPLEMENTATION	//TODO: maybe call it getRowSelection() ?
IMPLEMENTATION	//TODO: make this handle multiple collection roles!
IMPLEMENTATION	//TODO: can we limit stored procedures ?!
IMPLEMENTATION	// TODO: not visible to the user!
IMPLEMENTATION	//TODO: unnecessary for databases with ANSI-style joins
IMPLEMENTATION	//TODO: use these in methods above
IMPLEMENTATION	// TODO: better error message since we actually support composites if names are explicitly listed.
IMPLEMENTATION	// TODO: better error message since we actually support composites if names are explicitly listed.
IMPLEMENTATION	// TODO : temporary initial step towards HHH-1907
IMPLEMENTATION	// todo : remove this once ComponentMetamodel is complete and merged
IMPLEMENTATION	//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far
IMPLEMENTATION	// TODO : still need to make CollectionPersisters EntityMode-aware
IMPLEMENTATION	//TODO: add owner argument!!
IMPLEMENTATION	//TODO: formulas ?
IMPLEMENTATION	//TODO: include the rowids!!!!
IMPLEMENTATION	// todo : cache this sql...
IMPLEMENTATION	//TODO: create uk loaders for component properties
IMPLEMENTATION	//TODO: cache this in an instvar
IMPLEMENTATION	/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...
IMPLEMENTATION	//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);
IMPLEMENTATION	//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!
IMPLEMENTATION	//TODO: proxies!
IMPLEMENTATION	//TODO: terrible implementation!
IMPLEMENTATION	//TODO: proxies!
IMPLEMENTATION	// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()
IMPLEMENTATION	// TODO: check if key contains the owner ID
IMPLEMENTATION	//TODO: proxies!
IMPLEMENTATION	// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null
IMPLEMENTATION	// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null
IMPLEMENTATION	// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here
IMPLEMENTATION	//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables
WITHOUT_CLASSIFICATION	//test out the optimizer:
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	/* | this | bean | args | raw bean | */
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// astore 4 // store the raw bean
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	/* local variables | target obj | each oldvalue | */
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// putfield // new value of the field
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// just decrement the lock, don't recache // (we don't know which transaction won)
WITHOUT_CLASSIFICATION	// decode row selection...
WITHOUT_CLASSIFICATION	//disassembled state gets put in a new array (we write to cache by value!)
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// ROW ID
WITHOUT_CLASSIFICATION	// COMPOSITE-ID
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	/*				 * Property prop = new Property(); prop.setName("id");				 * prop.setPropertyAccessorName("embedded"); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */
WITHOUT_CLASSIFICATION	// DYNAMIC INSERT
WITHOUT_CLASSIFICATION	// PERSISTER
WITHOUT_CLASSIFICATION	// get meta's from <subclass>
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// generated properties can *never* be insertable...
WITHOUT_CLASSIFICATION	// TABLE
WITHOUT_CLASSIFICATION	//by default, natural-ids are "immutable" (constant)
WITHOUT_CLASSIFICATION	// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
WITHOUT_CLASSIFICATION	// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result
WITHOUT_CLASSIFICATION	/**	 * Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */
WITHOUT_CLASSIFICATION	//	private boolean showSql; //	private boolean formatSql;
WITHOUT_CLASSIFICATION	//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}
WITHOUT_CLASSIFICATION	/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */
WITHOUT_CLASSIFICATION	//			final List extendsQueue,
WITHOUT_CLASSIFICATION	// If close() is called, guarantee unbind()
WITHOUT_CLASSIFICATION	// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.
WITHOUT_CLASSIFICATION	// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	// 60 second lock timeout
WITHOUT_CLASSIFICATION	// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//			option.setDataVersion( NonLockingDataVersion.INSTANCE );
WITHOUT_CLASSIFICATION	// do the put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	//ignore!
WITHOUT_CLASSIFICATION	// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...
WITHOUT_CLASSIFICATION	//60 seconds
WITHOUT_CLASSIFICATION	//ignore!
WITHOUT_CLASSIFICATION	//60 seconds
WITHOUT_CLASSIFICATION	//do the failfast put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated
WITHOUT_CLASSIFICATION	//    protected RegionRootListener listener;
WITHOUT_CLASSIFICATION	// Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)
WITHOUT_CLASSIFICATION	// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            
WITHOUT_CLASSIFICATION	// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root
WITHOUT_CLASSIFICATION	// Don't hold a transactional lock for this 
WITHOUT_CLASSIFICATION	// Make sure the root node for the region exists and  // has a DataVersion that never complains
WITHOUT_CLASSIFICATION	// Never evict this node
WITHOUT_CLASSIFICATION	// Fix up the resident flag
WITHOUT_CLASSIFICATION	// 60 seconds
WITHOUT_CLASSIFICATION	// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	// no-op. We don't own the cache so we shouldn't stop it.
WITHOUT_CLASSIFICATION	// This should only be possible if the caches are constructor injected 
WITHOUT_CLASSIFICATION	// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted
WITHOUT_CLASSIFICATION	// Set up the cache factory
WITHOUT_CLASSIFICATION	// See if the user configured a multiplexer stack
WITHOUT_CLASSIFICATION	// Default to collections sharing entity cache if there is one
WITHOUT_CLASSIFICATION	// Default to sharing the entity cache if there is one
WITHOUT_CLASSIFICATION	// For Timestamps, we default to a separate config
WITHOUT_CLASSIFICATION	// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that
WITHOUT_CLASSIFICATION	// Configure the cache to use our TM
WITHOUT_CLASSIFICATION	// Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start
WITHOUT_CLASSIFICATION	// Make sure we don't re-release the same cache
WITHOUT_CLASSIFICATION	// We use a different delegate than the non-optimistic superclass default
WITHOUT_CLASSIFICATION	// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here
WITHOUT_CLASSIFICATION	// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation
WITHOUT_CLASSIFICATION	// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit
WITHOUT_CLASSIFICATION	// Double check the distributed cache
WITHOUT_CLASSIFICATION	// Get an exclusive right to update JBC for this key from this node.
WITHOUT_CLASSIFICATION	// We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	// Initial load from JBC
WITHOUT_CLASSIFICATION	// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase
WITHOUT_CLASSIFICATION	// We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer
WITHOUT_CLASSIFICATION	// The standard comparator types are not Serializable but are singletons
WITHOUT_CLASSIFICATION	// ignore!
WITHOUT_CLASSIFICATION	// ignore it
WITHOUT_CLASSIFICATION	// construct the cache
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	//ie. 60 seconds
WITHOUT_CLASSIFICATION	//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.
WITHOUT_CLASSIFICATION	/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS)			);*/
WITHOUT_CLASSIFICATION	// TRUE if the pool is borrowed from the outside, FALSE if we used to create it
WITHOUT_CLASSIFICATION	// get a connection from the pool (thru DriverManager, cfr. Proxool doc)
WITHOUT_CLASSIFICATION	// set the Transaction Isolation if defined
WITHOUT_CLASSIFICATION	// toggle autoCommit to false if set
WITHOUT_CLASSIFICATION	// return the connection
WITHOUT_CLASSIFICATION	// Get the configurator files (if available)
WITHOUT_CLASSIFICATION	// Default the Proxool alias setting
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Set the existing pool flag to true
WITHOUT_CLASSIFICATION	// Configured using the JAXP Configurator
WITHOUT_CLASSIFICATION	// Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	// Configured using the Properties File Configurator
WITHOUT_CLASSIFICATION	// Remember Isolation level
WITHOUT_CLASSIFICATION	// If the provider was leeching off an existing pool don't close it
WITHOUT_CLASSIFICATION	// We have created the pool ourselves, so shut it down
WITHOUT_CLASSIFICATION	// not really a many-to-one association *necessarily*
WITHOUT_CLASSIFICATION	// not really a many-to-one association *necessarily*
WITHOUT_CLASSIFICATION	//always overwrite nonversioned data
WITHOUT_CLASSIFICATION	//public Currency getCurrency(int col) throws HibernateException;
WITHOUT_CLASSIFICATION	// default is POJO
WITHOUT_CLASSIFICATION	// use setParameter for null values
WITHOUT_CLASSIFICATION	// use setParameter for null values
WITHOUT_CLASSIFICATION	//private CacheEntry cacheEntry;
WITHOUT_CLASSIFICATION	// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array
WITHOUT_CLASSIFICATION	// this entity defines proeprty generation, so process those generated // values...
WITHOUT_CLASSIFICATION	// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).
WITHOUT_CLASSIFICATION	/*!persister.isCacheInvalidationRequired()*/
WITHOUT_CLASSIFICATION	// need to look it up from the persistence-context
WITHOUT_CLASSIFICATION	//sort first by role name
WITHOUT_CLASSIFICATION	//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	//then by fk
WITHOUT_CLASSIFICATION	// nothing to do		
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)
WITHOUT_CLASSIFICATION	// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner
WITHOUT_CLASSIFICATION	//			boolean put = persister.getCache().insert(ck, cacheEntry);
WITHOUT_CLASSIFICATION	// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	//do nothing - we only need to notify the cache...
WITHOUT_CLASSIFICATION	//sort first by entity name
WITHOUT_CLASSIFICATION	//then by id
WITHOUT_CLASSIFICATION	// to be safe...
WITHOUT_CLASSIFICATION	// no transformations took place, so handle it as we would a // non-instrumented class
WITHOUT_CLASSIFICATION	// see if the entry represents a class file
WITHOUT_CLASSIFICATION	// see if the entry represents a class file
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//test out the optimizer:
WITHOUT_CLASSIFICATION	// set the name of bulk accessor.
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// invokespecial
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// aload_1 // load bean
WITHOUT_CLASSIFICATION	// checkcast // cast bean
WITHOUT_CLASSIFICATION	// astore_3 // store bean
WITHOUT_CLASSIFICATION	// aload_2 // args
WITHOUT_CLASSIFICATION	// iconst_i // continue to aastore // growing stack is 1
WITHOUT_CLASSIFICATION	// new
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// aload_3 // load the raw bean
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// aastore // args
WITHOUT_CLASSIFICATION	/* | this | bean | args | i | raw bean | exception | */
WITHOUT_CLASSIFICATION	// required to exception table // iconst_0 // i
WITHOUT_CLASSIFICATION	// istore_3 // store i
WITHOUT_CLASSIFICATION	// aload_1 // load the bean
WITHOUT_CLASSIFICATION	// checkcast // cast the bean into a raw bean
WITHOUT_CLASSIFICATION	/* current stack len = 0 */
WITHOUT_CLASSIFICATION	// start region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	// iinc 3, 1
WITHOUT_CLASSIFICATION	// aload 4 // load the raw bean
WITHOUT_CLASSIFICATION	// aload_2 // load the args
WITHOUT_CLASSIFICATION	// iconst_i
WITHOUT_CLASSIFICATION	// aaload
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// checkcast (case of primitive type) // invokevirtual (case of primitive type)
WITHOUT_CLASSIFICATION	// checkcast (case of reference type)
WITHOUT_CLASSIFICATION	/* current stack len = 2 */
WITHOUT_CLASSIFICATION	// end region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	// register in exception table
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// aload_0
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// invokevirtual
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	/* local variables | target obj | each oldvalue | */
WITHOUT_CLASSIFICATION	// astore 5 // store exception
WITHOUT_CLASSIFICATION	// new // BulkAccessorException
WITHOUT_CLASSIFICATION	// aload 5 // load exception
WITHOUT_CLASSIFICATION	// iload_3 // i
WITHOUT_CLASSIFICATION	// invokespecial // BulkAccessorException.<init>
WITHOUT_CLASSIFICATION	// athrow
WITHOUT_CLASSIFICATION	// WARNING: classfile only
WITHOUT_CLASSIFICATION	//swallow
WITHOUT_CLASSIFICATION	/* local variable | this | */
WITHOUT_CLASSIFICATION	// aload_0 // load this
WITHOUT_CLASSIFICATION	// aload_0 // load this
WITHOUT_CLASSIFICATION	// getfield // get field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	// areturn // return the value of the field
WITHOUT_CLASSIFICATION	/* local variables | this | callback | */
WITHOUT_CLASSIFICATION	// aload_1 // load callback
WITHOUT_CLASSIFICATION	// putfield // put field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	// case of non-static field
WITHOUT_CLASSIFICATION	// getfield // get each field
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// ifnonnull
WITHOUT_CLASSIFICATION	// *return // each type
WITHOUT_CLASSIFICATION	// *return // each type
WITHOUT_CLASSIFICATION	// *store_1 // each type
WITHOUT_CLASSIFICATION	// ldc // name of the field
WITHOUT_CLASSIFICATION	// *load_1 // each type
WITHOUT_CLASSIFICATION	// invokeinterface // invoke Callback.read*() // each type
WITHOUT_CLASSIFICATION	// int
WITHOUT_CLASSIFICATION	// return
WITHOUT_CLASSIFICATION	// dup
WITHOUT_CLASSIFICATION	// invokeinterface
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// checkcast
WITHOUT_CLASSIFICATION	// invokeinterface // enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// invokeinterface // enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	// ifnonnull (label1)
WITHOUT_CLASSIFICATION	// *load_1
WITHOUT_CLASSIFICATION	// *load_1
WITHOUT_CLASSIFICATION	// putfield
WITHOUT_CLASSIFICATION	// return ;
WITHOUT_CLASSIFICATION	// ldc // field name
WITHOUT_CLASSIFICATION	// getfield // old value of the field
WITHOUT_CLASSIFICATION	// invokeinterface // callback.write*(..)
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// not array
WITHOUT_CLASSIFICATION	// array of reference type
WITHOUT_CLASSIFICATION	// boolean
WITHOUT_CLASSIFICATION	// byte
WITHOUT_CLASSIFICATION	// char
WITHOUT_CLASSIFICATION	// short
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// reference type
WITHOUT_CLASSIFICATION	// double
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// float
WITHOUT_CLASSIFICATION	// long
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// bad type
WITHOUT_CLASSIFICATION	// boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	// skip finalize methods
WITHOUT_CLASSIFICATION	//Mainly for OSCache
WITHOUT_CLASSIFICATION	//decrement the lock
WITHOUT_CLASSIFICATION	// create new lock that times out immediately
WITHOUT_CLASSIFICATION	//recache the updated state
WITHOUT_CLASSIFICATION	// noop
WITHOUT_CLASSIFICATION	//null clientLock is remotely possible but will never happen in practice
WITHOUT_CLASSIFICATION	// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp
WITHOUT_CLASSIFICATION	//by requiring <, we rely on lock timeout in the case of an unsuccessful update!
WITHOUT_CLASSIFICATION	// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.
WITHOUT_CLASSIFICATION	// disassemble positional parameters
WITHOUT_CLASSIFICATION	// disassemble named parameters
WITHOUT_CLASSIFICATION	//ie. 60 seconds
WITHOUT_CLASSIFICATION	// noop
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	// this is called from SettingsFactory irregardless; trivial to simply disregard
WITHOUT_CLASSIFICATION	// Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	// Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	//throw new UnsupportedOperationException("Can't write to a readonly object");
WITHOUT_CLASSIFICATION	//assembled state gets put in a new array (we read from cache by value!)
WITHOUT_CLASSIFICATION	//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load
WITHOUT_CLASSIFICATION	// no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	// no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	// classes mentioned in extends not available - so put it in queue
WITHOUT_CLASSIFICATION	// get meta's from <hibernate-mapping>
WITHOUT_CLASSIFICATION	// get meta's from <class>
WITHOUT_CLASSIFICATION	// DB-OBJECTNAME
WITHOUT_CLASSIFICATION	// MUTABLE
WITHOUT_CLASSIFICATION	// WHERE
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// POLYMORPHISM
WITHOUT_CLASSIFICATION	// TODO:
WITHOUT_CLASSIFICATION	// ID
WITHOUT_CLASSIFICATION	// VERSION / TIMESTAMP
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// Primary key constraint
WITHOUT_CLASSIFICATION	// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag
WITHOUT_CLASSIFICATION	// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// ( (Column) discrim.getColumnIterator().next() ).setType(type);
WITHOUT_CLASSIFICATION	// go ahead and set the lazy here, since pojo.proxy can override it.
WITHOUT_CLASSIFICATION	// DYNAMIC UPDATE
WITHOUT_CLASSIFICATION	// IMPORT
WITHOUT_CLASSIFICATION	// BATCH SIZE
WITHOUT_CLASSIFICATION	// SELECT BEFORE UPDATE
WITHOUT_CLASSIFICATION	// OPTIMISTIC LOCK MODE
WITHOUT_CLASSIFICATION	// PERSISTER
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// get meta's from <subclass>
WITHOUT_CLASSIFICATION	// properties
WITHOUT_CLASSIFICATION	// joined subclasses
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	// CHECK
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// properties
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	// model.getKey().setType( new Type( model.getIdentifier() ) );
WITHOUT_CLASSIFICATION	// TABLENAME
WITHOUT_CLASSIFICATION	// join.getKey().setType( new Type( lazz.getIdentifier() ) );
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// COLUMN(S)
WITHOUT_CLASSIFICATION	// column index
WITHOUT_CLASSIFICATION	//column unique-key
WITHOUT_CLASSIFICATION	// automatically makes a column with the default name if none is specifed by XML
WITHOUT_CLASSIFICATION	// for an any
WITHOUT_CLASSIFICATION	// insertable simply because that is the user did not specify // anything; just override it
WITHOUT_CLASSIFICATION	// the user specifically supplied insert="true", // which constitutes an illegal combo
WITHOUT_CLASSIFICATION	// properties generated on update can never be updateable...
WITHOUT_CLASSIFICATION	// updateable only because the user did not specify  // anything; just override it
WITHOUT_CLASSIFICATION	// the user specifically supplied update="true", // which constitutes an illegal combo
WITHOUT_CLASSIFICATION	// ROLENAME
WITHOUT_CLASSIFICATION	// FETCH STRATEGY
WITHOUT_CLASSIFICATION	// TABLE
WITHOUT_CLASSIFICATION	//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );
WITHOUT_CLASSIFICATION	// SORT
WITHOUT_CLASSIFICATION	// CUSTOM SQL
WITHOUT_CLASSIFICATION	// unsorted, natural, comparator.class.name
WITHOUT_CLASSIFICATION	// ORPHAN DELETE (used for programmer error detection)
WITHOUT_CLASSIFICATION	// set up second pass
WITHOUT_CLASSIFICATION	// an "embedded" component (composite ids and unique) // note that this does not handle nested components
WITHOUT_CLASSIFICATION	// a nested composite element
WITHOUT_CLASSIFICATION	// for an any // we will have to use reflection
WITHOUT_CLASSIFICATION	//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy
WITHOUT_CLASSIFICATION	// use old (HB 2.1) defaults if outer-join is specified
WITHOUT_CLASSIFICATION	//lazy = !join;
WITHOUT_CLASSIFICATION	// GENERATOR
WITHOUT_CLASSIFICATION	// ID UNSAVED-VALUE
WITHOUT_CLASSIFICATION	// VERSION UNSAVED-VALUE
WITHOUT_CLASSIFICATION	// not necessarily a *unique* property reference
WITHOUT_CLASSIFICATION	// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
WITHOUT_CLASSIFICATION	// contained elements:
WITHOUT_CLASSIFICATION	// for non-inverse one-to-many, with a not-null fk, add a backref!
WITHOUT_CLASSIFICATION	// Bind the where
WITHOUT_CLASSIFICATION	// Bind the order-by
WITHOUT_CLASSIFICATION	// Bind the filters
WITHOUT_CLASSIFICATION	// overriding inherited meta attribute. HBX-621 & HBX-793			
WITHOUT_CLASSIFICATION	// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.
WITHOUT_CLASSIFICATION	// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).
WITHOUT_CLASSIFICATION	//+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	//SessionFactory name:
WITHOUT_CLASSIFICATION	//JDBC and connection settings:
WITHOUT_CLASSIFICATION	//JDBC and connection settings:
WITHOUT_CLASSIFICATION	//Interrogate JDBC metadata
WITHOUT_CLASSIFICATION	// user supplied JDBC connections
WITHOUT_CLASSIFICATION	//use dialect default properties
WITHOUT_CLASSIFICATION	// Transaction settings:
WITHOUT_CLASSIFICATION	//SQL Generation settings:
WITHOUT_CLASSIFICATION	//Query parser settings:
WITHOUT_CLASSIFICATION	// Second-level / query cache:
WITHOUT_CLASSIFICATION	// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default
WITHOUT_CLASSIFICATION	//SQL Exception converter:
WITHOUT_CLASSIFICATION	//Statistics and logging:
WITHOUT_CLASSIFICATION	//		settings.setShowSqlEnabled(showSql);
WITHOUT_CLASSIFICATION	//		settings.setFormatSqlEnabled(formatSql);
WITHOUT_CLASSIFICATION	//Schema export:
WITHOUT_CLASSIFICATION	//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( "Bytecode provider name : " + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );
WITHOUT_CLASSIFICATION	// legacy behavior, apply the bridge...
WITHOUT_CLASSIFICATION	// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment
WITHOUT_CLASSIFICATION	//if dotted and not load-collection nor return-join //regular property
WITHOUT_CLASSIFICATION	//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;
WITHOUT_CLASSIFICATION	// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}
WITHOUT_CLASSIFICATION	//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}
WITHOUT_CLASSIFICATION	// using local since the inheritedMetas at this point is not the correct map since it is always the empty map
WITHOUT_CLASSIFICATION	//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907
WITHOUT_CLASSIFICATION	//	protected List extendsQueue;
WITHOUT_CLASSIFICATION	//		extendsQueue = new ArrayList();
WITHOUT_CLASSIFICATION	//		componentTuplizerFactory = new ComponentTuplizerFactory();
WITHOUT_CLASSIFICATION	// if doc is null, then for whatever reason, the cached file cannot be used...
WITHOUT_CLASSIFICATION	// drop them in reverse order in case db needs it done that way...
WITHOUT_CLASSIFICATION	//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	// This method may be called many times!!
WITHOUT_CLASSIFICATION	//			Iterator iterator = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	//		Iterator iter = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	// found
WITHOUT_CLASSIFICATION	// found
WITHOUT_CLASSIFICATION	//		settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );
WITHOUT_CLASSIFICATION	//	private final List extendsQueue;
WITHOUT_CLASSIFICATION	//<String, String>
WITHOUT_CLASSIFICATION	//<String, String>
WITHOUT_CLASSIFICATION	//+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
WITHOUT_CLASSIFICATION	//orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//maintain correct duplication if loaded in a cartesian product
WITHOUT_CLASSIFICATION	// the element has been removed from the set
WITHOUT_CLASSIFICATION	// the element has changed
WITHOUT_CLASSIFICATION	//Careful: these methods do not initialize the collection.
WITHOUT_CLASSIFICATION	//needed so that we remove this collection from the second-level cache
WITHOUT_CLASSIFICATION	// override on some subclasses
WITHOUT_CLASSIFICATION	//override on some subclasses
WITHOUT_CLASSIFICATION	//do this bit after setting initialized to true or it will recurse
WITHOUT_CLASSIFICATION	// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither
WITHOUT_CLASSIFICATION	// create the collection holding the Orphans
WITHOUT_CLASSIFICATION	// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access
WITHOUT_CLASSIFICATION	// iterate over the *old* list
WITHOUT_CLASSIFICATION	/*(array==null) ? tempList.size() :*/
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	/*(array==null) ? tempList.get(i) :*/
WITHOUT_CLASSIFICATION	//write(); -- doesn't
WITHOUT_CLASSIFICATION	//write(); -- doesn't
WITHOUT_CLASSIFICATION	// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	// finally, what it's all about...
WITHOUT_CLASSIFICATION	// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead
WITHOUT_CLASSIFICATION	// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!
WITHOUT_CLASSIFICATION	//a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	//search for it //note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	//search for it //note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/
WITHOUT_CLASSIFICATION	// List OPERATIONS:
WITHOUT_CLASSIFICATION	//pad with nulls from the current last element up to the new index
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	//needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	// from Map
WITHOUT_CLASSIFICATION	// from SortedMap
WITHOUT_CLASSIFICATION	//inject the data
WITHOUT_CLASSIFICATION	// cannot be instantiated
WITHOUT_CLASSIFICATION	//default pool size 20
WITHOUT_CLASSIFICATION	// trying via forName() first to be as close to DriverManager's semantics
WITHOUT_CLASSIFICATION	// if debug level is enabled, then log the password, otherwise mask it
WITHOUT_CLASSIFICATION	// register a cleanup synch
WITHOUT_CLASSIFICATION	// wrap the session in the transaction-protection proxy
WITHOUT_CLASSIFICATION	// then bind it
WITHOUT_CLASSIFICATION	// try to make sure we don't wrap and already wrapped session
WITHOUT_CLASSIFICATION	// allow these to go through the the real session no matter what
WITHOUT_CLASSIFICATION	// limit the methods available if no transaction is active
WITHOUT_CLASSIFICATION	// allow these (deprecated) methods to pass through
WITHOUT_CLASSIFICATION	// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	//private String propertyName;
WITHOUT_CLASSIFICATION	/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/
WITHOUT_CLASSIFICATION	//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );
WITHOUT_CLASSIFICATION	//" collection_ where " +
WITHOUT_CLASSIFICATION	//unsupported
WITHOUT_CLASSIFICATION	//unsupported
WITHOUT_CLASSIFICATION	//cannot be instantiated
WITHOUT_CLASSIFICATION	//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries
WITHOUT_CLASSIFICATION	//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set
WITHOUT_CLASSIFICATION	//implicit polymorphism not supported (would need a union)
WITHOUT_CLASSIFICATION	//pull off the last ", "
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	// we have the form: trim(trimSource) //      so we trim leading and trailing spaces
WITHOUT_CLASSIFICATION	// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)
WITHOUT_CLASSIFICATION	// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method
WITHOUT_CLASSIFICATION	// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Oracle did add support for ANSI CASE statements in 9i
WITHOUT_CLASSIFICATION	// the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	// Informix doesn't have a bit type
WITHOUT_CLASSIFICATION	// or BYTE // or TEXT? // or MONEY
WITHOUT_CLASSIFICATION	// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"
WITHOUT_CLASSIFICATION	// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//pre H3.2 behavior: super.getReturnType(ct, m);
WITHOUT_CLASSIFICATION	// finally use the sqltype if == on Hibernate types did not find a match.
WITHOUT_CLASSIFICATION	//because numeric can be anything
WITHOUT_CLASSIFICATION	// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// standard sql92 functions (can be overridden by subclasses)
WITHOUT_CLASSIFICATION	//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses
WITHOUT_CLASSIFICATION	// register hibernate types for default use in scalar sqlquery type auto detection
WITHOUT_CLASSIFICATION	// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// by default we report no support
WITHOUT_CLASSIFICATION	// by default we report no support for NOWAIT lock semantics
WITHOUT_CLASSIFICATION	// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// grrr... for differentiation of mysql storage engines
WITHOUT_CLASSIFICATION	// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// return false here, as most databases do not properly support this construct...
WITHOUT_CLASSIFICATION	// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	//" cascade";
WITHOUT_CLASSIFICATION	//trim off the length/precision/scale
WITHOUT_CLASSIFICATION	/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/
WITHOUT_CLASSIFICATION	// CHECK VIOLATION
WITHOUT_CLASSIFICATION	// UNIQUE VIOLATION
WITHOUT_CLASSIFICATION	// FOREIGN KEY VIOLATION
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// NOT NULL VIOLATION
WITHOUT_CLASSIFICATION	// ALL OTHER
WITHOUT_CLASSIFICATION	// Register the type of the out param - PostgreSQL uses Types.OTHER
WITHOUT_CLASSIFICATION	// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}
WITHOUT_CLASSIFICATION	// seems to have spotty LOB suppport
WITHOUT_CLASSIFICATION	// HHH-2300
WITHOUT_CLASSIFICATION	// ignore (probably H2 not in the classpath)
WITHOUT_CLASSIFICATION	// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// not null is implicit
WITHOUT_CLASSIFICATION	// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}
WITHOUT_CLASSIFICATION	// Display the dialect version.
WITHOUT_CLASSIFICATION	// The RDMS concat() function only supports 2 parameters
WITHOUT_CLASSIFICATION	// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Original Dialect.java returns " for update";
WITHOUT_CLASSIFICATION	// Verify the state of this new method in Hibernate 3.0 Dialect.java
WITHOUT_CLASSIFICATION	// Origial Dialect.java returns true;
WITHOUT_CLASSIFICATION	// The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	// *** Sequence methods - start. The RDMS dialect needs these
WITHOUT_CLASSIFICATION	// methods to make it possible to use the Native Id generator
WITHOUT_CLASSIFICATION	// The where clause was added to eliminate this statement from Brute Force Searches.
WITHOUT_CLASSIFICATION	// *** Sequence methods - end
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
WITHOUT_CLASSIFICATION	// Used with DROP TABLE to delete all records in the table.
WITHOUT_CLASSIFICATION	// RDMS supports the UNION ALL clause.
WITHOUT_CLASSIFICATION	// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// Multi-param dialect functions...
WITHOUT_CLASSIFICATION	// function templates
WITHOUT_CLASSIFICATION	//not null is implicit
WITHOUT_CLASSIFICATION	// this assumes schema support, which is present in 1.8.0 and later...
WITHOUT_CLASSIFICATION	// HSQLDB only supports READ_UNCOMMITTED transaction isolation
WITHOUT_CLASSIFICATION	// Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	// simple nullability constraint
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	//	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.
WITHOUT_CLASSIFICATION	// new methods in dialect3
WITHOUT_CLASSIFICATION	/*public boolean supportsForUpdateNowait() {		return false;	}*/
WITHOUT_CLASSIFICATION	// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	// iterate entries ordered by capacity to find first fit
WITHOUT_CLASSIFICATION	// add new ordered map
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//		 This assumes you will want to ignore any update counts 
WITHOUT_CLASSIFICATION	// sql server just returns automatically
WITHOUT_CLASSIFICATION	//		return "select CURRENT_TIMESTAMP from RDB$DATABASE";
WITHOUT_CLASSIFICATION	//registerColumnType data types
WITHOUT_CLASSIFICATION	// hibernate seems to ignore this type...
WITHOUT_CLASSIFICATION	// IBID for current_time and current_date
WITHOUT_CLASSIFICATION	// Tell hibernate to use getBytes instead of getBinaryStream
WITHOUT_CLASSIFICATION	// No batch statements
WITHOUT_CLASSIFICATION	/*		 * We might want a special case for 19,2. This is very common for money types		 * and here it is converted to 18,1		 */
WITHOUT_CLASSIFICATION	//no pointbase BIT
WITHOUT_CLASSIFICATION	//no pointbase TINYINT
WITHOUT_CLASSIFICATION	// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)
WITHOUT_CLASSIFICATION	// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table
WITHOUT_CLASSIFICATION	// here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.BLOB, 16777215, "mediumblob" ); //		registerColumnType( Types.BLOB, 65535, "blob" );
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.CLOB, 16777215, "mediumtext" ); //		registerColumnType( Types.CLOB, 65535, "text" );
WITHOUT_CLASSIFICATION	//		registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); //		registerColumnType( Types.VARCHAR, 65535, "text" );
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// sql server just returns automatically
WITHOUT_CLASSIFICATION	//Sybase BIT type does not support null values
WITHOUT_CLASSIFICATION	//		 This assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed
WITHOUT_CLASSIFICATION	//not null ... (start with 1) is implicit
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
WITHOUT_CLASSIFICATION	// Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	// Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	// add another (inner) nested select // add the main query // close off the inner nested select
WITHOUT_CLASSIFICATION	// add the main query
WITHOUT_CLASSIFICATION	//add the restriction to the outer select
WITHOUT_CLASSIFICATION	// This assumes you will want to ignore any update counts 
WITHOUT_CLASSIFICATION	// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//starts with 1, implicitly
WITHOUT_CLASSIFICATION	// simple nullability constraint
WITHOUT_CLASSIFICATION	// not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	//	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// binary %Stream // character %Stream
WITHOUT_CLASSIFICATION	//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);
WITHOUT_CLASSIFICATION	// hibernate impelemnts cast in Dialect.java
WITHOUT_CLASSIFICATION	// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list
WITHOUT_CLASSIFICATION	// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// below is for Cache' that don't have str in 2007.1 there is str and we register str directly
WITHOUT_CLASSIFICATION	// note that %string is deprecated
WITHOUT_CLASSIFICATION	// %upper is deprecated
WITHOUT_CLASSIFICATION	// The syntax used to add a foreign key constraint to a table.
WITHOUT_CLASSIFICATION	// identifier-commalist
WITHOUT_CLASSIFICATION	// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// identifier-commalist
WITHOUT_CLASSIFICATION	// The syntax used to add a column to a table
WITHOUT_CLASSIFICATION	// Completely optional cascading drop clause.
WITHOUT_CLASSIFICATION	// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	/*<String>*/
WITHOUT_CLASSIFICATION	// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?
WITHOUT_CLASSIFICATION	// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?
WITHOUT_CLASSIFICATION	// The name of the SQL function that transforms a string to lowercase
WITHOUT_CLASSIFICATION	// Create an OuterJoinGenerator for this dialect.
WITHOUT_CLASSIFICATION	// The keyword used to insert a row without specifying // any column values
WITHOUT_CLASSIFICATION	//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );
WITHOUT_CLASSIFICATION	//skip the FROM keyword in params
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
WITHOUT_CLASSIFICATION	// SQLFunction implementation
WITHOUT_CLASSIFICATION	// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap
WITHOUT_CLASSIFICATION	// register the standard dialect resolver
WITHOUT_CLASSIFICATION	// register resolvers set via Environment property
WITHOUT_CLASSIFICATION	// kept for backward compatibility until after the 3.1beta5 release of HA
WITHOUT_CLASSIFICATION	//cache the hashcode
WITHOUT_CLASSIFICATION	// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// delete does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// orphans should be deleted during delete
WITHOUT_CLASSIFICATION	/*(LockMode) anything*/
WITHOUT_CLASSIFICATION	// lock doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// refresh doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// evicts don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// orphans should be deleted during save/update
WITHOUT_CLASSIFICATION	// for deprecated saveOrUpdateCopy()
WITHOUT_CLASSIFICATION	// persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	//a proxy cannot be transient and it breaks ForeignKeys.isTransient
WITHOUT_CLASSIFICATION	// replicate does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// handles arrays and newly instantiated collections
WITHOUT_CLASSIFICATION	// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.
WITHOUT_CLASSIFICATION	// Add these directly to the executions queue
WITHOUT_CLASSIFICATION	// continue loop
WITHOUT_CLASSIFICATION	//sort the updates by fk
WITHOUT_CLASSIFICATION	//sort the updates by pk
WITHOUT_CLASSIFICATION	// the mapping of entity names to their latest batch numbers.
WITHOUT_CLASSIFICATION	// the map of batch numbers to EntityInsertAction lists
WITHOUT_CLASSIFICATION	//optimize the hash size to eliminate a rehash.
WITHOUT_CLASSIFICATION	// the list of entity names that indicate the batch number
WITHOUT_CLASSIFICATION	// remove the current element from insertions. It will be added back later.
WITHOUT_CLASSIFICATION	// the entity associated with the current action.
WITHOUT_CLASSIFICATION	// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.
WITHOUT_CLASSIFICATION	// now rebuild the insertions list. There is a batch for each entry in the name list.
WITHOUT_CLASSIFICATION	// the current batch number is the latest batch for this entity type.
WITHOUT_CLASSIFICATION	// loop through all the associations of the current entity and make sure that they are processed // before the current batch number
WITHOUT_CLASSIFICATION	// find the batch number associated with the current association, if any.
WITHOUT_CLASSIFICATION	// create a new batch for this type. The batch number is the number of current batches.
WITHOUT_CLASSIFICATION	// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.
WITHOUT_CLASSIFICATION	// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.
WITHOUT_CLASSIFICATION	//cascade to current collection elements
WITHOUT_CLASSIFICATION	//not really necessary, but good for consistency...
WITHOUT_CLASSIFICATION	// we can't cascade to non-embedded elements
WITHOUT_CLASSIFICATION	//a newly instantiated collection can't have orphans
WITHOUT_CLASSIFICATION	// handle orphaned entities!!
WITHOUT_CLASSIFICATION	// Loaded entity instances, by EntityUniqueKey
WITHOUT_CLASSIFICATION	// Identity map of EntityEntry instances, by the entity instance
WITHOUT_CLASSIFICATION	// Entity proxies, by EntityKey
WITHOUT_CLASSIFICATION	// Snapshots of current database state for entities // that have *not* been loaded
WITHOUT_CLASSIFICATION	// Identity map of array holder ArrayHolder instances, by the array instance
WITHOUT_CLASSIFICATION	// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection
WITHOUT_CLASSIFICATION	// Set of EntityKeys of deleted objects
WITHOUT_CLASSIFICATION	// properties that we have tried to load, and not found in the database
WITHOUT_CLASSIFICATION	// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query
WITHOUT_CLASSIFICATION	// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!
WITHOUT_CLASSIFICATION	// Downgrade locks
WITHOUT_CLASSIFICATION	// any earlier proxy takes precedence
WITHOUT_CLASSIFICATION	//unwrap the object
WITHOUT_CLASSIFICATION	//initialize + unwrap the object
WITHOUT_CLASSIFICATION	//return the proxied object
WITHOUT_CLASSIFICATION	//overwrite old proxy
WITHOUT_CLASSIFICATION	// early exit...
WITHOUT_CLASSIFICATION	// or should it actually throw an exception?
WITHOUT_CLASSIFICATION	//treat it just like a new collection
WITHOUT_CLASSIFICATION	//do this work only at the very highest level of the load //don't let this method be called recursively
WITHOUT_CLASSIFICATION	//note that each iteration of the loop may add new elements
WITHOUT_CLASSIFICATION	//it might be an unwrapped collection reference! //try to find a wrapper (slowish)
WITHOUT_CLASSIFICATION	/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/
WITHOUT_CLASSIFICATION	/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/
WITHOUT_CLASSIFICATION	// iterate all the entities currently associated with the persistence context.
WITHOUT_CLASSIFICATION	// does this entity entry pertain to the entity persister in which we are interested (owner)?
WITHOUT_CLASSIFICATION	//check if the managed object is the parent
WITHOUT_CLASSIFICATION	// otherwise, the proxy was pruned during the serialization process
WITHOUT_CLASSIFICATION	// adds remove as a sort-of alias for delete...
WITHOUT_CLASSIFICATION	//bad cast
WITHOUT_CLASSIFICATION	//return lhsPersister.getSubclassPropertyColumnNames(property);
WITHOUT_CLASSIFICATION	//property-refs for associations defined on a //component are not supported, so no need to slice
WITHOUT_CLASSIFICATION	//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)
WITHOUT_CLASSIFICATION	//handle a property-ref
WITHOUT_CLASSIFICATION	/*NativeSQLQueryReturn*/
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	// why is all others non final ?
WITHOUT_CLASSIFICATION	//this.forceCacheRefresh = forceCacheRefresh;
WITHOUT_CLASSIFICATION	// HELLA IMPORTANT OPTIMIZATION!!!
WITHOUT_CLASSIFICATION	/*return that.type.equals(type) && 			EqualsHelper.equals(that.value, value);*/
WITHOUT_CLASSIFICATION	//Must occur after resolving identifiers!
WITHOUT_CLASSIFICATION	//take a snapshot
WITHOUT_CLASSIFICATION	// do a check
WITHOUT_CLASSIFICATION	// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context
WITHOUT_CLASSIFICATION	// do the work
WITHOUT_CLASSIFICATION	// We've been here before
WITHOUT_CLASSIFICATION	// it is or was referenced _somewhere_
WITHOUT_CLASSIFICATION	// do the work
WITHOUT_CLASSIFICATION	// if either its role changed,
WITHOUT_CLASSIFICATION	// or its key changed
WITHOUT_CLASSIFICATION	// we will need to create new entries
WITHOUT_CLASSIFICATION	// we will need to remove ye olde entries
WITHOUT_CLASSIFICATION	// force initialize!
WITHOUT_CLASSIFICATION	// else if it's elements changed
WITHOUT_CLASSIFICATION	//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
WITHOUT_CLASSIFICATION	// session-start/post-flush persistent state
WITHOUT_CLASSIFICATION	// allow the CollectionSnapshot to be serialized
WITHOUT_CLASSIFICATION	// ATTRIBUTES USED ONLY DURING FLUSH CYCLE
WITHOUT_CLASSIFICATION	// "current" means the reference that was found during flush() 
WITHOUT_CLASSIFICATION	// "loaded" means the reference that is consistent  // with the current database state
WITHOUT_CLASSIFICATION	// during flush, we navigate the object graph to // collections and decide what to do with them
WITHOUT_CLASSIFICATION	// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()
WITHOUT_CLASSIFICATION	// new collections that get found + wrapped // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
WITHOUT_CLASSIFICATION	//collection.clearDirty()
WITHOUT_CLASSIFICATION	//collection.clearDirty()
WITHOUT_CLASSIFICATION	// detached collections that get found + reattached // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	//optimization
WITHOUT_CLASSIFICATION	//optimization //optimization
WITHOUT_CLASSIFICATION	//re-snapshot
WITHOUT_CLASSIFICATION	// for convenience to save some lookups
WITHOUT_CLASSIFICATION	//NOTE: this is not updated when properties are fetched lazily!
WITHOUT_CLASSIFICATION	//memory optimization
WITHOUT_CLASSIFICATION	// use the id value of a newly instantiated instance as the unsaved-value
WITHOUT_CLASSIFICATION	// copied from Session:
WITHOUT_CLASSIFICATION	// this should not happen since the DTD prevents it
WITHOUT_CLASSIFICATION	// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.
WITHOUT_CLASSIFICATION	// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many
WITHOUT_CLASSIFICATION	//check basic level one nullablilty
WITHOUT_CLASSIFICATION	//values is not null and is checkable, we'll look deeper
WITHOUT_CLASSIFICATION	//for non null args, check for components and elements containing components
WITHOUT_CLASSIFICATION	//cache the hashcode
WITHOUT_CLASSIFICATION	//persistent collections may have components
WITHOUT_CLASSIFICATION	//check for all components values in the collection
WITHOUT_CLASSIFICATION	/* will check current level if some of them are not null		 * or sublevels if they exist		 */
WITHOUT_CLASSIFICATION	//do the test
WITHOUT_CLASSIFICATION	// if its an uninitialized proxy it can't be transient
WITHOUT_CLASSIFICATION	//unwrap it
WITHOUT_CLASSIFICATION	// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)
WITHOUT_CLASSIFICATION	// an unfetched association can only point to // an entity that already exists in the db
WITHOUT_CLASSIFICATION	// let the interceptor inspect the instance to decide
WITHOUT_CLASSIFICATION	// let the persister inspect the instance to decide
WITHOUT_CLASSIFICATION	// we use the assumed value, if there is one, to avoid hitting // the database
WITHOUT_CLASSIFICATION	// hit the database, after checking the session cache for a snapshot
WITHOUT_CLASSIFICATION	// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...
WITHOUT_CLASSIFICATION	//int count = 0;
WITHOUT_CLASSIFICATION	//the first key found after the given key
WITHOUT_CLASSIFICATION	//checkForEnd = false;
WITHOUT_CLASSIFICATION	//count++;
WITHOUT_CLASSIFICATION	//end of array, start filling again from start
WITHOUT_CLASSIFICATION	//we ran out of keys to try
WITHOUT_CLASSIFICATION	//first element of array is reserved for the actual instance we are loading!
WITHOUT_CLASSIFICATION	//the first id found after the given id
WITHOUT_CLASSIFICATION	//we ran out of ids to try
WITHOUT_CLASSIFICATION	// look for existing collection as part of the persistence context
WITHOUT_CLASSIFICATION	// ignore this row of results! Note the early exit
WITHOUT_CLASSIFICATION	// initialize this collection
WITHOUT_CLASSIFICATION	// create one
WITHOUT_CLASSIFICATION	// warning: can cause a recursive calls! (proxy initialization)
WITHOUT_CLASSIFICATION	// there were no queued additions // and the role has a cache
WITHOUT_CLASSIFICATION	// and this is not a forced initialization during flush
WITHOUT_CLASSIFICATION	// some filters affecting the collection are enabled on the session, so do not do the put into the cache.
WITHOUT_CLASSIFICATION	// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...
WITHOUT_CLASSIFICATION	// the cache of the actual plans...
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful
WITHOUT_CLASSIFICATION	// don't care...
WITHOUT_CLASSIFICATION	// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// don't care...
WITHOUT_CLASSIFICATION	// NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	// break the outer loop !!!
WITHOUT_CLASSIFICATION	// named parameter
WITHOUT_CLASSIFICATION	// could be either an ordinal or JPA-positional parameter
WITHOUT_CLASSIFICATION	// a peek ahead showed this as an JPA-positional parameter
WITHOUT_CLASSIFICATION	// make sure this "name" is an integral
WITHOUT_CLASSIFICATION	// pre-determine and cache the hashcode
WITHOUT_CLASSIFICATION	// perform the actual work
WITHOUT_CLASSIFICATION	// if everything went ok, commit the transaction and close the obtained // connection handle...
WITHOUT_CLASSIFICATION	// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible
WITHOUT_CLASSIFICATION	// finally handle the exception
WITHOUT_CLASSIFICATION	// a "detached" collection that belonged to a different entity
WITHOUT_CLASSIFICATION	//saveOrUpdateCopy() is deprecated!
WITHOUT_CLASSIFICATION	// collectionPersister should not be null, but we don't want to throw // an exception if it is null
WITHOUT_CLASSIFICATION	// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);
WITHOUT_CLASSIFICATION	// a "detached" collection that originally belonged to the same entity
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	//Force a substitution!
WITHOUT_CLASSIFICATION	// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock
WITHOUT_CLASSIFICATION	// the database now holds a lock + the object is flushed from the cache, // so release the soft lock
WITHOUT_CLASSIFICATION	// now update the object .. has to be outside the main if block above (because of collections)
WITHOUT_CLASSIFICATION	// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object
WITHOUT_CLASSIFICATION	// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed
WITHOUT_CLASSIFICATION	// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections
WITHOUT_CLASSIFICATION	//grab its state saved at deletion
WITHOUT_CLASSIFICATION	// grab its current state
WITHOUT_CLASSIFICATION	// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!
WITHOUT_CLASSIFICATION	// substitutes into values by side-effect
WITHOUT_CLASSIFICATION	// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object
WITHOUT_CLASSIFICATION	// compare to cached state (ignoring collections unless versioned)
WITHOUT_CLASSIFICATION	// if it was dirtied by a collection only
WITHOUT_CLASSIFICATION	// increment the version number (if necessary)
WITHOUT_CLASSIFICATION	// check nullability but do not perform command execute // we'll use scheduled updates for that.
WITHOUT_CLASSIFICATION	//give the Interceptor a chance to modify property values
WITHOUT_CLASSIFICATION	//now we might need to recalculate the dirtyProperties array
WITHOUT_CLASSIFICATION	//use the current version
WITHOUT_CLASSIFICATION	// Interceptor returned null, so do the dirtycheck ourself, if possible
WITHOUT_CLASSIFICATION	// object loaded by update()
WITHOUT_CLASSIFICATION	// dirty check against the usual snapshot of the entity
WITHOUT_CLASSIFICATION	// dirty check against the database snapshot, if possible/necessary
WITHOUT_CLASSIFICATION	// the Interceptor handled the dirty checking
WITHOUT_CLASSIFICATION	//even process null collections
WITHOUT_CLASSIFICATION	// get the id from the object
WITHOUT_CLASSIFICATION	//always do an INSERT, and let it fail by constraint violation
WITHOUT_CLASSIFICATION	//what is the version on the database?
WITHOUT_CLASSIFICATION	/// HHH-2378
WITHOUT_CLASSIFICATION	//will result in a SQL UPDATE:
WITHOUT_CLASSIFICATION	//else do nothing (don't even reassociate object!)
WITHOUT_CLASSIFICATION	// no existing row - do an insert
WITHOUT_CLASSIFICATION	//refresh() does not pass an entityName
WITHOUT_CLASSIFICATION	//do not return a proxy! //(this option indicates we are initializing a proxy)
WITHOUT_CLASSIFICATION	//return a proxy if appropriate
WITHOUT_CLASSIFICATION	// return existing object or initialized proxy (unless deleted)
WITHOUT_CLASSIFICATION	// return new uninitialized proxy
WITHOUT_CLASSIFICATION	// this object was already loaded
WITHOUT_CLASSIFICATION	// Entity was found in second-level cache...
WITHOUT_CLASSIFICATION	// make it circular-reference safe
WITHOUT_CLASSIFICATION	// intializes result by side-effect
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//some statistics
WITHOUT_CLASSIFICATION	//safe from concurrent modification because of how entryList() is implemented on IdentityMap
WITHOUT_CLASSIFICATION	// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.
WITHOUT_CLASSIFICATION	// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.
WITHOUT_CLASSIFICATION	// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()
WITHOUT_CLASSIFICATION	// Update the status of the object and if necessary, schedule an update
WITHOUT_CLASSIFICATION	// Schedule updates to collections:
WITHOUT_CLASSIFICATION	// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//the database has changed now, so the subselect results need to be invalidated
WITHOUT_CLASSIFICATION	//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set
WITHOUT_CLASSIFICATION	//otherwise recreate the mapping between the collection and its key
WITHOUT_CLASSIFICATION	//get a snapshot
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	/* package-private */
WITHOUT_CLASSIFICATION	// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!
WITHOUT_CLASSIFICATION	//ie. the entity came in from update()
WITHOUT_CLASSIFICATION	// before any callbacks, etc, so subdeletions see that this deletion happened first
WITHOUT_CLASSIFICATION	// Ensures that containing deletions happen before sub-deletions
WITHOUT_CLASSIFICATION	//		TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );
WITHOUT_CLASSIFICATION	// cascade-delete to collections BEFORE the collection owner is deleted
WITHOUT_CLASSIFICATION	// cascade-delete to many-to-one AFTER the parent was deleted
WITHOUT_CLASSIFICATION	// if it is an initialized proxy, let cascade // handle it later on
WITHOUT_CLASSIFICATION	//assign the requested id to the proxy, *before* //reassociating the proxy
WITHOUT_CLASSIFICATION	// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()
WITHOUT_CLASSIFICATION	//initialize properties of the event:
WITHOUT_CLASSIFICATION	//return the id in the event object
WITHOUT_CLASSIFICATION	//TRANSIENT or DELETED
WITHOUT_CLASSIFICATION	// use the id assigned to the instance
WITHOUT_CLASSIFICATION	// assume this is a newly instantiated transient object // which should be saved rather than updated
WITHOUT_CLASSIFICATION	// this is a transient object with existing persistent state not loaded by the session
WITHOUT_CLASSIFICATION	// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
WITHOUT_CLASSIFICATION	//cachedState,
WITHOUT_CLASSIFICATION	//assume true, since we don't really know, and it doesn't matter
WITHOUT_CLASSIFICATION	//a "detached" collection!
WITHOUT_CLASSIFICATION	// if the collection belonged to a different entity, // clean up the existing state of the collection
WITHOUT_CLASSIFICATION	//log.debug( "calling onLoad()" );
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session
WITHOUT_CLASSIFICATION	// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);
WITHOUT_CLASSIFICATION	// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );
WITHOUT_CLASSIFICATION	//we need to check even if it was not initialized, because of delayed adds!
WITHOUT_CLASSIFICATION	//NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	// find any entities that are still transient after retry
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// Check the persistence context for an entry relating to this // entity to be merged...
WITHOUT_CLASSIFICATION	// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance
WITHOUT_CLASSIFICATION	//DELETED
WITHOUT_CLASSIFICATION	//before cascade!
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);
WITHOUT_CLASSIFICATION	//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness
WITHOUT_CLASSIFICATION	// continue...; we'll find out if it ends up not getting saved later
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their // copy created before we actually copy
WITHOUT_CLASSIFICATION	// check that entity id = requestedId
WITHOUT_CLASSIFICATION	//before cascade!
WITHOUT_CLASSIFICATION	// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent
WITHOUT_CLASSIFICATION	// cascade first, so that all unsaved objects get their  // copy created before we actually copy
WITHOUT_CLASSIFICATION	//copyValues works by reflection, so explicitly mark the entity instance dirty
WITHOUT_CLASSIFICATION	//EARLY EXIT
WITHOUT_CLASSIFICATION	//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed
WITHOUT_CLASSIFICATION	// substitutes into values by side-effect
WITHOUT_CLASSIFICATION	//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );
WITHOUT_CLASSIFICATION	//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );
WITHOUT_CLASSIFICATION	//keep the existing version number in the case of replicate!
WITHOUT_CLASSIFICATION	// cascade-save to many-to-one BEFORE the parent is saved
WITHOUT_CLASSIFICATION	//pass this as an argument only to avoid double looking
WITHOUT_CLASSIFICATION	// the object is persistent
WITHOUT_CLASSIFICATION	//the entity is associated with the session, so check its status
WITHOUT_CLASSIFICATION	// do nothing for persistent instances
WITHOUT_CLASSIFICATION	//ie. e.status==DELETED
WITHOUT_CLASSIFICATION	// the object is transient or detached
WITHOUT_CLASSIFICATION	//NOTE EARLY EXIT!
WITHOUT_CLASSIFICATION	// Private constructor - stops checkstyle from complaining.
WITHOUT_CLASSIFICATION	// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...
WITHOUT_CLASSIFICATION	// eat it and try next
WITHOUT_CLASSIFICATION	// Otherwise, try to use the no-arg constructor
WITHOUT_CLASSIFICATION	// oracle sql-state code for deadlock
WITHOUT_CLASSIFICATION	// CollectionPropertyMapping processes everything except 'index'.
WITHOUT_CLASSIFICATION	// remove initial ", "
WITHOUT_CLASSIFICATION	// remove initial " and "
WITHOUT_CLASSIFICATION	//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!
WITHOUT_CLASSIFICATION	//notAfterClassTokens.add(",");
WITHOUT_CLASSIFICATION	// just especially for the trivial collection filter
WITHOUT_CLASSIFICATION	//update last non-whitespace token, if necessary
WITHOUT_CLASSIFICATION	// select-range is terminated by declaration of "from"
WITHOUT_CLASSIFICATION	//scan for next non-whitespace token
WITHOUT_CLASSIFICATION	// Note this!!
WITHOUT_CLASSIFICATION	// Error message constants.
WITHOUT_CLASSIFICATION	// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!
WITHOUT_CLASSIFICATION	// Show the modified AST.
WITHOUT_CLASSIFICATION	// Create a parameter specification for the collection filter...
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Get the names of the columns used to link between the collection // owner and the collection elements.
WITHOUT_CLASSIFICATION	// The path AST should be a DotNode, and it should have been evaluated already.
WITHOUT_CLASSIFICATION	// Tell the dot node about the join type.
WITHOUT_CLASSIFICATION	// Re-arrange the tree so that the collection function is the root and the lhs is the path.
WITHOUT_CLASSIFICATION	// Don't forget to resolve the argument! // Resolve the collection function now.
WITHOUT_CLASSIFICATION	// Resolve everything up to this dot, but don't resolve the placeholders yet.
WITHOUT_CLASSIFICATION	// Should mean that no such property was found
WITHOUT_CLASSIFICATION	// Was there an explicit select expression?
WITHOUT_CLASSIFICATION	// Attach any mapping-defined "ORDER BY" fragments
WITHOUT_CLASSIFICATION	// Use the explicitly declared select expression; determine the // return types indicated by each select token
WITHOUT_CLASSIFICATION	// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.
WITHOUT_CLASSIFICATION	// Make #@%$^#^&# sure no alias is applied to the table name
WITHOUT_CLASSIFICATION	// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// We need to seed the version value as part of this bulk insert
WITHOUT_CLASSIFICATION	// we need to wrtap the param in a cast()
WITHOUT_CLASSIFICATION	// This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	// Generate implicit joins, only if necessary.
WITHOUT_CLASSIFICATION	// Notify the FROM element that it is being referenced by the select.
WITHOUT_CLASSIFICATION	// Turn off includeSubclasses on all FromElements.
WITHOUT_CLASSIFICATION	// create the node initially with the param name so that it shows // appropriately in the "original text" attribute
WITHOUT_CLASSIFICATION	// Use the delegate, resolve identifiers as FROM element aliases.
WITHOUT_CLASSIFICATION	// select clauses for insert statements should alwasy be treated as shallow
WITHOUT_CLASSIFICATION	// no need to even collect this information if the persister is considered multi-table
WITHOUT_CLASSIFICATION	// Make sure that the persister is versioned
WITHOUT_CLASSIFICATION	// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
WITHOUT_CLASSIFICATION	// Alias references and identifiers use the same node class.
WITHOUT_CLASSIFICATION	// switch
WITHOUT_CLASSIFICATION	// make a new one
WITHOUT_CLASSIFICATION	// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.
WITHOUT_CLASSIFICATION	// Initialize SQL nodes here.
WITHOUT_CLASSIFICATION	// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// if template is null we just write the function out as it appears in the hql statement
WITHOUT_CLASSIFICATION	// this function has a template -> redirect output and catch the arguments
WITHOUT_CLASSIFICATION	// --- Inner classes (moved here from sql-gen.g) ---
WITHOUT_CLASSIFICATION	// check two "adjecent" nodes at the top of the from-clause tree
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// these are just two unrelated table references
WITHOUT_CLASSIFICATION	// again, both should be FromElements
WITHOUT_CLASSIFICATION	// NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement
WITHOUT_CLASSIFICATION	// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them
WITHOUT_CLASSIFICATION	// right represents a joins originating from left...
WITHOUT_CLASSIFICATION	// all clear
WITHOUT_CLASSIFICATION	// Ignore the token class name parameter, and use a specific token class.
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	// remember that ordinal parameters numbers are 1-based!!!
WITHOUT_CLASSIFICATION	// don't care about other param types here, just those explicitly user-defined...
WITHOUT_CLASSIFICATION	// If the query is already compiled, skip the compilation.
WITHOUT_CLASSIFICATION	// Remember the parameters for the compilation.
WITHOUT_CLASSIFICATION	// PHASE 1 : Parse the HQL into an AST.
WITHOUT_CLASSIFICATION	// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.
WITHOUT_CLASSIFICATION	// PHASE 3 : Generate the SQL.
WITHOUT_CLASSIFICATION	// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	//only needed during compilation phase...
WITHOUT_CLASSIFICATION	// Transform the tree.
WITHOUT_CLASSIFICATION	// Parse the query string into an HQL AST.
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	// NOTE : ( max - 1 ) because first is zero-based while max is not...
WITHOUT_CLASSIFICATION	// -- Package local methods for the QueryLoader delegate --
WITHOUT_CLASSIFICATION	// If there are no collection fetches, then no further checks are needed
WITHOUT_CLASSIFICATION	// A shallow query is ok (although technically there should be no fetching here...)
WITHOUT_CLASSIFICATION	// should be the first, but just to be safe...
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return
WITHOUT_CLASSIFICATION	// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)
WITHOUT_CLASSIFICATION	// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...
WITHOUT_CLASSIFICATION	//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );
WITHOUT_CLASSIFICATION	// we are already processing a dot-structure
WITHOUT_CLASSIFICATION	// igndore it...
WITHOUT_CLASSIFICATION	// we are now at a new tree level
WITHOUT_CLASSIFICATION	// [jsd] The fix for HHH-558...
WITHOUT_CLASSIFICATION	// If the token can tell us if it could be an identifier...
WITHOUT_CLASSIFICATION	// ... and the expected token type was an identifier, then:
WITHOUT_CLASSIFICATION	// Use the token as an identifier.
WITHOUT_CLASSIFICATION	// Add the token to the AST.
WITHOUT_CLASSIFICATION	// (NOT (EQ a b) ) => (NE a b)
WITHOUT_CLASSIFICATION	// (NOT (NE a b) ) => (EQ a b)
WITHOUT_CLASSIFICATION	// (NOT (LT a b) ) => (GE a b)
WITHOUT_CLASSIFICATION	// (NOT (GE a b) ) => (LT a b)
WITHOUT_CLASSIFICATION	// (NOT (LE a b) ) => (GT a b)
WITHOUT_CLASSIFICATION	// (NOT (LIKE a b) ) => (NOT_LIKE a b)
WITHOUT_CLASSIFICATION	// (NOT (NOT_LIKE a b) ) => (LIKE a b)
WITHOUT_CLASSIFICATION	// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
WITHOUT_CLASSIFICATION	// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
WITHOUT_CLASSIFICATION	// Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	//overriden to avoid System.exit
WITHOUT_CLASSIFICATION	// if // if // Otherwise, handle the error normally.
WITHOUT_CLASSIFICATION	// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
WITHOUT_CLASSIFICATION	/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/
WITHOUT_CLASSIFICATION	// Just add a 'not' parent.
WITHOUT_CLASSIFICATION	// (EQ NULL b) => (IS_NULL b)
WITHOUT_CLASSIFICATION	// (EQ a NULL) => (IS_NULL a)
WITHOUT_CLASSIFICATION	// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )
WITHOUT_CLASSIFICATION	// Add NOT if it's negated.
WITHOUT_CLASSIFICATION	// Create nodes that track line and column number.
WITHOUT_CLASSIFICATION	// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.
WITHOUT_CLASSIFICATION	// Case 2: The current token is after FROM and before '.'.
WITHOUT_CLASSIFICATION	// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...
WITHOUT_CLASSIFICATION	// See if the second lookahed token can be an identifier.
WITHOUT_CLASSIFICATION	// Set it!
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// strip the " where "
WITHOUT_CLASSIFICATION	// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
WITHOUT_CLASSIFICATION	// at the very least cleanup the data :)
WITHOUT_CLASSIFICATION	// First, save off the pertinent ids, as the return value
WITHOUT_CLASSIFICATION	// jdbc params are 1-based
WITHOUT_CLASSIFICATION	// jdbc params are 1-based
WITHOUT_CLASSIFICATION	// Start performing the updates
WITHOUT_CLASSIFICATION	// First, save off the pertinent ids, saving the number of pertinent ids for return
WITHOUT_CLASSIFICATION	// Start performing the deletes
WITHOUT_CLASSIFICATION	// otherwise, everything ok.
WITHOUT_CLASSIFICATION	// visit width-first, then depth
WITHOUT_CLASSIFICATION	// if the types report logical equivalence, return true...
WITHOUT_CLASSIFICATION	// otherwise, perform a "deep equivalence" check...
WITHOUT_CLASSIFICATION	// If there is no WHERE node, make one.
WITHOUT_CLASSIFICATION	// inject the WHERE after the parent
WITHOUT_CLASSIFICATION	// Never include subclasses for implied from elements.
WITHOUT_CLASSIFICATION	// Moved here from SelectClause [jsd]
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// Use the table fromElement and the property name to get the array of column names.
WITHOUT_CLASSIFICATION	// Set the attributes of the property reference expression.
WITHOUT_CLASSIFICATION	// If the uresolved property path isn't set yet, just use the property name.
WITHOUT_CLASSIFICATION	// The 'from element' that the property is in.
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	// If this dot has already been resolved, stop now.
WITHOUT_CLASSIFICATION	// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.
WITHOUT_CLASSIFICATION	// The property is a collection...
WITHOUT_CLASSIFICATION	// The property is a component...
WITHOUT_CLASSIFICATION	// The property is another class..
WITHOUT_CLASSIFICATION	// Otherwise, this is a primitive type.
WITHOUT_CLASSIFICATION	//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
WITHOUT_CLASSIFICATION	// This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	// Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	// in non-select queries, the only time we should need to join is if we are in a subquery from clause
WITHOUT_CLASSIFICATION	// this is the regression style determination which matches the logic of the classic translator
WITHOUT_CLASSIFICATION	// This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	// even though we might find a pre-existing element by join path, we may not be able to reuse it...
WITHOUT_CLASSIFICATION	// NOTE : addDuplicateAlias() already performs nullness checks on the alias.
WITHOUT_CLASSIFICATION	// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse
WITHOUT_CLASSIFICATION	// again, null != null here
WITHOUT_CLASSIFICATION	// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).
WITHOUT_CLASSIFICATION	// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
WITHOUT_CLASSIFICATION	// we know only the lhs-hand type, so use that
WITHOUT_CLASSIFICATION	// the referenced node text is the special 'id'
WITHOUT_CLASSIFICATION	// only the identifier property field name can be a reference to the associated entity's PK...
WITHOUT_CLASSIFICATION	// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	// Append the new property name onto the unresolved path.
WITHOUT_CLASSIFICATION	// If the lhs is a collection, use CollectionPropertyMapping
WITHOUT_CLASSIFICATION	// Tell the destination fromElement to 'includeSubclasses'.
WITHOUT_CLASSIFICATION	// Use theta style (for regression) // Move the node up, after the origin node.
WITHOUT_CLASSIFICATION	// Don't resolve the node again.
WITHOUT_CLASSIFICATION	// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.
WITHOUT_CLASSIFICATION	// we need to strip off the embedded parens so that sql-gen does not double these up
WITHOUT_CLASSIFICATION	// we have something like : "? [op] rhs"
WITHOUT_CLASSIFICATION	// we have something like : "lhs [op] ?"
WITHOUT_CLASSIFICATION	// we know only the rhs-hand type, so use that
WITHOUT_CLASSIFICATION	// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
WITHOUT_CLASSIFICATION	// one or the other needs to be a datetime for us to get into this method in the first place...
WITHOUT_CLASSIFICATION	// #3 - note that this is also true of "datetime - :param"...
WITHOUT_CLASSIFICATION	// #2
WITHOUT_CLASSIFICATION	// Generate the inner join -- The elements need to be joined to the collection they are in.
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// The 'from element' that represents the elements of the collection.
WITHOUT_CLASSIFICATION	// Add the condition to the join sequence that qualifies the indexed element.
WITHOUT_CLASSIFICATION	// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)
WITHOUT_CLASSIFICATION	// Now, set the text for this node.  It should be the element columns.
WITHOUT_CLASSIFICATION	// Get the function return value type, based on the type of the first argument.
WITHOUT_CLASSIFICATION	// This will call initialize(tok)!
WITHOUT_CLASSIFICATION	// mutation depends on the types of nodes invloved...
WITHOUT_CLASSIFICATION	// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	// Generated select expressions are already resolved, nothing to do.
WITHOUT_CLASSIFICATION	// The path may be a reference to an alias defined in the parent query.
WITHOUT_CLASSIFICATION	// The HQL class alias refers to the class name.
WITHOUT_CLASSIFICATION	// Associate the table alias with the element.
WITHOUT_CLASSIFICATION	// try the parent FromClause...
WITHOUT_CLASSIFICATION	// Add the new node to the map so that we don't create it twice.
WITHOUT_CLASSIFICATION	// Make sure that all from elements registered with this FROM clause are actually in the AST.
WITHOUT_CLASSIFICATION	// Invoke setScalarColumnText on each constructor argument.
WITHOUT_CLASSIFICATION	// Collect the select expressions, skip the first child because it is the class name.
WITHOUT_CLASSIFICATION	// return an empty Type array
WITHOUT_CLASSIFICATION	// Constructors are always considered scalar results.
WITHOUT_CLASSIFICATION	// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor
WITHOUT_CLASSIFICATION	// if there is no order by, make one
WITHOUT_CLASSIFICATION	// Find the WHERE; if there is no WHERE, find the FROM...
WITHOUT_CLASSIFICATION	// Now, inject the newly built ORDER BY into the tree
WITHOUT_CLASSIFICATION	// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to boolean.
WITHOUT_CLASSIFICATION	// Render the identifier select fragment using the table alias.
WITHOUT_CLASSIFICATION	// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
WITHOUT_CLASSIFICATION	// For many-to-many joins, use the tablename from the queryable collection for the default text.
WITHOUT_CLASSIFICATION	// Otherwise, use the property mapping.
WITHOUT_CLASSIFICATION	// should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	// If the property is a special collection property name, return a CollectionPropertyMapping.
WITHOUT_CLASSIFICATION	// Collection of components.
WITHOUT_CLASSIFICATION	// make sure the lhs is "assignable"...
WITHOUT_CLASSIFICATION	// false indicates to not generate parens around the assignment
WITHOUT_CLASSIFICATION	// Register the FromElement with the FROM clause, now that we have the names and aliases.
WITHOUT_CLASSIFICATION	// currently allowed...
WITHOUT_CLASSIFICATION	// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.
WITHOUT_CLASSIFICATION	//return classAlias == null ? className : classAlias;
WITHOUT_CLASSIFICATION	// This is an explicit FROM element.
WITHOUT_CLASSIFICATION	// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Fetch can't be used with scroll() or iterate().
WITHOUT_CLASSIFICATION	// If it's not implied or it is implied and it's a many to many join where the target wasn't found.
WITHOUT_CLASSIFICATION	// Since this is an explicit FROM element, it can't be implied in the FROM clause.
WITHOUT_CLASSIFICATION	// Do nothing, eplicit from elements are *always* in the projection list.
WITHOUT_CLASSIFICATION	// propertyName refers to something like collection.size...
WITHOUT_CLASSIFICATION	// property name is a sub-path of a component...
WITHOUT_CLASSIFICATION	// Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
WITHOUT_CLASSIFICATION	// logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	// DotNode uses null here...
WITHOUT_CLASSIFICATION	// We represent a from-clause alias
WITHOUT_CLASSIFICATION	// we are the LHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	// we are the RHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	// we represent a naked (simple) prop-ref
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...
WITHOUT_CLASSIFICATION	// assume this ident's text does *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// just ignore it for now, it'll get resolved later...
WITHOUT_CLASSIFICATION	// This is not actually a constant, but a reference to FROM element.
WITHOUT_CLASSIFICATION	// check to see if our "propPath" actually // represents a property on the persister
WITHOUT_CLASSIFICATION	// these pieces are needed for usage in select clause
WITHOUT_CLASSIFICATION	// used to set the type of the parent dot node
WITHOUT_CLASSIFICATION	// assume we do *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// assume we do *not* refer to a property on the given persister
WITHOUT_CLASSIFICATION	// naked property-refs cannot be used with an aliased from element
WITHOUT_CLASSIFICATION	// this piece is needed for usage in select clause
WITHOUT_CLASSIFICATION	// do *not* over-write the column text, as that has already been // "rendered" during resolve
WITHOUT_CLASSIFICATION	// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string
WITHOUT_CLASSIFICATION	// Look up class name using the first identifier in the path.
WITHOUT_CLASSIFICATION	// Add to the query spaces.
WITHOUT_CLASSIFICATION	// If the from element isn't in the same clause, create a new from element.
WITHOUT_CLASSIFICATION	// This is the root level node. // Generate an explicit from clause at the root.
WITHOUT_CLASSIFICATION	// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join
WITHOUT_CLASSIFICATION	// super-duper-classic-parser-regression-testing-mojo-magic...
WITHOUT_CLASSIFICATION	// A collection of entities...
WITHOUT_CLASSIFICATION	// A collection of components...
WITHOUT_CLASSIFICATION	// A collection of scalar elements...
WITHOUT_CLASSIFICATION	// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	// Don't include sub-classes for implied collection joins or subquery joins.
WITHOUT_CLASSIFICATION	// Treat explict from elements in sub-queries properly.
WITHOUT_CLASSIFICATION	//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {
WITHOUT_CLASSIFICATION	// the "root from-element" in correlated subqueries do need this piece
WITHOUT_CLASSIFICATION	// Create the FROM element for the target (the elements of the collection).
WITHOUT_CLASSIFICATION	// If the join is implied, then don't include sub-classes on the element.
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.
WITHOUT_CLASSIFICATION	// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.
WITHOUT_CLASSIFICATION	// Get the class name of the associated entity.
WITHOUT_CLASSIFICATION	//  origin, path, implied, columns, classAlias,
WITHOUT_CLASSIFICATION	/*implied*/
WITHOUT_CLASSIFICATION	// For implied many-to-many, just add the end join.
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	// This causes the factory to instantiate the desired class.
WITHOUT_CLASSIFICATION	//private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */
WITHOUT_CLASSIFICATION	/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/
WITHOUT_CLASSIFICATION	// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!
WITHOUT_CLASSIFICATION	// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
WITHOUT_CLASSIFICATION	//sqlResultTypeList.addAll( constructorArgumentTypeList );
WITHOUT_CLASSIFICATION	// If the data type is not an association type, it could not have been in the FROM clause.
WITHOUT_CLASSIFICATION	//sqlResultTypeList.add( type );
WITHOUT_CLASSIFICATION	// Always add the type to the return type list.
WITHOUT_CLASSIFICATION	// add the fetched entities
WITHOUT_CLASSIFICATION	// Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// If there are any scalars (non-entities) selected, render the select column aliases.
WITHOUT_CLASSIFICATION	/*sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	/*ArrayList sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
WITHOUT_CLASSIFICATION	// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//TODO:
WITHOUT_CLASSIFICATION	// Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.
WITHOUT_CLASSIFICATION	// Generate the select expression.
WITHOUT_CLASSIFICATION	// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Skip 'DISTINCT' and 'ALL', so we return the first expression node.
WITHOUT_CLASSIFICATION	// Create SQL_TOKEN nodes for the columns.
WITHOUT_CLASSIFICATION	// Generate the property select tokens.
WITHOUT_CLASSIFICATION	// Get the function name node.
WITHOUT_CLASSIFICATION	// Method expressions in a SELECT should always be considered scalar.
WITHOUT_CLASSIFICATION	// If this is 'elements' then create a new FROM element.
WITHOUT_CLASSIFICATION	// Not elements(x)
WITHOUT_CLASSIFICATION	// Dialect function
WITHOUT_CLASSIFICATION	// Collection 'property function'
WITHOUT_CLASSIFICATION	// If the constant is an IDENT, figure out what it means...
WITHOUT_CLASSIFICATION	// IDENT is a class alias in the FROM.
WITHOUT_CLASSIFICATION	// Resolve to an identity column.
WITHOUT_CLASSIFICATION	// Otherwise, it's a literal.
WITHOUT_CLASSIFICATION	// the name of an entity class
WITHOUT_CLASSIFICATION	//the class discriminator value
WITHOUT_CLASSIFICATION	// Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	// Add a space before the display text.
WITHOUT_CLASSIFICATION	// Find or create the WHERE clause
WITHOUT_CLASSIFICATION	// child == parent.getFirstChild()
WITHOUT_CLASSIFICATION	// Find or create the WHERE clause
WITHOUT_CLASSIFICATION	// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().
WITHOUT_CLASSIFICATION	// Put the FILTERS node before the HQL condition and theta joins
WITHOUT_CLASSIFICATION	// add the current fragment to the FILTERS node
WITHOUT_CLASSIFICATION	// Create a new THETA_JOINS node as a parent of all filters
WITHOUT_CLASSIFICATION	// Put the THETA_JOINS node before the HQL condition, after the filters.
WITHOUT_CLASSIFICATION	// add the current fragment to the THETA_JOINS node
WITHOUT_CLASSIFICATION	// First, try to get the persister using the given name directly.
WITHOUT_CLASSIFICATION	// unable to locate it using this name
WITHOUT_CLASSIFICATION	// If that didn't work, try using the 'import' name.
WITHOUT_CLASSIFICATION	// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)
WITHOUT_CLASSIFICATION	// locate the registered function by the given name
WITHOUT_CLASSIFICATION	// determine the type of the first argument...
WITHOUT_CLASSIFICATION	// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.
WITHOUT_CLASSIFICATION	// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.
WITHOUT_CLASSIFICATION	// Append the text of the current node.
WITHOUT_CLASSIFICATION	// If the node has a first child, recurse into the first child.
WITHOUT_CLASSIFICATION	// If there is a second child (RHS), recurse into that child.
WITHOUT_CLASSIFICATION	// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.
WITHOUT_CLASSIFICATION	// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT
WITHOUT_CLASSIFICATION	// this is used during SqlGenerator processing
WITHOUT_CLASSIFICATION	// If there is a FROM fragment and the FROM element is an explicit, then add the from part.
WITHOUT_CLASSIFICATION	/*&& StringHelper.isNotEmpty( frag )*/
WITHOUT_CLASSIFICATION	// The FROM fragment will probably begin with ', '.  Remove this if it is present.
WITHOUT_CLASSIFICATION	// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
WITHOUT_CLASSIFICATION	// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
WITHOUT_CLASSIFICATION	//named query parameter
WITHOUT_CLASSIFICATION	//default mode
WITHOUT_CLASSIFICATION	//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	//reset the dotcount (but not the path) //after reset!
WITHOUT_CLASSIFICATION	//after reset!
WITHOUT_CLASSIFICATION	// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query
WITHOUT_CLASSIFICATION	// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22
WITHOUT_CLASSIFICATION	// dotcount>=2
WITHOUT_CLASSIFICATION	// Do the corresponding RHS
WITHOUT_CLASSIFICATION	//if its "id"
WITHOUT_CLASSIFICATION	//or its the id property name
WITHOUT_CLASSIFICATION	//join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	//important!!
WITHOUT_CLASSIFICATION	//String[] keyCols = collPersister.getKeyColumnNames();
WITHOUT_CLASSIFICATION	// an association
WITHOUT_CLASSIFICATION	//allow index() function:
WITHOUT_CLASSIFICATION	// here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
WITHOUT_CLASSIFICATION	//many-to-many
WITHOUT_CLASSIFICATION	// collections of values
WITHOUT_CLASSIFICATION	//opening paren in new Foo ( ... )
WITHOUT_CLASSIFICATION	//if we are inside a new Result(), but not inside a nested function
WITHOUT_CLASSIFICATION	//special case
WITHOUT_CLASSIFICATION	// the name of an SQL function
WITHOUT_CLASSIFICATION	//null child could occur for no from clause in a filter
WITHOUT_CLASSIFICATION	//this is basically a copy/paste of OrderByParser ... might be worth refactoring
WITHOUT_CLASSIFICATION	// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	// return aliases not supported in classic translator!
WITHOUT_CLASSIFICATION	//register collection role
WITHOUT_CLASSIFICATION	// The keyword used to specify an identity column, if identity column key generation is supported.
WITHOUT_CLASSIFICATION	//.getElementPropertyMapping();
WITHOUT_CLASSIFICATION	//crossJoins.add(name);
WITHOUT_CLASSIFICATION	//ie no select clause in HQL
WITHOUT_CLASSIFICATION	// initialize the Set of queried identifier spaces (ie. tables)
WITHOUT_CLASSIFICATION	//ie. no select clause
WITHOUT_CLASSIFICATION	//there _was_ a select clause
WITHOUT_CLASSIFICATION	// return the concrete type, or the underlying type if a concrete type // was not specified
WITHOUT_CLASSIFICATION	//many-to-many
WITHOUT_CLASSIFICATION	//q.addCollection(collectionName, collectionRole);
WITHOUT_CLASSIFICATION	// classic parser does not support bulk manipulation statements
WITHOUT_CLASSIFICATION	// can't cache this stuff either (per-invocation)
WITHOUT_CLASSIFICATION	// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
WITHOUT_CLASSIFICATION	// This is the legacy behaviour for HQL queries...
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	// not known!
WITHOUT_CLASSIFICATION	//Need this, since join condition can appear inside parens!
WITHOUT_CLASSIFICATION	//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression
WITHOUT_CLASSIFICATION	//expressionTerminators.add(","); // deliberately excluded
WITHOUT_CLASSIFICATION	//expressionOpeners.add(","); // deliberately excluded
WITHOUT_CLASSIFICATION	// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)
WITHOUT_CLASSIFICATION	//Inside a BETWEEN ... AND ... expression
WITHOUT_CLASSIFICATION	//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean
WITHOUT_CLASSIFICATION	//ie. a many-to-many
WITHOUT_CLASSIFICATION	//Cope with [,]
WITHOUT_CLASSIFICATION	//Cope with a continued path expression (ie. ].baz)
WITHOUT_CLASSIFICATION	//NOTE: early return
WITHOUT_CLASSIFICATION	//Cope with a subselect
WITHOUT_CLASSIFICATION	//Cope with special cases of AND, NOT, ()
WITHOUT_CLASSIFICATION	//Close extra brackets we opened
WITHOUT_CLASSIFICATION	//take note when this is a boolean expression
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	//process a token, mapping OO path expressions to SQL expressions
WITHOUT_CLASSIFICATION	//Open any extra brackets we might need.
WITHOUT_CLASSIFICATION	//Cope with special cases of AND, NOT, )
WITHOUT_CLASSIFICATION	// the next one up must also be
WITHOUT_CLASSIFICATION	// Add any joins
WITHOUT_CLASSIFICATION	// assumes that types are all of span 1
WITHOUT_CLASSIFICATION	//named query parameter
WITHOUT_CLASSIFICATION	//path expression
WITHOUT_CLASSIFICATION	// saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	// persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	//anything else
WITHOUT_CLASSIFICATION	// the path expression continues after a ]
WITHOUT_CLASSIFICATION	// careful with this!
WITHOUT_CLASSIFICATION	// the path expression ends at the ]
WITHOUT_CLASSIFICATION	// "finish off" the join
WITHOUT_CLASSIFICATION	//NOTICE: no " or . since they are part of (compound) identifiers
WITHOUT_CLASSIFICATION	//cannot instantiate
WITHOUT_CLASSIFICATION	// start by looking for HQL keywords...
WITHOUT_CLASSIFICATION	// inner joins can be abbreviated to 'join'
WITHOUT_CLASSIFICATION	// 'outer' is optional and is ignored
WITHOUT_CLASSIFICATION	// now anything that is not a HQL keyword
WITHOUT_CLASSIFICATION	// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions
WITHOUT_CLASSIFICATION	// treat it as a classname
WITHOUT_CLASSIFICATION	// treat it as a path expression
WITHOUT_CLASSIFICATION	// starts with the name of a mapped class (new style)
WITHOUT_CLASSIFICATION	// starts with a path expression (new style)
WITHOUT_CLASSIFICATION	//allow ODMG OQL style: from Person p, p.cars c
WITHOUT_CLASSIFICATION	//handle quoted strings
WITHOUT_CLASSIFICATION	// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity
WITHOUT_CLASSIFICATION	// "finish off" the join
WITHOUT_CLASSIFICATION	//ignore whitespace
WITHOUT_CLASSIFICATION	//do replacements
WITHOUT_CLASSIFICATION	//handle HQL2 collection syntax
WITHOUT_CLASSIFICATION	// uuid.hex is deprecated
WITHOUT_CLASSIFICATION	// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//hilo params
WITHOUT_CLASSIFICATION	//sql = query;
WITHOUT_CLASSIFICATION	// performance opt
WITHOUT_CLASSIFICATION	//sql = update;
WITHOUT_CLASSIFICATION	//hilo config
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(
WITHOUT_CLASSIFICATION	//abort the save (the object is already saved by a circular cascade)
WITHOUT_CLASSIFICATION	//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	//do nothing to avoid a lazy property initialization
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// do nothing until we hit the rsult set containing the generated id
WITHOUT_CLASSIFICATION	/* COLUMN and TABLE should be renamed but it would break the public API */
WITHOUT_CLASSIFICATION	// Loaded entity instances, by EntityKey
WITHOUT_CLASSIFICATION	// if the given name is un-qualified we may neen to qualify it
WITHOUT_CLASSIFICATION	// the default...
WITHOUT_CLASSIFICATION	// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...
WITHOUT_CLASSIFICATION	// intentionally empty
WITHOUT_CLASSIFICATION	// Identity map of CollectionEntry instances, by the collection wrapper
WITHOUT_CLASSIFICATION	// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// prepare and execute the insert
WITHOUT_CLASSIFICATION	// prepare and execute the insert
WITHOUT_CLASSIFICATION	//fetch the generated id in a separate query
WITHOUT_CLASSIFICATION	// we just hit the last position
WITHOUT_CLASSIFICATION	// scroll ahead
WITHOUT_CLASSIFICATION	// scroll backward
WITHOUT_CLASSIFICATION	// we have not yet hit the last result...
WITHOUT_CLASSIFICATION	// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.
WITHOUT_CLASSIFICATION	// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Caches
WITHOUT_CLASSIFICATION	//Generators:
WITHOUT_CLASSIFICATION	// cache region is defined by the root-class in the hierarchy...
WITHOUT_CLASSIFICATION	//check if the detached object being merged is the parent
WITHOUT_CLASSIFICATION	// after *all* persisters and named queries are registered
WITHOUT_CLASSIFICATION	// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'
WITHOUT_CLASSIFICATION	//JNDI + Serialization:
WITHOUT_CLASSIFICATION	//checking for named queries
WITHOUT_CLASSIFICATION	//stats
WITHOUT_CLASSIFICATION	// EntityNotFoundDelegate
WITHOUT_CLASSIFICATION	// Check named HQL queries
WITHOUT_CLASSIFICATION	// this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	//prevents this session from adding things to cache
WITHOUT_CLASSIFICATION	// from javax.naming.Referenceable
WITHOUT_CLASSIFICATION	// look for the instance by uuid
WITHOUT_CLASSIFICATION	//for a dynamic-class
WITHOUT_CLASSIFICATION	//test this entity to see if we must query it
WITHOUT_CLASSIFICATION	//NOTE EARLY EXIT
WITHOUT_CLASSIFICATION	// for backward-compatability
WITHOUT_CLASSIFICATION	// ignore this error for now
WITHOUT_CLASSIFICATION	//to stop the class from being unloaded
WITHOUT_CLASSIFICATION	// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization
WITHOUT_CLASSIFICATION	// Make sure this is a defined parameter and check the incoming value type
WITHOUT_CLASSIFICATION	// for each of the defined parameters, make sure its value // has been set
WITHOUT_CLASSIFICATION	//we never need to apply locks to the SQL
WITHOUT_CLASSIFICATION	// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.
WITHOUT_CLASSIFICATION	// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	//final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	// first, try to load it from the temp PC associated to this SS
WITHOUT_CLASSIFICATION	// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy
WITHOUT_CLASSIFICATION	// otherwise immediately materialize it
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// no auto-flushing to support in stateless session
WITHOUT_CLASSIFICATION	//after setting values to object, entityMode
WITHOUT_CLASSIFICATION	//for EJB3
WITHOUT_CLASSIFICATION	// just ignore
WITHOUT_CLASSIFICATION	// do a check
WITHOUT_CLASSIFICATION	// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// do not auto-flush while outside a transaction
WITHOUT_CLASSIFICATION	// this is an internal error of some sort...
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
WITHOUT_CLASSIFICATION	// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query
WITHOUT_CLASSIFICATION	// not for internal use:
WITHOUT_CLASSIFICATION	// otherwise, we only need to flush if there are in-memory changes // to the queried tables
WITHOUT_CLASSIFICATION	// might need to run a different filter entirely after the flush // because the collection role may have changed
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted
WITHOUT_CLASSIFICATION	// basically just an adapted copy of find(CriteriaImpl)
WITHOUT_CLASSIFICATION	// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy
WITHOUT_CLASSIFICATION	// nothing to do in a stateful session
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore this error for now
WITHOUT_CLASSIFICATION	// we need to writeObject() on this since interceptor is user defined
WITHOUT_CLASSIFICATION	// the old-time stand-by...
WITHOUT_CLASSIFICATION	// parameter bind values...
WITHOUT_CLASSIFICATION	// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// prepend value and type list with null for any positions before the wanted position.
WITHOUT_CLASSIFICATION	// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	// we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	// we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	// we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//let's assume that there is only one lazy fetch group, for now!
WITHOUT_CLASSIFICATION	// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// should *not* need to grow beyond the size of the total number of columns in the rs
WITHOUT_CLASSIFICATION	// should probably no-op commit/rollback here, at least in JTA scenarios
WITHOUT_CLASSIFICATION	// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// explicitly perform no checking...
WITHOUT_CLASSIFICATION	// used from testsuite
WITHOUT_CLASSIFICATION	// assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// register synch; stats.connect()
WITHOUT_CLASSIFICATION	//noncritical, swallow and let the other propagate!
WITHOUT_CLASSIFICATION	// calls executeBatch()
WITHOUT_CLASSIFICATION	//no big deal
WITHOUT_CLASSIFICATION	// no big deal
WITHOUT_CLASSIFICATION	// no big deal
WITHOUT_CLASSIFICATION	// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case
WITHOUT_CLASSIFICATION	// see explanation above...
WITHOUT_CLASSIFICATION	// If we are in the process of releasing, no sense // checking for aggressive-release possibility.
WITHOUT_CLASSIFICATION	// EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// refer to comment in StatefulPersistenceContext.addCollection()
WITHOUT_CLASSIFICATION	// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Note : success = false, because we don't know the outcome of the transaction
WITHOUT_CLASSIFICATION	// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.
WITHOUT_CLASSIFICATION	// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization
WITHOUT_CLASSIFICATION	// transactions marked for rollback-only cause some TM impls to throw exceptions
WITHOUT_CLASSIFICATION	// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//postInitialize() will be called after initialization
WITHOUT_CLASSIFICATION	// cannot handle single quotes
WITHOUT_CLASSIFICATION	// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'...
WITHOUT_CLASSIFICATION	// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	// don't even bother trying to read further
WITHOUT_CLASSIFICATION	// don't even bother trying to read any further
WITHOUT_CLASSIFICATION	// position cursor to the last row
WITHOUT_CLASSIFICATION	// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing
WITHOUT_CLASSIFICATION	// Read backwards until we read past the first physical sequential // row with the key we are interested in loading
WITHOUT_CLASSIFICATION	// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading
WITHOUT_CLASSIFICATION	// now get an existing proxy for each row element (if there is one)
WITHOUT_CLASSIFICATION	// force the proxy to resolve itself
WITHOUT_CLASSIFICATION	// this is equivalent to the old behavior...
WITHOUT_CLASSIFICATION	//if null, owner will be retrieved from session
WITHOUT_CLASSIFICATION	//final String queryString, 
WITHOUT_CLASSIFICATION	// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify
WITHOUT_CLASSIFICATION	//end of array, start filling again from start
WITHOUT_CLASSIFICATION	// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.
WITHOUT_CLASSIFICATION	//we can reuse it for each row
WITHOUT_CLASSIFICATION	//can't reuse in this case
WITHOUT_CLASSIFICATION	// First we need to suspend any current JTA transaction and obtain // a JDBC connection
WITHOUT_CLASSIFICATION	//getResultList(results);
WITHOUT_CLASSIFICATION	//if we only returned one entity, query by key is more efficient
WITHOUT_CLASSIFICATION	// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
WITHOUT_CLASSIFICATION	// handle empty collection
WITHOUT_CLASSIFICATION	// else no collection element, but also no owner
WITHOUT_CLASSIFICATION	//handle empty collections
WITHOUT_CLASSIFICATION	// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)
WITHOUT_CLASSIFICATION	// validate() instances of Validatable
WITHOUT_CLASSIFICATION	// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>
WITHOUT_CLASSIFICATION	// remove all collections for the entity from the session-level cache
WITHOUT_CLASSIFICATION	//null version means the object is in the process of being loaded somewhere else in the ResultSet
WITHOUT_CLASSIFICATION	//problematic for <key-many-to-one>!
WITHOUT_CLASSIFICATION	//use the id passed in
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	// prefer re-generation of identity!
WITHOUT_CLASSIFICATION	//no point doing this if NONE was requested
WITHOUT_CLASSIFICATION	//If the object is already loaded, return the loaded one
WITHOUT_CLASSIFICATION	//its already loaded so don't need to hydrate it
WITHOUT_CLASSIFICATION	// cascade the refresh prior to refreshing this entity
WITHOUT_CLASSIFICATION	//the load() which takes an entity does not pass an entityName
WITHOUT_CLASSIFICATION	//we only check the version when _upgrading_ lock modes
WITHOUT_CLASSIFICATION	// look for a proxy
WITHOUT_CLASSIFICATION	//we need to upgrade the lock mode to the mode requested
WITHOUT_CLASSIFICATION	//its the given optional object
WITHOUT_CLASSIFICATION	// instantiate a new instance
WITHOUT_CLASSIFICATION	//need to hydrate it.
WITHOUT_CLASSIFICATION	// return a newly loaded object
WITHOUT_CLASSIFICATION	//will be ignored, using the existing Entry instead
WITHOUT_CLASSIFICATION	// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself
WITHOUT_CLASSIFICATION	//materialize associations (and initialize the object) later
WITHOUT_CLASSIFICATION	// Get the persister for the _subclass_
WITHOUT_CLASSIFICATION	// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior
WITHOUT_CLASSIFICATION	// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	//addInitializedCollection(collection, persister, id);
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	/*|| oj.getJoinable().consumesCollectionAlias() */
WITHOUT_CLASSIFICATION	// here we do not bother with the discriminator.
WITHOUT_CLASSIFICATION	// Code to handle subclasses of topClass
WITHOUT_CLASSIFICATION	//woops we got an instance of another class hierarchy branch
WITHOUT_CLASSIFICATION	// we can go straight to the first required row
WITHOUT_CLASSIFICATION	// we need to step through the rows one row at a time (slow)
WITHOUT_CLASSIFICATION	// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.
WITHOUT_CLASSIFICATION	// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.
WITHOUT_CLASSIFICATION	//before adding to collection!
WITHOUT_CLASSIFICATION	// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...
WITHOUT_CLASSIFICATION	//operations which cascade as far as the collection also cascade to collection elements
WITHOUT_CLASSIFICATION	// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:
WITHOUT_CLASSIFICATION	//a composite key
WITHOUT_CLASSIFICATION	// if no batch, use "foo = ? and bar = ?"
WITHOUT_CLASSIFICATION	//it must be a collection fetch
WITHOUT_CLASSIFICATION	// needed later for many-to-many/filter application
WITHOUT_CLASSIFICATION	/*&& etype.isReferenceToPrimaryKey()*/
WITHOUT_CLASSIFICATION	// it might still need to apply a collection ordering based on a // many-to-many defined order-by...
WITHOUT_CLASSIFICATION	// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins
WITHOUT_CLASSIFICATION	// belong to other persister // belong to other persister
WITHOUT_CLASSIFICATION	// we found it
WITHOUT_CLASSIFICATION	//we can use an inner join for the many-to-many
WITHOUT_CLASSIFICATION	//disable a join back to this same association
WITHOUT_CLASSIFICATION	//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!
WITHOUT_CLASSIFICATION	//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	//root entity comes *last*
WITHOUT_CLASSIFICATION	//deliberately ignore return value!
WITHOUT_CLASSIFICATION	//alias may be null //EARLY EXIT
WITHOUT_CLASSIFICATION	// if it is a compound path
WITHOUT_CLASSIFICATION	// otherwise assume the parent is the the criteria that created us
WITHOUT_CLASSIFICATION	// if its the root criteria, we are done
WITHOUT_CLASSIFICATION	// otherwise, recurse
WITHOUT_CLASSIFICATION	//the criteria instance
WITHOUT_CLASSIFICATION	// the entity name
WITHOUT_CLASSIFICATION	//not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	//not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	//it refers to an alias of a projection
WITHOUT_CLASSIFICATION	//should never happen, i think
WITHOUT_CLASSIFICATION	// Detect discriminator values...
WITHOUT_CLASSIFICATION	// Convert the string value into the proper type.
WITHOUT_CLASSIFICATION	// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us
WITHOUT_CLASSIFICATION	//it does not refer to an alias of a projection, //look for a property
WITHOUT_CLASSIFICATION	// Otherwise, this is an ordinary value.
WITHOUT_CLASSIFICATION	// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")
WITHOUT_CLASSIFICATION	//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;
WITHOUT_CLASSIFICATION	// this is only needed (afaict) for ResultTransformer processing...
WITHOUT_CLASSIFICATION	// determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)
WITHOUT_CLASSIFICATION	// replace {....} with corresponding column aliases
WITHOUT_CLASSIFICATION	// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop
WITHOUT_CLASSIFICATION	// apend everything up until the next encountered open brace
WITHOUT_CLASSIFICATION	// it is a simple table alias {foo}
WITHOUT_CLASSIFICATION	// passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	// passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	// The current alias is referencing the collection to be eagerly fetched
WITHOUT_CLASSIFICATION	// it is a property reference {foo.bar}
WITHOUT_CLASSIFICATION	// Possibly handle :something parameters for the query ?
WITHOUT_CLASSIFICATION	// Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	//	private final List persisters = new ArrayList();
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();
WITHOUT_CLASSIFICATION	// Now, process the returns
WITHOUT_CLASSIFICATION	//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();
WITHOUT_CLASSIFICATION	// already been processed...
WITHOUT_CLASSIFICATION	// already been processed...
WITHOUT_CLASSIFICATION	// Make sure the owner alias is known...
WITHOUT_CLASSIFICATION	// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners
WITHOUT_CLASSIFICATION	//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );
WITHOUT_CLASSIFICATION	// If this return's alias has not been processed yet, do so b4 further processing of this return
WITHOUT_CLASSIFICATION	//			collectionOwnerAliases.add( ownerAlias );
WITHOUT_CLASSIFICATION	// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved
WITHOUT_CLASSIFICATION	// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)
WITHOUT_CLASSIFICATION	//EARLY EXIT
WITHOUT_CLASSIFICATION	// cascade-save to collections AFTER the collection owner was saved
WITHOUT_CLASSIFICATION	// Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	// Use the delegate.
WITHOUT_CLASSIFICATION	// currently only the Hibernate-supplied DbTimestampType is supported here
WITHOUT_CLASSIFICATION	// This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	// make a new one
WITHOUT_CLASSIFICATION	// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...
WITHOUT_CLASSIFICATION	// (NOT (GT a b) ) => (LE a b)
WITHOUT_CLASSIFICATION	//private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	//include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	//sqlResultTypes = selectClause.getSqlResultTypes();
WITHOUT_CLASSIFICATION	//by default
WITHOUT_CLASSIFICATION	// This is now handled earlier in this method.
WITHOUT_CLASSIFICATION	// -- Loader implementation --
WITHOUT_CLASSIFICATION	// -- Loader overrides --
WITHOUT_CLASSIFICATION	// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
WITHOUT_CLASSIFICATION	//NONE, because its the requested lock mode, not the actual! 
WITHOUT_CLASSIFICATION	// meant to handle dynamic instantiation queries...
WITHOUT_CLASSIFICATION	// --- Query translator methods ---
WITHOUT_CLASSIFICATION	// -- Implementation private methods --
WITHOUT_CLASSIFICATION	//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user
WITHOUT_CLASSIFICATION	// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
WITHOUT_CLASSIFICATION	// to support dialects that have their own identity data type
WITHOUT_CLASSIFICATION	// Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	//used also for generation of FK names!
WITHOUT_CLASSIFICATION	//usually useless
WITHOUT_CLASSIFICATION	// added this caching as I noticed that getType() is being called multiple times...
WITHOUT_CLASSIFICATION	//do not add unique constraint on DB not supporting unique and nullable columns
WITHOUT_CLASSIFICATION	//for backward compatibility, disable this:
WITHOUT_CLASSIFICATION	//may be final //may be final //may be final
WITHOUT_CLASSIFICATION	//may be final
WITHOUT_CLASSIFICATION	// may be final
WITHOUT_CLASSIFICATION	// Custom SQL
WITHOUT_CLASSIFICATION	//Primary key constraint
WITHOUT_CLASSIFICATION	// the root of the incoming property path matched one // of the embedded composite identifier properties
WITHOUT_CLASSIFICATION	// ignore it...
WITHOUT_CLASSIFICATION	//flat recursive algorithm
WITHOUT_CLASSIFICATION	//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded
WITHOUT_CLASSIFICATION	//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)
WITHOUT_CLASSIFICATION	//pass the entity-name, if not a collection-id
WITHOUT_CLASSIFICATION	// Custom SQL
WITHOUT_CLASSIFICATION	//Primary key constraint
WITHOUT_CLASSIFICATION	//pass the column name (a generated id almost always has a single column)
WITHOUT_CLASSIFICATION	//needed to satisfy KeyValue
WITHOUT_CLASSIFICATION	// empty means no scoping
WITHOUT_CLASSIFICATION	// index should be last column listed
WITHOUT_CLASSIFICATION	//if it is a formula index, use the element columns in the PK
WITHOUT_CLASSIFICATION	// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns
WITHOUT_CLASSIFICATION	/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// no foreign key element of for a one-to-many
WITHOUT_CLASSIFICATION	//TODO: we could just return all false...
WITHOUT_CLASSIFICATION	// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
WITHOUT_CLASSIFICATION	//TODO: we could just return all false...
WITHOUT_CLASSIFICATION	// if the property mapping consists of all formulas,  // make it non-updateable
WITHOUT_CLASSIFICATION	//columnUpdateability.length==0 ||
WITHOUT_CLASSIFICATION	// if the property mapping consists of all formulas,  // make it insertable
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// expected type is intrinsic here...
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//return memberPersister.getPropertyType(propertyName);
WITHOUT_CLASSIFICATION	//return memberPersister.toColumns(alias, propertyName);
WITHOUT_CLASSIFICATION	//return memberPersister.getType();
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	//		return !isOneToMany();
WITHOUT_CLASSIFICATION	//instanceof AssociationType;
WITHOUT_CLASSIFICATION	// we need to determine the best way to know that two joinables // represent a single many-to-many...
WITHOUT_CLASSIFICATION	//strip leading ','
WITHOUT_CLASSIFICATION	//public boolean isSubselectLoadable();
WITHOUT_CLASSIFICATION	// KEY
WITHOUT_CLASSIFICATION	//columns
WITHOUT_CLASSIFICATION	//SQL statements
WITHOUT_CLASSIFICATION	//extra information about the element type
WITHOUT_CLASSIFICATION	//types
WITHOUT_CLASSIFICATION	// custom sql
WITHOUT_CLASSIFICATION	//private final String unquotedIdentifierColumnName;
WITHOUT_CLASSIFICATION	// dynamic filters specifically for many-to-many inside the collection
WITHOUT_CLASSIFICATION	// dynamic filters for the collection
WITHOUT_CLASSIFICATION	// NativeSQL: collect key column and auto-aliases
WITHOUT_CLASSIFICATION	//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);
WITHOUT_CLASSIFICATION	//ELEMENT
WITHOUT_CLASSIFICATION	// NativeSQL: collect element column and auto-aliases
WITHOUT_CLASSIFICATION	// INDEX AND ROW SELECT
WITHOUT_CLASSIFICATION	// NativeSQL: collect index column and auto-aliases
WITHOUT_CLASSIFICATION	//unquotedIdentifierColumnName = identifierColumnAlias;
WITHOUT_CLASSIFICATION	//unquotedIdentifierColumnName = null;
WITHOUT_CLASSIFICATION	//GENERATE THE SQL:
WITHOUT_CLASSIFICATION	// for non-arrays, we don't need to know the element class //elementType.returnedClass();
WITHOUT_CLASSIFICATION	//not all classpersisters implement PropertyMapping!
WITHOUT_CLASSIFICATION	// Handle any filters applied to this collection
WITHOUT_CLASSIFICATION	// Handle any filters applied to this collection for many-to-many
WITHOUT_CLASSIFICATION	//if there is a user-specified loader, return that //TODO: filters!?
WITHOUT_CLASSIFICATION	// Take care of any entities that might have // been evicted!	
WITHOUT_CLASSIFICATION	//strip leading ','
WITHOUT_CLASSIFICATION	// Run a subquery loader
WITHOUT_CLASSIFICATION	//needed by arrays
WITHOUT_CLASSIFICATION	//TODO: something with formulas...
WITHOUT_CLASSIFICATION	//an assertion
WITHOUT_CLASSIFICATION	// Remove all the old entries
WITHOUT_CLASSIFICATION	//create all the new entries
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	/*&& !indexIsFormula*/
WITHOUT_CLASSIFICATION	//delete all the deleted entries
WITHOUT_CLASSIFICATION	//insert all the new entries
WITHOUT_CLASSIFICATION	//==elementType ??
WITHOUT_CLASSIFICATION	//update all the modified entries
WITHOUT_CLASSIFICATION	//identifier collections not supported for 1-to-many
WITHOUT_CLASSIFICATION	// update removed rows fks to null
WITHOUT_CLASSIFICATION	// will still be issued when it used to be null
WITHOUT_CLASSIFICATION	// now update all changed or added rows fks
WITHOUT_CLASSIFICATION	//			buf.append( selectFragment( lhsAlias, "" ) )//ignore suffix for collection columns!
WITHOUT_CLASSIFICATION	//use suffix for the entity columns
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	//private final String rootTableName;
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	//Custom SQL
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	// Execute the SQL:
WITHOUT_CLASSIFICATION	// This could also just be true all the time...
WITHOUT_CLASSIFICATION	//chop the last union (all)
WITHOUT_CLASSIFICATION	//TODO: check this....
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	// properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE
WITHOUT_CLASSIFICATION	//MULTITABLES
WITHOUT_CLASSIFICATION	// Custom sql
WITHOUT_CLASSIFICATION	// subclass closure properties
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	// don't need subclass tables, because they can't appear in conditions
WITHOUT_CLASSIFICATION	// special case where we need to force incloude all subclass joins
WITHOUT_CLASSIFICATION	// the class hierarchy structure
WITHOUT_CLASSIFICATION	// properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	//get em on the second pass!
WITHOUT_CLASSIFICATION	// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)
WITHOUT_CLASSIFICATION	// discriminator column
WITHOUT_CLASSIFICATION	//INITIALIZATION:
WITHOUT_CLASSIFICATION	//private final Map propertyTableNumbersByName = new HashMap();
WITHOUT_CLASSIFICATION	// CLASS + TABLE
WITHOUT_CLASSIFICATION	// DISCRIMINATOR
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	// Execute the SQL:
WITHOUT_CLASSIFICATION	// JOINS
WITHOUT_CLASSIFICATION	//propertyTableNumbersByName.put( prop.getName(), join );
WITHOUT_CLASSIFICATION	//Access cached SQL
WITHOUT_CLASSIFICATION	//figure out which tables need to be fetched
WITHOUT_CLASSIFICATION	//figure out which columns are needed
WITHOUT_CLASSIFICATION	//figure out which formulas are needed
WITHOUT_CLASSIFICATION	//render the SQL
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The optional SQL string defined in the where attribute
WITHOUT_CLASSIFICATION	//information about lazy properties of this class
WITHOUT_CLASSIFICATION	//information about all properties in class hierarchy
WITHOUT_CLASSIFICATION	//information about all columns/formulas in class hierarchy
WITHOUT_CLASSIFICATION	// dynamic filters attached to the class-level
WITHOUT_CLASSIFICATION	// SQL strings
WITHOUT_CLASSIFICATION	// for objects that came in via update()
WITHOUT_CLASSIFICATION	// PROPERTIES
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// IDENTIFIER
WITHOUT_CLASSIFICATION	// VERSION
WITHOUT_CLASSIFICATION	//WHERE STRING
WITHOUT_CLASSIFICATION	// SUBCLASS PROPERTY CLOSURE
WITHOUT_CLASSIFICATION	//before add :-)
WITHOUT_CLASSIFICATION	// Handle any filters applied to the class level
WITHOUT_CLASSIFICATION	// only one-to-one is lazy fetched
WITHOUT_CLASSIFICATION	//note early exit here:
WITHOUT_CLASSIFICATION	// object have been loaded with setReadOnly(true); HHH-2236
WITHOUT_CLASSIFICATION	// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
WITHOUT_CLASSIFICATION	//strip leading ", "
WITHOUT_CLASSIFICATION	//if there is no resulting row, return null
WITHOUT_CLASSIFICATION	//otherwise return the "hydrated" state (ie. associations are not resolved)
WITHOUT_CLASSIFICATION	//null owner ok??
WITHOUT_CLASSIFICATION	// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...
WITHOUT_CLASSIFICATION	// Create a new FROM node for the referenced class.
WITHOUT_CLASSIFICATION	// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...
WITHOUT_CLASSIFICATION	// performance op to avoid the array search
WITHOUT_CLASSIFICATION	// properly handle property-ref-based associations
WITHOUT_CLASSIFICATION	//Enable for HHH-440, which we don't like:
WITHOUT_CLASSIFICATION	// ALIASES
WITHOUT_CLASSIFICATION	// aliases named identifier ( alias.idname )
WITHOUT_CLASSIFICATION	// aliases for composite-id's
WITHOUT_CLASSIFICATION	// Fetch embedded identifiers propertynames from the "virtual" identifier component
WITHOUT_CLASSIFICATION	// embedded composite ids ( alias.idname1, alias.idname2 )
WITHOUT_CLASSIFICATION	// TODO: skip formulas?
WITHOUT_CLASSIFICATION	//don't need filters for the static loaders
WITHOUT_CLASSIFICATION	//do two passes, for collection property-ref!
WITHOUT_CLASSIFICATION	// select the correct row by either pk or rowid
WITHOUT_CLASSIFICATION	//TODO: eventually, rowIdName[j]
WITHOUT_CLASSIFICATION	// this is a property of the table, which we are updating
WITHOUT_CLASSIFICATION	// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	// we are using "all" or "dirty" property-based optimistic locking
WITHOUT_CLASSIFICATION	// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here
WITHOUT_CLASSIFICATION	// this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	// add normal properties
WITHOUT_CLASSIFICATION	// add the discriminator
WITHOUT_CLASSIFICATION	// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type
WITHOUT_CLASSIFICATION	// add normal properties
WITHOUT_CLASSIFICATION	// this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	// add the discriminator
WITHOUT_CLASSIFICATION	// add the primary key
WITHOUT_CLASSIFICATION	// delegate already handles PK columns
WITHOUT_CLASSIFICATION	// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param
WITHOUT_CLASSIFICATION	// Render the SQL query
WITHOUT_CLASSIFICATION	// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state
WITHOUT_CLASSIFICATION	// TODO : shouldnt inserts be Expectations.NONE?
WITHOUT_CLASSIFICATION	//don't bother trying to update, we know there is no row there yet
WITHOUT_CLASSIFICATION	//if all fields are null, we might need to delete existing row
WITHOUT_CLASSIFICATION	//there is probably a row there, so try to update //if no rows were updated, we will find out
WITHOUT_CLASSIFICATION	//note: updates to joined tables can't be batched...
WITHOUT_CLASSIFICATION	// starting index
WITHOUT_CLASSIFICATION	//Now write the values of fields onto the prepared statement
WITHOUT_CLASSIFICATION	// Write any appropriate versioning conditional parameters
WITHOUT_CLASSIFICATION	//Render the SQL query
WITHOUT_CLASSIFICATION	// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued
WITHOUT_CLASSIFICATION	// We should use the _current_ object state (ie. after any updates that occurred during flush)
WITHOUT_CLASSIFICATION	// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)
WITHOUT_CLASSIFICATION	// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type
WITHOUT_CLASSIFICATION	// For the case of dynamic-update="true", we need to generate the UPDATE SQL
WITHOUT_CLASSIFICATION	// don't need to check laziness (dirty checking algorithm handles that)
WITHOUT_CLASSIFICATION	// For the case of dynamic-update="false", or no snapshot, we use the static SQL
WITHOUT_CLASSIFICATION	// if not "get", then try "is"
WITHOUT_CLASSIFICATION	// Now update only the tables with dirty properties (and the table with the version number)
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	// For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	// not supported
WITHOUT_CLASSIFICATION	// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	// we need to utilize dynamic delete statements
WITHOUT_CLASSIFICATION	// otherwise, utilize the static delete statements
WITHOUT_CLASSIFICATION	//just a performance opt!
WITHOUT_CLASSIFICATION	//just a performance opt!
WITHOUT_CLASSIFICATION	//all joins join to the pk of the driving table
WITHOUT_CLASSIFICATION	//notice that we skip the first table; it is the driving table!
WITHOUT_CLASSIFICATION	//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables
WITHOUT_CLASSIFICATION	//skip the driving table
WITHOUT_CLASSIFICATION	//get 'em in the right order (not that it really matters)
WITHOUT_CLASSIFICATION	// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases
WITHOUT_CLASSIFICATION	//render the where and from parts
WITHOUT_CLASSIFICATION	//we *could* regerate this inside each called method!
WITHOUT_CLASSIFICATION	//now render the joins
WITHOUT_CLASSIFICATION	// This will add the new from element to the origin.
WITHOUT_CLASSIFICATION	//now render the select clause
WITHOUT_CLASSIFICATION	//now tie it all together
WITHOUT_CLASSIFICATION	//insert/update/delete SQL
WITHOUT_CLASSIFICATION	//select SQL
WITHOUT_CLASSIFICATION	//no need to check laziness, dirty checking handles that
WITHOUT_CLASSIFICATION	// Fully resolve the map reference, create implicit joins.
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// The basic implementation is to simply use the node's text
WITHOUT_CLASSIFICATION	// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.
WITHOUT_CLASSIFICATION	// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.
WITHOUT_CLASSIFICATION	// check the version unsaved-value, if appropriate
WITHOUT_CLASSIFICATION	// let this take precedence if defined, since it works for // assigned identifiers
WITHOUT_CLASSIFICATION	// check the id unsaved-value
WITHOUT_CLASSIFICATION	// check to see if it is in the second-level cache
WITHOUT_CLASSIFICATION	///////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// For property references generate <tablealias>.<columnname> as <projectionalias>
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//if there is no resulting row, return null
WITHOUT_CLASSIFICATION	//force immediate execution of the insert
WITHOUT_CLASSIFICATION	// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.
WITHOUT_CLASSIFICATION	// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//cannot occur
WITHOUT_CLASSIFICATION	//cannot occur
WITHOUT_CLASSIFICATION	// only carry on if the method has no parameters
WITHOUT_CLASSIFICATION	// try "get"
WITHOUT_CLASSIFICATION	// do nothing...
WITHOUT_CLASSIFICATION	// do nothing...
WITHOUT_CLASSIFICATION	// should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	// this page intentionally left blank :)
WITHOUT_CLASSIFICATION	// do not do anything
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//cant instantiate
WITHOUT_CLASSIFICATION	//if it is a property of an embedded component, invoke on the "identifier"
WITHOUT_CLASSIFICATION	// otherwise:
WITHOUT_CLASSIFICATION	// skip finalize methods
WITHOUT_CLASSIFICATION	// note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.
WITHOUT_CLASSIFICATION	// while constructor is running
WITHOUT_CLASSIFICATION	// while constructor is running
WITHOUT_CLASSIFICATION	// note: interface is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	// interfaces // arguments
WITHOUT_CLASSIFICATION	//TODO!
WITHOUT_CLASSIFICATION	// Get the caller
WITHOUT_CLASSIFICATION	// Get the caller principals
WITHOUT_CLASSIFICATION	//private static final Alias DEFAULT_ALIAS = new Alias(10, null);
WITHOUT_CLASSIFICATION	// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally
WITHOUT_CLASSIFICATION	//if the identifier is quoted, remove the quotes
WITHOUT_CLASSIFICATION	//truncate the identifier to the max alias length, less the suffix length
WITHOUT_CLASSIFICATION	//full joins are not supported.. yet!
WITHOUT_CLASSIFICATION	// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1
WITHOUT_CLASSIFICATION	// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	//$NON-NLS-1
WITHOUT_CLASSIFICATION	// strip off any leading 'and' token
WITHOUT_CLASSIFICATION	// if the condition is not already there...
WITHOUT_CLASSIFICATION	//dontSpace.add("'");
WITHOUT_CLASSIFICATION	//for MySQL
WITHOUT_CLASSIFICATION	//HashMap columnsUnique = new HashMap();
WITHOUT_CLASSIFICATION	//null caused some problems
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//not sure if this would ever be null but wanted to be careful
WITHOUT_CLASSIFICATION	//even on inverse="true"
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	// If true then execute db updates, otherwise just generate and display updates
WITHOUT_CLASSIFICATION	// we only release the connection
WITHOUT_CLASSIFICATION	// deprecated option...
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback
WITHOUT_CLASSIFICATION	// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)
WITHOUT_CLASSIFICATION	// Create an DotNode AST for the path and resolve it.
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)
WITHOUT_CLASSIFICATION	// swallow it, and continue to roll back JTA transaction
WITHOUT_CLASSIFICATION	// so the transaction is already rolled back, by JTA spec
WITHOUT_CLASSIFICATION	// this method is a noop if there is a Synchronization!
WITHOUT_CLASSIFICATION	// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join
WITHOUT_CLASSIFICATION	// WebSphere, however, is not a sane JEE/JTA container...
WITHOUT_CLASSIFICATION	// for sane JEE/JTA containers, the transaction itself functions as its identifier...
WITHOUT_CLASSIFICATION	//swallow, the transaction was finished
WITHOUT_CLASSIFICATION	// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// Create the join element under the from element.
WITHOUT_CLASSIFICATION	// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// map of EntityMode -> Tuplizer
WITHOUT_CLASSIFICATION	// this is a virtual id property...
WITHOUT_CLASSIFICATION	//this one needed only for guessEntityMode()
WITHOUT_CLASSIFICATION	// create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
WITHOUT_CLASSIFICATION	// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	// Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	// then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	// Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	// put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	// found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	//	private final SessionFactoryImplementor sessionFactory;
WITHOUT_CLASSIFICATION	// cached for efficiency...
WITHOUT_CLASSIFICATION	//	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {
WITHOUT_CLASSIFICATION	//		this.sessionFactory = sessionFactory;
WITHOUT_CLASSIFICATION	//it was not embedded, so the argument is just an id
WITHOUT_CLASSIFICATION	// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	// then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	// put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	// then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	//return currentId;
WITHOUT_CLASSIFICATION	//reset the id
WITHOUT_CLASSIFICATION	//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)
WITHOUT_CLASSIFICATION	//reset the version
WITHOUT_CLASSIFICATION	// the default is to simply not lazy fetch properties for now...
WITHOUT_CLASSIFICATION	// Add the second join, the one that ends in the destination table.
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy
WITHOUT_CLASSIFICATION	//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();
WITHOUT_CLASSIFICATION	//not final because proxy factory creation can fail
WITHOUT_CLASSIFICATION	// superclass entity-name
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//init the aliases, after initing the constructornode
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// legacy behavior (with no abstract attribute specified)
WITHOUT_CLASSIFICATION	// Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//note: this affects the return value!
WITHOUT_CLASSIFICATION	// Need to account for allowable '_' within the variant
WITHOUT_CLASSIFICATION	// Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	// Collection Types:
WITHOUT_CLASSIFICATION	// convenience methods relating to operations across arrays of types...
WITHOUT_CLASSIFICATION	//lobs cannot be compared
WITHOUT_CLASSIFICATION	//Blobs are ignored by merge()
WITHOUT_CLASSIFICATION	//value is the entity name
WITHOUT_CLASSIFICATION	//EARLY EXIT!
WITHOUT_CLASSIFICATION	// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().
WITHOUT_CLASSIFICATION	//TODO!
WITHOUT_CLASSIFICATION	//xml is the entity name
WITHOUT_CLASSIFICATION	//special case ... this is the leaf of the containment graph, even though not immutable
WITHOUT_CLASSIFICATION	//tolerates nulls
WITHOUT_CLASSIFICATION	/*sqlResultTypeList,*/
WITHOUT_CLASSIFICATION	// metaType is assumed to be single-column type
WITHOUT_CLASSIFICATION	// Get all the select expressions (that we just generated) and render the select.
WITHOUT_CLASSIFICATION	// Look through the FromElement's children to find any collections of values that should be fetched...
WITHOUT_CLASSIFICATION	//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...
WITHOUT_CLASSIFICATION	// Use the lower case function name. // Remember whether we're in a SELECT clause or not.
WITHOUT_CLASSIFICATION	// IDENT might be the name of a class.
WITHOUT_CLASSIFICATION	//TODO!!!
WITHOUT_CLASSIFICATION	//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
WITHOUT_CLASSIFICATION	//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only
WITHOUT_CLASSIFICATION	// both are Timestamps
WITHOUT_CLASSIFICATION	// at least one is a plain old Date
WITHOUT_CLASSIFICATION	//noop
WITHOUT_CLASSIFICATION	// if the corresponding SQL value is NULL, the reader we got is NULL as well
WITHOUT_CLASSIFICATION	// Fetch Reader content up to the end - and put characters in a StringBuffer
WITHOUT_CLASSIFICATION	// Return StringBuffer content as a large String
WITHOUT_CLASSIFICATION	//or Types.LONGVARCHAR?
WITHOUT_CLASSIFICATION	//Not called at runtime so doesn't matter if its slow :)
WITHOUT_CLASSIFICATION	//TODO
WITHOUT_CLASSIFICATION	// Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	//different nullability rules for pk/fk
WITHOUT_CLASSIFICATION	//cache this
WITHOUT_CLASSIFICATION	//only really need new array during semiresolve!
WITHOUT_CLASSIFICATION	// Forcefully remove leading ands from where fragments; the grammar will // handle adding them
WITHOUT_CLASSIFICATION	//TODO!!!!!!!
WITHOUT_CLASSIFICATION	// Create a new FILTERS node as a parent of all filters
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;
WITHOUT_CLASSIFICATION	//nothing to do
WITHOUT_CLASSIFICATION	//nothing to do
WITHOUT_CLASSIFICATION	// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...
WITHOUT_CLASSIFICATION	//lobs cannot be compared
WITHOUT_CLASSIFICATION	//not really necessary, I guess...
WITHOUT_CLASSIFICATION	//Clobs are ignored by merge() operation
WITHOUT_CLASSIFICATION	// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!
WITHOUT_CLASSIFICATION	// collections cannot be compared
WITHOUT_CLASSIFICATION	//remember the uk value
WITHOUT_CLASSIFICATION	//NOOP
WITHOUT_CLASSIFICATION	//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);
WITHOUT_CLASSIFICATION	//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly
WITHOUT_CLASSIFICATION	// collections don't dirty an unversioned parent entity
WITHOUT_CLASSIFICATION	// return false;
WITHOUT_CLASSIFICATION	// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception
WITHOUT_CLASSIFICATION	//NOTE: we avoid joining to the next table if the named property is just the foreign key value
WITHOUT_CLASSIFICATION	// the key is the owning entity itself, so get the ID from the key
WITHOUT_CLASSIFICATION	// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...
WITHOUT_CLASSIFICATION	//ignore subselect keywords
WITHOUT_CLASSIFICATION	// copy elements into newly empty target collection
WITHOUT_CLASSIFICATION	// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection
WITHOUT_CLASSIFICATION	// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...
WITHOUT_CLASSIFICATION	// get the elements back into the target making sure to handle dirty flag
WITHOUT_CLASSIFICATION	// check if collection is currently being loaded
WITHOUT_CLASSIFICATION	// check if it is already completely loaded, but unowned
WITHOUT_CLASSIFICATION	// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	//TODO!!!!!!!
WITHOUT_CLASSIFICATION	// create a new collection wrapper, to be initialized later
WITHOUT_CLASSIFICATION	// Some JDBC drivers erroneously return an empty array here for a null DB value :/
WITHOUT_CLASSIFICATION	// our column span is the number of columns in the PK
WITHOUT_CLASSIFICATION	//cannot batch fetch by unique key (property-ref associations)
WITHOUT_CLASSIFICATION	// we already know current is not null...
WITHOUT_CLASSIFICATION	// the ids are fully resolved, so compare them with isDirty(), not isModified()
WITHOUT_CLASSIFICATION	//the owner of the association is not the owner of the id
WITHOUT_CLASSIFICATION	// ----------------------------------------------------------- Constructors
WITHOUT_CLASSIFICATION	// ----------------------------------------------------- Instance Variables
WITHOUT_CLASSIFICATION	//	public static JDBCException newJDBCException(String string, SQLException root, String sql) { //		string = string + " [" + sql + ']'; //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root, sql); //	} // //	public static JDBCException newJDBCException(String string, SQLException root) { //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root); //	}
WITHOUT_CLASSIFICATION	// --------------------------------------------------------- Public Methods
WITHOUT_CLASSIFICATION	// Compare the two maps for equality
WITHOUT_CLASSIFICATION	// Simple tests that require no synchronization
WITHOUT_CLASSIFICATION	//Sybase fail if we don't do that, sigh...
WITHOUT_CLASSIFICATION	// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)
WITHOUT_CLASSIFICATION	// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	// try to "pretty print" it
WITHOUT_CLASSIFICATION	// otherwise, just dump it
WITHOUT_CLASSIFICATION	//its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	//its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	// use default behavior
WITHOUT_CLASSIFICATION	//NOTE: early return
WITHOUT_CLASSIFICATION	// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries
WITHOUT_CLASSIFICATION	// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere
WITHOUT_CLASSIFICATION	// Clone //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// Serialize //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	// stream closed in the finally
WITHOUT_CLASSIFICATION	// stream closed in the finally
WITHOUT_CLASSIFICATION	// Deserialize //-----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	/* static methods only - hide constructor */
WITHOUT_CLASSIFICATION	/*&& !('_'==character)*/
WITHOUT_CLASSIFICATION	// returnign null!
WITHOUT_CLASSIFICATION	// returnign null!
WITHOUT_CLASSIFICATION	// includes last '.'
WITHOUT_CLASSIFICATION	// +1 to include the following '.'
WITHOUT_CLASSIFICATION	// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	// first time we find match!
WITHOUT_CLASSIFICATION	// entityNames may now include slashes for the representations //classname may be an inner class
WITHOUT_CLASSIFICATION	// wrapped iterators
WITHOUT_CLASSIFICATION	// index of current iterator in the wrapped iterators array
WITHOUT_CLASSIFICATION	// the current iterator
WITHOUT_CLASSIFICATION	// the last used iterator
WITHOUT_CLASSIFICATION	//it was a boolean expression
WITHOUT_CLASSIFICATION	/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/
WITHOUT_CLASSIFICATION	// call this before any Iterator method to make sure that the current Iterator // is not exhausted
WITHOUT_CLASSIFICATION	//doable if needed
WITHOUT_CLASSIFICATION	// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)
WITHOUT_CLASSIFICATION	// peek ahead
WITHOUT_CLASSIFICATION	// if we reach the end of the string w/o finding the // matching end, that is an exception
WITHOUT_CLASSIFICATION	// we have a placeholder, spin forward till we find the end
WITHOUT_CLASSIFICATION	// make sure spinning forward did not put us past the end of the buffer...
WITHOUT_CLASSIFICATION	// First, try to locate this resource through the current // context classloader.
WITHOUT_CLASSIFICATION	// Next, try to locate this resource through this class's classloader
WITHOUT_CLASSIFICATION	// Next, try to locate this resource through the system classloader
WITHOUT_CLASSIFICATION	// Anywhere else we should look?
WITHOUT_CLASSIFICATION	// would need an IdentitySet for this!
WITHOUT_CLASSIFICATION	//Arrays.asList doesn't do primitive arrays
WITHOUT_CLASSIFICATION	//faster?
WITHOUT_CLASSIFICATION	// the name of a class
WITHOUT_CLASSIFICATION	// Its the listener class name
WITHOUT_CLASSIFICATION	//allow 9,8,7,6,5,4,3,2,1
WITHOUT_CLASSIFICATION	// default to element set if no elements() specified
WITHOUT_CLASSIFICATION	// look for the instance by uuid
WITHOUT_CLASSIFICATION	// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	// first, lets determine whether to apply cglib or javassist based instrumentation...
WITHOUT_CLASSIFICATION	// Make sure we don't override previous set values
WITHOUT_CLASSIFICATION	//entirely optional!!
WITHOUT_CLASSIFICATION	// Its the listener instance (or better be)
WITHOUT_CLASSIFICATION	//context.unbind(boundName);
WITHOUT_CLASSIFICATION	//readResolveObject
WITHOUT_CLASSIFICATION	//cfg.setProperty("hibernate.show_sql", "true");
WITHOUT_CLASSIFICATION	// Defensive, convenience methods
WITHOUT_CLASSIFICATION	// Create the SessionFactory from hibernate.cfg.xml
WITHOUT_CLASSIFICATION	// Make sure you log the exception, as it might be swallowed
WITHOUT_CLASSIFICATION	// Begin unit of work
WITHOUT_CLASSIFICATION	// Write HTML header
WITHOUT_CLASSIFICATION	// Handle actions
WITHOUT_CLASSIFICATION	// Print page
WITHOUT_CLASSIFICATION	// Write HTML footer
WITHOUT_CLASSIFICATION	// End unit of work
WITHOUT_CLASSIFICATION	// Start the session to be used for this request
WITHOUT_CLASSIFICATION	// make the session available to the session factory's "current context"
WITHOUT_CLASSIFICATION	// pass control along to the rest of the processing chain
WITHOUT_CLASSIFICATION	// remove session from "current context"
WITHOUT_CLASSIFICATION	// Eager fetch the collection so we can use it detached
WITHOUT_CLASSIFICATION	// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:
WITHOUT_CLASSIFICATION	/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */
WITHOUT_CLASSIFICATION	// End of first unit of work
WITHOUT_CLASSIFICATION	// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);
WITHOUT_CLASSIFICATION	// Begin second unit of work
WITHOUT_CLASSIFICATION	// Reattachment of aPerson
WITHOUT_CLASSIFICATION	// The getEmailAddresses() might trigger a lazy load of the collection
WITHOUT_CLASSIFICATION	// We need our tm, so get it now and avoid doing other work // if there is a problem
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
WITHOUT_CLASSIFICATION	// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates
WITHOUT_CLASSIFICATION	// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened
WITHOUT_CLASSIFICATION	//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations
WITHOUT_CLASSIFICATION	// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.
WITHOUT_CLASSIFICATION	// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these
WITHOUT_CLASSIFICATION	// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn
WITHOUT_CLASSIFICATION	// (AS is always optional, for consistency with SQL/OQL)
WITHOUT_CLASSIFICATION	// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction
WITHOUT_CLASSIFICATION	// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events
WITHOUT_CLASSIFICATION	// is a primitive type // invokespecial
WITHOUT_CLASSIFICATION	// array of primitive type // do nothing
WITHOUT_CLASSIFICATION	// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style
WITHOUT_CLASSIFICATION	//handle <=, >=, !=, is not, not between, not in
WITHOUT_CLASSIFICATION	// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
WITHOUT_CLASSIFICATION	// transfer an explicitly defined entity name // handle the lazy attribute
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	//keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	// get meta's from // <joined-subclass>
WITHOUT_CLASSIFICATION	// parameters on the property mapping should // override parameters in the typedef
WITHOUT_CLASSIFICATION	//fetch="join" overrides default laziness //fetch="join" overrides default laziness
WITHOUT_CLASSIFICATION	//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many
WITHOUT_CLASSIFICATION	// so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}
WITHOUT_CLASSIFICATION	//element //index -> id
WITHOUT_CLASSIFICATION	// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!
WITHOUT_CLASSIFICATION	// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization
WITHOUT_CLASSIFICATION	// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...
WITHOUT_CLASSIFICATION	// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.
WITHOUT_CLASSIFICATION	//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
WITHOUT_CLASSIFICATION	// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html
WITHOUT_CLASSIFICATION	// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );
WITHOUT_CLASSIFICATION	//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.
WITHOUT_CLASSIFICATION	// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
WITHOUT_CLASSIFICATION	// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.
WITHOUT_CLASSIFICATION	// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list
WITHOUT_CLASSIFICATION	//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed 
WITHOUT_CLASSIFICATION	// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY,        "binary($1)"); // changed 08-11-2005, jsl
WITHOUT_CLASSIFICATION	// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );
WITHOUT_CLASSIFICATION	// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type
WITHOUT_CLASSIFICATION	// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy
WITHOUT_CLASSIFICATION	//Named Queries:
WITHOUT_CLASSIFICATION	// this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast
WITHOUT_CLASSIFICATION	// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.
WITHOUT_CLASSIFICATION	// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)
WITHOUT_CLASSIFICATION	// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...
WITHOUT_CLASSIFICATION	// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)
WITHOUT_CLASSIFICATION	//slice, to get the columns for this component //property
WITHOUT_CLASSIFICATION	//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;
WITHOUT_CLASSIFICATION	// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.
WITHOUT_CLASSIFICATION	// detached collection wrappers that get found + reattached // during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message
WITHOUT_CLASSIFICATION	// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value
WITHOUT_CLASSIFICATION	// ie. we never have to null out a reference to // an uninitialized proxy
WITHOUT_CLASSIFICATION	// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack
WITHOUT_CLASSIFICATION	// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently, not yet used...
WITHOUT_CLASSIFICATION	// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...
WITHOUT_CLASSIFICATION	// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	// wrap up any new collections directly referenced by the object // or its components
WITHOUT_CLASSIFICATION	// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...
WITHOUT_CLASSIFICATION	// upgrade the lock if necessary: //lock(result, lockMode);
WITHOUT_CLASSIFICATION	// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush
WITHOUT_CLASSIFICATION	//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in
WITHOUT_CLASSIFICATION	// Sub-insertions should occur before containing insertion so // Try to do the callback now
WITHOUT_CLASSIFICATION	//the entity is not associated with the session, so //try interceptor and unsaved-value
WITHOUT_CLASSIFICATION	//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)
WITHOUT_CLASSIFICATION	// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"
WITHOUT_CLASSIFICATION	// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.
WITHOUT_CLASSIFICATION	// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed
WITHOUT_CLASSIFICATION	// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by
WITHOUT_CLASSIFICATION	// ... and the token could be an identifer and the error is // a mismatched token error ...
WITHOUT_CLASSIFICATION	// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...
WITHOUT_CLASSIFICATION	//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();
WITHOUT_CLASSIFICATION	// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.
WITHOUT_CLASSIFICATION	// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.
WITHOUT_CLASSIFICATION	// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.
WITHOUT_CLASSIFICATION	//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role
WITHOUT_CLASSIFICATION	// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).
WITHOUT_CLASSIFICATION	/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/
WITHOUT_CLASSIFICATION	// here, we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name
WITHOUT_CLASSIFICATION	// Set the unresolved path in this node and the parent. // Set the text for the parent.
WITHOUT_CLASSIFICATION	// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).
WITHOUT_CLASSIFICATION	// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.
WITHOUT_CLASSIFICATION	// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias
WITHOUT_CLASSIFICATION	// Not a collection? // Return the entity property mapping.
WITHOUT_CLASSIFICATION	// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...
WITHOUT_CLASSIFICATION	// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.
WITHOUT_CLASSIFICATION	// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.
WITHOUT_CLASSIFICATION	// check to see if our "propPath" actually // represents a property on the persister
WITHOUT_CLASSIFICATION	// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.
WITHOUT_CLASSIFICATION	// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:
WITHOUT_CLASSIFICATION	// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.
WITHOUT_CLASSIFICATION	//		origin.addDestination(destination); // Add the query spaces.
WITHOUT_CLASSIFICATION	// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.
WITHOUT_CLASSIFICATION	// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.
WITHOUT_CLASSIFICATION	//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();
WITHOUT_CLASSIFICATION	//sqlResultTypeList.add( type ); // Generate the select expression.
WITHOUT_CLASSIFICATION	// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).
WITHOUT_CLASSIFICATION	// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing
WITHOUT_CLASSIFICATION	// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.
WITHOUT_CLASSIFICATION	// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...
WITHOUT_CLASSIFICATION	// classic translator does not support collection of ordinal // param metadata
WITHOUT_CLASSIFICATION	// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.
WITHOUT_CLASSIFICATION	// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
WITHOUT_CLASSIFICATION	// should not be able to reach last without maxPosition being set // unless there are no results
WITHOUT_CLASSIFICATION	// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch
WITHOUT_CLASSIFICATION	//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!
WITHOUT_CLASSIFICATION	// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.
WITHOUT_CLASSIFICATION	// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping
WITHOUT_CLASSIFICATION	//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch
WITHOUT_CLASSIFICATION	// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)
WITHOUT_CLASSIFICATION	// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)
WITHOUT_CLASSIFICATION	// assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	// log a message about potential connection leaks
WITHOUT_CLASSIFICATION	//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!
WITHOUT_CLASSIFICATION	// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop
WITHOUT_CLASSIFICATION	// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance
WITHOUT_CLASSIFICATION	// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode
WITHOUT_CLASSIFICATION	// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//isSet = collection.isSet(); //isSorted = collection.isSorted();
WITHOUT_CLASSIFICATION	//lists, arrays //sets, maps, bags
WITHOUT_CLASSIFICATION	// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching
WITHOUT_CLASSIFICATION	//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)
WITHOUT_CLASSIFICATION	// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure
WITHOUT_CLASSIFICATION	// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.
WITHOUT_CLASSIFICATION	// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!
WITHOUT_CLASSIFICATION	//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time
WITHOUT_CLASSIFICATION	// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)
WITHOUT_CLASSIFICATION	// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...
WITHOUT_CLASSIFICATION	// we *always* assume an instance with a null // identifier or no identifier property is unsaved!
WITHOUT_CLASSIFICATION	// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
WITHOUT_CLASSIFICATION	//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter
WITHOUT_CLASSIFICATION	//following doesn't handle (null, not null) but unnecessary //since this would mean all rows
WITHOUT_CLASSIFICATION	// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer
WITHOUT_CLASSIFICATION	// we need to dirty check collections, since they can cause an owner // version number increment
WITHOUT_CLASSIFICATION	//return the id, so we can use it to reset the proxy id //return result;
WITHOUT_CLASSIFICATION	//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);
WITHOUT_CLASSIFICATION	// cache the actual id of the object, not the value of the // property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier
WITHOUT_CLASSIFICATION	// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object
WITHOUT_CLASSIFICATION	//not absolutely necessary, but helps for some //equals()/hashCode() implementations
WITHOUT_CLASSIFICATION	//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value
WITHOUT_CLASSIFICATION	// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache
WITHOUT_CLASSIFICATION	// can't just return null here, since that would // cause an owning component to become null
WITHOUT_CLASSIFICATION	//for arrays, replaceElements() may return a different reference, since //the array length might not match
WITHOUT_CLASSIFICATION	// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).
WITHOUT_CLASSIFICATION	// as soon as we encounter our first letter, return the substring // from that position
WITHOUT_CLASSIFICATION	// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma
WITHOUT_CLASSIFICATION	// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...
WITHOUT_CLASSIFICATION	// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods
WITHOUT_CLASSIFICATION	// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).
WITHOUT_CLASSIFICATION	// and perform the load
WITHOUT_CLASSIFICATION	//important: reuse the same event instances for performance!
WITHOUT_CLASSIFICATION	//this is a query and we are loading multiple instances of the same collection role
WITHOUT_CLASSIFICATION	// we found a collection element in the result set
WITHOUT_CLASSIFICATION	// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection
WITHOUT_CLASSIFICATION	// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set
WITHOUT_CLASSIFICATION	// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested
WITHOUT_CLASSIFICATION	// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)
WITHOUT_CLASSIFICATION	// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"
WITHOUT_CLASSIFICATION	//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	//first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	//first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	//it does not refer to an alias of a projection, //look for a property
WITHOUT_CLASSIFICATION	// determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	// Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	//        }
WITHOUT_CLASSIFICATION	//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}
WITHOUT_CLASSIFICATION	//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();
WITHOUT_CLASSIFICATION	//include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();
WITHOUT_CLASSIFICATION	//NONE, because its the requested lock mode, not the actual! 
WITHOUT_CLASSIFICATION	// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).
WITHOUT_CLASSIFICATION	// the column doesnt exist at all.
WITHOUT_CLASSIFICATION	// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property
WITHOUT_CLASSIFICATION	// we have an embedded composite identifier
WITHOUT_CLASSIFICATION	// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/
WITHOUT_CLASSIFICATION	// SUBCLASSES
WITHOUT_CLASSIFICATION	// Custom sql
WITHOUT_CLASSIFICATION	/*protected void initPropertyPaths(			final String path,			final Type type,			final String[] columns,			final String[] formulaTemplates,			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path, type, formulaTemplates);		initPropertyPaths(path, type, columns, formulaTemplates, factory);	}*/
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	//Custom SQL (would be better if these were private)
WITHOUT_CLASSIFICATION	// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
WITHOUT_CLASSIFICATION	//decide which ResultSet to get the property value from:
WITHOUT_CLASSIFICATION	//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:
WITHOUT_CLASSIFICATION	// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.
WITHOUT_CLASSIFICATION	// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
WITHOUT_CLASSIFICATION	// cache these since they are stateless // this one could even be static...
WITHOUT_CLASSIFICATION	//"as" is not in KEYWORDS
WITHOUT_CLASSIFICATION	// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);
WITHOUT_CLASSIFICATION	//use the id column alias
WITHOUT_CLASSIFICATION	//private List aliases = new ArrayList();
WITHOUT_CLASSIFICATION	//columns.add(columnName); //aliases.add(tableAlias);
WITHOUT_CLASSIFICATION	//where fragment must be empty!
WITHOUT_CLASSIFICATION	// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.
WITHOUT_CLASSIFICATION	//arbitrary on clause ignored!!
WITHOUT_CLASSIFICATION	// might happen with a managed connection
WITHOUT_CLASSIFICATION	// might happen with a managed connection
WITHOUT_CLASSIFICATION	//if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.
WITHOUT_CLASSIFICATION	/*package*/
WITHOUT_CLASSIFICATION	//swallow it (the transaction _was_ successful or successfully rolled back)
WITHOUT_CLASSIFICATION	// ignore it
WITHOUT_CLASSIFICATION	// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information
WITHOUT_CLASSIFICATION	// create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx
WITHOUT_CLASSIFICATION	// then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	// Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...
WITHOUT_CLASSIFICATION	// need to extract the component values and check for subtype replacements...
WITHOUT_CLASSIFICATION	// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)
WITHOUT_CLASSIFICATION	// Configure the cache to use our TM
WITHOUT_CLASSIFICATION	//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();
WITHOUT_CLASSIFICATION	// Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	// some collections are not lazy:
WITHOUT_CLASSIFICATION	// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster
WITHOUT_CLASSIFICATION	// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!
WITHOUT_CLASSIFICATION	// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.
WITHOUT_CLASSIFICATION	// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// local cache, so we use synchronization
WITHOUT_CLASSIFICATION	// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)
WITHOUT_CLASSIFICATION	//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache
WITHOUT_CLASSIFICATION	// intentionally empty
