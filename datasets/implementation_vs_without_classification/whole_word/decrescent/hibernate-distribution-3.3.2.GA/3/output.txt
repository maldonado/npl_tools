// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9985810496115235	WITHOUT_CLASSIFICATION	0.0014189503884764905	IMPLEMENTATION
// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )	IMPLEMENTATION	0.9985810496115235	WITHOUT_CLASSIFICATION	0.0014189503884764905	IMPLEMENTATION
//TODO: return new Lock(ts);	IMPLEMENTATION	0.9940038294824498	WITHOUT_CLASSIFICATION	0.005996170517550195	IMPLEMENTATION
//TODO: if lock.getTimestamp().equals(ts)	IMPLEMENTATION	0.9981748055171625	WITHOUT_CLASSIFICATION	0.001825194482837478	IMPLEMENTATION
//TODO mappings.getLogicalTableName(ownerTable)	IMPLEMENTATION	0.9813660504572733	WITHOUT_CLASSIFICATION	0.01863394954272667	IMPLEMENTATION
// TODO: handle TypeDefs	IMPLEMENTATION	0.8309950529654271	IMPLEMENTATION	0.16900494703457292	WITHOUT_CLASSIFICATION
//TODO check there is no actual definition elemnents when a ref is defined	IMPLEMENTATION	0.9969149142590762	WITHOUT_CLASSIFICATION	0.0030850857409238696	IMPLEMENTATION
// TODO: bindpropertyresults(alias, returnElem)	IMPLEMENTATION	0.6460320781861427	IMPLEMENTATION	0.3539679218138572	WITHOUT_CLASSIFICATION
//TODO: validate existing of property with the chosen name. (secondpass )	IMPLEMENTATION	0.9959466411689377	WITHOUT_CLASSIFICATION	0.004053358831062286	IMPLEMENTATION
//TODO: native ids	IMPLEMENTATION	0.9658291673774378	WITHOUT_CLASSIFICATION	0.03417083262256215	IMPLEMENTATION
//TODO: if we are using identity columns, fetch the identifier	IMPLEMENTATION	0.9999349529609208	WITHOUT_CLASSIFICATION	6.504703907923154E-5	IMPLEMENTATION
//TODO: handle property-ref	IMPLEMENTATION	0.9734711593047013	WITHOUT_CLASSIFICATION	0.026528840695298737	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.98318012668301	WITHOUT_CLASSIFICATION	0.016819873316989985	IMPLEMENTATION
//TODO: get all properties, not just the fetched ones!	IMPLEMENTATION	0.98318012668301	WITHOUT_CLASSIFICATION	0.016819873316989985	IMPLEMENTATION
/**	IMPLEMENTATION	0.5188016214435129	IMPLEMENTATION	0.4811983785564869	WITHOUT_CLASSIFICATION
// TODO: RESTRICT VIOLATION	IMPLEMENTATION	0.5497423472841444	IMPLEMENTATION	0.4502576527158555	WITHOUT_CLASSIFICATION
// TODO: lowercasing done here. Was done "at random" before; maybe not needed at all ?	IMPLEMENTATION	0.9999711051079607	IMPLEMENTATION	2.8894892039335988E-5	WITHOUT_CLASSIFICATION
// TODO: toLowerCase was not done before. Only used in Template.	IMPLEMENTATION	0.8321047576658376	WITHOUT_CLASSIFICATION	0.1678952423341624	IMPLEMENTATION
// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number.	IMPLEMENTATION	0.9999472639950193	WITHOUT_CLASSIFICATION	5.273600498070762E-5	IMPLEMENTATION
//TODO: avoid this for non-new instances where mightBeDirty==false	IMPLEMENTATION	0.9669591767373406	WITHOUT_CLASSIFICATION	0.033040823262659495	IMPLEMENTATION
//TODO: optimize away this lookup for entities w/o unsaved-value="undefined"	IMPLEMENTATION	0.994776583982278	WITHOUT_CLASSIFICATION	0.005223416017722022	IMPLEMENTATION
// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:	IMPLEMENTATION	0.9998474383780397	WITHOUT_CLASSIFICATION	1.5256162196031542E-4	IMPLEMENTATION
//TODO: assertion only, could be optimized away	IMPLEMENTATION	0.9969829927751143	WITHOUT_CLASSIFICATION	0.003017007224885725	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9591755423604881	WITHOUT_CLASSIFICATION	0.040824457639511966	IMPLEMENTATION
//TODO: check that entry.getIdentifier().equals(requestedId)	IMPLEMENTATION	0.9591755423604881	WITHOUT_CLASSIFICATION	0.040824457639511966	IMPLEMENTATION
// TODO : why aren't these the same?	IMPLEMENTATION	0.7230421092818284	IMPLEMENTATION	0.27695789071817156	WITHOUT_CLASSIFICATION
//TODO: always true for now, but not if we later decide to support elements() in the from clause	IMPLEMENTATION	0.9928347336692092	WITHOUT_CLASSIFICATION	0.007165266330790846	IMPLEMENTATION
// TODO : or should we return 'containsTableAlias'??	IMPLEMENTATION	0.8395254376503279	IMPLEMENTATION	0.16047456234967203	WITHOUT_CLASSIFICATION
//TODO: arithmetic expressions, multiple new Foo(...)	IMPLEMENTATION	0.9952392197679568	WITHOUT_CLASSIFICATION	0.004760780232043195	IMPLEMENTATION
//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings	IMPLEMENTATION	0.612675638535761	WITHOUT_CLASSIFICATION	0.387324361464239	IMPLEMENTATION
//TODO: cache the persister, this shows up in yourkit	IMPLEMENTATION	0.9986482625538067	WITHOUT_CLASSIFICATION	0.0013517374461933828	IMPLEMENTATION
//TODO: theoretically non-threadsafe...	IMPLEMENTATION	0.9899858218479786	WITHOUT_CLASSIFICATION	0.010014178152021375	IMPLEMENTATION
// todo : look at optimizing these...	IMPLEMENTATION	0.9997320125000067	WITHOUT_CLASSIFICATION	2.679874999933492E-4	IMPLEMENTATION
//TODO: maybe call it getRowSelection() ?	IMPLEMENTATION	0.9440398209527873	WITHOUT_CLASSIFICATION	0.05596017904721283	IMPLEMENTATION
//TODO: make this handle multiple collection roles!	IMPLEMENTATION	0.740592369866454	WITHOUT_CLASSIFICATION	0.25940763013354595	IMPLEMENTATION
//TODO: can we limit stored procedures ?!	IMPLEMENTATION	0.9591029048786861	WITHOUT_CLASSIFICATION	0.04089709512131388	IMPLEMENTATION
// TODO: not visible to the user!	IMPLEMENTATION	0.9435515549205372	IMPLEMENTATION	0.05644844507946277	WITHOUT_CLASSIFICATION
//TODO: unnecessary for databases with ANSI-style joins	IMPLEMENTATION	0.9952626271121665	WITHOUT_CLASSIFICATION	0.004737372887833542	IMPLEMENTATION
//TODO: use these in methods above	IMPLEMENTATION	0.9983094664680875	WITHOUT_CLASSIFICATION	0.0016905335319124988	IMPLEMENTATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9411547437318915	IMPLEMENTATION	0.058845256268108555	WITHOUT_CLASSIFICATION
// TODO: better error message since we actually support composites if names are explicitly listed.	IMPLEMENTATION	0.9411547437318915	IMPLEMENTATION	0.058845256268108555	WITHOUT_CLASSIFICATION
// TODO : temporary initial step towards HHH-1907	IMPLEMENTATION	0.5234864791173715	WITHOUT_CLASSIFICATION	0.47651352088262844	IMPLEMENTATION
// todo : remove this once ComponentMetamodel is complete and merged	IMPLEMENTATION	0.9999011405278588	WITHOUT_CLASSIFICATION	9.885947214121112E-5	IMPLEMENTATION
//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far	IMPLEMENTATION	0.9967713458710179	WITHOUT_CLASSIFICATION	0.003228654128982231	IMPLEMENTATION
// TODO : still need to make CollectionPersisters EntityMode-aware	IMPLEMENTATION	0.9927794978405898	IMPLEMENTATION	0.0072205021594102786	WITHOUT_CLASSIFICATION
//TODO: add owner argument!!	IMPLEMENTATION	0.9900993291756179	WITHOUT_CLASSIFICATION	0.009900670824382124	IMPLEMENTATION
//TODO: formulas ?	IMPLEMENTATION	0.9711601711397966	WITHOUT_CLASSIFICATION	0.028839828860203403	IMPLEMENTATION
//TODO: include the rowids!!!!	IMPLEMENTATION	0.9923158655590288	WITHOUT_CLASSIFICATION	0.007684134440971211	IMPLEMENTATION
// todo : cache this sql...	IMPLEMENTATION	0.9996797146378245	WITHOUT_CLASSIFICATION	3.202853621755747E-4	IMPLEMENTATION
//TODO: create uk loaders for component properties	IMPLEMENTATION	0.998055074316945	WITHOUT_CLASSIFICATION	0.0019449256830550697	IMPLEMENTATION
//TODO: cache this in an instvar	IMPLEMENTATION	0.999519408011089	WITHOUT_CLASSIFICATION	4.8059198891112003E-4	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...	IMPLEMENTATION	0.5004249505250479	WITHOUT_CLASSIFICATION	0.49957504947495207	IMPLEMENTATION
//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);	IMPLEMENTATION	0.9409681344491484	WITHOUT_CLASSIFICATION	0.05903186555085159	IMPLEMENTATION
//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!	IMPLEMENTATION	0.9816401681804945	WITHOUT_CLASSIFICATION	0.018359831819505498	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9653935243741049	WITHOUT_CLASSIFICATION	0.03460647562589514	IMPLEMENTATION
//TODO: terrible implementation!	IMPLEMENTATION	0.9899858218479786	WITHOUT_CLASSIFICATION	0.010014178152021375	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9653935243741049	WITHOUT_CLASSIFICATION	0.03460647562589514	IMPLEMENTATION
// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()	IMPLEMENTATION	0.9532309775822427	IMPLEMENTATION	0.0467690224177573	WITHOUT_CLASSIFICATION
// TODO: check if key contains the owner ID	IMPLEMENTATION	0.6819623162466538	WITHOUT_CLASSIFICATION	0.3180376837533461	IMPLEMENTATION
//TODO: proxies!	IMPLEMENTATION	0.9653935243741049	WITHOUT_CLASSIFICATION	0.03460647562589514	IMPLEMENTATION
// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999956100740978	WITHOUT_CLASSIFICATION	4.389925902213822E-6	IMPLEMENTATION
// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null	IMPLEMENTATION	0.9999956100740978	WITHOUT_CLASSIFICATION	4.389925902213822E-6	IMPLEMENTATION
// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants ("nondeterminism"). //      TODO: cleanup the grammar so that "processConstants" is always just handled from here	IMPLEMENTATION	0.9985777854865489	IMPLEMENTATION	0.0014222145134511846	WITHOUT_CLASSIFICATION
//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables	IMPLEMENTATION	0.9996424497781174	WITHOUT_CLASSIFICATION	3.5755022188266664E-4	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995596918660518	WITHOUT_CLASSIFICATION	4.403081339483019E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999789729868744	WITHOUT_CLASSIFICATION	2.1027013125498112E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999789729868744	WITHOUT_CLASSIFICATION	2.1027013125498112E-5	IMPLEMENTATION
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999800552643814	WITHOUT_CLASSIFICATION	1.994473561863565E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9998787499130547	WITHOUT_CLASSIFICATION	1.2125008694527041E-4	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999966997036661	WITHOUT_CLASSIFICATION	3.300296333898833E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999966997036661	WITHOUT_CLASSIFICATION	3.300296333898833E-5	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999940462375132	WITHOUT_CLASSIFICATION	5.953762486799166E-6	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998320078345662	WITHOUT_CLASSIFICATION	1.6799216543379023E-4	IMPLEMENTATION
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999958695241585	WITHOUT_CLASSIFICATION	4.130475841503811E-5	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998921332212114	WITHOUT_CLASSIFICATION	1.0786677878863791E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999984402868421	WITHOUT_CLASSIFICATION	1.5597131578006577E-6	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999984402868421	WITHOUT_CLASSIFICATION	1.5597131578006577E-6	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999845960592274	WITHOUT_CLASSIFICATION	1.5403940772647496E-5	IMPLEMENTATION
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9995707499487058	WITHOUT_CLASSIFICATION	4.292500512942708E-4	IMPLEMENTATION
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999217828803643	WITHOUT_CLASSIFICATION	7.821711963570428E-5	IMPLEMENTATION
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999812636579605	WITHOUT_CLASSIFICATION	1.873634203945376E-5	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999544139017797	WITHOUT_CLASSIFICATION	4.558609822022431E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999820131461775	WITHOUT_CLASSIFICATION	1.7986853822498486E-5	IMPLEMENTATION
// ROW ID	WITHOUT_CLASSIFICATION	0.999970007917903	WITHOUT_CLASSIFICATION	2.999208209707591E-5	IMPLEMENTATION
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9991867972388033	WITHOUT_CLASSIFICATION	8.132027611966403E-4	IMPLEMENTATION
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9993917403096593	WITHOUT_CLASSIFICATION	6.082596903407115E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999908763559854	WITHOUT_CLASSIFICATION	9.123644014696066E-6	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9997574925939628	WITHOUT_CLASSIFICATION	2.4250740603726809E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999844553891157	WITHOUT_CLASSIFICATION	1.554461088427157E-5	IMPLEMENTATION
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9995001173383243	WITHOUT_CLASSIFICATION	4.998826616756803E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998820018104044	WITHOUT_CLASSIFICATION	1.1799818959545463E-4	IMPLEMENTATION
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.8457206379821202	WITHOUT_CLASSIFICATION	0.1542793620178798	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5188016214435129	IMPLEMENTATION	0.4811983785564869	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5188016214435129	IMPLEMENTATION	0.4811983785564869	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999256070264236	WITHOUT_CLASSIFICATION	7.439297357631272E-5	IMPLEMENTATION
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997461666110389	WITHOUT_CLASSIFICATION	2.5383338896111193E-4	IMPLEMENTATION
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999692167783469	WITHOUT_CLASSIFICATION	3.078322165305965E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997705680734257	WITHOUT_CLASSIFICATION	2.29431926574419E-4	IMPLEMENTATION
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999268643448739	WITHOUT_CLASSIFICATION	7.31356551262059E-5	IMPLEMENTATION
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998273967173485	WITHOUT_CLASSIFICATION	1.7260328265147654E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9992190541284316	WITHOUT_CLASSIFICATION	7.809458715684236E-4	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999770815942629	WITHOUT_CLASSIFICATION	2.2918405737136627E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9971346068971884	WITHOUT_CLASSIFICATION	0.0028653931028116454	IMPLEMENTATION
//ignore!	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//60 seconds	WITHOUT_CLASSIFICATION	0.9971346068971884	WITHOUT_CLASSIFICATION	0.0028653931028116454	IMPLEMENTATION
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9987551634261117	WITHOUT_CLASSIFICATION	0.0012448365738882171	IMPLEMENTATION
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9486655978872036	IMPLEMENTATION	0.05133440211279637	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998508031681449	WITHOUT_CLASSIFICATION	1.4919683185505707E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997312068876133	WITHOUT_CLASSIFICATION	2.687931123867026E-4	IMPLEMENTATION
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9997658315467183	WITHOUT_CLASSIFICATION	2.3416845328176551E-4	IMPLEMENTATION
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999870127285134	WITHOUT_CLASSIFICATION	1.298727148655155E-5	IMPLEMENTATION
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9944359852831267	WITHOUT_CLASSIFICATION	0.005564014716873287	IMPLEMENTATION
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9997680138308638	WITHOUT_CLASSIFICATION	2.319861691360998E-4	IMPLEMENTATION
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9955520683611699	WITHOUT_CLASSIFICATION	0.004447931638830071	IMPLEMENTATION
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997091394921507	WITHOUT_CLASSIFICATION	2.908605078493285E-4	IMPLEMENTATION
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9998946306688242	WITHOUT_CLASSIFICATION	1.0536933117585672E-4	IMPLEMENTATION
// 60 seconds	WITHOUT_CLASSIFICATION	0.9994083805188749	WITHOUT_CLASSIFICATION	5.916194811249668E-4	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9998809552451684	WITHOUT_CLASSIFICATION	1.190447548314922E-4	IMPLEMENTATION
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9992320525197832	WITHOUT_CLASSIFICATION	7.679474802168702E-4	IMPLEMENTATION
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999815570461731	WITHOUT_CLASSIFICATION	1.844295382700458E-5	IMPLEMENTATION
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999856225693676	WITHOUT_CLASSIFICATION	1.4377430632454038E-5	IMPLEMENTATION
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999474375883056	WITHOUT_CLASSIFICATION	5.256241169441845E-5	IMPLEMENTATION
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999773313446977	WITHOUT_CLASSIFICATION	2.2668655302288423E-5	IMPLEMENTATION
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999727352742749	WITHOUT_CLASSIFICATION	2.7264725725158274E-5	IMPLEMENTATION
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999708157851661	WITHOUT_CLASSIFICATION	2.9184214833808553E-5	IMPLEMENTATION
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999420277628079	WITHOUT_CLASSIFICATION	5.797223719203501E-5	IMPLEMENTATION
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999912958913454	WITHOUT_CLASSIFICATION	8.704108654590565E-6	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998053313953675	WITHOUT_CLASSIFICATION	1.9466860463240878E-4	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997062180959265	WITHOUT_CLASSIFICATION	2.9378190407349517E-4	IMPLEMENTATION
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7337615554038805	WITHOUT_CLASSIFICATION	0.2662384445961195	IMPLEMENTATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9997494702802596	WITHOUT_CLASSIFICATION	2.5052971974038577E-4	IMPLEMENTATION
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999175413093926	WITHOUT_CLASSIFICATION	8.24586906074948E-5	IMPLEMENTATION
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9989608432043989	WITHOUT_CLASSIFICATION	0.0010391567956010302	IMPLEMENTATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999360379704579	WITHOUT_CLASSIFICATION	6.396202954214733E-5	IMPLEMENTATION
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999998579950734	WITHOUT_CLASSIFICATION	1.4200492654258549E-7	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9996429994323992	WITHOUT_CLASSIFICATION	3.5700056760079856E-4	IMPLEMENTATION
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999448118289936	WITHOUT_CLASSIFICATION	5.518817100647218E-5	IMPLEMENTATION
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999986082242148	WITHOUT_CLASSIFICATION	1.3917757852284053E-6	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998203639947806	WITHOUT_CLASSIFICATION	1.7963600521933858E-4	IMPLEMENTATION
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999775362739874	WITHOUT_CLASSIFICATION	2.2463726012471938E-5	IMPLEMENTATION
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999993781012972	WITHOUT_CLASSIFICATION	6.218987027768405E-7	IMPLEMENTATION
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998203639947806	WITHOUT_CLASSIFICATION	1.7963600521933858E-4	IMPLEMENTATION
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9971081601185398	WITHOUT_CLASSIFICATION	0.002891839881460251	IMPLEMENTATION
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9996418732486717	WITHOUT_CLASSIFICATION	3.581267513282363E-4	IMPLEMENTATION
// ignore!	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9982547819407839	WITHOUT_CLASSIFICATION	0.0017452180592161456	IMPLEMENTATION
// construct the cache	WITHOUT_CLASSIFICATION	0.9998325933082761	WITHOUT_CLASSIFICATION	1.6740669172395515E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997656064559547	WITHOUT_CLASSIFICATION	2.3439354404520372E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997656064559547	WITHOUT_CLASSIFICATION	2.3439354404520372E-4	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9971346068971884	WITHOUT_CLASSIFICATION	0.0028653931028116454	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999999192052492	WITHOUT_CLASSIFICATION	8.079475078867254E-7	IMPLEMENTATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999869090434428	WITHOUT_CLASSIFICATION	1.3090956557223503E-5	IMPLEMENTATION
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9996291941684664	WITHOUT_CLASSIFICATION	3.7080583153365886E-4	IMPLEMENTATION
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999982451695122	WITHOUT_CLASSIFICATION	1.7548304877918307E-5	IMPLEMENTATION
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999798795116964	WITHOUT_CLASSIFICATION	2.012048830357561E-5	IMPLEMENTATION
// return the connection	WITHOUT_CLASSIFICATION	0.9946052411978263	WITHOUT_CLASSIFICATION	0.005394758802173736	IMPLEMENTATION
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9998143834395843	WITHOUT_CLASSIFICATION	1.8561656041562427E-4	IMPLEMENTATION
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999695016738843	WITHOUT_CLASSIFICATION	3.0498326115682183E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999642306809602	WITHOUT_CLASSIFICATION	3.5769319039727E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999642306809602	WITHOUT_CLASSIFICATION	3.5769319039727E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998820157220253	WITHOUT_CLASSIFICATION	1.1798427797477909E-4	IMPLEMENTATION
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998445561883333	WITHOUT_CLASSIFICATION	1.554438116665356E-4	IMPLEMENTATION
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999467569063866	WITHOUT_CLASSIFICATION	5.3243093613375405E-5	IMPLEMENTATION
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999642306809602	WITHOUT_CLASSIFICATION	3.5769319039727E-5	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998820157220253	WITHOUT_CLASSIFICATION	1.1798427797477909E-4	IMPLEMENTATION
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998820157220253	WITHOUT_CLASSIFICATION	1.1798427797477909E-4	IMPLEMENTATION
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999849250172584	WITHOUT_CLASSIFICATION	1.5074982741596271E-5	IMPLEMENTATION
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9997589613377031	WITHOUT_CLASSIFICATION	2.410386622968499E-4	IMPLEMENTATION
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995265380521	WITHOUT_CLASSIFICATION	4.7346194780945277E-7	IMPLEMENTATION
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998985489170914	WITHOUT_CLASSIFICATION	1.0145108290864183E-4	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9986378106999327	WITHOUT_CLASSIFICATION	0.0013621893000672993	IMPLEMENTATION
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9986378106999327	WITHOUT_CLASSIFICATION	0.0013621893000672993	IMPLEMENTATION
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998648042130732	WITHOUT_CLASSIFICATION	1.3519578692666566E-4	IMPLEMENTATION
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9980535413653682	WITHOUT_CLASSIFICATION	0.0019464586346317934	IMPLEMENTATION
// default is POJO	WITHOUT_CLASSIFICATION	0.9999236837024593	WITHOUT_CLASSIFICATION	7.631629754062776E-5	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999953264613638	WITHOUT_CLASSIFICATION	4.673538636208968E-6	IMPLEMENTATION
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999953264613638	WITHOUT_CLASSIFICATION	4.673538636208968E-6	IMPLEMENTATION
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9993575308303738	WITHOUT_CLASSIFICATION	6.424691696261393E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999099059050371	WITHOUT_CLASSIFICATION	9.009409496290756E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998295808252878	WITHOUT_CLASSIFICATION	1.704191747121108E-4	IMPLEMENTATION
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999998570839292	WITHOUT_CLASSIFICATION	1.429160707277681E-7	IMPLEMENTATION
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999585980932287	WITHOUT_CLASSIFICATION	4.140190677134649E-5	IMPLEMENTATION
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999340871581203	WITHOUT_CLASSIFICATION	6.591284187970192E-4	IMPLEMENTATION
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9993602396812616	WITHOUT_CLASSIFICATION	6.397603187382875E-4	IMPLEMENTATION
//sort first by role name	WITHOUT_CLASSIFICATION	0.9995677086190058	WITHOUT_CLASSIFICATION	4.322913809941866E-4	IMPLEMENTATION
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9998295808252878	WITHOUT_CLASSIFICATION	1.704191747121108E-4	IMPLEMENTATION
//then by fk	WITHOUT_CLASSIFICATION	0.9987831224578145	WITHOUT_CLASSIFICATION	0.001216877542185414	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998803604057913	WITHOUT_CLASSIFICATION	1.1963959420878139E-4	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998803604057913	WITHOUT_CLASSIFICATION	1.1963959420878139E-4	IMPLEMENTATION
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999972037944054	WITHOUT_CLASSIFICATION	2.7962055947337925E-6	IMPLEMENTATION
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999838758372694	WITHOUT_CLASSIFICATION	1.612416273054763E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9981024723291142	WITHOUT_CLASSIFICATION	0.0018975276708857146	IMPLEMENTATION
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9994105760399545	WITHOUT_CLASSIFICATION	5.894239600454621E-4	IMPLEMENTATION
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9995672925026889	WITHOUT_CLASSIFICATION	4.32707497311036E-4	IMPLEMENTATION
//then by id	WITHOUT_CLASSIFICATION	0.9989910189784942	WITHOUT_CLASSIFICATION	0.0010089810215057945	IMPLEMENTATION
// to be safe...	WITHOUT_CLASSIFICATION	0.9997487667892935	WITHOUT_CLASSIFICATION	2.512332107065748E-4	IMPLEMENTATION
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9962507211517044	WITHOUT_CLASSIFICATION	0.0037492788482956004	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999944999602425	WITHOUT_CLASSIFICATION	5.500039757462946E-6	IMPLEMENTATION
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999944999602425	WITHOUT_CLASSIFICATION	5.500039757462946E-6	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999557167286863	WITHOUT_CLASSIFICATION	4.4283271313665764E-5	IMPLEMENTATION
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9995596918660518	WITHOUT_CLASSIFICATION	4.403081339483019E-4	IMPLEMENTATION
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9997623372750185	WITHOUT_CLASSIFICATION	2.3766272498156946E-4	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// invokespecial	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999789729868744	WITHOUT_CLASSIFICATION	2.1027013125498112E-5	IMPLEMENTATION
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9998744099835972	WITHOUT_CLASSIFICATION	1.2559001640273724E-4	IMPLEMENTATION
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9998883950899647	WITHOUT_CLASSIFICATION	1.1160491003524943E-4	IMPLEMENTATION
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999026144354577	WITHOUT_CLASSIFICATION	9.738556454232367E-5	IMPLEMENTATION
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9994142262716854	WITHOUT_CLASSIFICATION	5.857737283146051E-4	IMPLEMENTATION
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998902764055653	WITHOUT_CLASSIFICATION	1.097235944347874E-4	IMPLEMENTATION
// new	WITHOUT_CLASSIFICATION	0.9999859826438952	WITHOUT_CLASSIFICATION	1.4017356104983444E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998034322900514	WITHOUT_CLASSIFICATION	1.9656770994862282E-4	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// aastore // args	WITHOUT_CLASSIFICATION	0.9994142262716854	WITHOUT_CLASSIFICATION	5.857737283146051E-4	IMPLEMENTATION
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999631958332427	WITHOUT_CLASSIFICATION	3.680416675728683E-5	IMPLEMENTATION
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999324356249869	WITHOUT_CLASSIFICATION	6.756437501310113E-4	IMPLEMENTATION
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999051558766825	WITHOUT_CLASSIFICATION	9.484412331749721E-5	IMPLEMENTATION
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9998657188758002	WITHOUT_CLASSIFICATION	1.3428112419974243E-4	IMPLEMENTATION
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999529337339971	WITHOUT_CLASSIFICATION	4.706626600288916E-5	IMPLEMENTATION
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999966997036661	WITHOUT_CLASSIFICATION	3.300296333898833E-5	IMPLEMENTATION
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9981281668183429	WITHOUT_CLASSIFICATION	0.0018718331816570113	IMPLEMENTATION
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9993110618727411	WITHOUT_CLASSIFICATION	6.88938127258913E-4	IMPLEMENTATION
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9998436349861242	WITHOUT_CLASSIFICATION	1.5636501387590213E-4	IMPLEMENTATION
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9998710272227613	WITHOUT_CLASSIFICATION	1.289727772386809E-4	IMPLEMENTATION
// iconst_i	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// aaload	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999072987534701	WITHOUT_CLASSIFICATION	9.270124652986872E-5	IMPLEMENTATION
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999622920952252	WITHOUT_CLASSIFICATION	3.7707904774727494E-5	IMPLEMENTATION
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999793575001623	WITHOUT_CLASSIFICATION	2.0642499837593028E-5	IMPLEMENTATION
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9960750283953721	WITHOUT_CLASSIFICATION	0.00392497160462784	IMPLEMENTATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999884259597493	WITHOUT_CLASSIFICATION	1.1574040250567427E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aload_0	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999789729868744	WITHOUT_CLASSIFICATION	2.1027013125498112E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999789729868744	WITHOUT_CLASSIFICATION	2.1027013125498112E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// invokevirtual	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999940462375132	WITHOUT_CLASSIFICATION	5.953762486799166E-6	IMPLEMENTATION
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9998884632085789	WITHOUT_CLASSIFICATION	1.1153679142098941E-4	IMPLEMENTATION
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998676417027037	WITHOUT_CLASSIFICATION	1.3235829729630328E-4	IMPLEMENTATION
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9998561609195966	WITHOUT_CLASSIFICATION	1.43839080403389E-4	IMPLEMENTATION
// iload_3 // i	WITHOUT_CLASSIFICATION	0.999406035772659	WITHOUT_CLASSIFICATION	5.939642273410476E-4	IMPLEMENTATION
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// athrow	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9998573836270213	WITHOUT_CLASSIFICATION	1.4261637297871378E-4	IMPLEMENTATION
//swallow	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999887691835662	WITHOUT_CLASSIFICATION	1.1230816433870203E-5	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998064225125254	WITHOUT_CLASSIFICATION	1.9357748747457203E-4	IMPLEMENTATION
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998064225125254	WITHOUT_CLASSIFICATION	1.9357748747457203E-4	IMPLEMENTATION
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999718675588892	WITHOUT_CLASSIFICATION	2.813244111064851E-5	IMPLEMENTATION
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999380408231476	WITHOUT_CLASSIFICATION	6.19591768523001E-5	IMPLEMENTATION
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999832305775198	WITHOUT_CLASSIFICATION	1.6769422480248937E-5	IMPLEMENTATION
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9998753775527149	WITHOUT_CLASSIFICATION	1.2462244728512204E-4	IMPLEMENTATION
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997961292401426	WITHOUT_CLASSIFICATION	2.0387075985733164E-4	IMPLEMENTATION
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999110406349812	WITHOUT_CLASSIFICATION	8.895936501895984E-5	IMPLEMENTATION
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999973235723744	WITHOUT_CLASSIFICATION	2.6764276256056215E-5	IMPLEMENTATION
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998320078345662	WITHOUT_CLASSIFICATION	1.6799216543379023E-4	IMPLEMENTATION
// ifnonnull	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999551396075264	WITHOUT_CLASSIFICATION	4.486039247355483E-5	IMPLEMENTATION
// *return // each type	WITHOUT_CLASSIFICATION	0.9999551396075264	WITHOUT_CLASSIFICATION	4.486039247355483E-5	IMPLEMENTATION
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999551396075264	WITHOUT_CLASSIFICATION	4.486039247355483E-5	IMPLEMENTATION
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.999896028181772	WITHOUT_CLASSIFICATION	1.0397181822797779E-4	IMPLEMENTATION
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999551396075264	WITHOUT_CLASSIFICATION	4.486039247355483E-5	IMPLEMENTATION
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999355615017564	WITHOUT_CLASSIFICATION	6.443849824362296E-5	IMPLEMENTATION
// int	WITHOUT_CLASSIFICATION	0.9999866112747784	WITHOUT_CLASSIFICATION	1.3388725221541031E-5	IMPLEMENTATION
// return	WITHOUT_CLASSIFICATION	0.9999789729868744	WITHOUT_CLASSIFICATION	2.1027013125498112E-5	IMPLEMENTATION
// dup	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// invokeinterface	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// checkcast	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998830445803648	WITHOUT_CLASSIFICATION	1.1695541963519677E-4	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// *load_1	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// putfield	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// return ;	WITHOUT_CLASSIFICATION	0.9993473937980392	WITHOUT_CLASSIFICATION	6.5260620196085E-4	IMPLEMENTATION
// ldc // field name	WITHOUT_CLASSIFICATION	0.9992257150772345	WITHOUT_CLASSIFICATION	7.742849227656294E-4	IMPLEMENTATION
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999713180354052	WITHOUT_CLASSIFICATION	2.868196459480591E-5	IMPLEMENTATION
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998921332212114	WITHOUT_CLASSIFICATION	1.0786677878863791E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998921332212114	WITHOUT_CLASSIFICATION	1.0786677878863791E-4	IMPLEMENTATION
// not array	WITHOUT_CLASSIFICATION	0.9887001370513573	WITHOUT_CLASSIFICATION	0.011299862948642849	IMPLEMENTATION
// array of reference type	WITHOUT_CLASSIFICATION	0.9999863048600408	WITHOUT_CLASSIFICATION	1.369513995928836E-5	IMPLEMENTATION
// boolean	WITHOUT_CLASSIFICATION	0.999986645521233	WITHOUT_CLASSIFICATION	1.3354478766960999E-5	IMPLEMENTATION
// byte	WITHOUT_CLASSIFICATION	0.9999817821812123	WITHOUT_CLASSIFICATION	1.8217818787677875E-5	IMPLEMENTATION
// char	WITHOUT_CLASSIFICATION	0.9999892957518823	WITHOUT_CLASSIFICATION	1.0704248117676642E-5	IMPLEMENTATION
// short	WITHOUT_CLASSIFICATION	0.999982748518331	WITHOUT_CLASSIFICATION	1.7251481668996055E-5	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999984402868421	WITHOUT_CLASSIFICATION	1.5597131578006577E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999817209397276	WITHOUT_CLASSIFICATION	1.827906027246514E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999817209397276	WITHOUT_CLASSIFICATION	1.827906027246514E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999845960592274	WITHOUT_CLASSIFICATION	1.5403940772647496E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999845960592274	WITHOUT_CLASSIFICATION	1.5403940772647496E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9994994834142606	WITHOUT_CLASSIFICATION	5.005165857393132E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9994994834142606	WITHOUT_CLASSIFICATION	5.005165857393132E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998407253156372	WITHOUT_CLASSIFICATION	1.59274684362816E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998407253156372	WITHOUT_CLASSIFICATION	1.59274684362816E-4	IMPLEMENTATION
// reference type	WITHOUT_CLASSIFICATION	0.9998921332212114	WITHOUT_CLASSIFICATION	1.0786677878863791E-4	IMPLEMENTATION
// double	WITHOUT_CLASSIFICATION	0.9999984402868421	WITHOUT_CLASSIFICATION	1.5597131578006577E-6	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999817209397276	WITHOUT_CLASSIFICATION	1.827906027246514E-5	IMPLEMENTATION
// float	WITHOUT_CLASSIFICATION	0.9999817209397276	WITHOUT_CLASSIFICATION	1.827906027246514E-5	IMPLEMENTATION
// long	WITHOUT_CLASSIFICATION	0.9999845960592274	WITHOUT_CLASSIFICATION	1.5403940772647496E-5	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9994994834142606	WITHOUT_CLASSIFICATION	5.005165857393132E-4	IMPLEMENTATION
// bad type	WITHOUT_CLASSIFICATION	0.9994994834142606	WITHOUT_CLASSIFICATION	5.005165857393132E-4	IMPLEMENTATION
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998407253156372	WITHOUT_CLASSIFICATION	1.59274684362816E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999872649424423	WITHOUT_CLASSIFICATION	1.2735057557697576E-4	IMPLEMENTATION
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9988190832466337	WITHOUT_CLASSIFICATION	0.0011809167533662654	IMPLEMENTATION
//decrement the lock	WITHOUT_CLASSIFICATION	0.9970917418397062	WITHOUT_CLASSIFICATION	0.002908258160293851	IMPLEMENTATION
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999824367358205	WITHOUT_CLASSIFICATION	1.756326417948468E-4	IMPLEMENTATION
//recache the updated state	WITHOUT_CLASSIFICATION	0.9993249321815146	WITHOUT_CLASSIFICATION	6.750678184852961E-4	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999817656204145	WITHOUT_CLASSIFICATION	1.8234379585459648E-5	IMPLEMENTATION
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9998347098937471	WITHOUT_CLASSIFICATION	1.6529010625286811E-4	IMPLEMENTATION
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999787264809491	WITHOUT_CLASSIFICATION	2.1273519050867565E-5	IMPLEMENTATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999411958202671	WITHOUT_CLASSIFICATION	5.8804179732803396E-5	IMPLEMENTATION
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.992333982445073	WITHOUT_CLASSIFICATION	0.007666017554927035	IMPLEMENTATION
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998675342013638	WITHOUT_CLASSIFICATION	1.3246579863630768E-4	IMPLEMENTATION
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999546256160072	WITHOUT_CLASSIFICATION	4.5374383992773935E-5	IMPLEMENTATION
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9971346068971884	WITHOUT_CLASSIFICATION	0.0028653931028116454	IMPLEMENTATION
// noop	WITHOUT_CLASSIFICATION	0.9999817656204145	WITHOUT_CLASSIFICATION	1.8234379585459648E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999885525765416	WITHOUT_CLASSIFICATION	1.1447423458450133E-5	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9993655812620593	WITHOUT_CLASSIFICATION	6.344187379407279E-4	IMPLEMENTATION
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9993655812620593	WITHOUT_CLASSIFICATION	6.344187379407279E-4	IMPLEMENTATION
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9995936499690761	WITHOUT_CLASSIFICATION	4.063500309238942E-4	IMPLEMENTATION
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999987312863418	WITHOUT_CLASSIFICATION	1.2687136581746896E-6	IMPLEMENTATION
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9996491366332727	WITHOUT_CLASSIFICATION	3.5086336672737224E-4	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9977098041305905	WITHOUT_CLASSIFICATION	0.0022901958694093853	IMPLEMENTATION
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9977098041305905	WITHOUT_CLASSIFICATION	0.0022901958694093853	IMPLEMENTATION
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999544139017797	WITHOUT_CLASSIFICATION	4.558609822022431E-5	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9986522178602179	WITHOUT_CLASSIFICATION	0.0013477821397821033	IMPLEMENTATION
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9986522178602179	WITHOUT_CLASSIFICATION	0.0013477821397821033	IMPLEMENTATION
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9975610943046095	WITHOUT_CLASSIFICATION	0.002438905695390484	IMPLEMENTATION
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999865249692887	WITHOUT_CLASSIFICATION	1.3475030711171228E-5	IMPLEMENTATION
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999908763559854	WITHOUT_CLASSIFICATION	9.123644014696066E-6	IMPLEMENTATION
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// WHERE	WITHOUT_CLASSIFICATION	0.9999835885885563	WITHOUT_CLASSIFICATION	1.6411411443705904E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999820131461775	WITHOUT_CLASSIFICATION	1.7986853822498486E-5	IMPLEMENTATION
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// TODO:	WITHOUT_CLASSIFICATION	0.8380366579764759	WITHOUT_CLASSIFICATION	0.16196334202352414	IMPLEMENTATION
// ID	WITHOUT_CLASSIFICATION	0.9999699794480098	WITHOUT_CLASSIFICATION	3.0020551990151372E-5	IMPLEMENTATION
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999276562979698	WITHOUT_CLASSIFICATION	7.23437020302467E-5	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9998988886927125	WITHOUT_CLASSIFICATION	1.0111130728742629E-4	IMPLEMENTATION
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998908792594501	WITHOUT_CLASSIFICATION	1.0912074054989465E-4	IMPLEMENTATION
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999992926776018	WITHOUT_CLASSIFICATION	7.073223982674041E-7	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998820018104044	WITHOUT_CLASSIFICATION	1.1799818959545463E-4	IMPLEMENTATION
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999287819941602	WITHOUT_CLASSIFICATION	7.121800583982267E-5	IMPLEMENTATION
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9994293778780325	WITHOUT_CLASSIFICATION	5.706221219674765E-4	IMPLEMENTATION
// IMPORT	WITHOUT_CLASSIFICATION	0.999982101140506	WITHOUT_CLASSIFICATION	1.789885949401889E-5	IMPLEMENTATION
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9993897318107636	WITHOUT_CLASSIFICATION	6.102681892363383E-4	IMPLEMENTATION
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998930320305868	WITHOUT_CLASSIFICATION	1.0696796941320179E-4	IMPLEMENTATION
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998830445803648	WITHOUT_CLASSIFICATION	1.1695541963519677E-4	IMPLEMENTATION
// PERSISTER	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996041878093317	WITHOUT_CLASSIFICATION	3.9581219066829577E-4	IMPLEMENTATION
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999908763559854	WITHOUT_CLASSIFICATION	9.123644014696066E-6	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9991001331618553	WITHOUT_CLASSIFICATION	8.998668381445845E-4	IMPLEMENTATION
// joined subclasses	WITHOUT_CLASSIFICATION	0.9995892321444476	WITHOUT_CLASSIFICATION	4.1076785555233024E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999831124415188	WITHOUT_CLASSIFICATION	1.688755848118256E-5	IMPLEMENTATION
// CHECK	WITHOUT_CLASSIFICATION	0.9999820131461775	WITHOUT_CLASSIFICATION	1.7986853822498486E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996041878093317	WITHOUT_CLASSIFICATION	3.9581219066829577E-4	IMPLEMENTATION
// properties	WITHOUT_CLASSIFICATION	0.9991001331618553	WITHOUT_CLASSIFICATION	8.998668381445845E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999831124415188	WITHOUT_CLASSIFICATION	1.688755848118256E-5	IMPLEMENTATION
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998400192087963	WITHOUT_CLASSIFICATION	1.599807912037842E-4	IMPLEMENTATION
// TABLENAME	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9998400192087963	WITHOUT_CLASSIFICATION	1.599807912037842E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// column index	WITHOUT_CLASSIFICATION	0.9985668692166013	WITHOUT_CLASSIFICATION	0.001433130783398749	IMPLEMENTATION
//column unique-key	WITHOUT_CLASSIFICATION	0.9970379462383849	WITHOUT_CLASSIFICATION	0.002962053761615111	IMPLEMENTATION
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999993756795877	WITHOUT_CLASSIFICATION	6.243204122781161E-7	IMPLEMENTATION
// for an any	WITHOUT_CLASSIFICATION	0.9999400870022684	WITHOUT_CLASSIFICATION	5.991299773163135E-5	IMPLEMENTATION
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9921345347124052	WITHOUT_CLASSIFICATION	0.007865465287594832	IMPLEMENTATION
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999000675100738	WITHOUT_CLASSIFICATION	9.993248992626987E-5	IMPLEMENTATION
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9971783869342316	WITHOUT_CLASSIFICATION	0.002821613065768496	IMPLEMENTATION
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9965461787877129	WITHOUT_CLASSIFICATION	0.0034538212122871086	IMPLEMENTATION
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999000675100738	WITHOUT_CLASSIFICATION	9.993248992626987E-5	IMPLEMENTATION
// ROLENAME	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// TABLE	WITHOUT_CLASSIFICATION	0.9999844553891157	WITHOUT_CLASSIFICATION	1.554461088427157E-5	IMPLEMENTATION
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9995759364134473	WITHOUT_CLASSIFICATION	4.2406358655275035E-4	IMPLEMENTATION
// SORT	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996041878093317	WITHOUT_CLASSIFICATION	3.9581219066829577E-4	IMPLEMENTATION
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998990973097355	WITHOUT_CLASSIFICATION	1.0090269026450036E-4	IMPLEMENTATION
// set up second pass	WITHOUT_CLASSIFICATION	0.9999481495079525	WITHOUT_CLASSIFICATION	5.1850492047508634E-5	IMPLEMENTATION
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9973965890588967	WITHOUT_CLASSIFICATION	0.002603410941103293	IMPLEMENTATION
// a nested composite element	WITHOUT_CLASSIFICATION	0.9998061893036435	WITHOUT_CLASSIFICATION	1.9381069635652473E-4	IMPLEMENTATION
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999881265205337	WITHOUT_CLASSIFICATION	1.1873479466288963E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999980627069673	WITHOUT_CLASSIFICATION	1.9372930326411686E-6	IMPLEMENTATION
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999806956428713	WITHOUT_CLASSIFICATION	1.9304357128663034E-5	IMPLEMENTATION
//lazy = !join;	WITHOUT_CLASSIFICATION	0.996550488550296	WITHOUT_CLASSIFICATION	0.0034495114497039665	IMPLEMENTATION
// GENERATOR	WITHOUT_CLASSIFICATION	0.999391476218615	WITHOUT_CLASSIFICATION	6.085237813849679E-4	IMPLEMENTATION
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.998996312044381	WITHOUT_CLASSIFICATION	0.0010036879556190137	IMPLEMENTATION
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998830445803648	WITHOUT_CLASSIFICATION	1.1695541963519677E-4	IMPLEMENTATION
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9995653615245925	WITHOUT_CLASSIFICATION	4.346384754075075E-4	IMPLEMENTATION
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998820018104044	WITHOUT_CLASSIFICATION	1.1799818959545463E-4	IMPLEMENTATION
// contained elements:	WITHOUT_CLASSIFICATION	0.9998819081191638	WITHOUT_CLASSIFICATION	1.1809188083626305E-4	IMPLEMENTATION
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999282372356917	WITHOUT_CLASSIFICATION	7.176276430838815E-5	IMPLEMENTATION
// Bind the where	WITHOUT_CLASSIFICATION	0.998362231995026	WITHOUT_CLASSIFICATION	0.0016377680049739422	IMPLEMENTATION
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9993458451591934	WITHOUT_CLASSIFICATION	6.541548408065545E-4	IMPLEMENTATION
// Bind the filters	WITHOUT_CLASSIFICATION	0.9993480586094037	WITHOUT_CLASSIFICATION	6.519413905964089E-4	IMPLEMENTATION
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998916645030622	WITHOUT_CLASSIFICATION	1.0833549693778876E-4	IMPLEMENTATION
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999052481306	WITHOUT_CLASSIFICATION	9.475186933384701E-8	IMPLEMENTATION
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999168034243723	WITHOUT_CLASSIFICATION	8.3196575627659E-5	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9889685931479434	WITHOUT_CLASSIFICATION	0.011031406852056572	IMPLEMENTATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9994387604898787	WITHOUT_CLASSIFICATION	5.612395101212408E-4	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9769982418594773	WITHOUT_CLASSIFICATION	0.023001758140522736	IMPLEMENTATION
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9769982418594773	WITHOUT_CLASSIFICATION	0.023001758140522736	IMPLEMENTATION
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9996714857678765	WITHOUT_CLASSIFICATION	3.285142321235449E-4	IMPLEMENTATION
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998935326818684	WITHOUT_CLASSIFICATION	1.0646731813153848E-4	IMPLEMENTATION
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9997068436916862	WITHOUT_CLASSIFICATION	2.931563083138422E-4	IMPLEMENTATION
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9998830772269698	WITHOUT_CLASSIFICATION	1.1692277303025772E-4	IMPLEMENTATION
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9994340845664808	WITHOUT_CLASSIFICATION	5.659154335192198E-4	IMPLEMENTATION
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9995191822472401	WITHOUT_CLASSIFICATION	4.8081775275980916E-4	IMPLEMENTATION
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999346510451604	WITHOUT_CLASSIFICATION	6.534895483954204E-5	IMPLEMENTATION
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9819726352502778	WITHOUT_CLASSIFICATION	0.018027364749722226	IMPLEMENTATION
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998785306907146	WITHOUT_CLASSIFICATION	1.2146930928545285E-4	IMPLEMENTATION
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9995775805649068	WITHOUT_CLASSIFICATION	4.2241943509322967E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//Schema export:	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998433749163476	WITHOUT_CLASSIFICATION	1.5662508365235818E-4	IMPLEMENTATION
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9990111238055577	WITHOUT_CLASSIFICATION	9.888761944423193E-4	IMPLEMENTATION
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.993868538317457	WITHOUT_CLASSIFICATION	0.00613146168254295	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999934594673367	WITHOUT_CLASSIFICATION	6.540532663301182E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997828442886252	WITHOUT_CLASSIFICATION	2.1715571137493E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9998749870194208	WITHOUT_CLASSIFICATION	1.2501298057924047E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999997377967913	WITHOUT_CLASSIFICATION	2.622032087116308E-7	IMPLEMENTATION
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9998039753876349	WITHOUT_CLASSIFICATION	1.9602461236515692E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9997875813641603	WITHOUT_CLASSIFICATION	2.124186358397552E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999816368403153	WITHOUT_CLASSIFICATION	1.836315968475568E-5	IMPLEMENTATION
// found	WITHOUT_CLASSIFICATION	0.9999816368403153	WITHOUT_CLASSIFICATION	1.836315968475568E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.997042414855882	WITHOUT_CLASSIFICATION	0.0029575851441181284	IMPLEMENTATION
//<String, String>	WITHOUT_CLASSIFICATION	0.997042414855882	WITHOUT_CLASSIFICATION	0.0029575851441181284	IMPLEMENTATION
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9889685931479434	WITHOUT_CLASSIFICATION	0.011031406852056572	IMPLEMENTATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9994506581459741	WITHOUT_CLASSIFICATION	5.493418540257661E-4	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996199385992873	WITHOUT_CLASSIFICATION	3.80061400712651E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991805121972092	WITHOUT_CLASSIFICATION	8.194878027908645E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999557167286863	WITHOUT_CLASSIFICATION	4.4283271313665764E-5	IMPLEMENTATION
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996199385992873	WITHOUT_CLASSIFICATION	3.80061400712651E-4	IMPLEMENTATION
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9991805121972092	WITHOUT_CLASSIFICATION	8.194878027908645E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997071303335884	WITHOUT_CLASSIFICATION	2.9286966641164686E-4	IMPLEMENTATION
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999958503448415	WITHOUT_CLASSIFICATION	4.149655158541237E-6	IMPLEMENTATION
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999028348913688	WITHOUT_CLASSIFICATION	9.716510863126361E-5	IMPLEMENTATION
// the element has changed	WITHOUT_CLASSIFICATION	0.9999988100561406	WITHOUT_CLASSIFICATION	1.1899438594091044E-6	IMPLEMENTATION
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9922348281164869	WITHOUT_CLASSIFICATION	0.007765171883513089	IMPLEMENTATION
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9980924427859788	WITHOUT_CLASSIFICATION	0.0019075572140212333	IMPLEMENTATION
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9996050702104147	WITHOUT_CLASSIFICATION	3.9492978958536343E-4	IMPLEMENTATION
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9982365880346373	WITHOUT_CLASSIFICATION	0.0017634119653625892	IMPLEMENTATION
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997715923992596	WITHOUT_CLASSIFICATION	2.2840760074041664E-4	IMPLEMENTATION
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999982608865422	WITHOUT_CLASSIFICATION	1.7391134578038665E-5	IMPLEMENTATION
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9995320595435406	WITHOUT_CLASSIFICATION	4.6794045645936946E-4	IMPLEMENTATION
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999923681366951	WITHOUT_CLASSIFICATION	7.631863304781507E-6	IMPLEMENTATION
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999749829834953	WITHOUT_CLASSIFICATION	2.5017016504620144E-5	IMPLEMENTATION
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9993057552160525	WITHOUT_CLASSIFICATION	6.942447839475492E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999557167286863	WITHOUT_CLASSIFICATION	4.4283271313665764E-5	IMPLEMENTATION
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9993057552160525	WITHOUT_CLASSIFICATION	6.942447839475492E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999786217779005	WITHOUT_CLASSIFICATION	2.1378222099492853E-4	IMPLEMENTATION
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999786217779005	WITHOUT_CLASSIFICATION	2.1378222099492853E-4	IMPLEMENTATION
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999192191495235	WITHOUT_CLASSIFICATION	8.078085047645652E-5	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997071303335884	WITHOUT_CLASSIFICATION	2.9286966641164686E-4	IMPLEMENTATION
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9889899001811902	WITHOUT_CLASSIFICATION	0.011010099818809752	IMPLEMENTATION
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999763975497326	WITHOUT_CLASSIFICATION	2.3602450267369863E-5	IMPLEMENTATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9914970507359381	WITHOUT_CLASSIFICATION	0.008502949264061982	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999215474153248	WITHOUT_CLASSIFICATION	7.845258467515126E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9939136899804979	WITHOUT_CLASSIFICATION	0.006086310019502183	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997071303335884	WITHOUT_CLASSIFICATION	2.9286966641164686E-4	IMPLEMENTATION
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999215474153248	WITHOUT_CLASSIFICATION	7.845258467515126E-5	IMPLEMENTATION
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9939136899804979	WITHOUT_CLASSIFICATION	0.006086310019502183	IMPLEMENTATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9989915035857144	WITHOUT_CLASSIFICATION	0.001008496414285667	IMPLEMENTATION
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9992662047689183	WITHOUT_CLASSIFICATION	7.337952310817594E-4	IMPLEMENTATION
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998061255767353	WITHOUT_CLASSIFICATION	1.9387442326472426E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997071303335884	WITHOUT_CLASSIFICATION	2.9286966641164686E-4	IMPLEMENTATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9997071303335884	WITHOUT_CLASSIFICATION	2.9286966641164686E-4	IMPLEMENTATION
// from Map	WITHOUT_CLASSIFICATION	0.9998895428112407	WITHOUT_CLASSIFICATION	1.1045718875934708E-4	IMPLEMENTATION
// from SortedMap	WITHOUT_CLASSIFICATION	0.9998905721765187	WITHOUT_CLASSIFICATION	1.0942782348129331E-4	IMPLEMENTATION
//inject the data	WITHOUT_CLASSIFICATION	0.9989005701628796	WITHOUT_CLASSIFICATION	0.0010994298371204793	IMPLEMENTATION
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999859553537589	WITHOUT_CLASSIFICATION	1.4044646241015677E-5	IMPLEMENTATION
//default pool size 20	WITHOUT_CLASSIFICATION	0.999753496516681	WITHOUT_CLASSIFICATION	2.465034833189142E-4	IMPLEMENTATION
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999867472664523	WITHOUT_CLASSIFICATION	1.3252733547740821E-5	IMPLEMENTATION
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9982614504475812	WITHOUT_CLASSIFICATION	0.0017385495524188032	IMPLEMENTATION
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9997043411279259	WITHOUT_CLASSIFICATION	2.95658872074012E-4	IMPLEMENTATION
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999709052405923	WITHOUT_CLASSIFICATION	2.909475940766048E-5	IMPLEMENTATION
// then bind it	WITHOUT_CLASSIFICATION	0.9987514620400529	WITHOUT_CLASSIFICATION	0.0012485379599471414	IMPLEMENTATION
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9987821282668915	WITHOUT_CLASSIFICATION	0.0012178717331084953	IMPLEMENTATION
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9827470806034614	WITHOUT_CLASSIFICATION	0.01725291939653862	IMPLEMENTATION
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999902637581722	WITHOUT_CLASSIFICATION	9.73624182778431E-6	IMPLEMENTATION
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999814707113535	WITHOUT_CLASSIFICATION	1.8529288646496305E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998273244016491	WITHOUT_CLASSIFICATION	1.726755983508231E-4	IMPLEMENTATION
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999743071650886	WITHOUT_CLASSIFICATION	2.569283491142802E-5	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997705680734257	WITHOUT_CLASSIFICATION	2.29431926574419E-4	IMPLEMENTATION
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9996972265904716	WITHOUT_CLASSIFICATION	3.027734095284746E-4	IMPLEMENTATION
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9986190508890559	WITHOUT_CLASSIFICATION	0.001380949110944073	IMPLEMENTATION
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9991805121972092	WITHOUT_CLASSIFICATION	8.194878027908645E-4	IMPLEMENTATION
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9980566888746631	WITHOUT_CLASSIFICATION	0.0019433111253369122	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//unsupported	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997705680734257	WITHOUT_CLASSIFICATION	2.29431926574419E-4	IMPLEMENTATION
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9784490611677616	WITHOUT_CLASSIFICATION	0.021550938832238364	IMPLEMENTATION
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999910031982188	WITHOUT_CLASSIFICATION	8.996801781203084E-6	IMPLEMENTATION
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9922490517288428	WITHOUT_CLASSIFICATION	0.007750948271157254	IMPLEMENTATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9996186704947516	WITHOUT_CLASSIFICATION	3.813295052483561E-4	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998461289838293	WITHOUT_CLASSIFICATION	1.5387101617062943E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9993997255797259	WITHOUT_CLASSIFICATION	6.002744202741832E-4	IMPLEMENTATION
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996245130473883	WITHOUT_CLASSIFICATION	3.7548695261168004E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999193003149776	WITHOUT_CLASSIFICATION	8.069968502253542E-5	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999930650885327	WITHOUT_CLASSIFICATION	6.934911467307152E-5	IMPLEMENTATION
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999956616328719	WITHOUT_CLASSIFICATION	4.338367128098857E-5	IMPLEMENTATION
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998377217003585	WITHOUT_CLASSIFICATION	1.622782996415874E-4	IMPLEMENTATION
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9998998656842059	WITHOUT_CLASSIFICATION	1.0013431579411514E-4	IMPLEMENTATION
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962589119939	WITHOUT_CLASSIFICATION	3.741088006107088E-5	IMPLEMENTATION
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.99916262427747	WITHOUT_CLASSIFICATION	8.37375722530029E-4	IMPLEMENTATION
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.998557375673871	WITHOUT_CLASSIFICATION	0.0014426243261289157	IMPLEMENTATION
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9953334462028895	WITHOUT_CLASSIFICATION	0.004666553797110459	IMPLEMENTATION
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998672387073049	WITHOUT_CLASSIFICATION	1.3276129269506343E-4	IMPLEMENTATION
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999822151831652	WITHOUT_CLASSIFICATION	1.7784816834747E-5	IMPLEMENTATION
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9988810244329834	WITHOUT_CLASSIFICATION	0.0011189755670166061	IMPLEMENTATION
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999973780482641	WITHOUT_CLASSIFICATION	2.6219517359066992E-5	IMPLEMENTATION
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979511980724209	WITHOUT_CLASSIFICATION	0.002048801927579114	IMPLEMENTATION
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985614921082907	WITHOUT_CLASSIFICATION	0.001438507891709343	IMPLEMENTATION
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9976653079377963	WITHOUT_CLASSIFICATION	0.002334692062203723	IMPLEMENTATION
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998318079572488	WITHOUT_CLASSIFICATION	1.6819204275112036E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973510362087384	WITHOUT_CLASSIFICATION	0.002648963791261581	IMPLEMENTATION
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// by default we report no support	WITHOUT_CLASSIFICATION	0.9987488262083629	WITHOUT_CLASSIFICATION	0.00125117379163712	IMPLEMENTATION
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9995427378458733	WITHOUT_CLASSIFICATION	4.572621541266765E-4	IMPLEMENTATION
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978739344036068	WITHOUT_CLASSIFICATION	0.0021260655963931036	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979862256150893	WITHOUT_CLASSIFICATION	0.002013774384910599	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975712374867893	WITHOUT_CLASSIFICATION	0.0024287625132107075	IMPLEMENTATION
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9934851123937801	WITHOUT_CLASSIFICATION	0.006514887606219842	IMPLEMENTATION
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971382225482431	WITHOUT_CLASSIFICATION	0.0028617774517568847	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967206838698801	WITHOUT_CLASSIFICATION	0.00327931613011982	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999631493386233	WITHOUT_CLASSIFICATION	3.685066137677293E-5	IMPLEMENTATION
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999830473651817	WITHOUT_CLASSIFICATION	1.6952634818304644E-4	IMPLEMENTATION
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.8758106538400663	WITHOUT_CLASSIFICATION	0.12418934615993368	IMPLEMENTATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999803125465387	WITHOUT_CLASSIFICATION	1.9687453461232393E-5	IMPLEMENTATION
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999808190550555	WITHOUT_CLASSIFICATION	1.918094494446641E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993234688916803	WITHOUT_CLASSIFICATION	6.76531108319655E-4	IMPLEMENTATION
//" cascade";	WITHOUT_CLASSIFICATION	0.9970969658407224	WITHOUT_CLASSIFICATION	0.002903034159277714	IMPLEMENTATION
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9995501883270552	WITHOUT_CLASSIFICATION	4.498116729448193E-4	IMPLEMENTATION
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9989915035857144	WITHOUT_CLASSIFICATION	0.001008496414285667	IMPLEMENTATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9993984042149532	WITHOUT_CLASSIFICATION	6.01595785046774E-4	IMPLEMENTATION
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999440071267216	WITHOUT_CLASSIFICATION	5.599287327840395E-4	IMPLEMENTATION
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998994237619502	WITHOUT_CLASSIFICATION	1.0057623804985672E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999033400952054	WITHOUT_CLASSIFICATION	9.665990479459043E-5	IMPLEMENTATION
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998883921282598	WITHOUT_CLASSIFICATION	1.1160787174026925E-4	IMPLEMENTATION
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9991211628579014	WITHOUT_CLASSIFICATION	8.788371420984866E-4	IMPLEMENTATION
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998897673106467	WITHOUT_CLASSIFICATION	1.102326893533316E-4	IMPLEMENTATION
// HHH-2300	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996293330241688	WITHOUT_CLASSIFICATION	3.706669758311714E-4	IMPLEMENTATION
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998798113567705	WITHOUT_CLASSIFICATION	1.2018864322943587E-4	IMPLEMENTATION
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998746425230818	WITHOUT_CLASSIFICATION	1.2535747691818597E-4	IMPLEMENTATION
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998310940802121	WITHOUT_CLASSIFICATION	1.6890591978798139E-4	IMPLEMENTATION
// not null is implicit	WITHOUT_CLASSIFICATION	0.9987753188676481	WITHOUT_CLASSIFICATION	0.001224681132351848	IMPLEMENTATION
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9995137393275861	WITHOUT_CLASSIFICATION	4.8626067241389705E-4	IMPLEMENTATION
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9998564185195393	WITHOUT_CLASSIFICATION	1.435814804606979E-4	IMPLEMENTATION
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998813562083698	WITHOUT_CLASSIFICATION	1.1864379163010408E-4	IMPLEMENTATION
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994747135826472	WITHOUT_CLASSIFICATION	5.252864173528398E-4	IMPLEMENTATION
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999917986675019	WITHOUT_CLASSIFICATION	8.201332498111086E-5	IMPLEMENTATION
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999707228348591	WITHOUT_CLASSIFICATION	2.9277165140947356E-5	IMPLEMENTATION
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999377116912863	WITHOUT_CLASSIFICATION	6.228830871371609E-5	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998836981891028	WITHOUT_CLASSIFICATION	1.1630181089708139E-4	IMPLEMENTATION
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9997066577315146	WITHOUT_CLASSIFICATION	2.9334226848543976E-4	IMPLEMENTATION
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9987989664810627	WITHOUT_CLASSIFICATION	0.0012010335189373788	IMPLEMENTATION
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999988040617137	WITHOUT_CLASSIFICATION	1.195938286314846E-6	IMPLEMENTATION
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9998652990600133	WITHOUT_CLASSIFICATION	1.347009399868118E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993234688916803	WITHOUT_CLASSIFICATION	6.76531108319655E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998782294923643	WITHOUT_CLASSIFICATION	1.2177050763577714E-4	IMPLEMENTATION
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999991921492679	WITHOUT_CLASSIFICATION	8.078507321144882E-7	IMPLEMENTATION
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9994258634925466	WITHOUT_CLASSIFICATION	5.741365074534038E-4	IMPLEMENTATION
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999803125465387	WITHOUT_CLASSIFICATION	1.9687453461232393E-5	IMPLEMENTATION
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998291728723505	WITHOUT_CLASSIFICATION	1.7082712764947467E-4	IMPLEMENTATION
// function templates	WITHOUT_CLASSIFICATION	0.9999071164624217	WITHOUT_CLASSIFICATION	9.288353757829356E-5	IMPLEMENTATION
//not null is implicit	WITHOUT_CLASSIFICATION	0.999746633668526	WITHOUT_CLASSIFICATION	2.533663314739754E-4	IMPLEMENTATION
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999994144783116	WITHOUT_CLASSIFICATION	5.855216883961173E-6	IMPLEMENTATION
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996148906100216	WITHOUT_CLASSIFICATION	3.8510938997836976E-4	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.99998855281936	WITHOUT_CLASSIFICATION	1.144718063981952E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998417025427053	WITHOUT_CLASSIFICATION	1.5829745729460464E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998605755406954	WITHOUT_CLASSIFICATION	1.3942445930458446E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998314886436821	WITHOUT_CLASSIFICATION	1.6851135631793085E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9991068442590673	WITHOUT_CLASSIFICATION	8.931557409328359E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999937578554979	WITHOUT_CLASSIFICATION	6.242144502071495E-6	IMPLEMENTATION
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999996494814575	WITHOUT_CLASSIFICATION	3.5051854249992935E-6	IMPLEMENTATION
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9989915035857144	WITHOUT_CLASSIFICATION	0.001008496414285667	IMPLEMENTATION
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999802510856383	WITHOUT_CLASSIFICATION	1.9748914361812202E-5	IMPLEMENTATION
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999291695886805	WITHOUT_CLASSIFICATION	7.083041131952358E-5	IMPLEMENTATION
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999044224052727	WITHOUT_CLASSIFICATION	9.557759472730895E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999706018011207	WITHOUT_CLASSIFICATION	2.9398198879294413E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9994498909270075	WITHOUT_CLASSIFICATION	5.501090729924897E-4	IMPLEMENTATION
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998793044129521	WITHOUT_CLASSIFICATION	1.2069558704782124E-4	IMPLEMENTATION
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999488509069427	WITHOUT_CLASSIFICATION	5.114909305719214E-5	IMPLEMENTATION
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997216544582301	WITHOUT_CLASSIFICATION	2.78345541769861E-4	IMPLEMENTATION
// No batch statements	WITHOUT_CLASSIFICATION	0.9999501937247539	WITHOUT_CLASSIFICATION	4.980627524601146E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9991867972388033	WITHOUT_CLASSIFICATION	8.132027611966403E-4	IMPLEMENTATION
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9971518076835137	WITHOUT_CLASSIFICATION	0.002848192316486231	IMPLEMENTATION
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9994504997779251	WITHOUT_CLASSIFICATION	5.495002220749317E-4	IMPLEMENTATION
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999803125465387	WITHOUT_CLASSIFICATION	1.9687453461232393E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993234688916803	WITHOUT_CLASSIFICATION	6.76531108319655E-4	IMPLEMENTATION
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9997090387276214	WITHOUT_CLASSIFICATION	2.9096127237852095E-4	IMPLEMENTATION
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9969022688512426	WITHOUT_CLASSIFICATION	0.003097731148757328	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9952868404679666	WITHOUT_CLASSIFICATION	0.004713159532033468	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993234688916803	WITHOUT_CLASSIFICATION	6.76531108319655E-4	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999823323830926	WITHOUT_CLASSIFICATION	1.7667616907353572E-5	IMPLEMENTATION
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999706018011207	WITHOUT_CLASSIFICATION	2.9398198879294413E-5	IMPLEMENTATION
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9982966960739262	WITHOUT_CLASSIFICATION	0.0017033039260738127	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9997523294438748	WITHOUT_CLASSIFICATION	2.476705561251689E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999843616613274	WITHOUT_CLASSIFICATION	1.5638338672537136E-5	IMPLEMENTATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.99998855281936	WITHOUT_CLASSIFICATION	1.144718063981952E-5	IMPLEMENTATION
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998417025427053	WITHOUT_CLASSIFICATION	1.5829745729460464E-4	IMPLEMENTATION
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998605755406954	WITHOUT_CLASSIFICATION	1.3942445930458446E-4	IMPLEMENTATION
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9998371997832993	WITHOUT_CLASSIFICATION	1.6280021670067281E-4	IMPLEMENTATION
// add the main query	WITHOUT_CLASSIFICATION	0.9995875748151763	WITHOUT_CLASSIFICATION	4.124251848235701E-4	IMPLEMENTATION
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9996203332738882	WITHOUT_CLASSIFICATION	3.7966672611176487E-4	IMPLEMENTATION
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999912404043526	WITHOUT_CLASSIFICATION	8.759595647342485E-6	IMPLEMENTATION
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9998272388775844	WITHOUT_CLASSIFICATION	1.72761122415529E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9993234688916803	WITHOUT_CLASSIFICATION	6.76531108319655E-4	IMPLEMENTATION
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998314886436821	WITHOUT_CLASSIFICATION	1.6851135631793085E-4	IMPLEMENTATION
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9991068442590673	WITHOUT_CLASSIFICATION	8.931557409328359E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998774163331616	WITHOUT_CLASSIFICATION	1.2258366683840993E-4	IMPLEMENTATION
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996692963958304	WITHOUT_CLASSIFICATION	3.307036041697258E-4	IMPLEMENTATION
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9998749567713128	WITHOUT_CLASSIFICATION	1.2504322868727517E-4	IMPLEMENTATION
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999856111971913	WITHOUT_CLASSIFICATION	1.4388802808803586E-5	IMPLEMENTATION
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9998443582204205	WITHOUT_CLASSIFICATION	1.5564177957946967E-4	IMPLEMENTATION
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999956085898251	WITHOUT_CLASSIFICATION	4.3914101749661316E-6	IMPLEMENTATION
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9996005958456307	WITHOUT_CLASSIFICATION	3.994041543693106E-4	IMPLEMENTATION
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998890247879948	WITHOUT_CLASSIFICATION	1.109752120052549E-4	IMPLEMENTATION
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999907705285839	WITHOUT_CLASSIFICATION	9.229471416101716E-5	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998830445803648	WITHOUT_CLASSIFICATION	1.1695541963519677E-4	IMPLEMENTATION
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973510362087384	WITHOUT_CLASSIFICATION	0.002648963791261581	IMPLEMENTATION
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979862256150893	WITHOUT_CLASSIFICATION	0.002013774384910599	IMPLEMENTATION
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9998830445803648	WITHOUT_CLASSIFICATION	1.1695541963519677E-4	IMPLEMENTATION
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999947865042664	WITHOUT_CLASSIFICATION	5.213495733608057E-5	IMPLEMENTATION
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999128421846265	WITHOUT_CLASSIFICATION	8.715781537341155E-5	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973610562025771	WITHOUT_CLASSIFICATION	0.0026389437974229124	IMPLEMENTATION
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9990953759137795	WITHOUT_CLASSIFICATION	9.046240862205928E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
/*<String>*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975712374867893	WITHOUT_CLASSIFICATION	0.0024287625132107075	IMPLEMENTATION
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971257435249347	WITHOUT_CLASSIFICATION	0.0028742564750653538	IMPLEMENTATION
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9998836981891028	WITHOUT_CLASSIFICATION	1.1630181089708139E-4	IMPLEMENTATION
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999744645980299	WITHOUT_CLASSIFICATION	2.5535401970073985E-5	IMPLEMENTATION
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998924306060851	WITHOUT_CLASSIFICATION	1.0756939391494527E-4	IMPLEMENTATION
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999923107009424	WITHOUT_CLASSIFICATION	7.689299057485012E-6	IMPLEMENTATION
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999886952388742	WITHOUT_CLASSIFICATION	1.1304761125737525E-5	IMPLEMENTATION
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999991948648999	WITHOUT_CLASSIFICATION	8.051351000767261E-7	IMPLEMENTATION
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9992238760773519	WITHOUT_CLASSIFICATION	7.761239226481283E-4	IMPLEMENTATION
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999400703980432	WITHOUT_CLASSIFICATION	5.9929601956706894E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9996245130473883	WITHOUT_CLASSIFICATION	3.7548695261168004E-4	IMPLEMENTATION
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9991728138547091	WITHOUT_CLASSIFICATION	8.271861452909448E-4	IMPLEMENTATION
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999059436762497	WITHOUT_CLASSIFICATION	9.405632375022516E-5	IMPLEMENTATION
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998991269297218	WITHOUT_CLASSIFICATION	1.0087307027820136E-4	IMPLEMENTATION
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998792322614496	WITHOUT_CLASSIFICATION	1.207677385504946E-4	IMPLEMENTATION
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999666750496286	WITHOUT_CLASSIFICATION	3.332495037149124E-5	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9968730190678675	WITHOUT_CLASSIFICATION	0.0031269809321324555	IMPLEMENTATION
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996680471694819	WITHOUT_CLASSIFICATION	3.3195283051819474E-4	IMPLEMENTATION
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995313864003476	WITHOUT_CLASSIFICATION	4.6861359965250923E-4	IMPLEMENTATION
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999779912850483	WITHOUT_CLASSIFICATION	2.2008714951731478E-5	IMPLEMENTATION
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997866343741304	WITHOUT_CLASSIFICATION	2.1336562586963905E-4	IMPLEMENTATION
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999275928361391	WITHOUT_CLASSIFICATION	7.240716386089167E-5	IMPLEMENTATION
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999909852963315	WITHOUT_CLASSIFICATION	9.014703668500181E-5	IMPLEMENTATION
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999888451791854	WITHOUT_CLASSIFICATION	1.1154820814606883E-4	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999374484769094	WITHOUT_CLASSIFICATION	6.255152309068142E-5	IMPLEMENTATION
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9994306343234604	WITHOUT_CLASSIFICATION	5.693656765396184E-4	IMPLEMENTATION
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998743013897555	WITHOUT_CLASSIFICATION	1.2569861024447747E-4	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999888451791854	WITHOUT_CLASSIFICATION	1.1154820814606883E-4	IMPLEMENTATION
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999175345626359	WITHOUT_CLASSIFICATION	8.246543736416668E-5	IMPLEMENTATION
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999412510340352	WITHOUT_CLASSIFICATION	5.874896596485606E-5	IMPLEMENTATION
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999924997129838	WITHOUT_CLASSIFICATION	7.500287016205965E-5	IMPLEMENTATION
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999313896169493	WITHOUT_CLASSIFICATION	6.86103830507468E-5	IMPLEMENTATION
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9997502641386954	WITHOUT_CLASSIFICATION	2.497358613046061E-4	IMPLEMENTATION
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9997849538527555	WITHOUT_CLASSIFICATION	2.15046147244545E-4	IMPLEMENTATION
// continue loop	WITHOUT_CLASSIFICATION	0.9996559192268073	WITHOUT_CLASSIFICATION	3.440807731926592E-4	IMPLEMENTATION
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9997566797897146	WITHOUT_CLASSIFICATION	2.433202102853653E-4	IMPLEMENTATION
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9997566797897146	WITHOUT_CLASSIFICATION	2.433202102853653E-4	IMPLEMENTATION
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999917756846441	WITHOUT_CLASSIFICATION	8.224315355899097E-5	IMPLEMENTATION
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998637837622769	WITHOUT_CLASSIFICATION	1.3621623772296757E-4	IMPLEMENTATION
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9997025396574745	WITHOUT_CLASSIFICATION	2.9746034252555657E-4	IMPLEMENTATION
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9998533485045148	WITHOUT_CLASSIFICATION	1.4665149548509195E-4	IMPLEMENTATION
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999992717525126	WITHOUT_CLASSIFICATION	7.28247487427989E-7	IMPLEMENTATION
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9995570706192491	WITHOUT_CLASSIFICATION	4.4292938075087343E-4	IMPLEMENTATION
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999993701855308	WITHOUT_CLASSIFICATION	6.298144692780946E-7	IMPLEMENTATION
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999782559715661	WITHOUT_CLASSIFICATION	2.1744028433987336E-5	IMPLEMENTATION
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999189321476428	WITHOUT_CLASSIFICATION	8.106785235714999E-5	IMPLEMENTATION
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999316826331928	WITHOUT_CLASSIFICATION	6.831736680717096E-5	IMPLEMENTATION
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998911274130827	WITHOUT_CLASSIFICATION	1.0887258691720143E-4	IMPLEMENTATION
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999985986209402	WITHOUT_CLASSIFICATION	1.4013790597826241E-5	IMPLEMENTATION
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9998353630624127	WITHOUT_CLASSIFICATION	1.6463693758724568E-4	IMPLEMENTATION
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8827547930578695	WITHOUT_CLASSIFICATION	0.11724520694213056	IMPLEMENTATION
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9978606718571873	WITHOUT_CLASSIFICATION	0.0021393281428128087	IMPLEMENTATION
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999253869168561	WITHOUT_CLASSIFICATION	7.461308314395286E-5	IMPLEMENTATION
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999849484391917	WITHOUT_CLASSIFICATION	1.5051560808290184E-4	IMPLEMENTATION
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9877853412989956	WITHOUT_CLASSIFICATION	0.012214658701004463	IMPLEMENTATION
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9995347983654891	WITHOUT_CLASSIFICATION	4.6520163451096644E-4	IMPLEMENTATION
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999294211640084	WITHOUT_CLASSIFICATION	7.057883599166686E-5	IMPLEMENTATION
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999721120661009	WITHOUT_CLASSIFICATION	2.7887933899071082E-5	IMPLEMENTATION
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999291862559831	WITHOUT_CLASSIFICATION	7.081374401679123E-5	IMPLEMENTATION
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9995145131775809	WITHOUT_CLASSIFICATION	4.854868224190437E-4	IMPLEMENTATION
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999865977363327	WITHOUT_CLASSIFICATION	1.3402263667266228E-5	IMPLEMENTATION
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999243089919947	WITHOUT_CLASSIFICATION	7.569100800524827E-5	IMPLEMENTATION
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995867120758196	WITHOUT_CLASSIFICATION	4.132879241803189E-4	IMPLEMENTATION
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9971457497368785	WITHOUT_CLASSIFICATION	0.0028542502631215758	IMPLEMENTATION
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9944191304150709	WITHOUT_CLASSIFICATION	0.005580869584929097	IMPLEMENTATION
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9983132664526216	WITHOUT_CLASSIFICATION	0.0016867335473784017	IMPLEMENTATION
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9993896690406735	WITHOUT_CLASSIFICATION	6.103309593264356E-4	IMPLEMENTATION
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999916080898359	WITHOUT_CLASSIFICATION	8.391910164096421E-5	IMPLEMENTATION
//unwrap the object	WITHOUT_CLASSIFICATION	0.9978304680408904	WITHOUT_CLASSIFICATION	0.0021695319591096647	IMPLEMENTATION
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9994861382812272	WITHOUT_CLASSIFICATION	5.138617187728359E-4	IMPLEMENTATION
//return the proxied object	WITHOUT_CLASSIFICATION	0.9996461937212894	WITHOUT_CLASSIFICATION	3.5380627871062757E-4	IMPLEMENTATION
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998482647149902	WITHOUT_CLASSIFICATION	1.5173528500990327E-4	IMPLEMENTATION
// early exit...	WITHOUT_CLASSIFICATION	0.9995382708228147	WITHOUT_CLASSIFICATION	4.6172917718529326E-4	IMPLEMENTATION
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9997828439290906	WITHOUT_CLASSIFICATION	2.1715607090944792E-4	IMPLEMENTATION
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9908721661151344	WITHOUT_CLASSIFICATION	0.009127833884865499	IMPLEMENTATION
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9995069580090586	WITHOUT_CLASSIFICATION	4.930419909413097E-4	IMPLEMENTATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999766303457567	WITHOUT_CLASSIFICATION	2.336965424329639E-4	IMPLEMENTATION
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9997112826311697	WITHOUT_CLASSIFICATION	2.8871736883031326E-4	IMPLEMENTATION
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9989915035857144	WITHOUT_CLASSIFICATION	0.001008496414285667	IMPLEMENTATION
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9989915035857144	WITHOUT_CLASSIFICATION	0.001008496414285667	IMPLEMENTATION
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999944210020468	WITHOUT_CLASSIFICATION	5.5789979532072117E-5	IMPLEMENTATION
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999796640730167	WITHOUT_CLASSIFICATION	2.0335926983189964E-5	IMPLEMENTATION
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999406023670366	WITHOUT_CLASSIFICATION	5.939763296325185E-5	IMPLEMENTATION
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999911457794958	WITHOUT_CLASSIFICATION	8.85422050426967E-6	IMPLEMENTATION
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999846572626834	WITHOUT_CLASSIFICATION	1.534273731663716E-5	IMPLEMENTATION
//bad cast	WITHOUT_CLASSIFICATION	0.9999149938803035	WITHOUT_CLASSIFICATION	8.500611969651677E-5	IMPLEMENTATION
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9992860050842838	WITHOUT_CLASSIFICATION	7.139949157162548E-4	IMPLEMENTATION
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9958298603729596	WITHOUT_CLASSIFICATION	0.00417013962704031	IMPLEMENTATION
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9996396759300332	WITHOUT_CLASSIFICATION	3.603240699667605E-4	IMPLEMENTATION
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9996127027299141	WITHOUT_CLASSIFICATION	3.872972700860194E-4	IMPLEMENTATION
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993960635304829	WITHOUT_CLASSIFICATION	6.039364695170794E-4	IMPLEMENTATION
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9998747483822238	WITHOUT_CLASSIFICATION	1.252516177761868E-4	IMPLEMENTATION
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9991700792282173	WITHOUT_CLASSIFICATION	8.29920771782743E-4	IMPLEMENTATION
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9995748748944664	WITHOUT_CLASSIFICATION	4.2512510553355796E-4	IMPLEMENTATION
//take a snapshot	WITHOUT_CLASSIFICATION	0.9980646774827118	WITHOUT_CLASSIFICATION	0.0019353225172881996	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9988667578214712	WITHOUT_CLASSIFICATION	0.00113324217852886	IMPLEMENTATION
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9996579989220383	WITHOUT_CLASSIFICATION	3.420010779617181E-4	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9988928206222973	WITHOUT_CLASSIFICATION	0.0011071793777026725	IMPLEMENTATION
// We've been here before	WITHOUT_CLASSIFICATION	0.999760892888186	WITHOUT_CLASSIFICATION	2.3910711181401002E-4	IMPLEMENTATION
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999743093614262	WITHOUT_CLASSIFICATION	2.5690638573806327E-5	IMPLEMENTATION
// do the work	WITHOUT_CLASSIFICATION	0.9988928206222973	WITHOUT_CLASSIFICATION	0.0011071793777026725	IMPLEMENTATION
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999847691030455	WITHOUT_CLASSIFICATION	1.5230896954595665E-5	IMPLEMENTATION
// or its key changed	WITHOUT_CLASSIFICATION	0.999993769341393	WITHOUT_CLASSIFICATION	6.2306586070587805E-6	IMPLEMENTATION
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9993151200694845	WITHOUT_CLASSIFICATION	6.848799305154312E-4	IMPLEMENTATION
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999142966037023	WITHOUT_CLASSIFICATION	8.570339629770285E-4	IMPLEMENTATION
// force initialize!	WITHOUT_CLASSIFICATION	0.9979783447380054	WITHOUT_CLASSIFICATION	0.0020216552619945235	IMPLEMENTATION
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999978305188475	WITHOUT_CLASSIFICATION	2.1694811526012697E-6	IMPLEMENTATION
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998779748921289	WITHOUT_CLASSIFICATION	1.2202510787113037E-4	IMPLEMENTATION
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998430684054952	WITHOUT_CLASSIFICATION	1.5693159450469855E-4	IMPLEMENTATION
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998290146963773	WITHOUT_CLASSIFICATION	1.7098530362264934E-4	IMPLEMENTATION
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999858825655287	WITHOUT_CLASSIFICATION	1.411743447130309E-5	IMPLEMENTATION
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9998090610262963	WITHOUT_CLASSIFICATION	1.9093897370369545E-4	IMPLEMENTATION
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.995178864388754	WITHOUT_CLASSIFICATION	0.004821135611246014	IMPLEMENTATION
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9997135641101244	WITHOUT_CLASSIFICATION	2.864358898756582E-4	IMPLEMENTATION
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9988059927389612	WITHOUT_CLASSIFICATION	0.001194007261038824	IMPLEMENTATION
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9976371667827788	WITHOUT_CLASSIFICATION	0.002362833217221252	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9984389752559852	WITHOUT_CLASSIFICATION	0.00156102474401475	IMPLEMENTATION
//optimization	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//re-snapshot	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999339970625163	WITHOUT_CLASSIFICATION	6.600293748373197E-5	IMPLEMENTATION
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9918399037541755	WITHOUT_CLASSIFICATION	0.00816009624582455	IMPLEMENTATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9994326186145435	WITHOUT_CLASSIFICATION	5.673813854565611E-4	IMPLEMENTATION
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999948100412133	WITHOUT_CLASSIFICATION	5.189958786687649E-5	IMPLEMENTATION
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999547311351642	WITHOUT_CLASSIFICATION	4.526886483584865E-5	IMPLEMENTATION
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9871758250959881	WITHOUT_CLASSIFICATION	0.012824174904011923	IMPLEMENTATION
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.8085742022725869	WITHOUT_CLASSIFICATION	0.19142579772741308	IMPLEMENTATION
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9991999361216097	WITHOUT_CLASSIFICATION	8.000638783901935E-4	IMPLEMENTATION
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9980232413012037	WITHOUT_CLASSIFICATION	0.001976758698796395	IMPLEMENTATION
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.980293566099051	WITHOUT_CLASSIFICATION	0.019706433900948905	IMPLEMENTATION
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998432952881864	WITHOUT_CLASSIFICATION	1.5670471181366175E-4	IMPLEMENTATION
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9968730190678675	WITHOUT_CLASSIFICATION	0.0031269809321324555	IMPLEMENTATION
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9981738293933528	WITHOUT_CLASSIFICATION	0.0018261706066472164	IMPLEMENTATION
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999973091420468	WITHOUT_CLASSIFICATION	2.6908579531998856E-6	IMPLEMENTATION
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.8849642097205763	WITHOUT_CLASSIFICATION	0.11503579027942368	IMPLEMENTATION
//do the test	WITHOUT_CLASSIFICATION	0.999677245490563	WITHOUT_CLASSIFICATION	3.2275450943703197E-4	IMPLEMENTATION
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999932213119033	WITHOUT_CLASSIFICATION	6.778688096709308E-6	IMPLEMENTATION
//unwrap it	WITHOUT_CLASSIFICATION	0.9928665993360472	WITHOUT_CLASSIFICATION	0.007133400663952904	IMPLEMENTATION
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9924042789645706	WITHOUT_CLASSIFICATION	0.007595721035429401	IMPLEMENTATION
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999599484576728	WITHOUT_CLASSIFICATION	4.0051542327192276E-5	IMPLEMENTATION
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998923803621743	WITHOUT_CLASSIFICATION	1.0761963782571079E-4	IMPLEMENTATION
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998935857897827	WITHOUT_CLASSIFICATION	1.064142102172343E-4	IMPLEMENTATION
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9998851040873872	WITHOUT_CLASSIFICATION	1.1489591261284401E-4	IMPLEMENTATION
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998620662683176	WITHOUT_CLASSIFICATION	1.3793373168232096E-4	IMPLEMENTATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9990320074898846	WITHOUT_CLASSIFICATION	9.679925101153458E-4	IMPLEMENTATION
//int count = 0;	WITHOUT_CLASSIFICATION	0.9973924951193665	WITHOUT_CLASSIFICATION	0.002607504880633522	IMPLEMENTATION
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9991292532005387	WITHOUT_CLASSIFICATION	8.707467994613648E-4	IMPLEMENTATION
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9995242085326038	WITHOUT_CLASSIFICATION	4.757914673961022E-4	IMPLEMENTATION
//count++;	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999532409334649	WITHOUT_CLASSIFICATION	4.675906653509945E-5	IMPLEMENTATION
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999699926313524	WITHOUT_CLASSIFICATION	3.0007368647592936E-4	IMPLEMENTATION
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.99997979947027	WITHOUT_CLASSIFICATION	2.0200529730042376E-5	IMPLEMENTATION
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9991489854797289	WITHOUT_CLASSIFICATION	8.510145202710317E-4	IMPLEMENTATION
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997186525974975	WITHOUT_CLASSIFICATION	2.813474025025177E-4	IMPLEMENTATION
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9996318205163465	WITHOUT_CLASSIFICATION	3.681794836536283E-4	IMPLEMENTATION
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999165056571865	WITHOUT_CLASSIFICATION	8.349434281347422E-5	IMPLEMENTATION
// initialize this collection	WITHOUT_CLASSIFICATION	0.9995193225471566	WITHOUT_CLASSIFICATION	4.806774528433939E-4	IMPLEMENTATION
// create one	WITHOUT_CLASSIFICATION	0.9993343263294641	WITHOUT_CLASSIFICATION	6.656736705359218E-4	IMPLEMENTATION
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999374491502692	WITHOUT_CLASSIFICATION	6.255084973080274E-4	IMPLEMENTATION
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999472583759482	WITHOUT_CLASSIFICATION	5.2741624051867116E-5	IMPLEMENTATION
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.997985857670105	WITHOUT_CLASSIFICATION	0.00201414232989505	IMPLEMENTATION
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9746690808133569	WITHOUT_CLASSIFICATION	0.025330919186643056	IMPLEMENTATION
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992177318420516	WITHOUT_CLASSIFICATION	7.822681579482828E-4	IMPLEMENTATION
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999141167466821	WITHOUT_CLASSIFICATION	8.588325331789187E-4	IMPLEMENTATION
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998321574199905	WITHOUT_CLASSIFICATION	1.678425800094244E-4	IMPLEMENTATION
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999995822481634	WITHOUT_CLASSIFICATION	4.177518366030571E-6	IMPLEMENTATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998519039224457	WITHOUT_CLASSIFICATION	1.4809607755438713E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999718874604184	WITHOUT_CLASSIFICATION	2.8112539581596676E-5	IMPLEMENTATION
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.975047219753383	WITHOUT_CLASSIFICATION	0.024952780246616985	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9996009788237158	WITHOUT_CLASSIFICATION	3.9902117628422105E-4	IMPLEMENTATION
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998384382061486	WITHOUT_CLASSIFICATION	1.6156179385149065E-4	IMPLEMENTATION
// don't care...	WITHOUT_CLASSIFICATION	0.9996009788237158	WITHOUT_CLASSIFICATION	3.9902117628422105E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997222168028108	WITHOUT_CLASSIFICATION	2.777831971890771E-4	IMPLEMENTATION
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999671796241835	WITHOUT_CLASSIFICATION	3.2820375816489895E-5	IMPLEMENTATION
// named parameter	WITHOUT_CLASSIFICATION	0.9998150913270969	WITHOUT_CLASSIFICATION	1.8490867290309721E-4	IMPLEMENTATION
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999946171281633	WITHOUT_CLASSIFICATION	5.382871836725036E-6	IMPLEMENTATION
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999976229822022	WITHOUT_CLASSIFICATION	2.3770177978007065E-5	IMPLEMENTATION
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999339063261404	WITHOUT_CLASSIFICATION	6.609367385955392E-5	IMPLEMENTATION
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9998109149864113	WITHOUT_CLASSIFICATION	1.890850135886566E-4	IMPLEMENTATION
// perform the actual work	WITHOUT_CLASSIFICATION	0.9998846493661963	WITHOUT_CLASSIFICATION	1.1535063380378516E-4	IMPLEMENTATION
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.999852072264797	WITHOUT_CLASSIFICATION	1.479277352029994E-4	IMPLEMENTATION
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.6569031829297416	WITHOUT_CLASSIFICATION	0.3430968170702584	IMPLEMENTATION
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9986172535465324	WITHOUT_CLASSIFICATION	0.0013827464534676118	IMPLEMENTATION
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9976931556483286	WITHOUT_CLASSIFICATION	0.0023068443516713723	IMPLEMENTATION
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9995651601428905	WITHOUT_CLASSIFICATION	4.3483985710952524E-4	IMPLEMENTATION
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999489609282208	WITHOUT_CLASSIFICATION	5.1039071779173836E-5	IMPLEMENTATION
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.6857165370225546	IMPLEMENTATION	0.31428346297744525	WITHOUT_CLASSIFICATION
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9995804683590473	WITHOUT_CLASSIFICATION	4.1953164095267565E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998119450182126	WITHOUT_CLASSIFICATION	1.8805498178735988E-4	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998119450182126	WITHOUT_CLASSIFICATION	1.8805498178735988E-4	IMPLEMENTATION
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9996127027299141	WITHOUT_CLASSIFICATION	3.872972700860194E-4	IMPLEMENTATION
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9994593721096297	WITHOUT_CLASSIFICATION	5.406278903703348E-4	IMPLEMENTATION
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999966153212358	WITHOUT_CLASSIFICATION	3.3846787640978713E-6	IMPLEMENTATION
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999903890280212	WITHOUT_CLASSIFICATION	9.610971978888414E-6	IMPLEMENTATION
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999877845847186	WITHOUT_CLASSIFICATION	1.2215415281529804E-5	IMPLEMENTATION
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999926051112532	WITHOUT_CLASSIFICATION	7.394888746704354E-6	IMPLEMENTATION
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9992522983824432	WITHOUT_CLASSIFICATION	7.477016175567334E-4	IMPLEMENTATION
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999539041182163	WITHOUT_CLASSIFICATION	4.609588178369505E-5	IMPLEMENTATION
// grab its current state	WITHOUT_CLASSIFICATION	0.9997653195061073	WITHOUT_CLASSIFICATION	2.3468049389278086E-4	IMPLEMENTATION
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999656149966111	WITHOUT_CLASSIFICATION	3.4385003388864984E-5	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999064974459	WITHOUT_CLASSIFICATION	9.350255409778836E-7	IMPLEMENTATION
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9998460030999096	WITHOUT_CLASSIFICATION	1.5399690009048443E-4	IMPLEMENTATION
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998679634326598	WITHOUT_CLASSIFICATION	1.320365673401186E-4	IMPLEMENTATION
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999899611221172	WITHOUT_CLASSIFICATION	1.0038877882792147E-5	IMPLEMENTATION
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9992889150410621	WITHOUT_CLASSIFICATION	7.110849589377581E-4	IMPLEMENTATION
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9995554853658197	WITHOUT_CLASSIFICATION	4.445146341802354E-4	IMPLEMENTATION
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999888475251514	WITHOUT_CLASSIFICATION	1.1152474848644777E-5	IMPLEMENTATION
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9944020051713971	WITHOUT_CLASSIFICATION	0.005597994828602916	IMPLEMENTATION
//use the current version	WITHOUT_CLASSIFICATION	0.9981929049383145	WITHOUT_CLASSIFICATION	0.0018070950616855105	IMPLEMENTATION
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999920131328791	WITHOUT_CLASSIFICATION	7.98686712089831E-6	IMPLEMENTATION
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999818055711927	WITHOUT_CLASSIFICATION	1.8194428807380604E-5	IMPLEMENTATION
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9995618066587695	WITHOUT_CLASSIFICATION	4.38193341230509E-4	IMPLEMENTATION
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998295735192195	WITHOUT_CLASSIFICATION	1.7042648078058735E-4	IMPLEMENTATION
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9996755381468395	WITHOUT_CLASSIFICATION	3.2446185316058456E-4	IMPLEMENTATION
//even process null collections	WITHOUT_CLASSIFICATION	0.9993591505096219	WITHOUT_CLASSIFICATION	6.408494903781529E-4	IMPLEMENTATION
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999944665900071	WITHOUT_CLASSIFICATION	5.533409992899305E-6	IMPLEMENTATION
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997562102777923	WITHOUT_CLASSIFICATION	2.4378972220765656E-4	IMPLEMENTATION
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9990592101373946	WITHOUT_CLASSIFICATION	9.407898626053272E-4	IMPLEMENTATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9971618656318806	WITHOUT_CLASSIFICATION	0.00283813436811951	IMPLEMENTATION
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999828710010434	WITHOUT_CLASSIFICATION	1.7128998956510203E-5	IMPLEMENTATION
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998068743036754	WITHOUT_CLASSIFICATION	1.9312569632454695E-4	IMPLEMENTATION
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999628931250737	WITHOUT_CLASSIFICATION	3.7106874926210366E-5	IMPLEMENTATION
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9986166073520566	WITHOUT_CLASSIFICATION	0.0013833926479433452	IMPLEMENTATION
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9969948053868742	WITHOUT_CLASSIFICATION	0.003005194613125677	IMPLEMENTATION
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999522386742068	WITHOUT_CLASSIFICATION	4.776132579327365E-5	IMPLEMENTATION
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999647307234064	WITHOUT_CLASSIFICATION	3.5269276593601285E-5	IMPLEMENTATION
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999231247145178	WITHOUT_CLASSIFICATION	7.687528548221739E-5	IMPLEMENTATION
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999859316944459	WITHOUT_CLASSIFICATION	1.4068305554095968E-5	IMPLEMENTATION
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999979706593599	WITHOUT_CLASSIFICATION	2.029340640124262E-6	IMPLEMENTATION
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9982841116148201	WITHOUT_CLASSIFICATION	0.0017158883851798804	IMPLEMENTATION
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999473754756847	WITHOUT_CLASSIFICATION	5.262452431537633E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998310167576863	WITHOUT_CLASSIFICATION	1.6898324231371452E-4	IMPLEMENTATION
//some statistics	WITHOUT_CLASSIFICATION	0.9971418383755519	WITHOUT_CLASSIFICATION	0.002858161624448201	IMPLEMENTATION
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.6403527191842061	IMPLEMENTATION	0.3596472808157939	WITHOUT_CLASSIFICATION
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9992384186564212	WITHOUT_CLASSIFICATION	7.615813435788101E-4	IMPLEMENTATION
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9991814668199341	WITHOUT_CLASSIFICATION	8.185331800659556E-4	IMPLEMENTATION
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9997131342860256	WITHOUT_CLASSIFICATION	2.8686571397439574E-4	IMPLEMENTATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997829061347	WITHOUT_CLASSIFICATION	2.1709386533066653E-7	IMPLEMENTATION
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998286484533986	WITHOUT_CLASSIFICATION	1.713515466015529E-4	IMPLEMENTATION
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999444913276733	WITHOUT_CLASSIFICATION	5.550867232671079E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998310167576863	WITHOUT_CLASSIFICATION	1.6898324231371452E-4	IMPLEMENTATION
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999636595845672	WITHOUT_CLASSIFICATION	3.634041543263419E-5	IMPLEMENTATION
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9988589689837784	WITHOUT_CLASSIFICATION	0.0011410310162217104	IMPLEMENTATION
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9982794003614476	WITHOUT_CLASSIFICATION	0.0017205996385524754	IMPLEMENTATION
//get a snapshot	WITHOUT_CLASSIFICATION	0.9981828587212025	WITHOUT_CLASSIFICATION	0.0018171412787975265	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999823323830926	WITHOUT_CLASSIFICATION	1.7667616907353572E-5	IMPLEMENTATION
/* package-private */	WITHOUT_CLASSIFICATION	0.9999823323830926	WITHOUT_CLASSIFICATION	1.7667616907353572E-5	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999992706549414	WITHOUT_CLASSIFICATION	7.293450586328679E-7	IMPLEMENTATION
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999852901720547	WITHOUT_CLASSIFICATION	1.4709827945230247E-5	IMPLEMENTATION
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999917969272646	WITHOUT_CLASSIFICATION	8.20307273539949E-6	IMPLEMENTATION
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9998091554887526	WITHOUT_CLASSIFICATION	1.9084451124742923E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9985953232294893	WITHOUT_CLASSIFICATION	0.0014046767705106398	IMPLEMENTATION
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998997575105776	WITHOUT_CLASSIFICATION	1.002424894224007E-4	IMPLEMENTATION
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999357820057163	WITHOUT_CLASSIFICATION	6.421799428362852E-5	IMPLEMENTATION
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9997314482639761	WITHOUT_CLASSIFICATION	2.6855173602398255E-4	IMPLEMENTATION
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9985251352028893	WITHOUT_CLASSIFICATION	0.0014748647971105982	IMPLEMENTATION
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9992397684099251	WITHOUT_CLASSIFICATION	7.602315900749016E-4	IMPLEMENTATION
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999660446431489	WITHOUT_CLASSIFICATION	3.3955356851077926E-5	IMPLEMENTATION
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9994668284881382	WITHOUT_CLASSIFICATION	5.331715118617637E-4	IMPLEMENTATION
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9998204240374873	WITHOUT_CLASSIFICATION	1.7957596251270546E-4	IMPLEMENTATION
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998906443433406	WITHOUT_CLASSIFICATION	1.0935565665930263E-4	IMPLEMENTATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9993970979267908	WITHOUT_CLASSIFICATION	6.02902073209251E-4	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9920108666315602	WITHOUT_CLASSIFICATION	0.007989133368439759	IMPLEMENTATION
//cachedState,	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998153552916905	WITHOUT_CLASSIFICATION	1.8464470830959905E-4	IMPLEMENTATION
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9998161059180927	WITHOUT_CLASSIFICATION	1.83894081907432E-4	IMPLEMENTATION
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9992963339253612	WITHOUT_CLASSIFICATION	7.036660746388123E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997218426557942	WITHOUT_CLASSIFICATION	2.781573442057171E-4	IMPLEMENTATION
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999600432921559	WITHOUT_CLASSIFICATION	3.995670784398207E-5	IMPLEMENTATION
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9939547712748789	WITHOUT_CLASSIFICATION	0.0060452287251210905	IMPLEMENTATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9964573698619145	WITHOUT_CLASSIFICATION	0.0035426301380856715	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9976942574235521	WITHOUT_CLASSIFICATION	0.0023057425764478573	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999360868614316	WITHOUT_CLASSIFICATION	6.391313856841028E-5	IMPLEMENTATION
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999979202472216	WITHOUT_CLASSIFICATION	2.0797527784316865E-6	IMPLEMENTATION
//DELETED	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999749649642818	WITHOUT_CLASSIFICATION	2.5035035718091347E-5	IMPLEMENTATION
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9998244018044574	WITHOUT_CLASSIFICATION	1.7559819554266491E-4	IMPLEMENTATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999604325145907	WITHOUT_CLASSIFICATION	3.95674854093011E-4	IMPLEMENTATION
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999749649642818	WITHOUT_CLASSIFICATION	2.5035035718091347E-5	IMPLEMENTATION
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9993010183102283	WITHOUT_CLASSIFICATION	6.989816897716768E-4	IMPLEMENTATION
//before cascade!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999865341347248	WITHOUT_CLASSIFICATION	1.3465865275260685E-5	IMPLEMENTATION
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999774753266161	WITHOUT_CLASSIFICATION	2.252467338390945E-5	IMPLEMENTATION
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998400432301521	WITHOUT_CLASSIFICATION	1.5995676984796806E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9603069260608936	WITHOUT_CLASSIFICATION	0.03969307393910644	IMPLEMENTATION
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999999064974459	WITHOUT_CLASSIFICATION	9.350255409778836E-7	IMPLEMENTATION
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999564776881641	WITHOUT_CLASSIFICATION	4.352231183595227E-5	IMPLEMENTATION
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9992238760773519	WITHOUT_CLASSIFICATION	7.761239226481283E-4	IMPLEMENTATION
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999945443126064	WITHOUT_CLASSIFICATION	5.455687393592139E-5	IMPLEMENTATION
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999301286045466	WITHOUT_CLASSIFICATION	6.987139545347348E-5	IMPLEMENTATION
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999908090362133	WITHOUT_CLASSIFICATION	9.190963786796165E-6	IMPLEMENTATION
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999574276340558	WITHOUT_CLASSIFICATION	4.2572365944236493E-5	IMPLEMENTATION
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9996583570725939	WITHOUT_CLASSIFICATION	3.4164292740611926E-4	IMPLEMENTATION
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999983869003623	WITHOUT_CLASSIFICATION	1.6130996377037632E-5	IMPLEMENTATION
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999402887044521	WITHOUT_CLASSIFICATION	5.971129554802125E-5	IMPLEMENTATION
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999680757235605	WITHOUT_CLASSIFICATION	3.192427643950925E-5	IMPLEMENTATION
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9997659983414242	WITHOUT_CLASSIFICATION	2.340016585759031E-4	IMPLEMENTATION
// eat it and try next	WITHOUT_CLASSIFICATION	0.9988334863134778	WITHOUT_CLASSIFICATION	0.0011665136865221938	IMPLEMENTATION
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9997258854085619	WITHOUT_CLASSIFICATION	2.741145914380674E-4	IMPLEMENTATION
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999938056594259	WITHOUT_CLASSIFICATION	6.194340574084489E-5	IMPLEMENTATION
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9997646526274676	WITHOUT_CLASSIFICATION	2.3534737253226449E-4	IMPLEMENTATION
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999873269228828	WITHOUT_CLASSIFICATION	1.2673077117195965E-4	IMPLEMENTATION
// remove initial " and "	WITHOUT_CLASSIFICATION	0.99989789967399	WITHOUT_CLASSIFICATION	1.0210032600998957E-4	IMPLEMENTATION
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.999918871794872	WITHOUT_CLASSIFICATION	8.112820512784781E-5	IMPLEMENTATION
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9997651647417921	WITHOUT_CLASSIFICATION	2.3483525820790956E-4	IMPLEMENTATION
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999834153651426	WITHOUT_CLASSIFICATION	1.6584634857476105E-5	IMPLEMENTATION
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9985415389271605	WITHOUT_CLASSIFICATION	0.0014584610728395325	IMPLEMENTATION
// Note this!!	WITHOUT_CLASSIFICATION	0.9993001245657627	WITHOUT_CLASSIFICATION	6.998754342372375E-4	IMPLEMENTATION
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999598654468081	WITHOUT_CLASSIFICATION	4.01345531917222E-5	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992941201547645	WITHOUT_CLASSIFICATION	7.05879845235522E-4	IMPLEMENTATION
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998442648757796	WITHOUT_CLASSIFICATION	0.0015573512422040984	IMPLEMENTATION
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9987946360552873	WITHOUT_CLASSIFICATION	0.0012053639447127944	IMPLEMENTATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9993486384236152	WITHOUT_CLASSIFICATION	6.513615763847378E-4	IMPLEMENTATION
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999323578214421	WITHOUT_CLASSIFICATION	6.76421785578804E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994917914990403	WITHOUT_CLASSIFICATION	5.082085009596951E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994917914990403	WITHOUT_CLASSIFICATION	5.082085009596951E-4	IMPLEMENTATION
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9998551585954384	WITHOUT_CLASSIFICATION	1.4484140456164202E-4	IMPLEMENTATION
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998456704156328	WITHOUT_CLASSIFICATION	1.5432958436719323E-4	IMPLEMENTATION
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999729363275928	WITHOUT_CLASSIFICATION	2.706367240715716E-5	IMPLEMENTATION
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999828963357165	WITHOUT_CLASSIFICATION	1.710366428350589E-4	IMPLEMENTATION
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9986914293511405	WITHOUT_CLASSIFICATION	0.001308570648859545	IMPLEMENTATION
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999689592323328	WITHOUT_CLASSIFICATION	3.1040767667334744E-5	IMPLEMENTATION
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999740257465288	WITHOUT_CLASSIFICATION	2.59742534711554E-5	IMPLEMENTATION
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999668155806872	WITHOUT_CLASSIFICATION	3.318441931286336E-5	IMPLEMENTATION
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998251200141507	WITHOUT_CLASSIFICATION	1.7487998584929244E-4	IMPLEMENTATION
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999675710249152	WITHOUT_CLASSIFICATION	3.2428975084833964E-5	IMPLEMENTATION
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999167906380819	WITHOUT_CLASSIFICATION	8.320936191799069E-5	IMPLEMENTATION
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999168811940535	WITHOUT_CLASSIFICATION	8.311880594644526E-5	IMPLEMENTATION
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999855345876782	WITHOUT_CLASSIFICATION	1.446541232177535E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994917914990403	WITHOUT_CLASSIFICATION	5.082085009596951E-4	IMPLEMENTATION
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998979840473599	WITHOUT_CLASSIFICATION	1.0201595264013247E-4	IMPLEMENTATION
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999178266608953	WITHOUT_CLASSIFICATION	8.217333910457712E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999948125819728	WITHOUT_CLASSIFICATION	5.187418027181528E-6	IMPLEMENTATION
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999623761785638	WITHOUT_CLASSIFICATION	3.7623821436182857E-5	IMPLEMENTATION
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999495569267031	WITHOUT_CLASSIFICATION	5.0443073297028506E-5	IMPLEMENTATION
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998462947707757	WITHOUT_CLASSIFICATION	1.5370522922434748E-4	IMPLEMENTATION
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998623695658682	WITHOUT_CLASSIFICATION	1.3763043413192187E-4	IMPLEMENTATION
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999976273747378	WITHOUT_CLASSIFICATION	2.3726252622072535E-5	IMPLEMENTATION
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999877521419733	WITHOUT_CLASSIFICATION	1.2247858026571038E-5	IMPLEMENTATION
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999422352976524	WITHOUT_CLASSIFICATION	5.776470234769046E-5	IMPLEMENTATION
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9995997311789568	WITHOUT_CLASSIFICATION	4.0026882104317085E-4	IMPLEMENTATION
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992941201547645	WITHOUT_CLASSIFICATION	7.05879845235522E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994917914990403	WITHOUT_CLASSIFICATION	5.082085009596951E-4	IMPLEMENTATION
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999623910639729	WITHOUT_CLASSIFICATION	3.7608936027113955E-5	IMPLEMENTATION
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9996437596764566	WITHOUT_CLASSIFICATION	3.562403235433969E-4	IMPLEMENTATION
// switch	WITHOUT_CLASSIFICATION	0.999982731747868	WITHOUT_CLASSIFICATION	1.7268252131950177E-5	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.998840978012561	WITHOUT_CLASSIFICATION	0.0011590219874389714	IMPLEMENTATION
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999678812133779	WITHOUT_CLASSIFICATION	3.211878662216702E-5	IMPLEMENTATION
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999861152279896	WITHOUT_CLASSIFICATION	1.3884772010404177E-4	IMPLEMENTATION
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995041965885183	WITHOUT_CLASSIFICATION	4.958034114817926E-4	IMPLEMENTATION
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999996864618775	WITHOUT_CLASSIFICATION	3.1353812250932976E-7	IMPLEMENTATION
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999917990280971	WITHOUT_CLASSIFICATION	8.20097190285628E-6	IMPLEMENTATION
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999680511667561	WITHOUT_CLASSIFICATION	3.194883324392652E-5	IMPLEMENTATION
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995048503907239	WITHOUT_CLASSIFICATION	4.951496092760965E-4	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9991629056605053	WITHOUT_CLASSIFICATION	8.370943394948132E-4	IMPLEMENTATION
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999246066202396	WITHOUT_CLASSIFICATION	7.53933797603129E-5	IMPLEMENTATION
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998607248337441	WITHOUT_CLASSIFICATION	1.392751662558958E-4	IMPLEMENTATION
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9997222168028108	WITHOUT_CLASSIFICATION	2.777831971890771E-4	IMPLEMENTATION
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999990753757344	WITHOUT_CLASSIFICATION	9.246242656005369E-6	IMPLEMENTATION
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999986350432433	WITHOUT_CLASSIFICATION	1.364956756685852E-6	IMPLEMENTATION
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999790608868355	WITHOUT_CLASSIFICATION	2.093911316448675E-5	IMPLEMENTATION
// all clear	WITHOUT_CLASSIFICATION	0.9995583200836964	WITHOUT_CLASSIFICATION	4.4167991630356015E-4	IMPLEMENTATION
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9997974276373702	WITHOUT_CLASSIFICATION	2.0257236262978502E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.998525357330205	WITHOUT_CLASSIFICATION	0.00147464266979499	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.998525357330205	WITHOUT_CLASSIFICATION	0.00147464266979499	IMPLEMENTATION
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9994522608798542	WITHOUT_CLASSIFICATION	5.477391201457327E-4	IMPLEMENTATION
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999949615093038	WITHOUT_CLASSIFICATION	5.038490696225948E-6	IMPLEMENTATION
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997948521513137	WITHOUT_CLASSIFICATION	2.0514784868627252E-4	IMPLEMENTATION
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999452896563786	WITHOUT_CLASSIFICATION	5.471034362130876E-5	IMPLEMENTATION
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999378683989513	WITHOUT_CLASSIFICATION	6.213160104867422E-5	IMPLEMENTATION
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999840801860704	WITHOUT_CLASSIFICATION	1.5919813929597906E-5	IMPLEMENTATION
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.999745842571021	WITHOUT_CLASSIFICATION	2.541574289791539E-4	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9969043664908783	WITHOUT_CLASSIFICATION	0.003095633509121741	IMPLEMENTATION
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9969043664908783	WITHOUT_CLASSIFICATION	0.003095633509121741	IMPLEMENTATION
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.6809024175634251	IMPLEMENTATION	0.3190975824365748	WITHOUT_CLASSIFICATION
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9998780052219555	WITHOUT_CLASSIFICATION	1.2199477804459592E-4	IMPLEMENTATION
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999989399398492	WITHOUT_CLASSIFICATION	1.0600601507180992E-6	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999812642895032	WITHOUT_CLASSIFICATION	1.8735710496797575E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999812642895032	WITHOUT_CLASSIFICATION	1.8735710496797575E-4	IMPLEMENTATION
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999812642895032	WITHOUT_CLASSIFICATION	1.8735710496797575E-4	IMPLEMENTATION
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9997374476683778	WITHOUT_CLASSIFICATION	2.625523316222337E-4	IMPLEMENTATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999792508310574	WITHOUT_CLASSIFICATION	2.0749168942535086E-5	IMPLEMENTATION
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.6373448477642324	WITHOUT_CLASSIFICATION	0.3626551522357676	IMPLEMENTATION
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9996776287498091	WITHOUT_CLASSIFICATION	3.223712501908341E-4	IMPLEMENTATION
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999880635237295	WITHOUT_CLASSIFICATION	1.1936476270474552E-5	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994917914990403	WITHOUT_CLASSIFICATION	5.082085009596951E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994917914990403	WITHOUT_CLASSIFICATION	5.082085009596951E-4	IMPLEMENTATION
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9987563707527384	WITHOUT_CLASSIFICATION	0.001243629247261724	IMPLEMENTATION
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997633832616069	WITHOUT_CLASSIFICATION	2.366167383931517E-4	IMPLEMENTATION
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9986290352265204	WITHOUT_CLASSIFICATION	0.0013709647734796717	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999034006057548	WITHOUT_CLASSIFICATION	9.659939424517135E-5	IMPLEMENTATION
// igndore it...	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999650693504067	WITHOUT_CLASSIFICATION	3.49306495932024E-5	IMPLEMENTATION
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999524106464989	WITHOUT_CLASSIFICATION	4.758935350121825E-5	IMPLEMENTATION
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999788592415434	WITHOUT_CLASSIFICATION	2.114075845663736E-5	IMPLEMENTATION
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999991234599941	WITHOUT_CLASSIFICATION	8.76540005935598E-7	IMPLEMENTATION
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999979377978931	WITHOUT_CLASSIFICATION	2.0622021068958668E-5	IMPLEMENTATION
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998233929123385	WITHOUT_CLASSIFICATION	1.766070876614787E-4	IMPLEMENTATION
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999949209172888	WITHOUT_CLASSIFICATION	5.0790827112135E-5	IMPLEMENTATION
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999949209172888	WITHOUT_CLASSIFICATION	5.0790827112135E-5	IMPLEMENTATION
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999949209172888	WITHOUT_CLASSIFICATION	5.0790827112135E-5	IMPLEMENTATION
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999949209172888	WITHOUT_CLASSIFICATION	5.0790827112135E-5	IMPLEMENTATION
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999949209172888	WITHOUT_CLASSIFICATION	5.0790827112135E-5	IMPLEMENTATION
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999249867319134	WITHOUT_CLASSIFICATION	7.501326808649218E-5	IMPLEMENTATION
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999249867319134	WITHOUT_CLASSIFICATION	7.501326808649218E-5	IMPLEMENTATION
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999249867319134	WITHOUT_CLASSIFICATION	7.501326808649218E-5	IMPLEMENTATION
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999249867319134	WITHOUT_CLASSIFICATION	7.501326808649218E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9992754495077523	WITHOUT_CLASSIFICATION	7.245504922475924E-4	IMPLEMENTATION
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.998525357330205	WITHOUT_CLASSIFICATION	0.00147464266979499	IMPLEMENTATION
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998226639918086	WITHOUT_CLASSIFICATION	1.7733600819149517E-4	IMPLEMENTATION
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999249867319134	WITHOUT_CLASSIFICATION	7.501326808649218E-5	IMPLEMENTATION
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.8550563358109741	WITHOUT_CLASSIFICATION	0.14494366418902602	IMPLEMENTATION
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999229476692394	WITHOUT_CLASSIFICATION	7.705233076058414E-5	IMPLEMENTATION
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999485438279557	WITHOUT_CLASSIFICATION	5.145617204418537E-5	IMPLEMENTATION
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999647740204254	WITHOUT_CLASSIFICATION	3.522597957463773E-5	IMPLEMENTATION
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999995568252258	WITHOUT_CLASSIFICATION	4.4317477419830785E-7	IMPLEMENTATION
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999292752287362	WITHOUT_CLASSIFICATION	7.072477126375162E-5	IMPLEMENTATION
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997944707460382	WITHOUT_CLASSIFICATION	2.0552925396189625E-4	IMPLEMENTATION
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999992712335172	WITHOUT_CLASSIFICATION	7.287664828012453E-6	IMPLEMENTATION
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999683291285185	WITHOUT_CLASSIFICATION	3.167087148156162E-5	IMPLEMENTATION
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.99999952140849	WITHOUT_CLASSIFICATION	4.785915099606032E-7	IMPLEMENTATION
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999948609171463	WITHOUT_CLASSIFICATION	5.139082853677024E-6	IMPLEMENTATION
// Set it!	WITHOUT_CLASSIFICATION	0.9999922675537645	WITHOUT_CLASSIFICATION	7.732446235528851E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999783916231164	WITHOUT_CLASSIFICATION	2.16083768835129E-5	IMPLEMENTATION
// strip the " where "	WITHOUT_CLASSIFICATION	0.9995064611216526	WITHOUT_CLASSIFICATION	4.935388783473652E-4	IMPLEMENTATION
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9748441733173261	WITHOUT_CLASSIFICATION	0.02515582668267392	IMPLEMENTATION
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9998183172791778	WITHOUT_CLASSIFICATION	1.8168272082213948E-4	IMPLEMENTATION
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999882448103921	WITHOUT_CLASSIFICATION	1.1755189607888357E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999430137300276	WITHOUT_CLASSIFICATION	5.698626997237439E-5	IMPLEMENTATION
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999430137300276	WITHOUT_CLASSIFICATION	5.698626997237439E-5	IMPLEMENTATION
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9998378754032091	WITHOUT_CLASSIFICATION	1.621245967909088E-4	IMPLEMENTATION
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999944304950191	WITHOUT_CLASSIFICATION	5.56950498093593E-6	IMPLEMENTATION
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998437831232204	WITHOUT_CLASSIFICATION	1.5621687677957685E-4	IMPLEMENTATION
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998209184408093	WITHOUT_CLASSIFICATION	1.79081559190611E-4	IMPLEMENTATION
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998477782024084	WITHOUT_CLASSIFICATION	1.5222179759158874E-4	IMPLEMENTATION
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9998180075640871	WITHOUT_CLASSIFICATION	1.8199243591283097E-4	IMPLEMENTATION
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998864196241708	WITHOUT_CLASSIFICATION	1.1358037582916796E-4	IMPLEMENTATION
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9998106997224859	WITHOUT_CLASSIFICATION	1.8930027751414995E-4	IMPLEMENTATION
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998781198037042	WITHOUT_CLASSIFICATION	1.2188019629583533E-4	IMPLEMENTATION
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999919978061367	WITHOUT_CLASSIFICATION	8.002193863315584E-6	IMPLEMENTATION
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999379324476455	WITHOUT_CLASSIFICATION	6.206755235450302E-5	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995008030023154	WITHOUT_CLASSIFICATION	4.991969976846694E-4	IMPLEMENTATION
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999747460776195	WITHOUT_CLASSIFICATION	2.5253922380515283E-5	IMPLEMENTATION
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999839352287483	WITHOUT_CLASSIFICATION	1.6064771251785453E-5	IMPLEMENTATION
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999988004755355	WITHOUT_CLASSIFICATION	1.1995244645103164E-5	IMPLEMENTATION
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999130976331929	WITHOUT_CLASSIFICATION	8.690236680714784E-5	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984046110171	WITHOUT_CLASSIFICATION	1.5953889829217782E-6	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984046110171	WITHOUT_CLASSIFICATION	1.5953889829217782E-6	IMPLEMENTATION
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996531658503067	WITHOUT_CLASSIFICATION	3.468341496933139E-4	IMPLEMENTATION
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999997497107782	WITHOUT_CLASSIFICATION	2.5028922174829927E-7	IMPLEMENTATION
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999755606077407	WITHOUT_CLASSIFICATION	2.443939225930393E-5	IMPLEMENTATION
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999755606077407	WITHOUT_CLASSIFICATION	2.443939225930393E-5	IMPLEMENTATION
// The property is another class..	WITHOUT_CLASSIFICATION	0.999947719464488	WITHOUT_CLASSIFICATION	5.228053551191539E-5	IMPLEMENTATION
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999557059510064	WITHOUT_CLASSIFICATION	4.429404899362046E-5	IMPLEMENTATION
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9971644905548347	WITHOUT_CLASSIFICATION	0.0028355094451653204	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999074489737543	WITHOUT_CLASSIFICATION	9.255102624574461E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999797088605577	WITHOUT_CLASSIFICATION	2.029113944229353E-4	IMPLEMENTATION
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999991565081923	WITHOUT_CLASSIFICATION	8.434918077842132E-7	IMPLEMENTATION
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999921732571593	WITHOUT_CLASSIFICATION	7.826742840697747E-5	IMPLEMENTATION
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999074489737543	WITHOUT_CLASSIFICATION	9.255102624574461E-5	IMPLEMENTATION
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998096525929023	WITHOUT_CLASSIFICATION	1.9034740709769258E-4	IMPLEMENTATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9986905442775692	WITHOUT_CLASSIFICATION	0.0013094557224307935	IMPLEMENTATION
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9995652831076691	WITHOUT_CLASSIFICATION	4.3471689233081826E-4	IMPLEMENTATION
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999104427782877	WITHOUT_CLASSIFICATION	8.95572217123602E-5	IMPLEMENTATION
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999309823234	WITHOUT_CLASSIFICATION	6.901767653204982E-8	IMPLEMENTATION
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9998232325529207	WITHOUT_CLASSIFICATION	1.7676744707928165E-4	IMPLEMENTATION
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9897545392974227	WITHOUT_CLASSIFICATION	0.01024546070257719	IMPLEMENTATION
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9998948175218756	WITHOUT_CLASSIFICATION	1.0518247812447934E-4	IMPLEMENTATION
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999544689321107	WITHOUT_CLASSIFICATION	4.553106788927262E-5	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999940278554024	WITHOUT_CLASSIFICATION	5.972144597595185E-5	IMPLEMENTATION
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996362434589549	WITHOUT_CLASSIFICATION	3.6375654104503984E-4	IMPLEMENTATION
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998978673263856	WITHOUT_CLASSIFICATION	1.0213267361428483E-4	IMPLEMENTATION
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9995979805657507	WITHOUT_CLASSIFICATION	4.020194342493487E-4	IMPLEMENTATION
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9993304670233931	WITHOUT_CLASSIFICATION	6.69532976606913E-4	IMPLEMENTATION
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9994982205860866	WITHOUT_CLASSIFICATION	5.017794139133152E-4	IMPLEMENTATION
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9998950578014579	WITHOUT_CLASSIFICATION	1.0494219854208563E-4	IMPLEMENTATION
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9997871809842233	WITHOUT_CLASSIFICATION	2.128190157767543E-4	IMPLEMENTATION
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9899980514981845	WITHOUT_CLASSIFICATION	0.010001948501815438	IMPLEMENTATION
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9899980514981845	WITHOUT_CLASSIFICATION	0.010001948501815438	IMPLEMENTATION
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9897545392974227	WITHOUT_CLASSIFICATION	0.01024546070257719	IMPLEMENTATION
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.986423096211867	WITHOUT_CLASSIFICATION	0.013576903788133024	IMPLEMENTATION
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999310558607434	WITHOUT_CLASSIFICATION	6.894413925667266E-5	IMPLEMENTATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9992064950130252	WITHOUT_CLASSIFICATION	7.935049869748149E-4	IMPLEMENTATION
// #2	WITHOUT_CLASSIFICATION	0.9999851981007842	WITHOUT_CLASSIFICATION	1.4801899215855668E-5	IMPLEMENTATION
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999538302101963	WITHOUT_CLASSIFICATION	4.616978980377034E-5	IMPLEMENTATION
// nothing to do	WITHOUT_CLASSIFICATION	0.9998803604057913	WITHOUT_CLASSIFICATION	1.1963959420878139E-4	IMPLEMENTATION
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999570619772743	WITHOUT_CLASSIFICATION	4.293802272572795E-5	IMPLEMENTATION
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9993986712334713	WITHOUT_CLASSIFICATION	6.013287665287317E-4	IMPLEMENTATION
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9998348369191289	WITHOUT_CLASSIFICATION	1.6516308087105016E-4	IMPLEMENTATION
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999882375085698	WITHOUT_CLASSIFICATION	1.1762491430150105E-5	IMPLEMENTATION
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999538300171158	WITHOUT_CLASSIFICATION	4.616998288433125E-5	IMPLEMENTATION
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9996369803554482	WITHOUT_CLASSIFICATION	3.630196445517762E-4	IMPLEMENTATION
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9991900354071157	WITHOUT_CLASSIFICATION	8.099645928842159E-4	IMPLEMENTATION
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999943534960363	WITHOUT_CLASSIFICATION	5.646503963695335E-5	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999498880661716	WITHOUT_CLASSIFICATION	5.01119338284762E-5	IMPLEMENTATION
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999912604850758	WITHOUT_CLASSIFICATION	8.739514924187439E-6	IMPLEMENTATION
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999999397832816	WITHOUT_CLASSIFICATION	6.021671841898493E-8	IMPLEMENTATION
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999765464983059	WITHOUT_CLASSIFICATION	2.345350169413203E-5	IMPLEMENTATION
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998786430844582	WITHOUT_CLASSIFICATION	1.2135691554180685E-4	IMPLEMENTATION
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9997657840827655	WITHOUT_CLASSIFICATION	2.3421591723449134E-4	IMPLEMENTATION
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9990844608255048	WITHOUT_CLASSIFICATION	9.155391744951204E-4	IMPLEMENTATION
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999946792914285	WITHOUT_CLASSIFICATION	5.320708571462013E-6	IMPLEMENTATION
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9997455147159998	WITHOUT_CLASSIFICATION	2.5448528400025326E-4	IMPLEMENTATION
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999074017012545	WITHOUT_CLASSIFICATION	9.259829874553428E-5	IMPLEMENTATION
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999681381884676	WITHOUT_CLASSIFICATION	3.186181153238808E-5	IMPLEMENTATION
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9998534621474312	WITHOUT_CLASSIFICATION	1.4653785256891312E-4	IMPLEMENTATION
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999997422297663	WITHOUT_CLASSIFICATION	2.5777023370498375E-6	IMPLEMENTATION
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999185607450898	WITHOUT_CLASSIFICATION	8.143925491014637E-5	IMPLEMENTATION
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999169610826761	WITHOUT_CLASSIFICATION	8.303891732392419E-5	IMPLEMENTATION
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9997754891378681	WITHOUT_CLASSIFICATION	2.2451086213188916E-4	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999498880661716	WITHOUT_CLASSIFICATION	5.01119338284762E-5	IMPLEMENTATION
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999717634138443	WITHOUT_CLASSIFICATION	2.8236586155673073E-5	IMPLEMENTATION
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999979712421374	WITHOUT_CLASSIFICATION	2.0287578625411077E-6	IMPLEMENTATION
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999588227705962	WITHOUT_CLASSIFICATION	4.117722940375463E-5	IMPLEMENTATION
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997926355546144	WITHOUT_CLASSIFICATION	2.0736444538550192E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9983024223723198	WITHOUT_CLASSIFICATION	0.0016975776276801566	IMPLEMENTATION
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999906526701358	WITHOUT_CLASSIFICATION	9.347329864198895E-5	IMPLEMENTATION
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999266210933486	WITHOUT_CLASSIFICATION	7.337890665141528E-5	IMPLEMENTATION
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999810722689054	WITHOUT_CLASSIFICATION	1.8927731094598623E-4	IMPLEMENTATION
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9986132493262914	WITHOUT_CLASSIFICATION	0.0013867506737086901	IMPLEMENTATION
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9979010586519063	WITHOUT_CLASSIFICATION	0.0020989413480938233	IMPLEMENTATION
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999165320387076	WITHOUT_CLASSIFICATION	8.346796129243434E-5	IMPLEMENTATION
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999973030729679	WITHOUT_CLASSIFICATION	2.6969270321663935E-6	IMPLEMENTATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9991875789595632	WITHOUT_CLASSIFICATION	8.124210404367714E-4	IMPLEMENTATION
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999698069284392	WITHOUT_CLASSIFICATION	3.019307156088544E-5	IMPLEMENTATION
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998280147044625	WITHOUT_CLASSIFICATION	1.719852955374786E-4	IMPLEMENTATION
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9815163197673341	WITHOUT_CLASSIFICATION	0.018483680232665854	IMPLEMENTATION
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999987440409517	WITHOUT_CLASSIFICATION	1.2559590483313758E-6	IMPLEMENTATION
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999868738301816	WITHOUT_CLASSIFICATION	1.3126169818426913E-5	IMPLEMENTATION
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9986875253096924	WITHOUT_CLASSIFICATION	0.001312474690307583	IMPLEMENTATION
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999497408089815	WITHOUT_CLASSIFICATION	5.025919101857978E-5	IMPLEMENTATION
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999797088605577	WITHOUT_CLASSIFICATION	2.029113944229353E-4	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999990501842907	WITHOUT_CLASSIFICATION	9.498157092079374E-7	IMPLEMENTATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999498880661716	WITHOUT_CLASSIFICATION	5.01119338284762E-5	IMPLEMENTATION
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999002977774989	WITHOUT_CLASSIFICATION	9.970222250102821E-5	IMPLEMENTATION
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999705237938376	WITHOUT_CLASSIFICATION	2.9476206162348336E-5	IMPLEMENTATION
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999039164860769	WITHOUT_CLASSIFICATION	9.608351392301784E-5	IMPLEMENTATION
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999039164860769	WITHOUT_CLASSIFICATION	9.608351392301784E-5	IMPLEMENTATION
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999877177808323	WITHOUT_CLASSIFICATION	1.2282219167712057E-4	IMPLEMENTATION
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999536418877562	WITHOUT_CLASSIFICATION	4.635811224386106E-5	IMPLEMENTATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999391528043321	WITHOUT_CLASSIFICATION	6.08471956678633E-5	IMPLEMENTATION
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999764664334017	WITHOUT_CLASSIFICATION	2.3533566598337214E-5	IMPLEMENTATION
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9998343347036388	WITHOUT_CLASSIFICATION	1.6566529636122599E-4	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999953064668777	WITHOUT_CLASSIFICATION	4.6935331223044166E-6	IMPLEMENTATION
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9973987860984155	WITHOUT_CLASSIFICATION	0.0026012139015845334	IMPLEMENTATION
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9998586416445034	WITHOUT_CLASSIFICATION	1.4135835549650567E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994691273305267	WITHOUT_CLASSIFICATION	5.308726694733437E-4	IMPLEMENTATION
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994691273305267	WITHOUT_CLASSIFICATION	5.308726694733437E-4	IMPLEMENTATION
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999995331662158	WITHOUT_CLASSIFICATION	4.6683378418185424E-7	IMPLEMENTATION
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9953393678483528	WITHOUT_CLASSIFICATION	0.004660632151647292	IMPLEMENTATION
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9997145042303002	WITHOUT_CLASSIFICATION	2.854957696998028E-4	IMPLEMENTATION
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999525798246	WITHOUT_CLASSIFICATION	4.742017539179392E-7	IMPLEMENTATION
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999983267795223	WITHOUT_CLASSIFICATION	1.673220477748871E-6	IMPLEMENTATION
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998344149525602	WITHOUT_CLASSIFICATION	1.655850474398291E-4	IMPLEMENTATION
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999999793400331	WITHOUT_CLASSIFICATION	2.0659966897216314E-7	IMPLEMENTATION
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999898022051475	WITHOUT_CLASSIFICATION	1.0197794852384838E-5	IMPLEMENTATION
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999803167631655	WITHOUT_CLASSIFICATION	1.9683236834510927E-5	IMPLEMENTATION
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9994873630365221	WITHOUT_CLASSIFICATION	5.126369634778735E-4	IMPLEMENTATION
// A collection of components...	WITHOUT_CLASSIFICATION	0.9992430502179196	WITHOUT_CLASSIFICATION	7.569497820803729E-4	IMPLEMENTATION
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9992430502179196	WITHOUT_CLASSIFICATION	7.569497820803729E-4	IMPLEMENTATION
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997804400454	WITHOUT_CLASSIFICATION	2.195599545912504E-7	IMPLEMENTATION
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.999259000326393	WITHOUT_CLASSIFICATION	7.409996736068744E-4	IMPLEMENTATION
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999991222641856	WITHOUT_CLASSIFICATION	8.777358143652115E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998159227374779	WITHOUT_CLASSIFICATION	1.840772625220708E-4	IMPLEMENTATION
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999967811989795	WITHOUT_CLASSIFICATION	3.218801020479375E-6	IMPLEMENTATION
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999035710934212	WITHOUT_CLASSIFICATION	9.642890657871952E-5	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999941401627193	WITHOUT_CLASSIFICATION	5.859837280812714E-6	IMPLEMENTATION
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999699551497214	WITHOUT_CLASSIFICATION	3.004485027857797E-5	IMPLEMENTATION
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999512536722158	WITHOUT_CLASSIFICATION	4.874632778403494E-5	IMPLEMENTATION
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999715780708571	WITHOUT_CLASSIFICATION	2.8421929142897795E-5	IMPLEMENTATION
/*implied*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999815065071099	WITHOUT_CLASSIFICATION	1.8493492890109644E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998311988728927	WITHOUT_CLASSIFICATION	1.688011271072794E-4	IMPLEMENTATION
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999930650885327	WITHOUT_CLASSIFICATION	6.934911467307152E-5	IMPLEMENTATION
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9998055024900036	WITHOUT_CLASSIFICATION	1.944975099964319E-4	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9993575308303738	WITHOUT_CLASSIFICATION	6.424691696261393E-4	IMPLEMENTATION
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999814073102558	WITHOUT_CLASSIFICATION	1.859268974423047E-5	IMPLEMENTATION
/*	WITHOUT_CLASSIFICATION	0.9991867972388033	WITHOUT_CLASSIFICATION	8.132027611966403E-4	IMPLEMENTATION
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9986190508890559	WITHOUT_CLASSIFICATION	0.001380949110944073	IMPLEMENTATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9998848716682806	WITHOUT_CLASSIFICATION	1.1512833171935547E-4	IMPLEMENTATION
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998253821334252	WITHOUT_CLASSIFICATION	1.7461786657480368E-4	IMPLEMENTATION
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9992963339253612	WITHOUT_CLASSIFICATION	7.036660746388123E-4	IMPLEMENTATION
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999740006806515	WITHOUT_CLASSIFICATION	2.5999319348539525E-5	IMPLEMENTATION
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9996273466732298	WITHOUT_CLASSIFICATION	3.726533267701148E-4	IMPLEMENTATION
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9988309225160983	WITHOUT_CLASSIFICATION	0.0011690774839017857	IMPLEMENTATION
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9998627027023363	WITHOUT_CLASSIFICATION	1.3729729766371218E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996828202751005	WITHOUT_CLASSIFICATION	3.171797248995793E-4	IMPLEMENTATION
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974574429647662	WITHOUT_CLASSIFICATION	0.002542557035233893	IMPLEMENTATION
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999189823697486	WITHOUT_CLASSIFICATION	8.101763025136812E-5	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9993823843377596	WITHOUT_CLASSIFICATION	6.176156622403126E-4	IMPLEMENTATION
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973610562025771	WITHOUT_CLASSIFICATION	0.0026389437974229124	IMPLEMENTATION
//TODO:	WITHOUT_CLASSIFICATION	0.9989299971619441	WITHOUT_CLASSIFICATION	0.001070002838055902	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999367522135817	WITHOUT_CLASSIFICATION	6.324778641833151E-5	IMPLEMENTATION
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999985131162659	WITHOUT_CLASSIFICATION	1.4868837341130276E-6	IMPLEMENTATION
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998629328110298	WITHOUT_CLASSIFICATION	1.3706718897032197E-4	IMPLEMENTATION
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978152404278516	WITHOUT_CLASSIFICATION	0.0021847595721484424	IMPLEMENTATION
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9993654579187	WITHOUT_CLASSIFICATION	6.345420813000046E-4	IMPLEMENTATION
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999521775683802	WITHOUT_CLASSIFICATION	4.7822431619844504E-5	IMPLEMENTATION
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999021485996629	WITHOUT_CLASSIFICATION	9.785140033710695E-5	IMPLEMENTATION
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9998065490426951	WITHOUT_CLASSIFICATION	1.9345095730489683E-4	IMPLEMENTATION
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999873309579236	WITHOUT_CLASSIFICATION	1.2669042076338994E-5	IMPLEMENTATION
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999461772816886	WITHOUT_CLASSIFICATION	5.382271831142304E-5	IMPLEMENTATION
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9979239448707264	WITHOUT_CLASSIFICATION	0.0020760551292736164	IMPLEMENTATION
// Dialect function	WITHOUT_CLASSIFICATION	0.9994659985224477	WITHOUT_CLASSIFICATION	5.340014775524246E-4	IMPLEMENTATION
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998273387315334	WITHOUT_CLASSIFICATION	1.7266126846660637E-4	IMPLEMENTATION
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9979884566991116	WITHOUT_CLASSIFICATION	0.002011543300888335	IMPLEMENTATION
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999978425347715	WITHOUT_CLASSIFICATION	2.1574652285408036E-6	IMPLEMENTATION
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.999965249125043	WITHOUT_CLASSIFICATION	3.4750874957025375E-5	IMPLEMENTATION
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998121163773971	WITHOUT_CLASSIFICATION	1.8788362260291474E-4	IMPLEMENTATION
// the name of an entity class	WITHOUT_CLASSIFICATION	0.99998021493073	WITHOUT_CLASSIFICATION	1.9785069269995872E-5	IMPLEMENTATION
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9997197997774838	WITHOUT_CLASSIFICATION	2.8020022251612817E-4	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999054163365965	WITHOUT_CLASSIFICATION	9.458366340354713E-5	IMPLEMENTATION
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999983693972154	WITHOUT_CLASSIFICATION	1.6306027845967905E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996516630658157	WITHOUT_CLASSIFICATION	3.483369341844528E-4	IMPLEMENTATION
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999389008947356	WITHOUT_CLASSIFICATION	6.10991052644537E-5	IMPLEMENTATION
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9996516630658157	WITHOUT_CLASSIFICATION	3.483369341844528E-4	IMPLEMENTATION
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998474833834521	WITHOUT_CLASSIFICATION	1.525166165479376E-4	IMPLEMENTATION
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9998593419784383	WITHOUT_CLASSIFICATION	1.4065802156177406E-4	IMPLEMENTATION
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9990040468363813	WITHOUT_CLASSIFICATION	9.959531636187565E-4	IMPLEMENTATION
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999717530733364	WITHOUT_CLASSIFICATION	2.8246926663597703E-5	IMPLEMENTATION
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998546726426247	WITHOUT_CLASSIFICATION	1.453273573752058E-4	IMPLEMENTATION
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9990040468363813	WITHOUT_CLASSIFICATION	9.959531636187565E-4	IMPLEMENTATION
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999858162277285	WITHOUT_CLASSIFICATION	1.4183772271611531E-5	IMPLEMENTATION
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997554092612899	WITHOUT_CLASSIFICATION	2.445907387101236E-4	IMPLEMENTATION
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999297869222763	WITHOUT_CLASSIFICATION	7.02130777236514E-5	IMPLEMENTATION
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9996974506207672	WITHOUT_CLASSIFICATION	3.025493792328069E-4	IMPLEMENTATION
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9998337357037719	WITHOUT_CLASSIFICATION	1.6626429622808485E-4	IMPLEMENTATION
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999612168542965	WITHOUT_CLASSIFICATION	3.878314570356807E-5	IMPLEMENTATION
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999816349777981	WITHOUT_CLASSIFICATION	1.836502220187032E-5	IMPLEMENTATION
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.8504466991015349	WITHOUT_CLASSIFICATION	0.14955330089846514	IMPLEMENTATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9996770519813126	WITHOUT_CLASSIFICATION	3.22948018687409E-4	IMPLEMENTATION
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999696784138836	WITHOUT_CLASSIFICATION	3.0321586116393805E-5	IMPLEMENTATION
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999691503273574	WITHOUT_CLASSIFICATION	3.084967264243374E-5	IMPLEMENTATION
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999252528389851	WITHOUT_CLASSIFICATION	7.474716101486927E-5	IMPLEMENTATION
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999997409186127	WITHOUT_CLASSIFICATION	2.590813873062034E-6	IMPLEMENTATION
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998432657651826	WITHOUT_CLASSIFICATION	1.5673423481753232E-4	IMPLEMENTATION
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999999307512233	WITHOUT_CLASSIFICATION	6.924877670928591E-7	IMPLEMENTATION
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9991745074451978	WITHOUT_CLASSIFICATION	8.254925548023478E-4	IMPLEMENTATION
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999772751638731	WITHOUT_CLASSIFICATION	2.2724836126855003E-5	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99930896027025	WITHOUT_CLASSIFICATION	6.910397297499247E-4	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997151843626414	WITHOUT_CLASSIFICATION	2.848156373585474E-4	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999973818156968	WITHOUT_CLASSIFICATION	2.6181843032634646E-6	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9995478212533907	WITHOUT_CLASSIFICATION	4.5217874660938317E-4	IMPLEMENTATION
//default mode	WITHOUT_CLASSIFICATION	0.9971816191109344	WITHOUT_CLASSIFICATION	0.0028183808890656684	IMPLEMENTATION
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9990772620334026	WITHOUT_CLASSIFICATION	9.227379665974298E-4	IMPLEMENTATION
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9875602081913036	WITHOUT_CLASSIFICATION	0.012439791808696402	IMPLEMENTATION
//after reset!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9998013059532326	WITHOUT_CLASSIFICATION	1.9869404676737504E-4	IMPLEMENTATION
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999962430027	WITHOUT_CLASSIFICATION	3.75699723624426E-9	IMPLEMENTATION
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9991839809243701	WITHOUT_CLASSIFICATION	8.160190756298393E-4	IMPLEMENTATION
//if its "id"	WITHOUT_CLASSIFICATION	0.9971091059022046	WITHOUT_CLASSIFICATION	0.0028908940977954126	IMPLEMENTATION
//or its the id property name	WITHOUT_CLASSIFICATION	0.9993413392721215	WITHOUT_CLASSIFICATION	6.586607278785015E-4	IMPLEMENTATION
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
//important!!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
// an association	WITHOUT_CLASSIFICATION	0.9998345321619744	WITHOUT_CLASSIFICATION	1.6546783802552414E-4	IMPLEMENTATION
//allow index() function:	WITHOUT_CLASSIFICATION	0.9994330513465954	WITHOUT_CLASSIFICATION	5.669486534046666E-4	IMPLEMENTATION
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9952868404679666	WITHOUT_CLASSIFICATION	0.004713159532033468	IMPLEMENTATION
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999973818156968	WITHOUT_CLASSIFICATION	2.6181843032634646E-6	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// collections of values	WITHOUT_CLASSIFICATION	0.999997433615398	WITHOUT_CLASSIFICATION	2.5663846020005365E-6	IMPLEMENTATION
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999673202391525	WITHOUT_CLASSIFICATION	3.267976084746588E-5	IMPLEMENTATION
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9963312196665005	WITHOUT_CLASSIFICATION	0.003668780333499582	IMPLEMENTATION
//special case	WITHOUT_CLASSIFICATION	0.9950190509674415	WITHOUT_CLASSIFICATION	0.004980949032558558	IMPLEMENTATION
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999799920580082	WITHOUT_CLASSIFICATION	2.0007941991722493E-5	IMPLEMENTATION
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999973312704663	WITHOUT_CLASSIFICATION	2.6687295336439274E-6	IMPLEMENTATION
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999660287828216	WITHOUT_CLASSIFICATION	3.397121717833863E-5	IMPLEMENTATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997151763582459	WITHOUT_CLASSIFICATION	2.848236417540274E-4	IMPLEMENTATION
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999446095419047	WITHOUT_CLASSIFICATION	5.5390458095320666E-5	IMPLEMENTATION
//register collection role	WITHOUT_CLASSIFICATION	0.9982808752047846	WITHOUT_CLASSIFICATION	0.001719124795215415	IMPLEMENTATION
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999978233935634	WITHOUT_CLASSIFICATION	2.176606436657143E-6	IMPLEMENTATION
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999941138683063	WITHOUT_CLASSIFICATION	5.886131693702513E-5	IMPLEMENTATION
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999447344644915	WITHOUT_CLASSIFICATION	5.526553550846638E-5	IMPLEMENTATION
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9993587293576741	WITHOUT_CLASSIFICATION	6.412706423259307E-4	IMPLEMENTATION
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9996170730238074	WITHOUT_CLASSIFICATION	3.8292697619266025E-4	IMPLEMENTATION
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999844606479102	WITHOUT_CLASSIFICATION	1.553935208979726E-5	IMPLEMENTATION
//many-to-many	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.985526622657356	WITHOUT_CLASSIFICATION	0.014473377342643983	IMPLEMENTATION
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999367859647461	WITHOUT_CLASSIFICATION	6.321403525389399E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998422164089252	WITHOUT_CLASSIFICATION	0.0015778359107480083	IMPLEMENTATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999538431286975	WITHOUT_CLASSIFICATION	4.615687130256147E-5	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9888274781590515	WITHOUT_CLASSIFICATION	0.011172521840948585	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9888274781590515	WITHOUT_CLASSIFICATION	0.011172521840948585	IMPLEMENTATION
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998461289838293	WITHOUT_CLASSIFICATION	1.5387101617062943E-4	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9888274781590515	WITHOUT_CLASSIFICATION	0.011172521840948585	IMPLEMENTATION
// not known!	WITHOUT_CLASSIFICATION	0.9888274781590515	WITHOUT_CLASSIFICATION	0.011172521840948585	IMPLEMENTATION
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9981793707044886	WITHOUT_CLASSIFICATION	0.0018206292955113988	IMPLEMENTATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9989999363393556	WITHOUT_CLASSIFICATION	0.0010000636606443524	IMPLEMENTATION
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998274122170152	WITHOUT_CLASSIFICATION	1.7258778298475934E-4	IMPLEMENTATION
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998274122170152	WITHOUT_CLASSIFICATION	1.7258778298475934E-4	IMPLEMENTATION
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9993997255797259	WITHOUT_CLASSIFICATION	6.002744202741832E-4	IMPLEMENTATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9882022822674984	WITHOUT_CLASSIFICATION	0.011797717732501614	IMPLEMENTATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9992079116759727	WITHOUT_CLASSIFICATION	7.920883240272592E-4	IMPLEMENTATION
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999994163851214	WITHOUT_CLASSIFICATION	5.836148785804405E-7	IMPLEMENTATION
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9979762221523814	WITHOUT_CLASSIFICATION	0.002023777847618727	IMPLEMENTATION
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9963649804724508	WITHOUT_CLASSIFICATION	0.003635019527549191	IMPLEMENTATION
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9991487657715523	WITHOUT_CLASSIFICATION	8.512342284475846E-4	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9974290740396035	WITHOUT_CLASSIFICATION	0.002570925960396487	IMPLEMENTATION
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999524596489817	WITHOUT_CLASSIFICATION	4.754035101830477E-4	IMPLEMENTATION
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9998662028909081	WITHOUT_CLASSIFICATION	1.337971090918746E-4	IMPLEMENTATION
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9987595817393528	WITHOUT_CLASSIFICATION	0.0012404182606472823	IMPLEMENTATION
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9995248874579219	WITHOUT_CLASSIFICATION	4.7511254207820516E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999718874604184	WITHOUT_CLASSIFICATION	2.8112539581596676E-5	IMPLEMENTATION
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998056955138497	WITHOUT_CLASSIFICATION	1.9430448615039882E-4	IMPLEMENTATION
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9988971775492232	WITHOUT_CLASSIFICATION	0.0011028224507767471	IMPLEMENTATION
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9992643713777446	WITHOUT_CLASSIFICATION	7.356286222553261E-4	IMPLEMENTATION
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9990659830740367	WITHOUT_CLASSIFICATION	9.340169259632919E-4	IMPLEMENTATION
// Add any joins	WITHOUT_CLASSIFICATION	0.9991051266802002	WITHOUT_CLASSIFICATION	8.948733197996689E-4	IMPLEMENTATION
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999718874604184	WITHOUT_CLASSIFICATION	2.8112539581596676E-5	IMPLEMENTATION
//named query parameter	WITHOUT_CLASSIFICATION	0.9995478212533907	WITHOUT_CLASSIFICATION	4.5217874660938317E-4	IMPLEMENTATION
//path expression	WITHOUT_CLASSIFICATION	0.9926232045664607	WITHOUT_CLASSIFICATION	0.007376795433539391	IMPLEMENTATION
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999374484769094	WITHOUT_CLASSIFICATION	6.255152309068142E-5	IMPLEMENTATION
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999888451791854	WITHOUT_CLASSIFICATION	1.1154820814606883E-4	IMPLEMENTATION
//anything else	WITHOUT_CLASSIFICATION	0.9962571945208364	WITHOUT_CLASSIFICATION	0.0037428054791635895	IMPLEMENTATION
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999100243863852	WITHOUT_CLASSIFICATION	8.997561361479051E-5	IMPLEMENTATION
// careful with this!	WITHOUT_CLASSIFICATION	0.9991877779923048	WITHOUT_CLASSIFICATION	8.122220076950719E-4	IMPLEMENTATION
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999495954545936	WITHOUT_CLASSIFICATION	5.0404545406389676E-5	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999098994056224	WITHOUT_CLASSIFICATION	9.01005943776628E-5	IMPLEMENTATION
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998531240564992	WITHOUT_CLASSIFICATION	1.4687594350082766E-4	IMPLEMENTATION
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9970940951100228	WITHOUT_CLASSIFICATION	0.0029059048899772806	IMPLEMENTATION
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999831526144688	WITHOUT_CLASSIFICATION	1.6847385531133924E-5	IMPLEMENTATION
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997846380658271	WITHOUT_CLASSIFICATION	2.1536193417286408E-4	IMPLEMENTATION
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9994863886903109	WITHOUT_CLASSIFICATION	5.136113096890668E-4	IMPLEMENTATION
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9921522824609695	WITHOUT_CLASSIFICATION	0.00784771753903041	IMPLEMENTATION
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999440766853578	WITHOUT_CLASSIFICATION	5.592331464225038E-5	IMPLEMENTATION
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999541411226894	WITHOUT_CLASSIFICATION	4.585887731060623E-4	IMPLEMENTATION
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9991219517534755	WITHOUT_CLASSIFICATION	8.780482465245011E-4	IMPLEMENTATION
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999104867236802	WITHOUT_CLASSIFICATION	8.951327631973297E-5	IMPLEMENTATION
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998338245601831	WITHOUT_CLASSIFICATION	1.661754398169697E-4	IMPLEMENTATION
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998849574750376	WITHOUT_CLASSIFICATION	1.1504252496238692E-4	IMPLEMENTATION
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9991112519030757	WITHOUT_CLASSIFICATION	8.887480969243524E-4	IMPLEMENTATION
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999973486889279	WITHOUT_CLASSIFICATION	2.6513110722100628E-6	IMPLEMENTATION
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999098994056224	WITHOUT_CLASSIFICATION	9.01005943776628E-5	IMPLEMENTATION
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9972600015387996	WITHOUT_CLASSIFICATION	0.00273999846120038	IMPLEMENTATION
//do replacements	WITHOUT_CLASSIFICATION	0.9984620556474337	WITHOUT_CLASSIFICATION	0.0015379443525662339	IMPLEMENTATION
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9974609765751605	WITHOUT_CLASSIFICATION	0.0025390234248394584	IMPLEMENTATION
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998890247879948	WITHOUT_CLASSIFICATION	1.109752120052549E-4	IMPLEMENTATION
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
//hilo params	WITHOUT_CLASSIFICATION	0.9972803432353339	WITHOUT_CLASSIFICATION	0.002719656764666099	IMPLEMENTATION
//sql = query;	WITHOUT_CLASSIFICATION	0.9965604303750282	WITHOUT_CLASSIFICATION	0.003439569624971771	IMPLEMENTATION
// performance opt	WITHOUT_CLASSIFICATION	0.999071552380591	WITHOUT_CLASSIFICATION	9.284476194089771E-4	IMPLEMENTATION
//sql = update;	WITHOUT_CLASSIFICATION	0.996550488550296	WITHOUT_CLASSIFICATION	0.0034495114497039665	IMPLEMENTATION
//hilo config	WITHOUT_CLASSIFICATION	0.9950327631356941	WITHOUT_CLASSIFICATION	0.0049672368643059765	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996906516126212	WITHOUT_CLASSIFICATION	3.093483873787511E-4	IMPLEMENTATION
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999500278530292	WITHOUT_CLASSIFICATION	4.9972146970763707E-5	IMPLEMENTATION
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999654181898745	WITHOUT_CLASSIFICATION	3.458181012549368E-5	IMPLEMENTATION
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9998393965490633	WITHOUT_CLASSIFICATION	1.60603450936751E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999557167286863	WITHOUT_CLASSIFICATION	4.4283271313665764E-5	IMPLEMENTATION
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999192266510766	WITHOUT_CLASSIFICATION	8.077334892339221E-5	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995173713267267	WITHOUT_CLASSIFICATION	4.8262867327336146E-4	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996906516126212	WITHOUT_CLASSIFICATION	3.093483873787511E-4	IMPLEMENTATION
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999769189840333	WITHOUT_CLASSIFICATION	2.3081015966787515E-5	IMPLEMENTATION
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999694904601545	WITHOUT_CLASSIFICATION	3.0509539845488542E-5	IMPLEMENTATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999294211640084	WITHOUT_CLASSIFICATION	7.057883599166686E-5	IMPLEMENTATION
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997477848919128	WITHOUT_CLASSIFICATION	2.5221510808708336E-4	IMPLEMENTATION
// the default...	WITHOUT_CLASSIFICATION	0.9993458451591934	WITHOUT_CLASSIFICATION	6.541548408065545E-4	IMPLEMENTATION
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9989715435163522	WITHOUT_CLASSIFICATION	0.0010284564836477638	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999557167286863	WITHOUT_CLASSIFICATION	4.4283271313665764E-5	IMPLEMENTATION
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998674784708982	WITHOUT_CLASSIFICATION	1.3252152910182114E-4	IMPLEMENTATION
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998824032054835	WITHOUT_CLASSIFICATION	1.1759679451648723E-4	IMPLEMENTATION
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998675342013638	WITHOUT_CLASSIFICATION	1.3246579863630768E-4	IMPLEMENTATION
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987787761714614	WITHOUT_CLASSIFICATION	0.0012212238285386004	IMPLEMENTATION
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987787761714614	WITHOUT_CLASSIFICATION	0.0012212238285386004	IMPLEMENTATION
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987787761714614	WITHOUT_CLASSIFICATION	0.0012212238285386004	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999508784890527	WITHOUT_CLASSIFICATION	4.912151094731418E-5	IMPLEMENTATION
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999508784890527	WITHOUT_CLASSIFICATION	4.912151094731418E-5	IMPLEMENTATION
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.999990904497308	WITHOUT_CLASSIFICATION	9.095502691935384E-6	IMPLEMENTATION
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999715423621204	WITHOUT_CLASSIFICATION	2.8457637879708613E-5	IMPLEMENTATION
// scroll ahead	WITHOUT_CLASSIFICATION	0.9994310891176449	WITHOUT_CLASSIFICATION	5.689108823551859E-4	IMPLEMENTATION
// scroll backward	WITHOUT_CLASSIFICATION	0.9993637318478329	WITHOUT_CLASSIFICATION	6.362681521670306E-4	IMPLEMENTATION
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9801273430981531	WITHOUT_CLASSIFICATION	0.019872656901847006	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998276695652432	WITHOUT_CLASSIFICATION	1.723304347567908E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998992669386663	WITHOUT_CLASSIFICATION	1.0073306133366457E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999878899869917	WITHOUT_CLASSIFICATION	1.2110013008201656E-5	IMPLEMENTATION
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999110208935044	WITHOUT_CLASSIFICATION	8.897910649569698E-5	IMPLEMENTATION
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998276695652432	WITHOUT_CLASSIFICATION	1.723304347567908E-4	IMPLEMENTATION
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998992669386663	WITHOUT_CLASSIFICATION	1.0073306133366457E-4	IMPLEMENTATION
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
// Caches	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//Generators:	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999938688911388	WITHOUT_CLASSIFICATION	6.13110886119341E-6	IMPLEMENTATION
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999576386014617	WITHOUT_CLASSIFICATION	4.236139853822504E-5	IMPLEMENTATION
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999847480856244	WITHOUT_CLASSIFICATION	1.5251914375607208E-5	IMPLEMENTATION
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999891489820272	WITHOUT_CLASSIFICATION	1.0851017972824285E-5	IMPLEMENTATION
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9995090275798464	WITHOUT_CLASSIFICATION	4.909724201537301E-4	IMPLEMENTATION
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999242732532275	WITHOUT_CLASSIFICATION	7.572674677241119E-5	IMPLEMENTATION
//stats	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998830445803648	WITHOUT_CLASSIFICATION	1.1695541963519677E-4	IMPLEMENTATION
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999924451205457	WITHOUT_CLASSIFICATION	7.554879454303263E-5	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999675541091921	WITHOUT_CLASSIFICATION	3.2445890807761816E-5	IMPLEMENTATION
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9992003049927689	WITHOUT_CLASSIFICATION	7.996950072310452E-4	IMPLEMENTATION
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999691187249681	WITHOUT_CLASSIFICATION	3.0881275031983405E-5	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999392880605603	WITHOUT_CLASSIFICATION	6.0711939439806046E-5	IMPLEMENTATION
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9996243891889796	WITHOUT_CLASSIFICATION	3.7561081102040314E-4	IMPLEMENTATION
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995986418420163	WITHOUT_CLASSIFICATION	4.0135815798366574E-4	IMPLEMENTATION
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999534680420972	WITHOUT_CLASSIFICATION	4.6531957902805876E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998956622467746	WITHOUT_CLASSIFICATION	1.0433775322532463E-4	IMPLEMENTATION
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999041124514294	WITHOUT_CLASSIFICATION	9.588754857052256E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999820857586731	WITHOUT_CLASSIFICATION	1.79142413268273E-5	IMPLEMENTATION
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9961788160851978	WITHOUT_CLASSIFICATION	0.0038211839148021686	IMPLEMENTATION
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999706540826959	WITHOUT_CLASSIFICATION	2.93459173040982E-5	IMPLEMENTATION
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999805372508151	WITHOUT_CLASSIFICATION	1.9462749184833014E-5	IMPLEMENTATION
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.955102903506859	WITHOUT_CLASSIFICATION	0.044897096493141095	IMPLEMENTATION
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998372523244536	WITHOUT_CLASSIFICATION	1.62747675546292E-4	IMPLEMENTATION
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999850093003797	WITHOUT_CLASSIFICATION	1.4990699620385476E-5	IMPLEMENTATION
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998310976681719	WITHOUT_CLASSIFICATION	1.6890233182807927E-4	IMPLEMENTATION
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997198507988203	WITHOUT_CLASSIFICATION	2.801492011796401E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993960635304829	WITHOUT_CLASSIFICATION	6.039364695170794E-4	IMPLEMENTATION
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9993960635304829	WITHOUT_CLASSIFICATION	6.039364695170794E-4	IMPLEMENTATION
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998238100998939	WITHOUT_CLASSIFICATION	1.7618990010613407E-4	IMPLEMENTATION
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999030327451567	WITHOUT_CLASSIFICATION	9.696725484327195E-5	IMPLEMENTATION
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9937687399184402	WITHOUT_CLASSIFICATION	0.0062312600815599	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9989381005656578	WITHOUT_CLASSIFICATION	0.0010618994343421766	IMPLEMENTATION
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999922926175118	WITHOUT_CLASSIFICATION	7.70738248824638E-6	IMPLEMENTATION
//for EJB3	WITHOUT_CLASSIFICATION	0.9999138847398216	WITHOUT_CLASSIFICATION	8.611526017836416E-5	IMPLEMENTATION
// just ignore	WITHOUT_CLASSIFICATION	0.9998533229413649	WITHOUT_CLASSIFICATION	1.466770586352497E-4	IMPLEMENTATION
// do a check	WITHOUT_CLASSIFICATION	0.9988667578214712	WITHOUT_CLASSIFICATION	0.00113324217852886	IMPLEMENTATION
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.997946688911843	WITHOUT_CLASSIFICATION	0.00205331108815698	IMPLEMENTATION
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999190576873209	WITHOUT_CLASSIFICATION	8.09423126790869E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999604770696292	WITHOUT_CLASSIFICATION	3.95229303707075E-5	IMPLEMENTATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999936156451035	WITHOUT_CLASSIFICATION	6.384354896499445E-5	IMPLEMENTATION
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999992777254118	WITHOUT_CLASSIFICATION	7.222745881528058E-7	IMPLEMENTATION
// not for internal use:	WITHOUT_CLASSIFICATION	0.9992201702763268	WITHOUT_CLASSIFICATION	7.798297236731627E-4	IMPLEMENTATION
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9997948214219042	WITHOUT_CLASSIFICATION	2.051785780958425E-4	IMPLEMENTATION
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.99954739314702	WITHOUT_CLASSIFICATION	4.5260685297987763E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999604770696292	WITHOUT_CLASSIFICATION	3.95229303707075E-5	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999604770696292	WITHOUT_CLASSIFICATION	3.95229303707075E-5	IMPLEMENTATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9998012063112655	WITHOUT_CLASSIFICATION	1.9879368873450498E-4	IMPLEMENTATION
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999901347499602	WITHOUT_CLASSIFICATION	9.865250039824735E-6	IMPLEMENTATION
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9989071845951366	WITHOUT_CLASSIFICATION	0.0010928154048633924	IMPLEMENTATION
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999926728483066	WITHOUT_CLASSIFICATION	7.327151693325329E-6	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999783916231164	WITHOUT_CLASSIFICATION	2.16083768835129E-5	IMPLEMENTATION
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9998956622467746	WITHOUT_CLASSIFICATION	1.0433775322532463E-4	IMPLEMENTATION
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9993394122455065	WITHOUT_CLASSIFICATION	6.605877544935265E-4	IMPLEMENTATION
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998749509310924	WITHOUT_CLASSIFICATION	1.2504906890761444E-4	IMPLEMENTATION
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999013950854964	WITHOUT_CLASSIFICATION	9.86049145036363E-5	IMPLEMENTATION
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995616178927895	WITHOUT_CLASSIFICATION	4.3838210721044724E-4	IMPLEMENTATION
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999914049236462	WITHOUT_CLASSIFICATION	8.59507635383442E-6	IMPLEMENTATION
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999268587801028	WITHOUT_CLASSIFICATION	7.314121989720981E-5	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998352042047711	WITHOUT_CLASSIFICATION	1.6479579522898414E-4	IMPLEMENTATION
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998352042047711	WITHOUT_CLASSIFICATION	1.6479579522898414E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998352042047711	WITHOUT_CLASSIFICATION	1.6479579522898414E-4	IMPLEMENTATION
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998352042047711	WITHOUT_CLASSIFICATION	1.6479579522898414E-4	IMPLEMENTATION
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998732123322068	WITHOUT_CLASSIFICATION	1.2678766779312747E-4	IMPLEMENTATION
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999592282007768	WITHOUT_CLASSIFICATION	4.0771799223197046E-4	IMPLEMENTATION
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272994428561	WITHOUT_CLASSIFICATION	1.7270055714393258E-4	IMPLEMENTATION
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999516221199799	WITHOUT_CLASSIFICATION	4.8377880020030474E-5	IMPLEMENTATION
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999951585760033	WITHOUT_CLASSIFICATION	4.841423996612737E-6	IMPLEMENTATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998304021297377	WITHOUT_CLASSIFICATION	1.6959787026224623E-4	IMPLEMENTATION
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997805906610245	WITHOUT_CLASSIFICATION	2.1940933897535785E-4	IMPLEMENTATION
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9998085878970218	WITHOUT_CLASSIFICATION	1.914121029782878E-4	IMPLEMENTATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999748891849629	WITHOUT_CLASSIFICATION	2.51108150370241E-5	IMPLEMENTATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999979826525657	WITHOUT_CLASSIFICATION	2.0173474343451702E-6	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999867892333925	WITHOUT_CLASSIFICATION	1.321076660749447E-4	IMPLEMENTATION
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9974824081565409	WITHOUT_CLASSIFICATION	0.0025175918434590504	IMPLEMENTATION
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9997878079839583	WITHOUT_CLASSIFICATION	2.121920160417751E-4	IMPLEMENTATION
//no big deal	WITHOUT_CLASSIFICATION	0.9956299607109196	WITHOUT_CLASSIFICATION	0.004370039289080457	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9989338043917318	WITHOUT_CLASSIFICATION	0.0010661956082681629	IMPLEMENTATION
// no big deal	WITHOUT_CLASSIFICATION	0.9989338043917318	WITHOUT_CLASSIFICATION	0.0010661956082681629	IMPLEMENTATION
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999817873586969	WITHOUT_CLASSIFICATION	1.8212641303030002E-5	IMPLEMENTATION
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999514504554367	WITHOUT_CLASSIFICATION	4.854954456340632E-5	IMPLEMENTATION
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999972107551938	WITHOUT_CLASSIFICATION	2.7892448063185573E-6	IMPLEMENTATION
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998292738837185	WITHOUT_CLASSIFICATION	1.7072611628155706E-4	IMPLEMENTATION
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998292738837185	WITHOUT_CLASSIFICATION	1.7072611628155706E-4	IMPLEMENTATION
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999858732801098	WITHOUT_CLASSIFICATION	1.4126719890273729E-5	IMPLEMENTATION
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987787761714614	WITHOUT_CLASSIFICATION	0.0012212238285386004	IMPLEMENTATION
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9971182120614023	WITHOUT_CLASSIFICATION	0.0028817879385977397	IMPLEMENTATION
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999645850442902	WITHOUT_CLASSIFICATION	3.5414955709837526E-5	IMPLEMENTATION
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9996460070685068	WITHOUT_CLASSIFICATION	3.539929314930788E-4	IMPLEMENTATION
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997498136781809	WITHOUT_CLASSIFICATION	2.5018632181897637E-4	IMPLEMENTATION
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998273244016491	WITHOUT_CLASSIFICATION	1.726755983508231E-4	IMPLEMENTATION
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999263323450701	WITHOUT_CLASSIFICATION	7.366765492987141E-5	IMPLEMENTATION
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997032793464903	WITHOUT_CLASSIFICATION	2.9672065350975634E-4	IMPLEMENTATION
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9996860975401807	WITHOUT_CLASSIFICATION	3.139024598192634E-4	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998362202118711	WITHOUT_CLASSIFICATION	1.6377978812888083E-4	IMPLEMENTATION
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999444935599994	WITHOUT_CLASSIFICATION	5.550644000066935E-5	IMPLEMENTATION
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999437983713227	WITHOUT_CLASSIFICATION	5.620162867727135E-5	IMPLEMENTATION
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999193212131954	WITHOUT_CLASSIFICATION	8.0678786804577E-5	IMPLEMENTATION
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998682686742	WITHOUT_CLASSIFICATION	1.317313258537877E-7	IMPLEMENTATION
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999973370323864	WITHOUT_CLASSIFICATION	2.6629676136909518E-6	IMPLEMENTATION
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999984766267173	WITHOUT_CLASSIFICATION	1.5233732827783218E-6	IMPLEMENTATION
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999990139320893	WITHOUT_CLASSIFICATION	9.860679107569985E-7	IMPLEMENTATION
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998233789461658	WITHOUT_CLASSIFICATION	1.76621053834329E-4	IMPLEMENTATION
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998241091201406	WITHOUT_CLASSIFICATION	1.7589087985936099E-4	IMPLEMENTATION
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999947016264526	WITHOUT_CLASSIFICATION	5.298373547405913E-5	IMPLEMENTATION
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9996101770567006	WITHOUT_CLASSIFICATION	3.898229432993028E-4	IMPLEMENTATION
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999996232192236	WITHOUT_CLASSIFICATION	3.7678077628181556E-7	IMPLEMENTATION
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999532409334649	WITHOUT_CLASSIFICATION	4.675906653509945E-5	IMPLEMENTATION
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999958132569878	WITHOUT_CLASSIFICATION	4.186743012144648E-6	IMPLEMENTATION
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9993746998824565	WITHOUT_CLASSIFICATION	6.253001175434377E-4	IMPLEMENTATION
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999080534039214	WITHOUT_CLASSIFICATION	9.194659607850481E-5	IMPLEMENTATION
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9740601100588836	WITHOUT_CLASSIFICATION	0.025939889941116425	IMPLEMENTATION
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9915401234725754	WITHOUT_CLASSIFICATION	0.008459876527424573	IMPLEMENTATION
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9920108666315602	WITHOUT_CLASSIFICATION	0.007989133368439759	IMPLEMENTATION
// handle empty collection	WITHOUT_CLASSIFICATION	0.9994597845766277	WITHOUT_CLASSIFICATION	5.402154233723501E-4	IMPLEMENTATION
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9995062789400335	WITHOUT_CLASSIFICATION	4.937210599665744E-4	IMPLEMENTATION
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997853096449929	WITHOUT_CLASSIFICATION	2.1469035500697832E-4	IMPLEMENTATION
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999926632702284	WITHOUT_CLASSIFICATION	7.33672977158928E-6	IMPLEMENTATION
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998558622467488	WITHOUT_CLASSIFICATION	1.4413775325108148E-4	IMPLEMENTATION
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9800891548257701	WITHOUT_CLASSIFICATION	0.01991084517422989	IMPLEMENTATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999847176654528	WITHOUT_CLASSIFICATION	1.528233454720167E-5	IMPLEMENTATION
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999948739611046	WITHOUT_CLASSIFICATION	5.1260388953576045E-6	IMPLEMENTATION
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996664807310504	WITHOUT_CLASSIFICATION	3.335192689495802E-4	IMPLEMENTATION
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999207815037272	WITHOUT_CLASSIFICATION	7.921849627289371E-5	IMPLEMENTATION
//do nothing	WITHOUT_CLASSIFICATION	0.9998119450182126	WITHOUT_CLASSIFICATION	1.8805498178735988E-4	IMPLEMENTATION
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998874697893765	WITHOUT_CLASSIFICATION	1.1253021062344246E-4	IMPLEMENTATION
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999877735863651	WITHOUT_CLASSIFICATION	1.2226413634803329E-5	IMPLEMENTATION
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9997568406940179	WITHOUT_CLASSIFICATION	2.431593059820042E-4	IMPLEMENTATION
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9980104159800669	WITHOUT_CLASSIFICATION	0.0019895840199331606	IMPLEMENTATION
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9996845722557126	WITHOUT_CLASSIFICATION	3.154277442873653E-4	IMPLEMENTATION
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.997324862707171	WITHOUT_CLASSIFICATION	0.0026751372928290034	IMPLEMENTATION
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.998929664052428	WITHOUT_CLASSIFICATION	0.0010703359475720605	IMPLEMENTATION
// look for a proxy	WITHOUT_CLASSIFICATION	0.9997268298141582	WITHOUT_CLASSIFICATION	2.7317018584177495E-4	IMPLEMENTATION
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9974714424780313	WITHOUT_CLASSIFICATION	0.002528557521968613	IMPLEMENTATION
//its the given optional object	WITHOUT_CLASSIFICATION	0.9990707776905335	WITHOUT_CLASSIFICATION	9.292223094665271E-4	IMPLEMENTATION
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999962503051723	WITHOUT_CLASSIFICATION	3.7496948277035734E-5	IMPLEMENTATION
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9989023148202664	WITHOUT_CLASSIFICATION	0.0010976851797336049	IMPLEMENTATION
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999112935548322	WITHOUT_CLASSIFICATION	8.870644516779264E-5	IMPLEMENTATION
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999895627877854	WITHOUT_CLASSIFICATION	1.0437212214596614E-4	IMPLEMENTATION
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999996882265424	WITHOUT_CLASSIFICATION	3.117734575188198E-7	IMPLEMENTATION
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999085476403523	WITHOUT_CLASSIFICATION	9.145235964768963E-4	IMPLEMENTATION
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999602109151589	WITHOUT_CLASSIFICATION	3.978908484103352E-5	IMPLEMENTATION
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999989714021548	WITHOUT_CLASSIFICATION	1.028597845280022E-6	IMPLEMENTATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999941075136358	WITHOUT_CLASSIFICATION	5.8924863642267024E-6	IMPLEMENTATION
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999971955606827	WITHOUT_CLASSIFICATION	2.8044393173883104E-6	IMPLEMENTATION
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9792974788754195	WITHOUT_CLASSIFICATION	0.020702521124580476	IMPLEMENTATION
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999710210597368	WITHOUT_CLASSIFICATION	2.897894026319598E-4	IMPLEMENTATION
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999376897480059	WITHOUT_CLASSIFICATION	6.23102519940436E-5	IMPLEMENTATION
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9995257870630584	WITHOUT_CLASSIFICATION	4.7421293694158124E-4	IMPLEMENTATION
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999076664113324	WITHOUT_CLASSIFICATION	9.233358866755892E-5	IMPLEMENTATION
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9997005665577706	WITHOUT_CLASSIFICATION	2.9943344222939274E-4	IMPLEMENTATION
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999885843469581	WITHOUT_CLASSIFICATION	1.1415653041796371E-5	IMPLEMENTATION
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9993525242634953	WITHOUT_CLASSIFICATION	6.474757365047046E-4	IMPLEMENTATION
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999628505763143	WITHOUT_CLASSIFICATION	3.7149423685790864E-5	IMPLEMENTATION
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9989730481250155	WITHOUT_CLASSIFICATION	0.001026951874984475	IMPLEMENTATION
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999280463227915	WITHOUT_CLASSIFICATION	7.195367720851024E-5	IMPLEMENTATION
//a composite key	WITHOUT_CLASSIFICATION	0.994129909096881	WITHOUT_CLASSIFICATION	0.005870090903119052	IMPLEMENTATION
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999372113732989	WITHOUT_CLASSIFICATION	6.278862670106334E-5	IMPLEMENTATION
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9987887403647697	WITHOUT_CLASSIFICATION	0.0012112596352302643	IMPLEMENTATION
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.7179014909009435	IMPLEMENTATION	0.2820985090990566	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9991745074451978	WITHOUT_CLASSIFICATION	8.254925548023478E-4	IMPLEMENTATION
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9773400842713866	WITHOUT_CLASSIFICATION	0.022659915728613336	IMPLEMENTATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9997124229303618	WITHOUT_CLASSIFICATION	2.8757706963818233E-4	IMPLEMENTATION
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9996710728015162	WITHOUT_CLASSIFICATION	3.2892719848382607E-4	IMPLEMENTATION
// we found it	WITHOUT_CLASSIFICATION	0.9976305198221023	WITHOUT_CLASSIFICATION	0.0023694801778977636	IMPLEMENTATION
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.99953960688841	WITHOUT_CLASSIFICATION	4.6039311158997746E-4	IMPLEMENTATION
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9991555796034253	WITHOUT_CLASSIFICATION	8.444203965747295E-4	IMPLEMENTATION
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9995288842646969	WITHOUT_CLASSIFICATION	4.711157353030739E-4	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9875984445296546	WITHOUT_CLASSIFICATION	0.012401555470345377	IMPLEMENTATION
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9994366279791604	WITHOUT_CLASSIFICATION	5.633720208395045E-4	IMPLEMENTATION
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9988921529917277	WITHOUT_CLASSIFICATION	0.0011078470082722576	IMPLEMENTATION
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993661752424213	WITHOUT_CLASSIFICATION	6.338247575786117E-4	IMPLEMENTATION
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999906611830275	WITHOUT_CLASSIFICATION	9.338816972595683E-6	IMPLEMENTATION
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9975750829771736	WITHOUT_CLASSIFICATION	0.0024249170228263944	IMPLEMENTATION
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999791623097829	WITHOUT_CLASSIFICATION	2.083769021710265E-5	IMPLEMENTATION
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998842689021133	WITHOUT_CLASSIFICATION	1.1573109788672082E-4	IMPLEMENTATION
//the criteria instance	WITHOUT_CLASSIFICATION	0.9996816156638563	WITHOUT_CLASSIFICATION	3.183843361437145E-4	IMPLEMENTATION
// the entity name	WITHOUT_CLASSIFICATION	0.9988605884612956	WITHOUT_CLASSIFICATION	0.001139411538704427	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999635475302415	WITHOUT_CLASSIFICATION	3.645246975847552E-5	IMPLEMENTATION
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999635475302415	WITHOUT_CLASSIFICATION	3.645246975847552E-5	IMPLEMENTATION
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999439689781344	WITHOUT_CLASSIFICATION	5.603102186553976E-5	IMPLEMENTATION
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9923612267946397	WITHOUT_CLASSIFICATION	0.007638773205360355	IMPLEMENTATION
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998273055103012	WITHOUT_CLASSIFICATION	1.7269448969877335E-4	IMPLEMENTATION
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999933146244214	WITHOUT_CLASSIFICATION	6.6853755785562E-6	IMPLEMENTATION
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998748455441081	WITHOUT_CLASSIFICATION	1.251544558919645E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998988584199163	WITHOUT_CLASSIFICATION	1.0114158008360437E-4	IMPLEMENTATION
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999764552812093	WITHOUT_CLASSIFICATION	2.3544718790718095E-5	IMPLEMENTATION
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999990791322144	WITHOUT_CLASSIFICATION	9.208677856079387E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.8639595631153887	WITHOUT_CLASSIFICATION	0.13604043688461134	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999905000427232	WITHOUT_CLASSIFICATION	9.499957276893063E-6	IMPLEMENTATION
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999988196158406	WITHOUT_CLASSIFICATION	1.180384159505114E-6	IMPLEMENTATION
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9986020187615697	WITHOUT_CLASSIFICATION	0.0013979812384302926	IMPLEMENTATION
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999991947605439	WITHOUT_CLASSIFICATION	8.052394561432017E-7	IMPLEMENTATION
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998363818837285	WITHOUT_CLASSIFICATION	1.6361811627149003E-4	IMPLEMENTATION
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999357728167708	WITHOUT_CLASSIFICATION	6.422718322913657E-5	IMPLEMENTATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9738332542700086	IMPLEMENTATION	0.02616674572999138	WITHOUT_CLASSIFICATION
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9738332542700086	IMPLEMENTATION	0.02616674572999138	WITHOUT_CLASSIFICATION
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9998886257062073	WITHOUT_CLASSIFICATION	1.1137429379264702E-4	IMPLEMENTATION
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999964790432389	WITHOUT_CLASSIFICATION	3.52095676109702E-5	IMPLEMENTATION
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998322314336983	WITHOUT_CLASSIFICATION	1.6776856630187396E-4	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999673345129241	WITHOUT_CLASSIFICATION	3.266548707594142E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999355842119909	WITHOUT_CLASSIFICATION	6.441578800907618E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999719832194775	WITHOUT_CLASSIFICATION	2.8016780522509684E-4	IMPLEMENTATION
// already been processed...	WITHOUT_CLASSIFICATION	0.999719832194775	WITHOUT_CLASSIFICATION	2.8016780522509684E-4	IMPLEMENTATION
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998783865922793	WITHOUT_CLASSIFICATION	1.2161340772069769E-4	IMPLEMENTATION
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9997649106505425	WITHOUT_CLASSIFICATION	2.3508934945748922E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9988970108957181	WITHOUT_CLASSIFICATION	0.0011029891042819238	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999998169185	WITHOUT_CLASSIFICATION	1.8308152151265648E-10	IMPLEMENTATION
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9997034174090311	WITHOUT_CLASSIFICATION	2.965825909688663E-4	IMPLEMENTATION
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999409911756597	WITHOUT_CLASSIFICATION	5.9008824340360636E-5	IMPLEMENTATION
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9992754495077523	WITHOUT_CLASSIFICATION	7.245504922475924E-4	IMPLEMENTATION
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9994917914990403	WITHOUT_CLASSIFICATION	5.082085009596951E-4	IMPLEMENTATION
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999723476688096	WITHOUT_CLASSIFICATION	2.7652331190458517E-5	IMPLEMENTATION
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999948125819728	WITHOUT_CLASSIFICATION	5.187418027181528E-6	IMPLEMENTATION
// make a new one	WITHOUT_CLASSIFICATION	0.998840978012561	WITHOUT_CLASSIFICATION	0.0011590219874389714	IMPLEMENTATION
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999131140116622	WITHOUT_CLASSIFICATION	8.688598833783531E-5	IMPLEMENTATION
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999949209172888	WITHOUT_CLASSIFICATION	5.0790827112135E-5	IMPLEMENTATION
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9993575308303738	WITHOUT_CLASSIFICATION	6.424691696261393E-4	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9965970232418244	WITHOUT_CLASSIFICATION	0.003402976758175598	IMPLEMENTATION
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
//by default	WITHOUT_CLASSIFICATION	0.9992862954105699	WITHOUT_CLASSIFICATION	7.137045894300488E-4	IMPLEMENTATION
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999995707081408	WITHOUT_CLASSIFICATION	4.292918592001944E-6	IMPLEMENTATION
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9993242851080093	WITHOUT_CLASSIFICATION	6.757148919908059E-4	IMPLEMENTATION
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999125087146745	WITHOUT_CLASSIFICATION	8.749128532549527E-5	IMPLEMENTATION
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999249867319134	WITHOUT_CLASSIFICATION	7.501326808649218E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9925685506398237	WITHOUT_CLASSIFICATION	0.0074314493601761525	IMPLEMENTATION
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999372406979717	WITHOUT_CLASSIFICATION	6.275930202830329E-4	IMPLEMENTATION
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999270139864239	WITHOUT_CLASSIFICATION	7.298601357601981E-5	IMPLEMENTATION
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999110183821651	WITHOUT_CLASSIFICATION	8.898161783496223E-5	IMPLEMENTATION
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9865594911127618	WITHOUT_CLASSIFICATION	0.013440508887238195	IMPLEMENTATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999979138237801	WITHOUT_CLASSIFICATION	2.0861762199003273E-5	IMPLEMENTATION
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9991982052377644	WITHOUT_CLASSIFICATION	8.017947622357166E-4	IMPLEMENTATION
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999984046110171	WITHOUT_CLASSIFICATION	1.5953889829217782E-6	IMPLEMENTATION
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999288590783229	WITHOUT_CLASSIFICATION	7.114092167711542E-4	IMPLEMENTATION
//usually useless	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999860545991572	WITHOUT_CLASSIFICATION	1.3945400842683694E-5	IMPLEMENTATION
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9860631459519426	WITHOUT_CLASSIFICATION	0.013936854048057395	IMPLEMENTATION
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9960298045278347	WITHOUT_CLASSIFICATION	0.00397019547216525	IMPLEMENTATION
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9994343839153168	WITHOUT_CLASSIFICATION	5.656160846833101E-4	IMPLEMENTATION
//may be final	WITHOUT_CLASSIFICATION	0.9979984613122964	WITHOUT_CLASSIFICATION	0.0020015386877036876	IMPLEMENTATION
// may be final	WITHOUT_CLASSIFICATION	0.9992940003758024	WITHOUT_CLASSIFICATION	7.059996241976092E-4	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9996044867392581	WITHOUT_CLASSIFICATION	3.9551326074196736E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994933239619415	WITHOUT_CLASSIFICATION	5.066760380586279E-4	IMPLEMENTATION
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998140284542574	WITHOUT_CLASSIFICATION	1.8597154574260524E-4	IMPLEMENTATION
// ignore it...	WITHOUT_CLASSIFICATION	0.9992773621656066	WITHOUT_CLASSIFICATION	7.226378343934347E-4	IMPLEMENTATION
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9986753421372719	WITHOUT_CLASSIFICATION	0.0013246578627280515	IMPLEMENTATION
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999776281833656	WITHOUT_CLASSIFICATION	2.2371816634395887E-4	IMPLEMENTATION
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999975130370214	WITHOUT_CLASSIFICATION	2.486962978454124E-6	IMPLEMENTATION
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.997962958819946	WITHOUT_CLASSIFICATION	0.002037041180054033	IMPLEMENTATION
// Custom SQL	WITHOUT_CLASSIFICATION	0.9996044867392581	WITHOUT_CLASSIFICATION	3.9551326074196736E-4	IMPLEMENTATION
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9994933239619415	WITHOUT_CLASSIFICATION	5.066760380586279E-4	IMPLEMENTATION
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9994903982714144	WITHOUT_CLASSIFICATION	5.096017285856207E-4	IMPLEMENTATION
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9994276612865288	WITHOUT_CLASSIFICATION	5.723387134711266E-4	IMPLEMENTATION
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999650909708665	WITHOUT_CLASSIFICATION	3.4909029133548676E-5	IMPLEMENTATION
// index should be last column listed	WITHOUT_CLASSIFICATION	0.999746388622832	WITHOUT_CLASSIFICATION	2.536113771679001E-4	IMPLEMENTATION
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999680373302846	WITHOUT_CLASSIFICATION	3.196266971536666E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9970174982035012	WITHOUT_CLASSIFICATION	0.002982501796498902	IMPLEMENTATION
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994350534828231	WITHOUT_CLASSIFICATION	5.649465171769118E-4	IMPLEMENTATION
// }	WITHOUT_CLASSIFICATION	0.9999827408498951	WITHOUT_CLASSIFICATION	1.725915010477977E-5	IMPLEMENTATION
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999845245840012	WITHOUT_CLASSIFICATION	1.547541599880049E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9977009735022261	WITHOUT_CLASSIFICATION	0.002299026497773867	IMPLEMENTATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999867049881188	WITHOUT_CLASSIFICATION	1.3295011881263899E-5	IMPLEMENTATION
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9977009735022261	WITHOUT_CLASSIFICATION	0.002299026497773867	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9998998649246842	WITHOUT_CLASSIFICATION	1.0013507531577874E-4	IMPLEMENTATION
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9991861410575099	WITHOUT_CLASSIFICATION	8.138589424901917E-4	IMPLEMENTATION
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998998649246842	WITHOUT_CLASSIFICATION	1.0013507531577874E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996943842400224	WITHOUT_CLASSIFICATION	3.0561575997755346E-4	IMPLEMENTATION
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999658421067177	WITHOUT_CLASSIFICATION	3.415789328236161E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999178077519822	WITHOUT_CLASSIFICATION	8.219224801780503E-5	IMPLEMENTATION
//}	WITHOUT_CLASSIFICATION	0.9999178077519822	WITHOUT_CLASSIFICATION	8.219224801780503E-5	IMPLEMENTATION
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9992860050842838	WITHOUT_CLASSIFICATION	7.139949157162548E-4	IMPLEMENTATION
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9992944902790587	WITHOUT_CLASSIFICATION	7.055097209413151E-4	IMPLEMENTATION
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9992860050842838	WITHOUT_CLASSIFICATION	7.139949157162548E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9994409307250182	WITHOUT_CLASSIFICATION	5.590692749818606E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9133527250798644	WITHOUT_CLASSIFICATION	0.08664727492013562	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9971340950198995	WITHOUT_CLASSIFICATION	0.0028659049801004885	IMPLEMENTATION
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9994615159975795	WITHOUT_CLASSIFICATION	5.384840024205567E-4	IMPLEMENTATION
// KEY	WITHOUT_CLASSIFICATION	0.9999831124415188	WITHOUT_CLASSIFICATION	1.688755848118256E-5	IMPLEMENTATION
//columns	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//SQL statements	WITHOUT_CLASSIFICATION	0.9971886534226462	WITHOUT_CLASSIFICATION	0.0028113465773538155	IMPLEMENTATION
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999912451965309	WITHOUT_CLASSIFICATION	8.754803469063596E-6	IMPLEMENTATION
//types	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// custom sql	WITHOUT_CLASSIFICATION	0.9995078839669342	WITHOUT_CLASSIFICATION	4.921160330658634E-4	IMPLEMENTATION
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9992531717798805	WITHOUT_CLASSIFICATION	7.468282201194909E-4	IMPLEMENTATION
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998276999918653	WITHOUT_CLASSIFICATION	1.7230000813476916E-4	IMPLEMENTATION
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9997755966896531	WITHOUT_CLASSIFICATION	2.244033103467883E-4	IMPLEMENTATION
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999231655152394	WITHOUT_CLASSIFICATION	7.683448476060605E-5	IMPLEMENTATION
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
//ELEMENT	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999682097208773	WITHOUT_CLASSIFICATION	3.179027912278774E-5	IMPLEMENTATION
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999043485733415	WITHOUT_CLASSIFICATION	9.565142665847214E-5	IMPLEMENTATION
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999700760919007	WITHOUT_CLASSIFICATION	2.9923908099296545E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9990893248838423	WITHOUT_CLASSIFICATION	9.106751161577294E-4	IMPLEMENTATION
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9974341185507796	WITHOUT_CLASSIFICATION	0.0025658814492204416	IMPLEMENTATION
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9989642523731125	WITHOUT_CLASSIFICATION	0.0010357476268875367	IMPLEMENTATION
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9645368689671894	WITHOUT_CLASSIFICATION	0.0354631310328106	IMPLEMENTATION
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999576887233372	WITHOUT_CLASSIFICATION	4.23112766628079E-4	IMPLEMENTATION
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998316290419039	WITHOUT_CLASSIFICATION	1.6837095809613998E-4	IMPLEMENTATION
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9901083452658732	WITHOUT_CLASSIFICATION	0.00989165473412681	IMPLEMENTATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9995190365226881	WITHOUT_CLASSIFICATION	4.8096347731182895E-4	IMPLEMENTATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9971340950198995	WITHOUT_CLASSIFICATION	0.0028659049801004885	IMPLEMENTATION
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999207388273463	WITHOUT_CLASSIFICATION	7.926117265366174E-5	IMPLEMENTATION
//needed by arrays	WITHOUT_CLASSIFICATION	0.998422697511689	WITHOUT_CLASSIFICATION	0.0015773024883110453	IMPLEMENTATION
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9933615780409979	WITHOUT_CLASSIFICATION	0.00663842195900208	IMPLEMENTATION
//an assertion	WITHOUT_CLASSIFICATION	0.9970371744469209	WITHOUT_CLASSIFICATION	0.0029628255530790965	IMPLEMENTATION
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999545356252194	WITHOUT_CLASSIFICATION	4.5464374780495535E-5	IMPLEMENTATION
//create all the new entries	WITHOUT_CLASSIFICATION	0.9996051169931757	WITHOUT_CLASSIFICATION	3.948830068243133E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9994409307250182	WITHOUT_CLASSIFICATION	5.590692749818606E-4	IMPLEMENTATION
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9994409307250182	WITHOUT_CLASSIFICATION	5.590692749818606E-4	IMPLEMENTATION
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9968594184278033	WITHOUT_CLASSIFICATION	0.0031405815721967487	IMPLEMENTATION
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9995942370804911	WITHOUT_CLASSIFICATION	4.057629195088518E-4	IMPLEMENTATION
//==elementType ??	WITHOUT_CLASSIFICATION	0.9971121005648664	WITHOUT_CLASSIFICATION	0.0028878994351335314	IMPLEMENTATION
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9978290084891737	WITHOUT_CLASSIFICATION	0.002170991510826271	IMPLEMENTATION
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9989872174821579	WITHOUT_CLASSIFICATION	0.0010127825178420655	IMPLEMENTATION
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997016850641116	WITHOUT_CLASSIFICATION	2.983149358883579E-4	IMPLEMENTATION
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9992879561863299	WITHOUT_CLASSIFICATION	7.1204381367006E-4	IMPLEMENTATION
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998071005011	WITHOUT_CLASSIFICATION	1.9289949893970234E-7	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999736620915752	WITHOUT_CLASSIFICATION	2.6337908424798424E-4	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999524785245903	WITHOUT_CLASSIFICATION	4.752147540964968E-5	IMPLEMENTATION
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9992531717798805	WITHOUT_CLASSIFICATION	7.468282201194909E-4	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//Custom SQL	WITHOUT_CLASSIFICATION	0.9980814441030973	WITHOUT_CLASSIFICATION	0.00191855589690274	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999524785245903	WITHOUT_CLASSIFICATION	4.752147540964968E-5	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9993847683609236	WITHOUT_CLASSIFICATION	6.152316390763371E-4	IMPLEMENTATION
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999756003259935	WITHOUT_CLASSIFICATION	2.4399674006458384E-5	IMPLEMENTATION
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9994906431038543	WITHOUT_CLASSIFICATION	5.09356896145635E-4	IMPLEMENTATION
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9883511177688006	WITHOUT_CLASSIFICATION	0.011648882231199425	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994801807711048	WITHOUT_CLASSIFICATION	5.198192288952812E-4	IMPLEMENTATION
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999993913597563	WITHOUT_CLASSIFICATION	6.0864024371291345E-6	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999833316852322	WITHOUT_CLASSIFICATION	1.6668314767713546E-5	IMPLEMENTATION
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999999988510307	WITHOUT_CLASSIFICATION	1.1489692157019156E-9	IMPLEMENTATION
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.99947644108775	WITHOUT_CLASSIFICATION	5.235589122500621E-4	IMPLEMENTATION
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9998693045644145	WITHOUT_CLASSIFICATION	1.3069543558554393E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999756841327209	WITHOUT_CLASSIFICATION	2.4315867279191487E-5	IMPLEMENTATION
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9841119901864649	WITHOUT_CLASSIFICATION	0.01588800981353509	IMPLEMENTATION
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999524785245903	WITHOUT_CLASSIFICATION	4.752147540964968E-5	IMPLEMENTATION
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9994801807711048	WITHOUT_CLASSIFICATION	5.198192288952812E-4	IMPLEMENTATION
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999833316852322	WITHOUT_CLASSIFICATION	1.6668314767713546E-5	IMPLEMENTATION
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9992989567124481	WITHOUT_CLASSIFICATION	7.01043287551969E-4	IMPLEMENTATION
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9981999729155542	WITHOUT_CLASSIFICATION	0.001800027084445813	IMPLEMENTATION
// discriminator column	WITHOUT_CLASSIFICATION	0.9999170352287	WITHOUT_CLASSIFICATION	8.296477129994347E-5	IMPLEMENTATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9990332569760738	WITHOUT_CLASSIFICATION	9.667430239261862E-4	IMPLEMENTATION
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9995501553093427	WITHOUT_CLASSIFICATION	4.4984469065730557E-4	IMPLEMENTATION
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9993847683609236	WITHOUT_CLASSIFICATION	6.152316390763371E-4	IMPLEMENTATION
// JOINS	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9993346181736635	WITHOUT_CLASSIFICATION	6.653818263365974E-4	IMPLEMENTATION
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9981331436997108	WITHOUT_CLASSIFICATION	0.0018668563002891595	IMPLEMENTATION
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9990583229044159	WITHOUT_CLASSIFICATION	9.416770955841253E-4	IMPLEMENTATION
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.5491021888714585	IMPLEMENTATION	0.45089781112854166	WITHOUT_CLASSIFICATION
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.6177458429483439	IMPLEMENTATION	0.382254157051656	WITHOUT_CLASSIFICATION
//render the SQL	WITHOUT_CLASSIFICATION	0.997944279924378	WITHOUT_CLASSIFICATION	0.0020557200756219536	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996943842400224	WITHOUT_CLASSIFICATION	3.0561575997755346E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999836862201518	WITHOUT_CLASSIFICATION	1.631377984817742E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999995599269925	WITHOUT_CLASSIFICATION	4.400730074999876E-7	IMPLEMENTATION
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999872908853882	WITHOUT_CLASSIFICATION	1.2709114611790173E-4	IMPLEMENTATION
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999947287812948	WITHOUT_CLASSIFICATION	5.271218705279789E-6	IMPLEMENTATION
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999964170259709	WITHOUT_CLASSIFICATION	3.582974029203145E-6	IMPLEMENTATION
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9998303940268164	WITHOUT_CLASSIFICATION	1.6960597318352555E-4	IMPLEMENTATION
// SQL strings	WITHOUT_CLASSIFICATION	0.9993678216907248	WITHOUT_CLASSIFICATION	6.321783092752553E-4	IMPLEMENTATION
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999972922005261	WITHOUT_CLASSIFICATION	2.707799473896499E-5	IMPLEMENTATION
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// VERSION	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9970405885467066	WITHOUT_CLASSIFICATION	0.0029594114532933455	IMPLEMENTATION
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998830445803648	WITHOUT_CLASSIFICATION	1.1695541963519677E-4	IMPLEMENTATION
//before add :-)	WITHOUT_CLASSIFICATION	0.996291418260072	WITHOUT_CLASSIFICATION	0.0037085817399279903	IMPLEMENTATION
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998840491339496	WITHOUT_CLASSIFICATION	1.159508660503714E-4	IMPLEMENTATION
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998694744545354	WITHOUT_CLASSIFICATION	1.305255454645898E-4	IMPLEMENTATION
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997355845452895	WITHOUT_CLASSIFICATION	2.64415454710501E-4	IMPLEMENTATION
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9997252927611248	WITHOUT_CLASSIFICATION	2.747072388752039E-4	IMPLEMENTATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.991137188353669	WITHOUT_CLASSIFICATION	0.008862811646330954	IMPLEMENTATION
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9956929276736619	WITHOUT_CLASSIFICATION	0.004307072326338091	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9993884625279223	WITHOUT_CLASSIFICATION	6.11537472077649E-4	IMPLEMENTATION
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9951006980913504	WITHOUT_CLASSIFICATION	0.004899301908649626	IMPLEMENTATION
//null owner ok??	WITHOUT_CLASSIFICATION	0.9965477390978195	WITHOUT_CLASSIFICATION	0.0034522609021804926	IMPLEMENTATION
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999723456952895	WITHOUT_CLASSIFICATION	2.7654304710457624E-5	IMPLEMENTATION
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999718907632161	WITHOUT_CLASSIFICATION	2.810923678383717E-5	IMPLEMENTATION
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9989660469697496	WITHOUT_CLASSIFICATION	0.0010339530302504747	IMPLEMENTATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9996679653086323	WITHOUT_CLASSIFICATION	3.320346913675879E-4	IMPLEMENTATION
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9991262814422249	WITHOUT_CLASSIFICATION	8.737185577750119E-4	IMPLEMENTATION
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9992754796989287	WITHOUT_CLASSIFICATION	7.245203010712972E-4	IMPLEMENTATION
// ALIASES	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999942837394811	WITHOUT_CLASSIFICATION	5.716260518899269E-5	IMPLEMENTATION
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999536628870462	WITHOUT_CLASSIFICATION	4.6337112953743994E-5	IMPLEMENTATION
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999881233563094	WITHOUT_CLASSIFICATION	1.1876643690717748E-5	IMPLEMENTATION
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9996025119917047	WITHOUT_CLASSIFICATION	3.974880082952104E-4	IMPLEMENTATION
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7600949538736138	IMPLEMENTATION	0.23990504612638627	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9983621690207836	WITHOUT_CLASSIFICATION	0.0016378309792163886	IMPLEMENTATION
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9988227670362471	WITHOUT_CLASSIFICATION	0.001177232963752882	IMPLEMENTATION
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999794747956001	WITHOUT_CLASSIFICATION	2.0525204399827424E-5	IMPLEMENTATION
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9899858218479786	WITHOUT_CLASSIFICATION	0.010014178152021375	IMPLEMENTATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998200032136226	WITHOUT_CLASSIFICATION	1.7999678637740149E-4	IMPLEMENTATION
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999940278554024	WITHOUT_CLASSIFICATION	5.972144597595185E-5	IMPLEMENTATION
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999609484731784	WITHOUT_CLASSIFICATION	3.9051526821624386E-5	IMPLEMENTATION
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999990501842907	WITHOUT_CLASSIFICATION	9.498157092079374E-7	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999608317884627	WITHOUT_CLASSIFICATION	3.9168211537276575E-5	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9996197801553093	WITHOUT_CLASSIFICATION	3.802198446907716E-4	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999843405977554	WITHOUT_CLASSIFICATION	1.5659402244601456E-4	IMPLEMENTATION
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9989226390173678	WITHOUT_CLASSIFICATION	0.0010773609826322413	IMPLEMENTATION
// add normal properties	WITHOUT_CLASSIFICATION	0.9996197801553093	WITHOUT_CLASSIFICATION	3.802198446907716E-4	IMPLEMENTATION
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999608317884627	WITHOUT_CLASSIFICATION	3.9168211537276575E-5	IMPLEMENTATION
// add the discriminator	WITHOUT_CLASSIFICATION	0.999843405977554	WITHOUT_CLASSIFICATION	1.5659402244601456E-4	IMPLEMENTATION
// add the primary key	WITHOUT_CLASSIFICATION	0.9999192571255223	WITHOUT_CLASSIFICATION	8.074287447772708E-5	IMPLEMENTATION
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.99996718144705	WITHOUT_CLASSIFICATION	3.2818552950070656E-5	IMPLEMENTATION
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9959788903798862	WITHOUT_CLASSIFICATION	0.004021109620113783	IMPLEMENTATION
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999267677932139	WITHOUT_CLASSIFICATION	7.32322067860932E-5	IMPLEMENTATION
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999988763350541	WITHOUT_CLASSIFICATION	1.1236649458915148E-6	IMPLEMENTATION
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6024850120692854	WITHOUT_CLASSIFICATION	0.39751498793071455	IMPLEMENTATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9555774956429967	WITHOUT_CLASSIFICATION	0.04442250435700325	IMPLEMENTATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998781060844466	WITHOUT_CLASSIFICATION	1.218939155534167E-4	IMPLEMENTATION
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999137018335045	WITHOUT_CLASSIFICATION	8.62981664954496E-5	IMPLEMENTATION
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9997592237146492	WITHOUT_CLASSIFICATION	2.4077628535084698E-4	IMPLEMENTATION
// starting index	WITHOUT_CLASSIFICATION	0.9977384629760586	WITHOUT_CLASSIFICATION	0.0022615370239413377	IMPLEMENTATION
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999858361467443	WITHOUT_CLASSIFICATION	1.4163853255719406E-5	IMPLEMENTATION
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998580326220602	WITHOUT_CLASSIFICATION	1.4196737793986273E-4	IMPLEMENTATION
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9996446056687699	WITHOUT_CLASSIFICATION	3.553943312301195E-4	IMPLEMENTATION
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999222565258303	WITHOUT_CLASSIFICATION	7.774347416971759E-5	IMPLEMENTATION
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9995508451333812	WITHOUT_CLASSIFICATION	4.491548666188223E-4	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998329848287969	WITHOUT_CLASSIFICATION	1.670151712030968E-4	IMPLEMENTATION
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999808442224817	WITHOUT_CLASSIFICATION	1.915577751833464E-5	IMPLEMENTATION
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997446479887594	WITHOUT_CLASSIFICATION	2.55352011240666E-4	IMPLEMENTATION
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9984780879398246	WITHOUT_CLASSIFICATION	0.0015219120601754291	IMPLEMENTATION
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9994473552131133	WITHOUT_CLASSIFICATION	5.526447868866713E-4	IMPLEMENTATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9989158010546856	WITHOUT_CLASSIFICATION	0.0010841989453144866	IMPLEMENTATION
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9995786792780722	WITHOUT_CLASSIFICATION	4.2132072192774413E-4	IMPLEMENTATION
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9997000804790094	WITHOUT_CLASSIFICATION	2.999195209905924E-4	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9983778062429821	WITHOUT_CLASSIFICATION	0.0016221937570177927	IMPLEMENTATION
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9983778062429821	WITHOUT_CLASSIFICATION	0.0016221937570177927	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9993681562200076	WITHOUT_CLASSIFICATION	6.318437799924706E-4	IMPLEMENTATION
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9993681562200076	WITHOUT_CLASSIFICATION	6.318437799924706E-4	IMPLEMENTATION
// not supported	WITHOUT_CLASSIFICATION	0.9981410504999249	WITHOUT_CLASSIFICATION	0.0018589495000751709	IMPLEMENTATION
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998329848287969	WITHOUT_CLASSIFICATION	1.670151712030968E-4	IMPLEMENTATION
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9995537861645157	WITHOUT_CLASSIFICATION	4.4621383548427225E-4	IMPLEMENTATION
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999332082721378	WITHOUT_CLASSIFICATION	6.679172786215684E-5	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999412217007705	WITHOUT_CLASSIFICATION	5.87782992294981E-4	IMPLEMENTATION
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999412217007705	WITHOUT_CLASSIFICATION	5.87782992294981E-4	IMPLEMENTATION
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9995832932882908	WITHOUT_CLASSIFICATION	4.167067117092801E-4	IMPLEMENTATION
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9881175145249447	WITHOUT_CLASSIFICATION	0.011882485475055337	IMPLEMENTATION
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9927301249478695	WITHOUT_CLASSIFICATION	0.007269875052130407	IMPLEMENTATION
//skip the driving table	WITHOUT_CLASSIFICATION	0.9995514650713679	WITHOUT_CLASSIFICATION	4.4853492863209293E-4	IMPLEMENTATION
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997170514202706	WITHOUT_CLASSIFICATION	2.8294857972943225E-4	IMPLEMENTATION
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999921193158788	WITHOUT_CLASSIFICATION	7.880684121254339E-6	IMPLEMENTATION
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997418850455642	WITHOUT_CLASSIFICATION	2.5811495443585814E-4	IMPLEMENTATION
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9998288318457179	WITHOUT_CLASSIFICATION	1.7116815428206466E-4	IMPLEMENTATION
//now render the joins	WITHOUT_CLASSIFICATION	0.9994016947311187	WITHOUT_CLASSIFICATION	5.983052688813634E-4	IMPLEMENTATION
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999875489349278	WITHOUT_CLASSIFICATION	1.2451065072168087E-5	IMPLEMENTATION
//now render the select clause	WITHOUT_CLASSIFICATION	0.9994084116580126	WITHOUT_CLASSIFICATION	5.915883419874253E-4	IMPLEMENTATION
//now tie it all together	WITHOUT_CLASSIFICATION	0.9986275372882631	WITHOUT_CLASSIFICATION	0.00137246271173684	IMPLEMENTATION
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9996320369166312	WITHOUT_CLASSIFICATION	3.679630833688101E-4	IMPLEMENTATION
//select SQL	WITHOUT_CLASSIFICATION	0.9981706986483019	WITHOUT_CLASSIFICATION	0.0018293013516981372	IMPLEMENTATION
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9907599684307612	WITHOUT_CLASSIFICATION	0.009240031569238803	IMPLEMENTATION
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998760103926506	WITHOUT_CLASSIFICATION	1.2398960734932732E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998364130321971	WITHOUT_CLASSIFICATION	1.6358696780300117E-4	IMPLEMENTATION
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9993070885027072	WITHOUT_CLASSIFICATION	6.929114972928278E-4	IMPLEMENTATION
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9380080239189696	WITHOUT_CLASSIFICATION	0.061991976081030326	IMPLEMENTATION
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999803907879807	WITHOUT_CLASSIFICATION	1.9609212019239355E-5	IMPLEMENTATION
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999309467767946	WITHOUT_CLASSIFICATION	6.905322320536907E-5	IMPLEMENTATION
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999864402226908	WITHOUT_CLASSIFICATION	1.3559777309146818E-5	IMPLEMENTATION
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998216171866892	WITHOUT_CLASSIFICATION	1.7838281331090028E-4	IMPLEMENTATION
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999978389178569	WITHOUT_CLASSIFICATION	2.161082143061372E-6	IMPLEMENTATION
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9991629056605053	WITHOUT_CLASSIFICATION	8.370943394948132E-4	IMPLEMENTATION
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9997820882799036	WITHOUT_CLASSIFICATION	2.1791172009646411E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9993884625279223	WITHOUT_CLASSIFICATION	6.11537472077649E-4	IMPLEMENTATION
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9996765377650512	WITHOUT_CLASSIFICATION	3.2346223494881876E-4	IMPLEMENTATION
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999973145020561	WITHOUT_CLASSIFICATION	2.6854979438891773E-6	IMPLEMENTATION
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998465489188776	WITHOUT_CLASSIFICATION	1.5345108112249103E-4	IMPLEMENTATION
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998274657006944	WITHOUT_CLASSIFICATION	1.7253429930567994E-4	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.998562087533482	WITHOUT_CLASSIFICATION	0.0014379124665180535	IMPLEMENTATION
//cannot occur	WITHOUT_CLASSIFICATION	0.998562087533482	WITHOUT_CLASSIFICATION	0.0014379124665180535	IMPLEMENTATION
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999907871656076	WITHOUT_CLASSIFICATION	9.212834392399487E-5	IMPLEMENTATION
// try "get"	WITHOUT_CLASSIFICATION	0.9992521947266938	WITHOUT_CLASSIFICATION	7.478052733062824E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9990347602247459	WITHOUT_CLASSIFICATION	9.652397752541211E-4	IMPLEMENTATION
// do nothing...	WITHOUT_CLASSIFICATION	0.9990347602247459	WITHOUT_CLASSIFICATION	9.652397752541211E-4	IMPLEMENTATION
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9983024223723198	WITHOUT_CLASSIFICATION	0.0016975776276801566	IMPLEMENTATION
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998394892066953	WITHOUT_CLASSIFICATION	1.6051079330469336E-4	IMPLEMENTATION
// do not do anything	WITHOUT_CLASSIFICATION	0.9847920197407091	WITHOUT_CLASSIFICATION	0.015207980259290942	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999783916231164	WITHOUT_CLASSIFICATION	2.16083768835129E-5	IMPLEMENTATION
//cant instantiate	WITHOUT_CLASSIFICATION	0.9970940951100228	WITHOUT_CLASSIFICATION	0.0029059048899772806	IMPLEMENTATION
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9998565970502551	WITHOUT_CLASSIFICATION	1.4340294974490476E-4	IMPLEMENTATION
// otherwise:	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999872649424423	WITHOUT_CLASSIFICATION	1.2735057557697576E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997577514496906	WITHOUT_CLASSIFICATION	2.4224855030943946E-4	IMPLEMENTATION
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9997577514496906	WITHOUT_CLASSIFICATION	2.4224855030943946E-4	IMPLEMENTATION
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998422206065182	WITHOUT_CLASSIFICATION	1.5777939348187377E-4	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999510165184282	WITHOUT_CLASSIFICATION	4.89834815716862E-5	IMPLEMENTATION
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999510165184282	WITHOUT_CLASSIFICATION	4.89834815716862E-5	IMPLEMENTATION
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998731886321691	WITHOUT_CLASSIFICATION	1.2681136783097518E-4	IMPLEMENTATION
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9998874564941965	WITHOUT_CLASSIFICATION	1.1254350580356546E-4	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9997705183013372	WITHOUT_CLASSIFICATION	2.2948169866266694E-4	IMPLEMENTATION
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999561470604738	WITHOUT_CLASSIFICATION	4.385293952621069E-5	IMPLEMENTATION
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9991125398988663	WITHOUT_CLASSIFICATION	8.874601011336231E-4	IMPLEMENTATION
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999994307683526	WITHOUT_CLASSIFICATION	5.692316474411394E-7	IMPLEMENTATION
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999632850914374	WITHOUT_CLASSIFICATION	3.671490856259259E-4	IMPLEMENTATION
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9995193554905003	WITHOUT_CLASSIFICATION	4.806445094996914E-4	IMPLEMENTATION
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9918476958113748	WITHOUT_CLASSIFICATION	0.008152304188625295	IMPLEMENTATION
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999656352979264	WITHOUT_CLASSIFICATION	3.436470207360129E-4	IMPLEMENTATION
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9897750390988125	WITHOUT_CLASSIFICATION	0.010224960901187505	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999194626296292	WITHOUT_CLASSIFICATION	8.053737037082978E-5	IMPLEMENTATION
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999672077800608	WITHOUT_CLASSIFICATION	3.279221993920437E-4	IMPLEMENTATION
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//for MySQL	WITHOUT_CLASSIFICATION	0.9975976281695206	WITHOUT_CLASSIFICATION	0.0024023718304794564	IMPLEMENTATION
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9992521045486449	WITHOUT_CLASSIFICATION	7.478954513550909E-4	IMPLEMENTATION
//null caused some problems	WITHOUT_CLASSIFICATION	0.9985463130359215	WITHOUT_CLASSIFICATION	0.0014536869640785464	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9998296125883868	WITHOUT_CLASSIFICATION	1.703874116131497E-4	IMPLEMENTATION
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9989751297140632	WITHOUT_CLASSIFICATION	0.001024870285936722	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999174534387038	WITHOUT_CLASSIFICATION	8.254656129623447E-5	IMPLEMENTATION
// we only release the connection	WITHOUT_CLASSIFICATION	0.9869987422358117	WITHOUT_CLASSIFICATION	0.013001257764188262	IMPLEMENTATION
// deprecated option...	WITHOUT_CLASSIFICATION	0.9997860912988891	WITHOUT_CLASSIFICATION	2.1390870111105017E-4	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9975103898780983	WITHOUT_CLASSIFICATION	0.0024896101219017805	IMPLEMENTATION
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.999997566128889	WITHOUT_CLASSIFICATION	2.433871111005705E-6	IMPLEMENTATION
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.8975504143211479	IMPLEMENTATION	0.10244958567885208	WITHOUT_CLASSIFICATION
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999951519566118	WITHOUT_CLASSIFICATION	4.848043388172269E-6	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9975103898780983	WITHOUT_CLASSIFICATION	0.0024896101219017805	IMPLEMENTATION
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.6010349323637018	IMPLEMENTATION	0.3989650676362983	WITHOUT_CLASSIFICATION
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999044517117325	WITHOUT_CLASSIFICATION	9.554828826749092E-5	IMPLEMENTATION
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999932296116035	WITHOUT_CLASSIFICATION	6.770388396450748E-6	IMPLEMENTATION
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999393135522029	WITHOUT_CLASSIFICATION	6.0686447797096544E-5	IMPLEMENTATION
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999695956359258	WITHOUT_CLASSIFICATION	3.0404364074271133E-5	IMPLEMENTATION
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9988735051209812	WITHOUT_CLASSIFICATION	0.0011264948790187395	IMPLEMENTATION
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999830211080739	WITHOUT_CLASSIFICATION	1.6978891926066793E-5	IMPLEMENTATION
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999357565106685	WITHOUT_CLASSIFICATION	6.424348933152025E-5	IMPLEMENTATION
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999166874220181	WITHOUT_CLASSIFICATION	8.331257798183541E-5	IMPLEMENTATION
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999922281638136	WITHOUT_CLASSIFICATION	7.771836186471885E-6	IMPLEMENTATION
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999166874220181	WITHOUT_CLASSIFICATION	8.331257798183541E-5	IMPLEMENTATION
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999866423140199	WITHOUT_CLASSIFICATION	1.3357685980118633E-5	IMPLEMENTATION
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999730616837033	WITHOUT_CLASSIFICATION	2.693831629669798E-4	IMPLEMENTATION
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.5071859838586873	IMPLEMENTATION	0.4928140161413126	WITHOUT_CLASSIFICATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999839031052619	WITHOUT_CLASSIFICATION	1.6096894738152288E-5	IMPLEMENTATION
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998841522425312	WITHOUT_CLASSIFICATION	1.1584775746882885E-4	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999889474209858	WITHOUT_CLASSIFICATION	1.1052579014159017E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998293083558212	WITHOUT_CLASSIFICATION	1.7069164417883524E-4	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999686271020182	WITHOUT_CLASSIFICATION	3.137289798179953E-5	IMPLEMENTATION
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998293083558212	WITHOUT_CLASSIFICATION	1.7069164417883524E-4	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997783346621936	WITHOUT_CLASSIFICATION	2.216653378062985E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998053116506961	WITHOUT_CLASSIFICATION	1.9468834930393136E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999548268607878	WITHOUT_CLASSIFICATION	4.517313921220905E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999992112363446	WITHOUT_CLASSIFICATION	7.887636554007361E-6	IMPLEMENTATION
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999889474209858	WITHOUT_CLASSIFICATION	1.1052579014159017E-5	IMPLEMENTATION
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999686271020182	WITHOUT_CLASSIFICATION	3.137289798179953E-5	IMPLEMENTATION
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997783346621936	WITHOUT_CLASSIFICATION	2.216653378062985E-4	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9993914598159985	WITHOUT_CLASSIFICATION	6.085401840014446E-4	IMPLEMENTATION
//return currentId;	WITHOUT_CLASSIFICATION	0.9974743468868447	WITHOUT_CLASSIFICATION	0.0025256531131554053	IMPLEMENTATION
//reset the id	WITHOUT_CLASSIFICATION	0.9979763127518505	WITHOUT_CLASSIFICATION	0.0020236872481495245	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//reset the version	WITHOUT_CLASSIFICATION	0.9972666444454027	WITHOUT_CLASSIFICATION	0.0027333555545973206	IMPLEMENTATION
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994926307134445	WITHOUT_CLASSIFICATION	5.07369286555466E-4	IMPLEMENTATION
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999437566892321	WITHOUT_CLASSIFICATION	5.6243310767890734E-5	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998364130321971	WITHOUT_CLASSIFICATION	1.6358696780300117E-4	IMPLEMENTATION
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998053116506961	WITHOUT_CLASSIFICATION	1.9468834930393136E-4	IMPLEMENTATION
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9791973775313233	WITHOUT_CLASSIFICATION	0.02080262246867665	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9988892433413519	WITHOUT_CLASSIFICATION	0.0011107566586481138	IMPLEMENTATION
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9998891283047425	WITHOUT_CLASSIFICATION	1.1087169525739613E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998364130321971	WITHOUT_CLASSIFICATION	1.6358696780300117E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999358218984383	WITHOUT_CLASSIFICATION	6.417810156170366E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998364130321971	WITHOUT_CLASSIFICATION	1.6358696780300117E-4	IMPLEMENTATION
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9998387087232218	WITHOUT_CLASSIFICATION	1.6129127677829637E-4	IMPLEMENTATION
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996828202751005	WITHOUT_CLASSIFICATION	3.171797248995793E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9971142469830385	WITHOUT_CLASSIFICATION	0.002885753016961446	IMPLEMENTATION
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9993335485823046	WITHOUT_CLASSIFICATION	6.664514176953228E-4	IMPLEMENTATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999367522135817	WITHOUT_CLASSIFICATION	6.324778641833151E-5	IMPLEMENTATION
// Collection Types:	WITHOUT_CLASSIFICATION	0.9993883952153614	WITHOUT_CLASSIFICATION	6.116047846387078E-4	IMPLEMENTATION
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998220505729758	WITHOUT_CLASSIFICATION	1.77949427024103E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999317456598383	WITHOUT_CLASSIFICATION	6.825434016176456E-5	IMPLEMENTATION
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9990208929818786	WITHOUT_CLASSIFICATION	9.791070181214155E-4	IMPLEMENTATION
//value is the entity name	WITHOUT_CLASSIFICATION	0.9994514815479477	WITHOUT_CLASSIFICATION	5.485184520522033E-4	IMPLEMENTATION
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999728516719922	WITHOUT_CLASSIFICATION	2.7148328007672084E-5	IMPLEMENTATION
//TODO!	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9994514815479477	WITHOUT_CLASSIFICATION	5.485184520522033E-4	IMPLEMENTATION
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9931449820379128	WITHOUT_CLASSIFICATION	0.006855017962087222	IMPLEMENTATION
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9973206931043643	WITHOUT_CLASSIFICATION	0.0026793068956357663	IMPLEMENTATION
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999809086165746	WITHOUT_CLASSIFICATION	1.9091383425348503E-5	IMPLEMENTATION
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999983228720196	WITHOUT_CLASSIFICATION	1.6771279804076243E-5	IMPLEMENTATION
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999876945375403	WITHOUT_CLASSIFICATION	1.2305462459588382E-5	IMPLEMENTATION
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998270183328023	WITHOUT_CLASSIFICATION	1.7298166719772784E-4	IMPLEMENTATION
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999985727671774	WITHOUT_CLASSIFICATION	1.4272328226266726E-6	IMPLEMENTATION
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999497517644145	WITHOUT_CLASSIFICATION	5.024823558545047E-5	IMPLEMENTATION
//TODO!!!	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994143805282195	WITHOUT_CLASSIFICATION	5.856194717805544E-4	IMPLEMENTATION
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994143805282195	WITHOUT_CLASSIFICATION	5.856194717805544E-4	IMPLEMENTATION
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999011704328661	WITHOUT_CLASSIFICATION	9.88295671339321E-5	IMPLEMENTATION
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999885653720022	WITHOUT_CLASSIFICATION	1.1434627997742556E-5	IMPLEMENTATION
//noop	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999997946326292	WITHOUT_CLASSIFICATION	2.0536737080298273E-6	IMPLEMENTATION
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999460726185639	WITHOUT_CLASSIFICATION	5.39273814361124E-4	IMPLEMENTATION
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998616939820567	WITHOUT_CLASSIFICATION	1.3830601794333967E-4	IMPLEMENTATION
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999965346433691	WITHOUT_CLASSIFICATION	3.4653566309573055E-6	IMPLEMENTATION
//TODO	WITHOUT_CLASSIFICATION	0.9979933802507672	WITHOUT_CLASSIFICATION	0.0020066197492327156	IMPLEMENTATION
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999054163365965	WITHOUT_CLASSIFICATION	9.458366340354713E-5	IMPLEMENTATION
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9996867444193154	WITHOUT_CLASSIFICATION	3.132555806845975E-4	IMPLEMENTATION
//cache this	WITHOUT_CLASSIFICATION	0.9954895679953859	WITHOUT_CLASSIFICATION	0.004510432004614095	IMPLEMENTATION
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9982289027299769	WITHOUT_CLASSIFICATION	0.001771097270023191	IMPLEMENTATION
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998344099735493	WITHOUT_CLASSIFICATION	1.6559002645072512E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999717530733364	WITHOUT_CLASSIFICATION	2.8246926663597703E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9988982579049523	WITHOUT_CLASSIFICATION	0.001101742095047719	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9952643733208288	WITHOUT_CLASSIFICATION	0.004735626679171201	IMPLEMENTATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9952643733208288	WITHOUT_CLASSIFICATION	0.004735626679171201	IMPLEMENTATION
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9996487317358762	WITHOUT_CLASSIFICATION	3.5126826412370073E-4	IMPLEMENTATION
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999317456598383	WITHOUT_CLASSIFICATION	6.825434016176456E-5	IMPLEMENTATION
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9982006112187184	WITHOUT_CLASSIFICATION	0.0017993887812816102	IMPLEMENTATION
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999248732176458	WITHOUT_CLASSIFICATION	7.512678235419359E-4	IMPLEMENTATION
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997058739146256	WITHOUT_CLASSIFICATION	2.941260853743341E-4	IMPLEMENTATION
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999792556802366	WITHOUT_CLASSIFICATION	2.0744319763385533E-5	IMPLEMENTATION
//remember the uk value	WITHOUT_CLASSIFICATION	0.9996275160481037	WITHOUT_CLASSIFICATION	3.7248395189626624E-4	IMPLEMENTATION
//NOOP	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9993694778633344	WITHOUT_CLASSIFICATION	6.305221366655945E-4	IMPLEMENTATION
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999127475587468	WITHOUT_CLASSIFICATION	8.72524412531534E-5	IMPLEMENTATION
// return false;	WITHOUT_CLASSIFICATION	0.9994937501132614	WITHOUT_CLASSIFICATION	5.062498867386578E-4	IMPLEMENTATION
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999991198502428	WITHOUT_CLASSIFICATION	8.801497573078694E-7	IMPLEMENTATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999696173991562	WITHOUT_CLASSIFICATION	3.03826008437668E-5	IMPLEMENTATION
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999944337322737	WITHOUT_CLASSIFICATION	5.566267726248317E-6	IMPLEMENTATION
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9950029486196577	WITHOUT_CLASSIFICATION	0.004997051380342368	IMPLEMENTATION
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9995307776469957	WITHOUT_CLASSIFICATION	4.6922235300427657E-4	IMPLEMENTATION
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999852226854201	WITHOUT_CLASSIFICATION	1.4777314579988104E-5	IMPLEMENTATION
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999773385850804	WITHOUT_CLASSIFICATION	2.2661414919548845E-5	IMPLEMENTATION
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998497491226697	WITHOUT_CLASSIFICATION	1.5025087733036037E-4	IMPLEMENTATION
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999862453082805	WITHOUT_CLASSIFICATION	1.3754691719497478E-4	IMPLEMENTATION
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999758814765748	WITHOUT_CLASSIFICATION	2.411852342520112E-5	IMPLEMENTATION
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999776409748552	WITHOUT_CLASSIFICATION	2.235902514486346E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9992067735674507	WITHOUT_CLASSIFICATION	7.932264325492433E-4	IMPLEMENTATION
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9998934812558563	WITHOUT_CLASSIFICATION	1.065187441437893E-4	IMPLEMENTATION
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999978122367083	WITHOUT_CLASSIFICATION	2.187763291773505E-6	IMPLEMENTATION
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999990819673449	WITHOUT_CLASSIFICATION	9.180326550067074E-7	IMPLEMENTATION
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9995319273788063	WITHOUT_CLASSIFICATION	4.6807262119381214E-4	IMPLEMENTATION
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.8966938690707495	WITHOUT_CLASSIFICATION	0.1033061309292504	IMPLEMENTATION
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9990347050844626	WITHOUT_CLASSIFICATION	9.652949155374414E-4	IMPLEMENTATION
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.994228578950172	WITHOUT_CLASSIFICATION	0.005771421049828012	IMPLEMENTATION
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998276695652432	WITHOUT_CLASSIFICATION	1.723304347567908E-4	IMPLEMENTATION
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.99983168817574	WITHOUT_CLASSIFICATION	1.6831182426005331E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999072024616255	WITHOUT_CLASSIFICATION	9.279753837451875E-5	IMPLEMENTATION
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998442816484421	WITHOUT_CLASSIFICATION	1.557183515579238E-4	IMPLEMENTATION
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.99884170053767	WITHOUT_CLASSIFICATION	0.0011582994623300365	IMPLEMENTATION
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997482289130655	WITHOUT_CLASSIFICATION	2.517710869345864E-4	IMPLEMENTATION
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9997829951589801	WITHOUT_CLASSIFICATION	2.1700484101995788E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999468566094412	WITHOUT_CLASSIFICATION	5.314339055879946E-4	IMPLEMENTATION
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999468566094412	WITHOUT_CLASSIFICATION	5.314339055879946E-4	IMPLEMENTATION
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996494433048159	WITHOUT_CLASSIFICATION	3.5055669518417473E-4	IMPLEMENTATION
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999433886350142	WITHOUT_CLASSIFICATION	5.661136498579815E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999910359161187	WITHOUT_CLASSIFICATION	8.964083881301604E-5	IMPLEMENTATION
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999910359161187	WITHOUT_CLASSIFICATION	8.964083881301604E-5	IMPLEMENTATION
// use default behavior	WITHOUT_CLASSIFICATION	0.9999479904599702	WITHOUT_CLASSIFICATION	5.20095400297738E-5	IMPLEMENTATION
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9974290740396035	WITHOUT_CLASSIFICATION	0.002570925960396487	IMPLEMENTATION
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9945632258551403	WITHOUT_CLASSIFICATION	0.005436774144859591	IMPLEMENTATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999907719709901	WITHOUT_CLASSIFICATION	9.228029010019656E-6	IMPLEMENTATION
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998923827865227	WITHOUT_CLASSIFICATION	1.0761721347729435E-4	IMPLEMENTATION
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999885070227178	WITHOUT_CLASSIFICATION	1.1492977282182542E-5	IMPLEMENTATION
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999885070227178	WITHOUT_CLASSIFICATION	1.1492977282182542E-5	IMPLEMENTATION
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999833698578574	WITHOUT_CLASSIFICATION	1.6630142142501808E-5	IMPLEMENTATION
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9994409307250182	WITHOUT_CLASSIFICATION	5.590692749818606E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// returnign null!	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// includes last '.'	WITHOUT_CLASSIFICATION	0.9994952605649962	WITHOUT_CLASSIFICATION	5.04739435003872E-4	IMPLEMENTATION
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9996941909378225	WITHOUT_CLASSIFICATION	3.058090621775715E-4	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999692523952259	WITHOUT_CLASSIFICATION	3.074760477403747E-5	IMPLEMENTATION
// first time we find match!	WITHOUT_CLASSIFICATION	0.9998350203356263	WITHOUT_CLASSIFICATION	1.6497966437364165E-4	IMPLEMENTATION
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999946442388148	WITHOUT_CLASSIFICATION	5.355761185216164E-6	IMPLEMENTATION
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9991657004952275	WITHOUT_CLASSIFICATION	8.342995047726268E-4	IMPLEMENTATION
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9997860817691997	WITHOUT_CLASSIFICATION	2.1391823080041305E-4	IMPLEMENTATION
// the current iterator	WITHOUT_CLASSIFICATION	0.9994748946865942	WITHOUT_CLASSIFICATION	5.251053134058936E-4	IMPLEMENTATION
// the last used iterator	WITHOUT_CLASSIFICATION	0.99980102484815	WITHOUT_CLASSIFICATION	1.9897515184993733E-4	IMPLEMENTATION
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999135206688081	WITHOUT_CLASSIFICATION	8.647933119185714E-5	IMPLEMENTATION
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9986306131299014	WITHOUT_CLASSIFICATION	0.001369386870098506	IMPLEMENTATION
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9006302608227117	WITHOUT_CLASSIFICATION	0.0993697391772884	IMPLEMENTATION
//doable if needed	WITHOUT_CLASSIFICATION	0.558755942064571	IMPLEMENTATION	0.44124405793542903	WITHOUT_CLASSIFICATION
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999439235823064	WITHOUT_CLASSIFICATION	5.607641769360504E-5	IMPLEMENTATION
// peek ahead	WITHOUT_CLASSIFICATION	0.9993915340051894	WITHOUT_CLASSIFICATION	6.084659948105903E-4	IMPLEMENTATION
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999962010008685	WITHOUT_CLASSIFICATION	3.7989991313978076E-6	IMPLEMENTATION
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9992706530933477	WITHOUT_CLASSIFICATION	7.293469066521925E-4	IMPLEMENTATION
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9769082624229987	WITHOUT_CLASSIFICATION	0.02309173757700123	IMPLEMENTATION
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.996568791202328	WITHOUT_CLASSIFICATION	0.003431208797672061	IMPLEMENTATION
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9994386818235266	WITHOUT_CLASSIFICATION	5.61318176473472E-4	IMPLEMENTATION
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9980070260707997	WITHOUT_CLASSIFICATION	0.0019929739292001967	IMPLEMENTATION
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9993513790768205	WITHOUT_CLASSIFICATION	6.486209231795086E-4	IMPLEMENTATION
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9968413076161011	WITHOUT_CLASSIFICATION	0.0031586923838988904	IMPLEMENTATION
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9993529370451337	WITHOUT_CLASSIFICATION	6.470629548662273E-4	IMPLEMENTATION
//faster?	WITHOUT_CLASSIFICATION	0.99991120461732	WITHOUT_CLASSIFICATION	8.879538267995327E-5	IMPLEMENTATION
// the name of a class	WITHOUT_CLASSIFICATION	0.9999442473206851	WITHOUT_CLASSIFICATION	5.575267931483028E-5	IMPLEMENTATION
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999114553794971	WITHOUT_CLASSIFICATION	8.854462050280899E-5	IMPLEMENTATION
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999961135573533	WITHOUT_CLASSIFICATION	3.886442646688721E-6	IMPLEMENTATION
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999392880605603	WITHOUT_CLASSIFICATION	6.0711939439806046E-5	IMPLEMENTATION
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999820857586731	WITHOUT_CLASSIFICATION	1.79142413268273E-5	IMPLEMENTATION
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999686020072576	WITHOUT_CLASSIFICATION	3.139799274246898E-5	IMPLEMENTATION
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999871487561052	WITHOUT_CLASSIFICATION	1.285124389481432E-5	IMPLEMENTATION
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9997277211263895	WITHOUT_CLASSIFICATION	2.722788736104758E-4	IMPLEMENTATION
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9994325134615626	WITHOUT_CLASSIFICATION	5.674865384373897E-4	IMPLEMENTATION
//readResolveObject	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999907239911101	WITHOUT_CLASSIFICATION	9.276008889908698E-5	IMPLEMENTATION
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999846225555983	WITHOUT_CLASSIFICATION	1.5377444401746693E-5	IMPLEMENTATION
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999641842929634	WITHOUT_CLASSIFICATION	3.5815707036610217E-5	IMPLEMENTATION
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999188504629689	WITHOUT_CLASSIFICATION	8.11495370311099E-5	IMPLEMENTATION
// Write HTML header	WITHOUT_CLASSIFICATION	0.999563810854119	WITHOUT_CLASSIFICATION	4.361891458808803E-4	IMPLEMENTATION
// Handle actions	WITHOUT_CLASSIFICATION	0.9997196466805737	WITHOUT_CLASSIFICATION	2.803533194262526E-4	IMPLEMENTATION
// Print page	WITHOUT_CLASSIFICATION	0.9994223097378266	WITHOUT_CLASSIFICATION	5.77690262173372E-4	IMPLEMENTATION
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999401146839498	WITHOUT_CLASSIFICATION	5.988531605019497E-4	IMPLEMENTATION
// End unit of work	WITHOUT_CLASSIFICATION	0.9996080463590636	WITHOUT_CLASSIFICATION	3.919536409363871E-4	IMPLEMENTATION
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999829918449198	WITHOUT_CLASSIFICATION	1.7008155080199726E-4	IMPLEMENTATION
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9956841750088816	WITHOUT_CLASSIFICATION	0.004315824991118378	IMPLEMENTATION
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9994877465498904	WITHOUT_CLASSIFICATION	5.122534501096104E-4	IMPLEMENTATION
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999908150290089	WITHOUT_CLASSIFICATION	9.184970991104229E-5	IMPLEMENTATION
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9939080620735241	WITHOUT_CLASSIFICATION	0.006091937926475952	IMPLEMENTATION
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.7037762232957125	WITHOUT_CLASSIFICATION	0.2962237767042874	IMPLEMENTATION
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9996780248065341	WITHOUT_CLASSIFICATION	3.2197519346585716E-4	IMPLEMENTATION
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999200596665203	WITHOUT_CLASSIFICATION	7.994033347972454E-5	IMPLEMENTATION
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999471061871583	WITHOUT_CLASSIFICATION	5.2893812841747805E-5	IMPLEMENTATION
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.99994471785214	WITHOUT_CLASSIFICATION	5.528214785991247E-5	IMPLEMENTATION
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999231705502291	WITHOUT_CLASSIFICATION	7.682944977091338E-5	IMPLEMENTATION
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998220582215509	WITHOUT_CLASSIFICATION	1.7794177844904715E-4	IMPLEMENTATION
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999637594452335	WITHOUT_CLASSIFICATION	3.624055476647341E-5	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9957923015149109	WITHOUT_CLASSIFICATION	0.004207698485089013	IMPLEMENTATION
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9957923015149109	WITHOUT_CLASSIFICATION	0.004207698485089013	IMPLEMENTATION
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999570853609	WITHOUT_CLASSIFICATION	4.291463904704945E-8	IMPLEMENTATION
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999940164065128	WITHOUT_CLASSIFICATION	5.983593487195897E-6	IMPLEMENTATION
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.99999590052007	WITHOUT_CLASSIFICATION	4.099479929929411E-6	IMPLEMENTATION
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999955738179762	WITHOUT_CLASSIFICATION	4.4261820238313795E-6	IMPLEMENTATION
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999661400442313	WITHOUT_CLASSIFICATION	3.385995576868518E-5	IMPLEMENTATION
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999293152108808	WITHOUT_CLASSIFICATION	7.068478911926093E-5	IMPLEMENTATION
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999194911007454	WITHOUT_CLASSIFICATION	8.050889925454443E-5	IMPLEMENTATION
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999553323000143	WITHOUT_CLASSIFICATION	4.466769998579652E-5	IMPLEMENTATION
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999735090911068	WITHOUT_CLASSIFICATION	2.6490908893200416E-5	IMPLEMENTATION
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999904196590537	WITHOUT_CLASSIFICATION	9.58034094631299E-6	IMPLEMENTATION
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999992739902464	WITHOUT_CLASSIFICATION	7.260097536046836E-6	IMPLEMENTATION
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996304602423266	WITHOUT_CLASSIFICATION	3.695397576733393E-4	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999985783370171	WITHOUT_CLASSIFICATION	1.4216629829684198E-6	IMPLEMENTATION
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9998371610570637	WITHOUT_CLASSIFICATION	1.6283894293625726E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995173713267267	WITHOUT_CLASSIFICATION	4.8262867327336146E-4	IMPLEMENTATION
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995173713267267	WITHOUT_CLASSIFICATION	4.8262867327336146E-4	IMPLEMENTATION
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999865249692887	WITHOUT_CLASSIFICATION	1.3475030711171228E-5	IMPLEMENTATION
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999659921049177	WITHOUT_CLASSIFICATION	3.400789508236509E-5	IMPLEMENTATION
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9998154479006467	WITHOUT_CLASSIFICATION	1.8455209935332425E-4	IMPLEMENTATION
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999917177611936	WITHOUT_CLASSIFICATION	8.282238806508105E-6	IMPLEMENTATION
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996906516126212	WITHOUT_CLASSIFICATION	3.093483873787511E-4	IMPLEMENTATION
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998727663874203	WITHOUT_CLASSIFICATION	1.2723361257974182E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//element //index -> id	WITHOUT_CLASSIFICATION	0.999938494461592	WITHOUT_CLASSIFICATION	6.150553840792156E-5	IMPLEMENTATION
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9998300834124151	WITHOUT_CLASSIFICATION	1.699165875849503E-4	IMPLEMENTATION
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998552996895794	WITHOUT_CLASSIFICATION	1.4470031042054237E-4	IMPLEMENTATION
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999708652553628	WITHOUT_CLASSIFICATION	2.9134744637211143E-4	IMPLEMENTATION
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999474161883389	WITHOUT_CLASSIFICATION	5.258381166096039E-5	IMPLEMENTATION
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9993813992047157	WITHOUT_CLASSIFICATION	6.186007952843145E-4	IMPLEMENTATION
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999802825910353	WITHOUT_CLASSIFICATION	1.9717408964644137E-5	IMPLEMENTATION
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9993973276268504	WITHOUT_CLASSIFICATION	6.026723731495682E-4	IMPLEMENTATION
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9992154137974517	WITHOUT_CLASSIFICATION	7.845862025482334E-4	IMPLEMENTATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998782294923643	WITHOUT_CLASSIFICATION	1.2177050763577714E-4	IMPLEMENTATION
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999843616613274	WITHOUT_CLASSIFICATION	1.5638338672537136E-5	IMPLEMENTATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999984635172204	WITHOUT_CLASSIFICATION	1.5364827796066915E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9998056461258292	WITHOUT_CLASSIFICATION	1.9435387417078863E-4	IMPLEMENTATION
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999954241648584	WITHOUT_CLASSIFICATION	4.575835141522138E-6	IMPLEMENTATION
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999997019576823	WITHOUT_CLASSIFICATION	2.9804231766233315E-7	IMPLEMENTATION
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999992396223754	WITHOUT_CLASSIFICATION	7.603776246598834E-7	IMPLEMENTATION
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999669835477281	WITHOUT_CLASSIFICATION	3.301645227186513E-5	IMPLEMENTATION
//Named Queries:	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999675541091921	WITHOUT_CLASSIFICATION	3.2445890807761816E-5	IMPLEMENTATION
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.978366149201328	WITHOUT_CLASSIFICATION	0.021633850798671875	IMPLEMENTATION
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9978537410038524	WITHOUT_CLASSIFICATION	0.002146258996147553	IMPLEMENTATION
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9914092623530205	WITHOUT_CLASSIFICATION	0.008590737646979396	IMPLEMENTATION
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9994283300585941	WITHOUT_CLASSIFICATION	5.716699414058563E-4	IMPLEMENTATION
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999705870897653	WITHOUT_CLASSIFICATION	2.9412910234626566E-5	IMPLEMENTATION
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999329913350429	WITHOUT_CLASSIFICATION	6.700866495713164E-5	IMPLEMENTATION
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9998031838734263	WITHOUT_CLASSIFICATION	1.9681612657379652E-4	IMPLEMENTATION
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999873710347575	WITHOUT_CLASSIFICATION	1.2628965242317664E-5	IMPLEMENTATION
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9952218167874956	WITHOUT_CLASSIFICATION	0.004778183212504499	IMPLEMENTATION
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9997769594114931	WITHOUT_CLASSIFICATION	2.2304058850690933E-4	IMPLEMENTATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997151787147394	WITHOUT_CLASSIFICATION	2.8482128526062875E-4	IMPLEMENTATION
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997951779835635	WITHOUT_CLASSIFICATION	2.0482201643638596E-4	IMPLEMENTATION
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999939148553736	WITHOUT_CLASSIFICATION	6.08514462632279E-6	IMPLEMENTATION
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9998320938247178	WITHOUT_CLASSIFICATION	1.6790617528230725E-4	IMPLEMENTATION
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999984730164159	WITHOUT_CLASSIFICATION	1.5269835840594383E-6	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997199034338041	WITHOUT_CLASSIFICATION	2.800965661958328E-4	IMPLEMENTATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997199034338041	WITHOUT_CLASSIFICATION	2.800965661958328E-4	IMPLEMENTATION
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999835249332089	WITHOUT_CLASSIFICATION	1.647506679112151E-5	IMPLEMENTATION
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999878248823765	WITHOUT_CLASSIFICATION	1.2175117623468148E-5	IMPLEMENTATION
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999780363147386	WITHOUT_CLASSIFICATION	2.196368526141225E-5	IMPLEMENTATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999695390546833	WITHOUT_CLASSIFICATION	3.0460945316708558E-5	IMPLEMENTATION
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8151445815333019	WITHOUT_CLASSIFICATION	0.18485541846669817	IMPLEMENTATION
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999695283120275	WITHOUT_CLASSIFICATION	3.0471687972581756E-5	IMPLEMENTATION
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999251167227058	WITHOUT_CLASSIFICATION	7.488327729412735E-5	IMPLEMENTATION
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9979010874561591	WITHOUT_CLASSIFICATION	0.0020989125438408904	IMPLEMENTATION
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999998122093318	WITHOUT_CLASSIFICATION	1.8779066821224857E-7	IMPLEMENTATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999561705586713	WITHOUT_CLASSIFICATION	4.382944132870621E-4	IMPLEMENTATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999604770696292	WITHOUT_CLASSIFICATION	3.95229303707075E-5	IMPLEMENTATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999988249842639	WITHOUT_CLASSIFICATION	1.1750157361008981E-5	IMPLEMENTATION
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999963273338421	WITHOUT_CLASSIFICATION	3.672666157792618E-6	IMPLEMENTATION
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9934827180251465	WITHOUT_CLASSIFICATION	0.006517281974853417	IMPLEMENTATION
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9997036176007853	WITHOUT_CLASSIFICATION	2.963823992146741E-4	IMPLEMENTATION
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999974487590509	WITHOUT_CLASSIFICATION	2.55124094906509E-6	IMPLEMENTATION
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999831278397704	WITHOUT_CLASSIFICATION	1.6872160229592415E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999472803772952	WITHOUT_CLASSIFICATION	5.2719622704809566E-5	IMPLEMENTATION
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999680384498106	WITHOUT_CLASSIFICATION	3.1961550189401946E-5	IMPLEMENTATION
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999882719884813	WITHOUT_CLASSIFICATION	1.1728011518796613E-5	IMPLEMENTATION
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9962870614379487	WITHOUT_CLASSIFICATION	0.003712938562051378	IMPLEMENTATION
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9968522395975978	WITHOUT_CLASSIFICATION	0.003147760402402262	IMPLEMENTATION
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9939314320795035	WITHOUT_CLASSIFICATION	0.006068567920496437	IMPLEMENTATION
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9995000337566049	WITHOUT_CLASSIFICATION	4.999662433950048E-4	IMPLEMENTATION
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999994822850484	WITHOUT_CLASSIFICATION	5.177149516020685E-6	IMPLEMENTATION
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9991348886874915	WITHOUT_CLASSIFICATION	8.65111312508408E-4	IMPLEMENTATION
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9998750639269658	WITHOUT_CLASSIFICATION	1.2493607303429416E-4	IMPLEMENTATION
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9984779803240307	WITHOUT_CLASSIFICATION	0.0015220196759693104	IMPLEMENTATION
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998870061189221	WITHOUT_CLASSIFICATION	1.1299388107789593E-4	IMPLEMENTATION
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.999227501595149	WITHOUT_CLASSIFICATION	7.724984048510411E-4	IMPLEMENTATION
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999930209312872	WITHOUT_CLASSIFICATION	6.979068712866718E-6	IMPLEMENTATION
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999988306779	WITHOUT_CLASSIFICATION	1.169322100029573E-6	IMPLEMENTATION
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999953064668777	WITHOUT_CLASSIFICATION	4.6935331223044166E-6	IMPLEMENTATION
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999995441525407	WITHOUT_CLASSIFICATION	4.55847459342226E-7	IMPLEMENTATION
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99930896027025	WITHOUT_CLASSIFICATION	6.910397297499247E-4	IMPLEMENTATION
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999990695719046	WITHOUT_CLASSIFICATION	9.30428095391274E-6	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999855017931676	WITHOUT_CLASSIFICATION	1.4498206832477995E-5	IMPLEMENTATION
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999909617391594	WITHOUT_CLASSIFICATION	9.038260840593139E-5	IMPLEMENTATION
//explicit = true;	WITHOUT_CLASSIFICATION	0.9983143240093076	WITHOUT_CLASSIFICATION	0.0016856759906923719	IMPLEMENTATION
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999390648288459	WITHOUT_CLASSIFICATION	6.0935171154068855E-5	IMPLEMENTATION
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999808139100491	WITHOUT_CLASSIFICATION	1.9186089950935954E-5	IMPLEMENTATION
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999812381555676	WITHOUT_CLASSIFICATION	1.8761844432323378E-5	IMPLEMENTATION
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999884903767629	WITHOUT_CLASSIFICATION	1.1509623237105489E-4	IMPLEMENTATION
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999868799474565	WITHOUT_CLASSIFICATION	1.3120052543600206E-5	IMPLEMENTATION
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9698241410811126	WITHOUT_CLASSIFICATION	0.03017585891888745	IMPLEMENTATION
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999984663840141	WITHOUT_CLASSIFICATION	1.5336159858331504E-6	IMPLEMENTATION
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999985783370171	WITHOUT_CLASSIFICATION	1.4216629829684198E-6	IMPLEMENTATION
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9994477401257932	WITHOUT_CLASSIFICATION	5.522598742068422E-4	IMPLEMENTATION
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999923470351975	WITHOUT_CLASSIFICATION	7.652964802471034E-6	IMPLEMENTATION
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9986841968606499	WITHOUT_CLASSIFICATION	0.001315803139350102	IMPLEMENTATION
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999884845333292	WITHOUT_CLASSIFICATION	1.1515466670833659E-5	IMPLEMENTATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999995561557058	WITHOUT_CLASSIFICATION	4.4384429418003934E-7	IMPLEMENTATION
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999214173888638	WITHOUT_CLASSIFICATION	7.858261113625793E-5	IMPLEMENTATION
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999925774396552	WITHOUT_CLASSIFICATION	7.422560344782399E-6	IMPLEMENTATION
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9444792283069529	IMPLEMENTATION	0.05552077169304703	WITHOUT_CLASSIFICATION
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999979826525657	WITHOUT_CLASSIFICATION	2.0173474343451702E-6	IMPLEMENTATION
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9994688559241611	WITHOUT_CLASSIFICATION	5.311440758389771E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9997939154633001	WITHOUT_CLASSIFICATION	2.0608453669978386E-4	IMPLEMENTATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.998422164089252	WITHOUT_CLASSIFICATION	0.0015778359107480083	IMPLEMENTATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999729536598242	WITHOUT_CLASSIFICATION	2.7046340175920844E-5	IMPLEMENTATION
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9974944945719739	WITHOUT_CLASSIFICATION	0.0025055054280261205	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996950839972718	WITHOUT_CLASSIFICATION	3.0491600272819714E-4	IMPLEMENTATION
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9989158382235309	WITHOUT_CLASSIFICATION	0.0010841617764691008	IMPLEMENTATION
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9904461361766704	WITHOUT_CLASSIFICATION	0.00955386382332968	IMPLEMENTATION
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999672476927169	WITHOUT_CLASSIFICATION	3.275230728309401E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996950839972718	WITHOUT_CLASSIFICATION	3.0491600272819714E-4	IMPLEMENTATION
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.8107343860888663	WITHOUT_CLASSIFICATION	0.18926561391113367	IMPLEMENTATION
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9976829887314446	WITHOUT_CLASSIFICATION	0.002317011268555473	IMPLEMENTATION
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.99998904806565	WITHOUT_CLASSIFICATION	1.0951934349927416E-5	IMPLEMENTATION
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9992628234831159	WITHOUT_CLASSIFICATION	7.371765168841009E-4	IMPLEMENTATION
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9985099700422432	WITHOUT_CLASSIFICATION	0.0014900299577568254	IMPLEMENTATION
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999788839214436	WITHOUT_CLASSIFICATION	2.111607855640486E-4	IMPLEMENTATION
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999984048426223	WITHOUT_CLASSIFICATION	1.5951573778204872E-6	IMPLEMENTATION
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9996528179393561	WITHOUT_CLASSIFICATION	3.471820606438902E-4	IMPLEMENTATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999881398356033	WITHOUT_CLASSIFICATION	1.186016439671527E-5	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993613274895331	WITHOUT_CLASSIFICATION	6.386725104669636E-4	IMPLEMENTATION
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9993818167852307	WITHOUT_CLASSIFICATION	6.1818321476919E-4	IMPLEMENTATION
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9473814481397808	WITHOUT_CLASSIFICATION	0.05261855186021923	IMPLEMENTATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9996711420852331	WITHOUT_CLASSIFICATION	3.288579147668438E-4	IMPLEMENTATION
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.997923749255047	WITHOUT_CLASSIFICATION	0.002076250744952966	IMPLEMENTATION
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.986340094615232	WITHOUT_CLASSIFICATION	0.013659905384768084	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9992067735674507	WITHOUT_CLASSIFICATION	7.932264325492433E-4	IMPLEMENTATION
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999886302263116	WITHOUT_CLASSIFICATION	1.136977368839389E-5	IMPLEMENTATION
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999959864871073	WITHOUT_CLASSIFICATION	4.013512892764267E-6	IMPLEMENTATION
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995312229600406	WITHOUT_CLASSIFICATION	4.687770399593952E-4	IMPLEMENTATION
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.981042076175333	WITHOUT_CLASSIFICATION	0.018957923824666927	IMPLEMENTATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9961474210470056	WITHOUT_CLASSIFICATION	0.0038525789529944995	IMPLEMENTATION
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999346373012017	WITHOUT_CLASSIFICATION	6.536269879834918E-5	IMPLEMENTATION
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9845552927026556	WITHOUT_CLASSIFICATION	0.015444707297344462	IMPLEMENTATION
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999891994088	WITHOUT_CLASSIFICATION	1.0800591331311507E-8	IMPLEMENTATION
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999756520561379	WITHOUT_CLASSIFICATION	2.4347943861977108E-5	IMPLEMENTATION
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999551573244527	WITHOUT_CLASSIFICATION	4.484267554741281E-5	IMPLEMENTATION
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9987328921821502	WITHOUT_CLASSIFICATION	0.001267107817849773	IMPLEMENTATION
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998362202118711	WITHOUT_CLASSIFICATION	1.6377978812888083E-4	IMPLEMENTATION
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.5393353868395877	IMPLEMENTATION	0.46066461316041224	WITHOUT_CLASSIFICATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9506597869621045	WITHOUT_CLASSIFICATION	0.04934021303789558	IMPLEMENTATION
// and perform the load	WITHOUT_CLASSIFICATION	0.999902359024999	WITHOUT_CLASSIFICATION	9.764097500102948E-5	IMPLEMENTATION
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998573310098228	WITHOUT_CLASSIFICATION	1.4266899017722074E-4	IMPLEMENTATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9997771266126078	WITHOUT_CLASSIFICATION	2.2287338739224665E-4	IMPLEMENTATION
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999833076535495	WITHOUT_CLASSIFICATION	1.669234645049621E-5	IMPLEMENTATION
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9994059788940778	WITHOUT_CLASSIFICATION	5.940211059221833E-4	IMPLEMENTATION
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999983473955681	WITHOUT_CLASSIFICATION	1.6526044318680389E-6	IMPLEMENTATION
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999936177218246	WITHOUT_CLASSIFICATION	6.382278175437944E-6	IMPLEMENTATION
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9993666665115654	WITHOUT_CLASSIFICATION	6.333334884345628E-4	IMPLEMENTATION
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999618494148427	WITHOUT_CLASSIFICATION	3.815058515729706E-5	IMPLEMENTATION
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9875984445296546	WITHOUT_CLASSIFICATION	0.012401555470345377	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998424399280236	WITHOUT_CLASSIFICATION	1.5756007197641802E-4	IMPLEMENTATION
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998424399280236	WITHOUT_CLASSIFICATION	1.5756007197641802E-4	IMPLEMENTATION
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998988584199163	WITHOUT_CLASSIFICATION	1.0114158008360437E-4	IMPLEMENTATION
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999905000427232	WITHOUT_CLASSIFICATION	9.499957276893063E-6	IMPLEMENTATION
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999673345129241	WITHOUT_CLASSIFICATION	3.266548707594142E-5	IMPLEMENTATION
/**	WITHOUT_CLASSIFICATION	0.5188016214435129	IMPLEMENTATION	0.4811983785564869	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999783916231164	WITHOUT_CLASSIFICATION	2.16083768835129E-5	IMPLEMENTATION
// ignore	WITHOUT_CLASSIFICATION	0.9999783916231164	WITHOUT_CLASSIFICATION	2.16083768835129E-5	IMPLEMENTATION
//        }	WITHOUT_CLASSIFICATION	0.9994805860884536	WITHOUT_CLASSIFICATION	5.194139115463865E-4	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9965970232418244	WITHOUT_CLASSIFICATION	0.003402976758175598	IMPLEMENTATION
//	WITHOUT_CLASSIFICATION	0.9999817067840583	WITHOUT_CLASSIFICATION	1.8293215941744205E-5	IMPLEMENTATION
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9925685506398237	WITHOUT_CLASSIFICATION	0.0074314493601761525	IMPLEMENTATION
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.5931191502309103	WITHOUT_CLASSIFICATION	0.4068808497690896	IMPLEMENTATION
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999599203803067	WITHOUT_CLASSIFICATION	4.007961969321671E-5	IMPLEMENTATION
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9998617445433929	WITHOUT_CLASSIFICATION	1.3825545660705663E-4	IMPLEMENTATION
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9997572952023489	WITHOUT_CLASSIFICATION	2.427047976510219E-4	IMPLEMENTATION
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9996777467866751	WITHOUT_CLASSIFICATION	3.222532133249465E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996574457292825	WITHOUT_CLASSIFICATION	3.425542707174705E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996574457292825	WITHOUT_CLASSIFICATION	3.425542707174705E-4	IMPLEMENTATION
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9990241846765686	WITHOUT_CLASSIFICATION	9.758153234313096E-4	IMPLEMENTATION
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9993881635822232	WITHOUT_CLASSIFICATION	6.118364177769137E-4	IMPLEMENTATION
// Custom sql	WITHOUT_CLASSIFICATION	0.99947644108775	WITHOUT_CLASSIFICATION	5.235589122500621E-4	IMPLEMENTATION
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9993294915366754	WITHOUT_CLASSIFICATION	6.705084633246356E-4	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9997924744679497	WITHOUT_CLASSIFICATION	2.0752553205023212E-4	IMPLEMENTATION
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999836862201518	WITHOUT_CLASSIFICATION	1.631377984817742E-5	IMPLEMENTATION
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998272733107829	WITHOUT_CLASSIFICATION	1.7272668921707108E-4	IMPLEMENTATION
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999996804614926	WITHOUT_CLASSIFICATION	3.195385073919626E-6	IMPLEMENTATION
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.999634509928289	WITHOUT_CLASSIFICATION	3.6549007171102183E-4	IMPLEMENTATION
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9997296661025372	WITHOUT_CLASSIFICATION	2.7033389746279347E-4	IMPLEMENTATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998854740939014	WITHOUT_CLASSIFICATION	1.145259060986048E-4	IMPLEMENTATION
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9993613274895331	WITHOUT_CLASSIFICATION	6.386725104669636E-4	IMPLEMENTATION
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999979227326814	WITHOUT_CLASSIFICATION	2.077267318605856E-5	IMPLEMENTATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994996765566284	WITHOUT_CLASSIFICATION	5.003234433715705E-4	IMPLEMENTATION
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999985470076396	WITHOUT_CLASSIFICATION	1.452992360402966E-6	IMPLEMENTATION
//use the id column alias	WITHOUT_CLASSIFICATION	0.9997751037839544	WITHOUT_CLASSIFICATION	2.2489621604561384E-4	IMPLEMENTATION
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9993151359030105	WITHOUT_CLASSIFICATION	6.848640969894968E-4	IMPLEMENTATION
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999162082315616	WITHOUT_CLASSIFICATION	8.37917684384032E-4	IMPLEMENTATION
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993038386874294	WITHOUT_CLASSIFICATION	6.96161312570548E-4	IMPLEMENTATION
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9995939469380066	WITHOUT_CLASSIFICATION	4.060530619932932E-4	IMPLEMENTATION
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9979941805813509	WITHOUT_CLASSIFICATION	0.0020058194186490497	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.996907181401496	WITHOUT_CLASSIFICATION	0.0030928185985039944	IMPLEMENTATION
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.996907181401496	WITHOUT_CLASSIFICATION	0.0030928185985039944	IMPLEMENTATION
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9975103898780983	WITHOUT_CLASSIFICATION	0.0024896101219017805	IMPLEMENTATION
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9998839041312515	WITHOUT_CLASSIFICATION	1.160958687485396E-4	IMPLEMENTATION
/*package*/	WITHOUT_CLASSIFICATION	0.9970369204905855	WITHOUT_CLASSIFICATION	0.0029630795094145513	IMPLEMENTATION
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9982437506986138	WITHOUT_CLASSIFICATION	0.0017562493013862203	IMPLEMENTATION
// ignore it	WITHOUT_CLASSIFICATION	0.9982547819407839	WITHOUT_CLASSIFICATION	0.0017452180592161456	IMPLEMENTATION
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999237252731746	WITHOUT_CLASSIFICATION	7.627472682540842E-5	IMPLEMENTATION
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999839031052619	WITHOUT_CLASSIFICATION	1.6096894738152288E-5	IMPLEMENTATION
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999996495993771	WITHOUT_CLASSIFICATION	3.504006228652463E-7	IMPLEMENTATION
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9993914598159985	WITHOUT_CLASSIFICATION	6.085401840014446E-4	IMPLEMENTATION
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9997312068876133	WITHOUT_CLASSIFICATION	2.687931123867026E-4	IMPLEMENTATION
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998364130321971	WITHOUT_CLASSIFICATION	1.6358696780300117E-4	IMPLEMENTATION
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9983623001415206	WITHOUT_CLASSIFICATION	0.0016376998584793933	IMPLEMENTATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999900043379153	WITHOUT_CLASSIFICATION	9.99566208460938E-6	IMPLEMENTATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9998809552451684	WITHOUT_CLASSIFICATION	1.190447548314922E-4	IMPLEMENTATION
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999898792851366	WITHOUT_CLASSIFICATION	1.0120714863378872E-5	IMPLEMENTATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998053313953675	WITHOUT_CLASSIFICATION	1.9466860463240878E-4	IMPLEMENTATION
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999954060403105	WITHOUT_CLASSIFICATION	4.593959689596615E-6	IMPLEMENTATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997062180959265	WITHOUT_CLASSIFICATION	2.9378190407349517E-4	IMPLEMENTATION
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9956798718250276	WITHOUT_CLASSIFICATION	0.0043201281749724605	IMPLEMENTATION
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9998551102890904	WITHOUT_CLASSIFICATION	1.448897109097188E-4	IMPLEMENTATION
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998751662712697	WITHOUT_CLASSIFICATION	1.24833728730294E-4	IMPLEMENTATION
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999833334577	WITHOUT_CLASSIFICATION	1.6666542295531194E-8	IMPLEMENTATION
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999692523952259	WITHOUT_CLASSIFICATION	3.074760477403747E-5	IMPLEMENTATION
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999956539325069	WITHOUT_CLASSIFICATION	4.346067493175539E-6	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997656064559547	WITHOUT_CLASSIFICATION	2.3439354404520372E-4	IMPLEMENTATION
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9997656064559547	WITHOUT_CLASSIFICATION	2.3439354404520372E-4	IMPLEMENTATION
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999099059050371	WITHOUT_CLASSIFICATION	9.009409496290756E-4	IMPLEMENTATION
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9981024723291142	WITHOUT_CLASSIFICATION	0.0018975276708857146	IMPLEMENTATION
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.99966365099102	WITHOUT_CLASSIFICATION	3.3634900898010393E-4	IMPLEMENTATION
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998069561346791	WITHOUT_CLASSIFICATION	1.9304386532100135E-4	IMPLEMENTATION
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999557167286863	WITHOUT_CLASSIFICATION	4.4283271313665764E-5	IMPLEMENTATION
